void sub_19C5B3304()
{
  JUMPOUT(0x19C5B3188);
}

uint64_t sub_19C5B3318@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;

  v60 = v57 - 1;
  v61 = ((((v56 + a1) ^ 0xBA) + v55 - ((((v56 + a1) ^ 0xBA) << ((v58 - 7) ^ 0x1Cu)) & 0x4CF12246)) ^ v55)
      * (a1 + v56 + 17);
  *(&a55 + v60) = (v61 - ((2 * v61) & 0x1A) - 115) ^ 0x8D;
  return (*(uint64_t (**)(void))(v59 + 8 * ((1707 * (v60 == 0)) ^ v58)))();
}

uint64_t sub_19C5B3394()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t *v6;
  _BYTE v7[508];
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;

  v2 = v6[5];
  v3 = *v6;
  memset(&v7[476], 69, 16);
  v4 = 583844137 * ((2 * ((v1 - 216) & 0x338344F8) - (v1 - 216) - 864240895) ^ 0xDCA2068C);
  v10 = v7;
  v11 = v1 + 0xFD04FB326B69ACFLL;
  v8 = v3;
  v9 = v2;
  *(_DWORD *)(v1 - 212) = v4 + v0 + 1688;
  *(_DWORD *)(v1 - 208) = v4 ^ 0x65311F15;
  result = off_1E3D64110[v0 + 14](v1 - 216);
  *((_DWORD *)v6 + 4) = *(_DWORD *)(v1 - 216);
  return result;
}

uint64_t sub_19C5B3498(uint64_t result)
{
  uint64_t v1;
  __int16 v2;
  int v3;
  int v4;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_DWORD *)(result + 20) ^ (-20369 * ((-2 - ((result | 0xF254) + (~(_WORD)result | 0xDAB))) ^ 0xF21F));
  *(_DWORD *)(v1 - 0xBC8884B3565C619) = ((v2 & 0x1FF ^ 0x7C7E6) - ((2 * (v2 & 0x1FF ^ 0x7C7E6)) & 0xC074A) - 1779555419) ^ 0x56D98BB5;
  *(_QWORD *)(v1 - 0xBC8884B3565C639) = 0x8BC78E5877DF6C14;
  *(_DWORD *)(v1 - 0xBC8884B3565C61DLL) = 1380648494;
  v3 = v2 ^ 0x65;
  if (v3 == 146)
  {
    v4 = 1380648510;
    goto LABEL_5;
  }
  if (v3 == 145)
  {
    *(_DWORD *)(v1 - 0xBC8884B3565C621) = 1074719476;
    v4 = 1380648514;
LABEL_5:
    *(_QWORD *)(v1 - 0xBC8884B3565C631) = 0x6C11A08DE4992805;
    *(_QWORD *)(v1 - 0xBC8884B3565C629) = 0x93EE5F721B66D7FALL;
    *(_DWORD *)(v1 - 0xBC8884B3565C61DLL) = v4;
  }
  *(_DWORD *)(result + 16) = -41684115;
  return result;
}

void sub_19C5B3610(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 ^ (545147329 * (((_DWORD)a1 - 2 * (a1 & 0x9AFB64B5) - 1694800715) ^ 0x3A0FA4D9));
  __asm { BR              X15 }
}

uint64_t sub_19C5B3708()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  _BOOL4 v6;

  v4 = 54 * (v1 ^ 0x351);
  v5 = (v4 ^ 0x23E12C84) + v3;
  v6 = v3 > 0x5C1ED2CB;
  if (v6 == v0 - 721066033 < -1545523916)
    LOBYTE(v6) = v0 - 721066033 < (int)v5;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * ((116 * ((v6 ^ (v4 - 1)) & 1)) ^ v4))
                                          - 4))(v5);
}

uint64_t sub_19C5B3860(uint64_t a1, int a2, int a3, int a4, uint64_t a5, _QWORD *a6, int a7)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  _BOOL4 v20;

  v15 = (v10 + 400) | 0x12;
  v16 = *(_DWORD *)(*a6 + 4 * a2) ^ v8;
  v17 = (v16 ^ (((v15 - 753) | 0x104) + 2070869270)) + ((2 * v16) & 0xF6DDECF6) - 2070869627;
  v18 = v9
      + ((2 * (v8 ^ 0xFB2EA9DB)) & 0xFCFDDBDE)
      + (v8 ^ 0x85504434)
      + ((v17 * a7) ^ 0xFEBCEFF4)
      + ((2 * v17 * a7) & 0xFD79DFE8);
  *(_DWORD *)(v13 + 4 * v14) = v18 - 34285988 - 2 * ((v18 + 1497155012) & 0x7B2EA9DF ^ (v18 - 34285988) & 4) + a3;
  v20 = a2 - 1465172123 > v11 || a2 - 1465172123 < a4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (v15 ^ (v20 * v12))) - 12))();
}

uint64_t sub_19C5B39C4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((v0 + 29 + ((v0 - 1362634248) & 0x513826EF) + 1438)
                                          * (v2 != 0x5094040229875C59)) ^ v0))
                            - 4))();
}

uint64_t sub_19C5B3A1C@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  _BOOL4 v4;

  v4 = v3 > (a1 ^ 0x6FCu) + 1943187453;
  if (v4 == v1 - 1118731489 < -1943189372)
    LOBYTE(v4) = v1 - 1118731489 < (int)(v3 + 204294276);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * ((183 * ((((a1 ^ 0xFC) - 89) ^ v4) & 1)) ^ a1 ^ 0x6FC))
                            - 12))();
}

uint64_t sub_19C5B3B40(uint64_t a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, int a6, char a7, int a8)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;

  v21 = v9 | 0x40;
  v22 = v11 + (v10 ^ 0xFB2EA9DB ^ a4) + (((unint64_t)(v10 ^ 0xFB2EA9DB) << (v21 - 100)) & a5);
  *(_DWORD *)(v19 + 4 * v20) = v22 + a6 + v13 + (v12 | ~((((_DWORD)v22 + a6) << (((v21 ^ 0x62) * a3) ^ a7)) + a8));
  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((((v15 ^ ((v22 + v14) >> 32)) + (v16 & ((v22 + v14) >> 31)) + v17 != 0x5094040229875C59)
                                          * v18) ^ v21))
                            - 4))();
}

uint64_t sub_19C5B3C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;

  v13 = v12 + *a10 - 299184799;
  v14 = (v10 - 299184210 < -1123642093) ^ (v13 < v12 - 1123642682);
  v15 = v10 - 299184210 > v13;
  if (v14)
    v16 = v10 - 299184210 < -1123642093;
  else
    v16 = v15;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((19 * !v16) ^ v12)) - 4))();
}

void sub_19C5B3C78()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

uint64_t sub_19C5B3C9C(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(qword_1E3D5F9B0[(42 * (*(_DWORD *)(a2 + 4) == 1055960914)) ^ 0x599u] - 8))();
}

uint64_t sub_19C5B3CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(a1 + 96) + 468) = *(_BYTE *)(*(_QWORD *)(a2 + 8) + 12);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 5752) - 8))();
}

void sub_19C5B3D4C()
{
  JUMPOUT(0x19C5B3D1CLL);
}

uint64_t sub_19C5B3D54@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_19C5B3D5C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)a1 - 1305237457 * (((a1 | 0x3E5D75CB) - (a1 & 0x3E5D75CB)) ^ 0x87E4D305);
  return (*((uint64_t (**)(void))off_1E3D64110[v1 ^ 0x1F2]
          + ((1189 * (((*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 8)) ^ (v1 - 40)) & 1)) ^ v1)))();
}

uint64_t sub_19C5B3DD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v4 = *(_DWORD *)(v2 - 0x26866D3AFFDFE015);
  v5 = v4 - 1323025765;
  if (v4 - 1323025765 < 0)
    v5 = 1323025765 - v4;
  *(_DWORD *)(v1 - 0x26866D3AFFDFE015) = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((255
                                          * (((v3 + 1280331350) & 0xB3AFACFF)
                                           + (v5 ^ 0x5F5EBBFF)
                                           + ((2 * v5) & 0xBEBD77FE) != 1600044242)) ^ v3))
                            - 12))();
}

uint64_t sub_19C5B3E74@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  *(_DWORD *)(*(_QWORD *)(v3 - 0x26866D3AFFDFE011) + 4 * (v5 - 453950560 + ((v2 - 78) | 0x120))) = *(_DWORD *)(*(_QWORD *)(v4 - 0x26866D3AFFDFE011) + 4 * (v5 - 453950560 + ((v2 - 78) | 0x120)));
  return (*(uint64_t (**)(void))(a1 + 8 * ((374 * (v5 - 1 == v1)) ^ v2)))();
}

void sub_19C5B3EDC()
{
  JUMPOUT(0x19C5B3EA4);
}

void xTQjDN5HCIo()
{
  int v0[14];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[1] = (583844137 * ((v0 - 1405249991 - 2 * ((unint64_t)v0 & 0xAC3D9639)) ^ 0xBCE32BB4)) ^ 0xD9A13099;
  sub_19C61D0E8(v0);
  __asm { BR              X10 }
}

uint64_t sub_19C5B3FC8()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v5 = ((v4 - 2 * (v4 & 0xF)) << 24) - 1895825408;
  v6 = (((v3 - ((2 * v3) & 0x62)) << 16) - 1926168576) ^ 0x8D310000;
  v7 = ((v5 ^ 0x8F000000) - ((2 * v5) & 0x20000000) + 269387223) ^ 0x100E85D7 | (v6 - ((2 * v6) & 0x30FE0000) + 411004333) ^ 0x187F6DAD;
  v8 = (((v2 - ((2 * v2) & 0x11111111)) << 8) - 1888188416) ^ 0x8F748800;
  v9 = (v7 - ((2 * v7) & 0x15B7BA60) - 1965302480) ^ 0x8ADBDD30 | (v8 - ((2 * v8) & 0xD069000) + 109267027) ^ 0x6834853;
  v10 = (v9 - ((2 * v9) & 0x6EB558A6) - 1218794413) ^ 0xB75AAC53 | (v1 - ((2 * v1) & 0x148) + 343801508) ^ 0x147DFEA4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((91 * (v10 == ((2 * v10) & 0x29873F32))) ^ 0x498u)) - 4))();
}

uint64_t sub_19C5B410C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v9 = 1980347521
     * (((&v11 | 0x86EC0B66) - &v11 + (&v11 & 0x7913F498)) ^ 0x3F084B9B);
  v17 = v1 - v9 + 671;
  v12 = v3;
  v13 = v4;
  v15 = v5;
  v16 = v6;
  v14 = v7 - ((2 * v7) & 0x8A5F56B8) + v1 + v2 - 1793246883 + v9;
  ((void (*)(int *))(*(_QWORD *)(a1 + 8 * (v1 ^ 0x25Cu)) - 12))(&v11);
  return v11 ^ v8;
}

void sub_19C5B426C(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  _DWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *a1 ^ (1980347521 * (a1 ^ 0xB9E440FD));
  v2 = (~(v3 | 0x5AC43FE1) + (v3 & 0x5AC43FE1)) ^ 0x8EAB6AC9;
  v3[0] = v1 + 1431787901 * v2 - 237;
  v3[1] = -1431787901 * v2 + 1520262315;
  ((uint64_t (*)(uint64_t))((char *)off_1E3D64110[v1 - 1434] - 4))((uint64_t)v3);
  __asm { BR              X8 }
}

void sub_19C5B4360()
{
  JUMPOUT(0x19C5B42F8);
}

void sub_19C5B43A4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v5;
  unint64_t *v6;
  unsigned int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  **(_DWORD **)(a1 + 96) = *(_DWORD *)(a2 + 16);
  v3 = 1001500783 * ((((2 * &v5) | 0xAD14CBD2) - &v5 - 1451910633) ^ 0x1C3E9A5D);
  v5 = v3 - 167302488;
  v7 = v3 ^ 0x9CAF10F4;
  v6 = &STACK[0xBC8884B3565C93D];
  sub_19C5B3498((uint64_t)&v5);
  __asm { BR              X9 }
}

uint64_t sub_19C5B4550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v37 = (v34 + v33);
  v38 = (v37 + 419694594);
  if (v38 <= 0x40)
    v39 = 64;
  else
    v39 = v37 + 419694594;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 + 8 * ((1549 * (-v33 - v34 + ((v36 - 1162) ^ 0x48Au) + v39 > 0xE)) ^ 0xFCu)) - 8))(v37, v38, 64, 1549, a5, 3710787169, a33, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_19C5B45D0(int a1, unsigned int a2, unsigned int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;

  if (a2 <= 0x40)
    a2 = a3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((21 * (v6 - a1 < v3 + v6 + v4 + a2)) ^ 0xE9u)) - 8))();
}

uint64_t sub_19C5B4620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;

  return ((uint64_t (*)(void))(*(_QWORD *)(v29
                                        + 8
                                        * ((((v28 - 111) ^ 0x49B)
                                          * ((unint64_t)&STACK[0x2C4] + a24 + (v27 + v26 + v25 - 1) < 0x10)) ^ v28))
                            - (v24 ^ 0x46F)))();
}

uint64_t sub_19C5B466C@<X0>(int8x16_t *a1@<X6>, int a2@<W8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;

  v7.i64[0] = 0x8A8A8A8A8A8A8A8ALL;
  v7.i64[1] = 0x8A8A8A8A8A8A8A8ALL;
  v8.i64[0] = 0x4545454545454545;
  v8.i64[1] = 0x4545454545454545;
  *(int8x16_t *)(v3 + (a2 + v2)) = vaddq_s8(vsubq_s8(*a1, vandq_s8(vaddq_s8(*a1, *a1), v7)), v8);
  return ((uint64_t (*)(int8x16_t *))(*(_QWORD *)(v6
                                                          + 8
                                                          * (v5 ^ 0x10 | (16 * (((v4 + 1) & 0x1FFFFFFF0) != 16))))
                                              - (((v5 ^ 0x10u) - 904) ^ 0xF0)))(&a1[1]);
}

void sub_19C5B46E0()
{
  JUMPOUT(0x19C5B46B0);
}

uint64_t sub_19C5B46EC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((((a1 + 773) | 0x62) - 20) * (v1 == v2)) ^ a1))
                            - ((2 * (a1 ^ 0xF7u)) ^ 0x1ELL)))();
}

uint64_t sub_19C5B472C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int32x4_t a43,int32x4_t a44,int32x4_t a45,int32x4_t a46)
{
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  __n128 v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int8x16_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int32x4_t v65;
  int8x16_t v66;
  int32x4_t v67;
  uint64_t (*v68)(__n128);
  int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint8x16_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  uint8x16_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  int8x16_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int8x16_t v110;
  int32x4_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  uint8x16_t v116;
  uint16x8_t v117;
  uint16x8_t v118;
  int8x16_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int8x16_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int8x16_t v133;
  int32x4_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  uint8x16_t v139;
  uint16x8_t v140;
  uint16x8_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  uint8x16_t v155;
  uint16x8_t v156;
  uint16x8_t v157;
  int8x16_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  uint8x16_t v165;
  uint16x8_t v166;
  uint16x8_t v167;
  int8x16_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  uint8x16_t v182;
  uint16x8_t v183;
  uint16x8_t v184;
  int8x16_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  uint8x16_t v196;
  uint16x8_t v197;
  uint16x8_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  _DWORD *v203;
  uint64_t v204;
  int v205;
  unint64_t v206;
  uint64_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int32x4_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t (*v216)(__n128);
  unint64_t v217;
  int8x16x4_t v218;
  int8x16x4_t v219;

  v53 = (v46 + 1908729300) & 0x8E3B1BFF;
  v54 = (v53 ^ 0xFFFFFFFFFFFFFE1ELL) + *(_QWORD *)(v48 + 8 * v46);
  HIDWORD(v214) = (v53 ^ 0x3FC27B89) + HIDWORD(a12);
  LODWORD(v214) = 1607995677;
  v55 = (__n128)vdupq_n_s32(0xB5DA1345);
  v211 = (int8x16_t)vdupq_n_s32(0x9330000u);
  v212 = vdupq_n_s32(0x9340000u);
  v56 = vdupq_n_s32(0x8AB8D4DA);
  v209 = (int8x16_t)vdupq_n_s32(0x7E089C56u);
  v210 = (int8x16_t)vdupq_n_s32(0x15700000u);
  a35 = v51 - 16;
  v57 = vdupq_n_s32(0x3F044E2Bu);
  HIDWORD(a34) = 1;
  v58 = vdupq_n_s32(0xB8FD1600);
  v208 = (int8x16_t)vdupq_n_s32(0x76404400u);
  v59 = vdupq_n_s32(0x7B2022D0u);
  v60 = (int8x16_t)vdupq_n_s32(0xD4A92D18);
  v61 = vdupq_n_s32(0xEA54968C);
  v62 = vdupq_n_s32(0xBB32DA18);
  v63 = vdupq_n_s32(0x1CAAB72Au);
  v64.i64[0] = 0x4545454545454545;
  v64.i64[1] = 0x4545454545454545;
  v65.i64[0] = 0x9200000092000000;
  v65.i64[1] = 0x9200000092000000;
  v66 = (int8x16_t)vdupq_n_s32(0x39556E54u);
  v67.i64[0] = 0xE0000000E0000000;
  v67.i64[1] = 0xE0000000E0000000;
  v68 = (uint64_t (*)(__n128))v54;
  HIDWORD(a27) = 247;
  v69 = STACK[0x310];
  v217 = STACK[0x30C];
  v70 = STACK[0x314];
  v71 = STACK[0x318];
  v72 = LODWORD(STACK[0x314]);
  v73 = LODWORD(STACK[0x318]);
  v74 = LODWORD(STACK[0x324]);
  v75 = v74 ^ 0xE2;
  if (v75 == 224)
  {
    v215 = __PAIR64__(v71, v70);
    v216 = v68;
    v219 = vld4q_s8((const char *)&STACK[0x2C4]);
    v155 = (uint8x16_t)veorq_s8(v219.val[0], v64);
    v156 = vmovl_u8(*(uint8x8_t *)v155.i8);
    v157 = vmovl_high_u8(v155);
    v158.i64[0] = 0x2400000024;
    v158.i64[1] = 0x2400000024;
    v159 = vsubq_s32((int32x4_t)vmovl_high_u16(v157), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v157, 1uLL), v158));
    v160 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v156), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v156, 1uLL), v158)), 0x18uLL);
    v161 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v156.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v156.i8, 1uLL), v158)), 0x18uLL), v65), (int8x16_t)v65);
    v162 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v160, v65), (int8x16_t)v65);
    v163 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v157.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v157.i8, 1uLL), v158)), 0x18uLL), v65), (int8x16_t)v65);
    v164 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v159, 0x18uLL), v65), (int8x16_t)v65);
    v165 = (uint8x16_t)veorq_s8(v219.val[1], v64);
    v166 = vmovl_u8(*(uint8x8_t *)v165.i8);
    v167 = vmovl_high_u8(v165);
    v168.i64[0] = 0x6600000066;
    v168.i64[1] = 0x6600000066;
    v169 = (int32x4_t)vaddw_high_u16((uint32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vshll_high_n_u16(v167, 1uLL), v168)), v167);
    v170 = (int32x4_t)vaddw_high_u16((uint32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vshll_high_n_u16(v166, 1uLL), v168)), v166);
    v171 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v166.i8, 1uLL), v168)), *(uint16x4_t *)v166.i8), 0x10uLL), v212), v211);
    v172 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v170, 0x10uLL), v212), v211);
    v173 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v167.i8, 1uLL), v168)), *(uint16x4_t *)v167.i8), 0x10uLL), v212), v211);
    v174 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v169, 0x10uLL), v212), v211);
    v175 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v161, (int32x4_t)(*(_OWORD *)&vaddq_s32(v161, v161) & __PAIR128__(0x6BFFFFFF6BFFFFFFLL, 0x6BFFFFFF6BFFFFFFLL))), (int32x4_t)v55), (int8x16_t)v55), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v171, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v171, v171), v210)), v56), (int8x16_t)v56));
    v176 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v162, (int32x4_t)(*(_OWORD *)&vaddq_s32(v162, v162) & __PAIR128__(0x6BFFFFFF6BFFFFFFLL, 0x6BFFFFFF6BFFFFFFLL))), (int32x4_t)v55), (int8x16_t)v55), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v172, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v172, v172), v210)), v56), (int8x16_t)v56));
    v177 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v163, (int32x4_t)(*(_OWORD *)&vaddq_s32(v163, v163) & __PAIR128__(0x6BFFFFFF6BFFFFFFLL, 0x6BFFFFFF6BFFFFFFLL))), (int32x4_t)v55), (int8x16_t)v55), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v173, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v173, v173), v210)), v56), (int8x16_t)v56));
    v178 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v164, (int32x4_t)(*(_OWORD *)&vaddq_s32(v164, v164) & __PAIR128__(0x6BFFFFFF6BFFFFFFLL, 0x6BFFFFFF6BFFFFFFLL))), (int32x4_t)v55), (int8x16_t)v55), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v174, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v174, v174), v210)), v56), (int8x16_t)v56));
    v179 = vsubq_s32(v178, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v178, v178), v209));
    v180 = vsubq_s32(v177, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v177, v177), v209));
    v181 = vsubq_s32(v176, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v176, v176), v209));
    v182 = (uint8x16_t)veorq_s8(v219.val[2], v64);
    v183 = vmovl_u8(*(uint8x8_t *)v182.i8);
    v184 = vmovl_high_u8(v182);
    v185.i64[0] = 0x2C0000002CLL;
    v185.i64[1] = 0x2C0000002CLL;
    v186 = vsubq_s32((int32x4_t)vmovl_high_u16(v184), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v184, 1uLL), v185));
    v187 = vsubq_s32((int32x4_t)vmovl_high_u16(v183), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v183, 1uLL), v185));
    v188 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v183.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v183.i8, 1uLL), v185)), 8uLL), v58), (int8x16_t)v58);
    v189 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v187, 8uLL), v58), (int8x16_t)v58);
    v190 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v184.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v184.i8, 1uLL), v185)), 8uLL), v58), (int8x16_t)v58);
    v191 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v186, 8uLL), v58), (int8x16_t)v58);
    v192 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v175, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v175, v175), v209)), v57), (int8x16_t)v57), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v188, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v188, v188), v208)), v59), (int8x16_t)v59));
    v193 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v181, v57), (int8x16_t)v57), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v189, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v189, v189), v208)), v59), (int8x16_t)v59));
    v194 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v180, v57), (int8x16_t)v57), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v190, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v190, v190), v208)), v59), (int8x16_t)v59));
    v195 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v179, v57), (int8x16_t)v57), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v191, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v191, v191), v208)), v59), (int8x16_t)v59));
    v196 = (uint8x16_t)veorq_s8(v219.val[3], v64);
    v197 = vmovl_u8(*(uint8x8_t *)v196.i8);
    v198 = vmovl_high_u8(v196);
    v168.i64[0] = 0x3000000030;
    v168.i64[1] = 0x3000000030;
    v199 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v192, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v192, v192), v60)), v61), (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v197.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v197.i8, 1uLL), v168)), v62), (int8x16_t)v62));
    v200 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v193, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v193, v193), v60)), v61), (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v197), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v197, 1uLL), v168)), v62), (int8x16_t)v62));
    v201 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v194, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v194, v194), v60)), v61), (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v198.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v198.i8, 1uLL), v168)), v62), (int8x16_t)v62));
    v202 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v195, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v195, v195), v60)), v61), (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v198), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v198, 1uLL), v168)), v62), (int8x16_t)v62));
    a45 = vaddq_s32(vsubq_s32(v201, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v201, v201), v66)), v63);
    a46 = vaddq_s32(vsubq_s32(v202, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v202, v202), v66)), v63);
    a43 = vaddq_s32(vsubq_s32(v199, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v199, v199), v66)), v63);
    a44 = vaddq_s32(vsubq_s32(v200, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v200, v200), v66)), v63);
    v203 = (_DWORD *)&a43 + v50 + 1949799679;
    v204 = *(v203 - 16);
    HIDWORD(v206) = *(v203 - 8) ^ *(v203 - 3) ^ *(v203 - 14) ^ v204;
    LODWORD(v206) = HIDWORD(v206);
    v205 = v206 >> 31;
    v207 = (2 * v205) & 0x39556E54;
    *v203 = v205 + v49 - v207;
    LODWORD(v213) = a8 + 629501872;
    HIDWORD(v213) = (a8 + 787886802) & 0xFEC387B6;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t (*)(__n128), unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 + 8 * ((383 * (v51 != 1949799616)) ^ 0xC3u)) - 8))(247, v207, v72, v204, v74, 2297414972, v73, a8, a9, a10, a11, a12, v208.i64[0], v208.i64[1], v209.i64[0], v209.i64[1], v210.i64[0], v210.i64[1], v211.i64[0],
             v211.i64[1],
             v212.i64[0],
             v212.i64[1],
             a23,
             a24,
             a25,
             a26,
             a27,
             v213,
             v214,
             v215,
             v216,
             v217,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42);
  }
  else if (v75 == 227)
  {
    v218 = vld4q_s8((const char *)&STACK[0x2C4]);
    v76 = (uint8x16_t)veorq_s8(v218.val[0], v64);
    v77 = vmovl_u8(*(uint8x8_t *)v76.i8);
    v78 = vmovl_high_u8(v76);
    v79 = (int32x4_t)vmovl_high_u16(v78);
    v80 = (int8x16_t)vshll_high_n_u16(v78, 1uLL);
    v81.i64[0] = 0x200000002;
    v81.i64[1] = 0x200000002;
    v82 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v78.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v78.i8, 1uLL), v81));
    v83 = vdupq_n_s32(0xDEEAF301);
    v84 = (int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v77.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v77.i8, 1uLL), v81)), v83);
    v85 = (int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v77), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v77, 1uLL), v81)), v83);
    v86 = (int8x16_t)vaddq_s32(vsubq_s32(v79, (int32x4_t)vandq_s8(v80, v81)), v83);
    v87 = (uint8x16_t)veorq_s8(v218.val[1], v64);
    v88 = vmovl_u8(*(uint8x8_t *)v87.i8);
    v89 = vmovl_high_u8(v87);
    v90.i64[0] = 0x6200000062;
    v90.i64[1] = 0x6200000062;
    v91 = vsubq_s32((int32x4_t)vmovl_high_u16(v89), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v89, 1uLL), v90));
    v92 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v89.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v89.i8, 1uLL), v90));
    v93 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v88.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v88.i8, 1uLL), v90)), 8uLL);
    v94 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v88), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v88, 1uLL), v90)), 8uLL);
    v95 = vdupq_n_s32(0xAFEC3100);
    v96 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v93, v95), (int8x16_t)v95);
    v97 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v94, v95), (int8x16_t)v95);
    v98 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v92, 8uLL), v95), (int8x16_t)v95);
    v99 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v91, 8uLL), v95), (int8x16_t)v95);
    v100 = (int8x16_t)vdupq_n_s32(0x43B0EC00u);
    v101 = (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v96, v96), v100);
    v102 = vsubq_s32(v99, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v99, v99), v100));
    v103 = vsubq_s32(v98, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v98, v98), v100));
    v104 = vsubq_s32(v97, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v97, v97), v100));
    v105 = vdupq_n_s32(0x21D87637u);
    v106 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v96, v101), v105), (int8x16_t)v105), veorq_s8(v84, (int8x16_t)v83));
    v107 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v104, v105), (int8x16_t)v105), veorq_s8(v85, (int8x16_t)v83));
    v108 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v103, v105), (int8x16_t)v105), veorq_s8((int8x16_t)vaddq_s32(v82, v83), (int8x16_t)v83));
    v109 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v102, v105), (int8x16_t)v105), veorq_s8(v86, (int8x16_t)v83));
    v110 = (int8x16_t)vdupq_n_s32(0x793D99B8u);
    v111 = vdupq_n_s32(0xFC9ECCDC);
    v112 = (int8x16_t)vaddq_s32(vsubq_s32(v106, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v106, v106), v110)), v111);
    v113 = (int8x16_t)vaddq_s32(vsubq_s32(v107, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v107, v107), v110)), v111);
    v114 = (int8x16_t)vaddq_s32(vsubq_s32(v108, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v108, v108), v110)), v111);
    v115 = (int8x16_t)vaddq_s32(vsubq_s32(v109, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v109, v109), v110)), v111);
    v116 = (uint8x16_t)veorq_s8(v218.val[2], v64);
    v117 = vmovl_u8(*(uint8x8_t *)v116.i8);
    v118 = vmovl_high_u8(v116);
    v119.i64[0] = 0x9000000090;
    v119.i64[1] = 0x9000000090;
    v120 = vsubq_s32((int32x4_t)vmovl_high_u16(v118), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v118, 1uLL), v119));
    v121 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v117), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v117, 1uLL), v119)), 0x10uLL);
    v122 = vdupq_n_s32(0x83480000);
    v123 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v117.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v117.i8, 1uLL), v119)), 0x10uLL), v122), (int8x16_t)v122);
    v124 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v121, v122), (int8x16_t)v122);
    v125 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v118.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v118.i8, 1uLL), v119)), 0x10uLL), v122), (int8x16_t)v122);
    v126 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v120, 0x10uLL), v122), (int8x16_t)v122);
    v127 = (int8x16_t)vdupq_n_s32(0x64C00000u);
    v128 = vdupq_n_s32(0xB2606ADF);
    v129 = (int32x4_t)vorrq_s8(veorq_s8(v112, (int8x16_t)v111), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v123, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v123, v123), v127)), v128), (int8x16_t)v128));
    v130 = (int32x4_t)vorrq_s8(veorq_s8(v113, (int8x16_t)v111), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v124, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v124, v124), v127)), v128), (int8x16_t)v128));
    v131 = (int32x4_t)vorrq_s8(veorq_s8(v114, (int8x16_t)v111), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v125, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v125, v125), v127)), v128), (int8x16_t)v128));
    v132 = (int32x4_t)vorrq_s8(veorq_s8(v115, (int8x16_t)v111), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v126, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v126, v126), v127)), v128), (int8x16_t)v128));
    v133 = (int8x16_t)vdupq_n_s32(0x10797E7Au);
    v134 = vdupq_n_s32(0x883CBF3D);
    v135 = (int8x16_t)vaddq_s32(vsubq_s32(v129, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v129, v129), v133)), v134);
    v136 = (int8x16_t)vaddq_s32(vsubq_s32(v130, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v130, v130), v133)), v134);
    v137 = (int8x16_t)vaddq_s32(vsubq_s32(v131, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v131, v131), v133)), v134);
    v138 = (int8x16_t)vaddq_s32(vsubq_s32(v132, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v132, v132), v133)), v134);
    v139 = (uint8x16_t)veorq_s8(v218.val[3], v64);
    v140 = vmovl_u8(*(uint8x8_t *)v139.i8);
    v141 = vmovl_high_u8(v139);
    v119.i64[0] = 0xC0000000C0;
    v119.i64[1] = 0xC0000000C0;
    v142 = vsubq_s32((int32x4_t)vmovl_high_u16(v141), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v141, 1uLL), v119));
    v143 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v140), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v140, 1uLL), v119)), 0x18uLL);
    v144 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v140.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v140.i8, 1uLL), v119)), 0x18uLL), v67), (int8x16_t)v67);
    v145 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v143, v67), (int8x16_t)v67);
    v146 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v141.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v141.i8, 1uLL), v119)), 0x18uLL), v67), (int8x16_t)v67);
    v147 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v142, 0x18uLL), v67), (int8x16_t)v67);
    v148 = vdupq_n_s32(0x6C871AC1u);
    v149 = (int32x4_t)vorrq_s8(veorq_s8(v135, (int8x16_t)v134), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v144, (int32x4_t)(*(_OWORD *)&vaddq_s32(v144, v144) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v148), (int8x16_t)v148));
    v150 = (int32x4_t)vorrq_s8(veorq_s8(v136, (int8x16_t)v134), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v145, (int32x4_t)(*(_OWORD *)&vaddq_s32(v145, v145) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v148), (int8x16_t)v148));
    v151 = (int32x4_t)vorrq_s8(veorq_s8(v137, (int8x16_t)v134), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v146, (int32x4_t)(*(_OWORD *)&vaddq_s32(v146, v146) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v148), (int8x16_t)v148));
    v152 = (int32x4_t)vorrq_s8(veorq_s8(v138, (int8x16_t)v134), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v147, (int32x4_t)(*(_OWORD *)&vaddq_s32(v147, v147) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v148), (int8x16_t)v148));
    v153 = vdupq_n_s32(0x1CAAB72Bu);
    a45 = vaddq_s32(vaddq_s32(v151, v153), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32(v151, v151), v66)));
    a46 = vaddq_s32(vaddq_s32(v152, v153), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32(v152, v152), v66)));
    a43 = vaddq_s32(vaddq_s32(v149, v153), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32(v149, v149), v66)));
    a44 = vaddq_s32(vaddq_s32(v150, v153), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32(v150, v150), v66)));
    return ((uint64_t (*)(__n128))(*(_QWORD *)(v48 + 8 * ((1445 * (a35 + 1 != v51)) ^ ((int)a8 + 767145358)))
                                           - 12))(v55);
  }
  else
  {
    LODWORD(STACK[0x30C]) = 2 * (LODWORD(STACK[0x30C]) ^ v47) + v47 - (v52 & (4 * (LODWORD(STACK[0x30C]) ^ v47)));
    LODWORD(STACK[0x310]) = (v69 ^ v47)
                          + (HIDWORD(v217) ^ v47)
                          + v47
                          - (v52 & (2 * ((v69 ^ v47) + (HIDWORD(v217) ^ v47))));
    LODWORD(STACK[0x314]) = (v72 ^ v47) + (v70 ^ v47) + v47 - (v52 & (2 * ((v72 ^ v47) + (v70 ^ v47))));
    LODWORD(STACK[0x318]) = (v73 ^ v47) + (v71 ^ v47) + v47 - (v52 & (2 * ((v73 ^ v47) + (v71 ^ v47))));
    return v68(v55);
  }
}

uint64_t sub_19C5B6154(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,uint64_t a27,int a28,int a29,unsigned int a30,unsigned int a31)
{
  uint64_t v31;
  _BOOL4 v32;

  if (a31 < a30 != a26 + 1538728370 < (a29 + 1607993993))
    v32 = a26 + 1538728370 < (a29 + 1607993993);
  else
    v32 = a26 + 1538728370 > a31;
  return ((uint64_t (*)(void))(*(_QWORD *)(v31 + 8 * ((1709 * !v32) ^ (a4 + a8 + 416))) - (a28 & 0x83447EE) + 934))();
}

uint64_t sub_19C5B61F4(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * ((376
                                                        * (v8 + 697877641 + a8 + a3 - 1684 >= (v8 + a2))) ^ a3))
                                          - 12))(781642108);
}

uint64_t sub_19C5B6250(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  return ((uint64_t (*)(void))(*(_QWORD *)(v25
                                        + 8
                                        * ((((unint64_t)(a24 + v26 - v24) < 0x10) ^ (a3 + 75)) & 1 | (8 * ((((unint64_t)(a24 + v26 - v24) < 0x10) ^ (a3 + 75)) & 1)) | a3))
                            + 3527822335
                            - (a3 - a4 - 1502)))();
}

uint64_t sub_19C5B62B4(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int8x16_t *v37;
  int8x16_t v38;
  int8x16_t v39;

  *v37 = vaddq_s8(vsubq_s8(*(int8x16_t *)(a33 + (v33 + a2)), vandq_s8(vaddq_s8(*(int8x16_t *)(a33 + (v33 + a2)), *(int8x16_t *)(a33 + (v33 + a2))), v39)), v38);
  return ((uint64_t (*)(void))(*(_QWORD *)(v36 + 8 * (((v35 & ~(v34 ^ (a8 + 10))) * a7) ^ (a4 + v34 + 1605))) - 8))();
}

uint64_t sub_19C5B631C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W3>, uint64_t a4@<X4>, int a5@<W7>, int a6@<W8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  char v13;

  v13 = *(_BYTE *)(a4 + v6 + ((a6 - a5 + 30) ^ (a2 - 10)));
  *(_BYTE *)(v7 + v10 + v9) = v13 - (v12 & (2 * v13)) + 69;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (((v7 + 1 == a1 + 64) * v11) ^ (a3 + a6 + 558))) - 8))();
}

uint64_t sub_19C5B637C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;

  v16 = v13 + 1313584051 < (a13 + 844565668);
  if ((a13 + 844565668) < 0x526CA35E != (v13 + 1313584051) < 0x526CA35E)
    v16 = (a13 + 844565668) < 0x526CA35E;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15
                                        + 8
                                        * ((4 * (((v14 + 87) ^ v16) & 1)) & 0xEF | (16 * (((v14 + 87) ^ v16) & 1)) | v14))
                            - 4))();
}

uint64_t sub_19C5B63F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;

  v16 = a8 + ((v14 - 830851608) & 0x3185CBD7) - 449;
  v17 = 1305237457 * ((~((v15 - 184) | 0xAFC8A989) + ((v15 - 184) & 0xAFC8A989)) ^ 0xE98EF0B8);
  *(_DWORD *)(v15 - 184) = (a13 + 415388340) ^ v17;
  *(_QWORD *)(v15 - 176) = a10;
  *(_DWORD *)(v15 - 168) = v17 + v14 + 1821;
  v18 = sub_19C5F6FA0(v15 - 184);
  v19 = v16 ^ STACK[0x308] & 0x3F ^ 0xEFB931CA;
  v20 = (2 * LODWORD(STACK[0x308])) & 0x32 ^ 0x30;
  *((_BYTE *)&STACK[0x2C4] + v20 + v19 - 1040154073) = -59;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v13 + 8
                                                            * ((413 * (v20 + v19 - 1040154129 < 0xFFFFFFC8)) ^ v14))
                                          - 4))(v18);
}

uint64_t sub_19C5B6524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,unsigned int a35)
{
  int v35;
  uint64_t v36;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v36 + 8 * ((883 * (v35 + ((a35 - 227) ^ 0xDF) < 0x40)) ^ a35))
                                          - 4))(3102804297);
}

uint64_t sub_19C5B6560(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11
                                        + 8
                                        * (((a4 + a8 + (v10 ^ 0x15F) - 385 - 128)
                                          * ((1040154135 - (v9 + v8)) > 6)) ^ v10))
                            - 4))();
}

uint64_t sub_19C5B65A8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  unsigned int v9;
  uint64_t v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * (v8 | (8 * (v9 < 0xF))))
                            - ((v8 - a4 - 203) ^ (a8 + 442) ^ 0x1CALL)))();
}

uint64_t sub_19C5B65E0@<X0>(int a1@<W0>, int a2@<W3>, int a3@<W8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)&v6 = 0x4545454545454545;
  *((_QWORD *)&v6 + 1) = 0x4545454545454545;
  *(_OWORD *)((char *)&STACK[0x2C4] + (a3 + a1)) = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((2028 * (((v4 - 1802430500) & 0x99289F5E) - 822 == (v3 & 0x1FFFFFFF0))) ^ (a2 + v4 + 683)))
                            - 12))();
}

uint64_t sub_19C5B6648@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W8>)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _BOOL4 v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;

  v10 = v4 < v8;
  *((_BYTE *)&STACK[0x2C4] + (a4 + v7)) = *(_BYTE *)(a3 + (v5 + a2))
                                                      - ((2 * *(_BYTE *)(a3 + (v5 + a2))) & 0x8A)
                                                      + 69;
  v11 = v5 + 1 + a1;
  v12 = v10 ^ (v11 < v8);
  v13 = v11 < v4;
  if (!v12)
    v10 = v13;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((4 * !v10) | (16 * !v10)) ^ v6)) - 4))();
}

uint64_t sub_19C5B66C0@<X0>(int a1@<W3>, int a2@<W7>, int a3@<W8>)
{
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((((a3 - 1192162999) > 0x37) * (v4 - a2 + 980)) ^ (a1 + v4 + 1312)))
                            - 8))();
}

uint64_t sub_19C5B6704@<X0>(int a1@<W7>, int a2@<W8>)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((v2 + 1456) | (2
                                                        * (((((v2 + 1456) ^ (a1 - 592)) - a1 + 1146) ^ 0x470EF294u) - a2 < 7))))
                            - 12))();
}

uint64_t sub_19C5B6744@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  _BOOL4 v5;

  *(unint64_t *)((char *)&STACK[0x2C4] + (v1 + v3)) = 0x4545454545454545;
  v5 = (v2 ^ 0x1C8u) - 1450 == ((a1 + 1) & 0x1FFFFFFF8);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((v5 | (4 * v5)) ^ v2)) - 12))();
}

uint64_t sub_19C5B6798(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8
                                             * (int)(((a4 + ((v6 + 148056) | 0xD2440401) + 755) * (v4 == v5)) ^ v6))
                            - (((v6 + 1375731287) | 0x80464802) ^ 0xD2464C07)))();
}

void sub_19C5B67FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;

  v8 = LOBYTE(STACK[0x324]) ^ 0x46;
  if (v8 == 71)
  {
    v13 = STACK[0x308];
    v14 = STACK[0x304];
    LOBYTE(STACK[0x2FC]) = ((8 * LOBYTE(STACK[0x308])) ^ 0xC0) + ((2 * ((8 * LOBYTE(STACK[0x308])) ^ 0xC0)) & 0x80) + 69;
    LOBYTE(STACK[0x2FD]) = (a8 - 108) & 0xFD ^ (v13 >> 5) ^ 0xAA;
    LOBYTE(STACK[0x2FE]) = (v13 >> 13) ^ 0x79;
    LOBYTE(STACK[0x2FF]) = (v13 >> 21) ^ 0x1B;
    HIDWORD(v15) = v14 ^ 0x17DF6C14;
    LODWORD(v15) = v13 ^ 0x80000000;
    LOBYTE(STACK[0x300]) = ((v15 >> 29) - ((2 * (v15 >> 29)) & 0xA) + 5) ^ 0x40;
    LOBYTE(STACK[0x301]) = (v14 >> 5) ^ 0x25;
    LOBYTE(STACK[0x302]) = (v14 >> 13) ^ 0xBE;
    v12 = (v14 >> 21) ^ 0xFFFFFFFB;
  }
  else
  {
    if (v8 != 68)
      goto LABEL_6;
    v9 = STACK[0x304];
    v10 = STACK[0x308];
    LOBYTE(STACK[0x2FC]) = (LODWORD(STACK[0x304]) >> ((a8 ^ (a8 - 117)) + 120)) ^ 0xFB;
    LOBYTE(STACK[0x2FD]) = (v9 >> 13) ^ 0xBE;
    LOBYTE(STACK[0x2FE]) = (v9 >> 5) ^ 0x25;
    HIDWORD(v11) = v9 ^ 0x17DF6C14;
    LODWORD(v11) = v10 ^ 0x80000000;
    LOBYTE(STACK[0x2FF]) = ((v11 >> 29) - ((2 * (v11 >> 29)) & 0x3A) - 99) ^ 0xD8;
    LOBYTE(STACK[0x300]) = (v10 >> 21) ^ 0x1B;
    LOBYTE(STACK[0x301]) = (v10 >> 13) ^ 0x79;
    LOBYTE(STACK[0x302]) = (v10 >> 5) ^ 0x37;
    LOBYTE(v12) = ((8 * v10) ^ 0xC0) + (~(2 * ((8 * v10) ^ 0xC0)) | 0x7F) + 70;
  }
  LOBYTE(STACK[0x303]) = v12;
LABEL_6:
  JUMPOUT(0x19C5B47E4);
}

uint64_t sub_19C5B6B30()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)(((((v2 + 370694737) & 0xE9E7A269) + 54) * (v0 != v1)) ^ v2))
                            - 12))();
}

uint64_t sub_19C5B6B68()
{
  char v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((343 * ((v0 & 8) != ((v1 - 512) | 0x88u) - 462)) ^ (v1 - 616)))
                            - 4))();
}

uint64_t sub_19C5B6BB0@<X0>(int a1@<W0>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  *(unint64_t *)((char *)&STACK[0x2C4] + (v3 + a2 + a1)) = 0x4545454545454545;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((748 * (v3 - (v2 & 0x1FFFFFFF8) == -8)) ^ v4))
                            - ((2 * v4) ^ 0x342u)
                            + 210))();
}

void sub_19C5B6C00()
{
  JUMPOUT(0x19C5B6BDCLL);
}

uint64_t sub_19C5B6C0C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (a1 ^ (287 * (v1 == v2))))
                            - ((a1 - 1143125311) & 0x4422B461 ^ 0xD2464C0ELL ^ (a1 - 154739059) & 0xDB7F6C9F)))();
}

void sub_19C5B6C70()
{
  JUMPOUT(0x19C5B47DCLL);
}

uint64_t sub_19C5B6C88(int a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  *((_BYTE *)&STACK[0x2C4] + (v4 + a1)) = 69;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((980 * (((v5 - 1769991474) & 0x9739A127) + v4 - 1192162999 < 0x40)) ^ (a4 + v5 + 267)))
                            - 4))();
}

uint64_t sub_19C5B6D48@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  unsigned int v2;
  char v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;

  v7 = *(_DWORD *)((char *)&STACK[0x2C4] + ((v5 + a2) & 0xFFFFFFFC) + 72);
  *(_BYTE *)(a1 + (v5 + a2)) = HIBYTE(v7) ^ 0xC6;
  *(_BYTE *)(a1 + (v5 + a2 + 1)) = v4 ^ v3 ^ BYTE2(v7) ^ 0x92;
  *(_BYTE *)(a1 + (v5 + a2 + 2)) = BYTE1(v7) ^ 0x4E;
  *(_BYTE *)(a1 + (v5 + a2 + 3)) = v7 ^ 0x41;
  v8 = LODWORD(STACK[0x320]) + 798635739;
  v9 = v5 + 1255210759 < v8;
  if (v5 + 1255210759 < v2 != v8 < v2)
    v9 = v8 < v2;
  return (*(uint64_t (**)(void))(v6 + 8 * (((16 * v9) | (v9 << 6)) ^ v4)))();
}

void sub_19C5B70BC()
{
  JUMPOUT(0x19C5B6F3CLL);
}

uint64_t sub_19C5B70D0@<X0>(char a1@<W8>)
{
  char v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v5 = v3 - 1;
  v6 = ((((v1 - 29) ^ 0xBA) + a1 - ((2 * ((v1 - 29) ^ 0xBA)) & 0x28)) ^ a1) * (~((v2 - 88) & 0xBF) + v1);
  *((_BYTE *)&STACK[0x2C4] + v5) = (v6 - ((2 * v6) & 0x2C) + 22) ^ 0x16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((104 * (v5 != 0)) ^ v2)) - 4))();
}

uint64_t sub_19C5B716C()
{
  return 0;
}

uint64_t sub_19C5B71BC(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))qword_1E3D5F9B0[(45 * (*(_DWORD *)(a2 + 4) != 1055960901)) ^ 0x1D1u])();
}

uint64_t sub_19C5B71F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;

  return (*(uint64_t (**)(void))(v2 + 8 * ((2518 * (**(_BYTE **)(a2 + 8) == 0)) ^ v3)))();
}

uint64_t sub_19C5B7220()
{
  uint64_t v0;
  int v1;
  int v2;

  v2 = v1 - ((2 * v1 + 35561844) & 0x2D4D5E8A) + 1471545343;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((1920
                                          * ((v2 ^ 0x790980BA) + ((2 * v2) & 0xDF5E5FFE ^ 0xD4C5E8A) != -273731585)) ^ 0x363u))
                            - 12))();
}

uint64_t sub_19C5B72B0@<X0>(uint64_t a1@<X0>, unsigned int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;

  v6 = v5 + v4;
  v7 = ((a2 + 1314642793) & 0x2423E7)
     + (unint64_t)(v6 + 1062731734)
     + ((unint64_t)((v6 + 1062731734) < 0x2F072FD6) << 32)
     - 789001017;
  *(_BYTE *)(*(_QWORD *)(a1 + 96) + 1168 + v7) = *(_BYTE *)(v3 + 1 + v7);
  return (*(uint64_t (**)(void))(v2 + 8 * ((560 * (v6 == -273731584)) ^ a2)))();
}

void sub_19C5B7338()
{
  JUMPOUT(0x19C5B7304);
}

uint64_t sub_19C5B7344(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  *(_DWORD *)(*(_QWORD *)(a1 + 96) + 1424) = v2 - 651764022 + ((v3 - 1811743057) | 0x69005921);
  *(_QWORD *)(*(_QWORD *)(a1 + 96) + 520) = *(_QWORD *)(a2 + 8) + 1;
  return 0;
}

uint64_t sub_19C5B73A0(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x26866D3AFFDFE015);
  v4 = v2 - 1323025765;
  v3 = v2 - 1323025765 < 0;
  v5 = 1323025765 - v2;
  if (!v3)
    v5 = v4;
  v1 = (1575213817 * (((a1 | 0xAAFCE2F0) - (a1 & 0xAAFCE2F0)) ^ 0x2799523C)) ^ *(_DWORD *)a1;
  return ((uint64_t (*)(void))(*((_QWORD *)off_1E3D64110[(v1 ^ 0x117) - 767]
                              + ((((v5 ^ 0xC76FDCFF) + (v1 ^ 0x79F7FD94) + ((2 * v5) & 0x8EDFB9FE) - 1097325781 < 0x7FFFFFFF)
                                * (((v1 ^ 0x117) - 263) ^ ((v1 ^ 0x117) - 277))) ^ v1 ^ 0x117))
                            - 12))();
}

uint64_t sub_19C5B74AC()
{
  int v0;
  _QWORD *v1;
  unsigned int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((((*(_DWORD *)(*v1 + 4 * v2) == -80827941) ^ (v3 - 66)) & 1)
                                          * v0) ^ v3))
                            - 12))();
}

uint64_t sub_19C5B74F4()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(*(_QWORD *)(v2 + 8 * (((v1 - 1448324675) & 0x5653AF57) - 767))
                                        + 8
                                        * ((((v0 - 1) < 0x7FFFFFFF)
                                          * ((((v1 - 1448324675) & 0x5653AF57) - 263) ^ (((v1 - 1448324675) & 0x5653AF57)
                                                                                       - 277))) ^ (v1 - 1448324675) & 0x5653AF57))
                            - 12))();
}

uint64_t sub_19C5B7548(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 4) = v1;
  return result;
}

uint64_t sub_19C5B7550(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))qword_1E3D5F9B0[(1697
                                                          * ((*(_DWORD *)(a2 + 4) - 1055960901) < 0x15)) ^ 0x2BCu])(4294925278);
}

uint64_t sub_19C5B7594@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  *(_DWORD *)(*(_QWORD *)(a2 + 96) + 24) = v3;
  v4 = *(_DWORD *)(a1 + 4) - ((2 * *(_DWORD *)(a1 + 4) - 2111921802) & 0x867E98B8) + 72260887;
  return (*(uint64_t (**)(_QWORD))(v2
                                           + 8
                                           * ((29
                                             * (((2 * v4) & 0xF3FD2FF8 ^ 0x827C08B8) + (v4 ^ 0xBAC1DBA0) + 1874328320 == 1773572860)) ^ 0x2A1u)))(0);
}

uint64_t sub_19C5B765C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6;
  int v7;
  int v8;

  return (*(uint64_t (**)(void))(v6 + 8 * (((v8 + v7 + ((a6 - 870) | 0x432) + 100754061 < 8) * (a6 ^ 0x4ED)) ^ a6)))();
}

uint64_t sub_19C5B76BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * (((((((a6 ^ 0x2E0) + 1374867372) & 0x12F7F) - 497) ^ 0x3AC)
                                          * ((unint64_t)(v7 - a1 - 4) < 0x20)) ^ a6 ^ 0x2E0))
                            - 4))();
}

uint64_t sub_19C5B7710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  int v7;
  unsigned int v8;

  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((30 * (v8 < ((v7 + a6 + 863) ^ (v7 + 1827) ^ (a6 - 727909512) & 0x2B6301EFu))) ^ a6)))();
}

uint64_t sub_19C5B775C@<X0>(int a1@<W4>, int a2@<W6>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v9 = a1 + v8 + v7 + 1398;
  v10 = a2 + 1263733594;
  v11 = (a2 - v5) ^ 0x191;
  v12 = v4 + v9;
  v13 = *(_OWORD *)(v12 - 31);
  v14 = a3 + v9;
  *(_OWORD *)(v14 - 15) = *(_OWORD *)(v12 - 15);
  *(_OWORD *)(v14 - 31) = v13;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((((v6 & 0xFFFFFFE0) == 32) * v11) ^ v10)) - 8))();
}

void sub_19C5B77C0()
{
  JUMPOUT(0x19C5B7788);
}

uint64_t sub_19C5B77CC(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v3
                                                     + 8
                                                     * ((((a3 - 1995480872) & 0x76F09BDA ^ 0x395) * (v5 == a2)) ^ a3))
                                         - (a3 ^ (v4 + 264))
                                         + 3031234165))(0);
}

uint64_t sub_19C5B7820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  int v6;

  return (*(uint64_t (**)(void))(v5
                              + 8 * ((1909 * ((((a5 - 808) ^ 0x9E ^ ((a5 - 808) | 0x507) ^ 0x581) & v6) == 0)) ^ a5)))();
}

uint64_t sub_19C5B7860@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  v10 = v9 + v8 + v6 - a2 + ((a1 + 462) ^ (v5 + 700));
  *(_QWORD *)(a3 - 7 + v10) = *(_QWORD *)(v4 - 7 + v10);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((964 * (a2 - (v7 & 0xFFFFFFF8) == -8)) ^ a1)) - 4))();
}

void sub_19C5B78BC()
{
  JUMPOUT(0x19C5B7888);
}

uint64_t sub_19C5B78C8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;
  int v7;

  return (*(uint64_t (**)(_QWORD))(v5 + 8 * (((v7 != a5) * ((v6 + a2 + 1065) ^ (v6 + 148))) ^ a2)))(0);
}

uint64_t sub_19C5B7900@<X0>(int a1@<W2>, int a2@<W3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_BYTE *)(a3 + (a1 + v6)) = *(_BYTE *)(v4 + (a1 + v6));
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v3
                                                     + 8 * ((526 * (a1 - 1 == (a2 ^ (v5 + 890)) - 1257661309)) ^ a2))
                                         - 8))(0);
}

uint64_t sub_19C5B794C(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))(qword_1E3D5F9B0[(123 * (*(_DWORD *)(a2 + 4) != 1055960914)) ^ 0x222u] - 4))(4294925278);
}

uint64_t sub_19C5B7990@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(a2 + 96) + 448) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 12);
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v2 + 10392) - 4))(0);
}

uint64_t sub_19C5B79E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  *(_BYTE *)(a1 + (v7 + v5)) = *(_BYTE *)(v4 + (v7 + v5));
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v1 + 8 * (((v7 - 1 != v2) * v6) ^ v3)) - 4))(0);
}

void sub_19C5B7A1C(_DWORD *a1)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *a1 + 653146051 * (a1 ^ 0xAA14B5E2);
  v2 = *((_QWORD *)off_1E3D64110[v1 - 435]
       + (int)((1387
              * (((uint64_t (*)(uint64_t, uint64_t))off_1E3D64110[v1 ^ 0x2E2])(32, 0x101004023FF3BD5) != 0)) ^ v1))
     - 4;
  __asm { BR              X8 }
}

uint64_t sub_19C5B7AA0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0x6C20E1706C20E170;
  *(_QWORD *)(result + 16) = 0x820599B932B6C7C9;
  *(_DWORD *)(result + 24) = 480950058;
  *(_QWORD *)(v2 - 0x1BB16424708BA5BLL) = result + 0x23F2B20168D9FD5;
  *(_DWORD *)(v1 + 4) = 480950058;
  return result;
}

void sub_19C5B7B20(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  _BOOL4 v4;
  _BOOL4 v5;

  v1 = 1305237457 * (((a1 | 0xCBBB35AA) - a1 + (a1 & 0x3444CA55)) ^ 0x72029364);
  v2 = *(_DWORD *)(*(_QWORD *)a1 - 0xAA902E15648DD06) + 1371905262;
  v3 = *(_DWORD *)(a1 + 24) - v1 + 114408278;
  v4 = v2 < 0x59EC6DD4;
  v5 = v2 > v3;
  if (v3 < 0x59EC6DD4 != v4)
    v5 = v4;
  __asm { BR              X13 }
}

uint64_t sub_19C5B7C10(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((28
                                          * (((*(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + (v3 - 136761575))
                                             - 1457532144) & (((v1 ^ 0x7A6) - 1466965660) & 0x5770193D ^ 0x133)) != 15)) ^ v1 ^ 0x7A6))
                            - 8))();
}

uint64_t sub_19C5B7C80()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  _BOOL4 v5;

  v4 = v0 - 1089432161 + v3 - 1269;
  v5 = v2 + 168065229 > v4;
  if ((v2 + 168065229) < 0x122B49B2 != v4 < 0x122B49B2)
    v5 = (v2 + 168065229) < 0x122B49B2;
  return (*(uint64_t (**)(void))(v1 + 8 * ((656 * !v5) ^ (v3 - 1374))))();
}

uint64_t sub_19C5B7CF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  v6 = *(unsigned __int8 *)(v1 + (v4 + v3 + 361));
  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v2 + 8 * (int)((1840 * (v6 >> 7)) ^ v5)) - 12))(a1, ((((v5 ^ 0x19A) + 285) ^ 0x1C6) & (2 * v6)) + (v6 ^ 0xFEF5EF75) + 1073397712, v3 + 1465311742 + 20 * (v5 ^ 0x19Au));
}

uint64_t sub_19C5B7D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  int v8;

  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (a7 ^ (1482
                                     * (((v8 + 11) & 0x7F ^ 0xCBE3BFBE) + ((2 * (v8 + 11)) & 0x7C) + 874266689 < 4)))))();
}

uint64_t sub_19C5B7DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _BOOL4 v12;
  _BOOL4 v13;

  v11 = v10 + a8 - 327249269;
  v12 = v11 < 0xC089232E;
  v13 = v11 > v8 + 1835954352;
  if (v12 != v8 + 1835954352 < (a7 ^ 0xB9u) - 1064754791)
    v13 = v12;
  return (*(uint64_t (**)(void))(v9 + 8 * ((1714 * !v13) ^ a7)))();
}

uint64_t sub_19C5B7E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v13 = *(unsigned __int8 *)(v8 + v10 + v11 + (v12 ^ 0xFFu));
  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v9 + 8 * (v12 ^ (57 * (a8 != -874266689))))
                                                          - 12))(a1, (v13 ^ 0xBFFEEF7D) + 2129772488 + ((2 * v13) & 0xFA), (((v12 - 369) | 0x108) ^ (a5 + 9)) + v10);
}

uint64_t sub_19C5B7EA4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;

  v13 = (*(unsigned __int8 *)(v7 + (v9 + a7 - 1602073615))
       + 749365493
       - ((*(unsigned __int8 *)(v7 + (v9 + a7 - 1602073615)) << (((v12 - 61) ^ 1) - 43)) & 0x1EA)) ^ 0x2CAA68F5 | ((a2 << 8) - (((a2 << 9) + 513897984) & 0xF545FE00) - 1980515608) ^ 0x7AA2FFE8;
  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v8 + 8 * ((71 * (v10 + v11 + a6 != 0)) ^ (v12 - 61)))
                                                  - 12))(a1, (v13 ^ 0x7EFAAF4D) - 1074397192 + ((2 * v13) & 0xFDF55E9A));
}

void sub_19C5B7F70()
{
  JUMPOUT(0x19C5B7F08);
}

uint64_t sub_19C5B7F7C(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _BOOL4 v12;

  v9 = a2 + v6 + v7 + v8 - 1955388564 - 745999639;
  v10 = v4 + 517776319;
  v11 = (v10 < 0x71F7563D) ^ (v9 < 0x71F7563D);
  v12 = v9 > v10;
  if (v11)
    v12 = v9 < 0x71F7563D;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((229 * v12) ^ (a4 + 1347))) - 8))();
}

uint64_t sub_19C5B7FFC@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = v7 - ((2 * v6) & 0x20);
  v9 = *(_QWORD *)(result + 48);
  v10 = *(_QWORD *)(result + 8);
  v11 = *(_QWORD *)(result + 16);
  *a4 = v5 + 1773694355;
  *(_DWORD *)(v11 - 0x473E55EB2C47D990) = v8;
  *(_DWORD *)(v9 - 0x75D2FCC4ED1CBBFFLL) = a2;
  *(_QWORD *)(v10 - 0x7C4785EAAD9B7D37) = v4 + (a3 - 1602073615);
  *(_DWORD *)(result + 40) = 480950058;
  return result;
}

void sub_19C5B8090(uint64_t a1)
{
  int v1;

  v1 = 961177747 * ((((2 * a1) | 0x75CF8A70) - a1 + 1159215816) ^ 0x9DB53424);
  __asm { BR              X9 }
}

uint64_t sub_19C5B8128@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * (((((v2 == 1782588970) ^ (v1 + 32)) & 1)
                                          * ((v1 - 15677174) & 0xEF37BD ^ 0x55B)) ^ v1))
                            - 12))();
}

uint64_t sub_19C5B819C@<X0>(uint64_t a1@<X8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((v1 - 1097317342) & 0x167BFFB)) - 4))();
}

uint64_t sub_19C5B82AC@<X0>(int a1@<W1>, int a2@<W7>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  int v5;
  _QWORD *v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  int v10;

  *(_DWORD *)(*v6 + 4 * (v4 + v3)) = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * (v10 ^ ((a1 == 0) * v8))) - ((v10 + a2) & v7 ^ v9)))();
}

void sub_19C5B8300()
{
  JUMPOUT(0x19C5B8234);
}

uint64_t sub_19C5B8308(uint64_t result)
{
  *(_DWORD *)(result + 16) = -1274627352;
  return result;
}

uint64_t sub_19C5B850C(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;

  v2 = *(_DWORD *)(*(_QWORD *)a1 - 0x26866D3AFFDFE015);
  v4 = v2 - 1323025765;
  v3 = v2 - 1323025765 < 0;
  v5 = 1323025765 - v2;
  if (!v3)
    v5 = v4;
  v1 = ((*(_DWORD *)(a1 + 8) ^ (653146051 * (a1 ^ 0xAA14B5E2))) + 113710153) & 0xF938EFEF;
  return (*((uint64_t (**)(void))off_1E3D64110[v1 ^ 0x518]
          + (((v1 + (v5 ^ 0xEB9FFBF5) + ((2 * v5) & 0xD73FF7EA) + 341835451 < ((2 * (v1 ^ 0x5C4)) ^ 0x7FFFFEE9u))
            * (v1 - 1332)) ^ v1)))();
}

uint64_t sub_19C5B8614(uint64_t a1, int a2, unsigned int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((*(_DWORD *)(*v6 + 4 * a3) == v3) * a2) ^ (v4 - 1157)))
                            - ((v4 - 8) | 8u)
                            + 1351))();
}

void sub_19C5B8648()
{
  JUMPOUT(0x19C5B85E4);
}

uint64_t sub_19C5B8650(uint64_t result)
{
  *(_DWORD *)(result + 12) = 1512471360;
  return result;
}

uint64_t sub_19C5B8660(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5
                                                              + 8
                                                              * ((49
                                                                * ((((((((a4 - 930364251) & 0x37743FDF) - 1358) << 31)
                                                                    + 1953079655) ^ 0x7469A167) & (a3 ^ v4))
                                                                 - 1745894071
                                                                 - ((2
                                                                   * (((((((a4 - 930364251) & 0x37743FDF) - 1358) << 31)
                                                                      + 1953079655) ^ 0x7469A167) & (a3 ^ v4))) & 0x2FDF8A7C) != -1745894071)) ^ (a4 + 1019))))(a1, 3906159310, 803179132);
}

uint64_t sub_19C5B86F8@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  int v2;
  int v3;

  *(_DWORD *)(result + 12) = ((32 * a2 - 1907098688) ^ 0x7EFEE97F)
                           + v2
                           - 618163773
                           + ((v3 - 33698447) & (2 * (32 * a2 - 1907098688)));
  return result;
}

void sub_19C5B873C()
{
  uint64_t v0;
  int v1;
  BOOL v2;
  char v3;

  v0 = MEMORY[0x1E0C80A78]();
  if (*(_QWORD *)v0)
    v2 = *(_QWORD *)(v0 + 16) == 0x43A4C4D315BFAF5DLL;
  else
    v2 = 1;
  v3 = v2;
  v1 = *(_DWORD *)(v0 + 32) - 961177747 * ((-2 - ((~(_DWORD)v0 | 0x6EE43B4D) + (v0 | 0x911BC4B2))) ^ 0x49B6CA51);
  __asm { BR              X9 }
}

uint64_t sub_19C5B8874@<X0>(int a1@<W8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  unint64_t v7;
  int v8;

  v4 = a1 & 0x698EDF37;
  *(_DWORD *)(v3 - 216) = (a1 & 0x698EDF37)
                        - 402930427 * ((((2 * (v3 - 216)) | 0x41BF8C7E) - (v3 - 216) - 551536191) ^ 0x3A663A82)
                        + 24;
  *(_BYTE *)(v3 - 200) = (-5 * ((((2 * (v3 + 40)) | 0x7E) - (v3 + 40) - 63) ^ 0x82)) ^ 0x3A;
  STACK[0x278] = (unint64_t)&STACK[0x6BE73BCCCB7EBCC7];
  *(_QWORD *)(v3 - 208) = &STACK[0x6BE73BCCCB7EBCC7];
  STACK[0x280] = (unint64_t)&STACK[0x1999DED01FDB740E];
  *(_QWORD *)(v3 - 192) = &STACK[0x1999DED01FDB740E];
  v5 = (uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * (a1 & 0x698EDF37 ^ 0x21Au)) - 8);
  STACK[0x468] = v1;
  STACK[0x270] = (unint64_t)v5;
  v6 = v5(v3 - 216);
  v7 = STACK[0x468];
  v8 = *(_DWORD *)(v3 - 196);
  LODWORD(STACK[0x610]) = v8;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v7
                                                      + 8 * (((v8 == 480950058) * (((v4 - 769) | 0x261) + 1246)) ^ v4))
                                          - 8))(v6);
}

uint64_t sub_19C5B8974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, int a18, int a19, unint64_t *a20,int a21,int a22,unint64_t a23,unint64_t a24,uint64_t a25,unint64_t a26,unint64_t *a27,uint64_t a28,unint64_t *a29,uint64_t a30,int a31,int a32,int a33,int a34,int a35,int a36,int a37,int a38,unint64_t *a39,int a40,int a41,unint64_t *a42,unint64_t a43,int a44,int a45,uint64_t a46,uint64_t a47,char *a48,int a49,unsigned int a50,unint64_t *a51,unint64_t *a52,unint64_t *a53,unint64_t *a54,uint64_t a55,uint64_t a56,char *a57,char *a58,int64x2_t a59,int64x2_t a60,int64x2_t a61,int64x2_t a62,int64x2_t a63)
{
  int64x2_t a64;
  int64x2_t a65;
  int64x2_t a66;
  int64x2_t a67;
  int64x2_t a68;
  int64x2_t a69;
  int64x2_t a70;
  int v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t (*v90)(uint64_t);
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  a45 = v74;
  STACK[0x250] = v73;
  a28 = v72;
  STACK[0x318] = 0;
  a20 = &STACK[0x50225EDCE5A35910];
  STACK[0x340] = (unint64_t)&STACK[0xAA902E15648E2D2];
  STACK[0x338] = (unint64_t)&STACK[0x473E55EB2C47DE30];
  STACK[0x330] = (unint64_t)&STACK[0x75D2FCC4ED1CC0DB];
  STACK[0x328] = (unint64_t)&STACK[0x7C4785EAAD9B82A7];
  a54 = &STACK[0x57F20741F5DF860E];
  a53 = &STACK[0x6F2C606D458B7B90];
  a52 = &STACK[0x57F20741F5DF861E];
  a51 = &STACK[0x6F2C606D458B7A4C];
  a29 = &STACK[0x2800B519C6721EA5];
  a42 = &STACK[0x50225EDCE5A35AB4];
  STACK[0x290] = (unint64_t)&STACK[0x57F20741F5DF859E];
  STACK[0x288] = (unint64_t)&STACK[0x6F2C606D458B7A30];
  a39 = &STACK[0x6EC223CCA5D6C13A];
  STACK[0x230] = (unint64_t)&STACK[0x6EC223CCA5D6C21E];
  STACK[0x248] = (unint64_t)&STACK[0x2EF0B0C65646CA4C];
  STACK[0x240] = (unint64_t)&STACK[0x8471747BBF05AB4];
  a27 = &STACK[0x143DED155B0DF388];
  v78 = *(_DWORD *)(v75 + 24);
  v79 = *(_DWORD *)(v75 + 28);
  STACK[0x208] = v75;
  LODWORD(STACK[0x25C]) = v78 ^ v70;
  v80 = v79 - v70;
  v81 = (v71 + 127) ^ 0x51Du;
  v82 = ((unint64_t)&STACK[0x5AC] ^ 0xBF792BAFBF9BFFF6)
      + 0x4086D4504064000ALL
      + ((2 * (_QWORD)&STACK[0x5AC]) & 0x7EF2575F7F37FFE8);
  STACK[0x2B8] = ((v82 % (v81 - 1658)) ^ 0xBA73FEBFF3FFF96BLL)
               + 0x458C01400C0006A5
               + ((2 * (v82 % (v81 - 1658))) & 0x56);
  v83 = ((unint64_t)&STACK[0x4E8] ^ 0x3DAE37BDFD3DFD7FLL)
      + ((2 * (_QWORD)&STACK[0x4E8]) & 0x7B5C6F7BFA7BFAF0);
  v84 = ((unint64_t)&STACK[0x5D0] ^ 0x73EAE898F6FEFE31)
      + ((2 * (_QWORD)&STACK[0x5D0]) & 0xE7D5D131EDFDFC60);
  a26 = ((unint64_t)&STACK[0x4B8] ^ 0x77B7FFEFEB7B73EFLL)
      - 0x6404E2480249
      + ((2 * (_QWORD)&STACK[0x4B8]) & 0xEF6FFFDFD6F6E7D0);
  v85 = vdupq_n_s64(v83 - 0x840028400C6C50);
  a24 = v84 - 0x42804080B4AE6800;
  v86 = vdupq_n_s64(v83 - 0x840028400C6BF0);
  a23 = v84 - 0x73EAE898F6FEFE20;
  a43 = ((unint64_t)&STACK[0x660] ^ 0x39E5BCFF6DB9FFEELL)
      - 0x39E5BCFF6DB9FFEELL
      + ((2 * (_QWORD)&STACK[0x660]) & 0x73CB79FEDB73FFD0);
  *(int64x2_t *)&STACK[0x400] = vdupq_n_s64(0xC2D5C86A42CE6ED1);
  *(_OWORD *)&STACK[0x3B0] = xmmword_19CAECB80;
  *(int64x2_t *)&STACK[0x380] = vdupq_n_s64(0x10uLL);
  v87 = STACK[0x474];
  a25 = (LODWORD(STACK[0x474]) - 634198760) & 0x25CD1DF7;
  a50 = (v87 + 856331032) & 0xCCF56FFC;
  v88 = ((v87 ^ 0x2BA) + 1128766758) & 0xBCB862AA;
  STACK[0x218] = (v87 + 629357202) & 0xDA7CC7FB;
  LODWORD(STACK[0x2A4]) = (v80 ^ 0x1FCF4AD2) + ((2 * v80) & 0xFDDFF4FC ^ 0xC0416058);
  a48 = (char *)&a9 - 0x25659E214D3ED784;
  a70 = vaddq_s64(v85, (int64x2_t)xmmword_19CAED660);
  a69 = vaddq_s64(v85, (int64x2_t)xmmword_19CAED670);
  a67 = vaddq_s64(v85, (int64x2_t)xmmword_19CAED690);
  a68 = vaddq_s64(v85, (int64x2_t)xmmword_19CAED680);
  a65 = vaddq_s64(v85, (int64x2_t)xmmword_19CAEC290);
  a66 = vaddq_s64(v85, (int64x2_t)xmmword_19CAED650);
  a63 = vaddq_s64(v85, (int64x2_t)xmmword_19CAE7980);
  a64 = vaddq_s64(v85, (int64x2_t)xmmword_19CAEC2A0);
  a61 = vaddq_s64(v86, (int64x2_t)xmmword_19CAEC290);
  a62 = vaddq_s64(v86, (int64x2_t)xmmword_19CAED650);
  a59 = vaddq_s64(v86, (int64x2_t)xmmword_19CAE7980);
  a60 = vaddq_s64(v86, (int64x2_t)xmmword_19CAEC2A0);
  a58 = (char *)&a9 - 0x25659E214D3EDA26;
  a57 = (char *)&a9 - 0x25659E214D3ED82BLL;
  *(int64x2_t *)&STACK[0x390] = vdupq_n_s64(0x65uLL);
  *(int64x2_t *)&STACK[0x3A0] = vdupq_n_s64(0xB8uLL);
  LODWORD(STACK[0x228]) = v88;
  LODWORD(STACK[0x224]) = v88 - 1435582771;
  a38 = v87 ^ 0x378;
  a37 = v87 + 1828137753;
  a36 = v87 ^ 0x37B;
  a35 = 167 * (v87 ^ 0x264);
  a34 = v87 ^ 0x225;
  a44 = v87 + 509260970;
  a18 = (v87 - 2008004204) & 0x77AFB74B;
  a19 = a18 ^ 0x36B;
  a17 = v87 ^ 0x37F;
  STACK[0x310] = v76 | 0xC8394A60449BECC0;
  LODWORD(STACK[0x2B4]) = v87 ^ 0x2BD;
  STACK[0x460] = 1431787901 * (v76 ^ 0x46EFD8E62B90AAD7);
  v89 = 1431787901 * (((v76 | 0x38015DCC82F6AEABLL) - v76 + (v76 & 0xC7FEA2337D095150)) ^ 0x7EEE852AA966047CLL);
  STACK[0x458] = v89;
  STACK[0x450] = v89 ^ 0x9149CF9;
  LODWORD(STACK[0x424]) = v87 ^ 0x27D;
  STACK[0x448] = 1305237457 * ((((2 * v76) | 0x14E04189A3E39C90) - v76 - 0xA7020C4D1F1CE48) ^ 0xDB2DB9B568486886);
  LODWORD(v84) = (2 * v87) ^ 0x6C4;
  LODWORD(STACK[0x420]) = v84;
  LODWORD(STACK[0x41C]) = v84 - 1136407043;
  LODWORD(STACK[0x418]) = v87 - 1983677320;
  LODWORD(STACK[0x414]) = v87 - 1797106788;
  LODWORD(STACK[0x22C]) = v87 + 489066327;
  LODWORD(STACK[0x23C]) = v80 ^ 0xE120B0AC;
  LODWORD(STACK[0x2C4]) = 369782863;
  a32 = v80;
  a33 = v87 - 405509798;
  a22 = 1918935518;
  a40 = -820707328;
  a41 = 9440711;
  *(int64x2_t *)&STACK[0x3E0] = vdupq_n_s64(0x47E5674AC08881B4uLL);
  *(int64x2_t *)&STACK[0x3F0] = vdupq_n_s64(0x8FCACE9581110368);
  *(int64x2_t *)&STACK[0x3D0] = vdupq_n_s64(0xC2D5C86A42CE6EE2);
  LODWORD(STACK[0x2D4]) = 489993377;
  LODWORD(STACK[0x30C]) = 2127501318;
  LODWORD(STACK[0x52C]) = v77;
  v90 = off_1E3D64110[(v71 + 127) ^ 0x374];
  STACK[0x638] = (unint64_t)&STACK[0x25659E214D3EE5C4] + ((v71 + 127) ^ 0xDA9A61DEB2C122DELL);
  v91 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8
                                                                                        + 8
                                                                                        * (int)((349
                                                                                               * (*(_DWORD *)v90 == 82779815)) ^ v81))
                                                                            - 12);
  STACK[0x2F0] = (unint64_t)off_1E3D64110[(v71 + 127) ^ 0x2A4];
  STACK[0x320] = (unint64_t)off_1E3D64110[(v71 + 127) ^ 0x297];
  STACK[0x2E8] = (unint64_t)off_1E3D64110[(v71 + 127) ^ 0x35E];
  return v91(a1, a2, a3, a4, 3814059251);
}

uint64_t sub_19C5B9258()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  STACK[0x530] = 0;
  v4 = 1431787901 * ((2 * (v2 & 0x15254568) - v2 - 354764138) ^ 0xC14A1041);
  *(_DWORD *)(v3 - 216) = v1 - v4 - 834;
  *(_QWORD *)(v3 - 184) = STACK[0x290];
  *(_DWORD *)(v3 - 188) = v4 ^ 0x145A2B4B;
  *(_QWORD *)(v3 - 200) = 0x281DA35619C7A72CLL;
  *(_QWORD *)(v3 - 208) = STACK[0x288];
  v5 = (uint64_t (*)(uint64_t))(*(_QWORD *)(v0 + 8 * (v1 - 911)) - 12);
  STACK[0x298] = (unint64_t)v5;
  v6 = v5(v3 - 216);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x468]
                                                      + 8
                                                      * (((*(_DWORD *)(v3 - 192) != 480950058)
                                                        * ((v1 - 512922834) & 0x1E9292E3 ^ 0x26B)) ^ v1))
                                          - 4))(v6);
}

uint64_t sub_19C5B933C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  int v10;
  int v11;

  LODWORD(STACK[0x52C]) = v10;
  STACK[0x588] = v9;
  LODWORD(STACK[0x610]) = v10;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8
                                                                                          + 8
                                                                                          * ((794 * (v10 == v11)) ^ (4 * (v8 ^ 0x245))))
                                                                              - (13 * ((4 * (v8 ^ 0x245)) ^ 0xB7u)
                                                                               + (unint64_t)(((4 * (v8 ^ 0x245)) ^ 0xB7u)
                                                                                                  + 1648))
                                                                              + 2298))(a1, a2, a3, a4, 3814059251);
}

void sub_19C5BED80()
{
  unint64_t v0;

  STACK[0x318] = v0;
  JUMPOUT(0x19C5B9194);
}

void sub_19C5BED88()
{
  JUMPOUT(0x19C5BED94);
}

uint64_t sub_19C5BEE44@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a3 - 126;
  v5 = (a3 + 604) ^ 0x2D9u;
  *(_DWORD *)(v3 - 212) = (a3 - 2021030585) ^ (961177747
                                             * ((1620536227 - ((v3 - 216) | 0x60976BA3) + ((v3 - 216) | 0x9F68945C)) ^ 0xB83A6540));
  nullsub_1(v3 - 216, a1, a2);
  v6 = ((uint64_t (*)(uint64_t, uint64_t))STACK[0x368])(336, 318119320);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x468] + 8 * ((1923 * (v6 != 0)) ^ v4)) - v5 + 1630))(0x3D26B857A2547401);
}

uint64_t sub_19C5BEF64(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v15 = (v8 - 1);
  v16 = (v15 | ((unint64_t)(v15 < a2) << 32)) + a1 + ((v13 + v10) & v11 ^ v12);
  *(_BYTE *)(v14 + v16) = *(_BYTE *)(*(_QWORD *)(v9 + 8 * (v13 - 1625)) + v16 - 4);
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * (v13 ^ (8 * ((_DWORD)v15 == a2)))) - 8))();
}

uint64_t sub_19C5BEFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(a8
                                        + 8 * ((529 * (((v9 == 0) ^ (-13 * (v8 ^ 0xE0))) & 1)) ^ v8))
                            - ((7 * (v8 ^ 0x108)) ^ 0x673)))();
}

uint64_t sub_19C5BF000@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;

  STACK[0x580] = a3;
  *a9 = 0xBABABABABABABABALL;
  a9[1] = 0x4545454543454557;
  v12 = 291962093 * (v10 ^ 0x11F20D4A);
  *(_DWORD *)(v11 - 212) = v9 - v12 + 665983101;
  *(_DWORD *)(v11 - 208) = v12 ^ 0x72AD58F6;
  nullsub_1(v11 - 216, a1, a2);
  LODWORD(STACK[0x49C]) = 1055961237;
  v13 = ((uint64_t (*)(uint64_t, uint64_t))STACK[0x368])(336, 1690680581);
  v14 = STACK[0x468];
  STACK[0x5E8] = v13;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * ((247 * (v13 == 0)) ^ v9))
                            - ((v9 - 408791060) & 0x185DA3FB)
                            + 607))();
}

uint64_t sub_19C5BF0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  LODWORD(STACK[0x688]) = -480908034;
  return ((uint64_t (*)(void))(*(_QWORD *)(a8
                                        + 8
                                        * (((STACK[0x580] != 0x460163FB98CB0314) * (((v8 - 432) | 0x40C) - 1206)) ^ (v8 - 126)))
                            - 8))();
}

uint64_t sub_19C5BF120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v10;

  STACK[0x588] = v8 - 16;
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * ((720 * (a5 == v10 + (v9 ^ 0x352) - 611)) ^ v9)) - 4))();
}

void sub_19C5BF160()
{
  uint64_t v0;

  ((void (*)(uint64_t))STACK[0x2E0])(v0);
  JUMPOUT(0x19C5BE294);
}

uint64_t sub_19C5BF234(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  int v13;

  STACK[0x588] = STACK[0x370] - 176;
  STACK[0x4F8] = a1;
  v10 = (v9 ^ 0xFF8FFF6FFFFFFB7FLL)
      + 0x7000903688446CLL
      + ((v9 << (((v8 - 116) | 0x28) ^ 0x2Eu)) & 0xFF1FFEDFFFFFF6FELL);
  v11 = (a1 ^ 0xBEF9EFB757FFF6FBLL)
      + 0x41061048DE8848F0
      + ((a1 << (((v8 - 117) | 0x29u) - 46)) & 0x7DF3DF6EAFFFEDF6);
  v12 = v10 < 0x36883FEB;
  v13 = v10 > v11;
  if (v12 != v11 < 0x36883FEB)
    v13 = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * (((2 * v13) | (v13 << 8)) ^ (v8 - 72))) - 4))();
}

uint64_t sub_19C5BF3C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v21 = v15 + v13;
  v22 = v21 + ((unint64_t)(v13 < v9) << 32) + v16;
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(v10 + (v21 & 0xF)) ^ *(_BYTE *)((v21 & 0xF) + v8 + 3) ^ *(_BYTE *)(v12 + (v21 & 0xF)) ^ ((v21 & 0xF) * v17) ^ (*(_BYTE *)(v18 + v22) + (v11 ^ v14));
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * (((v13 + v19 < 0x150) * v20) ^ v11)) - 4))();
}

uint64_t sub_19C5BF438(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  v16 = (v12 - 1);
  v17 = (v16 | ((unint64_t)(v16 < v15) << 32)) + a7;
  *(_BYTE *)(a1 + v17) = *(_BYTE *)((v17 & 0xF) + v8 + 3) ^ *(_BYTE *)(v10 + (v17 & 0xF)) ^ *(_BYTE *)(v11 + (v17 & 0xF)) ^ (((v16 + a7) & 0xF) * v13) ^ ((*(_BYTE *)(v14 + v17) ^ 0xCA) + (((v9 + a4) & a5 ^ 0x1A) & (2 * *(_BYTE *)(v14 + v17))) - 59);
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * ((28 * ((_DWORD)v16 != v15)) ^ v9)) - 4))();
}

uint64_t sub_19C5BF4BC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, int a7@<W8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int8x16_t *a13)
{
  int8x16_t *v13;

  v13 = (int8x16_t *)((char *)&STACK[0x6E0] + STACK[0x370] - 0x25659E214D3EDF64);
  *v13 = veorq_s8(*a13, (int8x16_t)xmmword_19CAED6A0);
  STACK[0x668] += 32;
  STACK[0x678] = a1;
  STACK[0x670] = a1;
  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 + 8 * (a7 ^ (539 * (v13 == (int8x16_t *)a1))))
                                                                                       - ((a7 + 205889119) & 0xF3BA5DFF)
                                                                                       + 482))(a1, a2, a3, a4, a5);
}

uint64_t sub_19C5BF554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, int a3@<W6>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  char *v37;
  char v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  unsigned int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t (*v129)(uint64_t);
  char *v130;
  int v131;
  uint64_t (*v132)(uint64_t);
  uint64_t v133;
  char *v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  int v156;
  unsigned int v157;
  unsigned __int8 v158;
  __int16 v159;
  int v160;
  unsigned __int16 v161;
  unsigned int v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned __int8 v167;
  unsigned int v168;
  int v169;
  unsigned int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned __int8 v182;
  int v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  unsigned int v189;
  __int16 v190;
  unsigned int v191;
  unsigned int v192;
  unsigned __int8 v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  int v225;
  int v226;
  int v227;
  unint64_t v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  int v246;
  int v247;
  unsigned int v248;
  int v249;
  unsigned int v250;
  int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  int v256;
  int v257;
  unsigned int v258;
  int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  int v267;
  unsigned int v268;
  int v269;
  unsigned int v270;
  unsigned int v271;
  int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  int v278;
  unsigned int v279;
  int v280;
  int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  int v286;
  int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  int v292;
  unsigned int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  unsigned int v298;
  int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  int v303;
  unsigned int v304;
  unsigned int v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  int v310;
  unsigned int v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t (*v314)(uint64_t);
  int v315;
  int v316;
  unsigned int v317;
  unsigned int v318;
  int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  int v324;
  char *v325;
  char *v326;
  int v327;
  int v328;
  uint64_t (*v329)(uint64_t);
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  unsigned int v335;
  int v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int v339;
  uint64_t v340;
  char *v341;
  _BYTE *v342;
  unint64_t v343;
  char *v344;
  unsigned int v345;
  char *v346;
  char *v347;
  int v348;
  int v349;
  unsigned int v350;
  int v351;
  int v352;
  int v353;
  unint64_t v355;
  unsigned __int8 *v356;
  uint64_t v357;

  v36 = a4 - 929;
  v37 = (char *)&STACK[0x19A0] + v33;
  v38 = *(_BYTE *)a1;
  *(_QWORD *)(v37 + 17) = *(_QWORD *)(a1 + 1);
  *(_DWORD *)(v37 + 25) = *(_DWORD *)(a1 + 9);
  *(_WORD *)(v37 + 29) = *(_WORD *)(a1 + 13);
  v37[31] = *(_BYTE *)(a1 + 15);
  v39 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v37 = *(_QWORD *)a1;
  *((_QWORD *)v37 + 1) = v39;
  v37[16] = v38;
  v40 = (char *)&STACK[0x19A0] + v33 + 16;
  v41 = *(_QWORD *)(a2 + 8 * (v36 - 446)) - 8;
  HIDWORD(v42) = *(unsigned __int8 *)(v41 + (*((unsigned __int8 *)&STACK[0x19A0] + v33 + 22) ^ 0xCALL));
  LODWORD(v42) = (HIDWORD(v42) ^ 0x70) << 24;
  v43 = (v36 - 1431716885) & 0x555647BE;
  v44 = ((v42 >> 26) - ((2 * (v42 >> 26)) & 0xB2) + 89);
  LODWORD(v39) = ((v42 >> 26) - ((2 * (v42 >> 26)) & 0xFFFFFFB2) + 89) ^ (v44 >> 6) ^ (v44 >> 3);
  HIDWORD(v42) = *(unsigned __int8 *)(v41
                                    + (*((_BYTE *)&STACK[0x19A0] + v33 + 30) ^ (((v36 - 21) & 0xBE) + 69)));
  LODWORD(v42) = (HIDWORD(v42) ^ 0x70) << 24;
  v45 = ((((v39 ^ 0xD) - ((2 * (v39 ^ 0xD)) & 0x150)) << 8) + 1685301248) ^ 0x6473A800;
  v46 = ((v42 >> 26) - ((2 * (v42 >> 26)) & 0xEC) - 10);
  LODWORD(v39) = ((v42 >> 26) - ((2 * (v42 >> 26)) & 0xFFFFFFEC) - 10) ^ (v46 >> 6) ^ (v46 >> 3) ^ 0xFFFFFF8C;
  v47 = *(_QWORD *)(a2 + 8 * (v36 - 261));
  v48 = *(unsigned __int8 *)(v47 + (v40[7] ^ 0xAELL)) ^ 0x9D;
  v49 = (v45 - ((2 * v45) & 0x52167E00) + 1762344834) ^ 0x690B3F82 | (v48 - ((2 * v48) & 0x158) - 77784404) ^ 0xFB5D1AAC;
  HIDWORD(v42) = *(unsigned __int8 *)(v41 + (v40[10] ^ 0x89));
  LODWORD(v42) = (HIDWORD(v42) ^ 0x70) << 24;
  v50 = ((v42 >> 26) + (~(2 * (v42 >> 26)) | 0xB) + 123);
  v51 = ((v42 >> 26) + (~(2 * (v42 >> 26)) | 0xB) + 123) ^ (v50 >> 6) ^ (v50 >> 3) ^ 0x52;
  v52 = *(_QWORD *)(a2 + 8 * (v36 - 332)) - 12;
  v53 = *(unsigned __int8 *)(v52 + (v40[5] ^ 0x8ELL));
  v54 = (((v51 - ((2 * v51) & 0x1FA)) << 8) + 1051000064) ^ 0x3EA4FD00;
  v55 = ((2 * ((v53 >> 1) & 0x14 ^ 0x10)) & 0x20) - ((v53 >> 1) & 0x14 ^ 0x10) - 83;
  v56 = v53 ^ 0xB ^ ((v55 & 0x50 ^ 0x11) - (v55 & 0xA4) - 84);
  v57 = (((v56 - ((2 * v56) & 0x172)) << 16) - 994508800) ^ 0xC4B90000;
  v58 = v49 - ((2 * v49) & 0x77BE5D56);
  v59 = v40[8];
  v60 = *(_QWORD *)(a2 + 8 * (v36 ^ 0x139)) - 8;
  v61 = v40[4];
  LODWORD(v59) = *(unsigned __int8 *)(v60 + (v59 ^ 0x50)) ^ ((v59 ^ 0x23)
                                                                            + (v59 ^ 0x22)
                                                                            - ((2 * ((v59 ^ 0x23) + (v59 ^ 0x22))) & 0xA)
                                                                            - 123) ^ 0xA8;
  LODWORD(v59) = (((_DWORD)v59 - ((2 * (_DWORD)v59) & 0x60)) << 24) + 805306368;
  v62 = (v57 - ((2 * v57) & 0x6B0C0000) - 1249501499) ^ 0xB5861EC5 | (v58 + 1004482219) ^ 0x3BDF2EAB;
  v63 = *(unsigned __int8 *)(v47 + (v40[3] ^ 0xB6));
  v64 = v54 - ((2 * v54) & 0x64A59000) - 1303197459;
  v65 = v62 - ((2 * v62) & 0x7643B28A) - 81667771;
  v66 = v64 ^ 0xB252C8ED | ((v59 ^ 0x30000000) - ((2 * v59) & 0x1A000000) + 225070484) ^ 0xD6A4D94;
  v67 = *(unsigned __int8 *)(v60 + (v61 ^ 0x28)) ^ ((v61 ^ 0x5B)
                                                                   + (v61 ^ 0x5A)
                                                                   - ((2 * ((v61 ^ 0x5B) + (v61 ^ 0x5A))) & 0xC3)
                                                                   - 31) ^ 0x14;
  v68 = (((v67 - ((2 * v67) & 0x36)) << 24) + 452984832) ^ 0x1B000000;
  v69 = v40[2] ^ 0x12;
  v70 = v65 ^ 0xFB21D945 | (v68 - ((2 * v68) & 0xE3FFFFFF) + 1901257167) ^ 0x7152E1CF;
  STACK[0x298] = v41;
  HIDWORD(v42) = *(unsigned __int8 *)(v41 + v69);
  LODWORD(v42) = (HIDWORD(v42) ^ 0x70) << 24;
  LODWORD(v61) = *(unsigned __int8 *)(v52 + (v40[13] ^ 0x68));
  LOBYTE(v69) = ((v42 >> 26) - ((2 * (v42 >> 26)) & 0x90) - 56) ^ (((v42 >> 26)
                                                                                   - ((2 * (v42 >> 26)) & 0x90)
                                                                                   - 56) >> 6) ^ (((v42 >> 26) - ((2 * (v42 >> 26)) & 0x90) - 56) >> 3);
  LODWORD(v69) = ((((v69 ^ 0x60) - 2 * (v69 & 0xF)) << 8) - 667283712) ^ 0xD83A0F00;
  LODWORD(v69) = (v69 - ((2 * v69) & 0x29A65800) + 349383791) ^ 0x14D32C6F | ((v63 ^ 0x9D)
                                                                            - ((2 * (v63 ^ 0x9D)) & 0x94)
                                                                            - 502857398) ^ 0xE207014A;
  v71 = ((((v61 ^ 0xB7 ^ ((v61 >> 1) & 0x14 | 0xA8))
         - ((2 * (v61 ^ 0xFFFFFFB7 ^ ((v61 >> 1) & 0x14 | 0xFFFFFFA8))) & 0x1A0)) << 8)
       + 1851904000) ^ 0x6E61D000;
  v72 = (v40[1] ^ 0xE7) - ((2 * (v40[1] ^ 0xE7)) & 0x1D4) + 1824522474;
  LODWORD(v61) = (v72 ^ 0x933FFFAC) + 1;
  v73 = (v71 - 1634429759 - ((2 * v71) & 0x3D292800)) ^ 0x9E9494C1 | (v39
                                                                    - 528318711
                                                                    - ((2 * v39) & 0x12)) ^ 0xE0827F09;
  v72 ^= 0x6CC000EAu;
  v74 = v72 + (v61 ^ 0x3F79EF9F) + ((2 * v61) & 0x7EF3DF3E) - 1064955807;
  v75 = *(unsigned __int8 *)(v52 + ((v74 - ((2 * v74) & 0x38521396) + 472451531) ^ 0xE3D6F635) + v72);
  v76 = v75 ^ 0xA0 ^ (-((v75 >> 1) & 0x14 ^ 4) - 41);
  v77 = (((v76 - ((2 * v76) & 0x12E)) << 16) - 1751711744) ^ 0x97970000;
  LODWORD(v69) = (v69 - ((2 * v69) & 0x6DF6C3E) - 1016089057) ^ 0xC36FB61F | (v77 - ((2 * v77) & 0x797A0000) + 1019080462) ^ 0x3CBDEF0E;
  v78 = *(unsigned __int8 *)(v60 + (*v40 ^ 0x97)) ^ ((*v40 ^ 0xE4)
                                                                                       + (*v40 ^ 0xE5)
                                                                                       - ((2
                                                                                         * ((*v40 ^ 0xE4) + (*v40 ^ 0xE5))) & 0x64)
                                                                                       + 50) ^ 0xA8;
  v79 = (((v78 - 2 * (v78 & 0xF)) << 24) - 1895825408) ^ 0x8F000000;
  v80 = v40[9] ^ 0x77;
  STACK[0x210] = v52;
  v81 = v40[12];
  LODWORD(v69) = (v69 - ((2 * v69) & 0xEA74918A) + 1966753989) ^ 0x753A48C5 | (v79
                                                                             - ((2 * v79) & 0x8A000000)
                                                                             + 1164795735) ^ 0x456D5F57;
  v82 = ((((*(_BYTE *)(v52 + v80) ^ v35 ^ (((*(_BYTE *)(v52 + v80) >> 1) & 0x14 ^ 0xF) - 1) & 0x55)
         - ((2
           * (*(unsigned __int8 *)(v52 + v80) ^ v35 ^ (((*(unsigned __int8 *)(v52 + v80) >> 1) & 0x14 ^ 0xF) - 1) & 0x55555555)) & 0xF8)) << 16)
       - 931397632) ^ 0xC87C0000;
  v83 = (v82 - 1345295464 + (~(2 * v82) | 0xA05FFFFF) + 1) ^ 0xAFD06B98 | (v66 - ((2 * v66) & 0x39131644) - 1668707550) ^ 0x9C898B22;
  v84 = v83 - ((2 * v83) & 0x2AC196F2);
  v85 = v70 - ((2 * v70) & 0xAE31F456) - 686228949;
  v86 = v69 - ((2 * v69) & 0x30671EB2) + 406032217;
  v357 = v60;
  LODWORD(v69) = ((((*(_BYTE *)(v60 + (v81 ^ 0xC3)) ^ ((v81 ^ 0xB1)
                                                                      + (v81 ^ 0xB0)
                                                                      - ((2 * ((v81 ^ 0xB1) + (v81 ^ 0xB0))) & 0x76)
                                                                      + 59) ^ 0xD9)
                  - ((2
                    * (*(unsigned __int8 *)(v60 + (v81 ^ 0xC3)) ^ ((v81 ^ 0xFFFFFFB1)
                                                                 + (v81 ^ 0xFFFFFFB0)
                                                                 - ((2
                                                                   * ((v81 ^ 0xFFFFFFB1)
                                                                    + (v81 ^ 0xFFFFFFB0))) & 0x76)
                                                                 + 59) ^ 0xFFFFFFD9)) & 0x8C)) << 16)
                - 1337589760) ^ 0xB0460000;
  LODWORD(v80) = *(unsigned __int8 *)(v47 + (v40[15] ^ 0x38));
  v87 = (v69 + 1145264698 - ((2 * v69) & 0x88860000)) ^ 0x44435A3A | (v73 - 232170340 - ((2 * v73) & 0xE452B938)) ^ 0xF2295C9C;
  v88 = v40[11] ^ 0xDBLL;
  STACK[0x260] = v47;
  LODWORD(v88) = (v84 + 358665081) ^ 0x1560CB79 | ((*(unsigned __int8 *)(v47 + v88) ^ 0x9D)
                                                 - ((2 * (*(unsigned __int8 *)(v47 + v88) ^ 0x9D)) & 0x1A8)
                                                 - 1876295980) ^ 0x9029FED4;
  LODWORD(v69) = ((((v80 ^ 0x9D) - ((2 * (v80 ^ 0x9D)) & 0xFFFFFF83)) << 24) - 1056964608) ^ 0xC1000000;
  v89 = (v87 - 409490343 - ((2 * v87) & 0xCF2F58B2)) ^ 0xE797AC59 | (v69 - 1582549836 - ((2 * v69) & 0x42000000)) ^ 0xA1AC34B4;
  v90 = v89 - ((2 * v89) & 0x63C47536) - 1310573925;
  HIDWORD(v42) = v90 ^ 0x4DB236;
  LODWORD(v42) = v90 ^ 0xE3FFFFFF;
  LODWORD(STACK[0x428]) = ((v42 >> 24) - ((2 * (v42 >> 24)) & 0x27BC7E0E) + 333332231) ^ 0x45EB9C60;
  LODWORD(STACK[0x370]) = v86 ^ 0xECEEE56C;
  v356 = (unsigned __int8 *)STACK[0x678];
  LODWORD(STACK[0x378]) = v85 ^ 0xE7C16698;
  LODWORD(STACK[0x3C8]) = (v88 - ((2 * v88) & 0x92E4389A) + 1232215117) ^ 0xE90D3354;
  v355 = STACK[0x670];
  STACK[0x438] = 7;
  LOBYTE(v86) = v356[13];
  LODWORD(a33) = (v43 - 1236) ^ 0x2EF;
  LODWORD(STACK[0x350]) = (v43 - 1236) | 0x12A;
  v91 = STACK[0x210];
  v92 = *(unsigned __int8 *)(STACK[0x210] + ((((v43 + 44) ^ 0xEF) + 75) ^ ((v43 + 44) | 0x2A) ^ v86));
  v93 = ((((v92 ^ 0x94 ^ (v92 >> 1) & 0x14) - ((2 * (v92 ^ 0xFFFFFF94 ^ (v92 >> 1) & 0x14)) & 0x1A2)) << 16)
       + 0x7A6B559F5CD10000) ^ 0x7A6B559F5CD10000;
  LODWORD(v80) = *(unsigned __int8 *)(STACK[0x210] + (v356[1] ^ 0xF4));
  v94 = *v356;
  v95 = STACK[0x260];
  LODWORD(v80) = v80 ^ 0xAD ^ (((v80 >> 1) & 4 ^ 0xBE) - ((v80 >> 1) & 0x10));
  LODWORD(v80) = ((((_DWORD)v80 - ((2 * (_DWORD)v80) & 0x122)) << 16) - 1349451776) ^ 0xAF910000;
  v96 = *(unsigned __int8 *)(v60 + (v94 ^ 0x9D));
  LODWORD(v94) = (2 * (((v94 ^ 0x6F) & (v94 ^ v35)) - (a3 & (2 * ((v94 ^ 0x6F) & (v94 ^ v35))))) + 58) ^ a3;
  LODWORD(v94) = (v94 - ((2 * v94) & 0xC) - 121) ^ 0xFFFFFF86;
  v97 = *(unsigned __int8 *)(STACK[0x260] + (v356[15] ^ 0x98)) ^ 0x9DLL;
  v98 = (v93 + 0x3A6240888ADE99CLL - ((2 * v93) & 0x74C4811115A0000)) ^ 0x3A6240888ADE99CLL | (v97
                                                                                               + 0x51BBB4FF3C18C106
                                                                                               - ((2 * (int)v97) & 0xCLL)) ^ 0x51BBB4FF3C18C106;
  v99 = v98 - ((2 * v98) & 0x7AB8B7F29197E3C0) - 0x42A3A406B7340E20;
  v100 = (v94 - ((2 * v94) & 0xFFFFFF8C) - 58) ^ v96;
  LODWORD(v97) = ((((v100 ^ 0x9E) - ((2 * (v100 ^ 0x9E)) & 0x6A)) << 24) - 1258291200) ^ 0xB5000000;
  LODWORD(v97) = (v97 + 539647826 - ((2 * v97) & 0x40000000)) ^ 0x202A5F52 | (v80 + 2120235437 - ((2 * v80) & 0x7CC00000)) ^ 0x7E6039AD;
  v101 = *(unsigned __int8 *)(STACK[0x260] + (v356[7] ^ 0xB3));
  v102 = STACK[0x298];
  v103 = *(unsigned __int8 *)(STACK[0x260] + (v356[11] ^ 0x95));
  HIDWORD(v42) = *(unsigned __int8 *)(STACK[0x298] + (v356[6] ^ 0x2DLL));
  LODWORD(v42) = (HIDWORD(v42) ^ 0x70) << 24;
  LODWORD(v94) = ((v42 >> 26) - ((2 * (v42 >> 26)) & 0x1A) + 13);
  LODWORD(v47) = ((v42 >> 26) - ((2 * (v42 >> 26)) & 0x1A) + 13) ^ (v94 >> 6) ^ (v94 >> 3);
  LODWORD(STACK[0x358]) = v47;
  LODWORD(v80) = ((((v47 ^ 0xAF) - ((2 * (v47 ^ 0xAF)) & 0x1CA)) << 8) - 980884224) ^ 0xC588E500;
  LODWORD(v80) = (v80 - 1595639995 - ((2 * v80) & 0x41C8EE00)) ^ 0xA0E47745 | ((v101 ^ 0x9D)
                                                                             + 1634109657
                                                                             - ((2 * (v101 ^ 0x9D)) & 0x1B2)) ^ 0x616688D9;
  v104 = v356[4];
  v105 = *(unsigned __int8 *)(v95 + (v356[3] ^ 0xA9));
  LODWORD(v60) = ((v104 ^ 0x57) + (v104 ^ 0x56) + (~(2 * ((v104 ^ 0x57) + (v104 ^ 0x56))) | 0xFFFFFFF9) + 4) ^ *(unsigned __int8 *)(v60 + (v104 ^ 0x24));
  v106 = v356[8];
  v107 = ((((v60 ^ 0xAA) - ((2 * (v60 ^ 0xAA)) & 0xC4)) << 24) - 503316480) ^ 0xE2000000;
  LODWORD(v106) = *(unsigned __int8 *)(v357 + (v106 ^ 0x86)) ^ v34 ^ ((v106 ^ 0xF5)
                                                                                     + (v106 ^ 0xF4)
                                                                                     - ((2
                                                                                       * ((v106 ^ 0xF5) + (v106 ^ 0xF4))) & 0x50)
                                                                                     - 88);
  LODWORD(v106) = ((((_DWORD)v106 - ((2 * (_DWORD)v106) & 0x4C)) << 24) + 637534208) ^ 0x26000000;
  LODWORD(v106) = (v106 - 1116274999 - ((2 * v106) & 0x7A000000)) ^ 0xBD76FEC9 | ((v103 ^ 0x9D)
                                                                                + 1045058927
                                                                                - ((2 * (v103 ^ 0x9D)) & 0xDE)) ^ 0x3E4A556F;
  v108 = v106 + 1584270788 - ((2 * v106) & 0xBCDC1B88);
  LODWORD(v106) = *(unsigned __int8 *)(v91 + (v356[5] ^ 0xFBLL));
  LODWORD(v106) = v106 ^ 0x73 ^ (((v106 >> 1) & 0x14 ^ 0x8F) + 120);
  LODWORD(v106) = (((v106 - ((2 * (_DWORD)v106) & 0x10E)) << 16) - 242810880) ^ 0xF1870000;
  LODWORD(v106) = (v106 + 1485934536 - ((2 * v106) & 0x31220000)) ^ 0x58918FC8 | (v107
                                                                                - 2046115124
                                                                                + (~(2 * v107) | 0xF3FFFFFF)
                                                                                + 1) ^ 0x860AC2CC;
  LODWORD(v80) = (v106 - 312765586 - ((2 * v106) & 0xDAB726DC)) ^ 0xED5B936E | (v80
                                                                              - 1350000664
                                                                              - ((2 * v80) & 0x5F113FD0)) ^ 0xAF889FE8;
  HIDWORD(v42) = *(unsigned __int8 *)(v102 + (v356[2] ^ 0x63));
  LODWORD(v42) = (HIDWORD(v42) ^ 0x70) << 24;
  LODWORD(v69) = v80 - 1090715264 - ((2 * v80) & 0x7DFA0300);
  v109 = (v42 >> 26) + (~(2 * (v42 >> 26)) | 0x3B) - 29;
  v110 = v109 ^ (((v42 >> 26) + (~(2 * (v42 >> 26)) | 0x3B) - 29) >> 3) ^ ((v109 >> 6) | 0x5C);
  v111 = ((((v110 ^ 0x80) - ((2 * (v110 ^ 0x80)) & 0x1BA)) << 8) + 1110105344) ^ 0x422ADD00;
  LODWORD(v97) = (v111 + 9886938 - ((2 * v111) & 0x12DB800)) ^ 0x96DCDA | (v97 - 832450104 - ((2 * v97) & 0x9CC3A390)) ^ 0xCE61D1C8;
  LODWORD(v97) = (v97 + 527835694 - ((2 * v97) & 0x3EEC445C)) ^ 0x1F76222E | ((v105 ^ 0x9D)
                                                                            - 1366493764
                                                                            - ((2 * (v105 ^ 0x9D)) & 0x178)) ^ 0xAE8CF5BC;
  LODWORD(v94) = v97 - ((2 * v97) & 0xED0C9DA2) + 1988513489;
  LODWORD(v97) = *(unsigned __int8 *)(v91 + (v356[9] ^ 0xDDLL));
  v112 = v356[10];
  LODWORD(v97) = v97 ^ (((v97 >> 1) & 0x14 ^ 0xE7) + 29) ^ 0xE;
  LODWORD(v97) = (((v97 - ((2 * (_DWORD)v97) & 0x2A)) << 16) - 820707328) ^ a29;
  v113 = ((2 * (v112 ^ 0x48)) & 0x1B2) + (v112 ^ 0x5BF7BF97);
  v114 = (v112 ^ 0x88882B2) - ((2 * (v112 ^ 0xFFFFFFF0)) & 0x17A) + v113 + 1;
  HIDWORD(v42) = *(unsigned __int8 *)(v102
                                    + v113
                                    - 1542963161
                                    + ((v114 - ((2 * v114 + 922713032) & 0xBE496B2A) + 2057597817) ^ 0x20DB4A69));
  LODWORD(v42) = (HIDWORD(v42) ^ 0x70) << 24;
  v115 = (v42 >> 26) - ((2 * (v42 >> 26)) & 0x54) - 86;
  v116 = v115 ^ (((v42 >> 26) - ((2 * (v42 >> 26)) & 0x54) - 86) >> 3) ^ ((v115 >> 6) | 0xD0) ^ 0x39;
  v117 = (((v116 - ((2 * v116) & 0x130)) << 8) + 178034688) ^ 0xA9C9800;
  LODWORD(v97) = (v117 + 1729681721 - ((2 * v117) & 0x4E31B200)) ^ 0x6718D939 | (v97
                                                                               + 988141221
                                                                               - ((2 * v97) & 0x75CA0000)) ^ 0x3AE5D6A5;
  LODWORD(v97) = (v97 + 2059499467 - ((2 * v97) & 0xF582EF96)) ^ 0x7AC177CB | v108 ^ 0x5E6E0DC4;
  LODWORD(v47) = v97 - ((2 * v97) & 0x5232FBE2) - 1457947151;
  v118 = v356[12];
  v119 = *(unsigned __int8 *)(v357 + (v118 ^ 0xB3));
  LODWORD(v118) = (v118 ^ 0xFFFFFFC1)
                + (v118 ^ 0xFFFFFFC0)
                - ((2 * ((v118 ^ 0xFFFFFFC1) + (v118 ^ 0xFFFFFFC0))) & 0x5C)
                - 82;
  v120 = (v119 ^ v118 ^ 0xFFFFFFF3) + 1;
  v119 ^= 0xFFFFFFA2;
  v121 = v119 + (v120 ^ 0x6D) + ((2 * v120) & 0xFFFFFFDA) - 109;
  LODWORD(v118) = (v118 ^ ((v118 ^ 0x51) - ((2 * (v118 ^ 0x51) + 2) & 0x3C) - 97) ^ 0xFFFFFF85 ^ (v121 - ((2 * v121) & 0x6A) - 75))
                + v119;
  LODWORD(v118) = (v118 ^ 0x19) + ((2 * v118) & 0x32) - 25;
  v122 = (((v118 - ((2 * (int)v118) & 0xF0)) << 20) - 0x34C9C55CD8800000) ^ 0xCB363AA327800000;
  v123 = ((~((_DWORD)v98 - ((2 * (_DWORD)v98) & 0x9197E3C0) + 1221325280) << 28)
        + (~(v98 - ((2 * (_DWORD)v98) & 0x9197E3C0) + 1221325280) >> 2 << 31)
        + 1095344825) & 0xF0000000 ^ 0x6F5BDE05BCDBA32BLL;
  v124 = (((2 * v123) & 0x4A01840948220040) - v123 + 0xADB3D3358EABBDFLL) & 0x6480A01FF43008C0 ^ 0x6480A016A43008C0 | (v99 >> 4) ^ 0xBD5C5BF948CBF1DLL;
  v125 = (v122 - ((2 * v122) & 0x48A7E939D0600000) - 0x5BAC0B6317C6A020) ^ (v124
                                                                              + 0x2DD009E0ED68EEC2
                                                                              - 2
                                                                              * (v124 & 0x2DD009E0ED68EEE2 ^ (v99 >> 4) & 0x20));
  LODWORD(v125) = ((32 * v125) & 0xB7F5C9E0 ^ 0x11D04840)
                + ((16 * v125) ^ 0x5716CAD5)
                + ((v125 >> 28) ^ 0x57AD3BB7)
                + ((2 * ((v125 >> 28) & 0x7F)) ^ 0x90);
  v126 = v125 - ((2 * v125 + 414170904) & 0x6444C2C6) - 25542417;
  HIDWORD(v42) = *(unsigned __int8 *)(v102 + (v356[14] ^ 0x18));
  LODWORD(v42) = (HIDWORD(v42) ^ 0x70) << 24;
  LODWORD(v125) = ((v42 >> 26) + (~(2 * (v42 >> 26)) | 0x6F) - 55);
  v127 = (((((((v42 >> 26) + (~(2 * (v42 >> 26)) | 0x6F) - 55) ^ (v125 >> 6) ^ (v125 >> 3)) ^ 0xA7)
          - ((2
            * (((v42 >> 26) + (~(2 * (v42 >> 26)) | 0x6F) - 55) ^ (v125 >> 6) ^ (v125 >> 3) ^ 0xA7)) & 0x19C)) << 8)
        + 1910623744) ^ 0x71E1CE00;
  v128 = v126 ^ (v127 - ((2 * v127) & 0x74412C00) - 98527574);
  v129 = off_1E3D64110[v43 ^ 0x50E];
  LODWORD(v124) = *((_DWORD *)v129 + (v100 ^ 0x14u));
  v130 = (char *)off_1E3D64110[v43 - 1187] - 12;
  v131 = *(_DWORD *)&v130[4 * (BYTE2(v128) ^ 0xE6)];
  LODWORD(STACK[0x360]) = v43;
  v132 = off_1E3D64110[v43 - 1360];
  LODWORD(v106) = ((v80 + 0x80) ^ 0xA2 | 0x6596208E)
                - ((v80 + 0x80) ^ 0xA2 | 0x9A69DF71)
                - 1704337551;
  v133 = v101 ^ 0x5D;
  v134 = (char *)off_1E3D64110[v43 ^ 0x530] - 8;
  LODWORD(v106) = v131 ^ v124 ^ *(_DWORD *)&v134[4 * v133] ^ *((_DWORD *)v132 + (BYTE1(v47) ^ 0xFDu)) ^ ((v106 & 0x20801563 ^ 0x5561) + (v106 & 0x45162A9C ^ 0xC1078885) - 1);
  LODWORD(v124) = ((BYTE2(v94) ^ 0xB860CE73) - ((2 * (BYTE2(v94) ^ 0xB860CE73)) & 0x608189CC) + 860345830) ^ 0xFD2018A2;
  v135 = ((v128 >> 8) & 0xF4 ^ 0xA830A0F4) - ((v128 >> 8) & 0xF4) + BYTE1(v128);
  LODWORD(STACK[0x348]) = v69;
  v136 = ((2 * (BYTE2(v69) ^ 0xE49FF204)) & 0x88394448) - (BYTE2(v69) ^ 0xE49FF204) + 602103003;
  LODWORD(v102) = (((2 * (BYTE2(v69) ^ 0xC7FB0DE6)) | 0xA3413BEE) - (BYTE2(v69) ^ 0xC7FB0DE6) + 778002953) ^ 0x56538C85;
  LOBYTE(v43) = BYTE2(v128) ^ v106;
  LODWORD(v125) = *((_DWORD *)v129 + (v60 ^ 0xF9u)) ^ *(_DWORD *)&v130[4
                                                                                      * (((BYTE2(v94) ^ 0x8F1DC4)
                                                                                        - ((2 * (BYTE2(v94) ^ 0x8F1DC4)) & 0x163AC0)
                                                                                        + 427507552) ^ 0x19F422A4)] ^ *(_DWORD *)&v134[4 * (v103 ^ 0x5D)] ^ (v124 - ((2 * v124) & 0xCC1E572C) - 298898538) ^ *((_DWORD *)v132 + (((v135 & 0x10B31E ^ 0x12844318) + (v135 ^ 0x6D78B047) - ((v135 ^ 0x6D78B047) & 0x8540331E)) ^ 0x529CE3C4));
  LODWORD(v103) = v125 ^ ((v47 ^ 0x7E) + (v47 & 0x92 ^ 0x280) - ((v47 ^ 0x7E) & 0x92));
  LODWORD(v124) = ((v126 ^ 0x43) + (v126 & 0x46 ^ 0xE0BC9804) - ((v126 ^ 0x43) & 0x46)) ^ 0xC78D3946;
  LODWORD(v60) = *(_DWORD *)&v130[4 * ((((2 * (_DWORD)v102) & 0x6184F45C) - (_DWORD)v102 + 1329432017) ^ 0xF359997)] ^ *((_DWORD *)v132 + (v110 ^ 0x4Du)) ^ *((_DWORD *)v129 + (BYTE3(v47) ^ 0xE5)) ^ ((v136 & 0x8478110F ^ 0x8990007) + (v136 & 0x4304AEF0 ^ 0x4002C2E1) - 1) ^ *(_DWORD *)&v134[4 * ((((2 * (_DWORD)v124) & 0xE0202B0) - (_DWORD)v124 + 1895083687) ^ 0x57C50FA1)];
  LODWORD(STACK[0x2F8]) = v128;
  LODWORD(STACK[0x2C8]) = v47;
  v137 = ((BYTE2(v47) ^ 0xC2) - ((v47 >> 15) & 0x18) - 1775959284) ^ 0x1C25074A;
  v138 = *((_DWORD *)v129 + (HIBYTE(v126) ^ 0x2F));
  v139 = (v137 - ((2 * v137) & 0x401FBC2) + 906558945) ^ 0x1C962656;
  LODWORD(v102) = *(_DWORD *)&v130[4
                                 * ((((2 * (BYTE2(v47) ^ 0xA2140194)) & 0x40003A8)
                                   - (BYTE2(v47) ^ 0xA2140194)
                                   + 1825860651) ^ 0xCEC06DEF)] ^ 0x3B8E5503;
  v140 = 2 * ((v139 & v102) - ((2 * (v139 & v102)) & 0x55A2B6BC)) - 710756676;
  LODWORD(STACK[0x300]) = v94;
  LODWORD(v124) = ((v94 ^ 0x24) + (v94 & 0xF8 ^ 0xD9DAA4D8) - ((v94 ^ 0x24) & 0xF8)) ^ 0xC09BC23C;
  LODWORD(v102) = ((v139 + v102) ^ 0x57E3DF7E)
                + ((2 * (v139 + v102)) & 0xAFC7BEFC)
                + (v140 ^ 0x5C36DABD)
                + ((2 * v140) & 0xECD727FC ^ 0x57BADA87)
                + 1;
  v141 = v138 ^ *((_DWORD *)v132 + (LODWORD(STACK[0x358]) ^ 0xA0u)) ^ *(_DWORD *)&v134[4 * (v105 ^ 0xE7)] ^ (v124 - ((2 * v124) & 0x1200C916) + 1831529611) ^ 0x50B88B32 ^ (v102 - ((2 * v102 + 1024420098) & 0x8A87FE8A) - 473189434);
  LODWORD(v102) = ((v141 & 0x4206B860 ^ 0x416C0061) + (v141 & 0x804390 ^ 0x4081) - 2) ^ 0x47EEF360;
  v142 = (v141 & 0xBD79040F ^ 0xCB280104) - ((2 * (v141 & 0xBD79040F ^ 0xCB280104)) & 0x42420210) + 564486648;
  v143 = ((v142 & 0xC61237B8 ^ 0xC4021288) + (v142 ^ 0x3B396575) - ((v142 ^ 0x3B396575) & 0xC61237B8)) ^ 0x8E963631 | (v102 - ((2 * v102) & 0x1083700) - 1862459516) ^ 0x94FD9F14;
  v144 = v143 - ((2 * v143) & 0x63B48A08) - 1311095548;
  v145 = ((BYTE2(v144) ^ 0x7B) + (HIWORD(v144) & 0x7C ^ 0xD9EA4704) - ((BYTE2(v144) ^ 0x7B) & 0x7C)) ^ 0xD3EA855C;
  LODWORD(v124) = *((_DWORD *)v129 + (BYTE3(v125) ^ 0xCA));
  LODWORD(v105) = *(_DWORD *)&v130[4 * ((((2 * (BYTE2(v144) ^ 0x49)) & 0x76) - (BYTE2(v144) ^ 0x49) + 4548) ^ 0x1108)] ^ *((_DWORD *)v129 + (BYTE3(v106) ^ 0x29)) ^ *(_DWORD *)&v134[4 * (((v103 & 0xA7 ^ 0x18840180) + (v103 & 0x58 ^ 0x80016009) - 1) ^ 0x988561BD)] ^ *((_DWORD *)v132 + ((-902938450 - (BYTE1(v60) ^ 0x34 | 0xCA2E40AE) + (BYTE1(v60) ^ 0x34 | 0x35D1BF51)) ^ 0x35D1BF33)) ^ (434564928 - (v103 & 0xF0 ^ 0x40320279 | 0x19E6EF40) + (v103 & 0xF0 ^ 0x40320279 | 0xE61910BF)) ^ ((v103 & 0xF ^ 0xAB9094FC) + 1048507165 + ((2 * ((v103 & 0xF ^ 0xAB9094FC) & 0xE ^ (v103 | 0x7FFFFFFD))) ^ 0x54212025)) ^ (((2 * v145) & 0x166E4) - v145 + 1518750861);
  LODWORD(v102) = ((BYTE2(v106) ^ 0xF7E34F3F) - ((2 * (BYTE2(v106) ^ 0xF7E34F3F)) & 0x8A0609B0) - 855403304) ^ 0x5BF0DBB4;
  v146 = *(_DWORD *)&v130[4
                        * ((-1158231517 - (BYTE2(v106) ^ 0x21) + ((2 * (BYTE2(v106) ^ 0x21)) & 0xF4) + 98) ^ 0xBAF6CA23)];
  v147 = (1614672597
        - ((v128 ^ v60) ^ 0xEC | 0x603DF2D5)
        + ((v128 ^ v60) ^ 0xEC | 0x9FC20D2A)) ^ 0x9B80196D;
  LODWORD(v125) = ((2 * (BYTE2(v125) ^ 0x25)) | 0xC925A18A) - (BYTE2(v125) ^ 0x25) - 1687343301;
  LODWORD(v125) = (v125 & 0xDF9BECD7 ^ 0x9309AC53) + (v125 ^ 0x6CD25184) - ((v125 ^ 0x6CD25184) & 0xDF9BECD7);
  LODWORD(v106) = ((BYTE1(v106) ^ 0x53) + ((v106 >> 8) & 0xBC ^ 0x52969AAC) - ((BYTE1(v106) ^ 0x53) & 0xBC)) ^ 0xC6F308A2;
  v148 = ((2 * v106) | 0x40EB3048) - v106 - 544577572;
  LODWORD(v106) = v146 ^ v124 ^ *(_DWORD *)&v134[4
                                               * ((((v128 ^ v60) ^ 0x4330032C)
                                                 - ((2 * ((v128 ^ v60) ^ 0x4330032C)) & 0x26005AE)
                                                 + 1030752983) ^ 0x7E400939)] ^ (-1620038038
                                                                               - (v102 | 0x9F702E6A)
                                                                               + (v102 | 0x608FD195)) ^ (-2022276461 - (v147 | 0x87768293) + (v147 | 0x78897D6C)) ^ *((_DWORD *)v132 + (BYTE1(v144) ^ 0x94u));
  LOWORD(v133) = (v144 ^ 0xBF) - ((2 * (v144 ^ 0xBF)) & 0xA4) + 18514;
  LODWORD(v125) = *(_DWORD *)&v130[4 * (v125 ^ 0xD7DB6D17)] ^ *((_DWORD *)v129 + (BYTE3(v60) ^ 0xFA)) ^ *((_DWORD *)v132 + (v148 ^ 0xB4100A95)) ^ v125 ^ (((2 * (v144 ^ 0x19)) | 0xC7BBD2A) - (v144 ^ 0x19) + 1774330219) & 0x1FFFFFFF ^ *(_DWORD *)&v134[4 * (((v133 & 0xB7 ^ 0x2809E014) + (v133 & 0xF48 ^ 0x941) - 1) ^ 0x2809E107)];
  LODWORD(v102) = (((2 * (BYTE2(v60) ^ 0x42)) | 0xD073D720) - (BYTE2(v60) ^ 0x42) - 1748626320) ^ 0x697D4D1A;
  v149 = (-625431663 - (BYTE2(v60) ^ 0xF6 | 0xDAB8AB91) + (BYTE2(v60) ^ 0xF6 | 0x2547546E)) ^ 0x87055464;
  v150 = ((v103 >> 8) & 0xAD ^ 0xF3F0FF89) + ((v103 >> 8) & 0x52 ^ 3) - 1;
  v151 = *(_DWORD *)&v130[4 * ((-1249792283 - (v149 | 0xB581AEE5) + (v149 | 0x4A7E511A)) ^ 0xE83C51CA)] ^ *((_DWORD *)v132 + (((v150 & 0x18093DC ^ 0xC0202C0) + (v150 ^ 0x21E89D1F) - ((v150 ^ 0x21E89D1F) & 0x1893DC)) ^ 0xDF82F17A)) ^ *(_DWORD *)&v134[4 * (((v43 ^ 0x76) - ((2 * (v43 ^ 0x76)) & 0x16E) + 1207) ^ 0x48E)] ^ (v102 - ((2 * v102) & 0x683A602C) + 874328086) ^ (((v43 & 0xBE ^ 0x65F8C89F) - 1) & 0x410008BE | v43 & 0x41) ^ *((_DWORD *)v129 + (HIBYTE(v144) ^ 0x4F));
  LODWORD(v102) = (BYTE2(v151) ^ 0x59) + (HIWORD(v151) & 0xCF ^ 0x30895986) - ((BYTE2(v151) ^ 0x59) & 0xFFFFFFCF);
  LOWORD(v147) = (v106 ^ 0x87) + (v106 & 0x8B ^ 0x3008) - ((v106 ^ 0x87) & 0x8B);
  LODWORD(v124) = (((2 * (v106 ^ 0x2F)) & 0x1AE) - (v106 ^ 0x2F) + 391147048) ^ 0x5F646728;
  v152 = *(_DWORD *)&v130[4 * (((v102 & 0x992 ^ 0x205B4011) + (v102 & 0x66D) - 1) ^ 0x205B4944)] ^ *((_DWORD *)v129 + (BYTE3(v105) ^ 0x86)) ^ *((_DWORD *)v132 + (BYTE1(v125) ^ 0x87u)) ^ *(_DWORD *)&v134[4 * (((_DWORD)v124 - ((2 * (_DWORD)v124) & 0x80081192) - 959693623) ^ 0x8EF8350F)] ^ ((BYTE2(v151) ^ 0x44041886) - ((2 * (BYTE2(v151) ^ 0x44041886)) & 0x88083032) - 175891943) ^ ((v147 & 0x6FF ^ 0xEA950271) + (v147 & 0x1900 ^ 0x1009801) - 1);
  LODWORD(v133) = ((2 * (BYTE1(v151) ^ 0xDD)) & 0x82) - (BYTE1(v151) ^ 0xDD) + 827780798;
  LODWORD(v103) = ((2 * (v125 ^ 0x9A)) | 0x7ED588A) - (v125 ^ 0x9A) + 2080986043;
  v153 = *(_DWORD *)&v130[4
                        * ((((2 * (BYTE2(v105) ^ 0xB0200287)) & 0x400126) - (BYTE2(v105) ^ 0xB0200287) - 1285722516) ^ 0x37D6CA0)] ^ *((_DWORD *)v129 + (BYTE3(v106) ^ 0x8C)) ^ *((_DWORD *)v132 + (((v133 & 0x11000A84 ^ 0xC4081200) + (v133 ^ 0x1134EDD6) - ((v133 ^ 0x1134EDD6) & 0x20600284)) ^ 0xD50A1911)) ^ (143997776 - (BYTE2(v105) ^ 0x41108E | 0x8953B50) + (BYTE2(v105) ^ 0x41108E | 0xF76AC4AF)) ^ *(_DWORD *)&v134[4 * (((v125 ^ 0x5052004E) + (v125 & 0x69 ^ 0xA689B421) - ((v125 ^ 0x5052004E) & 0x10100069)) ^ 0xE6CBB448)] ^ ((v103 & 0xD200D7 ^ 0x80094092) + (v103 & 0x324BF28 ^ 0x324B201) - 1);
  LODWORD(v102) = (((2 * (BYTE2(v106) ^ 0xA9)) & 0x156) - (BYTE2(v106) ^ 0xA9) - 666663084) ^ 0xF84BAFC6;
  v154 = *((_DWORD *)v129 + (BYTE3(v125) ^ 0xC8)) ^ *((_DWORD *)v132 + (BYTE1(v105) ^ 0xD4u)) ^ *(_DWORD *)&v130[4 * ((((2 * (_DWORD)v102) | 0x5379CA8C) - (_DWORD)v102 + 1447238330) ^ 0x89B4CD8E)] ^ *(_DWORD *)&v134[4 * (((v151 ^ 0xFFFFFF3F) + ((2 * v151) & 0x26) + 8685) ^ 0x2171)] ^ BYTE2(v106) ^ (((2 * (v151 ^ 0x2004043C)) & 0xFFFFFFF3) - (v151 ^ 0x2004043C) - 1816575226);
  LOBYTE(v149) = BYTE2(v125);
  v155 = *((_DWORD *)v129 + (HIBYTE(v151) ^ 0x30));
  v156 = ((v105 ^ 0xE4) + (v105 & 0x8B ^ 0x7A40720B) - ((v105 ^ 0xE4) & 0x8B)) ^ 0x52C076AB;
  v157 = *(_DWORD *)&v130[4
                        * ((((2 * (BYTE2(v125) ^ 0x72F25631)) | 0xE9699780) - (BYTE2(v125) ^ 0x72F25631) + 189477952) ^ 0x86469D6D)] ^ v155 ^ *((_DWORD *)v132 + (BYTE1(v106) ^ 0xB7u)) ^ *(_DWORD *)&v134[4 * ((((2 * (v105 ^ 0x29)) | 0x1F3AE402) - (v105 ^ 0x29) + 1348636159) & 0x3FFFFFFF ^ 0x2F9D720F)] ^ (989969272 - (v156 | 0x3B01BB78) + (v156 | 0xC4FE4487));
  v158 = v157 ^ v149;
  if ((v154 ^ 0x38998DDE) >= 0xA13C3705)
    v159 = -26989;
  else
    v159 = -24170;
  v160 = (v154 ^ 0x38998DDE) - ((2 * (v154 ^ 0x38998DDE) - 1115188746) & 0xA57B432C) - 1316918639;
  if ((v154 ^ 0x38998DDE) < 0xA13C3705)
    v160 = v154 ^ 0x6A242C48;
  if (v160 == 1388159382)
    v161 = v159;
  else
    v161 = v154 ^ 0x2C48;
  v162 = (((2 * (BYTE2(v157) ^ 0x99)) & 0x42) - (BYTE2(v157) ^ 0x99) + 1947477982) ^ 0xCF1C25EA;
  v163 = *(_DWORD *)&v130[4 * ((((2 * v162) & 0x44104D4E) - v162 - 1651107496) ^ 0x269E1B57)] ^ *((_DWORD *)v129
                                                                                                + (HIBYTE(v152) ^ 0xC7)) ^ *(_DWORD *)&v134[4 * ((-1628803732 - (v153 ^ 0x87 | 0x9EEA6D6C) + (v153 ^ 0x87 | 0x61159293)) ^ 0x61159252)] ^ *((_DWORD *)v132 + (((BYTE1(v154) ^ 0xC07AC2FD) - ((2 * (BYTE1(v154) ^ 0xC07AC2FD)) & 0x809004A8) - 850910636) ^ 0xD32E0C3)) ^ (((((2 * (v153 ^ 0xB3)) & 0xB8) - (v153 ^ 0xB3) + 35) ^ 0x60048040) + ((((2 * (v153 ^ 0xB3)) & 0x1B8) - (v153 ^ 0xB3) - 27613) & 0x700 ^ 0x10600101) - 1);
  v164 = *((_DWORD *)v132
         + (((BYTE1(v157) ^ 0x29C069D8) - ((2 * (BYTE1(v157) ^ 0x29C069D8)) & 0x42009036) + 1998706715) ^ 0x5EE1B11Fu));
  v165 = ((2 * v164) ^ 0x9F6EFD34) - 2 * (((2 * v164) ^ 0x9F6EFD34) & 0x54304D3C ^ (2 * v164) & 8) - 735032011;
  v166 = (((v164 ^ 0xCFB77E9A) + 1480419415) ^ 0x818000C9)
       - ((2 * ((v164 ^ 0xCFB77E9A) + 1480419415)) & 0xFCFFFE6C)
       + (v165 & 0xB07AD0AE ^ 0x97CB97D3)
       + ((2 * v165) & 0xF5A14C ^ 0x608048)
       + 1;
  v167 = v163 ^ BYTE2(v157);
  v168 = v164 ^ ((v164 ^ 0x30488165) - ((2 * (v164 ^ 0x30488165) + 2) & 0x1F8194BE) + 264292960) ^ 0xB8973DA7 ^ (v166 - ((2 * v166 - 1652351188) & 0xF1C112C4) + 1201805560);
  v169 = (v161 & 0x4D) + (v161 & 0xB2 ^ 0x10714411) - 1;
  v170 = *(_DWORD *)&v130[4
                        * (((BYTE2(v152) ^ 0xC0024DB8)
                          + (HIWORD(v152) & 0x3B ^ 0x9848003)
                          - ((BYTE2(v152) ^ 0xC0024DB8) & 0xC002483B)) ^ 0x98485DE)] ^ *((_DWORD *)v129
                                                                                       + (HIBYTE(v153) ^ 0x4D)) ^ (((2 * (BYTE2(v152) ^ 0x38041199)) & 0x20080014) - (BYTE2(v152) ^ 0x38041199) - 329072651) ^ ((v169 & 0x510766 ^ 0x41A64) + (v169 ^ 0x34536582) - ((v169 ^ 0x34536582) & 0x20222766)) ^ *(_DWORD *)&v134[4 * (((v161 & 0x9C ^ 0x315) - (v161 | 0x79C) + 2046) & 0x7FF ^ 0x388)] ^ (v168 - ((2 * v168 + 276484270) & 0x170E5F96) - 473655262);
  v171 = *((_DWORD *)v129 + (HIBYTE(v154) ^ 0x65));
  v172 = *(_DWORD *)&v130[4 * (BYTE2(v153) ^ 0x62)];
  v173 = *((_DWORD *)v132 + (BYTE1(v152) ^ 0xA1u));
  v174 = (v158 ^ 0x100CC868) - ((2 * (v158 ^ 0x100CC868)) & 0x200081DE) + 320955631;
  v175 = v158 - (v158 & 0x81) + (v158 & 0x81 ^ 0x3F64BA81);
  v176 = *(_DWORD *)&v134[4
                        * (((v175 & 0x29242BD9 ^ 0x1305C8) + (v175 ^ 0x3F243A31) - ((v175 ^ 0x3F243A31) & 0x4003D9)) ^ 0x2937AF61)];
  v177 = 431501624 - (v174 & 0x20 | 0xCDC189C);
  if ((v174 & 0x20 & ~v176) == 0)
    v177 = v174 & 0x20 | 0xCDC189C;
  v178 = (v176 ^ 0x33875A2A) - 215750812 + v177 - ((2 * ((v176 ^ 0x33875A2A) - 215750812 + v177)) & 0x4D20234);
  v179 = (v174 | 0xFFFFFFDF)
       + (((v174 ^ 0xA8BD3836) + 1) ^ 0xF7987EFF)
       + ((2 * ((v174 ^ 0xA8BD3836) + 1)) & 0xEF30FDFE)
       + 141000961;
  v180 = HIBYTE(v157) ^ 0x8F;
  v181 = v172 ^ v171 ^ v173 ^ (v179 - ((2 * v179) & 0xE74AAA16) - 207268597) ^ (v178 - 2107047654);
  v182 = v172 ^ v171 ^ v173 ^ (v179 - ((2 * v179) & 0x16) + 11) ^ (v178 + 26) ^ BYTE2(v153);
  v183 = ((BYTE2(v154) ^ 0x11) - ((2 * (BYTE2(v154) ^ 0x11)) & 0xDA) + 1076154989) ^ 0x4360DBED;
  v184 = ((2 * v183) | 0xAACFE978) - v183 + 714607428;
  v185 = *(_DWORD *)&v130[4 * (BYTE2(v154) ^ 0x5D)] ^ *((_DWORD *)v129 + v180);
  v186 = (v185 ^ v184 ^ 0xC7739936) + 1;
  v187 = ((2 * v185) & 0xF70FAF52 ^ 0x94028910) + (v185 ^ 0x35B69373);
  v188 = (v186 ^ 0x3EBE75FF) + v187 + ((2 * v186) & 0x7D7CEBFE);
  v189 = v187
       - 2072500137
       + (v184 ^ ((v184 ^ 0x8942DDEC) - 370422439 + (~(2 * (v184 ^ 0x8942DDEC) + 2) | 0x2C286551)) ^ 0x710A30CF ^ (v188 - ((2 * v188 - 1955371856) & 0xDCB9BF16) + 873894371));
  v190 = ((((v153 >> 8) & 0x23) + (BYTE1(v153) ^ 0x7B)) | 0x6C00) - ((BYTE1(v153) ^ 0x7B) & 0x23);
  LOWORD(v188) = (v152 ^ 0x43) - ((2 * (v152 ^ 0x43)) & 0x1F4) + 14074;
  v191 = (1899441085 - (v152 ^ 0xC6 | 0x71372BBD) + (v152 ^ 0xC6 | 0x8EC8D442)) ^ 0xA1D6D646;
  v192 = *(_DWORD *)&v134[4 * ((((2 * v191) & 0x14CFBDB6) - v191 - 174579420) ^ 0xDA862314)] ^ ((v188 & 0x1CE ^ 0x3800ECC5)
                                                                                              + (v188 & 0x231)
                                                                                              - 1) ^ *((_DWORD *)v132 + (((v190 & 0xF ^ 0x9030400C) + (v190 & 0x7F0 ^ 0xF21) - 1) ^ 0x90304BC8)) ^ (v189 - 1344474853 + (~(2 * v189) | 0xA0461DCB));
  v193 = v134[4 * ((((2 * v191) & 0x14CFBDB6) - v191 - 174579420) ^ 0xDA862314)] ^ ((v188 & 0xCE ^ 0xC5)
                                                                                  + (v188 & 0x31)
                                                                                  - 1) ^ *((_BYTE *)v132
                                                                                         + 4
                                                                                         * (((v190 & 0xF ^ 0x9030400C)
                                                                                           + (v190 & 0x7F0 ^ 0xF21)
                                                                                           - 1) ^ 0x90304BC8)) ^ (v189 + 27 + (~(2 * v189) | 0xCB)) ^ 0x30;
  v194 = HIBYTE(v192) ^ 0xE2;
  v195 = HIWORD(v181);
  v196 = (BYTE2(v192) ^ 0xD8 | 0x57ADF5EC) - (BYTE2(v192) ^ 0xD8 | 0xA8520A13) - 1471018477;
  v197 = (((v181 >> 8) & 0x97 ^ 0x8CBE9804) + ((v181 >> 8) & 0x68 ^ 0x49) - 1) ^ 0xEC8C8AF0;
  v198 = *(_DWORD *)&v130[4 * (((HIWORD(v192) & 0x33 ^ 0xE9124423) + (HIWORD(v192) & 0xCC ^ 0x89181) - 1) ^ 0xE91AD5D1)] ^ *((_DWORD *)v129 + (HIBYTE(v163) ^ 0xAD)) ^ ((v196 & 0x540DC69C ^ 0xC011821D) + (v196 & 0x3A03163) - 1);
  v199 = v198 ^ 0x2A03142;
  v200 = (v198 & 0x40000 ^ 0xDB7DFFDB) + 2 * (v198 & 0x40000);
  v201 = v200 + 1822154358;
  v202 = *((_DWORD *)v132 + ((((2 * v197) & 0x400028E4) - v197 - 889222259) ^ 0xAACD99A6)) ^ 0x978A16CD;
  v203 = ((v200 + 612499493) & v202) - 1785017655 + (~(2 * ((v200 + 612499493) & v202)) | 0xD4CFFFFF) + 1;
  v204 = 597155372 - v200;
  if (v203 == -1785017655)
    v204 = v201;
  v205 = v202 - 1209654865 + v204 - ((2 * (v202 - 1209654865 + v204)) & 0xEF79577C) - 138630210;
  v206 = ((v170 & 0x92 ^ 0xC53E8081) + (v170 & 0x6D) - 1) ^ 0xE52F2435;
  v207 = *((_DWORD *)v132 + (BYTE1(v192) ^ 0x23u));
  v208 = (v206 - ((2 * v206) & 0x3499A) + 482981069) ^ ((v199 & 0x39E874A9 ^ 0x8681008)
                                                      + (v199 & 0xC6138B56 ^ 0x44118955)
                                                      - 1) ^ *(_DWORD *)&v134[4
                                                                            * ((((2
                                                                                * (v170 ^ 0x20C00720)) | 0xEB2521F0)
                                                                              - (v170 ^ 0x20C00720)
                                                                              + 174944008) ^ 0xD5529715)] ^ v205;
  v209 = *(_DWORD *)&v130[4
                        * ((289689963 - (BYTE2(v163) ^ 0xEF | 0x1144516B) + (BYTE2(v163) ^ 0xEF | 0x2EBBAE94)) ^ 0x2EBBAEF3)] ^ v207 ^ *(_DWORD *)&v134[4 * ((395552638 - (v182 ^ 0xA0894A72 | 0x1793A77E) + (v182 ^ 0xA0894A72 | 0xE86C5881)) ^ 0x48E512DA)] ^ ((BYTE2(v163) ^ 0x63FEDA4C) - 38010880) ^ ((v182 ^ 0x8E140160) - ((2 * (v182 ^ 0x8E140160)) & 0xC28025E) - 678062289) ^ *((_DWORD *)v129 + (HIBYTE(v170) ^ 0x45));
  v210 = ((v193 ^ 0xCD) + (v193 & 0x3A ^ 0x3817A832) - ((v193 ^ 0xCD) & 0x3A)) ^ 0x2857BE2A;
  v211 = *(_DWORD *)&v130[4
                        * ((-896263226 - (BYTE2(v170) ^ 0x63 | 0xCA941BC6) + (BYTE2(v170) ^ 0x63 | 0x356BE439)) ^ 0x356BE483)] ^ *((_DWORD *)v129 + (HIBYTE(v181) ^ 0x2B)) ^ *((_DWORD *)v132 + ((306024022 - (BYTE1(v163) ^ 0xD1 | 0x123D8E56) + (BYTE1(v163) ^ 0xD1 | 0xEDC271A9)) ^ 0xEDC27136)) ^ *(_DWORD *)&v134[4 * ((((2 * v210) | 0xA4C7E620) - v210 - 1382282000) ^ 0x4223E5C6)] ^ (((2 * (BYTE2(v170) ^ 0x89043455)) & 0x20001CA) - (BYTE2(v170) ^ 0x89043455) + 1813986842) ^ ((v193 ^ 0xE8) - ((2 * (v193 ^ 0xE8)) & 0x88888888) + 66374212) & 0x28403FF;
  v212 = ((v167 ^ 0x37) - ((2 * (v167 ^ 0x37)) & 0x152) - 1983037271) ^ 0x57C54488;
  v213 = ((v167 ^ 0x17) + (v167 & 0xEB ^ 0xBE8) - ((v167 ^ 0x17) & 0xEB)) ^ 0xBC3;
  v214 = *(_DWORD *)&v130[4 * (((v195 & 0xEE ^ 0xEC2171A3) + (v195 & 0x11) - 1) ^ 0xEC217136)] ^ *((_DWORD *)v129 + v194) ^ *(_DWORD *)&v134[4 * v213] ^ ((v195 & 0xD6 ^ 0xC97DA185) + (v195 & 0x29) - 1) ^ (((2 * v212) & 0xA410FAF8) - v212 + 761660035) ^ *((_DWORD *)v132 + (((BYTE1(v170) ^ 0xB40800DB) + ((v170 >> 8) & 0xEE ^ 0xB96B324) - ((BYTE1(v170) ^ 0xB40800DB) & 0x240000EE)) ^ 0x9B9EB3B5));
  LOBYTE(v212) = v130[4 * (((v195 & 0xEE ^ 0xEC2171A3) + (v195 & 0x11) - 1) ^ 0xEC217136)] ^ *((_BYTE *)v129 + 4 * v194) ^ v134[4 * v213] ^ ((v195 & 0xD6 ^ 0x85) + (v195 & 0x29) - 1) ^ (((2 * v212) & 0xF8) - v212 - 125) ^ *((_BYTE *)v132 + 4 * (((BYTE1(v170) ^ 0xB40800DB) + ((v170 >> 8) & 0xEE ^ 0xB96B324) - ((BYTE1(v170) ^ 0xB40800DB) & 0x240000EE)) ^ 0x9B9EB3B5)) ^ 0x28;
  v215 = ((BYTE2(v214) ^ 0xB1) - ((2 * (BYTE2(v214) ^ 0xB1)) & 0xFFFFFF07) - 2040810877) ^ 0xE5BF297;
  v216 = *((_DWORD *)v132 + (BYTE1(v211) ^ 0x1Au));
  v217 = (v216 ^ 0xCFB77E9A) + 1480419415;
  v218 = ((2 * v216) ^ 0x9F6EFD34) - ((2 * ((2 * v216) ^ 0x9F6EFD34)) & 0x3CFF0DA8) - 1635809579;
  v219 = (v217 ^ 0x7FFFDFDE)
       + ((2 * v217) & 0xFFFFBFBC)
       + (v218 & 0xB07AD0AE ^ 0x190B82F5)
       + ((2 * v218) & 0x6015A11C ^ 0xDFEAFEF7)
       - 158392910;
  v220 = *((_DWORD *)v129 + (HIBYTE(v208) ^ 0x4C)) ^ ((BYTE2(v214) ^ 0x92A80228)
                                                    - ((2 * (BYTE2(v214) ^ 0x92A80228)) & 0x4000038)
                                                    - 1424521188) ^ 0xD71011ED ^ *(_DWORD *)&v130[4
                                                                                                * ((1948992315
                                                                                                  - (v215 | 0x742B433B)
                                                                                                  + (v215 | 0x8BD4BCC4)) ^ 0x3D4FC01)];
  v221 = 2 * ((v220 & v219) - ((2 * (v220 & v219)) & 0x2191DAA8)) + 563206824;
  v222 = v220 + v219;
  v223 = ((v209 & 0xDA ^ 0xB31FA941) + (v209 & 0x25) - 1) ^ 0x776F33BE;
  v224 = (v222 ^ 0xAB06EB77)
       + ((2 * v222) & 0x560DD6EE)
       + (v221 ^ 0xE0D746D9)
       + ((2 * v221) & 0x7D72C71C ^ 0xBEDD7AEF)
       + 1;
  v225 = *(_DWORD *)&v134[4 * ((((2 * v223) & 0x88A13410) - v223 + 421938423) ^ 0xDD56DE95)];
  v226 = *(_DWORD *)&v130[4 * (((BYTE2(v208) ^ 0x81) - ((2 * (BYTE2(v208) ^ 0x81)) & 0x13C) + 1438) ^ 0x52C)];
  v227 = (((HIWORD(v208) << 21) ^ 0x3EE00000) - ((2 * ((HIWORD(v208) << 21) ^ 0x3EE00000)) & 0x2400000) + 20499072) & 0x1FE00000 ^ 0x15600000;
  HIDWORD(v228) = v226 ^ 0x503;
  LODWORD(v228) = v226 ^ 0x3B8E5000;
  v229 = (1555783744 - (v227 | 0x5CBB6040) + (v227 | 0xA3449FBF)) ^ ((v228 >> 11)
                                                                   - ((2 * (v228 >> 11)) & 0x93496612)
                                                                   - 911953143);
  v230 = (875520441 - (((v229 >> 17) & 0xA) + ((v229 >> 17) | 0xFFFFFFFA))) ^ 0x76CD31BC;
  v231 = (678120468 - (v230 | 0x286B4C14) + (v230 | 0xD794B3EB)) ^ 0x9576E3EA | (((v229 << 15) ^ 0x34880000)
                                                                               - 1280295707
                                                                               - ((2 * ((v229 << 15) ^ 0x34880000)) & 0x67600000)) ^ 0xB3B03CE5;
  HIDWORD(v228) = 15 - v231;
  LODWORD(v228) = (v231 - ((2 * v231) & 0x36D755C0) - 1687442720) ^ 0xF5E01EB0;
  v232 = (1439456245 - (v209 ^ 0x12CD35 | 0x55CC5BF5) + (v209 ^ 0x12CD35 | 0xAA33A40A)) ^ v225 ^ (v224 - ((2 * v224 + 124055600) & 0x17E40358) - 1616610876);
  v233 = ((v211 ^ 0x28) + (v211 & 0xCA ^ 0x52875DC2) - ((v211 ^ 0x28) & 0xCA)) ^ 0x72C359EE;
  v234 = HIBYTE(v214) ^ 0x4D;
  v235 = *((_DWORD *)v132 + (BYTE1(v214) ^ 0x1Bu)) ^ *((_DWORD *)v129 + (HIBYTE(v209) ^ 0x42)) ^ (673295432
                                                                                                - (v233 | 0x2821AC48)
                                                                                                + (v233 | 0xD7DE53B7)) ^ *(_DWORD *)&v134[4 * ((157488545 - (v211 ^ 0x6A6A6B8F | 0x96315A1) + (v211 ^ 0x6A6A6B8F | 0xF69CEA5E)) ^ 0x9CF6813C)] ^ (v229 >> 21) ^ ((v228 >> 4) - ((2 * (v228 >> 4)) & 0x6292F812) - 1320584183);
  v236 = (1171263787 - (BYTE1(v208) ^ 5 | 0x45D0112B) + (BYTE1(v208) ^ 5 | 0xBA2FEED4)) ^ 0xBD0FEA74;
  v237 = *(_DWORD *)&v130[4 * ((((2 * (BYTE2(v209) ^ 0x99)) & 0x11C) - (BYTE2(v209) ^ 0x99) + 6001) ^ 0x17E5)] ^ *((_DWORD *)v129 + (HIBYTE(v211) ^ 0x82)) ^ *(_DWORD *)&v134[4 * ((((2 * (v212 ^ 0x81200D1)) | 0xD72520C2) - (v212 ^ 0x81200D1) + 342716319) ^ 0xE3809018)] ^ ((HIWORD(v209) & 0x60) + (BYTE2(v209) ^ 0xFFFFFF66) + (BYTE2(v209) | 0xD558E19F) + 1) ^ *((_DWORD *)v132 + ((((2 * v236) & 0x2B7E2CFA) - v236 + 1782638978) ^ 0x6D60EDA3));
  v238 = v237 ^ ((v212 ^ 5) + (v212 & 0xFC ^ 0xF8) - ((v212 ^ 5) & 0xFC));
  v239 = ((BYTE2(v211) ^ 0x70) + (HIWORD(v211) & 0x1A ^ 0xE5997B0A) - ((BYTE2(v211) ^ 0x70) & 0x1A)) ^ 0xF5C36F82;
  v240 = ((v208 ^ 0xA6) - ((2 * (v208 ^ 0xA6)) & 0xEEEEEEEE) - 683623561) ^ 0xD7C26F73;
  v241 = ((v208 & 0xD8 ^ 0xEDD9A349) + (v208 & 0x27) - 1) ^ 0x9FBBEFFB;
  v242 = *((_DWORD *)v129 + v234) ^ *((_DWORD *)v132 + (BYTE1(v209) ^ 0x98u)) ^ *(_DWORD *)&v130[4
                                                                                               * (((HIWORD(v211) & 0x52 ^ 0x12F17511)
                                                                                                 - (HIWORD(v211) | 0xFFFFFF52)
                                                                                                 - 2) ^ 0x12F175B7)] ^ (1896708526 - (v239 | 0x710D79AE) + (v239 | 0x8EF28651)) ^ (((2 * v240) & 0x1012354) - v240 + 741035605) ^ *(_DWORD *)&v134[4 * ((((2 * v241) & 0x20409116) - v241 - 430241932) ^ 0x94394B0F)];
  v243 = (HIWORD(v242) & 0xA ^ 0x94B4B90A) - (HIWORD(v242) & 0xA) + (BYTE2(v242) ^ 0x90);
  v244 = (v235 ^ 0x6B | 0x93D45C9C) - (v235 ^ 0x6B | 0x6C2BA363) + 1814799203;
  v245 = *(_DWORD *)&v130[4 * (((v243 ^ 0x9424E586) - (v243 & 0x1810) + (v243 & 0x8020A010 ^ 0x4A0A0010)) ^ 0xCABAE4D6)] ^ *((_DWORD *)v132 + (BYTE1(v237) ^ 0x31u)) ^ *((_DWORD *)v129 + (HIBYTE(v232) ^ 0x90)) ^ (536612474 - (BYTE2(v242) ^ 0xF0 | 0x1FFC0E7A) + (BYTE2(v242) ^ 0xF0 | 0x6003F185)) ^ *(_DWORD *)&v134[4 * (v235 ^ 0x98)] ^ ((v244 & 0x918454BF ^ 0x280100B9) + (v244 & 0x2500B40 ^ 0x2000201) - 1);
  v246 = *((_DWORD *)v129 + (HIBYTE(v235) ^ 0x34));
  v247 = (HIWORD(v232) & 0x13) + 0xFFFF + (HIWORD(v232) & 0xEC ^ 0xC629);
  v248 = (((2 * (BYTE2(v232) ^ 0x8D)) | 0xA85C9B3C) - (BYTE2(v232) ^ 0x8D) + 735162978) ^ 0x74364197;
  v249 = *(_DWORD *)&v130[4 * ((v248 - ((2 * v248) & 0xAB33A13E) + 1436143775) ^ 0xF581DCB9)];
  v250 = ((2 * (v249 & 0x7F3187DA ^ 0x58010210)) & 0xFA020834) - (v249 & 0x7F3187DA ^ 0x58010210) + 45790180;
  HIDWORD(v228) = v246 ^ 0x11D9;
  LODWORD(v228) = v246 ^ 0x75BF0000;
  v251 = (v228 >> 13) - ((2 * (v228 >> 13)) & 0xDCD25682) - 295097535;
  v252 = (((2 * (v247 & 0x25 ^ 0x808A5824)) & 0x14A008) - (v247 & 0x25 ^ 0x808A5824) + 1134856811) ^ 0x21800A6F;
  v253 = (((2 * (v247 & 0x3DA ^ 0x4D0)) | 0x799640FE) - (v247 & 0x3DA ^ 0x4D0) + 1127538561) ^ 0x8DD7106F;
  v254 = ((v250 & 0x6B199AE0 ^ 0x2958C081) + (v250 ^ 0x56071A7A) - ((v250 ^ 0x56071A7A) & 0x6B999AE0)) ^ (v253 - ((2 * v253) & 0x36DD0984) + 1533969638) ^ 0x16074183 | ((v249 & 0x80CE7825 ^ 0x20FA8051) + (v249 & 0x80484800 ^ 0x93014D8A) - ((v249 & 0x80CE7825 ^ 0x20FA8051) & 0xA058C840)) ^ (((2 * v252) | 0x8202A56A) - v252 - 1090605749) ^ 0xB00CCF2E;
  v255 = v254 - 162021376 - ((2 * v254) & 0xECAF8660) + 816;
  HIDWORD(v228) = v255 ^ 0x330;
  LODWORD(v228) = v255 ^ 0xF657C000;
  v256 = ((v228 >> 13) - ((2 * (v228 >> 13)) & 0x324A1534) - 1725625702) ^ v251;
  HIDWORD(v228) = v256 ^ 0x234E3;
  LODWORD(v228) = v256 ^ 0x7D900000;
  v257 = v238;
  v258 = ((v238 ^ 0xFFFFFF63) + ((2 * v238) & 0xC4) - 1990090594) ^ 0xA9406414;
  v259 = (((2 * (BYTE2(v235) ^ 0xF)) & 0xE8) - (BYTE2(v235) ^ 0xF) + 970711947) ^ 0x3ECDE36B;
  v260 = *(_DWORD *)&v134[4
                        * ((((2 * (v257 ^ 0x408C409C)) | 0x8F4BB4BA) - (v257 ^ 0x408C409C) - 1202051677) ^ 0x7299ABD)] ^ *((_DWORD *)v132 + (BYTE1(v242) ^ 0xB0u)) ^ (((2 * v258) | 0x7B1D8B1C) - v258 + 1114716786) ^ ((v228 >> 19) - ((2 * (v228 >> 19)) & 0xCE0B6AD0) + 1728427368);
  v261 = *((_DWORD *)v129 + (HIBYTE(v237) ^ 0xE4)) ^ *((_DWORD *)v132 + (BYTE1(v232) ^ 0x14u)) ^ *(_DWORD *)&v134[4 * ((2058559725 - (v242 ^ HIDWORD(a29) | 0x7AB320ED) + (v242 ^ HIDWORD(a29) | 0x854CDF12)) ^ 0x85DCD27B)] ^ (((2 * (v242 ^ 0xA7)) | 0x782BD738) - (v242 ^ 0xA7) + 1139414116) ^ (-1301508835 - (v259 | 0xB26C8D1D) + (v259 | 0x4D9372E2)) ^ *(_DWORD *)&v130[4 * (((BYTE2(v235) ^ 2) - ((2 * (BYTE2(v235) ^ 2)) & 0xBE) + 1375) ^ 0x576)];
  v262 = ((BYTE2(v237) ^ 0xDB) + (HIWORD(v237) & 0x71 ^ 0x9C91E020) - ((BYTE2(v237) ^ 0xDB) & 0x71)) ^ 0x4591A860;
  LOWORD(v256) = (BYTE2(v237) ^ 0x63) - ((2 * (BYTE2(v237) ^ 0x63)) & 0x15A) - 2899;
  v263 = (v232 & 0x56 ^ 0x8815E51) + (v232 & 0xA9) - 1;
  v264 = *(_DWORD *)&v130[4 * (((v256 & 0x4A3 ^ 0x19000421) + (v256 & 0x35C ^ 0xA2400045) - 1) ^ 0xBB40006D)] ^ *((_DWORD *)v129 + (HIBYTE(v242) ^ 0x8E)) ^ *(_DWORD *)&v134[4 * ((((2 * (v232 ^ 0xAB621044)) & 0x1244016A) - (v232 ^ 0xAB621044) - 221144758) ^ 0x59B389AB)] ^ (v262 - ((2 * v262) & 0xB000AFBA) - 52570147) ^ ((v263 & 0x811872 ^ 0x1040102) + (v263 ^ 0xE49BF8F4) - ((v263 ^ 0xE49BF8F4) & 0x2C0A0472)) ^ *((_DWORD *)v132 + ((1270053052 - (BYTE1(v235) ^ 0x8761A308 | 0x4BB378BC) + (BYTE1(v235) ^ 0x8761A308 | 0xB44C8743)) ^ 0x332D2489));
  v265 = HIWORD(v261);
  v266 = ((HIWORD(v264) & 0x43 ^ 0xB3999441) + (HIWORD(v264) & 0xBC ^ 0xD) - 1) ^ 0x5A9D94A9;
  v267 = (((2 * (v260 ^ 0x3D)) & 0xA2) - (v260 ^ 0x3D) + 2101151662) ^ 0x7479033F;
  v268 = *(_DWORD *)&v130[4 * ((((2 * v266) & 0xC00805C2) - v266 + 521223454) ^ 0xF6153DCA)] ^ *((_DWORD *)v129
                                                                                               + (HIBYTE(v245) ^ 0x9F)) ^ *((_DWORD *)v132 + (BYTE1(v261) ^ 0x6Bu)) ^ BYTE2(v264) ^ *(_DWORD *)&v134[4 * (((v260 & 0xB6 ^ 0x660A0EB1) + (v260 & 0x49) - 1) ^ 0x660A0E77)] ^ (902536459 - (v267 | 0x35CB9D0B) + (v267 | 0xCA3462F4));
  v269 = (((2 * (BYTE2(v245) ^ 0xF7)) & 0x178) - (BYTE2(v245) ^ 0xF7) + 1219820867) & 0x402417FF;
  v270 = ((BYTE1(v264) ^ 0xEE) - ((2 * (BYTE1(v264) ^ 0xEE)) & 0xFFFFFFE3) - 1116880399) ^ 0x354DC9B3;
  v271 = *(_DWORD *)&v130[4 * (v269 ^ 0x4024154C)] ^ *((_DWORD *)v132
                                                     + ((((2 * v270) & 0x100004CE) - v270 - 755827304) ^ 0x5AD2F56E)) ^ *(_DWORD *)&v134[4 * (((v261 ^ 0x719A5A8) + (v261 & 0xCF ^ 0x8664847) - ((v261 ^ 0x719A5A8) & 0x40920CF)) ^ 0xB76CD86)] ^ ((v261 & 0x23) + 34091007 + (v261 & 0xDC ^ 0x88974805)) ^ v269 ^ *((_DWORD *)v129 + (HIBYTE(v260) ^ 0x2D));
  v272 = *((_DWORD *)v129 + (HIBYTE(v261) ^ 0x74));
  v273 = (-579904692 - (v264 ^ 0x8F | 0xDD6F5B4C) + (v264 ^ 0x8F | 0x2290A4B3)) ^ 0x5290B0B3;
  v274 = ((BYTE2(v261) ^ 0x5F) - ((2 * (BYTE2(v261) ^ 0x5F)) & 0xC0) + 1918133344) ^ 0x9F3E77A1;
  v275 = v274 - ((2 * v274) & 0x80002336) + 1350586779;
  v276 = HIBYTE(v264) ^ 0xC7;
  v277 = v272 ^ *((_DWORD *)v132 + (BYTE1(v245) ^ 0x93u)) ^ *(_DWORD *)&v134[4
                                                                           * ((1435984643
                                                                             - (v273 | 0x55976303)
                                                                             + (v273 | 0xAA689CFC)) ^ 0xDA688811)] ^ ((v264 ^ 0x80689) - ((2 * (v264 ^ 0x80689)) & 0x100006) - 1382035197) ^ *(_DWORD *)&v130[4 * (((BYTE2(v260) ^ 0xFFFFFFE4) + 1749647014 + ((2 * BYTE2(v260)) | 0x2F6D02B6)) ^ 0x97B68138)];
  v278 = ((HIWORD(v260) & 0x98 ^ 0x219) + (HIWORD(v260) & 0x67) - 1) ^ v277;
  v279 = (((2 * (BYTE1(v260) ^ 0x4A)) & 0x156) - (BYTE1(v260) ^ 0x4A) + 431563348) ^ 0xB5BB248E;
  v280 = ((v245 ^ 0xF6) - ((2 * (v245 ^ 0xF6)) & 0x6E) + 620846391) ^ 0x21017CF7;
  v281 = (v245 & 0x8A ^ 0x4301B98A) - (v245 & 0x8A) + (v245 ^ 4);
  v282 = *(_DWORD *)&v130[4 * (v265 & 0xF6 ^ 0x81) - 4 + 4 * (v265 & 9)] ^ *((_DWORD *)v129 + v276) ^ *(_DWORD *)&v134[4 * (((v281 & 0x2013 ^ 0xA4C40401) + (v281 ^ 0x5A1139BE) - ((v281 ^ 0x5A1139BE) & 0x8013)) ^ 0xBDD4245C)] ^ v275 ^ *((_DWORD *)v132 + ((v279 - ((2 * v279) & 0x50040FAC) + 711714774) ^ 0x8669E1BB));
  v283 = v282 ^ (-14286497 - (v280 | 0xFF26015F) + (v280 | 0xD9FEA0));
  v284 = v271 ^ ((v271 ^ 0xFB498C57) - ((2 * (v271 ^ 0xFB498C57) + 1585363854) & 0x76092850) + 1782837743) ^ ((v271 ^ 0xD476D191) - ((2 * (v271 ^ 0xD476D191) + 2) & 0xDF4CDEF0) + 1873178489) ^ 0x7F2BD53E;
  v285 = v284 - ((2 * v284 + 511622028) & 0x102CFC7E) + 928373765;
  LOBYTE(v245) = BYTE2(v283) ^ 0x71;
  v286 = ((BYTE2(v283) ^ 0x34) + ((BYTE2(v283) ^ 0x71) & 0x1E ^ 0x6CD5971A) - ((BYTE2(v283) ^ 0x34) & 0x1E)) ^ 0x2ED1978A;
  v287 = ((v285 ^ 0x27) - ((2 * (v285 ^ 0x27)) & 0x4C) + 1858364454) ^ 0x2C852436;
  v288 = *(_DWORD *)&v130[4 * ((v286 - ((2 * v286) & 0x345E) - 1919378897) ^ 0xCF9C9AE9)] ^ *((_DWORD *)v129
                                                                                            + (HIBYTE(v268) ^ 0xDF)) ^ *((_DWORD *)v132 + (BYTE1(v278) ^ 0xE2u)) ^ *(_DWORD *)&v134[4 * (((v285 ^ 0x65) + (v285 & 0xF4 ^ 0x290) - ((v285 ^ 0x65) & 0xF4)) ^ 0x2C7)] ^ (-184174354 - (v287 | 0xF505B8EE) + (v287 | 0xAFA4711));
  v289 = ((2 * (BYTE2(v268) ^ 0x74)) | 0xC75DA39A) - (BYTE2(v268) ^ 0x74) - 1672401357;
  v290 = ((BYTE1(v282) ^ 0xBF) + ((v282 >> 8) & 0x6E ^ 0x90EEFD40) - ((BYTE1(v282) ^ 0xBF) & 0x6E)) ^ 0xC9CE0C2C;
  v291 = *((_DWORD *)v129 + (HIBYTE(v285) ^ 0x55)) ^ *(_DWORD *)&v130[4
                                                                    * ((921377667
                                                                      - (BYTE2(v268) ^ 0x4A | 0x36EB1B83)
                                                                      + (BYTE2(v268) ^ 0x4A | 0xC914E47C)) ^ 0xC914E43F)] ^ *(_DWORD *)&v134[4 * (v278 ^ 0xB4)] ^ ((v278 ^ 0xA529) + (v278 & 0xDB ^ 0x12D2) - ((v278 ^ 0xA529) & 0x1DB)) & 0x1FFF ^ ((v289 & 0xE2B15444 ^ 0x80100400) + (v289 ^ 0x63A3F145) - ((v289 ^ 0x63A3F145) & 0xE2B15444)) ^ *((_DWORD *)v132 + ((((2 * v290) | 0x134FB0D0) - v290 + 1985488792) ^ 0xD087294D));
  v292 = *(_DWORD *)&v130[4 * (BYTE2(v285) ^ 0xD2)] ^ *((_DWORD *)v129 + (HIBYTE(v277) ^ 0xFA));
  v293 = (1991070133 - (BYTE1(v268) ^ 0x3A | 0x76AD51B5) + (BYTE1(v268) ^ 0x3A | 0x8952AE4A)) ^ 0xE9B8AE0E;
  v294 = *(_DWORD *)&v134[4
                        * (((v283 ^ 0x29)
                          + (v283 & 0x65 ^ 0x244)
                          - ((v283 ^ 0x29) & 0x65)) ^ 0x276)];
  v295 = ((2 * (v283 ^ 0x408497A)) & 0x81013EE) - (v283 ^ 0x408497A) + 1652646408;
  v296 = *((_DWORD *)v129 + (HIBYTE(v283) ^ 0x36));
  v297 = ((2 * (HIWORD(v277) & 0x58 ^ 0x10)) | 0x1184BE92) - (HIWORD(v277) & 0x58 ^ 0x10) + 1732092087;
  v298 = BYTE2(v277) ^ 0x60;
  v299 = (HIWORD(v277) & 0xA7) - ((v277 >> 15) & 0x40) + 1180378208;
  v300 = (v299 & 0x401124C6 ^ 0x2004C04A) + (v299 ^ 0xD67B24A4) - ((v299 ^ 0xD67B24A4) & 0x800004C6);
  v301 = (v297 & 0x18400058 ^ 0xB8DEDFFF) + 615636861;
  v302 = v292 ^ *((_DWORD *)v132 + ((((2 * v293) | 0x748C89C6) - v293 + 1169799965) ^ 0xDAAC44D5)) ^ v294 ^ v295;
  BYTE2(v297) = BYTE2(v302) ^ 0xD0;
  v303 = *(_DWORD *)&v130[4 * v298];
  v304 = (((2 * (v268 ^ 9)) | 0xD045E58C) - (v268 ^ 9) - 1747120838) ^ 0xE9E3FAD2;
  v305 = (((2 * (v268 ^ 0x76)) & 0xEEEEEEEE) - (v268 ^ 0x76) + 2067071112) ^ 0xF9142C08;
  v306 = (((2 * v304) & 0x24256986) - v304 + 1844267836) ^ *(_DWORD *)&v134[4
                                                                          * ((843878356
                                                                            - (v305 | 0x324C8FD4)
                                                                            + (v305 | 0xCDB3702B)) ^ 0x4F925CA9)];
  v307 = 1219447802 - (v306 & 0x9AAB99F2 ^ 0x8A2B11D2 | 0x48AF4BFA) + (v306 & 0x9AAB99F2 ^ 0x8A2B11D2 | 0xB750B405);
  v308 = ((v306 & 0x40000201 ^ 0xC88288F1) + (v306 & 0x2554640C ^ 0x404240D) - 1) ^ 0xA19871;
  v309 = v303 ^ v296 ^ v300 ^ v301 ^ *((_DWORD *)v132
                                     + (((BYTE1(v285) ^ 0x32)
                                       + ((v285 >> 8) & 0x77 ^ 0xB45)
                                       - ((BYTE1(v285) ^ 0x32) & 0x77777777)) ^ 0xBDC)) ^ v307 ^ (((2 * v308) & 0xCA84A024)
                                                                                                - v308
                                                                                                - 1740820595);
  v310 = HIBYTE(v288) ^ 0xE6;
  v311 = v310
       + (((HIBYTE(v288) ^ 0xFFFFFFFA) + 1) ^ 0xC9FFA97E)
       + ((2 * ((HIBYTE(v288) ^ 0xFFFFFFFA) + 1)) & 0x93FF52FC)
       + 905991810;
  v312 = ((v311 - ((2 * v311) & 0x94055FF6) + 1241690107) ^ 0xB5FD5005) + v310;
  v313 = LODWORD(STACK[0x360]);
  v314 = off_1E3D64110[(int)v313 - 1410];
  v315 = *((_DWORD *)v314 + (BYTE2(v309) ^ 0x4Fu));
  v316 = v315 - 2 * ((v315 + 163381248) & 0x16880095 ^ v315 & 0x10) - 1606090619;
  v317 = ((((v302 ^ 0xD1D0DA2B) >> 8) & 0x41)
        + (((unsigned __int16)(v302 ^ 0xDA2B) >> 8) ^ 0xFFFFFF67)
        + (((unsigned __int16)(v302 ^ 0xDA2B) >> 8) | 0xFD67B7BE)
        + 1) ^ 0xFF77D62D;
  v318 = ((2 * v317) & 0x55ECF9E0) - v317;
  v319 = *((_DWORD *)v314
         + (((BYTE2(v288) ^ 0x200158) + (HIWORD(v288) & 0xF6 ^ 0xBAD68CA6) - ((BYTE2(v288) ^ 0x200158) & 0x2001F6)) ^ 0xBAD68C7F));
  v320 = v319 - ((2 * v319 + 326762496) & 0x8E1120FE) - 792358785;
  v321 = ((32 * v320) ^ 0xE1120FE0) - ((2 * ((32 * v320) ^ 0xE1120FE0)) & 0x7B17F1C0);
  v322 = (((v309 >> 8) & 0xFA ^ 0xEC253C4F) - ((v309 >> 8) & 5)) ^ 0xE4658C1D;
  v323 = (-1536145231
        - (v302 ^ 0x2B ^ BYTE2(v285) ^ 0x76 | 0xA47048B1)
        + (v302 ^ 0x2B ^ BYTE2(v285) ^ 0x76 | 0x5B8FB74E)) ^ 0x42FD8146;
  v324 = *((_DWORD *)v314 + (BYTE2(v291) ^ 0xC9u));
  v325 = (char *)off_1E3D64110[(int)v313 - 1281] - 12;
  v326 = (char *)off_1E3D64110[(int)v313 - 1397] - 4;
  v327 = *(_DWORD *)&v325[4 * v312];
  v328 = *(_DWORD *)&v325[4 * (HIBYTE(v291) ^ 1)] ^ *(_DWORD *)&v326[4
                                                                   * ((((2 * v323) & 0x30E215F2) - v323 + 663680262) ^ 0x3EFCC385)] ^ v320;
  v329 = off_1E3D64110[(int)v313 - 1315];
  v330 = *(_DWORD *)&v325[4 * (HIBYTE(v302) ^ 0xCE)];
  v331 = v324 - 2 * ((v324 + 163381248) & 0x600D5167 ^ v324 & 2) + 1774866789;
  v332 = *((_DWORD *)v329 + ((((2 * v322) | 0x3BDEE142) - v322 - 502231201) ^ 0x15AFC026)) ^ v328 ^ (v321 + 1032583409);
  v333 = *(_DWORD *)&v325[4 * (HIBYTE(v309) ^ 0x84)];
  LODWORD(v325) = *(_DWORD *)&v326[4 * (v309 ^ 0xBF)];
  v334 = *((_DWORD *)v314 + (BYTE2(v297) ^ 0xA2u));
  v335 = (((v288 ^ v245) ^ 0x84)
        + ((v288 ^ v245) & 0x7F ^ 0xF2D2B47B)
        - (((v288 ^ v245) ^ 0x84) & 0x7F)) ^ 0xA0DAA4D7;
  v336 = v334 - ((2 * v334 + 326762496) & 0x47972FFE) + 763926527;
  v337 = v327 ^ LODWORD(STACK[0x370]) ^ *((_DWORD *)v329 + ((v318 + 1426686735) ^ 0x5719E2E5)) ^ *(_DWORD *)&v326[4 * (v291 ^ 0x5C)] ^ v316 ^ (((32 * v316) ^ 0xD10010A0) - ((2 * ((32 * v316) ^ 0xD10010A0)) & 0xAEDD3C80) + 1466867267);
  v338 = v330 ^ LODWORD(STACK[0x3C8]) ^ *((_DWORD *)v329 + (BYTE1(v288) ^ 0x12u)) ^ v325 ^ v331 ^ (((32 * v331) ^ 0x1AA2CA0) - ((2 * ((32 * v331) ^ 0x1AA2CA0)) & 0xAD9EEE80) + 1456437071);
  v339 = v333 ^ LODWORD(STACK[0x428]) ^ *((_DWORD *)v329 + (BYTE1(v291) ^ 0x6Bu)) ^ v336 ^ (((32 * v336) ^ 0x7972FFE0)
                                                                                          - ((2
                                                                                            * ((32 * v336) ^ 0x7972FFE0)) & 0xB10DC180)
                                                                                          - 662249259) ^ *(_DWORD *)&v326[4 * ((((2 * v335) | 0x4C533448) - v335 + 1507223004) ^ 0xF4218A09)];
  v340 = (((LODWORD(STACK[0x378]) ^ 0xA4BCC0F1 ^ v332) & (LODWORD(STACK[0x378]) ^ 0x30D99C9B))
        - ((2 * ((LODWORD(STACK[0x378]) ^ 0xA4BCC0F1 ^ v332) & (LODWORD(STACK[0x378]) ^ 0x30D99C9B))) & 0xDAB7EACC)
        - 312740506) ^ ((v332 ^ 0x6B9AA395 | LODWORD(STACK[0x378]) ^ 0x30D99C9B)
                      - ((2 * (v332 ^ 0x6B9AA395 | LODWORD(STACK[0x378]) ^ 0x30D99C9B)) & 0x313686E8)
                      + 412828532);
  v341 = (char *)off_1E3D64110[(int)v313 - 1359] - 4;
  LOBYTE(v332) = v341[HIBYTE(v338) ^ 0x4ELL];
  v342 = (_BYTE *)(v355 + STACK[0x438]);
  v343 = STACK[0x438];
  v342[1] = (v332 + (~(2 * v332) | 0xFB) + 35) ^ 0xC2;
  LOBYTE(v332) = v341[HIBYTE(v339) ^ 0x2ALL];
  v342[5] = (v332 - ((2 * v332 + 64) & 0x4C) + 70) ^ 0x84;
  v344 = (char *)off_1E3D64110[(int)v313 - 1318] - 8;
  v342[4] = (v344[v338 ^ 0x2FLL] + (~(2 * v344[v338 ^ 0x2FLL] - 70) | 0x39) + 65) ^ 0xC1;
  LOBYTE(v332) = v344[(((2 * (v337 ^ 0x10009FC)) | 0x993B1C4C)
                     - (v337 ^ 0x10009FC)
                     + 862089690) ^ 0xCD9D8710];
  *(v342 - 4) = (v332 - ((2 * v332 + 58) & 0x66) - 112) ^ 0x58;
  v345 = (((v338 >> 8) & 0x91 ^ 0x95EE4281) + ((v338 >> 8) & 0x6E ^ 0x2F) - 1) ^ 0xD9EE6305;
  v346 = (char *)off_1E3D64110[(int)v313 - 1288] - 4;
  LOBYTE(v345) = v346[(((2 * v345) & 0x4718) - v345 + 2141572211) ^ 0x33A5ED1ELL];
  v342[3] = (((-96 * v345) | 0x7F) - 48 * v345 + 1) ^ (-51 * v345 - ((26 * v345 + 38) & 0x3C) + 49) ^ 0xC0;
  LOBYTE(v345) = v341[HIBYTE(v337) ^ 0xF7];
  *(v342 - 7) = (v345 - 2 * (((v345 & 0x63) + 32) ^ v345 & 2) - 127) ^ 0xC6;
  LOBYTE(v345) = v346[((BYTE1(v337) ^ 0xA6) - ((2 * (BYTE1(v337) ^ 0xA6)) & 0x136u) + 2971) ^ 0xBC9];
  LOBYTE(v333) = (BYTE2(v340) ^ 0x6A | 0x20) - (BYTE2(v340) ^ 0x6A | 0xDF) - 33;
  *(v342 - 5) = (-51 * v345 - ((26 * v345 + 38) & 0x55) + 61) ^ (((-96 * v345) & 0xC0 ^ 0x7F) - 48 * v345 + 36) ^ 0xCC;
  v347 = (char *)off_1E3D64110[(int)v313 - 1190] - 4;
  v348 = v347[((v333 & 0x40 ^ 0xC4) - 898627945) ^ 0xCA700F66 ^ ((v333 & 0xBF ^ 0x23)
                                                                                - ((2 * (v333 & 0xBF ^ 0x23)) & 0xFFFFFFF9)
                                                                                + 2300)];
  HIDWORD(v228) = v348 ^ 5;
  LODWORD(v228) = (v348 ^ 0xAAAAAAAA) << 24;
  *(v342 - 2) = ((v228 >> 28) + (~(2 * (v228 >> 28)) | 5) + 126) ^ 0x9A;
  LOWORD(v348) = (v339 ^ 0x7E) + (v339 & 0xEC ^ 0x6380) - ((v339 ^ 0x7E) & 0xEC);
  LOBYTE(v348) = v344[((v348 & 0xC50 ^ 0xA720C11) + (v348 & 0x33AFu) - 1) ^ 0xA722F06];
  v342[8] = (v348 - ((2 * v348 + 10) & 8) - 31) ^ 0x7C;
  v349 = v347[((BYTE2(v339) ^ 0xA4) - 307432363 - ((2 * (BYTE2(v339) ^ 0xA4)) & 0xFA) + 40) ^ 0xEDACF455];
  HIDWORD(v228) = v349 ^ 5;
  LODWORD(v228) = (v349 ^ 0xAAAAAAAA) << 24;
  v342[6] = ((v228 >> 28) - ((2 * (v228 >> 28)) & 0x33) - 103) ^ 0xBA;
  LOBYTE(v349) = v341[BYTE3(v340) ^ 0xEFLL];
  *(v342 - 3) = (v349 - 2 * ((v349 + 32) & 0xDF ^ v349 & 5) + 122) ^ 0xB3;
  v350 = (((v339 >> 8) & 0x40) + (BYTE1(v339) ^ 0xFFFFFF66) + (BYTE1(v339) | 0x55B39DBF) + 1) ^ 0xD53310FF;
  LOBYTE(v350) = v346[(((2 * v350) | 0x462C3B86) - v350 - 588651971) ^ 0xA3969096];
  v342[7] = (-48 * v350 - 56) ^ (-51 * v350 - ((26 * v350 + 38) & 0x62) - 60) ^ 0x1C;
  v351 = ((v340 & 0xA5 ^ 0x8FA83A0) + (v340 & 0x5A ^ 9) - 1) ^ 0x9B7375BC;
  LOBYTE(v351) = v344[(985953806 - (v351 | 0x3AC4760E) + (v351 | 0xC53B89F1)) ^ 0x56B27F34];
  *v342 = (v351 + (~(2 * v351 + 26) | 0xE1) + 109) ^ 0x84;
  v352 = v347[((BYTE2(v338) ^ 0xAC) - ((2 * (BYTE2(v338) ^ 0xAC)) & 0x174) + 8634) & 0x27FF ^ 0x21B4];
  HIDWORD(v228) = v352 ^ 5;
  LODWORD(v228) = (v352 ^ 0xAAAAAAAA) << 24;
  v342[2] = ((v228 >> 28) - ((2 * (v228 >> 28)) & 0xA0) + 80) ^ 0x5D;
  v353 = v347[((BYTE2(v337) ^ 0xC) + (HIWORD(v337) & 0x5E ^ 0x2752) - ((BYTE2(v337) ^ 0xC) & 0x5E)) ^ 0x2737];
  HIDWORD(v228) = v353 ^ 5;
  LODWORD(v228) = (v353 ^ 0xAAAAAAAA) << 24;
  *(v342 - 6) = ((v228 >> 28) - ((2 * (v228 >> 28)) & 0xCC) - 26) ^ 0x48;
  LOBYTE(v353) = v346[(((2 * (BYTE1(v340) ^ 0xE6)) | 0xA47A9B04) - (BYTE1(v340) ^ 0xE6) + 767734398) ^ 0xD23D4D75];
  *(v342 - 1) = (((-96 * v353) ^ 0x7F) - 48 * v353 - 75) ^ (-51 * v353 - ((38 - 102 * v353) & 0xA0) + 99) ^ 0x69;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(STACK[0x468] + 8 * (int)(((16 * ((v343 + 9) < 0x150)) | (32 * ((v343 + 9) < 0x150))) ^ v313)) - 8))(v340, 26, v313, STACK[0x468], v346, 38, 94, 250, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           v355);
}

void sub_19C5C4E18()
{
  LODWORD(STACK[0x378]) = ((LODWORD(STACK[0x350]) ^ 0x476) - 2117746422) ^ LODWORD(STACK[0x348]);
  LODWORD(STACK[0x428]) = LODWORD(STACK[0x2F8]) ^ 0x2F63613;
  LODWORD(STACK[0x370]) = LODWORD(STACK[0x300]) ^ 0xBD4B1960;
  LODWORD(STACK[0x3C8]) = LODWORD(STACK[0x2C8]) ^ 0xEF0877CC;
  JUMPOUT(0x19C5BFF34);
}

uint64_t sub_19C5C4E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37)
{
  uint64_t v37;
  unint64_t v38;

  v38 = STACK[0x4F8];
  STACK[0x668] -= 32;
  *(_BYTE *)(v38 + 335) = (a37 + 26) ^ *(_BYTE *)(a13 + 335) ^ 0xD ^ *(_BYTE *)(*(_QWORD *)(v37 + 8 * (a37 ^ 0x324))
                                                                              + 15) ^ *(_BYTE *)(*(_QWORD *)(v37 + 8 * (a37 - 551))
                                                                                                 + 3) ^ *(_BYTE *)(*(_QWORD *)(v37 + 8 * (a37 - 432)) + 7);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 8 * a37) - 4))(3814059251, 3239006395, 804);
}

void sub_19C5C4F4C()
{
  JUMPOUT(0x19C5C4ED0);
}

uint64_t sub_19C5C4F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  STACK[0x588] -= 16;
  return ((uint64_t (*)(void))(*(_QWORD *)(a4 + 8 * ((a6 - 187) ^ 0xF7)) - ((a6 - 9) | 0x41u) + 599))();
}

uint64_t sub_19C5C4F90@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, char a3@<W6>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _BYTE *a10)
{
  _BYTE *v10;
  int v11;

  v10 = (_BYTE *)STACK[0x5E8];
  v11 = 1159426354 - ((1 << ((a4 - 72) ^ 0x1A)) & 0xA36E262);
  a10[12] = HIBYTE(v11);
  a10[13] = a3 ^ BYTE2(v11);
  a10[14] = BYTE1(v11) ^ 0x34;
  a10[15] = v11 ^ 0x74;
  v10[16] ^= *a10 ^ 0x45;
  v10[17] ^= a10[1] ^ 0x45;
  v10[18] ^= a10[2] ^ 0x45;
  v10[19] ^= a10[3] ^ 0x45;
  v10[20] ^= a10[4] ^ 0x45;
  v10[21] ^= a10[5] ^ 0x45;
  v10[22] ^= a10[6] ^ 0x45;
  v10[23] ^= a10[7] ^ 0x45;
  v10[24] ^= a10[8] ^ 0x45;
  v10[25] ^= a10[9] ^ 0x45;
  v10[26] ^= a10[10] ^ 0x45;
  v10[27] ^= a10[11] ^ 0x45;
  v10[28] ^= a10[12] ^ 0x45;
  v10[29] ^= a10[13] ^ 0x45;
  v10[30] ^= a10[14] ^ 0x45;
  v10[31] ^= a10[15] ^ 0x45;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 8 * (a4 + 322)))(1306, a1, 288);
}

void sub_19C5C51A0()
{
  JUMPOUT(0x19C5C4FC0);
}

uint64_t sub_19C5C51A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(a4
                                        + 8
                                        * (((LODWORD(STACK[0x49C]) == (((((v8 - 1010) | 0x412) - 1272) | 0x220) ^ 0x3EF0AD26))
                                          * a8) ^ ((v8 - 1010) | 0x412)))
                            - 8))();
}

uint64_t sub_19C5C5204(uint64_t a1, int a2, char a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(a4
                                        + 8
                                        * ((785
                                          * (((v5 + 8) ^ (*(unsigned __int8 *)(v7
                                                                                              + (v6 - 1 + a2)) == (((v5 + 53) | a3) ^ a5))) & 1)) ^ v5))
                            - 12))();
}

uint64_t sub_19C5C5250@<X0>(uint64_t a1@<X3>, int a2@<W7>, int a3@<W8>)
{
  int v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8 * (((v4 == ((((v3 | 0x118) - 1272) | 0x220) ^ a3)) * a2) ^ (v3 | 0x118)))
                            - 8))();
}

uint64_t sub_19C5C5288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,char a22)
{
  int v22;
  unint64_t v23;
  char v24;

  LODWORD(STACK[0x49C]) = 1055960901;
  v23 = STACK[0x5E8];
  STACK[0x5D0] = 335;
  v24 = ((((a22 + (((v22 ^ 0x62) - 20) ^ 0x22)) ^ 0xBA) + 69 - ((2 * (a22 + (((v22 ^ 0x62) - 20) ^ 0x22))) & 0x8A)) ^ 0x45)
      * a20;
  *(_BYTE *)(v23 + 335) = (v24 - ((2 * v24) & 0x72) + 57) ^ 0x39;
  return ((uint64_t (*)(void))(*(_QWORD *)(a4
                                        + 8 * (((8 * (STACK[0x5D0] == 0)) | ((STACK[0x5D0] == 0) << 7)) ^ v22 ^ 0x562))
                            - 4))();
}

void sub_19C5C5804()
{
  JUMPOUT(0x19C5C579CLL);
}

uint64_t sub_19C5C5810()
{
  int v0;
  int v1;
  uint64_t v2;
  unint64_t v3;

  v2 = ((uint64_t (*)(void))STACK[0x2E0])();
  v3 = STACK[0x468];
  LODWORD(STACK[0x688]) = v1;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3
                                                      + 8
                                                      * (((v1 == ((v0 + 1530773238) & 0xA4C23F7F ^ 0x1CAAB549))
                                                        * (v0 ^ 0x7C5)) ^ v0))
                                          - 4))(v2);
}

uint64_t sub_19C5C5870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  uint64_t (*v10)(uint64_t);
  unint64_t v11;

  v9 = STACK[0x430];
  v10 = (uint64_t (*)(uint64_t))(*(_QWORD *)(a8 + 8 * ((v8 ^ 0x18E) - 510)) - 4);
  v11 = STACK[0x268];
  STACK[0x428] = STACK[0x268] + 2353;
  STACK[0x3C8] = v9 + 49;
  STACK[0x378] = v11 + 2333;
  STACK[0x370] = v9 + 29;
  STACK[0x368] = v11 + 2313;
  STACK[0x360] = v9 + 9;
  return v10(830167799);
}

void sub_19C5C62EC()
{
  int v0;

  LODWORD(STACK[0x680]) = v0;
  JUMPOUT(0x19C5C616CLL);
}

void sub_19C5C64F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31)
{
  STACK[0x4D0] = (a31 & 0x9308D7FB ^ 0xFFFFFFFFFFFFFA84)
               + *(_QWORD *)(STACK[0x468] + 8 * (LODWORD(STACK[0x474]) - 540));
  JUMPOUT(0x19C5C6944);
}

uint64_t sub_19C5C69D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;

  if ((v9 + v8 - 2138012469) > 0x40)
    v11 = v9 + v8 - 2138012469;
  else
    v11 = 64;
  return ((uint64_t (*)(void))(*(_QWORD *)(a8
                                        + 8 * (v10 ^ (2 * (a4 - v8 - v9 + v11 < (((v10 - 1797) | 0x185) ^ 0x1DAu)))))
                            - 113 * (v10 ^ 0x745u)
                            + 1804))();
}

uint64_t sub_19C5C6AA4(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  BOOL v10;

  if ((a2 - 2138012469) > 0x40)
    v9 = a2 - 2138012469;
  else
    v9 = 64;
  v10 = __CFADD__(a2 - 2138012470, a3 + v9);
  return ((uint64_t (*)(void))(*(_QWORD *)(a8
                                        + 8 * ((43 * ((v10 ^ (((v8 - 25) & 0xDD) + 22)) & 1)) | v8))
                            - 12))();
}

uint64_t sub_19C5C6B10@<X0>(int a1@<W0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(a2
                                        + 8
                                        * (((((a1 + 61) | 0x104) - 19)
                                          * (v5
                                           - a3
                                           - 0xBC8884B3565C679
                                           + (unint64_t)(v4 + v3 - 2138012470) > 0xF)) ^ a1))
                            - 8))();
}

uint64_t sub_19C5C6B74@<X0>(uint64_t a1@<X7>, _OWORD *a2@<X8>)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  *(_OWORD *)(v3 + v2 + ((v4 - 321) ^ 0xBC908425)) = *a2;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((1328 * (((v5 + 1) & 0x1FFFFFFF0) == 16)) ^ v4)) - 12))();
}

void sub_19C5C6BD0()
{
  JUMPOUT(0x19C5C6BA0);
}

uint64_t sub_19C5C6BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  _BOOL4 v10;

  v10 = (v8 + 1888176599) > 0xE12FAE3D;
  if ((v8 + 1888176599) < 0xE12FAE3D)
    v10 = 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * ((226 * !v10) ^ v9)) - (((v9 + 164) | 0x90u) ^ 0x492)))();
}

uint64_t sub_19C5C6FA8()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;

  v4 = v0 - 936147704;
  v5 = 1305237457 * ((-2097054 - ((v3 - 216) | 0xFFE00062) + ((v3 - 216) | 0x1FFF9D)) ^ 0xB9A65953);
  *(_DWORD *)(v3 - 216) = v4 ^ v5;
  *(_QWORD *)(v3 - 208) = v2;
  *(_DWORD *)(v3 - 200) = v5 + ((v1 - 354) | 0x63) + 1211;
  v6 = sub_19C5F6FA0(v3 - 216);
  return ((uint64_t (*)(uint64_t))STACK[0x4D0])(v6);
}

void sub_19C5C70D8()
{
  STACK[0x518] = ((7 * (LODWORD(STACK[0x474]) ^ 0x2C4u)) ^ 0xFFFFFFFFFFFFFB69)
               + *(_QWORD *)(STACK[0x468] + 8 * (LODWORD(STACK[0x474]) - 584));
  JUMPOUT(0x19C5C710CLL);
}

uint64_t sub_19C5C71E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a8
                                                              + 8
                                                              * ((13
                                                                * (v9 + 140644107 >= ((v8 - 1772328924) & 0x69A397FF ^ 0x31Bu))) ^ v8)))(1374, 901, 3249775516);
}

uint64_t sub_19C5C7248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;

  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((-140644044 - v9 - v10 >= 280 * (v8 ^ 0x35Cu) - 1953) * (((v8 - 603) | 0x40D) ^ 0x1F9)) ^ v8)))();
}

uint64_t sub_19C5C729C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * (((((v9 - 1320) ^ 0x6A1) - 1041) * (v8 > 0xE)) | v9))
                            - (((v9 - 1320) | 0x10u) ^ 0x29CLL)))();
}

uint64_t sub_19C5C72DC@<X0>(int a1@<W2>, uint64_t a2@<X7>, int a3@<W8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int128 v6;

  *(_OWORD *)(v5 + (a3 + a1)) = v6;
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * (int)((((v3 & 0x1FFFFFFF0) == 16) * ((v4 + 615966063) & 0xDB491E78 ^ 0x7C8)) ^ v4)))();
}

uint64_t sub_19C5C7328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;

  *(_OWORD *)(v10 + v11) = v13;
  return (*(uint64_t (**)(void))(a8 + 8 * (((v12 == 0) * v9) ^ v8)))();
}

uint64_t sub_19C5C734C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8
                                                                        + 8
                                                                        * ((((((v10 - 1590) | 0x319) ^ 0x3C6)
                                                                           + v10
                                                                           - 1573)
                                                                          * (v8 == v9)) ^ v10))
                                                            - 12))(1374, 901, 3249775516);
}

uint64_t sub_19C5C7394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;

  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((43
                                * (((v9 + 36) ^ (((((v9 - 595) | 0x405u) - 1285) & v8) == 0)) & 1)) ^ v9)))();
}

uint64_t sub_19C5C73E4@<X0>(int a1@<W2>, int a2@<W3>, uint64_t a3@<X7>, int a4@<W8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + (a4 + a1 + v5)) = v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3
                                        + 8
                                        * ((1986
                                          * (a2 & ~((((v6 - 543) | 0x1E1) - 169) ^ (((((v6 - 543) | 0x1E1u) ^ 0x1FFFFFC1BLL) & v4)
                                                                                  - 8 == v5)))) ^ ((v6 - 543) | 0x1E1)))
                            - 12))();
}

uint64_t sub_19C5C7444@<X0>(int a1@<W0>, int a2@<W3>, uint64_t a3@<X7>, int a4@<W8>)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v6 + (v5 + v8)) = v9;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * (((a2 & ~(a4 ^ (v7 == v8))) * a1) ^ v4)) - 12))();
}

uint64_t sub_19C5C7474@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1
                                                              + 8
                                                              * (((((v2 == v3) ^ (a2 + 25)) & 1)
                                                                * ((a2 + 467) ^ 0x56C)) ^ a2)))(1374, 901, 3249775516);
}

uint64_t sub_19C5C74B4(unsigned int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v10;
  char v11;

  *(_BYTE *)(v10 + (v8 + a3)) = v11;
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * (((v8 + 1 + a3 >= (v9 ^ a1) - 19) * a2) ^ v9)) - 12))();
}

uint64_t sub_19C5C74E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  int v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  int v47;
  _BOOL4 v49;

  STACK[0x488] = *(_QWORD *)(a8 + 8 * v39);
  STACK[0x6A0] = v42;
  STACK[0x6A8] = v40;
  v43 = STACK[0x588];
  v44 = (char *)&a9 + STACK[0x588] - 0x25659E214D3ED7C4;
  STACK[0x6B0] = (unint64_t)v44;
  STACK[0x588] = v43 + 320;
  LODWORD(STACK[0x5C8]) = *(_DWORD *)(v42 - 0xBC8884B3565C631);
  LODWORD(STACK[0x56C]) = *(_DWORD *)(v42 - 0xBC8884B3565C62DLL);
  LODWORD(STACK[0x514]) = *(_DWORD *)(v42 - 0xBC8884B3565C629);
  LODWORD(STACK[0x624]) = *(_DWORD *)(v42 - 0xBC8884B3565C625);
  v45 = *(unsigned __int8 *)(v42 - 0xBC8884B3565C619) ^ 0x84;
  if (v45 == 134)
    JUMPOUT(0x19C5C8438);
  if (v45 != 133)
    JUMPOUT(0x19C5C8BC8);
  v46 = (LODWORD(STACK[0x474]) - 483);
  v47 = LODWORD(STACK[0x474]) + 537;
  LODWORD(STACK[0x500]) = v41;
  v49 = v40 >= a39 + v43 || (unint64_t)v44 >= v40 + 64;
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * (v47 ^ (787 * v49))) - v46 + 120))();
}

void sub_19C5C7544()
{
  JUMPOUT(0x19C5C6EA8);
}

uint64_t sub_19C5C7660@<X0>(uint64_t a1@<X7>, int32x4_t *a2@<X8>)
{
  const char *v2;
  int v3;
  unsigned int v4;
  int v5;
  int8x16_t v6;
  uint8x16_t v7;
  uint16x8_t v8;
  int32x4_t v9;
  uint16x8_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint8x16_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int8x16_t v32;
  int32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  uint8x16_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int8x16_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16x4_t v74;

  v74 = vld4q_s8(v2);
  v7 = (uint8x16_t)veorq_s8(v74.val[0], v6);
  v8 = vmovl_u8(*(uint8x8_t *)v7.i8);
  v9 = (int32x4_t)vmovl_high_u16(v8);
  v10 = vmovl_high_u8(v7);
  v11 = (int32x4_t)vmovl_high_u16(v10);
  v12 = (int8x16_t)vshll_high_n_u16(v10, 1uLL);
  v13 = (int8x16_t)vshll_high_n_u16(v8, 1uLL);
  v14.i64[0] = 0x200000002;
  v14.i64[1] = 0x200000002;
  v15 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v10.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v10.i8, 1uLL), v14));
  v16 = vdupq_n_s32(0xDEEAF301);
  v17 = (int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v8.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v8.i8, 1uLL), v14)), v16);
  v18 = (int8x16_t)vaddq_s32(vsubq_s32(v9, (int32x4_t)vandq_s8(v13, v14)), v16);
  v19 = (int8x16_t)vaddq_s32(v15, v16);
  v20 = (int8x16_t)vaddq_s32(vsubq_s32(v11, (int32x4_t)vandq_s8(v12, v14)), v16);
  v21 = (uint8x16_t)veorq_s8(v74.val[1], v6);
  v22 = vmovl_u8(*(uint8x8_t *)v21.i8);
  v23 = vmovl_high_u8(v21);
  v24.i64[0] = 0x6200000062;
  v24.i64[1] = 0x6200000062;
  v25 = vsubq_s32((int32x4_t)vmovl_high_u16(v23), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v23, 1uLL), v24));
  v26 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v22), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v22, 1uLL), v24)), 8uLL);
  v27 = vdupq_n_s32(0xAFEC3100);
  v28 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v22.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v22.i8, 1uLL), v24)), 8uLL), v27), (int8x16_t)v27);
  v29 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v26, v27), (int8x16_t)v27);
  v30 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v23.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v23.i8, 1uLL), v24)), 8uLL), v27), (int8x16_t)v27);
  v31 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v25, 8uLL), v27), (int8x16_t)v27);
  v32 = (int8x16_t)vdupq_n_s32(0x43B0EC00u);
  v33 = vdupq_n_s32(0x21D87637u);
  v34 = veorq_s8(v20, (int8x16_t)v16);
  v35 = veorq_s8(v19, (int8x16_t)v16);
  v36 = veorq_s8(v18, (int8x16_t)v16);
  v37 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v28, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v28, v28), v32)), v33), (int8x16_t)v33), veorq_s8(v17, (int8x16_t)v16));
  v38 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v29, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v29, v29), v32)), v33), (int8x16_t)v33), v36);
  v39 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v30, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v30, v30), v32)), v33), (int8x16_t)v33), v35);
  v40 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v31, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v31, v31), v32)), v33), (int8x16_t)v33), v34);
  v41 = (int8x16_t)vdupq_n_s32(0x793D99B8u);
  v42 = vdupq_n_s32(0xFC9ECCDC);
  v43 = (int8x16_t)vaddq_s32(vsubq_s32(v37, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v37, v37), v41)), v42);
  v44 = (int8x16_t)vaddq_s32(vsubq_s32(v38, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v38, v38), v41)), v42);
  v45 = (int8x16_t)vaddq_s32(vsubq_s32(v39, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v39, v39), v41)), v42);
  v46 = (int8x16_t)vaddq_s32(vsubq_s32(v40, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v40, v40), v41)), v42);
  v47 = (uint8x16_t)veorq_s8(v74.val[2], v6);
  v48 = vmovl_u8(*(uint8x8_t *)v47.i8);
  v49 = vmovl_high_u8(v47);
  v32.i64[0] = 0x9000000090;
  v32.i64[1] = 0x9000000090;
  v50 = vsubq_s32((int32x4_t)vmovl_high_u16(v49), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v49, 1uLL), v32));
  v51 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v48), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v48, 1uLL), v32)), 0x10uLL);
  v52 = vdupq_n_s32(0x83480000);
  v53 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v48.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v48.i8, 1uLL), v32)), 0x10uLL), v52), (int8x16_t)v52);
  v54 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v51, v52), (int8x16_t)v52);
  v55 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v49.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v49.i8, 1uLL), v32)), 0x10uLL), v52), (int8x16_t)v52);
  v56 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v50, 0x10uLL), v52), (int8x16_t)v52);
  v57 = (int8x16_t)vdupq_n_s32(0x64C00000u);
  v58 = vdupq_n_s32(0xB2606ADF);
  v59 = (int32x4_t)vorrq_s8(veorq_s8(v43, (int8x16_t)v42), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v53, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v53, v53), v57)), v58), (int8x16_t)v58));
  v60 = (int32x4_t)vorrq_s8(veorq_s8(v44, (int8x16_t)v42), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v54, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v54, v54), v57)), v58), (int8x16_t)v58));
  v61 = (int32x4_t)vorrq_s8(veorq_s8(v45, (int8x16_t)v42), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v55, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v55, v55), v57)), v58), (int8x16_t)v58));
  v62 = (int32x4_t)vorrq_s8(veorq_s8(v46, (int8x16_t)v42), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v56, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v56, v56), v57)), v58), (int8x16_t)v58));
  v63 = (int8x16_t)vdupq_n_s32(0x10797E7Au);
  v64 = vdupq_n_s32(0x883CBF3D);
  v65 = (int8x16_t)vaddq_s32(vsubq_s32(v59, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v59, v59), v63)), v64);
  v66 = (int8x16_t)vaddq_s32(vsubq_s32(v60, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v60, v60), v63)), v64);
  v67 = (int8x16_t)vaddq_s32(vsubq_s32(v61, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v61, v61), v63)), v64);
  v68 = (int8x16_t)vaddq_s32(vsubq_s32(v62, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v62, v62), v63)), v64);
  v74.val[0] = veorq_s8(v74.val[3], v6);
  v74.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v74.val[0].i8);
  v74.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v74.val[0]);
  v63.i64[0] = 0xC0000000C0;
  v63.i64[1] = 0xC0000000C0;
  v69 = vsubq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v74.val[0]), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16((uint16x8_t)v74.val[0], 1uLL), v63));
  v74.val[2] = (int8x16_t)vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v74.val[1]), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16((uint16x8_t)v74.val[1], 1uLL), v63)), 0x18uLL);
  v55.i64[0] = 0xE0000000E0000000;
  v55.i64[1] = 0xE0000000E0000000;
  v74.val[1] = veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v74.val[1].i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v74.val[1].i8, 1uLL), v63)), 0x18uLL), v55), (int8x16_t)v55);
  v74.val[2] = veorq_s8((int8x16_t)vaddq_s32((int32x4_t)v74.val[2], v55), (int8x16_t)v55);
  v74.val[0] = veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v74.val[0].i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v74.val[0].i8, 1uLL), v63)), 0x18uLL), v55), (int8x16_t)v55);
  v74.val[3] = veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v69, 0x18uLL), v55), (int8x16_t)v55);
  v70 = vdupq_n_s32(0x6C871AC1u);
  v74.val[1] = vorrq_s8(veorq_s8(v65, (int8x16_t)v64), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)v74.val[1], (int32x4_t)(*(_OWORD *)&vaddq_s32((int32x4_t)v74.val[1], (int32x4_t)v74.val[1]) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v70), (int8x16_t)v70));
  v74.val[2] = vorrq_s8(veorq_s8(v66, (int8x16_t)v64), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)v74.val[2], (int32x4_t)(*(_OWORD *)&vaddq_s32((int32x4_t)v74.val[2], (int32x4_t)v74.val[2]) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v70), (int8x16_t)v70));
  v74.val[0] = vorrq_s8(veorq_s8(v67, (int8x16_t)v64), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)v74.val[0], (int32x4_t)(*(_OWORD *)&vaddq_s32((int32x4_t)v74.val[0], (int32x4_t)v74.val[0]) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v70), (int8x16_t)v70));
  v74.val[3] = vorrq_s8(veorq_s8(v68, (int8x16_t)v64), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)v74.val[3], (int32x4_t)(*(_OWORD *)&vaddq_s32((int32x4_t)v74.val[3], (int32x4_t)v74.val[3]) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v70), (int8x16_t)v70));
  v71 = (int8x16_t)vdupq_n_s32(v4);
  v72 = vdupq_n_s32(0x1CAAB72Bu);
  a2[2] = vaddq_s32(vaddq_s32((int32x4_t)v74.val[0], v72), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v74.val[0], (int32x4_t)v74.val[0]), v71)));
  a2[3] = vaddq_s32(vaddq_s32((int32x4_t)v74.val[3], v72), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v74.val[3], (int32x4_t)v74.val[3]), v71)));
  *a2 = vaddq_s32(vaddq_s32((int32x4_t)v74.val[1], v72), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v74.val[1], (int32x4_t)v74.val[1]), v71)));
  a2[1] = vaddq_s32(vaddq_s32((int32x4_t)v74.val[2], v72), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v74.val[2], (int32x4_t)v74.val[2]), v71)));
  return (*(uint64_t (**)(void))(a1 + 8 * ((1898 * ((v5 + 2075760238) < 0x10)) ^ (v3 + 776))))();
}

uint64_t sub_19C5C7EEC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  int v8;

  return (*(uint64_t (**)(uint64_t))(a8 + 8 * ((765 * ((a6 + 1 + v8) < 0x20)) ^ a2)))(a4);
}

uint64_t sub_19C5C80FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a8
                                                              + 8
                                                              * ((41 * ((a7 + 1 + v11) < 0x30)) ^ v9)))(v8, v8, v10 + 48);
}

uint64_t sub_19C5C8264(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;

  return (*(uint64_t (**)(void))(a8 + 8 * ((892 * ((a3 + 1 + v9) > 0x3F)) ^ v8)))();
}

void sub_19C5C8400()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;

  LODWORD(STACK[0x5C8]) = v0;
  LODWORD(STACK[0x514]) = v1;
  LODWORD(STACK[0x56C]) = v3;
  LODWORD(STACK[0x624]) = v2;
  LODWORD(STACK[0x500]) = v4 + 64;
  JUMPOUT(0x19C5C8BD0);
}

uint64_t sub_19C5C84B8@<X0>(int a1@<W0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;

  HIDWORD(v11) = *(_DWORD *)(a3 + 4 * (v9 + v5 - 8)) ^ *(_DWORD *)(a3 + 4
                                                                                      * (v9 + v5 - 3)) ^ *(_DWORD *)(a3 + 4 * (v9 + v5 - 14)) ^ *(_DWORD *)(a3 + 4 * (v9 + v5 - 16));
  LODWORD(v11) = HIDWORD(v11);
  *(_DWORD *)(a3 + 4 * (((v3 + v7) & a1 ^ (v9 + 450)) + v4)) = (v11 >> 31)
                                                                             + v10
                                                                             - (v8 & (2 * (v11 >> 31)));
  return ((uint64_t (*)(void))(*(_QWORD *)(a2 + 8 * ((((v4 + 1 + v9) > 0x4F) * v6) ^ v3)) - 4))();
}

uint64_t sub_19C5C8538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;

  return (*(uint64_t (**)(void))(a8 + 8 * ((98 * ((v9 + 2075760238) < 0x14)) ^ (338 * (v8 ^ 0x2C4)))))();
}

void sub_19C5C8710()
{
  JUMPOUT(0x19C5C8574);
}

uint64_t sub_19C5C8730(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;
  int v10;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(a8 + 8 * ((1498 * ((a2 + 1 + v10) > 0x27)) ^ v8))
                                         - 8))((v9 + 40));
}

uint64_t sub_19C5C8874(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * ((1987 * ((a1 + 1 + v9) < 0x3C)) ^ v8)) - 8))();
}

uint64_t sub_19C5C8A14(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * ((57 * ((a4 + 1 + v9) > 0x4F)) ^ v8)) - 8))();
}

void sub_19C5C8B4C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;

  LODWORD(STACK[0x5C8]) = v0;
  LODWORD(STACK[0x56C]) = v3;
  LODWORD(STACK[0x514]) = v1;
  LODWORD(STACK[0x624]) = v2;
  LODWORD(STACK[0x484]) = v4;
  v9 = STACK[0x6A0];
  v10 = *(_DWORD *)(STACK[0x6A0] - 0xBC8884B3565C621);
  LODWORD(STACK[0x500]) = v7 + 80;
  *(_DWORD *)(v9 - 0xBC8884B3565C621) = (v10 ^ v8)
                                        + (v4 ^ (v8 - 413) ^ ((v5 - 528) | 0x203))
                                        + v8
                                        - (v6 & (2 * ((v10 ^ v8) + (v4 ^ (v8 - 413) ^ ((v5 - 528) | 0x203)))));
  JUMPOUT(0x19C5C8BD0);
}

uint64_t sub_19C5C8CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,int a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  unint64_t v36;
  int v37;
  int v39;
  int v40;

  v36 = STACK[0x478];
  v37 = *(unsigned __int8 *)(STACK[0x478] - 0xBC8884B3565C619) ^ 0xBA;
  if (v37 == 184)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8 + 8 * ((2007 * (((*(_DWORD *)(v36 - 0xBC8884B3565C61DLL) == 1380648494) ^ LODWORD(STACK[0x474])) & 1)) ^ (LODWORD(STACK[0x474]) - 441)))
                                                                                         - 8))(609, a2, a3, a4, a5, 942);
  if (v37 == 187)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8 + 8 * ((111 * (*(_DWORD *)(v36 - 0xBC8884B3565C61DLL) != 1380648494)) ^ (LODWORD(STACK[0x474]) - 441)))
                                                                                         - ((6 * a32) ^ 0x6AALL)))(a1, 574047128, 396612674, 1544, a5, 942);
  v39 = (LODWORD(STACK[0x474]) - 1930835577) & 0x731637FF;
  STACK[0x660] = 91;
  v40 = (((a36 ^ 0xBA) - 1282115581 - (((a36 ^ 0xBA) << ((v39 ^ 0x89u) - 98)) & 0x6728F006)) ^ 0xB3947803) * (a36 + 17);
  *(_BYTE *)(v36 - 0xBC8884B3565C61ELL) = (v40 - ((2 * v40) & 0xEA) + 117) ^ 0x75;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8 + 8 * ((2026 * (STACK[0x660] == 0)) ^ v39))
                                                                                       - 12))(a1, 574047128, 396612674, 1544, a5, 942);
}

void sub_19C5C951C()
{
  JUMPOUT(0x19C5C948CLL);
}

uint64_t sub_19C5C9524()
{
  return ((uint64_t (*)(void))STACK[0x518])();
}

uint64_t sub_19C5C9558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;

  v10 = STACK[0x474];
  v11 = (((LODWORD(STACK[0x684]) ^ v9) + (v8 ^ v9)) ^ 0xF7FFFF75)
      + 134217867
      + ((((LODWORD(STACK[0x684]) ^ v9) + (v8 ^ v9)) << ((LODWORD(STACK[0x474]) + 19) ^ 0x77)) & 0xEFFFFEEA);
  *(_DWORD *)(STACK[0x2D8] + 52) = ((v11 % 0x2710) ^ 0xFEFDBBFD) + 2013264944 + ((2 * (v11 % 0x2710)) & 0x77FA);
  v12 = STACK[0x68C];
  STACK[0x588] -= 1616;
  LODWORD(STACK[0x52C]) = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * ((466 * (v12 == v9)) ^ (v10 + 19))) - 8))();
}

void sub_19C5C961C(int a1@<W8>)
{
  _DWORD *v1;

  *v1 = ((2 * LODWORD(STACK[0x554])) & 0x29DE3F7E)
      + ((((a1 + 2090055817) & 0x836C4763) - 1796268708) ^ LODWORD(STACK[0x554]))
      + 1879047912;
  v1[85] = STACK[0x4F0];
  v1[86] = STACK[0x614];
  v1[87] = STACK[0x568];
  v1[88] = STACK[0x508];
  JUMPOUT(0x19C5BE2A8);
}

void sub_19C5C968C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  STACK[0x588] -= 1616;
  LODWORD(STACK[0x52C]) = a5 - 214;
  JUMPOUT(0x19C5BE2A4);
}

void sub_19C5C96A4()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = v0 | 4;
}

uint64_t sub_19C5C96AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;

  LODWORD(STACK[0x610]) = a5 - 46;
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * (((v9 != 0) * ((v8 ^ 0x160) + 2059)) ^ (v8 + 160))) - 8))();
}

uint64_t sub_19C5C9860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;

  return (*(uint64_t (**)(void))(a4
                              + 8
                              * ((45
                                * (((((v5 + 1842799324) & 0x9229177D) - 379) & v4) == (((v5 - 1276) | 0x40) ^ 0xEA17E79))) ^ v5)))();
}

uint64_t sub_19C5C98B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;

  v30 = STACK[0x608];
  v31 = 1575213817 * ((~(v29 - 216) & 0xCA2B7CA2 | (v29 - 216) & 0x35D4835D) ^ 0x474ECC6E);
  v32 = (LODWORD(STACK[0x498]) ^ 0x5EBB059F) - v31 + ((2 * LODWORD(STACK[0x498])) & 0xBD760B3E) - 9568386;
  *(_DWORD *)(v29 - 184) = v25 + v31 + ((149 * (v28 ^ 0x17C)) ^ 0xF9A117C8);
  *(_DWORD *)(v29 - 168) = v32;
  *(_DWORD *)(v29 - 164) = (v28 + 345) ^ v31;
  *(_QWORD *)(v29 - 216) = v30;
  *(_QWORD *)(v29 - 208) = v27;
  *(_QWORD *)(v29 - 176) = a25;
  *(_QWORD *)(v29 - 200) = v26;
  *(_QWORD *)(v29 - 192) = a24;
  *(_BYTE *)(v29 - 160) = (-7 * ((~(v29 + 40) & 0xA2 | (v29 + 40) & 0x5D) ^ 0x6E)) ^ 6;
  v33 = off_1E3D64110[v28 - 153](v29 - 216);
  v34 = STACK[0x468];
  v35 = *(_DWORD *)(v29 - 156);
  LODWORD(STACK[0x610]) = v35;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v34 + 8 * ((1264 * (v35 == 480950058)) ^ v28))
                                          - (((v28 + 231) | 3u) ^ 0x267)))(v33);
}

uint64_t sub_19C5C99D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(a4
                                        + 8
                                        * ((((((LODWORD(STACK[0x504]) ^ v4) == LODWORD(STACK[0x25C]) - 1710403175) ^ (v5 + 122)) & 1)
                                          * ((v5 ^ 0x8A) - 607)) ^ v5))
                            - 12))();
}

uint64_t sub_19C5C9A1C@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  LODWORD(STACK[0x610]) = v1 + 129;
  v4 = LODWORD(STACK[0x610]);
  v5 = 653146051 * (((v2 | 0x6331007A7EF38A11) - (v2 & 0x6331007A7EF38A11)) ^ 0xCCC6EBE5D4E73FF3);
  *(_DWORD *)(v3 - 200) = v5 + (a1 | 0x200) - 373340976;
  *(_DWORD *)(v3 - 196) = v5;
  *(_DWORD *)(v3 - 192) = (a1 | 0x200) + 1876982398 + v5;
  *(_DWORD *)(v3 - 188) = v5 ^ 0x1B ^ ((a1 | 0x200) + 1876982398);
  *(_DWORD *)(v3 - 176) = (((a1 | 0x200) + 1876982398) ^ 0x83) - v5;
  *(_QWORD *)(v3 - 208) = v4 ^ v5;
  *(_QWORD *)(v3 - 184) = 3814059248u - v5;
  v6 = ((uint64_t (*)(uint64_t))STACK[0x320])(v3 - 216);
  v7 = (uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x468] + 8 * *(int *)(v3 - 216)) - 8);
  LODWORD(STACK[0x30C]) = 2127501318;
  return v7(v6);
}

uint64_t sub_19C5C9CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t (*v11)(void);

  v9 = STACK[0x474];
  v10 = *(_DWORD *)(v8 + 56);
  *(_DWORD *)(v8 + 56) = v10 + 1;
  v11 = (uint64_t (*)(void))(*(_QWORD *)(a8
                                      + 8
                                      * ((1298 * (((19 * (v9 ^ 0x26B)) ^ 0xF41699C0) + v10 < 0xFFFFFFFA)) ^ (v9 - 459)))
                          - 8);
  LODWORD(STACK[0x30C]) = 2127501318;
  return v11();
}

void sub_19C5C9D2C()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 - 216) = -1675822309
                        - 545147329 * ((((v1 - 216) | 0xB74FCD97) - ((v1 - 216) & 0xB74FCD97)) ^ 0x17BB0DFB)
                        + v0
                        + 1021;
  sub_19C74C53C((_DWORD *)(v1 - 216));
  *(_BYTE *)(v1 - 200) = (-5 * ((v1 + 40) ^ 0xBD)) ^ 0x3B;
  *(_DWORD *)(v1 - 216) = v0 - 402930427 * ((v1 - 216) ^ 0x1AB9FCBD) + 643;
  *(_QWORD *)(v1 - 192) = STACK[0x280];
  *(_QWORD *)(v1 - 208) = STACK[0x278];
  ((void (*)(uint64_t))STACK[0x270])(v1 - 216);
  LODWORD(STACK[0x30C]) = 2127501318;
  JUMPOUT(0x19C5C9DE8);
}

void sub_19C5C9E18(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v3 = 13 * (a1 ^ 0x32C);
  ((void (*)(_QWORD, uint64_t, _QWORD))STACK[0x2F0])(*(unsigned int *)STACK[0x2E8], v1, (v3 ^ 0x8130E599) + LODWORD(STACK[0x30C]));
  *(_DWORD *)(v2 - 216) = -1675822309
                        - 545147329 * ((v2 - 1629167397 - 2 * ((v2 - 216) & 0x9EE4E1B3)) ^ 0x3E1021DF)
                        + v3
                        + 562;
  sub_19C74C53C((_DWORD *)(v2 - 216));
  JUMPOUT(0x19C5C9EACLL);
}

void sub_19C5C9EF8()
{
  uint64_t v0;
  int v1;

  v0 = MEMORY[0x1E0C80A78]();
  v1 = *(_DWORD *)v0 + 291962093 * ((-2 - ((v0 | 0x48D5F81D) + (~(_DWORD)v0 | 0xB72A07E2))) ^ 0xA6D80AA8);
  __asm { BR              X14 }
}

uint64_t sub_19C5CA05C(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)(a2 + v3) = v2;
  *(_DWORD *)(v7 - 144) = (v4 ^ 0x352) + ((v7 + 601068984 - 2 * ((v7 - 144) & 0x23D39648)) ^ 0x9A6A3086) * v5 - 1244;
  *(_QWORD *)(v7 - 136) = a2;
  *(_QWORD *)(v7 - 128) = v6;
  return sub_19C5B3D5C(v7 - 144);
}

void sub_19C5CB234(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) ^ (1980347521 * ((((2 * a1) | 0x3055C182) - a1 + 1742020415) ^ 0x21CEA03C));
  __asm { BR              X8 }
}

void sub_19C5CB2D4()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 12) = -42023;
}

void sub_19C5CB368(uint64_t a1, uint64_t a2)
{
  __asm { BR              X8 }
}

uint64_t sub_19C5CB400(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2 + 8 * ((950 * (**(_BYTE **)(a2 + 8) == 0)) ^ 0x4D2u)))();
}

uint64_t sub_19C5CB450@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v19;

  v15 = a1 + 1253;
  v19 = a1 + 1253;
  *(_QWORD *)(*(_QWORD *)(a10 + 96) + 504) = v12 + 1;
  *(_DWORD *)(*(_QWORD *)(a10 + 96) + 496) = a12 + 41 * ((a1 - 62937217) & 0x3C05F93 ^ 0x704) - 944;
  v16 = 1001500783 * ((1559593020 - ((v14 - 216) | 0x5CF5803C) + ((v14 - 216) | 0xA30A7FC3)) ^ 0xE9BE8077);
  *(_DWORD *)(v14 - 216) = v16 + v15 - 167303741;
  *(_DWORD *)(v14 - 196) = v16 ^ 0x9CAF10F4;
  *(_QWORD *)(v14 - 208) = &STACK[0xBC8884B3565C99D];
  v17 = sub_19C5B3498(v14 - 216);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v13
                                                               + 8
                                                               * ((21
                                                                 * (a12
                                                                  + 1866839815
                                                                  + ((2 * LODWORD(STACK[0x368])) & 0x66 ^ 0x20)
                                                                  + (STACK[0x368] & 0x3F ^ 0xF7FBFFEB)
                                                                  + 1506646400 > 0xFFFFFFBF)) ^ v19))
                                                   - 12))(v17, 3926650391);
}

uint64_t sub_19C5CB680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;

  v22 = a19 - 505155479 + 31 * (v20 ^ 0x3AD);
  if (v22 < 0x20D49FED != (v19 + 182488580) < 0x20D49FED)
    v23 = v22 < 0x20D49FED;
  else
    v23 = v19 + 182488580 < v22;
  return ((uint64_t (*)(void))(*(_QWORD *)(v21 + 8 * ((107 * v23) ^ v20)) - 4))();
}

uint64_t sub_19C5CB6F4(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;

  v21 = a3 - a4 + 1115;
  v22 = 1305237457 * ((((v20 - 216) | 0x2C9DCD73) + (~(v20 - 216) | 0xD362328C)) ^ 0x95246BBC);
  *(_QWORD *)(v20 - 208) = a16;
  *(_DWORD *)(v20 - 200) = v22 + a3 + 1760;
  *(_DWORD *)(v20 - 216) = (a19 - 102286808) ^ v22;
  v23 = sub_19C5F6FA0(v20 - 216);
  v24 = ((2 * (STACK[0x368] & 0x3F)) ^ 0x30) + (STACK[0x368] & 0x3F ^ 0xDDEFFDE7);
  *((_BYTE *)&STACK[0x324] + (a3 ^ 0x57C53332) + v21 + v24) = -59;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * ((1900 * (v24 + 571474377 < 0xFFFFFFC8)) ^ a3)) - 4))(v23);
}

uint64_t sub_19C5CB810(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v3
                                                               + 8
                                                               * ((((v2 + 1332) ^ 0x521)
                                                                 * ((v1 + 571474434) < 0x40)) ^ v2 ^ 0x2B3))
                                                   - 4))(a1, 4097411666);
}

uint64_t sub_19C5CB85C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((211
                                          * (a5 + (v7 ^ 0x52C) - 94 - (v6 + v5) + 20 * (v7 ^ 0x52Cu) + 329590768 < 7)) ^ v7))
                            - 12))();
}

uint64_t sub_19C5CB8B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * ((v5 < ((a5 + 27 * (v6 ^ 0x753) - 292) ^ (v6 - a4 - 703))) ^ v6))
                            - 12))();
}

uint64_t sub_19C5CB8F4@<X0>(int a1@<W1>, int a2@<W3>, int a3@<W8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)&v6 = 0x4545454545454545;
  *((_QWORD *)&v6 + 1) = 0x4545454545454545;
  *(_OWORD *)((char *)&STACK[0x324] + (a3 + a1)) = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((((v3 & 0x1FFFFFFF0) == 16) * ((a2 + v4 - 524) ^ 0x18)) ^ (a2 + v4 - 78)))
                            - 8))();
}

uint64_t sub_19C5CB93C(__n128 a1)
{
  int v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  *(__n128 *)(v2 + v4) = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((v5 == 0) * v3) ^ v1)) - 8))();
}

uint64_t sub_19C5CB964()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)((88 * (v0 != v1)) ^ v2)) - (v2 ^ 0x289)))();
}

uint64_t sub_19C5CB9A0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  char v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * (((((a4 + a5 + v6 - 876 - 1168) | 0x120) - 279) * ((v5 & 8) == 0)) ^ v6))
                            - 4))();
}

uint64_t sub_19C5CB9DC@<X0>(int a1@<W1>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  *(unint64_t *)((char *)&STACK[0x324] + (a2 + a1 + v3)) = 0x4545454545454545;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((15
                                * (((((v4 - 7) | 4) + 123) ^ (((((v4 - 7) | 4u) + 0x1FFFFFED2) & v2)
                                                                             - 8 == v3)) & 1)) ^ ((v4 - 7) | 4))))();
}

uint64_t sub_19C5CBA3C@<X0>(unsigned __int8 a1@<W8>, double a2@<D0>)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(double *)(v5 + (v3 + v6)) = a2;
  return (*(uint64_t (**)(void))(v7 + 8 * ((15 * ((a1 ^ (v4 == v6)) & 1)) ^ v2)))();
}

uint64_t sub_19C5CBA6C@<X0>(int a1@<W4>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((((a2 - 1391) | 0xC) + 45) * (v2 == v3)) ^ a2))
                            - ((a1 + a2 - 1441) ^ 0xCA4ACEF9)))();
}

uint64_t sub_19C5CBAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t (*a39)(__n128),uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int32x4_t a47,int32x4_t a48,int32x4_t a49,int32x4_t a50)
{
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int32x4_t v69;
  int8x16_t v70;
  int32x4_t v71;
  uint64_t (*v72)(__n128);
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  uint8x16_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  uint8x16_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  int8x16_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int8x16_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int8x16_t v116;
  int32x4_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  uint8x16_t v122;
  uint16x8_t v123;
  uint16x8_t v124;
  int8x16_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int8x16_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int8x16_t v139;
  int32x4_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  uint8x16_t v145;
  uint16x8_t v146;
  uint16x8_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  uint8x16_t v161;
  uint16x8_t v162;
  uint16x8_t v163;
  int8x16_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  uint8x16_t v171;
  uint16x8_t v172;
  uint16x8_t v173;
  int8x16_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  uint8x16_t v188;
  uint16x8_t v189;
  uint16x8_t v190;
  int8x16_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  uint8x16_t v202;
  uint16x8_t v203;
  uint16x8_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  uint64_t v209;
  _DWORD *v210;
  uint64_t v211;
  int v212;
  unint64_t v213;
  uint64_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int8x16_t v218;
  int32x4_t v219;
  uint64_t v220;
  unint64_t v221;
  int8x16x4_t v222;
  int8x16x4_t v223;

  v57 = (v50 + 524) | 0x415u;
  v58 = *(_QWORD *)(v53 + 8 * v50) + v57;
  v220 = ((_DWORD)v57 - 539231842) & 0xEA6ECEF7 ^ 0xCA4ACEF4;
  v59 = (__n128)vdupq_n_s32(0xB5DA1345);
  v218 = (int8x16_t)vdupq_n_s32(0x9330000u);
  v219 = vdupq_n_s32(0x9340000u);
  v60 = vdupq_n_s32(0x8AB8D4DA);
  v216 = (int8x16_t)vdupq_n_s32(0x7E089C56u);
  v217 = (int8x16_t)vdupq_n_s32(0x15700000u);
  v61 = vdupq_n_s32(0x3F044E2Bu);
  a40 = v55 - 16;
  v62 = vdupq_n_s32(0xB8FD1600);
  v215 = (int8x16_t)vdupq_n_s32(0x76404400u);
  v63 = vdupq_n_s32(0x7B2022D0u);
  v64 = (int8x16_t)vdupq_n_s32(0xD4A92D18);
  v65 = vdupq_n_s32(0xEA54968C);
  v66 = vdupq_n_s32(0xBB32DA18);
  v67 = vdupq_n_s32(0x1CAAB72Au);
  v68.i64[0] = 0x4545454545454545;
  v68.i64[1] = 0x4545454545454545;
  v69.i64[0] = 0x9200000092000000;
  v69.i64[1] = 0x9200000092000000;
  v70 = (int8x16_t)vdupq_n_s32(0x39556E54u);
  v71.i64[0] = 0xE0000000E0000000;
  v71.i64[1] = 0xE0000000E0000000;
  v72 = (uint64_t (*)(__n128))(v58 - 1635);
  v73 = STACK[0x36C];
  v74 = STACK[0x370];
  v75 = LODWORD(STACK[0x370]);
  v76 = STACK[0x374];
  v77 = STACK[0x378];
  v78 = STACK[0x374];
  v79 = STACK[0x378];
  v80 = LODWORD(STACK[0x384]);
  v81 = v80 ^ 0x29;
  if (v81 == 43)
  {
    v221 = __PAIR64__(v77, v76);
    a39 = v72;
    v223 = vld4q_s8((const char *)&STACK[0x324]);
    v161 = (uint8x16_t)veorq_s8(v223.val[0], v68);
    v162 = vmovl_u8(*(uint8x8_t *)v161.i8);
    v163 = vmovl_high_u8(v161);
    v164.i64[0] = 0x2400000024;
    v164.i64[1] = 0x2400000024;
    v165 = vsubq_s32((int32x4_t)vmovl_high_u16(v163), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v163, 1uLL), v164));
    v166 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v162), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v162, 1uLL), v164)), 0x18uLL);
    v167 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v162.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v162.i8, 1uLL), v164)), 0x18uLL), v69), (int8x16_t)v69);
    v168 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v166, v69), (int8x16_t)v69);
    v169 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v163.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v163.i8, 1uLL), v164)), 0x18uLL), v69), (int8x16_t)v69);
    v170 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v165, 0x18uLL), v69), (int8x16_t)v69);
    v171 = (uint8x16_t)veorq_s8(v223.val[1], v68);
    v172 = vmovl_u8(*(uint8x8_t *)v171.i8);
    v173 = vmovl_high_u8(v171);
    v174.i64[0] = 0x6600000066;
    v174.i64[1] = 0x6600000066;
    v175 = (int32x4_t)vaddw_high_u16((uint32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vshll_high_n_u16(v173, 1uLL), v174)), v173);
    v176 = (int32x4_t)vaddw_high_u16((uint32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vshll_high_n_u16(v172, 1uLL), v174)), v172);
    v177 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v172.i8, 1uLL), v174)), *(uint16x4_t *)v172.i8), 0x10uLL), v219), v218);
    v178 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v176, 0x10uLL), v219), v218);
    v179 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v173.i8, 1uLL), v174)), *(uint16x4_t *)v173.i8), 0x10uLL), v219), v218);
    v180 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v175, 0x10uLL), v219), v218);
    v181 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v167, (int32x4_t)(*(_OWORD *)&vaddq_s32(v167, v167) & __PAIR128__(0x6BFFFFFF6BFFFFFFLL, 0x6BFFFFFF6BFFFFFFLL))), (int32x4_t)v59), (int8x16_t)v59), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v177, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v177, v177), v217)), v60), (int8x16_t)v60));
    v182 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v168, (int32x4_t)(*(_OWORD *)&vaddq_s32(v168, v168) & __PAIR128__(0x6BFFFFFF6BFFFFFFLL, 0x6BFFFFFF6BFFFFFFLL))), (int32x4_t)v59), (int8x16_t)v59), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v178, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v178, v178), v217)), v60), (int8x16_t)v60));
    v183 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v169, (int32x4_t)(*(_OWORD *)&vaddq_s32(v169, v169) & __PAIR128__(0x6BFFFFFF6BFFFFFFLL, 0x6BFFFFFF6BFFFFFFLL))), (int32x4_t)v59), (int8x16_t)v59), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v179, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v179, v179), v217)), v60), (int8x16_t)v60));
    v184 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v170, (int32x4_t)(*(_OWORD *)&vaddq_s32(v170, v170) & __PAIR128__(0x6BFFFFFF6BFFFFFFLL, 0x6BFFFFFF6BFFFFFFLL))), (int32x4_t)v59), (int8x16_t)v59), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v180, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v180, v180), v217)), v60), (int8x16_t)v60));
    v185 = vsubq_s32(v184, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v184, v184), v216));
    v186 = vsubq_s32(v183, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v183, v183), v216));
    v187 = vsubq_s32(v182, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v182, v182), v216));
    v188 = (uint8x16_t)veorq_s8(v223.val[2], v68);
    v189 = vmovl_u8(*(uint8x8_t *)v188.i8);
    v190 = vmovl_high_u8(v188);
    v191.i64[0] = 0x2C0000002CLL;
    v191.i64[1] = 0x2C0000002CLL;
    v192 = vsubq_s32((int32x4_t)vmovl_high_u16(v190), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v190, 1uLL), v191));
    v193 = vsubq_s32((int32x4_t)vmovl_high_u16(v189), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v189, 1uLL), v191));
    v194 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v189.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v189.i8, 1uLL), v191)), 8uLL), v62), (int8x16_t)v62);
    v195 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v193, 8uLL), v62), (int8x16_t)v62);
    v196 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v190.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v190.i8, 1uLL), v191)), 8uLL), v62), (int8x16_t)v62);
    v197 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v192, 8uLL), v62), (int8x16_t)v62);
    v198 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v181, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v181, v181), v216)), v61), (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v194, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v194, v194), v215)), v63), (int8x16_t)v63));
    v199 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v187, v61), (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v195, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v195, v195), v215)), v63), (int8x16_t)v63));
    v200 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v186, v61), (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v196, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v196, v196), v215)), v63), (int8x16_t)v63));
    v201 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v185, v61), (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v197, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v197, v197), v215)), v63), (int8x16_t)v63));
    v202 = (uint8x16_t)veorq_s8(v223.val[3], v68);
    v203 = vmovl_u8(*(uint8x8_t *)v202.i8);
    v204 = vmovl_high_u8(v202);
    v174.i64[0] = 0x3000000030;
    v174.i64[1] = 0x3000000030;
    v205 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v198, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v198, v198), v64)), v65), (int8x16_t)v65), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v203.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v203.i8, 1uLL), v174)), v66), (int8x16_t)v66));
    v206 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v199, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v199, v199), v64)), v65), (int8x16_t)v65), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v203), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v203, 1uLL), v174)), v66), (int8x16_t)v66));
    v207 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v200, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v200, v200), v64)), v65), (int8x16_t)v65), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v204.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v204.i8, 1uLL), v174)), v66), (int8x16_t)v66));
    v208 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v201, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v201, v201), v64)), v65), (int8x16_t)v65), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v204), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v204, 1uLL), v174)), v66), (int8x16_t)v66));
    a49 = vaddq_s32(vsubq_s32(v207, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v207, v207), v70)), v67);
    a50 = vaddq_s32(vsubq_s32(v208, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v208, v208), v70)), v67);
    a47 = vaddq_s32(vsubq_s32(v205, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v205, v205), v70)), v67);
    a48 = vaddq_s32(vsubq_s32(v206, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v206, v206), v70)), v67);
    v209 = LODWORD(STACK[0x37C]);
    v210 = (_DWORD *)&a47 + v56 + 571517916;
    v211 = *(v210 - 16);
    HIDWORD(v213) = *(v210 - 8) ^ *(v210 - 3) ^ *(v210 - 14) ^ v211;
    LODWORD(v213) = HIDWORD(v213);
    v212 = v213 >> 31;
    v214 = (2 * v212) & 0x39556E54;
    *v210 = v212 + v52 - v214;
    HIDWORD(a36) = HIDWORD(a18) - 328686922;
    return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(__n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 + 8 * (int)((127 * (v55 != 571517853)) ^ (a5 + 1631770889) & 0xD4725937)) - 4))(v214, v211, ((_DWORD)a5 - 762343160) & 0x6325A567, v209, a5, v80, a7, v75, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, v215.i64[0],
             v215.i64[1],
             v216.i64[0],
             v216.i64[1],
             v217.i64[0],
             v217.i64[1],
             v218.i64[0],
             v218.i64[1],
             v219.i64[0],
             v219.i64[1],
             a29,
             a30,
             a31,
             v220,
             a33,
             ((_DWORD)a5 - 762343160) & 0x6325A567,
             a35,
             a36,
             __PAIR64__(v74, v73),
             v221,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46);
  }
  else if (v81 == 40)
  {
    a39 = v72;
    v222 = vld4q_s8((const char *)&STACK[0x324]);
    v82 = (uint8x16_t)veorq_s8(v222.val[0], v68);
    v83 = vmovl_u8(*(uint8x8_t *)v82.i8);
    v84 = vmovl_high_u8(v82);
    v85 = (int32x4_t)vmovl_high_u16(v84);
    v86 = (int8x16_t)vshll_high_n_u16(v84, 1uLL);
    v87.i64[0] = 0x200000002;
    v87.i64[1] = 0x200000002;
    v88 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v84.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v84.i8, 1uLL), v87));
    v89 = vdupq_n_s32(0xDEEAF301);
    v90 = (int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v83.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v83.i8, 1uLL), v87)), v89);
    v91 = (int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v83), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v83, 1uLL), v87)), v89);
    v92 = (int8x16_t)vaddq_s32(vsubq_s32(v85, (int32x4_t)vandq_s8(v86, v87)), v89);
    v93 = (uint8x16_t)veorq_s8(v222.val[1], v68);
    v94 = vmovl_u8(*(uint8x8_t *)v93.i8);
    v95 = vmovl_high_u8(v93);
    v96.i64[0] = 0x6200000062;
    v96.i64[1] = 0x6200000062;
    v97 = vsubq_s32((int32x4_t)vmovl_high_u16(v95), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v95, 1uLL), v96));
    v98 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v95.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v95.i8, 1uLL), v96));
    v99 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v94.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v94.i8, 1uLL), v96)), 8uLL);
    v100 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v94), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v94, 1uLL), v96)), 8uLL);
    v101 = vdupq_n_s32(0xAFEC3100);
    v102 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v99, v101), (int8x16_t)v101);
    v103 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v100, v101), (int8x16_t)v101);
    v104 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v98, 8uLL), v101), (int8x16_t)v101);
    v105 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v97, 8uLL), v101), (int8x16_t)v101);
    v106 = (int8x16_t)vdupq_n_s32(0x43B0EC00u);
    v107 = (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v102, v102), v106);
    v108 = vsubq_s32(v105, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v105, v105), v106));
    v109 = vsubq_s32(v104, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v104, v104), v106));
    v110 = vsubq_s32(v103, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v103, v103), v106));
    v111 = vdupq_n_s32(0x21D87637u);
    v112 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v102, v107), v111), (int8x16_t)v111), veorq_s8(v90, (int8x16_t)v89));
    v113 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v110, v111), (int8x16_t)v111), veorq_s8(v91, (int8x16_t)v89));
    v114 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v109, v111), (int8x16_t)v111), veorq_s8((int8x16_t)vaddq_s32(v88, v89), (int8x16_t)v89));
    v115 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v108, v111), (int8x16_t)v111), veorq_s8(v92, (int8x16_t)v89));
    v116 = (int8x16_t)vdupq_n_s32(0x793D99B8u);
    v117 = vdupq_n_s32(0xFC9ECCDC);
    v118 = (int8x16_t)vaddq_s32(vsubq_s32(v112, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v112, v112), v116)), v117);
    v119 = (int8x16_t)vaddq_s32(vsubq_s32(v113, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v113, v113), v116)), v117);
    v120 = (int8x16_t)vaddq_s32(vsubq_s32(v114, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v114, v114), v116)), v117);
    v121 = (int8x16_t)vaddq_s32(vsubq_s32(v115, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v115, v115), v116)), v117);
    v122 = (uint8x16_t)veorq_s8(v222.val[2], v68);
    v123 = vmovl_u8(*(uint8x8_t *)v122.i8);
    v124 = vmovl_high_u8(v122);
    v125.i64[0] = 0x9000000090;
    v125.i64[1] = 0x9000000090;
    v126 = vsubq_s32((int32x4_t)vmovl_high_u16(v124), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v124, 1uLL), v125));
    v127 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v123), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v123, 1uLL), v125)), 0x10uLL);
    v128 = vdupq_n_s32(0x83480000);
    v129 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v123.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v123.i8, 1uLL), v125)), 0x10uLL), v128), (int8x16_t)v128);
    v130 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v127, v128), (int8x16_t)v128);
    v131 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v124.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v124.i8, 1uLL), v125)), 0x10uLL), v128), (int8x16_t)v128);
    v132 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v126, 0x10uLL), v128), (int8x16_t)v128);
    v133 = (int8x16_t)vdupq_n_s32(0x64C00000u);
    v134 = vdupq_n_s32(0xB2606ADF);
    v135 = (int32x4_t)vorrq_s8(veorq_s8(v118, (int8x16_t)v117), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v129, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v129, v129), v133)), v134), (int8x16_t)v134));
    v136 = (int32x4_t)vorrq_s8(veorq_s8(v119, (int8x16_t)v117), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v130, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v130, v130), v133)), v134), (int8x16_t)v134));
    v137 = (int32x4_t)vorrq_s8(veorq_s8(v120, (int8x16_t)v117), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v131, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v131, v131), v133)), v134), (int8x16_t)v134));
    v138 = (int32x4_t)vorrq_s8(veorq_s8(v121, (int8x16_t)v117), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v132, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v132, v132), v133)), v134), (int8x16_t)v134));
    v139 = (int8x16_t)vdupq_n_s32(0x10797E7Au);
    v140 = vdupq_n_s32(0x883CBF3D);
    v141 = (int8x16_t)vaddq_s32(vsubq_s32(v135, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v135, v135), v139)), v140);
    v142 = (int8x16_t)vaddq_s32(vsubq_s32(v136, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v136, v136), v139)), v140);
    v143 = (int8x16_t)vaddq_s32(vsubq_s32(v137, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v137, v137), v139)), v140);
    v144 = (int8x16_t)vaddq_s32(vsubq_s32(v138, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v138, v138), v139)), v140);
    v145 = (uint8x16_t)veorq_s8(v222.val[3], v68);
    v146 = vmovl_u8(*(uint8x8_t *)v145.i8);
    v147 = vmovl_high_u8(v145);
    v125.i64[0] = 0xC0000000C0;
    v125.i64[1] = 0xC0000000C0;
    v148 = vsubq_s32((int32x4_t)vmovl_high_u16(v147), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v147, 1uLL), v125));
    v149 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v146), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v146, 1uLL), v125)), 0x18uLL);
    v150 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v146.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v146.i8, 1uLL), v125)), 0x18uLL), v71), (int8x16_t)v71);
    v151 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v149, v71), (int8x16_t)v71);
    v152 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v147.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v147.i8, 1uLL), v125)), 0x18uLL), v71), (int8x16_t)v71);
    v153 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v148, 0x18uLL), v71), (int8x16_t)v71);
    v154 = vdupq_n_s32(0x6C871AC1u);
    v155 = (int32x4_t)vorrq_s8(veorq_s8(v141, (int8x16_t)v140), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v150, (int32x4_t)(*(_OWORD *)&vaddq_s32(v150, v150) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v154), (int8x16_t)v154));
    v156 = (int32x4_t)vorrq_s8(veorq_s8(v142, (int8x16_t)v140), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v151, (int32x4_t)(*(_OWORD *)&vaddq_s32(v151, v151) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v154), (int8x16_t)v154));
    v157 = (int32x4_t)vorrq_s8(veorq_s8(v143, (int8x16_t)v140), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v152, (int32x4_t)(*(_OWORD *)&vaddq_s32(v152, v152) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v154), (int8x16_t)v154));
    v158 = (int32x4_t)vorrq_s8(veorq_s8(v144, (int8x16_t)v140), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v153, (int32x4_t)(*(_OWORD *)&vaddq_s32(v153, v153) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v154), (int8x16_t)v154));
    v159 = vdupq_n_s32(0x1CAAB72Bu);
    a49 = vaddq_s32(vaddq_s32(v157, v159), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32(v157, v157), v70)));
    a50 = vaddq_s32(vaddq_s32(v158, v159), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32(v158, v158), v70)));
    a47 = vaddq_s32(vaddq_s32(v155, v159), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32(v155, v155), v70)));
    a48 = vaddq_s32(vaddq_s32(v156, v159), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32(v156, v156), v70)));
    return ((uint64_t (*)(__n128))(*(_QWORD *)(v53 + 8 * (int)((1176 * (a40 + 1 == v55)) ^ a5 ^ (a5 - 748)))
                                           - 4))(v59);
  }
  else
  {
    LODWORD(STACK[0x36C]) = 2 * (LODWORD(STACK[0x36C]) ^ v54) + v54 - (v51 & (4 * (LODWORD(STACK[0x36C]) ^ v54)));
    LODWORD(STACK[0x370]) = (v75 ^ v54) + (v74 ^ v54) + v54 - (v51 & (2 * ((v75 ^ v54) + (v74 ^ v54))));
    LODWORD(STACK[0x374]) = (v78 ^ v54) + (v76 ^ v54) + v54 - (v51 & (2 * ((v78 ^ v54) + (v76 ^ v54))));
    LODWORD(STACK[0x378]) = (v79 ^ v54) + (v77 ^ v54) + v54 - (v51 & (2 * ((v79 ^ v54) + (v77 ^ v54))));
    a41 = 0;
    return v72(v59);
  }
}

uint64_t sub_19C5CD7D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,unsigned int a37)
{
  uint64_t v37;
  unsigned int v38;
  _BOOL4 v39;
  _BOOL4 v40;
  _BOOL4 v41;

  v38 = (a5 ^ (a5 - 411) ^ 0x156543FC) + a31;
  v39 = v38 < 0x2B5951FC;
  v40 = v38 > a37;
  if (a37 < 0x2B5951FC != v39)
    v41 = v39;
  else
    v41 = v40;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v37 + 8 * ((375 * !v41) ^ (a4 + a5 + 87))) - a3 + 1369))(a1, 3926650391);
}

uint64_t sub_19C5CD86C(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t))(v4
                                            + 8
                                            * (a3 ^ (8
                                                   * (a2 + v3 + 63 >= v3
                                                                                  + 532750114
                                                                                  + ((a3 - 816846446) & 0xFAFADFFD))))))(34);
}

uint64_t sub_19C5CD8E4(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  int v32;
  int v33;
  int v34;
  uint64_t v35;

  return (*(uint64_t (**)(void))(v35
                              + 8
                              * (((a5 - a30 - a32 - (unint64_t)(v32 + a2) >= (a3 ^ (v34 - 869) ^ 0xCA4ACEE5uLL))
                                * (v33 + v34 + a3 - 1381 - 561)) ^ a3)))();
}

uint64_t sub_19C5CD944(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;

  *(int8x16_t *)&STACK[0x324] = vaddq_s8(vsubq_s8(*(int8x16_t *)(a8 + (v8 + a2)), vandq_s8(vaddq_s8(*(int8x16_t *)(a8 + (v8 + a2)), *(int8x16_t *)(a8 + (v8 + a2))), v13)), v12);
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * (((((v9 + 901067027) | a1) == 90) * v10) ^ (v9 + 901068956)))
                            - 12))();
}

uint64_t sub_19C5CD9B0@<X0>(int a1@<W1>, uint64_t a2@<X3>, uint64_t a3@<X4>, int a4@<W5>, uint64_t a5@<X6>, uint64_t a6@<X7>, int a7@<W8>)
{
  int v7;
  char v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  char v13;

  *(_BYTE *)(v9 + a3 + a2) = *(_BYTE *)(a6 + (v7 + a1))
                           - ((((a7 ^ (v11 + 2)) * v13) ^ v8) & (2 * *(_BYTE *)(a6 + (v7 + a1))))
                           + 69;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * (((v9 + 1 == a5 + 64) * a4) ^ (v10 + a7 + 377))) - 12))();
}

uint64_t sub_19C5CDA10@<X0>(uint64_t a1@<X0>, int a2@<W3>, int a3@<W4>, int a4@<W8>)
{
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v5
                                                     + 8
                                                     * ((((a4 - 197555630) > 0x37)
                                                       * ((v4 ^ (a3 - 1532)) - 1542)) ^ (a2 + v4 - 567))))(a1, 4097411666);
}

uint64_t sub_19C5CDA54@<X0>(int a1@<W4>, int a2@<W8>)
{
  int v2;
  uint64_t v3;
  _BOOL4 v4;

  v4 = 197555685 - a2 < ((v2 - 556086797) & 0xEB6FFEF5 ^ (a1 - 3));
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((v4 | (16 * v4)) ^ v2)) - 4))();
}

uint64_t sub_19C5CDAA4@<X0>(int a1@<W1>, int a2@<W3>, int a3@<W4>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;

  *(unint64_t *)((char *)&STACK[0x324] + (v4 + a1)) = 0x4545454545454545;
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((118
                                * (((a3 + v5 - 1548) ^ (a3 - 612)) - 604 == ((((a3 + v5 - 1548) ^ 0xCA4ACEF4)
                                                                                            + a4) & 0x1FFFFFFF8))) ^ (a2 + a3 + v5 - 1548 + 34))))();
}

uint64_t sub_19C5CDB14(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  return (*(uint64_t (**)(void))(v8 + 8 * ((((v7 - a4 + 565) ^ (a5 - 1377)) * (v5 != v6)) ^ v7)))();
}

void sub_19C5CDB40(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;

  v5 = LOBYTE(STACK[0x384]) ^ 0x1F;
  if (v5 == 30)
  {
    v10 = STACK[0x368];
    v11 = STACK[0x364];
    LOBYTE(STACK[0x35C]) = ((8 * LOBYTE(STACK[0x368])) ^ 0xC0) + ((2 * ((8 * LOBYTE(STACK[0x368])) ^ 0xC0)) & 0x80) + 69;
    LOBYTE(STACK[0x35D]) = (v10 >> 5) ^ 0x37;
    LOBYTE(STACK[0x35E]) = (v10 >> (a4 + a5 + 116)) ^ 0x79;
    LOBYTE(STACK[0x35F]) = (v10 >> 21) ^ 0x1B;
    HIDWORD(v12) = v11 ^ 0x17DF6C14;
    LODWORD(v12) = v10 ^ 0x80000000;
    LOBYTE(STACK[0x360]) = ((v12 >> 29) - ((2 * (v12 >> 29)) & 0xEC) + 118) ^ 0x33;
    LOBYTE(STACK[0x361]) = (v11 >> 5) ^ 0x25;
    LOBYTE(STACK[0x362]) = (v11 >> 13) ^ 0xBE;
    v9 = (v11 >> 21) ^ 0xFFFFFFFB;
  }
  else
  {
    if (v5 != 29)
      goto LABEL_6;
    v6 = STACK[0x364];
    v7 = STACK[0x368];
    LOBYTE(STACK[0x35C]) = (LODWORD(STACK[0x364]) >> 21) ^ 0xFB;
    LOBYTE(STACK[0x35D]) = (v6 >> 13) ^ 0xBE;
    LOBYTE(STACK[0x35E]) = (v6 >> 5) ^ 0x25;
    HIDWORD(v8) = v6 ^ 0x17DF6C14;
    LODWORD(v8) = v7 ^ 0x80000000;
    LOBYTE(STACK[0x35F]) = ((v8 >> 29) - ((2 * (v8 >> 29)) & 0xB4) + 90) ^ 0x1F;
    LOBYTE(STACK[0x360]) = (v7 >> 21) ^ 0x1B;
    LOBYTE(STACK[0x361]) = (v7 >> 13) ^ 0x79;
    LOBYTE(STACK[0x362]) = (v7 >> 5) ^ 0x37;
    v9 = ((8 * v7) ^ 0xFFFFFFC0) + (((8 * v7) ^ 0xFFFFFFC0) >> 6 << 7) + 69;
  }
  LOBYTE(STACK[0x363]) = v9;
LABEL_6:
  JUMPOUT(0x19C5CBE74);
}

uint64_t sub_19C5CDEEC@<X0>(unsigned int a1@<W8>)
{
  int v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _BOOL4 v8;

  v6 = *(_DWORD *)((char *)&STACK[0x324] + ((v3 + v1) & 0xFFFFFFFC) + 72);
  *(_BYTE *)(v4 + (v3 + v1)) = HIBYTE(v6) ^ 0xC6;
  *(_BYTE *)(v4 + (((v2 + 138427863) | 0xC20A8C85) ^ 0x47B3CAAA) + v3) = BYTE2(v6) ^ 0x99;
  *(_BYTE *)(v4 + (v3 + v1 + 2)) = BYTE1(v6) ^ 0x4E;
  *(_BYTE *)(v4 + (v3 + v1 + 3)) = v6 ^ 0x41;
  v7 = LODWORD(STACK[0x380]) - 2033644032;
  v8 = v3 + 1728911504 < v7;
  if (v3 + 1728911504 < a1 != v7 < a1)
    v8 = v7 < a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((60 * v8) ^ v2)) - 12))();
}

void sub_19C5CE274()
{
  JUMPOUT(0x19C5CE0FCLL);
}

uint64_t sub_19C5CE288@<X0>(char a1@<W8>)
{
  char v1;
  char v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = v4 - 1;
  v7 = (((v3 ^ (v2 + v1) ^ 0xA3) + a1 - ((2 * (v3 ^ (v2 + v1) ^ 0xA3)) & 0xE4)) ^ a1) * (v2 + v1 + 17);
  *((_BYTE *)&STACK[0x324] + v6) = (v7 - ((2 * v7) & 0x6A) + 53) ^ 0x35;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((117 * (v6 == 0)) ^ v3)) - 12))();
}

uint64_t sub_19C5CE2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  int v47;
  uint64_t v48;

  *(_DWORD *)(&a47 + a41) = 743961755;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 + 8 * (int)((a4 + (((((v47 ^ 0x7AF) - 869724600) & 0x33D6EF7F) - 1940726295) ^ 0x46181192) + 678) ^ ((v47 ^ 0x7AF) - 869724600) & 0x33D6EF7F)) - 8))(a1, a2, a3, a4, a5, a6, a7, 0xFFFFFFFFFFFF8CALL, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38);
}

uint64_t sub_19C5CE410(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (((v6 == (v5 & 0x73AD26FF ^ 0x3E2539E4)) * (a4 + (v5 & 0x73AD26FF ^ (a5 - 1635)) - 932)) ^ v5 & 0x73AD26FF)))();
}

uint64_t sub_19C5CE470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40)
{
  int v40;
  uint64_t v41;

  return (*(uint64_t (**)(void))(v41
                              + 8
                              * (((((((a6 - 1055960898) & 0xFFFFFFFC)
                                   - ((2 * (a6 - 1055960898)) & 0xC0BA16D8)
                                   + (v40 ^ 0x605D0D1F)) ^ 0x605D0B6D) != a40)
                                * (((v40 - 1326) | 0x20) - 116)) ^ v40)))();
}

uint64_t sub_19C5CE4DC@<X0>(int a1@<W5>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,int a39)
{
  unsigned int v39;
  uint64_t v40;
  _BOOL4 v42;

  v42 = a2 == 743961755 || a39 - a1 != ((v39 - 545522029) & 0xEACECEFD ^ 0x37CEF57);
  return ((uint64_t (*)(void))(*(_QWORD *)(v40 + 8 * ((26 * v42) ^ v39)) - ((v39 + 80) ^ 0x1BCLL)))();
}

uint64_t sub_19C5CE548(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,int a45)
{
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  _BOOL4 v51;

  v47 = 2 * (v45 ^ (a5 - 171));
  v48 = a4 + v45 - 409;
  v49 = (((v47 + 1156) | 0x110) ^ 0x3F9C0E47) + a45;
  v50 = ((a6 + 147991287) < 0x47C2DA3C) ^ (v49 < 0x47C2DA3C);
  v51 = v49 < a6 + 147991287;
  if (v50)
    v51 = (a6 + 147991287) < 0x47C2DA3C;
  return ((uint64_t (*)(void))(*(_QWORD *)(v46 + 8 * ((26 * !v51) ^ v48)) - 4))();
}

uint64_t sub_19C5CE704()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((56
                                * (((*(_DWORD *)(v1 + 48 * (((v0 - 14970644) & 0xE4697F ^ v4) + v2) + 36) == v2) ^ (v0 - 1)) & 1)) ^ v0)))();
}

uint64_t sub_19C5CE760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v18 = 1305237457 * ((v17 - 774094905 - 2 * ((v17 - 216) & 0xD1DC409F)) ^ 0x6865E651);
  *(_QWORD *)(v17 - 200) = a13;
  *(_DWORD *)(v17 - 192) = a6 + (v16 ^ 0x142A0247) + v18;
  *(_DWORD *)(v17 - 188) = v18 + v16 - 82;
  *(_QWORD *)(v17 - 216) = a14;
  *(_QWORD *)(v17 - 208) = a11;
  *(_QWORD *)(v17 - 168) = a12;
  *(_QWORD *)(v17 - 184) = a7;
  v19 = ((uint64_t (*)(uint64_t))((char *)off_1E3D64110[v16 ^ 0x11F] - 8))(v17 - 216);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15
                                                      + 8
                                                      * (((*(_DWORD *)(v17 - 176) == v14)
                                                        * ((v16 - 987509151) & 0x3ADC357C ^ 0x27B)) ^ v16))
                                          - 8))(v19);
}

uint64_t sub_19C5CE860(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;

  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (int)(((*(_DWORD *)(v4 + 48 * (v8 + v5 - 134)) == ((v7 - 1355) | 0x100) + 2055866905)
                                     * (a4 + ((v7 - 354497893) & 0xDF6BFEFD) - 1132)) ^ v7)))();
}

uint64_t sub_19C5CE8CC@<X0>(int a1@<W3>, int a2@<W4>, int a3@<W8>)
{
  uint64_t v3;

  if ((a3 + 1457532157) <= 0x19 && ((1 << (a3 - 3)) & 0x2000A03) != 0)
    return (*(uint64_t (**)(void))(v3
                                + 8
                                * ((147 * ((7 * ((a2 - 49) ^ 0xF5) + 40) == 128)) ^ (a1 - 901067107))))();
  else
    return (*(uint64_t (**)(void))(v3
                                + 8 * ((147 * ((7 * (a2 ^ (a2 - 49)) + 40) == 127)) ^ (a1 + a2 - 88))))();
}

uint64_t sub_19C5CEA40()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((221
                                          * (((*(_DWORD *)(v2 + 48 * v0 + 40) & 1 ^ 0x26034101) & 0xFFFFFFFD | (2 * (*(_DWORD *)(v2 + 48 * v0 + 40) & 1)))
                                           + 2120355971 != (((v1 ^ 0x7D1) - 961) ^ 0xA4655341))) ^ v1))
                            - 4))();
}

uint64_t sub_19C5CEAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,unsigned int a47)
{
  int v47;
  uint64_t v48;

  return (*(uint64_t (**)(void))(v48
                              + 8
                              * ((55 * ((a47 | ((unint64_t)(a47 < 0x3EF0AF45) << 32)) != 1055960901)) ^ v47)))();
}

uint64_t sub_19C5CEB08@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,unsigned __int8 *a36)
{
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;

  v39 = *a36;
  v40 = (((a1 ^ 0x4F8) - 2146940186) | 0x4A428291) ^ 0xF5BF8C22 ^ v39;
  v41 = (2 * v39) & 0x1AE;
  v42 = *(unsigned __int8 *)(*(_QWORD *)(v36 + 48 * v38 + 24) - 0x1B679C7D7C30A4ACLL);
  if (v42 >= 0x66)
    v43 = 0;
  else
    v43 = -256;
  return ((uint64_t (*)(void))(*(_QWORD *)(v37
                                        + 8
                                        * (int)(((v40 - v42 + v41 + v43 == 1073037937)
                                               * (((a1 ^ 0x4F8) + 1189740160) & 0xB9160587 ^ 0x197)) ^ a1 ^ 0x4F8))
                            - 8))();
}

uint64_t sub_19C5CEC08()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _BOOL4 v9;

  v5 = v0 < v1;
  v6 = (v3 - 1032);
  v7 = (v6 ^ 0xDCAD176FE1B376AELL) + v2;
  v8 = v5 ^ (v7 < v6 + 3952092540);
  v9 = v7 < v0;
  if (!v8)
    v5 = v9;
  return (*(uint64_t (**)(void))(v4 + 8 * (((!v5 << 8) | (!v5 << 9)) ^ v3)))();
}

void sub_19C5CEC6C()
{
  JUMPOUT(0x19C5CEB50);
}

uint64_t sub_19C5CEC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unint64_t v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * ((1552
                                          * (((((v8 - 1006013134) & 0x3BF68F3D) + a8) & v10) - 1 < ((v8 - 2068872902) & 0x7B507D7E ^ 0x17CuLL))) ^ v8))
                            - 12))();
}

uint64_t sub_19C5CECD8@<X0>(uint64_t a1@<X6>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,int a39,uint64_t a40,int a41,int a42)
{
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  int v50;

  *(_DWORD *)(v45 + 392) = a2;
  *(_DWORD *)(v45 + 396) = a42;
  *(_QWORD *)(v45 + 400) = a37;
  *(_DWORD *)(v45 + 408) = a39 - v46 + 538285754;
  *(_QWORD *)(v45 + 416) = a1 + (v46 - 136761575);
  v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + v49 * (uint64_t)v42 + 8))(a11, a33);
  return ((uint64_t (*)(void))(*(_QWORD *)(v47
                                        + 8
                                        * ((1927
                                          * (v50 + v44 - ((((v48 - 2143286921) | 0x4A0AC400) ^ 0xF31FA0A1) & (2 * v50)) == v44)) ^ v48))
                            - 8))();
}

uint64_t sub_19C5CEDA4@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (v3 ^ (1160 * (a1 + v1 - v2 == -353942289))))
                            - ((v3 - 378) | 0x2C1u)
                            + 701))();
}

uint64_t sub_19C5CEDF8@<X0>(unint64_t a1@<X7>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)((((2 * ((((a2 + 1841824880) & 0x9237FFFF) + 1269753929) & 0xB45111FF ^ 0x1C1)) ^ 0x172)
                                     * ((((a2 + 1841824880) & 0x9237FFFF ^ a1) & v3) - 1 > 1)) ^ (a2 + 1841824880) & 0x9237FFFF)))();
}

uint64_t sub_19C5CEE5C@<X0>(int a1@<W3>, int a2@<W8>)
{
  _DWORD *v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((((*v2 - 743961755) < 0x10)
                                          * (a1 + ((a2 - 2008923353) | 0x42088A50) - 514)) ^ a2))
                            - 8))();
}

uint64_t sub_19C5CEEB4@<X0>(int a1@<W5>, uint64_t a2@<X6>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,int a40)
{
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  _DWORD *v44;
  uint64_t v45;
  int v46;
  _DWORD *v47;

  v47 = &v44[6 * v41];
  v47[2] = v43;
  v47[3] = a1;
  *((_QWORD *)v47 + 2) = a2;
  v47[6] = a40;
  *v44 = v40 + 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v45
                                        + 8
                                        * ((843
                                          * (*(_DWORD *)(v42 + 48 * v46 + 32) + 1104855164 + (a3 ^ 0xCAu) - 436 < 0x80000003)) ^ a3))
                            - 8))();
}

uint64_t sub_19C5CEF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,unsigned int a47)
{
  int v47;
  int v48;
  uint64_t v49;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 + 8 * (int)(((v48 == 480950058) * (a4 + ((v47 + 1111641329) | 0x88088050) + 363)) ^ (v47 - 54))) - 8))(a1, a2, a3, a4, a5, a47, a43, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36);
}

uint64_t sub_19C5CF030@<X0>(int a1@<W4>, int a2@<W8>)
{
  int v2;
  unsigned int v3;
  int v4;

  if (a2 == (((v2 - 1688) | 0x104) ^ (a1 + 150)) + 1382017077)
    v4 = -480908044;
  else
    v4 = a2;
  return v4 ^ v3;
}

void sub_19C5CF0B0(uint64_t a1)
{
  int v1;

  v1 = 402930427 * (((a1 | 0x37D5D6F5) - a1 + (a1 & 0xC82A290A)) ^ 0x2D6C2A48);
  __asm { BR              X13 }
}

uint64_t sub_19C5CF178@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  int v7;
  uint64_t v8;
  int v9;

  v5 = 583844137
     * ((((2 * (&v7 ^ 0x8C1D0216)) | 0xB15C086) - (&v7 ^ 0x8C1D0216) - 92987459) ^ 0x99495FD8);
  v7 = v3 - ((v4 + 808505588) & 0x2A509DA4) + v5 + v1 + 1296086051;
  v9 = v1 - v5 - 439;
  v8 = a1;
  return (*(uint64_t (**)(int *))(v2 + 8 * (v1 ^ 0x3B5)))(&v7);
}

void sub_19C5CF2D0(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  char v8;
  int v9;
  int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = 545147329 * (((a1 | 0x804201C7) - (a1 & 0x804201C7)) ^ 0x20B6C1AB);
  v2 = *(_DWORD *)(a1 + 48) + v1;
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 24) + v1;
  v16 = 1560277383;
  v17 = 1323025765;
  v18 = &v20;
  v9 = 1560277320;
  v10 = 1323025765;
  v11 = &v8;
  v12 = 0x4EDBC5655CFFF1C9;
  v13 = &v21;
  v14 = 0x4EDBC5655CFFF1C9;
  v15 = &v19;
  if (v3 | v4)
    v6 = v5 == 1925756741;
  else
    v6 = 1;
  v7 = !v6;
  __asm { BR              X10 }
}

uint64_t sub_19C5CF418()
{
  int v0;
  _QWORD *v1;
  uint64_t v2;
  BOOL v4;

  v4 = v1[8] == 0x50225EDCE5A35480 || (v1[7] | v1[2]) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1386 * (((v0 - 92) ^ v4) & 1)) ^ v0)) - 12))();
}

uint64_t sub_19C5CF46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *(_QWORD *)(v12 + 8);
  *(_DWORD *)(v10 - 0x50225EDCE5A35480) = 1492855662;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *))(*(_QWORD *)(v13 + 8 * ((1834 * (v14 == 0x26866D3AFFDFE019)) ^ v9)) - 4))(v14, (v9 ^ 0x3FCu) + 1492855234, a3, a4, a5, a6, a7, a8, a9, v11, &STACK[0x26866D3AFFDFE0D1]);
}

uint64_t sub_19C5CF53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v30;

  v28 = 583844137 * (((v27 - 144) & 0x3085359C | ~((v27 - 144) | 0x3085359C)) ^ 0xDFA477EE);
  *(_DWORD *)(v27 - 144) = v28 + v25 + 1251;
  *(_DWORD *)(v27 - 128) = v28 + 222847319;
  *(_QWORD *)(v27 - 136) = &a23 + v23;
  v30 = sub_19C5F1CDC((_DWORD *)(v27 - 144));
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v26
                                                               + 8
                                                               * ((((v25 + 905) ^ 0x535) * (v24 != 0)) ^ (v25 + 423)))
                                                   - ((v25 + 905) ^ 0x53ALL)))(v30, a2);
}

uint64_t sub_19C5CF614@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _BOOL4 v23;

  v19 = (a1 - 122) | 0x302;
  v20 = 961177747 * ((v18 - 144) ^ 0x2752F11C);
  *(_QWORD *)(v18 - 120) = v14;
  *(_QWORD *)(v18 - 144) = v12;
  *(_DWORD *)(v18 - 136) = v13 - v20 + (v19 ^ 0xF777695B);
  *(_DWORD *)(v18 - 132) = a1 - v20 - 875;
  v23 = v11 == 0;
  ((void (*)(uint64_t))(*(_QWORD *)(v16 + 8 * (a1 - 1074)) - 4))(v18 - 144);
  *(_DWORD *)(v18 - 128) = (v19 - 1406) ^ (1001500783
                                         * ((((v18 - 144) | 0x3324B8EE) - ((v18 - 144) & 0x3324B8EE)) ^ 0x7990475A));
  *(_QWORD *)(v18 - 144) = a10;
  *(_QWORD *)(v18 - 136) = v15;
  ((void (*)(uint64_t))(*(_QWORD *)(v16 + 8 * (v19 - 1925)) - 4))(v18 - 144);
  *(_DWORD *)(v18 - 120) = (v19 - 40) ^ (545147329
                                       * ((((v18 - 144) | 0xF044C597) - ((v18 - 144) & 0xF044C597)) ^ 0x50B005FB));
  *(_QWORD *)(v18 - 112) = a11;
  *(_QWORD *)(v18 - 104) = a10;
  *(_QWORD *)(v18 - 136) = a4;
  *(_QWORD *)(v18 - 128) = v15;
  *(_QWORD *)(v18 - 144) = a9;
  v21 = (*(uint64_t (**)(uint64_t))(v16 + 8 * (v19 ^ 0x76E)))(v18 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v17 + 8 * (v19 ^ (117 * v23))) - 8))(v21);
}

uint64_t sub_19C5CF838()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  _DWORD *v10;

  v6 = 1001500783 * ((((v5 - 144) | 0x25A95480) - ((v5 - 144) & 0x25A95480)) ^ 0x6F1DAB34);
  *(_QWORD *)(v5 - 128) = v8;
  *(_QWORD *)(v5 - 144) = v3;
  *(_DWORD *)(v5 - 136) = v1 - v6 + (v4 ^ 0xF06AA8A8);
  *(_DWORD *)(v5 - 120) = (v4 - 290) ^ v6;
  result = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * (v4 ^ 0x759)) - 12))(v5 - 144);
  *v10 = v9;
  *(_DWORD *)(v0 + 72) = 480950058;
  return result;
}

uint64_t sub_19C5CF978(_DWORD *a1)
{
  unsigned int v1;

  v1 = 511487701 * ((a1 & 0x95E93A0D | ~(a1 | 0x95E93A0D)) ^ 0x727FB13A);
  return (*((uint64_t (**)(void))off_1E3D64110[*a1 + v1 - 783]
          + (int)(((((a1[4] - v1) ^ 0x1CAAB72A) - 1 < 0x63) * (((*a1 + v1 - 780) | 0x104) - 341)) ^ (*a1 + v1))))();
}

uint64_t sub_19C5CFA04@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  int v2;

  *(_DWORD *)(*(_QWORD *)(result + 8) - 0x6EC223CCA5D6BC0ELL) = (a2 ^ 0xE35548D5)
                                                              - ((2 * (a2 ^ 0xE35548D5) + 1073656626) & 0x39556E54)
                                                              + ((5 * ((v2 - 520) ^ 0x1F0)) ^ 0x1CAA13A5);
  return result;
}

void zxcm2Qme0x(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X8 }
}

uint64_t sub_19C5CFB30(uint64_t a1, int a2)
{
  uint64_t v2;
  BOOL v3;
  int v4;

  if (a1)
    v3 = a2 == 0;
  else
    v3 = 0;
  v4 = !v3;
  return (*(uint64_t (**)(void))(v2 + 8 * ((4078 * v4) ^ 0x7EBu)))();
}

uint64_t sub_19C5CFB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13)
{
  uint64_t v13;
  uint64_t v14;

  a13 = (583844137 * ((-116941541 - (&a12 | 0xF9079D1B) + (&a12 | 0x6F862E4)) ^ 0x1626DF69)) ^ 0xD9A13099;
  v14 = sub_19C61D0E8(&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v13 + 8 * ((275 * (a12 == 480950058)) ^ 0x25D)) - 8))(v14);
}

uint64_t sub_19C5CFC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, int a13, unint64_t *a14)
{
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  a14 = &STACK[0x1BB16424708BA63];
  a12 = v16 - 653146051 * (((&a12 | 0x9960DF05) - (&a12 & 0x9960DF05)) ^ 0x33746AE7) - 78;
  sub_19C5B7A1C(&a12);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15
                                                                                          + 8
                                                                                          * ((a13 != v14) | (4 * (a13 != v14)) | v16))
                                                                              - (((v16 + 35001817) | 0x4202480)
                                                                               + (unint64_t)(v16 ^ 0x15F))
                                                                              + 104218544))(v17, v18, v19, v20, v21);
}

uint64_t sub_19C5CFCF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13, uint64_t a14, uint64_t a15, int a16)
{
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;

  v22 = 1001500783 * (&a12 ^ 0x4AB4FFB4);
  a12 = (v21 - 557) ^ v22;
  a13 = ((2 * v17) & 0xCE7FBFF6) + v22 + (v17 ^ 0x673FDDA6 ^ (v21 - 1788482314) & 0x2125F) - 1109412042;
  a14 = a10;
  a15 = v16;
  v23 = ((uint64_t (*)(int *))(*(_QWORD *)(v19 + 8 * (v21 ^ 0x393u)) - 8))(&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20 + 8 * (v21 ^ (16 * (a16 == v18)))) - 4))(v23);
}

uint64_t sub_19C5CFDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, uint64_t a13, unsigned int a14, int a15, int a16, unsigned int a17)
{
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;

  v20 = 1575213817
      * (((&a12 | 0xE9598F4E) - &a12 + (&a12 & 0x16A670B0)) ^ 0x643C3F82);
  a17 = 345583739 - v20;
  a16 = (v19 - 871892361) ^ v20;
  a14 = 1783734811 - v20;
  a12 = &STACK[0x43A4C4D315BFAF6D];
  a13 = a10;
  v21 = sub_19C61CA08((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18 + 8 * (((a15 == v17) * ((v19 - 170) ^ 0x551)) ^ v19))
                                          - 3 * (v19 ^ 0x208u)
                                          + 809))(v21);
}

uint64_t sub_19C5CFE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, unsigned int a15)
{
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  a15 = (v15 - 365) ^ (1001500783
                     * ((((2 * &a13) | 0xA303F680) - &a13 + 780010688) ^ 0x9B3504F4));
  a13 = a12;
  a14 = &STACK[0x143DED155B0DEE88];
  v18 = ((uint64_t (*)(uint64_t *))(*(_QWORD *)(v16 + 8 * (int)(v15 - 601)) - 12))(&a13);
  return (*(uint64_t (**)(uint64_t))(v17 + 8 * ((1962 * (a10 == (v15 ^ 0x1CAAB407))) ^ v15)))(v18);
}

uint64_t sub_19C5CFF3C()
{
  uint64_t v0;
  int v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  int v5;
  void (*v6)(uint64_t *);
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = v10;
  v14 = 0x74A96BC4507E9729;
  LODWORD(v12) = -104217508 - 1431787901 * (&v11 ^ 0x2B90AAD7) + v1 + 657;
  v11 = v0;
  (*(void (**)(uint64_t *))(v4 + 8 * (v1 ^ (v5 + 651))))(&v11);
  v12 = v10;
  LODWORD(v11) = (((&v11 | 0x864D8C37) + (~&v11 | 0x79B273C8)) ^ 0x97BF817C) * v3
               - 104217508
               + v1;
  sub_19C5F1B8C((uint64_t)&v11);
  HIDWORD(v11) = -104217508
               - (((&v11 | 0x7292ED1) - &v11 + (&v11 & 0xF8D6D128)) ^ 0x16DB239B)
               * v3
               + v1
               + 570;
  v12 = v10;
  v6(&v11);
  v12 = v9;
  HIDWORD(v11) = ((v1 - 2002585908) & 0x1126CEDF)
               - ((&v11 & 0xBE07E765 | ~(&v11 | 0xBE07E765)) ^ 0x500A15D0) * v3
               + 234;
  v6(&v11);
  return v8 ^ v2;
}

void sub_19C5D00E4(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  int v4;
  BOOL v5;
  int v6;

  v1 = 1431787901 * (a1 ^ 0x2B90AAD7);
  v2 = *a1 + v1;
  v3 = a1[7] ^ v1;
  if ((~v3 & 0x30000000) != 0)
  {
    v4 = ((v3 & 0x3F000000 ^ 0x30000000) - ((2 * (v3 & 0x3F000000 ^ 0x30000000)) & 0x38000000) + 479442065) ^ 0x1D93BCE0;
    v5 = (v4 | 0x8C40AE52) - (v4 | 0x73BF51AD) == 897668214;
  }
  else
  {
    v5 = 1;
  }
  v6 = v5;
  __asm { BR              X11 }
}

uint64_t sub_19C5D01E4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unsigned int a6, char a7, int a8, unint64_t *a9, int a10, unint64_t *a11)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v15 = *(_QWORD *)(v12 + 16);
  v16 = 653146051 * ((2 * (&a4 & 0x13F852F8) - &a4 + 1812442375) ^ 0xC61318E5);
  a6 = ((2 * v11) & 0xDBD69FFE ^ 0xA94169A) + (v11 ^ 0xF8B164B2) - v16 + (v14 ^ 0x1A1CF770);
  a4 = &STACK[0xA37E53CF546EE41];
  a5 = v15;
  a8 = (v14 + 1635492360) ^ v16;
  a7 = -61 * ((2 * (&a4 & 0xF8) - &a4 + 7) ^ 0xE5) + 3;
  a9 = &STACK[0x5F1EC0F309033E6E];
  a11 = &STACK[0x46F0E39C08329BFF];
  v17 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(a1 + 8 * (v14 - 241)) - 4))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v13 + 8 * ((2037 * (a10 == 480950058)) ^ v14)) - 4))(v17);
}

uint64_t sub_19C5D0314()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8
                                             * (((((v1 ^ 0x1F1) + 1742) ^ 0x63A) * (v2 != 897668214)) ^ v1 ^ 0x1F1))
                            - (((v1 ^ 0x1F1u) + 828) ^ 0x436)))();
}

uint64_t sub_19C5D0358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  _BOOL4 v15;

  v12 = ((a10 + 4) ^ 0x4EF4D36F7E16E52BLL) - 0x4EF4D36F165DB51ALL + ((2 * (a10 + 4)) & 0x9DE9A6DEFC2DCA56);
  v13 = (a10 ^ 0x9F75F5F4C77FB757) + 0x608A0A0BA03978BALL + ((2 * a10) & 0x3EEBEBE98EFF6EAELL);
  v14 = v12 < 0x67B93011;
  v15 = v12 > v13;
  if (v13 < 0x67B93011 != v14)
    v15 = v14;
  return (*(uint64_t (**)(unint64_t))(v11 + 8 * ((60 * !v15) ^ v10)))(0xB10B2C90E9A24AE6);
}

uint64_t sub_19C5D046C()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (v0 ^ (1191
                                               * ((v2 & 0xEBBEE7CE ^ 0xC022C00E) + (v1 ^ 0x9FCE9BE8) - 1581186 != 1975997285))))
                            - ((((2 * v0) ^ 0x71A) - 1261535037) & 0x4B317FDF)
                            + 1241))();
}

uint64_t sub_19C5D04E8(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((a1 + v2 - 1977578471 >= ((v1 + 1605353214) & 0xA0503C76 ^ 0x5E))
                                          * (v1 - 779)) ^ v1))
                            - 8))();
}

uint64_t sub_19C5D054C(int a1)
{
  char v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * (((((v2 ^ 0xFFFFFFAE) & (a1 - (v1 & 3))) > a1 + 3) * (v2 ^ 0xD5)) ^ v2)))();
}

uint64_t sub_19C5D058C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)(a1 - 3 + (v4 + v2)) = *(_DWORD *)(v1 - 3 + (v4 + v2));
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((199 * (((v3 == 4) ^ ((v5 ^ 0xC2) + 1)) & 1)) ^ ((v5 ^ 0x15D) + 1359))))();
}

uint64_t sub_19C5D05EC()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((98
                                * ((v1 ^ 0xC7EE85F5)
                                 - 977025514
                                 + (v2 & 0x5BFEDBF4 ^ (((v0 + 102) | 0x28) - 682) ^ 0x5022D184) == -205310960)) ^ v0)))();
}

uint64_t sub_19C5D0660@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _BOOL4 v7;

  v7 = v5 < v3;
  *(_BYTE *)(a1 + (v2 - 1174062671)) = *(_BYTE *)(v1 + (v2 - 1174062671));
  if (v7 == v2 - 1379373630 < v3)
    v7 = v2 - 1379373630 < v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (int)((1600 * v7) ^ v4)) - (v4 ^ 0x194)))();
}

uint64_t sub_19C5D06D4@<X0>(unsigned int a1@<W1>, uint64_t a2@<X8>, uint8x8_t a3@<D0>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  a3.i32[0] = *(_DWORD *)(a2 + a1 + 1);
  *(_DWORD *)(a2 - 3 + (v5 + v3)) = vmovn_s16((int16x8_t)vmovl_u8(a3)).u32[0];
  return (*(uint64_t (**)(void))(v7 + 8 * ((1109 * ((v6 ^ 0x259) - 519 == v4)) ^ v6 ^ 0x259)))();
}

uint64_t sub_19C5D0724(uint64_t a1, int a2, int a3, int16x8_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  *(_DWORD *)(a1 + (v5 - a2)) = vmovn_s16(a4).u32[0];
  return (*(uint64_t (**)(void))(v8 + 8 * (((v6 + a2 - 396 == v4) * a3) ^ v7)))();
}

uint64_t sub_19C5D0750()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((((v2 - 1023060993) & 0x3CFAAB7F) - 232) * (v0 != v1)) ^ v2))
                            - (((v2 - 376) | 0x422u) ^ 0x43ELL)))();
}

uint64_t sub_19C5D07A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(a1 + (v4 + v3)) = *(_BYTE *)(v1 + (v4 + v3));
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((v5 - 7) ^ ((v4 - 1 != v2) << 7))) - (v5 ^ 0x535u) + 1070))();
}

uint64_t sub_19C5D07D8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((118 * (*(_QWORD *)(v1 + 8) == 0x6F2C606D458B753CLL)) ^ v0))
                            - ((v0 + 18) ^ 0x448)))();
}

uint64_t sub_19C5D0820@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1411 * (*(_QWORD *)(v1 + 32) != 0x57F20741F5DF806ELL)) ^ a1))
                            - 4))();
}

uint64_t sub_19C5D085C@<X0>(int a1@<W8>, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(v3 - 0x6F2C606D458B753CLL) = a3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((1411 * (*(_QWORD *)(v4 + 32) != 0x57F20741F5DF806ELL)) ^ a1))
                            - 4))();
}

void sub_19C5D08B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 - 0x57F20741F5DF806ELL) = v2;
  *(_DWORD *)(v1 + 24) = 480950058;
}

void sub_19C5D0908(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)a1 ^ (1305237457 * (((a1 | 0x2B4CB8D7) - a1 + (a1 & 0xD4B34728)) ^ 0x92F51E19));
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 - 0x26866D3AFFDFE015) - 1323025765 >= 0)
    v4 = *(_DWORD *)(v2 - 0x26866D3AFFDFE015) - 1323025765;
  else
    v4 = 1323025765 - *(_DWORD *)(v2 - 0x26866D3AFFDFE015);
  v3 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v3 - 0x26866D3AFFDFE015) - 1323025765 >= 0)
    v5 = *(_DWORD *)(v3 - 0x26866D3AFFDFE015) - 1323025765;
  else
    v5 = 1323025765 - *(_DWORD *)(v3 - 0x26866D3AFFDFE015);
  v8 = v1 + 1431787901 * (&v7 ^ 0x2B90AAD7) + 1601;
  v7 = v2;
  sub_19C619F90((uint64_t)&v7);
  if (v4 >= v5)
    v6 = (v5 ^ 0x4D5CEF7E) - 68217890 + ((2 * v5) & 0x9AB9DEFC);
  else
    v6 = (v4 ^ 0xCF6FC75E) + 2044476414 + ((2 * v4) & 0x9EDF8EBC);
  __asm { BR              X9 }
}

uint64_t sub_19C5D0AE8@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  _BOOL4 v15;

  v11 = 4 * (v10 - 162734006);
  v12 = *(_DWORD *)(*(_QWORD *)(a3 - 0x26866D3AFFDFE011) + v11) ^ v9;
  v13 = *(_DWORD *)(*(_QWORD *)(a4 - 0x26866D3AFFDFE011) + v11) ^ (v9 + v8 + 46 - 418);
  v14 = v7 + ((2 * v12) & 0xDBF7B77E) + (v12 ^ 0x6DFBDBBF) + (v13 ^ 0xAEAFB6FD) + ((2 * v13) & 0x5D5F6DFA);
  *(_DWORD *)(*(_QWORD *)(a6 - 0x26866D3AFFDFE011) + v11) = v14
                                                            + 1457274596
                                                            - ((2 * (v14 + 1457274596) - 966676224) & 0xF65D53B6)
                                                            + 1583317595;
  v15 = a1 + 1027468941 < 109703657;
  if (v15 == v10 + 2094453300 < 109703657)
    v15 = v10 + 2094453300 < a1 + 1027468941;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((215 * !v15) ^ v8)) - 4))();
}

uint64_t sub_19C5D0C8C()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  _BOOL4 v6;

  v4 = v2 + 1115860910 + 10 * (v1 ^ 0x12B);
  v5 = (v3 > 0x33CA2B41) ^ (v4 < -868887362);
  v6 = v4 < (int)(v3 + 1278596286);
  if (v5)
    v6 = v3 > 0x33CA2B41;
  return (*(uint64_t (**)(void))(v0 + 8 * ((v6 * (v1 ^ 0x1B6)) ^ v1)))();
}

uint64_t sub_19C5D0D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  unsigned int v25;

  v22 = v21 > v18;
  v23 = 4 * (v20 - 162734006 + (((v15 ^ 1) - 339) | 0x50A) - 1370);
  v24 = *(_DWORD *)(*(_QWORD *)(a10 - 0x26866D3AFFDFE011) + v23) ^ v19;
  v25 = v14 + (v24 ^ 0xD9EB9BDD) + ((2 * v24) & 0xB3D737BA);
  *(_DWORD *)(*(_QWORD *)(a13 - 0x26866D3AFFDFE011) + v23) = v25
                                                             - 268435548
                                                             - ((2 * (v25 - 268435548) + 429530430) & 0xF65D53B6)
                                                             + 133937274;
  if (v22 == v20 + 1115862281 < v16)
    v22 = v20 + 1115862281 < v17;
  return (*(uint64_t (**)(void))(v13 + 8 * ((755 * v22) ^ ((v15 ^ 1) - 1))))();
}

uint64_t sub_19C5D0E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12)
{
  uint64_t v12;
  int v13;
  int v14;
  _BOOL4 v15;

  v15 = v14 + 1641139 < (int)(a12 + 164375145);
  if (a12 > 0x7633D596 != v14 + 1641139 < -1983108503)
    v15 = a12 > 0x7633D596;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * ((50 * !v15) ^ v13))
                            - (((v13 - 74) | 0x268u)
                             + (unint64_t)((v13 - 1981307041) & 0x761857EF))
                            + 3101))();
}

uint64_t sub_19C5D0F08()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * (((v1 != 0x57521FF2294755E0) * ((v2 - 1406814466) & 0x53DA45FB ^ 0x33E)) ^ v2))
                            - 8))();
}

void sub_19C5D0F54()
{
  int v0;
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;

  *(_DWORD *)(*(_QWORD *)(v4 - 0x26866D3AFFDFE011) + 4 * (v2 + v3)) = v0
                                                                        - 2
                                                                        * ((v0 + ((v1 - 1161) | 0x183) + 1454942333) & 0x7B2EA9DF ^ v0 & 4)
                                                                        - 773368837;
  *(_DWORD *)(v4 - 0x26866D3AFFDFE015) = (((v2 + 1 + v3) * (v5 - 390944995)) ^ 0x4FFBD7EF)
                                         - 18879114
                                         + ((2 * (v2 + 1 + v3) * (v5 - 390944995)) & 0x9FF7AFDE);
}

void sub_19C5D1180(uint64_t a1)
{
  int v1;

  v1 = 653146051 * (((a1 | 0x7AF7B959) - a1 + (a1 & 0x850846A6)) ^ 0xD0E30CBB);
  __asm { BR              X13 }
}

uint64_t sub_19C5D122C@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  int v8;
  unsigned int v9;

  v5 = 1431787901
     * ((((2 * (&v7 ^ 0xD19E0AA)) | 0x344B659C) - (&v7 ^ 0xD19E0AA) + 1708805426) ^ 0xBCACF8B3);
  v7 = v3;
  v8 = (a1 - 447) ^ v5;
  v9 = v1 - ((v4 - 912980546) & 0xFE502D12) - v5 + ((a1 - 888954076) & 0x34FC5FED ^ 0x63F29C81);
  return ((uint64_t (*)(uint64_t *))(*(_QWORD *)(v2 + 8 * (a1 - 436)) - 12))(&v7);
}

void sub_19C5D13A0(uint64_t a1)
{
  int v1;

  v1 = 545147329 * (((a1 | 0x895EFC0B) - a1 + (a1 & 0x76A103F4)) ^ 0x29AA3C67);
  __asm { BR              X10 }
}

uint64_t sub_19C5D1450(uint64_t result)
{
  *(_DWORD *)(result + 16) = 1824076285;
  return result;
}

void sub_19C5D187C(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 8) ^ (402930427 * ((a1 + 1635560039 - 2 * (a1 & 0x617CAA67)) ^ 0x7BC556DA));
  v2 = *(_QWORD *)a1;
  ((void (*)(uint64_t (*)(uint64_t), void (*)()))off_1E3D64110[v1 - 19])(off_1E3D64110[v1 ^ 0x73], sub_19C61D1F4);
  __asm { BR              X10 }
}

uint64_t sub_19C5D1930()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;

  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8 * (v2 + 90)) - 4) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * (((4 * v3) | (v3 << 6)) ^ v2))
                            - ((v2 - 260456368) & 0xF863FEB)
                            + 222))();
}

uint64_t sub_19C5D1988@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 - 7)))(v1);
}

void sub_19C5D19A4(uint64_t a1)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  _BOOL4 v4;
  _BOOL4 v5;

  v2 = (*(_QWORD *)(a1 + 24) ^ 0xDFF6BEF9FFCBFFFELL)
     + 0x20094106C088F996
     + ((2 * *(_QWORD *)(a1 + 24)) & 0xBFED7DF3FF97FFFCLL);
  v3 = (*(_QWORD *)(a1 + 16) ^ 0x698F7FDFFFD7FF2FLL)
     - 0x698F7FDF3F83059BLL
     + ((2 * *(_QWORD *)(a1 + 16)) & 0xD31EFFBFFFAFFE5ELL);
  v4 = v2 < 0xC054F994;
  v5 = v2 > v3;
  if (v4 != v3 < 0xC054F994)
    v5 = v4;
  v1 = *(_DWORD *)(a1 + 48) + 961177747 * (a1 ^ 0x2752F11C);
  __asm { BR              X16 }
}

uint64_t sub_19C5D1B80(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((((((v1 ^ 0x9B) - 754123266) & 0x2CF306EF) - 104)
                                * ((v2 ^ 0x8AF1BCEA) - 1892290658 + (a1 & 0xE7BEA7EE ^ 0xE21C862A) != 51725205)) ^ v1 ^ 0x9B)))();
}

uint64_t sub_19C5D1BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v9 = (v5 - 1);
  v10 = (v9 | ((unint64_t)(v9 < ((433 * (v4 ^ 0x1D2)) ^ (v6 + 444))) << 32))
      - 51725205;
  *(_BYTE *)(v7 + v10) = *(_BYTE *)(v3 + (v10 & 0xF)) ^ *(_BYTE *)(v0 + v10) ^ *(_BYTE *)(v2 + (v10 & 0xF)) ^ *(_BYTE *)(v1 + (v10 & 0xF)) ^ (97 * (v10 & 0xF));
  return (*(uint64_t (**)(void))(v8 + 8 * ((1628 * ((_DWORD)v9 != v6)) ^ v4)))();
}

uint64_t sub_19C5D1C78(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v3
                                                     + 8
                                                     * ((100
                                                       * ((v2 ^ 0x26F19CEF)
                                                        + 1681680906
                                                        + ((((4 * v1) ^ 0xC) - 1306738852) ^ a1 & 0xBFBEE7E4) == 1142676988)) ^ v1)))(100, 1261420591);
}

uint64_t sub_19C5D1CEC(int a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t v14;

  v12 = v7 < v9;
  v13 = (a2 | ((unint64_t)(a2 < v8) << 32)) - 1261420591;
  v14 = v13 & (((v6 + 210) | 0x440u) ^ 0x6CBLL);
  *(_BYTE *)(v10 + v13) = *(_BYTE *)(v5 + v14) ^ *(_BYTE *)(v2 + v13) ^ *(_BYTE *)(v4 + v14) ^ *(_BYTE *)(v3 + v14) ^ (97 * v14);
  if (v12 == a2 - 118743602 < v9)
    v12 = a2 - 118743602 < v7;
  return (*(uint64_t (**)(void))(v11 + 8 * ((!v12 * a1) ^ v6)))();
}

uint64_t sub_19C5D1D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v45 = v41[5];
  *(int8x16_t *)(v44 - 112) = veorq_s8(*(int8x16_t *)(*v41 - 0x5C840434281E4E67), (int8x16_t)xmmword_19CAED6B0);
  if (v42)
    v46 = v45 == 0x7B9A35B3D63327D6;
  else
    v46 = 1;
  v47 = !v46;
  v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 + 8 * ((302 * v47) ^ v40)) - 12);
  LODWORD(STACK[0x244]) = -42900;
  return v48(a1, a2, a3, a4, v45, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40);
}

uint64_t sub_19C5D1E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49)
{
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  _BOOL4 v55;
  uint64_t (*v56)(void);

  v52 = a49 - ((2 * a49 + 1927345994) & 0x70EB00A2) - 236585994;
  v53 = ((2 * v52) & 0xBB7BBFEC ^ v50 ^ 0x306B057D) + (v52 ^ 0x65C85FA7);
  v55 = ((v53 + 10) & 0xF) == ((v49 - 231 + ((v49 - 1539) | 0x200) - 2200) & (2 * (v53 + 10))) && v53 != 1572724726;
  v56 = (uint64_t (*)(void))(*(_QWORD *)(v51 + 8 * ((16 * v55) | (32 * v55) | v49)) - 12);
  LODWORD(STACK[0x244]) = -42899;
  return v56();
}

#error "19C5DA18C: call analysis failed (funcsize=7081)"

void sub_19C5DA190()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 132) = LODWORD(STACK[0x248]) ^ 0x601436F6;
  *(_DWORD *)(v0 - 128) = LODWORD(STACK[0x250]) ^ 0x1CECFE7C;
  *(_DWORD *)(v0 - 120) = LODWORD(STACK[0x254]) ^ 0x126F78F;
  *(_DWORD *)(v0 - 124) = LODWORD(STACK[0x24C]) ^ 0xB511E5AF;
  JUMPOUT(0x19C5D779CLL);
}

uint64_t sub_19C5DA1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,uint64_t a48,int a49)
{
  int v49;
  uint64_t v50;

  return ((uint64_t (*)(void))(*(_QWORD *)(v50
                                        + 8
                                        * (v49 ^ (61
                                                * (((a49 - ((a47 + 1747567540) & 0xE9856306) + 775105832) ^ 0x8B3EC720)
                                                 + 1954529280
                                                 + ((2 * (a49 - ((a47 + 1747567540) & 0xE9856306) + 775105832)) & 0xFFF8ED46 ^ 0xE9806106) != 1954297507))))
                            - 8))();
}

uint64_t sub_19C5DA2B0()
{
  unsigned int v0;
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v7 = (v1 - 1);
  v8 = (v7 | ((unint64_t)(v7 < v0) << 32)) - 1954297507;
  v9 = v8 & (((v3 - 90562688) & 0x565DBEF) - 318);
  *(_BYTE *)(v4 + v8) ^= *(_BYTE *)(*(_QWORD *)(v6 + 8 * (v3 ^ 0x536)) + v9 - 4) ^ *(_BYTE *)(*(_QWORD *)(v6 + 8 * (v3 - 1253))
                                                                                              + v9
                                                                                              - 2) ^ (119 * v9) ^ *(_BYTE *)(v9 + *(_QWORD *)(v6 + 8 * (v3 ^ 0x5BA)) + 4) ^ 0x45;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((((_DWORD)v7 != v0) * v2) ^ v3)) - 8))();
}

void sub_19C5DA364()
{
  int v0;
  int v1;
  uint64_t v2;

  if (v0 == 1988838767)
    v1 = 480950058;
  else
    v1 = -480908046;
  *(_DWORD *)(v2 + 8) = v1;
}

uint64_t sub_19C5DA3C8(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(qword_1E3D5F9B0[(935 * (*(_DWORD *)(a2 + 4) == 1055960902)) ^ 0x58Eu] - 12))();
}

uint64_t sub_19C5DA418(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  char v4;

  v3 = (**(_BYTE **)(a2 + 8) != 0) ^ (((v2 + 118) ^ 0x8E) - 110);
  if (**(_BYTE **)(a2 + 8))
    v4 = 53;
  else
    v4 = 51;
  *(_BYTE *)(a1 + 88) = v3 + v4;
  return 0;
}

uint64_t sub_19C5DA45C()
{
  return 4294925278;
}

void sub_19C5DA464(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = 1575213817 * (a1 ^ 0x8D65B0CC);
  v2 = *(_DWORD *)(a1 + 52) ^ v1;
  v3 = *(_DWORD *)(a1 + 32) - v1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 48) + v1;
  v7 = 402930427 * ((2 * (&v8 & 0x2BDEBB88) - &v8 + 1411466359) ^ 0x4E98B8CA);
  v8 = *(_QWORD *)a1;
  v13 = v4;
  v14 = v8;
  v11 = v5;
  v15 = v2 - 114530353 + v7;
  v9 = v6 - 371907500 + v7;
  v12 = v3 + 1603415373 + v7;
  sub_19C61D318((uint64_t)&v8);
  __asm { BR              X8 }
}

uint64_t sub_19C5DA59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, unsigned int a12, char a13, int a14, int a15, uint64_t a16)
{
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v24 = *(_BYTE *)(v16 + 56) ^ v18;
  v25 = (((&a11 ^ 0x8F83531B | 0x5C4E858B)
        - (&a11 ^ 0x8F83531B)
        + ((&a11 ^ 0x8F83531B) & 0xA3B17A70)) ^ 0x5EA8665C)
      * v21;
  a16 = v23;
  a12 = v22 + 234347603 + v25;
  a13 = (((&a11 ^ 0x1B | 0x8B)
        - (&a11 ^ 0x1B)
        + ((&a11 ^ 0x1B) & 0x70)) ^ 0x5C)
      * v21
      + (v24 ^ 0xC8)
      + ((2 * v24) & 0x9F ^ 0xE)
      + 56;
  a15 = v20 - v25 - 532;
  a11 = &STACK[0x6C729AF2542A6DF3];
  sub_19C5AEE90((uint64_t)&a11);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19
                                                                                         + 8
                                                                                         * ((1837
                                                                                           * (a14 == v17 + v20 + 1297 - 2019)) ^ v20)))(v26, v27, v28, v29, v30, v31);
}

uint64_t sub_19C5DA67C()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ (4076 * ((v2 - 138580284) > 0xFFFFFFFD))))
                            - ((v0 - 1491) | 0x4C2u)
                            + 1734))();
}

void sub_19C5DA6BC(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  *(_DWORD *)(a1 - 0x143DED155B0DEE84) = v2 + 1;
  *(_DWORD *)(v1 + 60) = 480950058;
}

void sub_19C5DA854(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 ^ (1001500783 * ((((2 * (_DWORD)a1) | 0x16D4037A) - (_DWORD)a1 + 1955987011) ^ 0xC1DEFE09));
  __asm { BR              X9 }
}

uint64_t sub_19C5DA92C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((((109 * (v0 ^ 0x389)) ^ (v0 - 709)) * (v1 == 0)) ^ v0)) - 4))();
}

uint64_t sub_19C5DA970@<X0>(uint64_t (*a1)(int *)@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;

  v4 = 1431787901 * (((&v6 | 0x6D5B63BD) + (~&v6 | 0x92A49C42)) ^ 0x46CBC96B);
  v10 = v4 + 534556899;
  v9 = v3;
  v6 = (v1 + 598) ^ v4;
  v7 = 0x566016E7416088D8;
  v8 = 1564105161 - v4;
  result = a1(&v6);
  *(_DWORD *)(v2 + 24) = *(_DWORD *)(v3 - 0x23F2B20168D9FBDLL);
  return result;
}

void sub_19C5DB164(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 4) + 291962093 * ((2 * (a1 & 0x63ADB305) - a1 - 1672327942) ^ 0x8DA041B0);
  __asm { BR              X9 }
}

uint64_t sub_19C5DB21C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((21
                                * (((593 * ((a1 - 615) ^ 0xE2) - 1185) & (1 - *(_DWORD *)(v2 - 0x23F2B20168D9FC1))) == ((a1 - 615) ^ 0xE2) - 2)) | (a1 - 615))))();
}

uint64_t sub_19C5DB274@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v2
                                                              + 8
                                                              * ((((*(unsigned int *)(v3 - 0x23F2B20168D9FC9) | ((unint64_t)(*(unsigned int *)(v3 - 0x23F2B20168D9FC9) < 0x6C20E170uLL) << 32)) == 1814094192)
                                                                * (((a2 - 40880643) & 0x26FCBEF) - 399)) | (a2 + 1279)))
                                                  - 8))(a1, *(_QWORD *)(v3 - 0x23F2B20168D9FD5));
}

void sub_19C5DB2FC(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int8x16_t v20;
  int64x2_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int8x16_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int8x16_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int64x2_t v75;
  _BYTE v76[144];
  int8x16x4_t v77;

  v6 = (v2 - 97) | 2;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(v3 + 8 * ((v2 - 442) ^ 0x261)))(**(unsigned int **)(v3 + 8 * ((v2 - 442) ^ 0x39B)), a2, *(_DWORD *)(v5 - 0x23F2B20168D9FCDLL) + (v6 ^ 0x93DF1A32));
  v7 = vdupq_n_s64(((unint64_t)v76 ^ 0x6DFFBFF5FBEBB7A9)- 0x130200120490300+ ((2 * (_QWORD)v76) & 0xDBFF7FEBF7D76F50));
  v8 = vaddq_s64(v7, (int64x2_t)xmmword_19CAED660);
  v9 = vaddq_s64(v7, (int64x2_t)xmmword_19CAED670);
  v10 = vaddq_s64(v7, (int64x2_t)xmmword_19CAED680);
  v11 = vaddq_s64(v7, (int64x2_t)xmmword_19CAED690);
  v12 = vaddq_s64(v7, (int64x2_t)xmmword_19CAED650);
  v13 = vaddq_s64(v7, (int64x2_t)xmmword_19CAEC290);
  v14 = vaddq_s64(v7, (int64x2_t)xmmword_19CAEC2A0);
  v15 = vaddq_s64(v7, (int64x2_t)xmmword_19CAE7980);
  v74 = (int8x16_t)vdupq_n_s64(0xBAuLL);
  v75 = vdupq_n_s64(0x9330600B245D4B57);
  v16 = (int8x16_t)vdupq_n_s64(0xC5F27013C91F8F1uLL);
  v17 = (int8x16_t)vdupq_n_s64(1uLL);
  v18 = vdupq_n_s64(0xC5F27013C91F8F0uLL);
  v19 = vdupq_n_s64(0x9330600B245D4B68);
  v20 = (int8x16_t)vdupq_n_s64(0x8EuLL);
  v21 = vdupq_n_s64(0x6AuLL);
  v22 = (int8x16_t)vaddq_s64(v12, v75);
  v23 = (int8x16_t)vaddq_s64(v13, v75);
  v24 = (int8x16_t)vaddq_s64(v15, v75);
  v25 = (int8x16_t)vaddq_s64(v14, v75);
  v26 = (int8x16_t)vaddq_s64(v8, v75);
  v27 = (int8x16_t)vaddq_s64(v9, v75);
  v28 = (int8x16_t)vaddq_s64(v10, v75);
  v29 = (int8x16_t)vaddq_s64(v11, v75);
  v30 = v14;
  v31 = v12;
  v32 = v10;
  v33 = v8;
  v34 = (int64x2_t)veorq_s8(v29, v74);
  v35 = v11;
  v36 = v9;
  v37 = (int64x2_t)veorq_s8(v28, v74);
  v38 = (int64x2_t)veorq_s8(v27, v74);
  v39 = (int64x2_t)veorq_s8(v26, v74);
  v40 = (int64x2_t)veorq_s8(v25, v74);
  v41 = (int64x2_t)veorq_s8(v24, v74);
  v42 = (int64x2_t)veorq_s8(v23, v74);
  v43 = (int64x2_t)veorq_s8(v22, v74);
  v44 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v34, v16), vandq_s8(v29, v17));
  v45 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v37, v16), vandq_s8(v28, v17));
  v46 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v38, v16), vandq_s8(v27, v17));
  v47 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v39, v16), vandq_s8(v26, v17));
  v48 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v40, v16), vandq_s8(v25, v17));
  v49 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v41, v16), vandq_s8(v24, v17));
  v50 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v42, v16), vandq_s8(v23, v17));
  v51 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v43, v16), vandq_s8(v22, v17));
  v52 = vsubq_s64(v43, vaddq_s64(v51, v51));
  v53 = (int8x16_t)vaddq_s64(vsubq_s64(v39, vaddq_s64(v47, v47)), v18);
  v54 = (int8x16_t)vaddq_s64(vsubq_s64(v42, vaddq_s64(v50, v50)), v18);
  v55 = veorq_s8((int8x16_t)vaddq_s64(v52, v18), (int8x16_t)v18);
  v56 = veorq_s8(v54, (int8x16_t)v18);
  v57 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v41, vaddq_s64(v49, v49)), v18), (int8x16_t)v18);
  v58 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v40, vaddq_s64(v48, v48)), v18), (int8x16_t)v18);
  v59 = veorq_s8(v53, (int8x16_t)v18);
  v60 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v38, vaddq_s64(v46, v46)), v18), (int8x16_t)v18);
  v61 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v37, vaddq_s64(v45, v45)), v18), (int8x16_t)v18);
  v62 = veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v34, vaddq_s64(v44, v44)), v18), (int8x16_t)v18);
  v63 = vaddq_s64(v31, v19);
  v64 = vaddq_s64(v35, v19);
  v64.i64[0] *= v62.i64[0];
  v64.i64[1] *= v62.i64[1];
  v65 = vaddq_s64(v32, v19);
  v61.i64[0] *= v65.i64[0];
  v61.i64[1] *= v65.i64[1];
  v66 = vaddq_s64(v36, v19);
  v46.i64[0] = v60.i64[0] * v66.i64[0];
  v46.i64[1] = v60.i64[1] * v66.i64[1];
  v67 = vaddq_s64(v33, v19);
  v67.i64[0] *= v59.i64[0];
  v67.i64[1] *= v59.i64[1];
  v68 = vaddq_s64(v30, v19);
  v58.i64[0] *= v68.i64[0];
  v58.i64[1] *= v68.i64[1];
  v69 = vaddq_s64(v15, v19);
  v57.i64[0] *= v69.i64[0];
  v57.i64[1] *= v69.i64[1];
  v70 = vaddq_s64(v13, v19);
  v70.i64[0] *= v56.i64[0];
  v70.i64[1] *= v56.i64[1];
  v60.i64[0] = v55.i64[0] * v63.i64[0];
  v60.i64[1] = v55.i64[1] * v63.i64[1];
  v71 = vsubq_s64(v46, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v46, v46), v20));
  v77.val[1] = (int8x16_t)vaddq_s64(vsubq_s64(v58, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v58, v58), v20)), v21);
  v77.val[0] = (int8x16_t)vaddq_s64(vsubq_s64(v57, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v57, v57), v20)), v21);
  v77.val[2] = (int8x16_t)vaddq_s64(vsubq_s64(v70, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v70, v70), v20)), v21);
  v77.val[3] = (int8x16_t)vaddq_s64(vsubq_s64(v60, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v60, v60), v20)), v21);
  v57.i64[0] = vqtbl4q_s8(v77, (int8x16_t)xmmword_19CAECB80).u64[0];
  v77.val[0] = (int8x16_t)vaddq_s64(vsubq_s64(v64, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v64, v64), v20)), v21);
  v77.val[1] = (int8x16_t)vaddq_s64(vsubq_s64(v61, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v61, v61), v20)), v21);
  v77.val[2] = (int8x16_t)vaddq_s64(v71, v21);
  v77.val[3] = (int8x16_t)vaddq_s64(vsubq_s64(v67, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v67, v67), v20)), v21);
  v57.i64[1] = vqtbl4q_s8(v77, (int8x16_t)xmmword_19CAECB80).u64[0];
  v67.i64[0] = 0xDDDDDDDDDDDDDDDDLL;
  v67.i64[1] = 0xDDDDDDDDDDDDDDDDLL;
  v72 = vaddq_s8((int8x16_t)v57, (int8x16_t)v67);
  v67.i64[0] = 0x4747474747474747;
  v67.i64[1] = 0x4747474747474747;
  v73 = vrev64q_s8(veorq_s8(v72, (int8x16_t)v67));
  *(int8x16_t *)(v5 - 0x23F2B20168D9FC5) = vextq_s8(v73, v73, 8uLL);
  __asm { BR              X12 }
}

void sub_19C5DB8E4()
{
  JUMPOUT(0x19C5DB5A8);
}

void sub_19C5DB910()
{
  int v0;
  uint64_t v1;

  (*(void (**)(void))(v1 + 8 * (v0 - 648)))();
  JUMPOUT(0x19C5DB928);
}

uint64_t sub_19C5DB954(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  uint64_t (*v4)(uint64_t);
  _BYTE v6[8];

  v2 = (unint64_t)&v6[qword_1EE425000 - qword_1EE424C90];
  qword_1EE424C90 = 2004212711 * (v2 - 0x7AEADA820E769987);
  qword_1EE425000 = 2004212711 * (v2 ^ 0x7AEADA820E769987);
  v3 = *(_DWORD *)(a2 + 4);
  v4 = off_1E3D64110[((-25 * ((qword_1EE425000 - 25 * (v2 + 121)) ^ 0x87)) ^ byte_19CAFC490[byte_19CB2C730[(-25 * ((qword_1EE425000 - 25 * (v2 + 121)) ^ 0x87))] ^ 0xAB])
                   - 142];
  if (v3 == 1055960904)
    __asm { BR              X16 }
  if (v3 == 1055960911)
    __asm { BR              X17 }
  return 4294925278;
}

void sub_19C5DC03C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_19C5DC09C()
{
  int v0;
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1 + 8 * ((813 * (v0 != 1055960901)) ^ 0x40Au)))();
}

uint64_t sub_19C5DC0C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;

  v4 = v3 - (**(_BYTE **)(a2 + 8) == 0);
  *(_DWORD *)(*(_QWORD *)(a1 + 96) + 800) = 1560277383;
  *(_DWORD *)(*(_QWORD *)(a1 + 96) + 804) = 1323025765;
  *(_QWORD *)(*(_QWORD *)(a1 + 96) + 808) = *(_QWORD *)(a1 + 96) + 816;
  v5 = *(_QWORD *)(a1 + 96) + 0x26866D3AFFDFE339;
  v6 = *(_QWORD *)(a2 + 8) + (*(_DWORD *)(a2 + 4) - v4);
  v7 = 545147329 * ((2 * (&v9 & 0x3FC61BC8) - &v9 - 1069947856) ^ 0x60CD245C);
  v12 = v7 ^ 0x298;
  v9 = (v4 + 2514849) ^ v7;
  v10 = v5;
  v13 = v6;
  ((void (*)(int *))(*(_QWORD *)(a3 + 376) - 4))(&v9);
  return (v11 - 1824118303);
}

void TCvO8ZqLN8g(int a1)
{
  unint64_t v1;
  unsigned int v2;
  char v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = (qword_1EE425000 + qword_1EE425AA8) ^ (unint64_t)&v3;
  qword_1EE425AA8 = 2004212711 * v1 + 0x7AEADA820E769987;
  qword_1EE425000 = 2004212711 * (v1 ^ 0x7AEADA820E769987);
  v2 = 1431787901
     * (((&v4 | 0x2665ED49) - &v4 + (&v4 & 0xD99A12B0)) ^ 0xDF5479E);
  v4 = v2 + 1358;
  v5 = (a1 ^ 0x5A9FFDEB) + ((2 * a1) & 0xB53FFBD6) - v2 - 172352;
  ((uint64_t (*)(uint64_t))((char *)off_1E3D64110[((-25
                                                                                          * ((qword_1EE425000
                                                                                            + -25 * v1
                                                                                            - 121) ^ 0x87)) ^ byte_19CB16790[byte_19CB02600[(-25 * ((qword_1EE425000 + -25 * v1 - 121) ^ 0x87))] ^ 0x8E])
                                                         + 138]
                                   - 4))((uint64_t)&v4);
  v5 = (583844137 * ((&v4 & 0xAE675C7A | ~(&v4 | 0xAE675C7A)) ^ 0x41461E08)) ^ 0xD9A13099;
  sub_19C61D0E8((int *)&v4);
  __asm { BR              X8 }
}

uint64_t sub_19C5DC3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  a15 = v17 ^ (((&a14 + 82000299 - 2 * ((unint64_t)&a14 & 0x4E339AB)) ^ 0x143D8426) * v16);
  v20 = sub_19C61D0E8(&a14);
  return (*(uint64_t (**)(uint64_t))(v18 + 8 * ((1383 * (a14 == v15)) ^ v19)))(v20);
}

uint64_t sub_19C5DC418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, int a15, unint64_t *a16)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  a16 = &STACK[0x1BB16424708BA6B];
  a14 = 522 - 653146051 * ((((2 * &a14) | 0xB9AF18DC) - &a14 - 1557630062) ^ 0xF6C3398C);
  sub_19C5B7A1C(&a14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17
                                                                                                  + 8 * ((1762 * (a15 == v16)) ^ 0x26C)))(v18, v19, v20, v21, v22, v23, v24);
}

uint64_t sub_19C5DC4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, int a16, unsigned int a17)
{
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = 545147329 * ((&a14 + 405260281 - 2 * ((unint64_t)&a14 & 0x1827C7F9)) ^ 0xB8D30795);
  a15 = a11;
  a14 = v21 + 374;
  a17 = v17 + v21 - (v20 & 0xB17EA958) - 658549588;
  sub_19C612A68((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 + 8 * ((1616 * (a16 == v18)) ^ 0x26Fu)) - 12))(v22, v23, v24, v25, v26, v27, v28, v29);
}

uint64_t sub_19C5DC578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, uint64_t a15, unsigned int a16, int a17, int a18, unsigned int a19)
{
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v22 = 1575213817
      * (((&a14 | 0x9B34CED5) - &a14 + (&a14 & 0x64CB3128)) ^ 0x16517E19);
  a18 = (v20 - 871892209) ^ v22;
  a19 = 316595923 - v22;
  a16 = 1783734812 - v22;
  a14 = &STACK[0x43A4C4D315BFAF75];
  a15 = a11;
  v23 = sub_19C61CA08((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * ((1030 * (a17 == v19)) ^ v20))
                                          - ((v20 + 2142820493) & 0x76F ^ 0x260)))(v23);
}

uint64_t sub_19C5DC64C()
{
  void (*v0)(unint64_t **);
  unsigned int v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unsigned int v11;

  v11 = (v4 - 175) ^ (1001500783
                    * ((((2 * (&v9 ^ 0x56BE5806)) | 0x6D2F2364)
                      - (&v9 ^ 0x56BE5806)
                      + 1231580750) ^ 0xAA9D3600));
  v9 = v8;
  v10 = &STACK[0x143DED155B0DEDE0];
  ((void (*)(unint64_t **))(*(_QWORD *)(v2 + 8 * (v4 - 411)) - 12))(&v9);
  v10 = v8;
  LODWORD(v9) = v4 + (((&v9 | 0xC6262F84) - (&v9 & 0xC6262F84)) ^ 0xD7D422CE) * v3 - 354;
  sub_19C5F1B8C((uint64_t)&v9);
  v5 = HIDWORD(v9);
  v10 = v8;
  HIDWORD(v9) = v4 - (((&v9 | 0x5B4B5379) + (~&v9 | 0xA4B4AC86)) ^ 0x4AB95E32) * v3 + 216;
  v0(&v9);
  HIDWORD(v9) = 10 * (v4 ^ 0x251)
              - ((1141554878 - (&v9 | 0x440ABEBE) + (&v9 | 0xBBF54141)) ^ 0xAA074C0B) * v3
              + 219;
  v10 = v7;
  v0(&v9);
  return v5 ^ v1;
}

void sub_19C5DC800(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v1 = 1980347521 * ((-2 - ((a1 | 0xDCB4277B) + (~(_DWORD)a1 | 0x234BD884))) ^ 0x9AAF9879);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x23F2B20168D9FC9) + 354413240;
  v3 = *(_DWORD *)(a1 + 16) - v1 + 1383694050;
  v4 = (v3 < 0x8140CC28) ^ (v2 < 0x8140CC28);
  v5 = v2 < v3;
  if (v4)
    v6 = v3 < 0x8140CC28;
  else
    v6 = v5;
  __asm { BR              X12 }
}

uint64_t sub_19C5DC910()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((174 * ((*(_BYTE *)(v1 - 0x23F2B20168D9FC1) & 1) == 0)) ^ v0))
                            - (((v0 - 1864) | 0x2D6) ^ (11 * (v0 ^ 0x731u)) ^ 0x129)))();
}

void sub_19C5DC96C()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 0x23F2B20168D9FBDLL) = -480908034;
}

void sub_19C5DCFB0(uint64_t a1)
{
  int v1;

  v1 = 1431787901 * ((a1 - 828830163 - 2 * (a1 & 0xCE990E2D)) ^ 0xE509A4FA);
  __asm { BR              X11 }
}

uint64_t sub_19C5DD050@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((*(_QWORD *)(*(_QWORD *)(v1 + 8 * (v2 - 1124))
                                                       + 8 * (a1 + 97 * (v2 ^ 0x58Bu))
                                                       + 4) != 0)
                                          * (v2 ^ 0x700)) ^ v2))
                            - 8))();
}

uint64_t sub_19C5DD090@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((63 * (*(_QWORD *)(a1 + 48) != 0)) ^ v1 ^ 0x618)) - 4))();
}

uint64_t sub_19C5DD0C8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(void);
  int v4;

  v4 = (v0 - 588077998) & 0x230D59BE;
  v3();
  *(_QWORD *)(*(_QWORD *)v1 + 48) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((74 * (*(_QWORD *)(*(_QWORD *)v1 + 24) == 0)) ^ v4))
                            - ((v4 + 828)
                             + ((2 * v4) ^ 0xFFFFFFFFFFFFF842))))();
}

uint64_t sub_19C5DD148@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  *(_QWORD *)(a1 + 24) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((*(_QWORD *)(*(_QWORD *)v1 + 32) != 0) * (v3 - 776)) ^ v3))
                            - 8))();
}

uint64_t sub_19C5DD178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;

  *(_QWORD *)(v0 + 32) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((1103 * ((((v3 + 484) ^ (*(_QWORD *)(*(_QWORD *)v1 + 40) == 0)) & 1) == 0)) ^ v3))
                            - 8))();
}

uint64_t sub_19C5DD1B4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 40) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((162 * (((a1 + 71) ^ (*v2 == 0)) & 1)) ^ a1))
                            - 12))();
}

void sub_19C5DD1E8()
{
  _QWORD *v0;

  *v0 = 0;
}

void sub_19C5DD2E4()
{
  unint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = qword_1EE425030 ^ (unint64_t)&v2 ^ qword_1EE425000;
  qword_1EE425030 = 2004212711 * v0 + 0x25022B4C6E0E05D1;
  qword_1EE425000 = 2004212711 * (v0 ^ 0x7AEADA820E769987);
  *(_DWORD *)off_1E3D64110[((-25 * ((qword_1EE425000 + -25 * v0 - 47) ^ 0x87)) ^ byte_19CB16790[byte_19CB02600[(-25 * ((qword_1EE425000 + -25 * v0 - 47) ^ 0x87))] ^ 0xFC])
                         - 158] = 480950058;
  v1 = ((uint64_t (*)(uint64_t, uint64_t))off_1E3D64110[((-25
                                                                                               * ((qword_1EE425000
                                                                                                 - qword_1EE425030) ^ 0x87)) ^ byte_19CAFC190[byte_19CB2C430[(-25 * ((qword_1EE425000 - qword_1EE425030) ^ 0x87))] ^ 0x95])
                                                              + 194])(512, 1509315540);
  *(_QWORD *)((char *)off_1E3D64110[((-25 * (qword_1EE425030 ^ 0x87 ^ qword_1EE425000)) ^ byte_19CAFC190[byte_19CB2C430[(-25 * (qword_1EE425030 ^ 0x87 ^ qword_1EE425000))] ^ 0x67])
                                  - 32]
            - 4) = v1;
  __asm { BR              X9 }
}

void sub_19C5DD480()
{
  int v0;
  _DWORD *v1;

  *v1 = v0 + 105;
}

#error "19C5DD97C: call analysis failed (funcsize=221)"

uint64_t sub_19C5DD980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t, uint64_t))
{
  int v12;
  int v13;
  uint64_t (*v14)(void);
  unsigned int *v15;
  int v16;
  int v17;
  unint64_t v18;
  unsigned int v19;

  v16 = v12 + 430;
  a12(a11, 2965982036);
  v17 = v14();
  v18 = STACK[0x270];
  v19 = v17 - 1012513372 - ((v16 - 2025027403) & (2 * v17));
  *v15 = v19;
  v15[1] = 1
         - ((((v16 - 643) | 0x380)
           + 2
           * (((1812433253 * (v19 ^ 0xC3A645A7 ^ (v19 >> 30))) ^ 0xFFDAE6EF)
            + (((v19 ^ 0xC3A645A7 ^ (v19 >> 30)) * v13) & 0xFFB5CDDE)
            + 1)
           + 4861586) & 0x874C8B48)
         + ((1812433253 * (v19 ^ 0xC3A645A7 ^ (v19 >> 30))) ^ 0xFFDAE6EF)
         + (((v19 ^ 0xC3A645A7 ^ (v19 >> 30)) * v13) & 0xFFB5CDDE)
         - 1010082123;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 + 8 * (v16 ^ 5))
                                                                                                - 8))(1812433253, 482402199, 4292536047, 4290104798, 4861586, 2802482975, 3284885173);
}

void sub_19C5DDA90()
{
  JUMPOUT(0x19C5DDA14);
}

uint64_t sub_19C5DDAA8(uint64_t a1, double a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int8x16_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int32x4_t a48,int8x16_t a49,int8x16_t a50,int32x4_t a51,int8x16_t a52,int8x16_t a53,int8x16_t a54,int32x4_t a55,int8x16_t a56)
{
  uint64_t v56;
  int v57;
  uint64_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int8x16_t v66;

  v59 = (int8x16_t)vld1q_dup_f32((const float *)v58);
  v60.i64[0] = 0x8000000080000000;
  v60.i64[1] = 0x8000000080000000;
  a3.i64[0] = *(_QWORD *)(v58 + 4);
  a3.i32[2] = *(_DWORD *)(v58 + 12);
  v61 = vextq_s8(v59, a3, 0xCuLL);
  v62 = a3;
  v62.i32[3] = *(_DWORD *)(v58 + 4 * ((22 * ((v57 - 33) ^ 0x2AB553E0)) ^ 0xC4Eu) - 4480);
  v63 = (int8x16_t)vaddq_s32((int32x4_t)veorq_s8(vandq_s8(v61, v60), a56), a55);
  v64 = (int32x4_t)veorq_s8(vandq_s8(v62, a54), a53);
  v65 = (int32x4_t)veorq_s8(vorrq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v64, v64), a52), v64), a51), vandq_s8(v63, v60)), a50);
  v66.i32[0] = *(_DWORD *)(v56 + 4 * (*(_DWORD *)(v58 + 4) & 1));
  v66.i32[1] = *(_DWORD *)(v56 + 4 * (*(_DWORD *)(v58 + 8) & 1));
  v66.i32[2] = *(_DWORD *)(v56 + 4 * (*(_DWORD *)(v58 + 12) & 1));
  v66.i32[3] = *(_DWORD *)(v56 + 4 * (v62.i8[12] & 1));
  *(int8x16_t *)v58 = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v58 + 1588), v66), a17), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32(v65, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v65, v65), a49)), a48), 1uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 88 * ((v57 - 33) ^ 0x2AB553E0)) - 4))();
}

uint64_t sub_19C5DE474@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, int a9@<W8>)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;

  v17 = v16 + 4 * (v9 + v11);
  v18 = *(_DWORD *)(v17 + 4056);
  v19 = (((a5 & (2 * (v18 & 0x7FFFFFFE ^ a4))) - (v18 & 0x7FFFFFFE ^ a4) + a6) | ((v10 & 0x80000000 ^ a2) + a3) & 0x80000000) ^ a7;
  *(_DWORD *)(v16 + 4 * (v9 + v11 + ((a9 - 403) | 0x124u))) = *(_DWORD *)(v17 + 5640) ^ *(_DWORD *)(v12 + 4 * (v18 & 1)) ^ ((v19 - (a8 & (2 * v19)) + v13) >> 1) ^ v14;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((428 * (v9 + 1 == v15 + 3)) ^ a9)) - 4))();
}

uint64_t sub_19C5DE510(uint64_t a1, double a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int8x16_t a31,int8x16_t a32,int8x16_t a33,int8x16_t a34,int8x16_t a35,int8x16_t a36,int32x4_t a37,int8x16_t a38,int8x16_t a39)
{
  int v39;
  uint64_t v40;
  uint64_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int v50;
  const float *v51;
  int8x16_t v52;
  int32x4_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int32x4_t v57;
  int8x16_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int8x16_t v61;

  v50 = v39 - 61;
  v51 = (const float *)(v41 + 908);
  v52 = (int8x16_t)vld1q_dup_f32(v51);
  v53.i64[0] = 0x100000001;
  v53.i64[1] = 0x100000001;
  a3.i64[0] = *(_QWORD *)(v41 + 912);
  a3.i32[2] = *(_DWORD *)(v41 + 920);
  v54 = vextq_s8(v52, a3, 0xCuLL);
  v55 = a3;
  v55.i32[3] = *(_DWORD *)(v41 + 924);
  v56 = (int8x16_t)vaddq_s32((int32x4_t)veorq_s8(vbicq_s8(a39, vandq_s8(v54, v48)), a38), a37);
  v57 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)veorq_s8(vandq_s8(v55, a35), a34), (int32x4_t)veorq_s8(vandq_s8(v55, a36), a33)), v53), a32);
  v58 = (int8x16_t)vaddq_s32(vsubq_s32(v57, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v57, v57), a31)), v42);
  v59 = (int32x4_t)vorrq_s8(veorq_s8(v58, v44), veorq_s8(v56, v43));
  v60 = (int32x4_t)veorq_s8(vandq_s8((int8x16_t)v59, v45), vandq_s8(v58, v49));
  v61.i32[0] = *(_DWORD *)(v40 + 4 * (*(unsigned int *)(v41 + 912) & ((73 * (v50 ^ 0x3B3u)) ^ 0x322)));
  v61.i32[1] = *(_DWORD *)(v40 + 4 * (*(_DWORD *)(v41 + 916) & 1));
  v61.i32[2] = *(_DWORD *)(v40 + 4 * (*(_DWORD *)(v41 + 920) & 1));
  v61.i32[3] = *(_DWORD *)(v40 + 4 * (v55.i8[12] & 1));
  *(int8x16_t *)(v41 + 908) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)v41, v61), v47), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32(v59, vaddq_s32(v60, v60)), v46), 1uLL));
  return (*(uint64_t (**)(void))(a1 + 8 * (v50 ^ 0x4D)))();
}

void sub_19C5DE63C()
{
  JUMPOUT(0x19C5DE54CLL);
}

uint64_t sub_19C5DE648@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  int v3;
  _DWORD *v4;
  unsigned int v5;
  unsigned int v6;

  v5 = ((a2 ^ (v3 - 797))
      + (*v4 & 0x7FFFFFFE ^ 0x27638592)
      - ((2 * (*v4 & 0x7FFFFFFE ^ 0x27638592)) & 0xD5DBDD64)
      - 1070032173) ^ 0x2E292E97;
  v6 = (1892749714 - (v5 | 0x70D11192) + (v5 | 0x8F2EEE6D)) ^ 0x2F2FEE7F;
  v4[623] = v4[396] ^ *(_DWORD *)(v2 + 4 * (*v4 & 1)) ^ (((v6 | ~((v4[623] | 0x7FFFFFFE) - 1770418722) & 0x80000000)
                                                          - ((2 * v6) & 0xAFE85DDE)
                                                          - 671863057) >> 1) ^ 0xD07056A0;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((27 * (LODWORD(STACK[0x294]) > 0x26F)) ^ a2)) - 12))();
}

uint64_t sub_19C5DE740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14)
{
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  LODWORD(STACK[0x294]) = 0;
  v18 = LODWORD(STACK[0x294])++;
  *v15 = v18 + 1830967845;
  v19 = (*v16 + 1426579590);
  v20 = (v14 + 95959859) ^ a14;
  *(_DWORD *)(v17 - 116) = v20 ^ 0x15;
  *(_DWORD *)(v17 - 112) = v20;
  *(_DWORD *)(v17 - 120) = a14;
  STACK[0x740] = v19 ^ a14;
  STACK[0x748] = a13;
  *(_DWORD *)(v17 - 128) = 1375860944 - a14 + v14;
  *(_DWORD *)(v17 - 152) = ((v14 + 95959859) ^ 0x9B) - a14;
  v21 = ((uint64_t (*)(uint64_t))STACK[0x278])(v17 - 152);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x270] + 8 * *(int *)(v17 - 124)) - 4))(v21);
}

uint64_t sub_19C5DE7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  _QWORD *a69;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int *v74;
  unint64_t v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;

  v75 = STACK[0x210];
  if (v71 >= 0x6C8286C9)
    v76 = *v74 + 1;
  else
    v76 = v72;
  *v74 = v76;
  v77 = v70 ^ (v70 >> 11);
  v78 = (((v77 << (a68 - 72)) ^ 0xDF18B600) - ((2 * ((v77 << (a68 - 72)) ^ 0xDF18B600)) & 0x4FCBB500) + 669375136) & 0x9D2C5680 ^ 0xD000480;
  v79 = (((2 * v78) & 0x1A088D00) - v78 + 1916285231) ^ 0x70BC390F;
  v80 = (-1315297343 - (v79 | 0xB19A27C1) + (v79 | 0x4E65D83E)) ^ v77;
  v81 = ((v80 << 15) ^ 0xDBB90000) - ((2 * ((v80 << 15) ^ 0xDBB90000)) & 0x44480000) - 1574668208;
  v82 = ((v81 & 0xEFC60000 ^ 0x67440000)
       + (v81 & 0xC6440000 ^ 0x8018D680)
       - ((v81 & 0xEFC60000 ^ 0x67440000) & 0xC6440000)) ^ 0x830C0C82;
  v83 = (((2 * v82) & 0x63551404) - v82 + 1314157925) ^ v80;
  *(_DWORD *)(*a69 + v75 - 1405530684) ^= v83 ^ (v83 >> 18) ^ 0x493F0A5A;
  return ((uint64_t (*)(void))(*(_QWORD *)(v69 + 8 * ((v73 - 716525083) ^ (799 * (v75 - 1405530680 > 0x1FF)))) - 4))();
}

void sub_19C5DE9B8()
{
  unint64_t v0;

  STACK[0x210] = v0;
  JUMPOUT(0x19C5DD834);
}

void sub_19C5DE9C0()
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t (*v3)(uint64_t);
  int v4;
  _DWORD *v5;
  int v6;
  _DWORD **v7;
  _BYTE v9[1160];
  _BYTE *v10;

  v1 = (v6 + 1294098218);
  v2 = *v7;
  if (((((v6 + 1294098097) | 0x107u) ^ 0x104) & (unint64_t)*v7) == v1 - 121)
  {
    v3 = off_1E3D64110[v6 + 1294098379];
    if (!*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = v2;
      *(_DWORD *)off_1E3D64110[v6 + 1294098120] = 255;
      *v2 |= ~v2[*v2 & 0x3ELL] << 16;
      v2[4] |= ~v2[v2[4] & 0x3ELL] << 16;
      v2[8] |= ~v2[v2[8] & (v1 ^ 0x47)] << 16;
      v2[12] |= ~v2[v2[12] & 0x3ELL] << 16;
      v2[16] |= ~v2[v2[16] & 0x3ELL] << 16;
      v2[20] |= ~v2[v2[20] & 0x3ELL] << 16;
      v2[24] |= ~v2[v2[24] & 0x3ELL] << 16;
      v2[28] |= ~v2[v2[28] & 0x3ELL] << 16;
      v2[32] |= ~v2[v2[32] & 0x3ELL] << 16;
      v2[36] |= ~v2[v2[36] & 0x3ELL] << 16;
      v2[40] |= ~v2[v2[40] & 0x3ELL] << 16;
      v2[44] |= ~v2[v2[44] & 0x3ELL] << 16;
      v2[48] |= ~v2[v2[48] & 0x3ELL] << 16;
      v4 = v1 ^ 0x22D;
      v2[52] |= ~v2[v2[52] & 0x3ELL] << 16;
      v2[56] |= ~v2[v2[56] & 0x3ELL] << 16;
      v2[60] |= ~v2[v2[60] & 0x3ELL] << 16;
      sub_19C61D6B0(v9, 0, 0x400uLL);
      v10 = v9;
      __asm { BR              X12 }
    }
  }
  *v5 = -480908139;
}

uint64_t sub_19C5DED58@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((2032 * (v2 + 8 == ((a2 + 475) ^ 0x97F68CB ^ (v3 + a2 + 475 - 596)))) ^ (a2 + 475)))
                            - 4))();
}

uint64_t sub_19C5DEDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t (*a69)(uint64_t);
  _DWORD *a71;
  int v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;

  LODWORD(STACK[0x248]) = a5;
  STACK[0x6A8] = 0x325E20FFAB569020;
  LODWORD(STACK[0x290]) = *a71 - 1830967844;
  v74 = *v72;
  v75 = 653146051 * ((v73 - 152) ^ 0xAFF7EB9FAA14B5E2);
  *(_DWORD *)(v73 - 112) = v71 + 1776701486 - v75 + 35;
  *(_DWORD *)(v73 - 136) = v75 + v71 - 1089866925;
  *(_DWORD *)(v73 - 132) = v75;
  STACK[0x758] = 393913923 - v75;
  STACK[0x740] = v74 ^ v75;
  *(_DWORD *)(v73 - 128) = v71 + 1776701486 + v75;
  *(_DWORD *)(v73 - 124) = (v71 + 1776701540) ^ v75;
  v76 = a69(v73 - 152);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x270] + 8 * *(int *)(v73 - 152)) - 12))(v76);
}

uint64_t sub_19C5DEE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(unint64_t, uint64_t))
{
  int v12;
  unsigned int *v13;
  int v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v14 = (v12 - 2074267877) & 0x50ED7DFC;
  STACK[0x260] = a12(STACK[0x238], 2965982036);
  v15 = ((uint64_t (*)(void))STACK[0x200])();
  v16 = STACK[0x270];
  v17 = v15 - 1012513372 - ((v15 << ((v12 + 27) & 0xFC ^ 0xF9)) & 0x874C8B48);
  *v13 = v17;
  v18 = v17 ^ 0xC3A645A7 ^ (v17 >> 30);
  v19 = (1812433253 * v18) ^ (((v14 - 172) | 0x200) + 2145186691);
  v13[1] = v19
         + ((-670100790 * v18) & 0xFFB9EB9E)
         + 1137266646
         - ((2 * (v19 + ((-670100790 * v18) & 0xFFB9EB9E)) + 4592740) & 0x874C8B48);
  return (*(uint64_t (**)(void))(v16 + 8 * (v14 + 2)))();
}

void sub_19C5DEFA4()
{
  JUMPOUT(0x19C5DEF3CLL);
}

uint64_t sub_19C5DEFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;

  v7 = (int8x16_t)vld1q_dup_f32((const float *)v5);
  v8.i64[0] = 0x8000000080000000;
  v8.i64[1] = 0x8000000080000000;
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v6.i64[0] = *(_QWORD *)(v5 + 4);
  v6.i32[2] = *(_DWORD *)(v5 + 12);
  v10 = vextq_s8(v7, v6, 0xCuLL);
  v11 = v6;
  v11.i32[3] = *(_DWORD *)(v5 + 16);
  v12 = (int8x16_t)vaddq_s32((int32x4_t)veorq_s8((int8x16_t)vaddq_s32((int32x4_t)vandq_s8(v10, v8), vdupq_n_s32(0xFBE10DB9)), (int8x16_t)vdupq_n_s32(0x3BC19199u)), vdupq_n_s32(0x3C86E4B1u));
  v13 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32((int32x4_t)veorq_s8(vandq_s8(v11, (int8x16_t)vdupq_n_s32(0x7FFFFFFEu)), (int8x16_t)vdupq_n_s32(0xA597E05F)), v9), (int8x16_t)vdupq_n_s32(0xE4B8454A));
  v14 = (int32x4_t)veorq_s8(vorrq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v13, v13), (int8x16_t)vdupq_n_s32(0xD72B3C68)), v13), vdupq_n_s32(0x146A61CBu)), vandq_s8(v12, v8)), (int8x16_t)vdupq_n_s32(0x16E3817Bu));
  v15.i32[0] = *((_DWORD *)&STACK[0x6A8] + (*(_DWORD *)(v5 + 4) & 1));
  v15.i32[1] = *((_DWORD *)&STACK[0x6A8] + (*(_DWORD *)(v5 + 8) & 1));
  v15.i32[2] = *((_DWORD *)&STACK[0x6A8] + (*(_DWORD *)(v5 + 12) & 1));
  v15.i32[3] = *((_DWORD *)&STACK[0x6A8] + (v11.i8[12] & 1));
  *(int8x16_t *)v5 = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v5 + 1588), v15), (int8x16_t)vdupq_n_s32(0xCAB77657)), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32(v14, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v14, v14), (int8x16_t)vdupq_n_s32(0x878799DE))), vdupq_n_s32(0xC3C3CCEF)), 1uLL));
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a4 + 8 * ((716526902 - v4) ^ 0xD)) - 12))(223906557);
}

uint64_t sub_19C5DFA7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;

  v7 = v4 + v5;
  v8 = v4 + 1;
  v9 = *(_DWORD *)(v6 + 4 * (v8 + v5));
  v10 = (unsigned int *)(v6 + 4 * v7);
  LODWORD(v7) = (((2 * (((v9 & 0x7FFFFFFE ^ 0xA597E05F) - 1) ^ 0xE4B8454A)) & 0xD72B3C68)
               - (((v9 & 0x7FFFFFFE ^ 0xA597E05F) - 1) ^ 0xE4B8454A)
               + 342516171) | (((((379 * (a3 ^ 0x153) + 2147481753) & v3) - 69136967) ^ 0x3BC19199) + 1015473329) & 0x80000000;
  *v10 = v10[397] ^ *((_DWORD *)&STACK[0x6A8] + (v9 & 1)) ^ (((v7 ^ 0x16E3817B)
                                                            - ((2 * (v7 ^ 0x16E3817B)) & 0x878799DE)
                                                            - 1010578193) >> 1) ^ 0xCAB77657;
  return ((uint64_t (*)(void))(*(_QWORD *)(a2 + 8 * ((54 * (v8 == a1 + 3)) ^ a3)) - 12))();
}

uint64_t sub_19C5DFB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  const float *v8;
  int8x16_t v9;
  int8x16_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int32x4_t v17;
  int8x16_t v18;

  v8 = (const float *)(v6 + 908);
  v9 = (int8x16_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0x8000000080000000;
  v10.i64[1] = 0x8000000080000000;
  v11 = vdupq_n_s32(0xE6209BD7);
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  v7.i64[0] = *(_QWORD *)(STACK[0x240] + 4);
  v7.i32[2] = *(_DWORD *)(STACK[0x240] + 12);
  v13 = vextq_s8(v9, v7, 0xCuLL);
  v14 = v7;
  v14.i32[3] = *(_DWORD *)(STACK[0x240] + 16);
  v15 = veorq_s8(vandq_s8(v14, (int8x16_t)vdupq_n_s32(0x7FFFFFFEu)), (int8x16_t)vdupq_n_s32(0x6E25DF6u));
  v16 = (int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8(v15, (int8x16_t)vdupq_n_s32(0x19DF6428u)), (int32x4_t)vorrq_s8(v15, (int8x16_t)v11)), v11);
  v17 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)veorq_s8(vandq_s8(v16, (int8x16_t)vdupq_n_s32(0xF40E9CCE)), (int8x16_t)vdupq_n_s32(0xE0048885)), (int32x4_t)veorq_s8(vandq_s8(v16, (int8x16_t)vdupq_n_s32(0xBF16330u)), (int8x16_t)vdupq_n_s32(0x8916021u))), v12), (int8x16_t)vdupq_n_s32(0xB40E94DE));
  v18.i32[0] = *(_DWORD *)(v5 + 4 * (*(_DWORD *)(STACK[0x240] + 4) & ((v4 - 1206) ^ 0x2B0u)));
  v18.i32[1] = *(_DWORD *)(v5 + 4 * (*(_DWORD *)(STACK[0x240] + 8) & 1));
  v18.i32[2] = *(_DWORD *)(v5 + 4 * (*(_DWORD *)(STACK[0x240] + 12) & 1));
  v18.i32[3] = *(_DWORD *)(v5 + 4 * (v14.i8[12] & 1));
  *(int8x16_t *)STACK[0x240] = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(STACK[0x240] - 908), v18), (int8x16_t)vdupq_n_s32(0x8B8732FF)), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8((int8x16_t)v17, vbicq_s8(v10, v13)), (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v17, v17), (int8x16_t)vdupq_n_s32(0x83468B7E))), vdupq_n_s32(0x41A345BFu)), 1uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(a4 + 8 * v4) - 4))();
}

void sub_19C5DFD1C()
{
  JUMPOUT(0x19C5DFC48);
}

uint64_t sub_19C5DFD28@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  int v2;
  _DWORD *v3;
  int v4;

  v4 = ((2 * (*v3 & 0x7FFFFFFE ^ 0x3FCA86EC)) | 0x62C24754) - (*v3 & 0x7FFFFFFE ^ 0x3FCA86EC) + 1319033942;
  v3[623] = v3[396] ^ *((_DWORD *)&STACK[0x6A8] + (*v3 & 1)) ^ (((v4 ^ 0xCD0DE0E2 | ((((((a2 ^ (v2 - 655)) + 1430957088) & v3[623])
                                                                                       - 964686715) ^ 0xAF8A6C8F)
                                                                                     + ((a2 + 989820216) & 0xEFB5DBF6 ^ 0xA8817A17)) & 0x80000000)
                                                                 + 443322759
                                                                 - 2 * ((v4 ^ 0xCD0DE0E2) & 0x1A6C918E ^ v4 & 8)) >> 1) ^ 0xA660D8E3;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((1661 * (LODWORD(STACK[0x290]) > 0x26F)) ^ a2)) - 4))();
}

uint64_t sub_19C5DFE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _DWORD *a71;
  int v71;
  _DWORD *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;

  LODWORD(STACK[0x290]) = 0;
  v74 = LODWORD(STACK[0x290])++;
  *a71 = v74 + 1830967845;
  v75 = (*v72 + 2088729575);
  v76 = 1305237457
      * ((((v73 - 152) | 0xE1A50D9856BEE7AELL) - ((v73 - 152) & 0xE1A50D9856BEE7AELL)) ^ 0x30F894E9EF074160);
  *(_DWORD *)(v73 - 112) = (v71 + 1567573652) ^ v76;
  *(_DWORD *)(v73 - 128) = 1375860944 - v76 + v71;
  *(_DWORD *)(v73 - 152) = v71 + 1567573652 - v76 - 60;
  *(_DWORD *)(v73 - 120) = v76;
  *(_DWORD *)(v73 - 116) = (v71 + 1567573633) ^ v76;
  STACK[0x740] = v75 ^ v76;
  STACK[0x748] = v76 ^ 0x93FA222A;
  ((void (*)(uint64_t))STACK[0x278])(v73 - 152);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x270] + 8 * *(int *)(v73 - 124)) - 8))();
}

void sub_19C5DFF34()
{
  unsigned int v0;
  unsigned int v1;
  int v2;
  int *v3;
  int v4;

  if (v0 >= v1)
    v4 = *v3 + 1;
  else
    v4 = v2;
  *v3 = v4;
  JUMPOUT(0x19C5E00B0);
}

uint64_t sub_19C5E01C8()
{
  int v0;
  uint64_t (*v1)(uint64_t);
  _BYTE *v2;
  uint64_t (*v3)(uint64_t);
  _BYTE *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  int v7;
  int v8;
  uint64_t (*v9)(uint64_t);
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;

  STACK[0x288] = STACK[0x228];
  v1 = off_1E3D64110[v0 ^ 0x545];
  v2 = (_BYTE *)v1(41);
  v3 = off_1E3D64110[v0 ^ 0x520];
  *(_QWORD *)v3 = v2;
  sub_19C61D6B0(v2, 88, 0x29uLL);
  v4 = (_BYTE *)v1(32);
  *(_QWORD *)((char *)off_1E3D64110[v0 ^ 0x580] - 4) = v4;
  sub_19C61D6B0(v4, 202, 0x20uLL);
  *(_DWORD *)(*(_QWORD *)v3 + 8) = 0;
  v5 = off_1E3D64110[v0 - 1212];
  *((_DWORD *)v5 + 25) = 0;
  *((_BYTE *)v5 - 5) = 26;
  v6 = off_1E3D64110[v0 - 1342];
  *((_BYTE *)v6 + 48) = 88;
  *((_BYTE *)v6 + 3) = -44;
  *((_BYTE *)v6 + 23) = 79;
  *((_BYTE *)v5 + 50) = 68;
  *((_BYTE *)v6 + 71) = 51;
  *((_BYTE *)v6 + 82) = -22;
  *((_BYTE *)v6 + 80) = -72;
  *((_BYTE *)v6 + 76) = 102;
  *((_BYTE *)v6 + 126) = 80;
  *((_BYTE *)v6 + 123) = 96;
  *((_BYTE *)v5 + 56) = 1;
  *((_BYTE *)v6 + 98) = -77;
  *((_BYTE *)v6 + 90) = -34;
  *((_BYTE *)v5 + 58) = 73;
  *((_BYTE *)v6 + 119) = 80;
  *((_BYTE *)v5 + 39) = 39;
  *((_BYTE *)v5 + 47) = 17;
  *((_BYTE *)v5 + 88) = 25;
  *((_BYTE *)v6 + 34) = -113;
  *((_BYTE *)v6 + 11) = -121;
  *((_BYTE *)v5 + 22) = 47;
  *((_BYTE *)v6 + 62) = 99;
  *((_BYTE *)v5 + 71) = 23;
  *((_BYTE *)v6 + 6) = 73;
  *((_BYTE *)v5 + 91) = -59;
  *((_BYTE *)v5 + 37) = 59;
  *((_BYTE *)v5 + 80) = -122;
  *((_BYTE *)v6 + 56) = 119;
  *((_BYTE *)v5 + 76) = -52;
  *((_BYTE *)v6 + 93) = -5;
  *((_BYTE *)v6 + 14) = 34;
  *((_BYTE *)v5 - 9) = -11;
  *((_BYTE *)v5 + 96) = -109;
  *((_BYTE *)v6 + 21) = 3;
  *((_BYTE *)v5 + 51) = -36;
  *((_BYTE *)v5 + 16) = 54;
  *((_BYTE *)v6 + 50) = -15;
  *((_BYTE *)v5 + 42) = -80;
  *((_BYTE *)v5 + 13) = 83;
  *((_BYTE *)v5 + 59) = -87;
  *((_BYTE *)v5 + 61) = -16;
  *((_BYTE *)v5 + 44) = 113;
  *((_BYTE *)v5 + 17) = 32;
  *((_BYTE *)v6 + 9) = 31;
  *((_BYTE *)v6 + 105) = 66;
  *(_BYTE *)v5 = -85;
  *((_BYTE *)v5 + 65) = 77;
  *((_BYTE *)v5 + 2) = -39;
  *((_BYTE *)v6 + 61) = -92;
  *((_BYTE *)v6 + 115) = 15;
  *((_BYTE *)v5 + 97) = 36;
  *((_BYTE *)v6 + 78) = -116;
  *((_BYTE *)v5 + 64) = -15;
  *((_BYTE *)v6 + 1) = -98;
  *((_BYTE *)v6 + 110) = -105;
  *((_BYTE *)v6 + 53) = 73;
  *((_BYTE *)v5 + 30) = 105;
  *((_BYTE *)v5 - 8) = -14;
  *((_BYTE *)v5 + 66) = 120;
  *((_BYTE *)v5 + 79) = 72;
  *((_BYTE *)v6 + 26) = 79;
  *((_BYTE *)v5 + 84) = -72;
  *((_BYTE *)v6 + 13) = 52;
  *((_BYTE *)v5 + 21) = -90;
  *((_BYTE *)v6 + 73) = -39;
  *((_BYTE *)v5 + 25) = 32;
  *((_BYTE *)v6 + 124) = 13;
  *((_BYTE *)v6 + 40) = 34;
  *((_BYTE *)v6 + 129) = -121;
  *((_BYTE *)v5 + 83) = -86;
  *((_BYTE *)v5 + 69) = 69;
  *((_BYTE *)v6 + 99) = -15;
  *(_BYTE *)v6 = 58;
  *((_BYTE *)v6 + 113) = -17;
  *((_BYTE *)v6 + 36) = -119;
  *((_BYTE *)v6 + 66) = 45;
  *((_BYTE *)v5 + 5) = -105;
  *((_BYTE *)v6 + 127) = -33;
  *((_BYTE *)v6 + 57) = -15;
  STACK[0x200] = (unint64_t)v3;
  v7 = *(_DWORD *)(*(_QWORD *)v3 + 8)
     - (((v0 + 321) ^ 0xDBEB632) & (2 * *(_DWORD *)(*(_QWORD *)v3 + 8)))
     - 2032183205;
  v8 = (v7 ^ 0x7920A7A4) + 2;
  v9 = off_1E3D64110[v0 ^ 0x56F];
  STACK[0x210] = (unint64_t)v6;
  STACK[0x278] = (unint64_t)v9 + 265;
  STACK[0x240] = (unint64_t)v9;
  v10 = STACK[0x270];
  v11 = (((unint64_t)((v7 ^ 0x86DF585B) - ((2 * (v7 ^ 0x86DF585B)) & 0xB88B205A) + 1548062770) << 32)
       - 0x500000000) ^ 0x5C45902D00000000;
  STACK[0x238] = v11 - ((2 * v11) & 0x7095FB9000000000) + 0x384AFDC8F4037119;
  v12 = (LODWORD(STACK[0x284]) - 2074710745)
      - (unint64_t)((2 * (LODWORD(STACK[0x284]) - 2074710745)) & 0x1B6B7F04)
      + 0x665691790DB5BF82;
  v13 = ((2 * (v12 & 0xF9321BD5 ^ 0xA1000AC0)) | 0xCBA4F7B0ED31F692)
      - (v12 & 0xF9321BD5 ^ 0xA1000AC0)
      - 0x65D27BD87698FB49;
  v14 = (((v7 ^ 0x7920A7A4)
        + (v7 ^ 0x86DF585A)
        + 1
        - ((2 * ((v7 ^ 0x7920A7A4) + (v7 ^ 0x86DF585A) + 1)) & 0xCF3A8A34)
        - 409123558) ^ 0x1862BAE4)
      + (v7 ^ 0x86DF585A);
  STACK[0x208] = (unint64_t)v5 - 12;
  STACK[0x268] = STACK[0x730];
  LODWORD(STACK[0x260]) = (v8 ^ 0x79BB65F6)
                        + ((2 * v8) & 0xF376CBEC)
                        + (v14 ^ 0xC7FBEFBD)
                        + ((2 * v14) & 0x8FF7DF7A)
                        - 1022672181;
  STACK[0x230] = v13 ^ 0x671A70D6B6621C00;
  STACK[0x228] = v13 ^ ((v13 ^ 0x9A2D8427215715F6)
                      - ((2 * (v13 ^ 0x9A2D8427215715F6) + 2) & 0xE6FAACE997F0FE4ELL)
                      - 0xC82A98B340780D8) ^ 0x86AD2792D2FAF12BLL;
  STACK[0x220] = (((2 * v12) & 0x4726437AALL ^ 0x692BD1B21FF33714)
                + (v12 & 0x2F9321BD5 ^ 0x26A172630066475)
                + (((v12 ^ 0x2D36807BF487A457) + 1) ^ 0x1FD5CBF5D8D6F5BELL)
                + ((2 * ((v12 ^ 0x2D36807BF487A457) + 1)) & 0x3FAB97EBB1ADEB7CLL)
                - ((2
                  * (((2 * v12) & 0x4726437AALL ^ 0x692BD1B21FF33714)
                   + (v12 & 0x2F9321BD5 ^ 0x26A172630066475)
                   + (((v12 ^ 0x2D36807BF487A457) + 1) ^ 0x1FD5CBF5D8D6F5BELL)
                   + ((2 * ((v12 ^ 0x2D36807BF487A457) + 1)) & 0x3FAB97EBB1ADEB7CLL))
                  + 0x5268745DCE5ADCC6) & 0x62E530BDB7D9C87ALL)
                + 0x5AA6D28DC31A52A0) ^ 0x45959FD3F0E6ADF1;
  LODWORD(STACK[0x258]) = 924098096;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10 + 8 * (v0 + 33)) - 12))(2219745082);
}

uint64_t sub_19C5E1818@<X0>(unsigned int a1@<W0>, unsigned int a2@<W2>, int a3@<W4>, uint64_t a4@<X7>, int a5@<W8>)
{
  int v5;
  _BOOL4 v6;

  v5 = (a5 - 224) | 0x200;
  v6 = a2 < a1;
  if (v6 == a3 - 2075222213 < ((v5 - 1915293365) & 0x72290D73u) - 2075223561)
    v6 = a2 > a3 - 2075222213;
  return (*(uint64_t (**)(void))(a4 + 8 * ((70 * !v6) ^ v5)))();
}

void sub_19C5E2194()
{
  JUMPOUT(0x19C5E167CLL);
}

uint64_t sub_19C5E21B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v7;
  int v8;
  int v9;

  LODWORD(STACK[0x250]) = LODWORD(STACK[0x260]) < 0x4C2987E;
  STACK[0x218] = (a7 - 870);
  STACK[0x248] = (a7 - 1989361310) & 0x76933FDE;
  v7 = LODWORD(STACK[0x258]) - 844236209;
  v8 = LODWORD(STACK[0x250]) ^ (v7 < 0x4C2987E);
  v9 = LODWORD(STACK[0x260]) > v7;
  if (v8)
    v9 = STACK[0x250];
  return (*(uint64_t (**)(void))(STACK[0x270] + 8 * (a7 ^ (660 * (v9 ^ 1u)))))();
}

void sub_19C5E6514()
{
  int v0;

  LODWORD(STACK[0x258]) = v0 + 1;
  JUMPOUT(0x19C5E1614);
}

uint64_t sub_19C5E65B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a68;
  int a70;
  int a72;
  uint64_t a73;
  uint64_t a74;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  unsigned __int8 *v81;
  unint64_t v82;
  int v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  int v88;
  unsigned int v89;
  char v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  char v94;
  char v95;
  unsigned int v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t (*v114)(uint64_t);
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;

  v79 = STACK[0x218];
  v80 = ((HIWORD(v77) & 0xFF90) - ((STACK[0x218] - 134225694) | HIWORD(v77)) + 127) ^ 0xFFFFFF99;
  v81 = (unsigned __int8 *)STACK[0x210];
  v81[71] = BYTE1(v77) ^ 0x90;
  v81[23] = (((((2 * v80) & 0xD0) - v80 - 107) ^ 0xDC | (((2 * (BYTE6(v77) & 0x2F ^ 0xE)) & 0x18)
                                                       - (BYTE6(v77) & 0x2F ^ 0xE)
                                                       - 77) ^ 0xBB)
           - ((2
             * ((((2 * v80) & 0xD0) - v80 - 107) ^ 0xDC | (((2 * (BYTE6(v77) & 0x2F ^ 0xE)) & 0x18)
                                                         - (BYTE6(v77) & 0x2F ^ 0xE)
                                                         - 77) ^ 0xBB)) & 0x30)
           + 24) ^ 0x18;
  v81[48] = BYTE3(v77) ^ 0xF;
  v81[6] = BYTE2(v74) ^ 0xD4;
  v81[123] = BYTE5(v77) ^ 0xA2;
  v82 = STACK[0x208];
  *(_BYTE *)(v82 + 68) = BYTE2(v77) ^ 0x3F;
  v83 = (HIWORD(v74) & 0x5C ^ 0x39) - ((2 * (HIWORD(v74) & 0x5C ^ 0x39)) & 0xDDDDDDDD) + 110;
  v84 = (v83 & 0x48 ^ 0x41) + (v83 & 0xB4 ^ 0x25) - 2;
  v81[82] = v77 ^ 0x14;
  v85 = 2 * ((a70 - a72) ^ 0x7869EE0Du);
  v86 = ((a70 - a72) ^ 0x20A081602A61EA2CLL)
      - (v85 & 0x15BEFF7BCLL)
      - 0x20A0816052080421
      + (v76 ^ 0xF562147466A37E54);
  *(_BYTE *)(v82 + 51) = BYTE4(v77) ^ 0x15;
  v88 = ((2 * v75) & 0x6DEFEEF4 ^ 0x4166C044) + (v75 ^ 0xDE449FDD);
  v89 = v88 - ((2 * v88 - 1844440316) & 0x962AEC08) - 1810006138;
  v90 = v84 ^ 0x74 | (((2 * (BYTE6(v74) & 0xA3 ^ 3)) | 0xBC) - (BYTE6(v74) & 0xA3 ^ 3) - 94) ^ 0xDE;
  *(_BYTE *)(v82 + 62) = HIBYTE(v77) ^ 0x5B;
  v81[90] = (v90 - ((2 * v90) & 0x7A) - 67) ^ 0xBD;
  if ((v75 & 4) != 0)
  {
    v87 = ((2 * v75) & 0xFFFD3F78 ^ 0xD1641148) + (v75 ^ 0x974DF71B);
    v89 = v87 - ((2 * v87 + 180368) & 0x962AEC08) + 1259787852;
  }
  v92 = ((2 * ((v89 ^ 0xCB157600) + 197)) & 0xC7FF3FEE) + (((v89 ^ 0xCB157600) + 197) ^ 0x63FF9FF7);
  v93 = (((v89 ^ 0x34EA89FF) + 59) ^ 0xFC) + ((2 * ((v89 ^ 0x34EA89FF) + 59)) & 0xF8) + 4;
  *(_BYTE *)(v82 + 92) = BYTE4(v74) ^ 0xB3;
  v94 = 2 * (v92 + 9);
  v95 = ((HIBYTE(v74) & 0x69 ^ 0x2C | 0x5A) - (HIBYTE(v74) & 0x69 ^ 0x2C | 0xA5) - 91) ^ 0x5E | ((HIBYTE(v74) & 0x96 ^ 0x82 | 0x80)
                                                                                               - (HIBYTE(v74) & 0x96 ^ 0x82 | 0x7F)
                                                                                               + 127) ^ 0x16;
  v81[98] = (v95 + ((2 * v95) & 0x80) - 64) ^ 0xC0;
  v81[126] = v74 ^ 0xE3;
  *(_BYTE *)(v82 + 7) = BYTE1(v74) ^ 0x66;
  v96 = (((v92 + 9) & 0x60) - (v94 & 0x40) - 46406216) ^ 0xFD3BE5B8 | ((v93 & 0x9F) - ((2 * v93) & 0x32) - 2135788007) ^ 0x80B27619;
  v81[76] = BYTE3(v74) ^ 0x4F;
  v81[34] = BYTE5(v74) ^ 0xD1;
  v97 = *(_BYTE *)(a74 + ((v96 - ((2 * v96) & 0x493712A0) - 459568816) ^ 0xE49B89D0)) ^ 0x1D;
  LOBYTE(v92) = (v92 - (v94 & 0x50) + 49) ^ 0x19;
  v81[3] = ((v97 & v92) + (~(2 * (v97 & v92)) | 0x65) - 50) ^ ((v97 | v92) - ((2 * (v97 | v92)) & 0xE3) - 15) ^ 0x3C;
  v98 = (v85 & 0x1FAEEF3BELL)
      + ((a70 - a72) ^ 0xEEFB3CCE851E97D2)
      + (v86 ^ 0x57D8FACFABFCFFFELL)
      + ((2 * v86) & 0xAFB1F59F57F9FFFCLL);
  v99 = v98 - ((2 * v98 + 0x725790C2AD170C46) & 0x89009CE578A98AE2) - 0x253E92BED1FB46CLL;
  v91 = 109 * ((v75 >> 8) ^ 0xE8B368) - ((10 * (v75 >> 8)) & 0xA);
  v100 = *(unsigned __int8 *)(STACK[0x278]
                            + ((((2 * ((v91 + 5) ^ 0x4864100C)) & 0x900000CC)
                              - ((v91 + 5) ^ 0x4864100C)
                              - 2131406695) ^ 0xC8914016));
  v81[62] = BYTE2(v75) ^ 0xB3;
  *(_BYTE *)(v82 + 59) = HIBYTE(a7) ^ 0x94;
  v101 = (((v100 >> 3) & 0x1A ^ 0xFFFFFFE7) - ((v100 >> 3) | 0xFFFFFFFE) - 2) ^ v100;
  v81[56] = BYTE3(v75) ^ 0xE8;
  *(_BYTE *)(v82 + 34) = BYTE4(v75) ^ 0xB9;
  v81[50] = BYTE6(v75) ^ 0x81;
  *(_BYTE *)(v82 + 25) = BYTE5(v75) ^ 1;
  HIDWORD(v102) = v101 ^ 0xD;
  LODWORD(v102) = (v101 ^ 0x40) << 24;
  v81[119] = ((v102 >> 28) - ((2 * (v102 >> 28)) & 0x2C) - 106) ^ 0x96;
  v103 = (((v78 ^ 0xA948FC84) + 20) ^ 0xED) + ((2 * ((v78 ^ 0xA948FC84) + 20)) & 0xDA) + 19;
  v104 = *(unsigned __int8 *)(a73
                            + ((v103 - 0x3DB16A3E5AD1E648 - ((2 * v103) & 0x198) + 20) ^ 0xC24E95C1A52E19B8));
  *(_BYTE *)(v82 + 3) = BYTE4(v78) ^ 0x2E;
  v81[11] = BYTE1(v78) ^ 0xFC;
  *(_BYTE *)(v82 + 108) = BYTE2(v78) ^ 0x48;
  HIDWORD(v102) = v104 ^ 0x20;
  LODWORD(v102) = ~v104 << 24;
  *(_BYTE *)(v82 + 28) = ((v102 >> 30) - ((2 * (v102 >> 30)) & 0xB6) - 37) ^ 0xDB;
  *(_BYTE *)(v82 + 83) = BYTE6(v78) ^ 0xC9;
  *(_BYTE *)(v82 + 70) = BYTE6(v99) ^ 0x80;
  v81[14] = BYTE2(v99) ^ 0x54;
  *(_BYTE *)(v82 + 49) = HIBYTE(v99) ^ 0x44;
  *(_BYTE *)(v82 + 100) = ((((((2 * (BYTE5(v78) & 0xE3 ^ 0xE0)) & 0xC0) - (BYTE5(v78) & 0xE3 ^ 0xE0) + 3) | ((BYTE5(v78) & 0x1C ^ 0xEF) - 1) ^ 0xF2) ^ 0x81)
                         - ((2
                           * (((((2 * (BYTE5(v78) & 0xE3 ^ 0xE0)) & 0xC0) - (BYTE5(v78) & 0xE3 ^ 0xE0) + 3) | ((BYTE5(v78) & 0x1C ^ 0xEF) - 1) ^ 0xF2) ^ 0x81)) & 0xAA)
                         + 85) ^ 0x55;
  *(_BYTE *)(v82 + 63) = BYTE4(v99) ^ 0x72;
  *(_BYTE *)(v82 + 103) = v99 ^ 0x71;
  *(_BYTE *)(v82 + 88) = BYTE5(v99) ^ 0x4E;
  v81[21] = BYTE3(v99) ^ 0xBC;
  v81[93] = BYTE1(v99) ^ 0xC5;
  v81[80] = BYTE3(v78) ^ 0xA9;
  *(_BYTE *)(v82 + 54) = HIBYTE(v78) ^ 0xC0;
  *(_DWORD *)(*(_QWORD *)STACK[0x200] + 8) = ((a68 + 1) ^ 0x3FFF9CFF) - 1073716479 + ((2 * (a68 + 1)) & 0x7FFF39FE);
  v105 = *(_DWORD *)(v82 + 112) - 2032183205 - ((2 * *(_DWORD *)(v82 + 112)) & 0xDBEB0B6);
  LODWORD(v99) = (v105 ^ 0x7920A7A4) + 983558041 - ((2 * (v105 ^ 0x7920A7A4) + 4) & 0x753FCF32) + 2;
  LODWORD(STACK[0x268]) = v105 ^ 0x86DF585B;
  v106 = 2
       * (((v99 ^ 0x3A9FE799) & (v105 ^ 0x86DF585B)) - ((2 * ((v99 ^ 0x3A9FE799) & (v105 ^ 0x86DF585B))) & 0x488F0D0C))
       + 1217334540;
  LODWORD(v99) = (v105 ^ 0xBC40BFC2 ^ v99) + (v106 ^ 0xA37074B3) + 335578689 + ((2 * v106) & 0xD7FEF37C ^ 0x911E1218);
  v107 = v105 ^ 0xB3F142FF ^ ((_DWORD)v99 - ((2 * (_DWORD)v99) & 0x6A5C354A) + 892213925);
  STACK[0x258] = v107;
  STACK[0x250] = (2 * (_DWORD)v107) & 0x35E3BE40;
  v108 = (((unint64_t)(v81[36] - ((2 * v81[36]) & 0x1C4u) + 49679) << 48) - 0x2D000000000000) ^ 0xC1E2000000000000;
  v109 = v108 - ((2 * v108) & 0x63BC000000000000) + 0x31DE9EF45EFCB8C4;
  v110 = (((unint64_t)(v81[26] - ((2 * v81[26]) & 0x4Eu) - 380125136) << 32) - 0x900000000) ^ 0xE957C02700000000;
  v111 = (((*v81 - ((2 * *v81) & 0x52)) << 24) + 0x5C8EC99729000000) ^ 0x5C8EC99729000000;
  v112 = (v111 - ((2 * v111) & 0x642A7EB18A000000) + 0x72153F58C542BFA6) ^ 0x72153F58C542BFA6;
  v113 = (((v81[40] - ((2 * v81[40]) & 0x4ELL)) << 8) - 0x1A3B2CC5B31D900) ^ 0xFE5C4D33A4CE2700;
  v114 = off_1E3D64110[(int)v79 - 226];
  v115 = (v113 - ((2 * v113) & 0x232569ECD58C4000) + 0x1192B4F66AC620A2) ^ 0x1192B4F66AC620A2 | (((*((_BYTE *)v114 + ((((*(_BYTE *)(v82 + 91) >> 2) | (*(_BYTE *)(v82 + 91) << 6)) - ((*(_BYTE *)(v82 + 91) >> 1) & 0x24) - 110) ^ 0x3DLL) + 517) ^ 0x49) - 73) - ((2 * ((*((unsigned __int8 *)v114 + ((((*(_BYTE *)(v82 + 91) >> 2) | (*(_BYTE *)(v82 + 91) << 6)) - ((*(_BYTE *)(v82 + 91) >> 1) & 0x24) - 110) ^ 0x3DLL) + 517) ^ 0x49u) - 73)) & 0x70) + 0x31F55D4F4DFB5B38) ^ 0x31F55D4F4DFB5B38;
  v116 = (v115 - ((2 * v115) & 0x549D1B632FE6815CLL) + 0x6A4E8DB197F340AELL) ^ 0x6A4E8DB197F340AELL | v112;
  v117 = (((v81[110] - ((2 * v81[110]) & 0xAALL)) << 16) - 0x13869953D5AB0000) ^ 0xEC7966AC2A550000;
  v118 = (v116 - ((2 * v116) & 0x79B2ACE3FBDE4D5ALL) + 0x3CD95671FDEF26ADLL) ^ 0x3CD95671FDEF26ADLL | (v117 - ((2 * v117) & 0x72C3F4651C560000) + 0x7961FA328E2B19D4) ^ 0x7961FA328E2B19D4;
  v119 = (v118 - ((2 * v118) & 0x784D405ABD6C0E08) - 0x3D95FD2A149F8FCLL) ^ 0xFC26A02D5EB60704 | (v110 - ((2 * v110) & 0x43ECB0C400000000) - 0x1E09A79D1B757579) ^ 0xE1F65862E48A8A87;
  v120 = (((unint64_t)(v81[53] - ((2 * v81[53]) & 0x18Cu) + 1084927) << 40) - 0x390000000000) ^ 0x108DC60000000000;
  v121 = (((unint64_t)(v81[99] - ((2 * v81[99]) & 0x58u) + 205) << 56) - 0x2100000000000000) ^ 0xAC00000000000000;
  v122 = v109 ^ (v120 - ((2 * v120) & 0x3D5CA40000000000) + 0x5EAE528FF6E15B5CLL) ^ (v121
                                                                                     - (v121 >> 58 << 59)
                                                                                     + 0x7CA980FC352685CFLL) ^ 0x1903CE94DAF84BE4 ^ (v119 - ((2 * v119) & 0x22F4D4C497BE75D4) - 0x2E85959DB420C516);
  v123 = (((unint64_t)(v81[129] - ((2 * v81[129]) & 0x152u) + 7035082) << 40) - 0x210000000000) ^ 0x6B58A90000000000;
  v124 = (((unint64_t)(v81[57] - ((2 * v81[57]) & 0xC8u) + 170896) << 46) - 0xB000000000000) ^ 0xA6D9000000000000;
  v125 = (((unint64_t)(v81[61] - ((2 * v81[61]) & 0xFF9Fu) + 32509433) << 38) - 0xA8000000000) ^ 0x7C0373C000000000;
  v126 = (((*(unsigned __int8 *)(v82 + 14) - ((2 * *(unsigned __int8 *)(v82 + 14)) & 0x52)) << 30)
        - 0x6F3845F5C0000000) ^ 0x90C7BA0A40000000;
  v127 = (v126 - ((2 * v126) & 0x7E3104CF80000000) - 0x40E77D983C06EC63) ^ 0xBF188267C3F9139DLL | (v125 - ((2 * v125) & 0x4854A60000000000) + 0x242A531E7393A50ALL) ^ 0x242A531E7393A50ALL;
  v128 = (v127 - ((2 * v127) & 0x45224370903225BELL) + 0x229121B8481912DFLL) ^ 0x229121B8481912DFLL | (v124 - ((2 * v124) & 0x7FF800000000000) - 0x3C003342174B474BLL) ^ 0xC3FFCCBDE8B4B8B5;
  v129 = v128 - 0xD30C4F6674BF751 + (~(2 * v128) | 0x9A6189ECCE97EEA3);
  v130 = (((2 * (v129 & 0x5AD2CC0000000 ^ 0x10800C0000000)) & 0x9024080000000)
        - (v129 & 0x5AD2CC0000000 ^ 0x10800C0000000)
        - 0x229EC1736FAF98F6) ^ 0xD8413FCCD45E472ALL;
  v131 = (((unint64_t)(*(unsigned __int8 *)(v82 + 42) - ((2 * *(unsigned __int8 *)(v82 + 42)) & 0xBAu) + 388) << 54)
        - 0x9C0000000000000) ^ 0x5740000000000000;
  v132 = ((((v129 & 0x52BA52D33FFFFFFFLL ^ 0xFFCFBF2DD8B408AELL)
          - 0x6FD91361CD4D3331
          + ((2 * (v129 & 0x52BA52D33FFFFFFFLL ^ 0xFFCFBF2DD8B408AELL)) & 0x204481246565999CLL ^ 0xFFF6A7E7FFFFFFFFLL)) ^ (v131 - ((2 * v131) & 0x2C80000000000000) + 0x1671E049660F117ELL) ^ (((2 * v130) | 0xE845ED1F01B5D490) - v130 - 0x7422F68F80DAEA48)) >> 30) ^ 0xFE6A1C8FDD476843;
  v133 = (((unint64_t)(*(unsigned __int8 *)(v82 + 78)
                            - ((2 * *(unsigned __int8 *)(v82 + 78)) & 0x3333u)
                            + 330316443) << 32)
        - 0x200000000) ^ 0x13B03A9900000000;
  v134 = (v123 - ((2 * v123) & 0xCB7C0000000000) - 0x3F9A4184BD9C542BLL) ^ (v133
                                                                            - ((2 * v133) & 0x9683D9400000000)
                                                                            - 0x3B4BE1353212943CLL) ^ 0x6018D163E0F2D30ELL ^ (v132 - 0x655C92A325955853 + ((2 * v132) & 0x1B4D54F58 ^ 0xCBBBE7E7FFFFFFFFLL));
  v135 = (((unint64_t)(*(unsigned __int8 *)(v82 + 37) - ((2 * *(unsigned __int8 *)(v82 + 37)) & 0x118u) + 28303) << 48)
        - 0x3000000000000) ^ 0x6E8C000000000000;
  v136 = v134 | (v135 - ((2 * v135) & 0xB3A000000000000) - 0x7A6201F582ABF99FLL) ^ 0x859DFE0A7D540661;
  v137 = (((unint64_t)(v81[113] - ((2 * v81[113]) & 0x94u) + 137) << 56) - 0x3F00000000000000) ^ 0x4A00000000000000;
  STACK[0x278] = (unint64_t)v114 + 258;
  STACK[0x260] = (unint64_t)v114 + 517;
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(STACK[0x270]
                                                                                + 8
                                                                                * (((_DWORD)v79 - 134225761) & 0x8001FFF ^ 0xE7u)))(1379387576, v122, (v137 - ((2 * v137) & 0xF7FFFFFFFFFFFFFFLL) + 0x7BFB8D3FD9AEE5A5) ^ 0xA3A5D7F971B7ED0ALL ^ (v136 - ((2 * v136) & 0x7136E12A349FDFA6) + 0x389B70951A4FEFD3), 476);
}

uint64_t sub_19C5E84FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;

  v12 = (((4 * (a8 & 1)) ^ 4) & 0xFFFFFFFD | (2 * (a8 & 1))) + ((v8 + ((v10 + v9) & a6) - 637) ^ a8) - 2;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x270]
                                        + 8
                                        * ((47 * (((v12 + v8 - (((v10 - 214) ^ a7) & (2 * v12))) ^ v8) >= v11)) ^ v10))
                            - 8))();
}

void sub_19C5E99EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  BOOL v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  __int128 v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  __int128 v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  _BYTE *v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;

  v8 = (v7 - ((v7 << (v3 - 6)) & 0x5A57C242) + 0x41BE086C2D2BE121) ^ v4;
  *((_QWORD *)&v9 + 1) = v8 ^ 0xA;
  *(_QWORD *)&v9 = v8 ^ 0xA3E866A5E85481C0;
  v10 = (v9 >> 6) - ((2 * (v9 >> 6)) & 0x4DAF65AC33D77616) + 0x26D7B2D619EBBB0BLL;
  v11 = (v10 ^ ((v10 ^ 0x60EF881C457783A3)
              - ((2 * (v10 ^ 0x60EF881C457783A3) + 0x12AD74F508964AA0) & 0x202605C3C0374420)
              + 0x5969BD5C6466C760) ^ ((v10 ^ 0xA9B93266C13CA6ECLL)
                                       - ((2 * (v10 ^ 0xA9B93266C13CA6ECLL) + 2) & 0x415CA4511ED5633ELL)
                                       - 0x5F51ADD770954E60) ^ 0x66FB9D5051B24A9CLL)
      - 0x36A945857BB4DAB1;
  v12 = ((2 * v11) & 0xBF7FFDD4FF9FDDF2) + (v11 ^ 0xDFBFFEEA7FCFEEF9);
  v13 = (((unint64_t)(STACK[0x258] - STACK[0x250] + 452058920) << 32) - 0x800000000) ^ 0x1AF1DF2000000000;
  v14 = (((v12 + 0x2040011580301107) >> 58) - (((v12 + 0x2040011580301107) >> 57) & 0x30) - 0xE70DEE6E8E96D28) ^ 0xF18F2119171692D8 | (v13 - ((2 * v13) & 0x1E79595E00000000) - 0x70C35350DB3FFF43) ^ 0xBE3C805E7084B897 ^ ((v12 << 6) - (((v12 << 7) + 0x20008AC018088380) & 0x620059E2A8897000) + 0x410072516048F9EALL);
  v15 = v14 - ((2 * v14) & 0x2A31EB4631ED27F8) + 0x1518F5A318F693FCLL;
  v16 = v6 ^ a2;
  v17 = v6 ^ a2 ^ 0x405DB1B4E373B057 ^ (((v15 ^ v5 ^ 0x843DD6FB8B7B961ALL) & (v15 ^ 0xFA600373801DE585))
                                        - ((2 * ((v15 ^ v5 ^ 0x843DD6FB8B7B961ALL) & (v15 ^ 0xFA600373801DE585))) & 0x40D11E2E6B4CAA90)
                                        - 0x5F9770E8CA59AAB8);
  *((_QWORD *)&v9 + 1) = v15 ^ v5 ^ 0x1961A;
  *(_QWORD *)&v9 = v15 ^ v5 ^ 0x843DD6FB8B7A0000;
  v18 = (v9 >> 17) - ((2 * (v9 >> 17)) & 0x692863BD56417570) - 0x4B6BCE2154DF4548;
  *((_QWORD *)&v9 + 1) = v18 ^ 0x1923230C131ALL;
  *(_QWORD *)&v9 = v18 ^ 0xFD56800000000000;
  v19 = (((v9 >> 47) - ((2 * (v9 >> 47)) & 0xB0A9B5E064196968) - 0x27AB250FCDF34B4CLL) ^ 0x765035569EB7D8CELL) & (a3 ^ 0x26ECED196D0D549DLL);
  v20 = v17 ^ v15 ^ (v19 - ((2 * v19) & 0x1371294EC6C44E66) - 0x76476B589C9DD8CDLL);
  v21 = v20 ^ (v20 >> 39);
  v22 = ((8 * v20) ^ 0xDF45ABA085367F70) - ((2 * ((8 * v20) ^ 0xDF45ABA085367F70)) & 0x8215FAF00DC7C210);
  v23 = ((v22 - 0x3EF50287F91C1EF7) ^ (((v22 - 0x3EF50287F91C1EF7) ^ 0x3EF50287F91C1EF6)
                                       - ((2 * ((v22 - 0x3EF50287F91C1EF7) ^ 0x3EF50287F91C1EF6) + 2) & 0x7F38A35CA758A51ALL)
                                       - 0x4063AE51AC53AD72) ^ ((v21 ^ 0xDBE8B57411111E84)
                                                                + (v21 ^ 0xE51DB7F3E80D0072 ^ (v22
                                                                                               - 0x3EF50287F91C1EF7))
                                                                + 1
                                                                - ((2
                                                                  * ((v21 ^ 0xDBE8B57411111E84)
                                                                   + (v21 ^ 0xE51DB7F3E80D0072 ^ (v22
                                                                                                  - 0x3EF50287F91C1EF7))
                                                                   + 1)) & 0x7DF85FBC9690FD0CLL)
                                                                - 0x4103D021B4B7817ALL) ^ 0xC06A83081E07CD02)
      + (v21 ^ 0xDBE8B57411111E84);
  v24 = v23 - ((2 * v23) & 0x282AC6483A82A5B0) - 0x6BEA9CDBE2BEAD28;
  v25 = v24 ^ 0x941563241D4152D8;
  v26 = ((((v20 ^ 0xDBE8B57410A6CFEELL) << (v20 & 0x19 ^ 8))
        - ((2 * ((v20 ^ 0xDBE8B57410A6CFEELL) << (v20 & 0x19 ^ 8))) & 0x1C3E8A43CC84B222)
        - 0x71E0BADE19BDA6EFLL) ^ 0x8E1F4521E6425911) << (v20 & 0x19 ^ 0x11);
  v27 = v26 - ((2 * v26) & 0x826C6F566E0120B8) - 0x3EC9C854C8FF6FA4;
  v28 = (v27 ^ 0xAADCAB70D5BE3D7BLL ^ v24) + (v24 ^ 0x941563241D4152D8) + 1;
  v29 = (v27 ^ ((v27 ^ 0x3EC9C854C8FF6FA3)
              - ((2 * (v27 ^ 0x3EC9C854C8FF6FA3) + 2) & 0x9056F513BE3039F0)
              + 0x482B7A89DF181CF9) ^ 0x1E1FCF09775E24F9 ^ (v28
                                                              - ((2 * v28) & 0x2E0504573E8D50BALL)
                                                              - 0x68FD7DD460B957A3))
      + v25;
  v30 = v29 - 0x569701B9EB69F446 - ((2 * v29) & 0x52D1FC8C292C1778) + 2;
  v31 = v30 ^ (v20 >> 61);
  v32 = v31 ^ 0xA968FE4614960BBALL;
  v33 = 0xFFFFFFFC00000000;
  if ((v30 & 0x400000000) != 0)
    v33 = 0x400000000;
  v34 = v33 + v32 - 2 * ((v33 + v32) & 0x86F0CA65225DA7DLL ^ v32 & 9) - 0x7790F359ADDA258CLL;
  v35 = a2 ^ a3 ^ 0x5C84F0CE72F17E57;
  v36 = v15 ^ v5 ^ (((v35 ^ 0xFA58312C9C48AF52) & (a3 ^ 0xD91312E692F2AB62))
                  - ((2 * ((v35 ^ 0xFA58312C9C48AF52) & (a3 ^ 0xD91312E692F2AB62))) & 0x9B32B1DDF2B8FCC8)
                  - 0x3266A71106A3819CLL);
  v37 = (((v16 ^ 0x3D441B8052FBDB0DLL) & (v35 ^ 0x5A7CED363B750ADLL))
       - ((2 * ((v16 ^ 0x3D441B8052FBDB0DLL) & (v35 ^ 0x5A7CED363B750ADLL))) & 0x6B082C76CDE425C0)
       + 0x3584163B66F212E0) ^ a3 ^ 0x5C84F0CE72F17E57 ^ v36;
  *((_QWORD *)&v38 + 1) = v37 ^ 0x3CB783;
  *(_QWORD *)&v38 = v37 ^ 0xB7D767CD20800000;
  v39 = (((v37 << 32) ^ 0x20BCB78300000000)
       - ((2 * ((v37 << 32) ^ 0x20BCB78300000000)) & 0xEB806D1A00000000)
       + 0x75C0368DB67039EALL) & 0xFFFFFC0000000000 ^ 0x6E7300000000000;
  v40 = ((v39 | 0x7C7634371C621255) - (v39 | 0x8389CBC8E39DEDAALL) - 0x7C7634371C621256) ^ 0x3D7432139E42BB75;
  v41 = (((2 * v40) & 0x7701912086A49968) - v40 + 0x447F376FBCADB34BLL) ^ 0x765A354B3E8D1A6BLL | HIDWORD(v37) ^ 0xB7D767CD;
  v42 = (v41 - ((2 * v41) & 0x132CA035459F53ELL) - 0x7F669AFE55D30561) ^ ((v38 >> 22)
                                                                          - ((2 * (v38 >> 22)) & 0x78C35BD83120BDDELL)
                                                                          - 0x439E5213E76FA111);
  *((_QWORD *)&v38 + 1) = v42 ^ 0x1C06162BD0;
  *(_QWORD *)&v38 = v42 ^ 0x7613BC0000000000;
  v43 = (((v37 << 47) ^ 0x5BC1800000000000)
       - ((2 * ((v37 << 47) ^ 0x5BC1800000000000)) & 0x2452000000000000)
       - 0x6DD68676A47F5B0BLL) ^ (v37 >> 17) ^ (((v37 << 54) ^ 0xE0C0000000000000)
                                              - ((2 * ((v37 << 54) ^ 0xE0C0000000000000)) & 0xC680000000000000)
                                              - 0x1CA2E2EA02DBEF3BLL) ^ ((v38 >> 42)
                                                                       - ((2 * (v38 >> 42)) & 0x5B394DAE4C64C588)
                                                                       + 0x2D9CA6D7263262C4);
  *((_QWORD *)&v38 + 1) = v36 ^ 0xE157227E87ELL;
  *(_QWORD *)&v38 = v36 ^ 0x49A4800000000000;
  v44 = (v38 >> 47) - ((2 * (v38 >> 47)) & 0x174B2BF189F7041CLL) - 0x745A6A073B047DF2;
  *((_QWORD *)&v38 + 1) = v44 ^ 0x1E2A5;
  *(_QWORD *)&v38 = v44 ^ 0x294C8BA158AC0000;
  v45 = v38 >> 17;
  v46 = (v45 - ((2 * v45) & 0x4440A0682D2ACA80) - 0x5DDFAFCBE96A9AC0) ^ ((v45
                                                                            - ((2 * v45) & 0x4440A0682D2ACA80uLL)
                                                                            - 0x5DDFAFCBE96A9AC0) >> 1) ^ ((v45 - ((2 * v45) & 0x4440A0682D2ACA80uLL) - 0x5DDFAFCBE96A9AC0) >> 6) ^ (((v45 << 58) ^ 0xA000000000000000) + ((v45 << 59) ^ 0xBFFFFFFFFFFFFFFFLL) - 0x229CBD11D315D79);
  v47 = v31 ^ ((v46 ^ 0xFD33BD1D3DC1D7D2)
             + (v45 << 63)
             + 0x35A00E6D5F556A0ELL
             - 2 * ((v46 ^ 0xFD33BD1D3DC1D7D2) & 0x35A00E6D5F556A2FLL ^ v46 & 0x21));
  v48 = v34 ^ (((v47 ^ 0x63370FD4B43C9E4BLL) & (v43 ^ 0x6085B303DB62FC77))
             - ((2 * ((v47 ^ 0x63370FD4B43C9E4BLL) & (v43 ^ 0x6085B303DB62FC77))) & 0xDAC9C4F58A11598CLL)
             + 0x6D64E27AC508ACC6);
  v49 = (((v15 ^ 0x59FFC8C7FE21A7ALL) & (v16 ^ 0xC2BBE47FAD0424F2))
       - ((2 * ((v15 ^ 0x59FFC8C7FE21A7ALL) & (v16 ^ 0xC2BBE47FAD0424F2))) & 0x55CBEB984FAE618)
       + 0x2AE5F5CC27D730CLL) ^ v35;
  v50 = v17 ^ v49;
  v51 = v17 ^ v49 ^ 0x940F01F6A39E3D37;
  v52 = ((((v50 << 45) ^ 0x7677400000000000)
        - ((2 * ((v50 << 45) ^ 0x7677400000000000)) & 0x452AC00000000000)
        + 0x22956D7946318C10) ^ 0x22956D7946318C10 | (v51 >> 28) ^ (v51 >> 19)) ^ 0x17DDF5A51C6CLL;
  v53 = (((v49 << 57) ^ 0x5800000000000000)
       - ((2 * ((v49 << 57) ^ 0x5800000000000000)) & 0x3400000000000000)
       + 0x1AC7D1BBC1AC122ALL) ^ 0x1AC7D1BBC1AC122ALL | (v49 >> 41) ^ 0x27E7A4;
  v54 = v49 ^ (v49 >> 7) ^ (((v49 << 23) ^ 0xC3873D0E56000000)
                          - 0x45EA430E7E84F4A6
                          + (~(2 * ((v49 << 23) ^ 0xC3873D0E56000000)) | 0x8BD4861CFDFFFFFFLL)) ^ 0xEB4ECEE951DB16A2 ^ (v53 - ((2 * v53) & 0xAF5A393CC183D248) + 0x57AD1C9E60C1E924);
  v55 = (((v51 << 36) ^ 0xA458E8D000000000)
       - ((2 * ((v51 << 36) ^ 0xA458E8D000000000)) & 0x56EFB40000000000)
       + 0x2B77DA028D9A1326) ^ v50 ^ v54 ^ (v52 - ((2 * v52) & 0x5D930D4700C6820CLL) + 0x2EC986A380634106);
  *((_QWORD *)&v38 + 1) = v31 ^ 0x4960BBA;
  *(_QWORD *)&v38 = v30 ^ 0xA968FE4610000000;
  v56 = (v38 >> 27) - ((2 * (v38 >> 27)) & 0xCA33980E4CD897E0) + 0x6519CC07266C4BF0;
  *((_QWORD *)&v38 + 1) = v56 ^ 0xFBB079740;
  *(_QWORD *)&v38 = v56 ^ 0xF2393E8000000000;
  v57 = (v38 >> 37) - ((2 * (v38 >> 37)) & 0x9A046D24D876B7B6) - 0x32FDC96D93C4A425;
  v58 = ((2 * ((v57 ^ 0x32FDC96D93C4A424) + 1)) & 0x2F7D7C7E2FFDFFF2)
      + (((v57 ^ 0x32FDC96D93C4A424) + 1) ^ 0x97BEBE3F17FEFFF9);
  *((_QWORD *)&v38 + 1) = v58 + 0x40E8010007;
  *(_QWORD *)&v38 = v58 + 0x684141C0E8010007;
  v59 = (v38 >> 39) - ((2 * (v38 >> 39)) & 0x5F8583EBE41BA870) + 0x2FC2C1F5F20DD438;
  v60 = ((v57 ^ 0x89E96877E8825C4FLL)
       - ((2 * (v57 ^ 0x89E96877E8825C4FLL) + 0x76294234F68DF0D8) & 0x9E91F084E13F9A12)
       - 0x75A266A314193A8BLL) ^ v57;
  *((_QWORD *)&v38 + 1) = v60 ^ 0x501CA496D2;
  *(_QWORD *)&v38 = v60 ^ 0x24ACE8000000000;
  v61 = ((v38 >> 39) - ((2 * (v38 >> 39)) & 0x322C280665319FBELL) + 0x191614033298CFDFLL) ^ v59;
  *((_QWORD *)&v38 + 1) = v61 ^ 0x603551;
  *(_QWORD *)&v38 = v61 ^ 0xED875B05DA000000;
  v62 = (((v38 >> 25) - ((2 * (v38 >> 25)) & 0xBA5CD0E78B599EFELL) + 0x5D2E6873C5ACCF7FLL) ^ 0x27B9331E6C6BB6F2)
      - 0x44EB5EE584B90795;
  v63 = ((v62 ^ 0xFFEFFEFFAAADED53) + 0x100100555212ADLL + ((2 * v62) & 0xFFDFFDFF555BDAA6)) & (v47 ^ 0x9CC8F02B4BC361B4);
  v64 = v55 ^ 0xC6B877E2E6560D99 ^ (v63 - ((2 * v63) & 0x29ED08E5F6572FA8) - 0x6B097B8D04D4682CLL);
  v65 = v48 ^ v64;
  v66 = ((v48 ^ v64) >> 39) & 0x1DFD197;
  v67 = ((v65 >> 38) & 0x339230C ^ 0x83209E753E5857D4)
      + (v66 ^ 0x3E2F30454091D415)
      + ((((v65 >> 39) ^ 0x2647A0C160D29A0CLL) + 1) ^ 0xFBFDFFDF7BFD7F7ELL)
      + ((2 * (((v65 >> 39) ^ 0x2647A0C160D29A0CLL) + 1)) & 0x448B4182C7FAFEFCLL);
  v68 = v67 - ((2 * v67 + 0x38D52149488B8928) & 0x427D29A21C649B58) - 0x4256DA8A4D87EDC0;
  v69 = (((v48 ^ v64) & 0x2647A0C161DFD197 ^ 0x1E0680806160399ELL)
       + ((v48 ^ v64) & 0x2047804061D34196 ^ 0x61D1464A1A934400)
       - (((v48 ^ v64) & 0x2647A0C161DFD197 ^ 0x1E0680806160399ELL) & 0x2047804061D3699ELL)) ^ ((v48 ^ v64) >> 61) ^ (((v48 ^ v64) & 0xD9B85F3E9E202E68 ^ 0x88A24DC03836CACCLL) + ((v48 ^ v64) & 0x91200C000A200E40 ^ 0x1500200003C80410) - (((v48 ^ v64) & 0xD9B85F3E9E202E68 ^ 0x88A24DC03836CACCLL) & 0x91200C802A36CEC4)) ^ (((v65 << 25) ^ 0x1272417FF2000000) - ((2 * ((v65 << 25) ^ 0x1272417FF2000000)) & 0x12275B5340000000) - 0x76EC52565E63D4A5) ^ (((8 * v65) ^ 0x352E6C49C905FFC8) - 2 * (((8 * v65) ^ 0x352E6C49C905FFC8) & 0x430A649D61BF3F18 ^ (8 * v65) & 0x10) - 0x3CF59B629E40C0F1) ^ (((2 * (v66 ^ 0x8F8086)) & 0x16822ELL) - (v66 ^ 0x8F8086) + 0x3161764A4DF4BCA0) & 0x2040400807FFD7FFLL ^ v68;
  v70 = v69 ^ 0x2F91F7EEFA3CE3A8;
  v71 = v43 ^ 0xD4CAA83B79D40088 ^ v54;
  v72 = ((v32 & (v55 ^ 0x9958EE68ABDA022FLL))
       - ((2 * (v32 & (v55 ^ 0x9958EE68ABDA022FLL))) & 0x36CC39BCCD87311ALL)
       + 0x1B661CDE66C3988DLL) ^ v71;
  *((_QWORD *)&v38 + 1) = v72 ^ 0x8CF5F20D7DLL;
  *(_QWORD *)&v38 = v72 ^ 0x7CB7820000000000;
  v73 = (v38 >> 41) - ((2 * (v38 >> 41)) & 0xB654BFC7ABF5D690) + 0x5B2A5FE3D5FAEB48;
  *((_QWORD *)&v38 + 1) = v72 ^ 0xFFFFFFFD;
  *(_QWORD *)&v38 = v72 ^ 0x7CB7828CF5F20D00;
  v74 = v73 ^ v72 ^ ((v38 >> 7) - ((2 * (v38 >> 7)) & 0xEC360457D04092D8) + 0x761B022BE820496CLL);
  v75 = v64 ^ v72;
  v76 = (((v75 << 45) ^ 0xEF48C00000000000)
       - ((2 * ((v75 << 45) ^ 0xEF48C00000000000)) & 0x3E15400000000000)
       - 0x60F544C86A48BB61) ^ 0x9F0ABB3795B7449FLL | (v75 >> 28) ^ 0x7E1A53873;
  v77 = ((v75 << 33) ^ 0x781EF48C00000000)
      - ((2 * ((v75 << 33) ^ 0x781EF48C00000000)) & 0xB84A82BC00000000)
      - 0x23DABEA1EA5B8741;
  *((_QWORD *)&v38 + 1) = v75 ^ 0xA46;
  *(_QWORD *)&v38 = v75 ^ 0x7E1A53873C0F7000;
  v78 = ((v77 & 0xFFF0000000000000 ^ 0xC39854102020B10)
       + (v77 & 0xC900000000000000 ^ 0xC1066800E8E4F0ECLL)
       - ((v77 & 0xFFF0000000000000 ^ 0xC39854102020B10) & 0xC909004002000910)) ^ ((v38 >> 12)
                                                                                       - ((2 * (v38 >> 12)) & 0xA4AB499836E82788)
                                                                                       + 0x5255A4CC1B7413C4);
  *((_QWORD *)&v38 + 1) = v78 ^ (v75 >> 31) ^ 0xACC939F94ECB0;
  *(_QWORD *)&v38 = v78 ^ 0x7EE0000000000000;
  v79 = (((v75 << 36) ^ 0xC0F7A46000000000)
       - ((2 * ((v75 << 36) ^ 0xC0F7A46000000000)) & 0xCA8BECA000000000)
       - 0x1ABA09A639F21B01) ^ v74 ^ (v76 - ((2 * v76) & 0xDF7407B217B18B02) - 0x1045FC26F4273A7FLL) ^ ((v38 >> 52) - ((2 * (v38 >> 52)) & 0x87A79059FFDEA8) - 0x7FBC2C37D30010ACLL);
  v80 = v74 ^ 0x5186DF44C828AF59;
  v81 = v47 ^ (((v71 ^ 0xFDE9A2AA12B1E0B5) & (v43 ^ 0x9F7A4CFC249D0388))
             - ((2 * ((v71 ^ 0xFDE9A2AA12B1E0B5) & (v43 ^ 0x9F7A4CFC249D0388))) & 0xE38A6DD5207AFD00)
             + 0x71C536EA903D7E80);
  v82 = (((v71 ^ 0x2165D55ED4E1F4ALL) & (v55 ^ 0x66A711975425FDD0))
       - ((2 * ((v71 ^ 0x2165D55ED4E1F4ALL) & (v55 ^ 0x66A711975425FDD0))) & 0xBD76B128442782C6)
       - 0x2144A76BDDEC3E9DLL) ^ v43 ^ 0xD4CAA83B79D40088 ^ v81 ^ 0xC77278E205E4E9ACLL;
  v83 = ((v82 & 0xF80CDC0F4602037BLL ^ 0xA0001C0E4002032ALL)
       - ((2 * (v82 & 0xF80CDC0F4602037BLL ^ 0xA0001C0E4002032ALL)) & 0x60182812080400D2)
       - 0x4EA0EA664BF92B97) ^ 0xA3C68D99BC447329;
  v84 = ((2 * v83) | 0xDAB6BC9302F4B306) - v83 - 0x6D5B5E49817A5983;
  *((_QWORD *)&v38 + 1) = v84 ^ 0x1E4C8D3AFDA0;
  *(_QWORD *)&v38 = v84 ^ 0x67CA400000000000;
  v85 = (v38 >> 46) - ((2 * (v38 >> 46)) & 0x87747890DC2E7798) - 0x3C45C3B791E8C434;
  v86 = (v82 & 0x7F323F0B9FDFC84 ^ 0xFA0CDC1FC7F71BFBLL)
      - 0x5015BA31A8C49D47
      + ((2 * ((v82 & 0x7F323F0B9FDFC84 ^ 0xFA0CDC1FC7F71BFBLL) & 0x7E201C011396084 ^ (v82 | 0xFFFFFFFFFFFFFFFBLL))) ^ 0x5010881C8C040479);
  *((_QWORD *)&v38 + 1) = v86 ^ 0x5CE573B62B8;
  *(_QWORD *)&v38 = v86 ^ 0xAFEA400000000000;
  v87 = v85 ^ ((v38 >> 46) - ((2 * (v38 >> 46)) & 0x2B4EEEF70CE676EELL) + 0x15A7777B86733B77);
  *((_QWORD *)&v38 + 1) = v85 ^ ((v38 >> 46)
                                             - ((2 * (v38 >> 46)) & 0xCE676EE)
                                             - 2039268489) ^ 0x154D0;
  *(_QWORD *)&v38 = v87 ^ 0x4E67858BAC4C0000;
  v88 = (v38 >> 18) - ((2 * (v38 >> 18)) & 0x38173FFA99221E1ELL) + 0x1C0B9FFD4C910F0FLL;
  v89 = (v88 >> 17) ^ 0x2488BCF1FF9FLL;
  v90 = (v88 >> 10) ^ 0x12445E78FFCFC7;
  v91 = v90 + (v88 ^ 0xB6FCC242783F2E3DLL ^ (v88 >> 10)) + 1;
  v92 = (v88 ^ ((v88 ^ 0xB6EE861C00C0E1FALL)
              - ((2 * (v88 ^ 0xB6EE861C00C0E1FALL) + 2) & 0xBAA8176F235F081ELL)
              + 0x5D540BB791AF8410) ^ 0x36CD494D2772FFDELL ^ (v91
                                                              - ((2 * v91) & 0x4510763293C4CBA8)
                                                              + 0x22883B1949E265D4))
      + v90;
  v93 = v92 - ((2 * v92) & 0xA45C4018CF67349ELL) + 0x522E200C67B39A4FLL;
  v94 = v93 ^ (((v88 << 54) ^ 0xC3C0000000000000)
             - ((2 * ((v88 << 54) ^ 0xC3C0000000000000)) & 0xE280000000000000)
             + 0x7147FF3B1E02CB53);
  v95 = ((v88 << 47) ^ 0x70A55DF475FFDFFBLL)
      + 0x58220B8A002005
      + ((v88 << 48) & 0xFF4F000000000000 ^ 0x1E05000000000000);
  v96 = 2 * (((v94 ^ 0x61E9800000000000) & v95) - ((2 * ((v94 ^ 0x61E9800000000000) & v95)) & 0x1354000000000000))
      - 0x6CAB7D2CE57FA4E6;
  v97 = (((v94 ^ 0x61E9DF3779B1511CLL) + v95) ^ 0xCFFFDFAFBFFBFCF9)
      + ((2 * ((v94 ^ 0x61E9DF3779B1511CLL) + v95)) & 0x9FFFBF5F7FF7F9F2)
      + (v96 ^ 0x9A541073DA804539)
      + 0x26FF8DAF8003E4E5
      + ((2 * v96) & 0xEDFEDABE7FFFC3B8 ^ 0xDB57FF59CAFF7DCFLL);
  v98 = ((v97 | v89) - ((2 * (v97 | v89)) & 0x44A4D33683727FAELL) + 0x2252699B41B93FD7) ^ (((v93 ^ 0x200C67B39A4FLL) & v89)
                                                                                           - ((2
                                                                                             * ((v93 ^ 0x200C67B39A4FLL) & v89)) & 0x498FCBF8FAELL)
                                                                                           + 0x23C824C7E5FC7D7);
  v99 = v98 ^ 0x206EEBD73FE6F800;
  v100 = 2
       * (((v98 ^ 0x206EEBD73FE6F800) & v80) - ((2 * ((v98 ^ 0x206EEBD73FE6F800) & v80)) & 0x62DF55A84EF318BALL))
       + 0x62DF55A84EF318BALL;
  v101 = (((v98 ^ 0x206EEBD73FE6F800) + v80) ^ 0xD77FEF2BFFBD3EA5)
       + ((2 * ((v98 ^ 0x206EEBD73FE6F800) + v80)) & 0xAEFFDE57FF7A7D4ALL)
       + (v100 ^ 0xEA9A3524AFFB1123)
       + ((2 * v100) & 0xEF753EE63DEFECCCLL ^ 0x3ACBD5BFE219DFBBLL)
       + 1;
  v102 = v101 - ((2 * v101 + 0x4075608E3E756F84) & 0xECEB042363818E60) + 0x16B03258D0FB7EF2;
  v103 = v102 ^ (((v79 ^ 0xBC90EFF0FC54FDD6) & (v69 ^ 0x2F91F7EEFA3CE3A8))
               - ((2 * ((v79 ^ 0xBC90EFF0FC54FDD6) & (v69 ^ 0x2F91F7EEFA3CE3A8))) & 0x8B3E5ED522FC3E38)
               + 0x459F2F6A917E1F1CLL);
  v104 = (v101 - ((2 * v101 - 124) & 0x60) - 14) ^ (((v79 ^ 0xD6) & (v69 ^ 0xA8))
                                                  - ((2 * ((v79 ^ 0xD6) & (v69 ^ 0xA8))) & 0x38)
                                                  + 28) ^ 0xEE;
  if ((v103 ^ 0x18699B4EDA73ECE5) == 0xD147D2DAAD31FDDLL)
    v104 = 41;
  v105 = (v104 & (v103 ^ 0x38)) - ((2 * (v104 & (v103 ^ 0x38))) & 0xB8) + 92;
  v106 = ((((v103 ^ 0x157DE66370A0F338) >> (v105 ^ 0x5Cu))
         - ((2 * ((v103 ^ 0x157DE66370A0F338) >> (v105 ^ 0x5Cu))) & 0x77EC0E1533910B1ELL)
         + 0x3BF6070A99C8858FLL) ^ 0x3BF6070A99C8858FLL) >> (v105 ^ 0x75u);
  LODWORD(v106) = v106 - ((2 * v106) & 0x84F75B12) + 1115401609;
  v107 = v103 ^ 0x18699B4EDA73ECE5 ^ (v103 >> 7) ^ (((v103 << 23) ^ 0x31B850799C000000)
                                                    - ((2 * ((v103 << 23) ^ 0x31B850799C000000)) & 0xCBF3E7E119000000)
                                                    + 0x65F9F3F08C9A3000) ^ (((v103 << 57) ^ 0x7000000000000000)
                                                                             - ((2
                                                                               * ((v103 << 57) ^ 0x7000000000000000)) & 0x6000000000000000)
                                                                             + 0x3169C7112421EBAFLL) ^ ((v106 ^ 0x701C4366022B8549) + (v106 & 0x4E3967AE ^ 0xC832C984C1062A6) - ((v106 ^ 0x701C4366022B8549) & 0x1800204E3967AELL));
  v108 = v107 ^ 0xCBD0521A4CCFB59FLL;
  v109 = ((v81 ^ 0x7DB74EA18D5E20F1)
        - ((2 * (v81 ^ 0x7DB74EA18D5E20F1) - 0x217510C0AD407F8ALL) & 0xB98BFB23AD9D649ELL)
        - 0x33F48ACE7FD18D76) ^ v81 ^ 0xC77278E205E4E9ACLL ^ ((v81 ^ 0x12F2393E2401E0CBLL)
                                                              - ((2 * (v81 ^ 0x12F2393E2401E0CBLL) + 2) & 0x7C6B20BA85BAEF0ALL)
                                                              + 0x3E35905D42DD7786);
  v110 = (v109 ^ 0x488FD3EF4A093352)
       - 2 * (((v109 ^ 0x488FD3EF4A093352) + 0x2F45779FA95FC03ALL) & 0x34C9619BD0279509 ^ v109 & 1)
       + 0x240ED93B79875542;
  v111 = ((v110 << 58) ^ 0x2000000000000000)
       - ((((v109 ^ 0x4A093352)
          - 2 * (((v109 ^ 0x4A093352) - 1453342662) & 0xD0279509 ^ v109 & 1)
          + 2038912354) << 59) & 0xBFFFFFFFFFFFFFFFLL)
       - 0x211DDB0BF30C2EC8;
  v112 = (v109 << 63) - 0x4EEC0B409306D574;
  v113 = v111 ^ ((v112 ^ 0xB113F4BF6CF92A8CLL)
               + (v112 ^ 0x900E2FB49FF5044BLL ^ v111)
               + 1
               - ((2 * ((v112 ^ 0x900E2FB49FF5044BLL ^ v111) + 1)) & 0xDF180C93F3F720F8)
               - 0x1073F9B606046F84) ^ ((v111 ^ 0x211DDB0BF30C2EC7)
                                        - ((2 * (v111 ^ 0x211DDB0BF30C2EC7) + 2) & 0xAABBC609A8878CC2)
                                        + 0x555DE304D443C662) ^ 0x6433C1B9214B8725;
  v114 = v110 ^ (v110 >> 1) ^ (v110 >> 6) ^ (v113
                                           + (v112 & 0x8000000000000000 ^ 0xA046DBFC714D56A9)
                                           - ((2 * v113) & 0x408DB7F8E29AAD52)) ^ v69;
  v115 = v114 ^ 0xE3A9D8C2DC0574D9;
  *((_QWORD *)&v116 + 1) = v98 ^ 0x6BD73FE6F800;
  *(_QWORD *)&v116 = v97;
  v117 = ((v116 >> 47) - ((2 * (v116 >> 47)) & 0x9B82F3119747CD56) + 0x4DC17988CBA3E6ABLL) ^ 0xDA2C1FA06C840000;
  *((_QWORD *)&v116 + 1) = ((v116 >> 47) - ((2 * (v116 >> 47)) & 0x9747CD56) - 878451029) ^ 0x1AD36;
  *(_QWORD *)&v116 = v117;
  v118 = (v116 >> 17) - ((2 * (v116 >> 17)) & 0xE9BBAB4ADB523A72) - 0xB222A5A9256E2C7;
  if (v22)
    v119 = v118 ^ 0xD1131E53DEBD4EAALL ^ v102;
  else
    v119 = v102;
  v120 = ((v119 ^ 0x76758211B1C0C730) & (v118 ^ 0x2EECE1AC2142B155))
       - ((2 * ((v119 ^ 0x76758211B1C0C730) & (v118 ^ 0x2EECE1AC2142B155))) & 0x89DAD81C30E18860)
       + 0x44ED6C0E1870C430;
  v121 = ((v120 ^ 0xBB1293F1E78F3BCFLL)
        - ((2 * (v120 ^ 0xBB1293F1E78F3BCFLL) + 2) & 0x50EBBD3C93D884ECLL)
        - 0x578A2161B613BD89) ^ v120 ^ (v115
                                        + (v114 ^ 0x58BB4B333B8A4F16 ^ v120)
                                        + 1
                                        - ((2 * (v115 + (v114 ^ 0x58BB4B333B8A4F16 ^ v120) + 1)) & 0xDFCB2821600B2BFALL)
                                        - 0x101A6BEF4FFA6A03);
  v122 = (((2 * (v121 & 0x3807CE3A8A3D8537 ^ 0x58140F3080090D39)) | 0x1230F7B9CC47118)
        - (v121 & 0x3807CE3A8A3D8537 ^ 0x58140F3080090D39)
        - 0x9187BDCE62388CLL) ^ 0x58808E8DCE723486;
  v123 = ((v121 & 0xC7F831C575C27AC8 ^ 0x7B0014045C20080)
        + (v121 & 0x690314001027048 ^ 0x100270320039715ELL)
        - ((v121 & 0xC7F831C575C27AC8 ^ 0x7B0014045C20080) & 0x690314001027048)) ^ 0xA99F93221396156;
  v124 = (((2 * v123) | 0x6CF525C845AB1C1CLL) - v123 + 0x49856D1BDD2A71F2) ^ 0xAEB93B6426958C0ELL | v122;
  v125 = v115 - 0x2F376FE9E1F997F7 + (v124 ^ 0x2F376FE9E1F997F7);
  v126 = v125
       + ((2 * v124) & 0x5E6EDFD3C3F32FEELL)
       - ((2 * (v125 + ((2 * v124) & 0x5E6EDFD3C3F32FEELL))) & 0xA1C9F283C3DEAF5ELL)
       - 0x2F1B06BE1E10A851;
  v127 = (((v102 ^ 0x898A7DEE4E3F38CFLL) & (v79 ^ 0x436F100F03AB0229))
        - ((2 * ((v102 ^ 0x898A7DEE4E3F38CFLL) & (v79 ^ 0x436F100F03AB0229))) & 0xFE0A1911670A12DELL)
        - 0xFAF3774C7AF691) ^ v98 ^ v126;
  v128 = v127 ^ (v127 >> 17) ^ (v127 >> 10) ^ (((v127 << 47) ^ 0x36FB000000000000)
                                             - ((2 * ((v127 << 47) ^ 0x36FB000000000000)) & 0xEE66000000000000)
                                             - 0x8CCD03E857E7618) ^ (((v127 << 54) ^ 0x7D80000000000000)
                                                                     - ((2 * ((v127 << 54) ^ 0x7D80000000000000)) & 0x7500000000000000)
                                                                     + 0x3A9130B7934EED93);
  v129 = v128 ^ 0xD049F255E6494752;
  v130 = v128 ^ 0xD049F255E6494752 ^ v108;
  v131 = ((2 * (v79 & 0xFFFFFFFFFBFFFFFFLL ^ 0x8FD2D9F769C2EE2BLL)) | 0x85AA35407739D0ECLL)
       - (v79 & 0xFFFFFFFFFBFFFFFFLL ^ 0x8FD2D9F769C2EE2BLL)
       - 0x42D51AA03B9CE876;
  v132 = ((2 * (v115 & (v69 ^ 0xD06E081105C31C57))) & 0x7BFDF9C7CFFD93AELL)
       + (v115 & (v69 ^ 0xD06E081105C31C57) ^ 0xBDFEFCE3E7FEC9D7);
  v133 = (v79 & 0x4000000 | ((((unint64_t)(v79 & 0x4000000) >> 26) & 1) << 27)) ^ 0xBB3FFFDCF776FFFFLL;
  v134 = ((v133 + 0x44C0002308890001) & (v132 + 0x4201031C18013629)) == ((2
                                                                            * ((v133 + 0x44C0002308890001) & (v132 + 0x4201031C18013629))) & 0x7322CE1E98000000);
  v135 = v133 + 0x7EE71DAF4CEFEAEELL;
  v136 = 0xF5671D693BDDEAECLL - v133;
  if (v134)
    v136 = v135;
  v137 = (v136 + v132 - ((2 * (v136 + v132) + 0xFB3CB1FA7349678) & 0xC61A067D1A529E30) + 0x6AE6E8CE60C39A54) ^ v131;
  v138 = v137 ^ 0x6E4B88DAAD81CCB0;
  v139 = v70 + (v69 ^ 0x534050AD749E9B8BLL ^ v137 ^ 0x6E4B88DAAD81CCB0) + 1;
  v140 = (v139 - ((2 * v139) & 0xBB9A3A27303FB0D8) - 0x2232E2EC67E02794) ^ v137 ^ 0x6E4B88DAAD81CCB0;
  v141 = v140 ^ 0x5EE3400000000000;
  *((_QWORD *)&v142 + 1) = v140 ^ 0x5AFE9425FB0;
  *(_QWORD *)&v142 = v140 ^ 0x5EE3400000000000;
  v143 = (v142 >> 45) - ((2 * (v142 >> 45)) & 0x769ED029280DFDCCLL) - 0x44B097EB6BF9011ALL;
  v144 = ((2 * ((v137 ^ 0x129A2F992323B493) + 1)) & 0xF77FE6F7E8FBE7BELL)
       + (((v137 ^ 0x129A2F992323B493) + 1) ^ 0x7BBFF37BF47DF3DFLL);
  *((_QWORD *)&v142 + 1) = v144 + 0xC840B820C21;
  *(_QWORD *)&v142 = v144 - 0x7BBFF37BF47DF3DFLL;
  v145 = v143 ^ ((v142 >> 45) - ((2 * (v142 >> 45)) & 0x426A83F2C2DDE44ALL) + 0x213541F9616EF225);
  *((_QWORD *)&v142 + 1) = v145 ^ 0x60F32;
  *(_QWORD *)&v142 = v145 ^ 0xC1783D9F89780000;
  v146 = (((v142 >> 19) - ((2 * (v142 >> 19)) & 0x7D01A04F45E8B894) - 0x417F2FD85D0BA3B6) ^ 0x7EFEFB47E07A13C8)
       + v70;
  v147 = v146 - ((2 * v146) & 0x5843D1A8D5DF4CE4) + 0x2C21E8D46AEFA672;
  v148 = (v99 & (v114 ^ 0x1C56273D23FA8B26))
       - ((2 * (v99 & (v114 ^ 0x1C56273D23FA8B26))) & 0xC2970B78C31301E0)
       - 0x1EB47A439E767F10;
  v149 = v147 ^ v148;
  v150 = (((v147 ^ v148) >> 39) ^ 0x7FE5FEFBDE552A5DLL)
       - 0x7FE5FEFBDFAB0F77
       + (((v147 ^ v148) >> 38) & 0x3561EEE ^ 0x3540A44);
  *((_QWORD *)&v142 + 1) = v147 ^ v148 ^ 0x1F129550F525F43ELL;
  *(_QWORD *)&v142 = v147 ^ ~v148;
  v151 = v147 ^ v148 ^ 0xB829F951EA25693ELL ^ ((v142 >> 61)
                                             - ((2 * (v142 >> 61)) & 0x8E76D8023E013A00)
                                             + 0x473B6C011F009D00);
  v152 = 2 * ((v151 & v150) - ((2 * (v151 & v150)) & 0x6055E29E6EFB0036)) + 0x6055E29E6EFB0036;
  v153 = ((v151 + v150) ^ 0x2F7FE99EB9EBFFDFLL)
       + ((2 * (v151 + v150)) & 0x5EFFD33D73D7FFBELL)
       + (v152 ^ 0xE054E29A6EF200B7)
       + ((2 * v152) & 0xFFFDFFF7FFEDFEFCLL ^ 0x3F563ACB221BFF93);
  v154 = (v153 + 1 - 2 * ((v153 + 0x107F165D460AFFA1) & 0x120145802D55FAF7 ^ (v153 + 1) & 4) + 0x62805BDD7360FA93) ^ (((v149 << 25) ^ 0xA1EA4BE87C000000) - ((2 * ((v149 << 25) ^ 0xA1EA4BE87C000000)) & 0x6F18F2FB50000000) - 0x4873868256CF3FE8);
  v155 = v154 ^ 0xA58D3CFD84653AEBLL;
  v156 = v103 ^ v138;
  v157 = (((v103 ^ v138) << 36) ^ 0x448D9FA000000000)
       - ((2 * (((v103 ^ v138) << 36) ^ 0x448D9FA000000000)) & 0xDE84908000000000)
       + 0x6F42484D71C0BFE7;
  v158 = ((v156 << 45) ^ 0x44D0BFFBDFB3E3ECLL)
       - 0x5FEFFFFBDFB3E3ECLL
       + ((v156 << 46) & 0xBFDFC00000000000 ^ 0x365E800000000000);
  v159 = 2
       * ((v158 & (v103 ^ v138 ^ 0xDEC0200000000000))
        - ((2 * (v158 & (v103 ^ v138 ^ 0xDEC0200000000000))) & 0x71D0400000000000))
       - 0xE2FB2C3D6564F2ELL;
  v160 = v158 + (v156 ^ (v156 >> 28) ^ (v156 >> 19) ^ 0xDEC02F4BAED85897);
  v161 = (v160 ^ 0xEFFF2FEF43CEFEEFLL)
       + ((2 * v160) & 0xDFFE5FDE879DFDDELL)
       + (v159 ^ 0xF9D0173D099821D3)
       + ((2 * v159) & 0xEFFF4BFDBF9CDDFCLL ^ 0x1C5FF587ECEFBE5BLL);
  v162 = (v161 + 1 - 2 * ((v161 + 0x800760F9BFF7011) & 0x3EF8575A1F01200FLL ^ (v161 + 1) & 3) - 0x3907329644FF6FE4) ^ v157 ^ v108;
  v163 = (((v154 ^ 0xA58D3CFD84653AEBLL) & (v162 ^ 0xC0BC6F2C17111F71))
        - ((2 * ((v154 ^ 0xA58D3CFD84653AEBLL) & (v162 ^ 0xC0BC6F2C17111F71))) & 0x5F23FD7FCF332620)
        - 0x506E014018666CF0) ^ v130;
  v164 = -8192;
  if ((v126 & 0x2000) != 0)
    v164 = 0x2000;
  v165 = ((v164 + (v126 ^ 0xA9B113ADACA7EFA3)) ^ 0x7F97BFDDF94C7B9FLL)
       - 0x7F97BFDDF94C7B9FLL
       + ((2 * (v164 + (v126 ^ 0xA9B113ADACA7EFA3))) & 0xFF2F7FBBF298F73ELL);
  v166 = (v165 >> 6) - ((v165 >> 5) & 0x2730FA506D4369ALL) + 0x7D3987D2836A1B4DLL;
  v167 = (v166 | ((v125 << 63) - 0xBF336ED0DDAB694) ^ 0xF40CC912F225496CLL) ^ 0x7D3987D2836A1B4DLL;
  v168 = v126 ^ (v126 >> 1) ^ (((v126 << 58) ^ 0x8C00000000000000)
                             - ((v126 << 59) & 0x4000000000000000)
                             + 0x229CEFAB2D4CAE03) ^ (v167
                                                      - 2 * (v167 & 0x28C36A8357B848F4 ^ v166 & 0x30)
                                                      + 0x28C36A8357B848C4) ^ v154;
  v169 = (((v168 ^ 0x52BB23AE8465C4DELL) & (v154 ^ 0x5A72C3027B9AC514))
        - ((2 * ((v168 ^ 0x52BB23AE8465C4DELL) & (v154 ^ 0x5A72C3027B9AC514))) & 0x93B4DC8E686CB0C2)
        - 0x362591B8CBC9A79FLL) ^ v162;
  v170 = (((v169 ^ v163) << 45) ^ 0x13C1400000000000)
       - ((2 * (((v169 ^ v163) << 45) ^ 0x13C1400000000000)) & 0x449D400000000000)
       + 0x224EBB59523A9CF8;
  v171 = v169 ^ v163 ^ ((v169 ^ v163) >> 28) ^ ((v169 ^ v163) >> 19);
  v172 = ((v171 & 0x1460C71002082944 ^ 0x40C11000082904 | 0x8432B3231637F604)
        - (v171 & 0x1460C71002082944 ^ 0x40C11000082904 | 0x7BCD4CDCE9C809FBLL)
        + 0x7BCD4CDCE9C809FBLL) ^ 0x843180A9323FF898;
  v173 = (((2 * (v170 & 0x1460C00000000000 ^ 0x82C40B9D05B0F0F5)) & 0x401901A0A6040A0)
        - (v170 & 0x1460C00000000000 ^ 0x82C40B9D05B0F0F5)
        - 0x6203E84DD5752F59) ^ 0x4F7F1BAD829A9B0BLL ^ (((2 * v172) & 0x5F7799CEE8BE84F8)
                                                        - v172
                                                        + 0x504433188BA0BD81);
  v174 = ((v171 & 0x1800016504C621 ^ 0x44000200)
        - ((2 * (v171 & 0x1800016504C621 ^ 0x44000200)) & 0x10000242098C40)
        + 0xBCD54CBB9A5E7A4) ^ 0x4FCFD6DB49A1E624;
  v175 = v173 | ((v170 & 0x18000000000000 ^ 0x28887BAA40221002)
               + (v170 & 0x10000000000000 ^ 0x1100414A2C46EBCLL)
               - ((v170 & 0x18000000000000 ^ 0x28887BAA40221002) & 0x20100A0240200000)) ^ 0x3C4051DD08A7DA5 ^ (v174 - ((2 * v174) & 0x88B50421CE188942) + 0x4E5EF2B0E74C44BBLL);
  v176 = v175 ^ 0x6BFFFEFCFD7FFE77;
  v177 = (2 * v175) & 0xD7FFFDF9FAFFFCEELL;
  v178 = (v171 & 0xEB0738EE98F3109ALL ^ 0x200338A800C20000 | 0x766D86673AEEAA45)
       - (v171 & 0xEB0738EE98F3109ALL ^ 0x200338A800C20000 | 0x89927998C51155BALL)
       - 0x766D86673AEEAA46;
  v179 = (v169 ^ v163) & 0x80000000000000;
  if ((v170 & v179) != 0)
    v180 = 0x4C339A07C1E7B72ALL - (v179 | 0x2619CD03E0F3DB95);
  else
    v180 = v179 | 0x2619CD03E0F3DB95;
  v181 = ((2 * v170) & 0x120E400000000000 ^ 0xC400000000000)
       + (v170 & 0xEB87200000000000 ^ 0xBB31DDE6FFFFF3F7)
       + v180;
  v182 = v176
       + (v178 ^ 0x8F986E3EA4C1254CLL ^ (v181
                                       - ((2 * v181 + 0x15C6A2A3E1860E8) & 0x31E5D0323DFF3E00)
                                       - 0x265EE2D1C1F4308BLL))
       + v177
       - 0x6BFFFEFCFD7FFE77;
  *((_QWORD *)&v183 + 1) = v163 ^ 0x16EE45CEE92;
  *(_QWORD *)&v183 = v163 ^ 0x50A4860000000000;
  v184 = v182 - ((2 * v182) & 0xFDA487C1062BBEELL) + 0x7ED243E08315DF7;
  v185 = (v183 >> 41) - ((2 * (v183 >> 41)) & 0x497A63ADE346643CLL) + 0x24BD31D6F1A3321ELL;
  *((_QWORD *)&v183 + 1) = v163 ^ 0x12;
  *(_QWORD *)&v183 = v163 ^ 0x50A4876EE45CEE80;
  v186 = v185 ^ v163 ^ ((v183 >> 7) - ((2 * (v183 >> 7)) & 0x5E756534A6064ABCLL) + 0x2F3AB29A5303255ELL);
  v187 = ((((v169 ^ v163) << 36) ^ 0xD089E0A000000000)
        - ((2 * (((v169 ^ v163) << 36) ^ 0xD089E0A000000000)) & 0x69AC7CA000000000)
        + 0x34D63E5F4DD6F54CLL) ^ v186 ^ 0x44593B81801506E2 ^ v184;
  v188 = v168 ^ (((v128 ^ 0x4EBD536C6F3887B7) & (v107 ^ 0x2529DDDECAE0CAFALL))
               - ((2 * ((v128 ^ 0x4EBD536C6F3887B7) & (v107 ^ 0x2529DDDECAE0CAFALL))) & 0x7CA05277E6A0B044)
               - 0x41AFD6C40CAFA7DELL);
  v189 = v188 ^ (v188 >> 6) ^ (v188 >> 1) ^ ((v188 << 63) - 0x4594CBC30FB443F7) ^ (((v188 << 58) ^ 0x1800000000000000)
                                                                                   - ((2
                                                                                     * ((v188 << 58) ^ 0x1800000000000000)) & 0x5800000000000000)
                                                                                   - 0x5223E6FF7B8261E7);
  v190 = v154 ^ 0x9825A7B923ED1F31;
  if (!(v141 >> 45))
    v190 = 0x425764BB5877DA25;
  v191 = 2 * ((v190 & v155) - ((2 * (v190 & v155)) & 0x7836FB6F71208E4ELL)) + 0x7836FB6F71208E4ELL;
  v192 = ((v155 + 0x425764BB5877DA25) ^ 0x3B7F556377F197EBLL)
       + ((2 * (v155 + 0x425764BB5877DA25)) & 0x76FEAAC6EFE32FD6)
       + (v191 ^ 0x6811DE2DFD440CC7)
       + ((2 * v191) & 0xDFB1B57AE736FAECLL ^ 0x2FDE4BA51DFFE773)
       + 1;
  v193 = v169 ^ (((v168 ^ 0xAD44DC517B9A3B21) & (v128 ^ 0xB142AC9390C77848))
               - ((2 * ((v168 ^ 0xAD44DC517B9A3B21) & (v128 ^ 0xB142AC9390C77848))) & 0xDEB11D707BB8A168)
               + 0x6F588EB83DDC50B4) ^ (v192
                                        - ((2 * v192 + 0x68B30AB3F753CB18) & 0xF4C1718D10D113D2)
                                        + 0x2EBA3E2084126F75);
  v194 = ((v193 << 25) ^ 0xD4D2D8C364000000)
       - ((2 * ((v193 << 25) ^ 0xD4D2D8C364000000)) & 0x2498024570000000)
       + 0x124C0122B99E7AB6;
  *((_QWORD *)&v195 + 1) = v193 ^ 0x3A1C8EA696C61B2;
  *(_QWORD *)&v195 = v193 ^ 0xE000000000000000;
  v196 = ((v195 >> 59) - ((2 * (v195 >> 59)) & 0x5661423DE70C55ACLL) - 0x54CF5EE10C79D52ALL) ^ (((32 * (v193 >> 61)) ^ 0xB00001800211D1)
                                                                                              + 0x480642362085880BLL);
  *((_QWORD *)&v195 + 1) = v196 ^ 0xFFFFFFF3;
  *(_QWORD *)&v195 = v196 ^ 0xDA1D8C71773AA5A0;
  v197 = ((v195 >> 5) - ((2 * (v195 >> 5)) & 0x33DF7A7B4412C290) - 0x661042C25DF69EB8) ^ (((8 * v193) ^ 0x1D0E47534B630D90)
                                                                                            - 2
                                                                                            * (((8 * v193) ^ 0x1D0E47534B630D90) & 0x50093067BDF362B0 ^ (8 * v193) & 0x20)
                                                                                            + 0x50093067BDF36293);
  v198 = v197 ^ 0x2A5620DEDBDB69;
  v193 >>= 39;
  v199 = (v197 ^ 0x2A5620DEDBDB69)
       + (((v193 ^ 0xFFD5A9DF20E36707 ^ v197) + 1) ^ 0xD6DAD51F77FAE65ALL)
       + ((2 * ((v193 ^ 0xFFD5A9DF20E36707 ^ v197) + 1)) & 0xADB5AA3EEFF5CCB4)
       + 0x29252AE0880519A6;
  v200 = (v193 ^ ((v193 ^ 0xFFFFFFFFFE38BC6ELL)
                - ((2 * (v193 ^ 0xFFFFFFFFFE38BC6ELL) + 2) & 0x8FF6D0B3A3662B0ALL)
                - 0x380497A62E4CEA7ALL) ^ 0xB855FF16AFB56C8CLL ^ (v199
                                                                - ((2 * v199) & 0xFF5D2E9EFF827530)
                                                                + 0x7FAE974F7FC13A98))
       + v198;
  v201 = (v200 - ((2 * v200) & 0x8155DEE49AF7F966) - 0x3F55108DB284034DLL) ^ v194;
  v202 = (((v201 ^ 0x2D1911AF0B1A79FALL) & (v189 ^ 0x37E2779BF0271ED6))
        - ((2 * ((v201 ^ 0x2D1911AF0B1A79FALL) & (v189 ^ 0x37E2779BF0271ED6))) & 0x500589EC106B5AFALL)
        + 0x2802C4F60835AD7DLL) ^ v187;
  v203 = ((v201 ^ 0xD2E6EE50F4E58605) & (v187 ^ 0xD3BEDA3D7CF1A874))
       - ((2 * ((v201 ^ 0xD2E6EE50F4E58605) & (v187 ^ 0xD3BEDA3D7CF1A874))) & 0xD2DD5AEB2F2C2ECELL)
       - 0x1691528A6869E899;
  v204 = (((v130 ^ 0x700D2EFD0F5EBF80) & (v162 ^ 0x3F4390D3E8EEE08ELL))
        - ((2 * ((v130 ^ 0x700D2EFD0F5EBF80) & (v162 ^ 0x3F4390D3E8EEE08ELL))) & 0xDE83BBDC7A514614)
        + 0x6F41DDEE3D28A30ALL) ^ v129 ^ v188;
  v205 = v204 ^ 0xEC80F0D29663DB3FLL;
  v206 = (v204 ^ 0xEC80F0D29663DB3FLL) >> 10;
  v207 = ((v204 << 54) ^ 0x7C00000000000000)
       - ((2 * ((v204 << 54) ^ 0x7C00000000000000)) & 0x8680000000000000)
       - 0x3CAE0A6AADBEFCA6;
  v208 = ((v204 << 47) ^ 0xD2F8000000000000)
       - ((2 * ((v204 << 47) ^ 0xD2F8000000000000)) & 0x4AF9000000000000)
       + 0x257CD4C89A958E56;
  v209 = v204 ^ 0xA6685CCC9957A5F0;
  v210 = v204 ^ 0x136DB5066E1FDB3FLL ^ v206;
  if (v163 == 0x20632FBD1738D36FLL)
    v210 = v205;
  v211 = (2 * (v206 & 0x10000)) ^ 0x20000 | v206 & 0x10000;
  v134 = ((v211 - 0x10000) & (v210 ^ 0xE21796FAAF00000)) == ((2 * ((v211 - 0x10000) & (v210 ^ 0xE21796FAAF00000))) & 0x7AAB95AC2B12DE88);
  v212 = v211 | 0x3742210A42AC2971;
  v213 = 0x3742210A42AE2971 - v211;
  if (!v134)
    v212 = v213;
  v214 = v208 ^ (v205 >> 17) ^ v207 ^ ((v206 & 0xFFFFFFFFFFFEFFFFLL ^ 0xC006BA2A17A2C85FLL)
                                     - ((2 * (v206 & 0xFFFFFFFFFFFEFFFFLL ^ 0xC006BA2A17A2C85FLL)) & 0x800DA81474F0FF2CLL)
                                     - 0xA792BF5C587806ALL) ^ (v209
                                                             - 0x3742210A42AD2971
                                                             + v212
                                                             - ((2 * (v209 - 0x3742210A42AD2971 + v212)) & 0xD3ADA7C285E35B5CLL)
                                                             - 0x16292C1EBD0E5252);
  v215 = v214 ^ 0xA4E530DBD768B06DLL;
  v216 = v214 ^ 0xA4E530DBD768B06DLL ^ v186 ^ 0x44593B81801506E2;
  v217 = v203 ^ v216;
  v218 = v202 ^ v203 ^ v216;
  v219 = v201 ^ v189;
  v220 = (((v201 ^ v189 ^ 0x1AFB6634FB3D672CLL) & (v214 ^ 0x3A6903C3F6725DEELL))
        - ((2 * ((v201 ^ v189 ^ 0x1AFB6634FB3D672CLL) & (v214 ^ 0x3A6903C3F6725DEELL))) & 0xB5EB53E8ACDFFFC8)
        - 0x250A560BA990001CLL) ^ v201 ^ v202;
  v221 = ((2 * ((((2 * (v220 & 0x2D)) | 0x88) - (v220 & 0x2D) - 68) ^ 0x85)) & 0x2C)
       - ((((2 * (v220 & 0x2D)) | 0x88) - (v220 & 0x2D) - 68) ^ 0x85)
       + 105;
  v222 = ((((v218 ^ 0x65E763B9E0282B3DLL) << (v221 ^ 0x8Du))
         - ((2 * ((v218 ^ 0x65E763B9E0282B3DLL) << (v221 ^ 0x8Du))) & 0x3E0140C4733114B0)
         + 0x1F00A06239988A58) ^ 0x1F00A06239988A58) << (v221 ^ 0xA0u);
  v223 = v222 - ((2 * v222) & 0x1C4E4C4CC27D2184) - 0x71D8D9D99EC16F3ELL;
  v224 = ((((v217 << 57) ^ 0xA00000000000000)
         - ((2 * ((v217 << 57) ^ 0xA00000000000000)) & 0xB400000000000000)
         - 0x24C7102FF92CFC7FLL) ^ 0xDB38EFD006D30381 | (v217 >> 7) ^ (v217 >> 41)) ^ 0x8A5A2EC3CDB006;
  v225 = (v224 - ((2 * v224) & 0x64954A00B1CA5B32) + 0x324AA50058E52D99) ^ v217;
  v226 = v225 & 0xF7FFFFFFFFFFFFFFLL;
  v227 = ((v217 << 24) & 0x7DC1F6FEF7000000 ^ 0x61C1924685000000) + ((v217 << 23) ^ 0xE1B32DC394FF7D3);
  v228 = (v225 & 0x800000000000000 ^ 0xBBFF3FBE9F6BB77FLL) + 2 * (v225 & 0x800000000000000);
  v229 = ((v228 + 0x4400C04160944881) & (v227 + 0x411F04808430082DLL))
       - (((v228 + 0x4400C04160944881) & (v227 + 0x411F04808430082DLL)) >> 60 << 61);
  v230 = v228 + 0x57AAD76F6DD6CFB5;
  v231 = 0xCFA956ECACAE3EB3 - v228;
  if (!v229)
    v231 = v230;
  v232 = (v231 + v227 - ((2 * (v231 + v227) + 0x5AE9DAA4EDDB01F2) & 0xADEFAE532D7DF100) + 0x46CC47C0DAC7979) ^ v226;
  v233 = v218 ^ (v218 >> 19) ^ (v218 >> 28) ^ (((v218 << 36) ^ 0x282B3D000000000)
                                             - ((2 * ((v218 << 36) ^ 0x282B3D000000000)) & 0xA972B42000000000)
                                             + 0x54B95A1DB965A6E7) ^ v223 ^ v232 ^ 0x62F78E5FEBCB9AF8;
  v234 = v219 ^ (((v214 ^ 0xC596FC3C098DA211) & (v186 ^ 0x5B23042246FCF9D2))
               - ((2 * ((v214 ^ 0xC596FC3C098DA211) & (v186 ^ 0x5B23042246FCF9D2))) & 0x5A0FBD27EC6FC774)
               - 0x52F8216C09C81C46);
  v235 = (((unint64_t)~(_DWORD)v234 << 63) - 0x597FE7089459F6CFLL) ^ 0x75DCD4B2BE0A6B27 ^ (((v234 << 58) ^ 0xB400000000000000) - ((2 * ((v234 << 58) ^ 0xB400000000000000)) & 0xA000000000000000) - 0x2CA333BA2A539DEALL) | (v234 >> 6) ^ 0x971EF14C982A10;
  v236 = v235 - ((2 * v235) & 0x3A9C83B2C1C37908) + 0x1D4E41D960E1BC84;
  v237 = v220 ^ (v220 >> 61) ^ (v220 >> 39) ^ (((8 * v220) ^ 0x62A8C52B1F519D28)
                                             - ((2 * ((8 * v220) ^ 0x62A8C52B1F519D28)) & 0x8ECA5B2BE115D250)
                                             - 0x389AD26A0F7516D3) ^ (((v220 << 25) ^ 0x4AC7D4674A000000)
                                                                      - ((2 * ((v220 << 25) ^ 0x4AC7D4674A000000)) & 0xB4546A77CC000000)
                                                                      + 0x5A2A353BE6977206);
  v238 = v234 ^ (v234 >> 1) ^ v236 ^ v237 ^ 0xF5DF0FC4AE3C3AC8;
  v239 = (((v238 ^ 0x2EAF2C6C0EFD42CBLL) & (v237 ^ 0xEE5FFF48AD0FD43))
        - ((2 * ((v238 ^ 0x2EAF2C6C0EFD42CBLL) & (v237 ^ 0xEE5FFF48AD0FD43))) & 0x8FCA69079A3C3D26)
        + 0x47E53483CD1E1E93) ^ 0xA141ABF7731B9A9ELL ^ v233;
  v240 = ((2 * ((v216 ^ 0x81F60CBBE7F313B3) + 1)) & 0xCFB71DF6F6CFFF7ELL)
       + (((v216 ^ 0x81F60CBBE7F313B3) + 1) ^ 0x67DB8EFB7B67FFBFLL);
  v241 = v216 & 0x100;
  v242 = (((v240 + v241 - 0x67DB8EFB7B6800C0) & 0xE918766443144925)
        - 2 * ((v240 + v241 - 0x67DB8EFB7B6800C0) & 0x2910026042144804 ^ v240 & 4)
        - 0x46CE748C0D6325F6) ^ (v241 | 0xB9318B73F29CDA0ALL) | (((v240 + v241 + 0x182471048497FF40) & 0x16E7899BBCEBB6DALL)
                                                                 - ((2 * (v240 + v241 + 0x182471048497FF40)) & 0x50C013158852830)
                                                                 + 0x4B9E22D8EF529D18) ^ 0x4B9E22D8EF529D18;
  v243 = ((v242 - ((2 * v242) & 0x389FE139727EE462) - 0x63B00F6346C08DCFLL) ^ 0x63B00F6346C08DCELL) & (v187 ^ 0x2C4125C2830E578BLL);
  v244 = (v243 - ((2 * v243) & 0x3FD73AE8AC65F016) + 0x1FEB9D745632F80BLL) ^ v215 ^ v234;
  *((_QWORD *)&v245 + 1) = v244 ^ 0x323;
  *(_QWORD *)&v245 = v244 ^ 0x3A104935565DD000;
  v246 = v244 ^ (v244 >> 17) ^ (((v244 << 47) ^ 0xE991800000000000)
                              - ((2 * ((v244 << 47) ^ 0xE991800000000000)) & 0x1F14000000000000)
                              - 0x7075DFDDDF68DD61) ^ ((v245 >> 10)
                                                       - ((2 * (v245 >> 10)) & 0x2337620A86A64FE0)
                                                       + 0x119BB105435327F0);
  v247 = (((v238 ^ 0xD150D393F102BD34) & (v246 ^ 0xA401C51A11037D62))
        - ((2 * ((v238 ^ 0xD150D393F102BD34) & (v246 ^ 0xA401C51A11037D62))) & 0x13979B285403179CLL)
        + 0x9CBCD942A018BCELL) ^ v237 ^ 0xF5DF0FC4AE3C3AC8 ^ v239;
  *((_QWORD *)&v245 + 1) = v247 ^ 0x17A697134B742CDLL;
  *(_QWORD *)&v245 = v247 ^ 0x2000000000000000;
  v248 = v247 ^ (v247 >> 39) ^ ((v245 >> 61) - ((2 * (v245 >> 61)) & 0x729FD1C1EF4C4B8ELL) + 0x394FE8E0F7A625C7);
  v249 = v248 ^ (((v247 << 25) ^ 0xE2696E859A000000)
               - ((2 * ((v247 << 25) ^ 0xE2696E859A000000)) & 0x70B599AF88000000)
               + 0x385ACCD7C49098A8);
  BYTE3(v242) = ((v247 ^ (v247 >> 39) ^ ((v245 >> 61)
                                                     - ((2 * (v245 >> 61)) & 0xEF4C4B8E)
                                                     - 140106297) ^ ((((_DWORD)v247 << 25) ^ 0x9A000000)
                                                                   - ((2 * (((_DWORD)v247 << 25) ^ 0x9A000000)) & 0x88000000)
                                                                   - 997156696)) >> 24) ^ 0x6C;
  v250 = v232 ^ 0x62F78E5FEBCB9AF8 ^ v246 ^ 0xAEC2ACBB70476F85;
  v251 = v233 ^ 0x7C1EF82F587113E7;
  v252 = ((((2 * v233) ^ 0xF83DF05EB0E227CELL)
         - ((2 * ((2 * v233) ^ 0xF83DF05EB0E227CELL)) & 0x5A3B9C978DD67688)
         + 0x2D1DCE4BC6EB3B45) ^ 0xD2E231B43914C4BALL)
       + (v233 ^ 0x7C1EF82F587113E7);
  v253 = ((v252 ^ 0xAB1BDBA97B4BFFDBLL) + 0x54E4245684B40025 + ((2 * v252) & 0x5637B752F697FFB6)) & (v237 ^ 0xF11A000B752F02BCLL);
  v254 = (v253 - ((2 * v253) & 0xA8C5A58269AC9A3ELL) + 0x5462D2C134D64D1FLL) ^ v250;
  v255 = ((v254 & 0x18344480084A010 ^ 0x102BC05C04948C01) + (v254 & 0x68500A22A34A5228 ^ 0xA85410222A025249) - 2) ^ 0xB1BD901CAD168C50;
  v256 = (((2 * (v254 & 0x962CB1955C310DC7 ^ 0x1420A19000310502)) & 0x41960201860090CLL)
        - (v254 & 0x962CB1955C310DC7 ^ 0x1420A19000310502)
        - 0xADFBE120C34A6AFLL) ^ 0x74A0602373E548CBLL;
  v257 = (((2 * v256) | 0xDCF8BBECB4D120FCLL) - v256 + 0x1183A209A5976F82) ^ 0xEFD8CDBDDE668062 | v255;
  v258 = v257 - ((2 * v257) & 0x91622F72AA6264D0) - 0x374EE846AACECD98;
  v259 = (((v258 ^ 0x8F8526834A1A1A3FLL) + 0x4734313A1F2B2857) ^ 0x227F4DCBFEF3CBB3)
       + ((2 * v258) ^ 0x4FBA0C1430462479)
       + ((4 * v258) & 0x5E9F7DDAB71BDFF0 ^ 0xE1EBE7F7DFF7B70FLL)
       + ((2 * ((v258 ^ 0x8F8526834A1A1A3FLL) + 0x4734313A1F2B2857)) & 0x44FE9B97FDE79766)
       + 1;
  v260 = v258 ^ ((v258 ^ 0x374EE846AACECD97)
               - ((2 * (v258 ^ 0x374EE846AACECD97) + 2) & 0xF3386E5CBF290DA2)
               - 0x663C8D1A06B792ELL) ^ 0xA1DB33953C6B869DLL ^ (v259
                                                              - ((2 * v259 + 0x19A0E242B934488CLL) & 0x21EC26046D9C6448)
                                                              + 0x1DC684239368566ALL);
  v261 = v260 - ((2 * v260 + 0xE6862743E5650AELL) & 0x4B67EF1C3A7CC6EALL) - 0x1317D737C3967434;
  v262 = ((((v261 << 57) ^ 0xEA00000000000000)
         - ((2 * ((v261 << 57) ^ 0xEA00000000000000)) & 0x4000000000000000)
         - 0x5E1C01FBB24D5823) ^ 0xA1E3FE044DB2A7DDLL | (v261 >> 41) ^ (v261 >> 7)) ^ 0x14B67EF1C68A53DLL;
  v263 = (v262 - ((2 * v262) & 0xF0B8DEE5AD0BA446) - 0x7A3908D297A2DDDLL) ^ v261;
  v264 = ((v261 << 23) ^ 0x99E1E35CC77F33FFLL)
       - 0x5EEF7C6D7DFF33FFLL
       + ((v261 << 24) & 0xBDDEF8DAFB000000 ^ 0x8C1C384271000000);
  v265 = 2
       * (((v263 ^ 0x5DEF98FCCB800000) & v264) - ((2 * ((v263 ^ 0x5DEF98FCCB800000) & v264)) & 0x6F2FD0D3F5000000))
       + 0x6F2FD0D3F5386CCALL;
  v266 = v265 ^ 0x7F2ED8D7651809CBLL;
  v267 = (2 * v265) & 0xDFFDEFF6DFBF35FCLL ^ 0x21A25E5935CFEE6BLL;
  v268 = ((2 * ((v263 ^ 0x5DEF98FCCBBBB156) + v264)) & 0xF66E3BDD29A3FBD2)
       + (((v263 ^ 0x5DEF98FCCBBBB156) + v264) ^ 0x7B371DEE94D1FDE9);
  v269 = v266
       + v268
       + v267
       - ((2 * (v266 + v268 + v267) - 0x16704BE649E4C5D2) & 0xB741D0E218382EB2)
       + 0x5068C27DE729B470;
  v270 = (((v232 ^ 0xA190654839C8939CLL) & (v246 ^ 0x5BFE3AE5EEFC829DLL))
        - ((2 * ((v232 ^ 0xA190654839C8939CLL) & (v246 ^ 0x5BFE3AE5EEFC829DLL))) & 0xD4BEC1078E62B2ELL)
        + 0x6A5F6083C731597) ^ v238;
  v271 = v270 ^ (v270 >> 6) ^ (v270 >> 1) ^ (((unint64_t)~(_DWORD)v270 << 63) - 0x3321E2BA97CA982BLL) ^ (((v270 << 58) ^ 0x5400000000000000) - ((v270 << 59) & 0x4000000000000000) + 0x2210CDE39416A6AFLL);
  v272 = v270 ^ v246 ^ 0xAEC2ACBB70476F85 ^ ((v251 & (v250 ^ 0x365B7D494CB8E47CLL))
                                             - ((2 * (v251 & (v250 ^ 0x365B7D494CB8E47CLL))) & 0x960B55CE8815B8C2)
                                             - 0x34FA5518BBF5239FLL);
  *((_QWORD *)&v245 + 1) = v272 ^ 0x3D;
  *(_QWORD *)&v245 = v272 ^ 0xC02DB223333FD000;
  v273 = v272 ^ (v272 >> 17) ^ (((v272 << 47) ^ 0xE81E800000000000)
                              - ((2 * ((v272 << 47) ^ 0xE81E800000000000)) & 0x4D37000000000000)
                              - 0x596418E5319B765FLL) ^ ((v245 >> 10)
                                                       - ((2 * (v245 >> 10)) & 0x91D8CEE312A01642)
                                                       + 0x48EC677189500B21);
  v274 = v258 ^ v239;
  v275 = ((((v274 ^ 0x54E3590736882DE0) >> (v68 & 0x13))
         - ((2 * ((v274 ^ 0x54E3590736882DE0) >> (v68 & 0x13))) & 0xC137D8E2EAAA6D20)
         + 0x609BEC7175553690) ^ 0x609BEC7175553690) >> (v68 & 0x13 ^ 0x13);
  v276 = v274 ^ (v274 >> 28) ^ (((v274 << 45) ^ 0x5BC000000000000)
                              - ((2 * ((v274 << 45) ^ 0x5BC000000000000)) & 0x70F4000000000000)
                              + 0x387A0D03AB4A030CLL) ^ (((v274 << 36) ^ 0x6882DE0000000000)
                                                       - ((2 * ((v274 << 36) ^ 0x6882DE0000000000)) & 0x1D6DF10000000000)
                                                       - 0x7149077340EC2994) ^ (v275
                                                                                - ((2 * v275) & 0x1D1EE5AF8080A01ALL)
                                                                                - 0x71708D283FBFAFF3);
  v277 = (_BYTE *)STACK[0x210];
  v277[9] = BYTE5(v276) ^ 0xDE;
  v278 = STACK[0x208];
  *(_BYTE *)(v278 + 71) = BYTE1(v276) ^ 0x38;
  v277[73] = BYTE2(v276) ^ 0xA4;
  *(_BYTE *)(v278 + 4) = BYTE3(v276) ^ 0xAC;
  *(_BYTE *)(v278 + 73) = BYTE6(v276) ^ 0xA0;
  *(_BYTE *)(v278 + 33) = HIBYTE(v276) ^ 0x6C;
  *(_BYTE *)(v278 + 12) = v276 ^ 0xFE;
  LODWORD(v240) = ((2 * v271) & 0x5ED7B3EE ^ 0x1EC0932E) + (v271 ^ 0x201B9660);
  *(_BYTE *)(v278 + 56) = BYTE4(v276) ^ 0x5A;
  v279 = (((v248 >> 2) ^ 0x8020004101431832)
        - ((2 * ((v248 >> 2) ^ 0x8020004101431832)) & 0x202063014)
        - 0x61AA38C836504176) ^ 0x1E75C776C8ECA68ELL;
  v280 = (((((_BYTE)v248 << 6) - 62 - ((_BYTE)v248 << 7)) & 0xC0) - ((2 * (((_WORD)v248 << 6) + 450)) & 0x80) + 626) & 0x3C0 ^ 0x280 | v279;
  v281 = STACK[0x260];
  LOBYTE(v280) = *(_BYTE *)(STACK[0x260]
                          + ((v280 + 0x189109C9987EDC37 - 2 * (v280 & 0x189109C9987EDCBFLL ^ v279 & 0x27) + 97) ^ 0x189109C9987EDC37));
  v277[105] = BYTE4(v249) ^ 0x46;
  *(_BYTE *)(v278 + 29) = BYTE3(v242) ^ 0x6B;
  v277[124] = BYTE5(v249) ^ 0x4D;
  v277[13] = BYTE1(v248) ^ 0x93;
  *(_BYTE *)(v278 + 109) = ((v249 ^ 0xB5DAA0276CCC4B76) >> 48) ^ 0xB5;
  v277[78] = ((v249 ^ 0xB5DAA0276CCC4B76) >> 56) ^ 0x95;
  v277[66] = (((v280 ^ 0x49) - 73) ^ 0x6F) + ((2 * ((v280 ^ 0x49) - 73)) & 0xDF) - 111;
  v277[115] = BYTE2(v248) ^ 0x53;
  LODWORD(v249) = *(unsigned __int8 *)(STACK[0x278]
                                     + (((v240 - 120)
                                       + 825974108
                                       - ((2 * ((_DWORD)v240 + 136)) & 0x1A4)
                                       + 118) ^ 0x313B5D5Cu));
  *(_BYTE *)(v278 + 76) = BYTE5(v271) ^ 0xCC;
  v277[61] = BYTE1(v273) ^ 0xCB;
  LOBYTE(v248) = (((v268 + 1798177303) >> 15) & 0x1C) - ((v268 + 1798177303) >> 16) + 113;
  LODWORD(v249) = (v240 + ~(2 * ((v240 + 8) & 0x6F ^ v240 & 6)) - 14) ^ v249;
  *(_BYTE *)(v278 + 81) = BYTE2(v271) ^ 0x70;
  v277[1] = BYTE1(v271) ^ 0x4F;
  *(_BYTE *)(v278 + 96) = BYTE3(v271) ^ 0xF;
  DWORD1(v245) = v249 ^ 2;
  LODWORD(v245) = (v249 ^ 0xFFFFFFEF) << 24;
  v277[127] = BYTE4(v271) ^ 0x55;
  *(_BYTE *)(v278 + 95) = BYTE6(v271) ^ 0x67;
  *(_BYTE *)(v278 + 14) = v273 ^ 0x22;
  *(_BYTE *)(v278 + 77) = (127 - ((unint64_t)v245 >> 26)) ^ 0x7F;
  v282 = (((v273 >> 26) & 0xC0) - 0x6F568A9490EFFBB8 + ((2 * ((v273 >> 26) & 0xC0)) ^ 0x2010400A22000180)) ^ 0xB199B46D9D1D4F48;
  *(_BYTE *)(v278 + 42) = BYTE3(v273) ^ 0xAD;
  *(_BYTE *)(v278 + 17) = HIBYTE(v271) ^ 0xE9;
  v283 = ((v282 & 0x100000008010940) - (v282 | 0x83D9F4C7FA919D5DLL)) ^ 0x7D060A20096328A3 | (((v273 >> 34) & 0xB ^ 0x3181BC3702C60201)
                                                                                                + ((v273 >> 34) & 0x34 ^ 0xC0040C4002C15)
                                                                                                - 1) ^ 0x318DBC77C6C62E02;
  v277[57] = BYTE2(v273) ^ 0x1A;
  LOBYTE(v283) = *(_BYTE *)(v281
                          + ((v283 - ((2 * v283) & 0xB8004BB2DA2526ALL) + 0x45C0025D96D12935) ^ 0x45C0025D96D1299ALL));
  v277[129] = BYTE5(v273) ^ 0x52;
  v277[40] = BYTE1(v263) ^ 0xB1;
  v277[110] = v248 ^ 0x71;
  v277[99] = HIBYTE(v269) ^ 0xDB;
  v277[26] = BYTE4(v269) ^ 0x71;
  *(_BYTE *)(v278 + 37) = BYTE6(v273) ^ 0x5A;
  v277[113] = HIBYTE(v273) ^ 0x2E;
  LOBYTE(v263) = (((v263 & 0xED ^ 0x56) - ((2 * (v263 & 0xED ^ 0x56)) & 0xF7) - 5) ^ 0xFB) & (v263 ^ 0x56);
  *(_BYTE *)(v278 + 91) = (v263 + (~(2 * v263) | 0x65) - 50) ^ 0xCD;
  v277[36] = BYTE6(v269) ^ 0xA0;
  *v277 = BYTE3(v269) ^ 0xC;
  *(_BYTE *)(v278 + 78) = (((v283 ^ 0x49) - 73) ^ 0x79) + ((2 * ((v283 ^ 0x49) - 73)) & 0xF3) - 121;
  v277[53] = BYTE5(v269) ^ 0xE8;
  *(_DWORD *)(v278 + 112) = ((LODWORD(STACK[0x268]) + 1) ^ 0xB6F6F2FE)
                          + 1225329922
                          + ((2 * (LODWORD(STACK[0x268]) + 1)) & 0x6DEDE5FC);
  JUMPOUT(0x19C5EE88CLL);
}

void sub_19C5EE8C8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24) + 402930427 * (((a1 | 0xE198D957) - (a1 | 0x1E6726A8) + 510076584) ^ 0xFB2125EA);
  __asm { BR              X10 }
}

uint64_t sub_19C5EE990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8
                                             * ((2032 * (*(_DWORD *)(a3 - 0x23F2B20168D9FBDLL) == 480950058)) ^ v4))
                            - (v4 - 795)
                            + 201))();
}

uint64_t sub_19C5EE9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  _BOOL4 v8;

  v5 = *(_DWORD *)(a3 - 0x23F2B20168D9FC5) + 522124510;
  v6 = *(_DWORD *)(a3 - 0x23F2B20168D9FC9) + ((v4 - 137) ^ 0xE5B4E367);
  v7 = (v5 < 0x51D5C49F) ^ (v6 < v4 + 1372963790);
  v8 = v5 > v6;
  if (v7)
    v8 = v5 < 0x51D5C49F;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((2 * v8) | (8 * v8) | v4)) - 8))();
}

uint64_t sub_19C5EEA78(uint64_t result)
{
  _DWORD *v1;
  int v2;

  *v1 = v2;
  *(_DWORD *)(result + 28) = -480908257;
  return result;
}

uint64_t sub_19C5EEEF0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((1825 * (((a3 == v5 + ((4 * v4) ^ 0xE04) - 1004) ^ (v4 + 1)) & 1)) ^ v4)))();
}

uint64_t sub_19C5EEF2C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  _DWORD *v3;
  int v4;

  *(_QWORD *)(*(_QWORD *)(a1 + 16) - 0x7F8EAF18153CC80FLL) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1639 * (*v3 == v4)) ^ v2)) - 8))();
}

void sub_19C5EEF6C(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  int v14;

  *(_DWORD *)(*a1 - 0x1B72FA547311DF1CLL) = a3;
  *a14 = v14;
  JUMPOUT(0x19C5EEECCLL);
}

void sub_19C5EEF94()
{
  _DWORD *v0;

  *v0 = -480908257;
  JUMPOUT(0x19C5EEECCLL);
}

void sub_19C5EEFA4(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 8) - 1980347521 * (((a1 | 0x124FB9D2) - (a1 & 0x124FB9D2)) ^ 0xABABF92F);
  v2 = *(_QWORD *)a1;
  ((void (*)(uint64_t (*)(uint64_t), void (*)()))off_1E3D64110[v1 ^ 0x300])(off_1E3D64110[v1 ^ 0x346], sub_19C61D1F4);
  __asm { BR              X11 }
}

uint64_t sub_19C5EF064@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((*(_QWORD *)(*(_QWORD *)(v2 + 8 * (a1 ^ 0x3BE)) - 4) != 0)
                                          * ((a1 ^ 0x12D) - 614)) ^ a1))
                            - 4))();
}

uint64_t sub_19C5EF0A0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (v0 ^ 0x2FC)))(v1);
}

uint64_t sub_19C5EF0D0(_DWORD *a1, uint64_t a2)
{
  _BOOL4 v2;

  v2 = (*a1 + *(_DWORD *)(a2 + 4) + 1614587790) < 0xC9;
  return ((uint64_t (*)(void))(qword_1E3D5F9B0[v2 | (8 * v2) | 0x146u] - 8))();
}

uint64_t sub_19C5EF114@<X0>(uint64_t a1@<X8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((v1 == 1055960901) ^ 0x67Cu)) - 8))();
}

uint64_t sub_19C5EF154(_DWORD *a1)
{
  int v1;
  int v2;
  int v3;

  *((_BYTE *)a1 + (v3 ^ (v2 + 194)) + v1 + 4) = 59;
  *a1 = v1;
  return 0;
}

uint64_t sub_19C5EF178()
{
  return 4294925278;
}

uint64_t sub_19C5EF180@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  int v5;
  char v6;
  unsigned int v7;
  _BOOL4 v8;
  _BOOL4 v9;

  v6 = *(_BYTE *)(*(_QWORD *)(a2 + 8) + ((v5 - 1334) ^ 0xCFBF9378) + 809528770);
  *(_BYTE *)(a1 + (v3 + v4) + 4) = (v6 ^ 0xBF) + 2 * (v6 & 0x3F) + 124;
  v7 = *(_DWORD *)(a2 + 4) + 1257931846;
  v8 = v7 < 0x89EB338B;
  v9 = v7 > 0x89EB338C;
  if (v8)
    v9 = v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * ((1427 * !v9) ^ (v5 - 654))) - 8))();
}

void sub_19C5EF22C()
{
  JUMPOUT(0x19C5EF1B8);
}

uint64_t sub_19C5EF234(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(qword_1E3D5F9B0[(1917 * (*(_DWORD *)(a2 + 4) == 1055960902)) ^ 0x25Cu] - 12))();
}

uint64_t sub_19C5EF270(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = (**(unsigned __int8 **)(a2 + 8) ^ 0x73F8FFFF) + 2 * **(unsigned __int8 **)(a2 + 8) - 285217302;
  return 0;
}

uint64_t sub_19C5EF29C()
{
  return 4294925278;
}

void sub_19C5EF2A4()
{
  uint64_t v0;
  _DWORD v1[2];
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  qword_1EE425040 = 2004212711 * ((qword_1EE425000 + qword_1EE425040) ^ (unint64_t)&v0 ^ 0x7AEADA820E769987);
  qword_1EE425000 = qword_1EE425040;
  v1[1] = 1001500783 * (((v1 | 0xC62A4CC0) - (v1 & 0xC62A4CC0)) ^ 0x8C9EB374) + 479;
  v2 = 0x1EE424FC0;
  sub_19C5EF570((uint64_t)v1);
  __asm { BR              X9 }
}

uint64_t sub_19C5EF3C8@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((208 * (((a1 - ((2 * a1) & 0x39556E54) + v1 == v1) ^ 0xB7) & 1)) ^ 0x139u))
                            - 12))();
}

void sub_19C5EF418()
{
  uint64_t v0;
  int v1;
  int v2;

  **(_DWORD **)(v0 + 8 * (v2 - 1991494143)) = v1;
}

void sub_19C5EF570(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 4) - 1001500783 * ((a1 + 2025632320 - 2 * (a1 & 0x78BCB240)) ^ 0x32084DF4);
  __asm { BR              X10 }
}

uint64_t sub_19C5EF610@<X0>(unsigned int a1@<W8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;

  v4 = v2 ^ a1;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * (v2 ^ 0x731)))(200, 2354554103) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)((v5 * (v4 - 437)) ^ v2)) - (v4 ^ 0x1D3)))();
}

uint64_t sub_19C5EF660(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t result;
  int v9;
  int v10;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 8 * (v6 ^ 0xFF)))(a1, 0);
  v9 = ((2 * result) & 0xE7FFEFB2) + (result ^ 0x73FFF7D9);
  if (v9 == 1946154985)
  {
    --v2;
    goto LABEL_7;
  }
  if (v9 == 1946154981)
  {
LABEL_7:
    result = (*(uint64_t (**)(uint64_t))(v4 + 8 * (v3 ^ 0x160)))(a1);
    v10 = v2;
    goto LABEL_8;
  }
  if (v9 != 1946154969)
  {
    v2 -= 2;
    goto LABEL_7;
  }
  *v5 = a1;
  v10 = 1093073295;
LABEL_8:
  *v1 = v10 - 1093073295;
  return result;
}

uint64_t sub_19C5EF720(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _BOOL4 v12;

  v1 = 402930427 * ((a1 & 0xAB47B1B6 | ~(a1 | 0xAB47B1B6)) ^ 0x4E01B2F4);
  v2 = *(_DWORD *)(a1 + 20) + v1;
  v3 = (*(_DWORD *)a1 - v1);
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) - 0x26866D3AFFDFE015);
  v6 = v4 - 1323025765;
  v5 = v4 - 1323025765 < 0;
  LODWORD(v7) = 1323025765 - v4;
  if (v5)
    v7 = v7;
  else
    v7 = v6;
  v8 = 4 * (v7 - ((2 * (_DWORD)v7) & 0xE40BAB48)) + 0x7601F09BC8175690;
  v9 = (v8 ^ 0x8355F7FBEC631E5) - 0x7E34AFE454C199D7 + ((2 * v8) & 0xEC014108EDA2CEE8 ^ 0xEC01410080228C20);
  v10 = (v3 | ((unint64_t)(v3 < 0x1E822044) << 32)) + 59616602;
  v11 = (v10 < 0x220FCD9E) ^ (v9 < 0x220FCD9E);
  v12 = v9 > v10;
  if (v11)
    v12 = v9 < 0x220FCD9E;
  return ((uint64_t (*)(void))(*((_QWORD *)off_1E3D64110[v2 - 609] + ((365 * !v12) ^ v2))
                            - ((v2 + 890209425) & 0xCAF07EBF)
                            + 1537))();
}

uint64_t sub_19C5EF8B0@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v3
                                                               + 8
                                                               * (((((v4 - 870) ^ 0x1B) + ((v4 - 870) | 8) - 1351)
                                                                 * (v2 == a2)) ^ v4))
                                                   - 12))(a1, 1395002280);
}

uint64_t sub_19C5EF8EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_19C5EF8F4()
{
  uint64_t v0;
  int v1;

  return (*(uint64_t (**)(void))(v0 + 8 * (int)((v1 + 1344036116) & 0xAFE3A2EB ^ 0x4D9 ^ (v1 - 222))))();
}

uint64_t sub_19C5EF97C@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W8>)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v8 = (a4 ^ v7) >> (a3 + 18 + ((4 * (a2 ^ 5) + 20) | 1));
  *(_BYTE *)(*(_QWORD *)(a1 + 8) + (a5 - 511844421)) = (v8 - ((2 * v8) & 0x50) + 40) ^ 0x6D;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (a2 ^ (19 * (a5 - 1 == a6)))) - 8))();
}

uint64_t sub_19C5EFA04(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;

  return (*(uint64_t (**)(void))(v3 + 8 * (int)(((a3 + 8 == v4 + 32) * ((v5 + 1344036338) & 0xAFE3A2EB ^ 0x4D9)) ^ v5)))();
}

uint64_t sub_19C5EFA48(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  _BOOL4 v7;

  v7 = v1 > 0x16DF9149;
  if (v7 == v5 + 1386402314 < (int)(v6 ^ 0xE9206F7B))
    v7 = v5 + 1386402314 < v4;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v3 + 8 * ((29 * v7) ^ v6)))(a1, v6 ^ 0x366u, 1007292705, 4214139355, v2);
}

uint64_t sub_19C5EFABC@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  _QWORD *v3;
  int v4;
  int v5;

  return sub_19C5EF97C(a1, (v5 - 1661984210) & 0x630FDEAF, 33, *(_DWORD *)(*v3 + 4 * (v4 - 377331543 + ((v5 - 1661984210) & 0x630FDEAF))), v2, a2);
}

void sub_19C5EFB00(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 ^ (1575213817
            * ((-1102398904 - (a1 | 0xBE4ABA48) + (a1 | 0x41B545B7)) ^ 0xCCD0F57B));
  __asm { BR              X10 }
}

uint64_t sub_19C5EFBE0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL4 v5;

  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + v3) != v4 + 265 + v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((2 * v5) | (4 * v5)) ^ v4)) - ((v4 + 155) ^ 0x47ALL)))();
}

uint64_t sub_19C5EFC20()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (int)((14
                                     * (((((v3 - 1323025765) * (v1 - 1323025765)) ^ 0xFFBDEAEC)
                                       - 2143152876
                                       + ((2 * (v3 - 1323025765) * (v1 - 1323025765)) & 0xFF7BD5D8)) >> 31)) ^ v2)))();
}

uint64_t sub_19C5EFC78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v8 = v3 + 1431787901 * ((((2 * &v5) | 0xB58E2F36) - &v5 + 624486501) ^ 0xF157BD4C) + 201;
  v5 = a1;
  v6 = v2;
  v7 = v2;
  return (*(uint64_t (**)(uint64_t *))(v1 + 8 * (v3 ^ 0x49C)))(&v5);
}

void sub_19C5EFDC8(uint64_t a1)
{
  int v1;

  v1 = (*(_DWORD *)(a1 + 16) ^ (1001500783 * ((a1 & 0xECA6456D | ~(a1 | 0xECA6456D)) ^ 0x59ED4526))) + 145;
  __asm { BR              X1 }
}

uint64_t sub_19C5EFF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;

  return (*(uint64_t (**)(void))(a3 + 8 * ((38 * (v4 + ((v5 + 150) ^ 7) - 720 == v3 + 31)) ^ v5)))();
}

uint64_t sub_19C5EFF90(uint64_t a1, char a2)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(*(_QWORD *)(v3 + 8 * (v2 - 634)) + 8 * ((54 * ((a2 & 2) == 0)) ^ v2)) - 4))();
}

uint64_t sub_19C5EFFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;

  return (*(uint64_t (**)(void))(a3 + 8 * ((38 * (v5 + ((v4 + 5) ^ 7) - 720 == v3 + 31)) ^ (v4 - 145))))();
}

uint64_t sub_19C5F0074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v25;
  int v26;
  int v27;
  uint64_t v28;

  v25 = v19 - v18;
  *(_DWORD *)(a10 - 0x33ECBDF6999B6168) = 486619605 - v20;
  v26 = 583844137 * ((((v23 - 136) | 0x92AF293D) - ((v23 - 136) & 0x92AF293D)) ^ 0x827194B0);
  *(_QWORD *)(v23 - 128) = a5;
  *(_DWORD *)(v23 - 136) = v26 + v22 + 954;
  *(_DWORD *)(v23 - 120) = v26 + 222781783;
  sub_19C5F1CDC((_DWORD *)(v23 - 136));
  v27 = 402930427 * ((716814459 - ((v23 - 136) | 0x2AB9B87B) + ((v23 - 136) | 0xD5464784)) ^ 0xCFFFBB39);
  *(_DWORD *)(v23 - 120) = (v25 ^ 0x92CFE4E8)
                         - v27
                         + 1206376344
                         + ((2 * v25) & 0xFFFF7FC0 ^ (v22 - 1419094743) & 0x5495AA9F ^ 0xDA60349F);
  *(_QWORD *)(v23 - 128) = a5;
  *(_DWORD *)(v23 - 136) = (v22 - 470) ^ v27;
  sub_19C5CF0B0(v23 - 136);
  *(_DWORD *)(v23 - 136) = v22
                         + 1305237457 * ((((2 * (v23 - 136)) | 0xF4D81F4C) - (v23 - 136) - 2053902246) ^ 0xC3D5A968)
                         - 305;
  *(_QWORD *)(v23 - 128) = &STACK[0x26866D3AFFDFE069];
  *(_QWORD *)(v23 - 120) = a18;
  sub_19C5B3D5C(v23 - 136);
  *(_QWORD *)(v23 - 128) = a18;
  *(_QWORD *)(v23 - 120) = a5;
  *(_DWORD *)(v23 - 132) = v22
                         + 291962093 * ((2 * ((v23 - 136) & 0x75F4E278) - (v23 - 136) - 1978983037) ^ 0x9BF910C9)
                         + 853;
  v28 = (*(uint64_t (**)(uint64_t))(v21 + 8 * (v22 ^ 0x29C)))(v23 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a3 + 8
                                                           * ((52 * (*(_DWORD *)(v23 - 136) <= 0x173F079Eu)) ^ v22))
                                          - 8))(v28);
}

uint64_t sub_19C5F02D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 - 128) = a17;
  *(_QWORD *)(v20 - 120) = v18;
  *(_DWORD *)(v20 - 136) = v19
                         + 1305237457 * ((2 * ((v20 - 136) & 0xD5A9B30) - (v20 - 136) - 224041781) ^ 0x4B1CC205)
                         - 250;
  v21 = sub_19C5B3D5C(v20 - 136);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8
                                            * ((446 * ((a14 ^ 0x6D305A67 ^ (v19 - 95) ^ (267 * (v19 ^ 0x29C))) > 0)) ^ v19)))(v21);
}

uint64_t sub_19C5F038C@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((1643
                                * (((((v5 + 578) ^ (2 * a1))
                                   + v2
                                   - ((((v3 - 737) | 0x200) ^ v5) & (2 * ((v5 + 578) ^ (2 * a1))))) ^ v2) > v1)) ^ v3)))();
}

uint64_t sub_19C5F03CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(uint64_t), uint64_t a18)
{
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  *(_QWORD *)(v20 - 128) = a15;
  *(_QWORD *)(v20 - 120) = a18;
  *(_DWORD *)(v20 - 136) = v18
                         + 1305237457 * ((((v20 - 136) | 0xAF4C55BB) + (~(v20 - 136) | 0x50B3AA44)) ^ 0x16F5F374)
                         - 155;
  sub_19C5B3D5C(v20 - 136);
  v21 = 402930427 * ((v20 + 735964885 - 2 * ((v20 - 136) & 0x2BDDEF5D)) ^ 0x316413E0);
  *(_DWORD *)(v20 - 136) = (v18 - 320) ^ v21;
  *(_DWORD *)(v20 - 120) = 1206359943 - v21;
  *(_QWORD *)(v20 - 128) = a16;
  sub_19C5CF0B0(v20 - 136);
  *(_QWORD *)(v20 - 128) = a18;
  *(_QWORD *)(v20 - 120) = a16;
  *(_DWORD *)(v20 - 132) = v18
                         + 291962093
                         * ((-808931759 - ((v20 - 136) | 0xCFC8AE51) + ((v20 - 136) | 0x303751AE)) ^ 0x21C55CE4)
                         + 1003;
  v22 = a17(v20 - 136);
  return (*(uint64_t (**)(uint64_t))(v19
                                            + 8
                                            * ((13
                                              * (((v18 - 99) ^ (*(_DWORD *)(v20 - 136) > 0x173F079Eu)) & 1)) ^ (v18 + 1223))))(v22);
}

uint64_t sub_19C5F0800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  uint64_t v14;
  int v15;

  return ((uint64_t (*)(void))(*(_QWORD *)(v14
                                        + 8
                                        * ((121
                                          * ((((v15 + 1409) ^ 0x7F761150) & (2 * a14))
                                           + 1979645416
                                           + (a14 ^ (144 * (v15 ^ 0x12F)) ^ 0xBFBB09BE)
                                           - 901384680 < 0x7FFFFFFE)) ^ v15))
                            - 8))();
}

void sub_19C5F1174(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (1001500783 * ((2 * (a1 & 0x2B052101) - a1 - 721756418) ^ 0x9E4E214A));
  __asm { BR              X10 }
}

uint64_t sub_19C5F1244@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, int a7, int a8, int a9)
{
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v13 = 402930427 * ((&a4 & 0xD6415B6D | ~(&a4 | 0xD6415B6D)) ^ 0x3307582F);
  a4 = &STACK[0x1B72FA547311DF28];
  a5 = v12;
  a9 = v13 ^ 0x795DCD72;
  a7 = v11 - v13 + 556;
  a6 = &STACK[0x7F8EAF18153CC80F];
  v14 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(a1 + 8 * (v11 - 311)) - 12))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10
                                                      + 8
                                                      * ((54 * (*(_DWORD *)(v12 - 0x23F2B20168D9FBDLL) == v9)) ^ v11))
                                          - (v11 + 1194)
                                          + 1638))(v14);
}

uint64_t sub_19C5F1324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  int v13;

  return (*(uint64_t (**)(void))(v12 + 8 * ((229 * (((a11 == v11 + 4) ^ (2 * v13 + 1)) & 1)) ^ v13)))();
}

void sub_19C5F1358(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v2;

  *a1 = v2;
  *(_DWORD *)(v1 + 20) = -480908257;
}

void sub_19C5F150C(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 16) + 583844137 * ((a1 & 0x49E6B9B | ~(a1 | 0x49E6B9B)) ^ 0xEBBF29E9);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x26866D3AFFDFE015);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = v1 + 1431787901 * (((&v3 | 0xD2053BA1) - (&v3 & 0xD2053BA1)) ^ 0xF9959176) + 1650;
  sub_19C619F90((uint64_t)&v3);
  __asm { BR              X9 }
}

uint64_t sub_19C5F1640@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((11
                                          * (((((v3 - v2) & 0x1F ^ 0xFFFEEBFF) + ((2 * (v3 - v2)) & 0x1A) == -70675) ^ (((v1 + 24) | 0x10) + 9)) & 1)) ^ v1))
                            - 8))();
}

uint64_t sub_19C5F16CC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((((int)((v3 ^ 0x7BFF3BE3)
                                                 - 1619003427
                                                 + (v1 & 0xF7FE77C6)
                                                 + ((v2 - 1501395499) & 0x597D75D7)
                                                 - 461321608) >= 0)
                                          * ((v2 - 1105) ^ 0x1F5)) ^ v2))
                            - 12))();
}

uint64_t sub_19C5F1774@<X0>(char a1@<W0>, char a2@<W1>, int a3@<W5>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v11 = *(_DWORD *)(*(_QWORD *)(v10 - 0x26866D3AFFDFE011) + 4 * (v8 + v7 + 455)) ^ v5;
  v12 = ((v11 >> (a1 - a2 + 32)) - 1028118050 - ((v11 >> (a1 - a2 + 32) << ((v9 ^ 0xE) + 56)) & 0x857053BC)) ^ 0xC2B829DE | a3 ^ v5;
  *(_DWORD *)(*(_QWORD *)(v10 - 0x26866D3AFFDFE011) + 4 * (v4 + v6)) = v12 + v5 - ((2 * v12) & 0xF65D53B6);
  return ((uint64_t (*)(void))(*(_QWORD *)(a4 + 8 * ((2013 * ((v8 + v7 + 454) >> 31)) ^ v9)) - 12))();
}

void sub_19C5F1838()
{
  JUMPOUT(0x19C5F17B8);
}

uint64_t sub_19C5F1840@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((((v2 - 71) ^ 0x382 ^ (2 * v2) ^ 0xE8)
                                          * ((v3 ^ 0x77BFEDFB) - 36703617 + (v1 & 0xEF7FDBF6) - 1972363387 < 0x7FFFFFFF)) ^ v2))
                            - 8))();
}

uint64_t sub_19C5F18B0@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;

  v6 = v4 - 1;
  v7 = v2 + v4;
  *(_DWORD *)(*(_QWORD *)(v5 - 0x26866D3AFFDFE011) + 4 * (v1 + 1318224967 + v6)) = *(_DWORD *)(*(_QWORD *)(v5 - 0x26866D3AFFDFE011)
                                                                                                 + 4
                                                                                                 * (v7 + v3 + 722));
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((1023 * ((v7 + 1197) > 0x7FFFFFFE)) ^ v3)) - 8))();
}

uint64_t sub_19C5F1918@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  int v7;

  *(_DWORD *)(*v4 + 4 * (v5 + v7 - 1)) = *(_DWORD *)(*v4 + 4 * (v2 + v7 + v1));
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((1023 * (v2 + v7 + 1197 > v6)) ^ v3)) - 8))();
}

uint64_t sub_19C5F1958@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((25 * (v1 - 1004378944 >= ((v2 - 828) ^ 0x7FFFFE8Du))) ^ v2))
                            - (v2 - 76)
                            + 1114))();
}

void sub_19C5F19AC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  _DWORD *v4;
  int v5;
  int v6;

  v5 = 2007709306 - v0;
  if (*v4 + 824457883 >= (v3 ^ 0x510) - 370)
    v6 = v5;
  else
    v6 = v2;
  *v4 += v1 + v6 + 1055;
}

uint64_t sub_19C5F1B8C(uint64_t a1)
{
  return ((uint64_t (*)(void))(*((_QWORD *)off_1E3D64110[(int)((*(_DWORD *)a1 - 291962093 * (a1 ^ 0x11F20D4A)) ^ 0x15A)]
                              + (int)((1177 * (*(_QWORD *)(a1 + 8) != 0x23F2B20168D9FD5)) ^ (*(_DWORD *)a1
                                                                                             - 291962093
                                                                                             * (a1 ^ 0x11F20D4A))))
                            - 12))();
}

uint64_t sub_19C5F1BFC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8
                                             * ((1205 * (*(_DWORD *)(v2 - 0x23F2B20168D9FBDLL) == 480950058)) ^ v0))
                            - 12))();
}

uint64_t sub_19C5F1C3C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v3 = *(_DWORD *)(v2 - 0x23F2B20168D9FC5) - 662986547;
  v4 = *(_DWORD *)(v2 - 0x23F2B20168D9FC9) - 1626241242;
  v5 = v4 < 0xB326896;
  v6 = v3 < v4;
  if (v3 < 0xB326896 != v5)
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((30 * v6) ^ v0)) - 12))();
}

uint64_t sub_19C5F1CC8@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  _DWORD *v2;

  *v2 = a2;
  *(_DWORD *)(result + 4) = -480908257;
  return result;
}

uint64_t sub_19C5F1CDC(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;

  v1 = 583844137 * ((2 * (a1 & 0x5C026FA2) - (_DWORD)a1 + 603820125) ^ 0x33232DD0);
  v2 = *a1 - v1;
  v3 = a1[4] - v1;
  v5 = v3 - 222781782;
  v4 = (int)(v3 - 222781782) < 0;
  LODWORD(v6) = 222781782 - v3;
  if (v4)
    v6 = v6;
  else
    v6 = v5;
  return ((uint64_t (*)(void))(*((_QWORD *)off_1E3D64110[v2 ^ 0x6C7] + (int)((v6 == ((2 * (_DWORD)v6) & 0x2F6996BA)) ^ v2))
                            - ((v2 + 1) ^ 0x699)))();
}

void sub_19C5F1D94(int a1@<W8>)
{
  uint64_t v1;

  *(_DWORD *)(v1 - 0x26866D3AFFDFE015) = a1;
}

void sub_19C5F1E08(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_19C5F1E88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1
                                                      + 8
                                                      * ((4
                                                        * ((a1 | ((unint64_t)(a1 < 0x3EF0AF45) << 32)) != 1055960901)) | 0x440u))
                                          - 4))(0x3A5D0323E05826B7);
}

uint64_t sub_19C5F1EF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((577
                                          * ((*(unsigned __int8 *)(v1 + a1 - 0x3A5D0323E05826B7) ^ 0xDF67EFFF)
                                           + 2 * *(unsigned __int8 *)(v1 + a1 - 0x3A5D0323E05826B7)
                                           + (*(unsigned __int8 *)(v2 + a1 - 0x3A5D0323E05826B7) ^ 0x110806A1)
                                           - ((2 * *(unsigned __int8 *)(v2 + a1 - 0x3A5D0323E05826B7)) & 0xBC) == -261097824)) ^ v3))
                            - 4))();
}

uint64_t sub_19C5F1F70(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL4 v8;

  v4 = v2 < v1;
  v5 = a1 - 0x3A5D032314A39C18;
  v6 = a1 + 1;
  v7 = v4 ^ (v5 < v1);
  v8 = v5 < v2;
  if (!v7)
    v4 = v8;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * ((4 * v4) | 0x440u)) - 4))(v6);
}

uint64_t sub_19C5F1FC8@<X0>(int a1@<W8>)
{
  unsigned int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  int v7;

  if (v3 | v4)
    v6 = a1 == v2 + v1 + (v1 ^ 0x8F) - 783;
  else
    v6 = 0;
  v7 = v6;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v5 + 8 * ((1333 * v7) ^ v1)) - 8))(4294925278);
}

uint64_t sub_19C5F2008()
{
  unsigned __int8 *v0;
  unsigned int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((((*v0 ^ 0xDDDEBD9B) + 193150917 + ((2 * *v0) & 0x136) == -379454070)
                                          * (v1 + 443)) ^ v1))
                            - 12))();
}

uint64_t sub_19C5F2060@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  __int16 v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((1554
                                          * ((*(unsigned __int8 *)(v3 + 1) ^ v2)
                                           + v1
                                           + (unsigned __int16)(v5 & (2 * *(unsigned __int8 *)(v3 + 1))) == a1)) ^ v4))
                            - ((6 * (v4 ^ 0x17E)) ^ 0x434)))();
}

uint64_t sub_19C5F20AC@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((750
                                          * (v1
                                           + (*(unsigned __int8 *)(v3 + 2) ^ v2)
                                           + ((216 * (v4 ^ 0x1CF) - 770) & (2 * *(unsigned __int8 *)(v3 + 2)))
                                           + 62 == a1)) ^ v4))
                            - 12))();
}

uint64_t sub_19C5F20F8@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((690
                                          * (((15 * (v3 ^ 0x182)) ^ 0xAB83387E)
                                           + (*(unsigned __int8 *)(v2 + 3) ^ v1)
                                           + ((2 * *(unsigned __int8 *)(v2 + 3)) & 0x136)
                                           + 1610612796
                                           + 835 == a1)) ^ v3))
                            - 12))();
}

uint64_t sub_19C5F215C@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((1667
                                          * (v1
                                           + (*(unsigned __int8 *)(v3 + 4) ^ v2)
                                           + (((60 * (v4 ^ 0x1D8)) ^ 0x50E) & (2 * *(unsigned __int8 *)(v3 + 4)))
                                           - 113 == a1)) ^ v4))
                            - 12))();
}

uint64_t sub_19C5F21AC@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((1664
                                          * (v1
                                           + (*(unsigned __int8 *)(v3 + 5) ^ v2)
                                           + ((2 * *(unsigned __int8 *)(v3 + 5)) & 0x136)
                                           + 121 == a1)) ^ v4))
                            - ((180 * (v4 ^ 0x1CC)) ^ 0x434)))();
}

uint64_t sub_19C5F2200@<X0>(__int16 a1@<W0>, int a2@<W8>)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * ((1087
                                          * (v6
                                           + ((v4 + 622) ^ v5)
                                           + (*(unsigned __int8 *)(v3 + 6) ^ v2)
                                           + (unsigned __int16)(a1 & (2 * *(unsigned __int8 *)(v3 + 6)))
                                           + 968 == a2)) ^ v4))
                            - 12))();
}

uint64_t sub_19C5F2244@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((1370
                                          * (v4
                                           + (*(unsigned __int8 *)(v2 + 7) ^ v1)
                                           + ((2 * *(unsigned __int8 *)(v2 + 7)) & 0x136)
                                           + ((72 * (v3 ^ 0x1C5)) ^ v5)
                                           + 968 == a1)) ^ v3))
                            - 12))();
}

uint64_t sub_19C5F2298@<X0>(int a1@<W0>, int a2@<W8>)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BOOL4 v7;

  v7 = v2
     + (*(unsigned __int8 *)(v4 + 8) ^ v3)
     + ((*(unsigned __int8 *)(v4 + 8) << ((120 * (v5 ^ 0xC3)) ^ 0x39)) & a1)
     + 130 == a2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((88
                                          * (((3 * ((120 * (v5 ^ 0xC3)) ^ 0xAD)) ^ ((v7 ^ 0x5F) + 2 * v7 == 95)) & 1)) ^ (120 * (v5 ^ 0x1C3))))
                            - 8))();
}

uint64_t sub_19C5F2328(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)(*(_QWORD *)(v6 + 96) + 1428) = v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * (((*(_DWORD *)(a2 + 4) == v2) * ((36 * (v4 ^ 0x421) + 80) ^ 0x64E)) ^ (36 * (v4 ^ 0x421))))
                            - 4))();
}

uint64_t sub_19C5F2380@<X0>(uint64_t a1@<X1>, int a2@<W2>, int a3@<W8>)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * (((v3
                                           + a2
                                           + 16
                                           + (**(unsigned __int8 **)(a1 + 8) ^ v4)
                                           + ((2 * **(unsigned __int8 **)(a1 + 8)) & 0x136)
                                           - 371 != a3)
                                          * ((a2 ^ 0x290) - 703)) ^ a2))
                            - 4))();
}

uint64_t sub_19C5F23D0@<X0>(__int16 a1@<W3>, int a2@<W8>)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((1919
                                          * (v2
                                           + ((v5 + 351) | 1)
                                           + (*(unsigned __int8 *)(v4 + 1) ^ v3)
                                           + (unsigned __int16)(a1 & (2 * *(unsigned __int8 *)(v4 + 1)))
                                           - 815 == a2)) ^ v5))
                            - 4))();
}

uint64_t sub_19C5F2414@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((1984
                                          * (v1
                                           + ((2 * *(unsigned __int8 *)(v3 + 2)) & 0x136)
                                           + ((163 * (v4 ^ 0x1CA)) ^ (v2 + 281) ^ *(unsigned __int8 *)(v3 + 2))
                                           + 62 == a1)) ^ v4))
                            - 4))();
}

uint64_t sub_19C5F2468@<X0>(int a1@<W2>, int a2@<W8>)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((1853
                                          * ((*(unsigned __int8 *)(v4 + 3) ^ v3)
                                           + v2
                                           + ((*(unsigned __int8 *)(v4 + 3) << (((v5 + 93) | 3) ^ 0x2E)) & a1) == a2)) ^ v5))
                            - 4))();
}

uint64_t sub_19C5F24B4@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((1642
                                          * (v1
                                           + (*(unsigned __int8 *)(v3 + 4) ^ v2)
                                           + ((2 * *(unsigned __int8 *)(v3 + 4)) & 0x136)
                                           - 113 == a1)) ^ v4))
                            - ((v4 - 6111840) & 0x5D43BF ^ 0x32BLL)))();
}

uint64_t sub_19C5F250C@<X0>(__int16 a1@<W2>, int a2@<W8>)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((1575
                                          * (v2
                                           + (unsigned __int16)(a1 & (2 * *(unsigned __int8 *)(v4 + 5)))
                                           + (*(unsigned __int8 *)(v4 + 5) ^ (v3 + v5 + 352 - 815))
                                           + 121 == a2)) ^ v5))
                            - 4))();
}

uint64_t sub_19C5F2550@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((1680
                                          * (v1
                                           + ((v4 - 1591065248) & 0x5ED5BBFF)
                                           + (*(unsigned __int8 *)(v3 + 6) ^ v2)
                                           + ((2 * *(unsigned __int8 *)(v3 + 6)) & 0x136)
                                           - 682 == a1)) ^ v4))
                            - 4))();
}

uint64_t sub_19C5F25A8@<X0>(__int16 a1@<W2>, int a2@<W8>)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((1586
                                          * (v2
                                           + (*(unsigned __int8 *)(v4 + 7) ^ v3)
                                           + (unsigned __int16)(a1 & (2 * *(unsigned __int8 *)(v4 + 7)))
                                           + 133 == (((v5 + 89) | 0x107) ^ (a2 + 227)))) ^ v5))
                            - 4))();
}

uint64_t sub_19C5F25F4@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  v5 = 5 * (v3 ^ 0x16C);
  v6 = (v5 ^ 0xAB833F69)
     + (*(unsigned __int8 *)(v2 + 8) ^ v1)
     + ((2 * *(unsigned __int8 *)(v2 + 8)) & 0x136)
     + 1610613760;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (v5 ^ (16
                                               * (((v6 == a1) ^ 0xBF) + 2 * (v6 == a1) == (((v5 - 46) | 0xE0) - 34)))))
                            - 3 * (v5 ^ 0x203u)
                            + 892))();
}

uint64_t sub_19C5F2688(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)(*(_QWORD *)(v6 + 96) + 1428) = v3 + 4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8 * (int)(((*(_DWORD *)(a2 + 4) == v2) * (10 * (v4 ^ 0x3E6) + 448)) ^ v4))
                            - (v4 ^ 0x380)))();
}

uint64_t sub_19C5F26E4@<X0>(uint64_t a1@<X1>, int a2@<W8>)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1834
                                * (v2
                                 + (**(unsigned __int8 **)(a1 + 8) ^ v3)
                                 + v4
                                 + 847
                                 + ((2 * **(unsigned __int8 **)(a1 + 8)) & 0x136)
                                 - 1236 == a2)) ^ v4)))();
}

uint64_t sub_19C5F2728@<X0>(int a1@<W0>, int a2@<W8>)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((1782
                                * ((*(unsigned __int8 *)(v5 + 1) ^ v3)
                                 + v2
                                 + ((*(unsigned __int8 *)(v5 + 1) << (v4 ^ 0xE0)) & a1) == a2)) ^ v4)))();
}

uint64_t sub_19C5F2768@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((796
                                * (v1
                                 + (*(unsigned __int8 *)(v5 + 2) ^ v2)
                                 + ((2 * *(unsigned __int8 *)(v5 + 2)) & 0x136)
                                 + 62 == (v3 ^ (a1 - 1296)))) ^ v4)))();
}

uint64_t sub_19C5F27A8@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1762
                                * ((*(unsigned __int8 *)(v4 + 3) ^ v2)
                                 + v1
                                 + ((v3 ^ 0xD7) & (2 * *(unsigned __int8 *)(v4 + 3))) == a1)) ^ v3)))();
}

uint64_t sub_19C5F27E8@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1938
                                * (v1
                                 + (*(unsigned __int8 *)(v4 + 4) ^ v2)
                                 + ((2 * *(unsigned __int8 *)(v4 + 4)) & 0x136)
                                 + ((v3 + 1265925007) & 0xB48B87BF)
                                 - 1441 == a1)) ^ v3)))();
}

uint64_t sub_19C5F283C@<X0>(__int16 a1@<W0>, int a2@<W8>)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1626
                                * (((v3 + 847) ^ 0x600006C8)
                                 + (*(unsigned __int8 *)(v4 + 5) ^ v2)
                                 + (unsigned __int16)(a1 & (2 * *(unsigned __int8 *)(v4 + 5)))
                                 - 1417462714 == a2)) ^ v3)))();
}

uint64_t sub_19C5F2890@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1600
                                * (v1
                                 + (v3 ^ 0xB4)
                                 + ((2 * *(unsigned __int8 *)(v4 + 6)) & 0x136)
                                 + ((v2 + ((v3 + 1885705110) & 0x8F9A6FB8) - 1328) ^ *(unsigned __int8 *)(v4 + 6))
                                 - 208 == a1)) ^ v3)))();
}

uint64_t sub_19C5F28F4@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W8>)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (((v3
                                 + (*(unsigned __int8 *)(v5 + 7) ^ v4)
                                 + (((16 * a2) ^ 0x1060 | 6) & (2 * *(unsigned __int8 *)(v5 + 7)))
                                 + 133 != a3)
                                * a1) ^ a2)))();
}

uint64_t sub_19C5F2930@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W8>)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v7 = a2 ^ a1 ^ 0x4D1;
  v8 = v3 + (*(unsigned __int8 *)(v5 + 8) ^ v4) + ((v7 - 1018) & (2 * *(unsigned __int8 *)(v5 + 8))) + 123;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((97
                                          * (((v8 == a3) ^ 0x6F) + 2 * (v8 == a3) == ((v7 + 84) ^ 0xEB))) ^ v7))
                            - ((v7 - 556) | 0x80u)
                            + 888))();
}

uint64_t sub_19C5F29A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v7
                                                      + 8
                                                      * (((a5
                                                         + ((v5 - 894924711) & 0x355777F6)
                                                         + ((v5 - 1513108533) & 0x5F3CBAFE)
                                                         + 666)
                                                        * (v6 == 107)) ^ v5))
                                          - 4))(4294925278);
}

uint64_t sub_19C5F2A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43)
{
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  _BOOL4 v50;

  *(_DWORD *)(*(_QWORD *)(v46 + 96) + 1428) = v44 + 16;
  v48 = 1001500783 * ((((v47 - 184) | 0x20FC82D5) - ((v47 - 184) & 0x20FC82D5)) ^ 0x6A487D61);
  *(_DWORD *)(v47 - 164) = (1109390040 * (25 * ((v43 + 80) ^ 0x3FE) + 1717209627) - 1016202691) ^ v48;
  *(_DWORD *)(v47 - 184) = v48 + v43 - 167303388;
  *(_QWORD *)(v47 - 176) = &STACK[0xBC8884B3565C745];
  v49 = v43 + 80;
  sub_19C5B3498(v47 - 184);
  v50 = *(_DWORD *)v46 + 1958266369 + ((2 * a43) & 0x3A ^ 0x30) + (a43 & 0x3F ^ 0x6BF5FB05u) - 12867608 < 0xFFFFFFC0;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v45 + 8 * (((16 * v50) | (32 * v50)) ^ v49)) - 12))(4210259394);
}

uint64_t sub_19C5F2BB4(int a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  v6 = v2 + v1 - 1811283498 + a1 + (((v3 ^ 0x4D1) + 84441405) | 0x40A0C) + 766;
  if (v6 <= 0x40)
    v6 = 64;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((13 * (v5 - v1 - v2 + v6 < 0xF)) ^ v3 ^ 0x4D1)) - 4))();
}

uint64_t sub_19C5F2C50(int a1, int a2, int a3, unsigned int a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;

  v9 = a2 + a3 + 782;
  if (v9 <= 0x40)
    v9 = a4;
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (((v8 - a3 < v6 + v5 + v9 + ((a1 - a5 - 766) ^ 0x6EF97152)) * ((a1 + 580) ^ 0x579)) ^ a1)))();
}

uint64_t sub_19C5F2CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,char a35)
{
  int v35;
  int v36;
  int v37;
  uint64_t v38;

  return ((uint64_t (*)(void))(*(_QWORD *)(v38
                                        + 8
                                        * ((252
                                          * ((unint64_t)(&a35 + a24
                                                                     + v36
                                                                     + v35
                                                                     + ((v37 - a5 - 1346) ^ 0x91068EAD)) >= (((v37 - 1228) | 0x241u) ^ 0x2D7uLL))) ^ v37))
                            - 12))();
}

uint64_t sub_19C5F2D08@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t *v6;
  int8x16_t v7;
  int8x16_t v8;

  v7.i64[0] = 0x8A8A8A8A8A8A8A8ALL;
  v7.i64[1] = 0x8A8A8A8A8A8A8A8ALL;
  v8.i64[0] = 0x4545454545454545;
  v8.i64[1] = 0x4545454545454545;
  *(int8x16_t *)(v2 + (a1 + v1)) = vaddq_s8(vsubq_s8(*v6, vandq_s8(vaddq_s8(*v6, *v6), v7)), v8);
  return ((uint64_t (*)(int8x16_t *))(*(_QWORD *)(v5
                                                          + 8
                                                          * (((((v4 + 1) & 0x1FFFFFFF0) == 16) * ((v3 + 651) ^ 0x541)) ^ v3))
                                              - 12))(&v6[1]);
}

void sub_19C5F2D6C()
{
  JUMPOUT(0x19C5F2D30);
}

uint64_t sub_19C5F2D78(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((a5 + ((a2 - 2062756452) & 0x7FFFAF5F) + 890) * (v5 == v6)) ^ a2))
                            - 12))();
}

uint64_t sub_19C5F2DBC@<X0>(int a1@<W4>, int a2@<W5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,char a30)
{
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  *(&a30 + (a3 + v30)) = *(_BYTE *)(v31 + v34 - 1977648199)
                                     - ((2 * *(_BYTE *)(v31 + v34 - 1977648199)) & 0x8A)
                                     + 69;
  return (*(uint64_t (**)(void))(v33 + 8 * ((185 * ((a2 + a3 + 1) < 0x40)) ^ (a1 + v32 + 559))))();
}

uint64_t sub_19C5F2E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,int a45,int a46,int a47,int a48,int a49,int a50,unsigned __int8 a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int32x4_t a58,int32x4_t a59,int32x4_t a60,int32x4_t a61)
{
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t (*v68)(uint64_t, __n128);
  __n128 v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int8x16_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int v82;
  uint8x16_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  uint8x16_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  int8x16_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int8x16_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int8x16_t v117;
  int32x4_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  uint8x16_t v123;
  uint16x8_t v124;
  uint16x8_t v125;
  int8x16_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int8x16_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int8x16_t v140;
  int32x4_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  uint8x16_t v146;
  uint16x8_t v147;
  uint16x8_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  uint8x16_t v162;
  uint16x8_t v163;
  uint16x8_t v164;
  int8x16_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  uint8x16_t v172;
  uint16x8_t v173;
  uint16x8_t v174;
  int8x16_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  uint8x16_t v189;
  uint16x8_t v190;
  uint16x8_t v191;
  int8x16_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  uint8x16_t v203;
  uint16x8_t v204;
  uint16x8_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  _DWORD *v210;
  unint64_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int32x4_t v216;
  int8x16x4_t v217;
  int8x16x4_t v218;

  v68 = (uint64_t (*)(uint64_t, __n128))(*(_QWORD *)(v62 + 8 * (a5 + v61 + 89)) - 4);
  v69 = (__n128)vdupq_n_s32(0xB5DA1345);
  v215 = (int8x16_t)vdupq_n_s32(0x9330000u);
  v216 = vdupq_n_s32(0x9340000u);
  v70 = vdupq_n_s32(0x8AB8D4DA);
  v213 = (int8x16_t)vdupq_n_s32(0x7E089C56u);
  v214 = (int8x16_t)vdupq_n_s32(0x15700000u);
  v71 = vdupq_n_s32(0x3F044E2Bu);
  v72 = vdupq_n_s32(0xB8FD1600);
  v212 = (int8x16_t)vdupq_n_s32(0x76404400u);
  v73 = vdupq_n_s32(0x7B2022D0u);
  v74 = (int8x16_t)vdupq_n_s32(0xD4A92D18);
  v75 = vdupq_n_s32(0xEA54968C);
  v76 = vdupq_n_s32(0xBB32DA18);
  v77 = (int8x16_t)vdupq_n_s32(0x39556E54u);
  v78 = vdupq_n_s32(0x1CAAB72Au);
  v79.i64[0] = 0x4545454545454545;
  v79.i64[1] = 0x4545454545454545;
  v80.i64[0] = 0x9200000092000000;
  v80.i64[1] = 0x9200000092000000;
  v81.i64[0] = 0xE0000000E0000000;
  v81.i64[1] = 0xE0000000E0000000;
  v82 = a51 ^ 0x76;
  if (v82 == 116)
  {
    v218 = vld4q_s8(&a35);
    v162 = (uint8x16_t)veorq_s8(v218.val[0], v79);
    v163 = vmovl_u8(*(uint8x8_t *)v162.i8);
    v164 = vmovl_high_u8(v162);
    v165.i64[0] = 0x2400000024;
    v165.i64[1] = 0x2400000024;
    v166 = vsubq_s32((int32x4_t)vmovl_high_u16(v164), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v164, 1uLL), v165));
    v167 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v163), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v163, 1uLL), v165)), 0x18uLL);
    v168 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v163.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v163.i8, 1uLL), v165)), 0x18uLL), v80), (int8x16_t)v80);
    v169 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v167, v80), (int8x16_t)v80);
    v170 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v164.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v164.i8, 1uLL), v165)), 0x18uLL), v80), (int8x16_t)v80);
    v171 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v166, 0x18uLL), v80), (int8x16_t)v80);
    v172 = (uint8x16_t)veorq_s8(v218.val[1], v79);
    v173 = vmovl_u8(*(uint8x8_t *)v172.i8);
    v174 = vmovl_high_u8(v172);
    v175.i64[0] = 0x6600000066;
    v175.i64[1] = 0x6600000066;
    v176 = (int32x4_t)vaddw_high_u16((uint32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vshll_high_n_u16(v174, 1uLL), v175)), v174);
    v177 = (int32x4_t)vaddw_high_u16((uint32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vshll_high_n_u16(v173, 1uLL), v175)), v173);
    v178 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v173.i8, 1uLL), v175)), *(uint16x4_t *)v173.i8), 0x10uLL), v216), v215);
    v179 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v177, 0x10uLL), v216), v215);
    v180 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v174.i8, 1uLL), v175)), *(uint16x4_t *)v174.i8), 0x10uLL), v216), v215);
    v181 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v176, 0x10uLL), v216), v215);
    v182 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v168, (int32x4_t)(*(_OWORD *)&vaddq_s32(v168, v168) & __PAIR128__(0x6BFFFFFF6BFFFFFFLL, 0x6BFFFFFF6BFFFFFFLL))), (int32x4_t)v69), (int8x16_t)v69), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v178, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v178, v178), v214)), v70), (int8x16_t)v70));
    v183 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v169, (int32x4_t)(*(_OWORD *)&vaddq_s32(v169, v169) & __PAIR128__(0x6BFFFFFF6BFFFFFFLL, 0x6BFFFFFF6BFFFFFFLL))), (int32x4_t)v69), (int8x16_t)v69), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v179, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v179, v179), v214)), v70), (int8x16_t)v70));
    v184 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v170, (int32x4_t)(*(_OWORD *)&vaddq_s32(v170, v170) & __PAIR128__(0x6BFFFFFF6BFFFFFFLL, 0x6BFFFFFF6BFFFFFFLL))), (int32x4_t)v69), (int8x16_t)v69), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v180, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v180, v180), v214)), v70), (int8x16_t)v70));
    v185 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v171, (int32x4_t)(*(_OWORD *)&vaddq_s32(v171, v171) & __PAIR128__(0x6BFFFFFF6BFFFFFFLL, 0x6BFFFFFF6BFFFFFFLL))), (int32x4_t)v69), (int8x16_t)v69), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v181, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v181, v181), v214)), v70), (int8x16_t)v70));
    v186 = vsubq_s32(v185, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v185, v185), v213));
    v187 = vsubq_s32(v184, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v184, v184), v213));
    v188 = vsubq_s32(v183, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v183, v183), v213));
    v189 = (uint8x16_t)veorq_s8(v218.val[2], v79);
    v190 = vmovl_u8(*(uint8x8_t *)v189.i8);
    v191 = vmovl_high_u8(v189);
    v192.i64[0] = 0x2C0000002CLL;
    v192.i64[1] = 0x2C0000002CLL;
    v193 = vsubq_s32((int32x4_t)vmovl_high_u16(v191), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v191, 1uLL), v192));
    v194 = vsubq_s32((int32x4_t)vmovl_high_u16(v190), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v190, 1uLL), v192));
    v195 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v190.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v190.i8, 1uLL), v192)), 8uLL), v72), (int8x16_t)v72);
    v196 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v194, 8uLL), v72), (int8x16_t)v72);
    v197 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v191.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v191.i8, 1uLL), v192)), 8uLL), v72), (int8x16_t)v72);
    v198 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v193, 8uLL), v72), (int8x16_t)v72);
    v199 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v182, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v182, v182), v213)), v71), (int8x16_t)v71), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v195, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v195, v195), v212)), v73), (int8x16_t)v73));
    v200 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v188, v71), (int8x16_t)v71), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v196, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v196, v196), v212)), v73), (int8x16_t)v73));
    v201 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v187, v71), (int8x16_t)v71), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v197, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v197, v197), v212)), v73), (int8x16_t)v73));
    v202 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v186, v71), (int8x16_t)v71), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v198, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v198, v198), v212)), v73), (int8x16_t)v73));
    v203 = (uint8x16_t)veorq_s8(v218.val[3], v79);
    v204 = vmovl_u8(*(uint8x8_t *)v203.i8);
    v205 = vmovl_high_u8(v203);
    v175.i64[0] = 0x3000000030;
    v175.i64[1] = 0x3000000030;
    v206 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v199, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v199, v199), v74)), v75), (int8x16_t)v75), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v204.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v204.i8, 1uLL), v175)), v76), (int8x16_t)v76));
    v207 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v200, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v200, v200), v74)), v75), (int8x16_t)v75), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v204), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v204, 1uLL), v175)), v76), (int8x16_t)v76));
    v208 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v201, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v201, v201), v74)), v75), (int8x16_t)v75), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v205.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v205.i8, 1uLL), v175)), v76), (int8x16_t)v76));
    v209 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v202, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v202, v202), v74)), v75), (int8x16_t)v75), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v205), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v205, 1uLL), v175)), v76), (int8x16_t)v76));
    a60 = vaddq_s32(vsubq_s32(v208, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v208, v208), v77)), v78);
    a61 = vaddq_s32(vsubq_s32(v209, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v209, v209), v77)), v78);
    a58 = vaddq_s32(vsubq_s32(v206, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v206, v206), v77)), v78);
    a59 = vaddq_s32(vsubq_s32(v207, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v207, v207), v77)), v78);
    v210 = (_DWORD *)&a58 + v65 + 1351382925;
    HIDWORD(v211) = *(v210 - 8) ^ *(v210 - 3) ^ *(v210 - 14) ^ *(v210 - 16);
    LODWORD(v211) = HIDWORD(v211);
    *v210 = v64 + (v211 >> 31) + (~(2 * (v211 >> 31)) | 0xC6AA91AB) + 1;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8 * ((11 * (v66 != 1351382862)) ^ (a5 + a8 + 772))))(2363117530, 3333067179);
  }
  else if (v82 == 119)
  {
    v217 = vld4q_s8(&a35);
    v83 = (uint8x16_t)veorq_s8(v217.val[0], v79);
    v84 = vmovl_u8(*(uint8x8_t *)v83.i8);
    v85 = vmovl_high_u8(v83);
    v86 = (int32x4_t)vmovl_high_u16(v85);
    v87 = (int8x16_t)vshll_high_n_u16(v85, 1uLL);
    v88.i64[0] = 0x200000002;
    v88.i64[1] = 0x200000002;
    v89 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v85.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v85.i8, 1uLL), v88));
    v90 = vdupq_n_s32(0xDEEAF301);
    v91 = (int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v84.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v84.i8, 1uLL), v88)), v90);
    v92 = (int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v84), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v84, 1uLL), v88)), v90);
    v93 = (int8x16_t)vaddq_s32(vsubq_s32(v86, (int32x4_t)vandq_s8(v87, v88)), v90);
    v94 = (uint8x16_t)veorq_s8(v217.val[1], v79);
    v95 = vmovl_u8(*(uint8x8_t *)v94.i8);
    v96 = vmovl_high_u8(v94);
    v97.i64[0] = 0x6200000062;
    v97.i64[1] = 0x6200000062;
    v98 = vsubq_s32((int32x4_t)vmovl_high_u16(v96), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v96, 1uLL), v97));
    v99 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v96.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v96.i8, 1uLL), v97));
    v100 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v95.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v95.i8, 1uLL), v97)), 8uLL);
    v101 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v95), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v95, 1uLL), v97)), 8uLL);
    v102 = vdupq_n_s32(0xAFEC3100);
    v103 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v100, v102), (int8x16_t)v102);
    v104 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v101, v102), (int8x16_t)v102);
    v105 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v99, 8uLL), v102), (int8x16_t)v102);
    v106 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v98, 8uLL), v102), (int8x16_t)v102);
    v107 = (int8x16_t)vdupq_n_s32(0x43B0EC00u);
    v108 = (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v103, v103), v107);
    v109 = vsubq_s32(v106, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v106, v106), v107));
    v110 = vsubq_s32(v105, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v105, v105), v107));
    v111 = vsubq_s32(v104, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v104, v104), v107));
    v112 = vdupq_n_s32(0x21D87637u);
    v113 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v103, v108), v112), (int8x16_t)v112), veorq_s8(v91, (int8x16_t)v90));
    v114 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v111, v112), (int8x16_t)v112), veorq_s8(v92, (int8x16_t)v90));
    v115 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v110, v112), (int8x16_t)v112), veorq_s8((int8x16_t)vaddq_s32(v89, v90), (int8x16_t)v90));
    v116 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v109, v112), (int8x16_t)v112), veorq_s8(v93, (int8x16_t)v90));
    v117 = (int8x16_t)vdupq_n_s32(0x793D99B8u);
    v118 = vdupq_n_s32(0xFC9ECCDC);
    v119 = (int8x16_t)vaddq_s32(vsubq_s32(v113, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v113, v113), v117)), v118);
    v120 = (int8x16_t)vaddq_s32(vsubq_s32(v114, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v114, v114), v117)), v118);
    v121 = (int8x16_t)vaddq_s32(vsubq_s32(v115, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v115, v115), v117)), v118);
    v122 = (int8x16_t)vaddq_s32(vsubq_s32(v116, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v116, v116), v117)), v118);
    v123 = (uint8x16_t)veorq_s8(v217.val[2], v79);
    v124 = vmovl_u8(*(uint8x8_t *)v123.i8);
    v125 = vmovl_high_u8(v123);
    v126.i64[0] = 0x9000000090;
    v126.i64[1] = 0x9000000090;
    v127 = vsubq_s32((int32x4_t)vmovl_high_u16(v125), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v125, 1uLL), v126));
    v128 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v124), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v124, 1uLL), v126)), 0x10uLL);
    v129 = vdupq_n_s32(0x83480000);
    v130 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v124.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v124.i8, 1uLL), v126)), 0x10uLL), v129), (int8x16_t)v129);
    v131 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v128, v129), (int8x16_t)v129);
    v132 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v125.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v125.i8, 1uLL), v126)), 0x10uLL), v129), (int8x16_t)v129);
    v133 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v127, 0x10uLL), v129), (int8x16_t)v129);
    v134 = (int8x16_t)vdupq_n_s32(0x64C00000u);
    v135 = vdupq_n_s32(0xB2606ADF);
    v136 = (int32x4_t)vorrq_s8(veorq_s8(v119, (int8x16_t)v118), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v130, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v130, v130), v134)), v135), (int8x16_t)v135));
    v137 = (int32x4_t)vorrq_s8(veorq_s8(v120, (int8x16_t)v118), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v131, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v131, v131), v134)), v135), (int8x16_t)v135));
    v138 = (int32x4_t)vorrq_s8(veorq_s8(v121, (int8x16_t)v118), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v132, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v132, v132), v134)), v135), (int8x16_t)v135));
    v139 = (int32x4_t)vorrq_s8(veorq_s8(v122, (int8x16_t)v118), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v133, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v133, v133), v134)), v135), (int8x16_t)v135));
    v140 = (int8x16_t)vdupq_n_s32(0x10797E7Au);
    v141 = vdupq_n_s32(0x883CBF3D);
    v142 = (int8x16_t)vaddq_s32(vsubq_s32(v136, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v136, v136), v140)), v141);
    v143 = (int8x16_t)vaddq_s32(vsubq_s32(v137, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v137, v137), v140)), v141);
    v144 = (int8x16_t)vaddq_s32(vsubq_s32(v138, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v138, v138), v140)), v141);
    v145 = (int8x16_t)vaddq_s32(vsubq_s32(v139, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v139, v139), v140)), v141);
    v146 = (uint8x16_t)veorq_s8(v217.val[3], v79);
    v147 = vmovl_u8(*(uint8x8_t *)v146.i8);
    v148 = vmovl_high_u8(v146);
    v126.i64[0] = 0xC0000000C0;
    v126.i64[1] = 0xC0000000C0;
    v149 = vsubq_s32((int32x4_t)vmovl_high_u16(v148), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v148, 1uLL), v126));
    v150 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v147), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v147, 1uLL), v126)), 0x18uLL);
    v151 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v147.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v147.i8, 1uLL), v126)), 0x18uLL), v81), (int8x16_t)v81);
    v152 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v150, v81), (int8x16_t)v81);
    v153 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v148.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v148.i8, 1uLL), v126)), 0x18uLL), v81), (int8x16_t)v81);
    v154 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v149, 0x18uLL), v81), (int8x16_t)v81);
    v155 = vdupq_n_s32(0x6C871AC1u);
    v156 = (int32x4_t)vorrq_s8(veorq_s8(v142, (int8x16_t)v141), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v151, (int32x4_t)(*(_OWORD *)&vaddq_s32(v151, v151) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v155), (int8x16_t)v155));
    v157 = (int32x4_t)vorrq_s8(veorq_s8(v143, (int8x16_t)v141), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v152, (int32x4_t)(*(_OWORD *)&vaddq_s32(v152, v152) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v155), (int8x16_t)v155));
    v158 = (int32x4_t)vorrq_s8(veorq_s8(v144, (int8x16_t)v141), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v153, (int32x4_t)(*(_OWORD *)&vaddq_s32(v153, v153) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v155), (int8x16_t)v155));
    v159 = (int32x4_t)vorrq_s8(veorq_s8(v145, (int8x16_t)v141), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v154, (int32x4_t)(*(_OWORD *)&vaddq_s32(v154, v154) & __PAIR128__(0xD9FFFFFFD9FFFFFFLL, 0xD9FFFFFFD9FFFFFFLL))), v155), (int8x16_t)v155));
    v160 = vdupq_n_s32(0x1CAAB72Bu);
    a60 = vaddq_s32(vaddq_s32(v158, v160), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32(v158, v158), v77)));
    a61 = vaddq_s32(vaddq_s32(v159, v160), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32(v159, v159), v77)));
    a58 = vaddq_s32(vaddq_s32(v156, v160), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32(v156, v156), v77)));
    a59 = vaddq_s32(vaddq_s32(v157, v160), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32(v157, v157), v77)));
    return ((uint64_t (*)(__n128))(*(_QWORD *)(v62 + 8 * ((a8 - 206210133) & 0x73DFBFF)) - 4))(v69);
  }
  else
  {
    a45 = 2 * (a45 ^ v67) + v67 - (v63 & (4 * (a45 ^ v67)));
    a46 = 2 * (a46 ^ v67) + v67 - (v63 & (4 * (a46 ^ v67)));
    a47 = 2 * (a47 ^ v67) + v67 - (v63 & (4 * (a47 ^ v67)));
    a48 = 2 * (a48 ^ v67) + v67 - (v63 & (4 * (a48 ^ v67)));
    return v68(2363117530, v69);
  }
}

uint64_t sub_19C5F46F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,uint64_t a26,int a27,unsigned int a28)
{
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  _BOOL4 v32;

  v29 = a8 ^ (a8 - 4);
  v30 = v29 + 1046;
  v31 = 139 * v29;
  if (a28 < 0x9ADECA73 != (a25 + 620643948) < 0x9ADECA73)
    v32 = (a25 + 620643948) < 0x9ADECA73;
  else
    v32 = a25 + 620643948 > a28;
  return ((uint64_t (*)(void))(*(_QWORD *)(v28 + 8 * (((((v31 ^ v32) & 1) == 0) * (v30 ^ 0x168)) ^ (a5 + a8 + 964)))
                            - 12))();
}

uint64_t sub_19C5F4798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10
                                                                        + 8
                                                                        * (v9 ^ (154
                                                                               * (v8 + a7 + 63 >= (v8 + a7)))))
                                                            - (v9 ^ 0x20u)
                                                            - ((a8 + v9 - 556) ^ 0xFFFFFFFFFAF3744ELL)))(2363117530, 92, 1943);
}

uint64_t sub_19C5F4800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  return ((uint64_t (*)(void))(*(_QWORD *)(v27
                                        + 8
                                        * (((a24 + v24 - v26 < ((a8 + v25 - 524) ^ 0x50C8A5EuLL))
                                          * (v25 - 492)) ^ v25))
                            - 12))();
}

uint64_t sub_19C5F4854@<X0>(int a1@<W4>, int a2@<W6>, int a3@<W7>, int a4@<W8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v7 + v6 + v11) = *(_BYTE *)(v10 + (v5 + a2))
                            - (v8 & (2 * *(_BYTE *)(v10 + (v5 + a2))))
                            + 69;
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * ((7 * (v7 + 1 == ((a4 - a3 + 28) ^ (unint64_t)(v4 + 44)))) ^ (a1 + a4 + 1162))))();
}

uint64_t sub_19C5F48B0(uint64_t a1, unint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8)
{
  int v8;
  int8x16_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;

  *v9 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v12 + (v8 + a7)), vandq_s8(vaddq_s8(*(int8x16_t *)(v12 + (v8 + a7)), *(int8x16_t *)(v12 + (v8 + a7))), v14)), v13);
  return (*(uint64_t (**)(void))(v11 + 8 * (((((v10 - a8 + 28) ^ a2) == 16) * a3) ^ (a5 + v10 + 762))))();
}

uint64_t sub_19C5F490C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v13;
  int v14;
  uint64_t v15;
  _BOOL4 v16;

  if ((a13 + 1541257930) < 0x7BF35184 != (v13 + 101895485) < 0x7BF35184)
    v16 = (a13 + 1541257930) < 0x7BF35184;
  else
    v16 = v13 + 101895485 < (a13 + 1541257930);
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((146 * v16) ^ v14)) - ((v14 - 1022) | 0x20u) + 48))();
}

uint64_t sub_19C5F4980(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v54;

  v54 = a2 ^ 0xAD;
  v47 = (a2 + 14) | 4;
  v48 = 1305237457 * ((~((v46 - 184) | 0xE37D97D7) + ((v46 - 184) & 0xE37D97D7)) ^ 0xA53BCEE6);
  *(_DWORD *)(v46 - 184) = (a13 + 415388340) ^ v48;
  *(_DWORD *)(v46 - 168) = v48 + a2 + 1762;
  *(_QWORD *)(v46 - 176) = a10;
  v49 = sub_19C5F6FA0(v46 - 184);
  v50 = a45 & 0x3F;
  v51 = (v50 << (v47 ^ 0x4F)) ^ 0x30;
  *(&a36 + v51 + (v50 ^ 0xEDB2D5A7) + v54 + 307046832) = -59;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v45
                                                      + 8
                                                      * ((1916 * (v51 + (v50 ^ 0xEDB2D5A7) + 307046921 < 0xFFFFFFC8)) ^ a2))
                                          - 12))(v49);
}

uint64_t sub_19C5F4AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10
                                                                        + 8
                                                                        * ((((v9 - 416501922) & 0x1DDFDA5E ^ (a8 + 576))
                                                                          * ((v8 + 146) < 0x40)) ^ v9))
                                                            - 8))(a1, a2, 2211153648);
}

uint64_t sub_19C5F4AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11
                                        + 8
                                        * ((11
                                          * (-307047001 - v8 - v9 + 86 >= ((a8 + ((v10 - 895032498) & 0x35591CFF) - 223) ^ (a8 - 5)))) ^ (v10 + 1717)))
                            - 4))();
}

uint64_t sub_19C5F4B60()
{
  unsigned int v0;
  unsigned int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((2021 * (((v0 < 0xF) ^ (v1 - 42 + v1 - 17)) & 1)) ^ v1))
                            - 8))();
}

uint64_t sub_19C5F4BA4@<X0>(uint64_t a1@<X2>, int a2@<W4>, int a3@<W7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,char a31)
{
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  __int128 v35;

  v34 = v32 & 0x27EFBA7F;
  *(_QWORD *)&v35 = 0x4545454545454545;
  *((_QWORD *)&v35 + 1) = 0x4545454545454545;
  *(_OWORD *)(&a31 + (((v34 ^ (a3 + 145)) + 4294967150) & (a4 + a1))) = v35;
  return ((uint64_t (*)(void))(*(_QWORD *)(v33 + 8 * ((759 * ((v31 & 0x1FFFFFFF0) == 16)) ^ (a2 + v34 + 1307))) - 8))();
}

void sub_19C5F4C08()
{
  JUMPOUT(0x19C5F4BCCLL);
}

uint64_t sub_19C5F4C14@<X0>(int a1@<W0>, int a2@<W6>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,char a30)
{
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  unsigned int v39;
  int v40;
  _BOOL4 v41;

  v38 = v30 < v34;
  *(&a30 + (a3 + v33)) = *(_BYTE *)(v37 + (v32 + a2))
                                     - (((v35 + 34) ^ 0xB6) & (2 * *(_BYTE *)(v37 + (v32 + a2))))
                                     + 69;
  v39 = v32 + 1 + a1;
  v40 = v38 ^ (v39 < v34);
  v41 = v39 < v30;
  if (!v40)
    v38 = v41;
  return ((uint64_t (*)(void))(*(_QWORD *)(v36 + 8 * ((v38 * v31) ^ v35)) - 12))();
}

uint64_t sub_19C5F4C84@<X0>(int a1@<W4>, int a2@<W8>)
{
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)((((a2 - 2083813648) < 0x38) * (((v2 + 686946473) & 0xD2017F0F) - 393)) ^ (a1 + v2 + 1065))))();
}

uint64_t sub_19C5F4CD0@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((25
                                          * (((((v1 + 84182585) | 0x8020E) ^ ((2083813703 - a1) < 7)) & 1) == 0)) ^ v1))
                            - 8))();
}

uint64_t sub_19C5F4D28@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,char a29)
{
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = (v30 + 951) | 1u;
  *(_QWORD *)(&a29 + ((((_DWORD)v33 - 899427128) & 0x359C277F ^ v31) & (v29 + a1))) = 0x4545454545454545;
  return ((uint64_t (*)(void))(*(_QWORD *)(v32 + 8 * (int)((898 * ((((v33 ^ 0x5BE) + a2) & 0x1FFFFFFF8) == 8)) ^ v33))
                            - 4))();
}

void sub_19C5F4D98()
{
  JUMPOUT(0x19C5F4D74);
}

uint64_t sub_19C5F4DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (v5 ^ (1719 * (v6 == v7))))
                            - ((v5 - a5 - 503) ^ 0x50C8A46)))();
}

void sub_19C5F4DDC()
{
  JUMPOUT(0x19C5F2E30);
}

uint64_t sub_19C5F510C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((v0 != v1) * (((v2 - 143) | 0xDD) - 217)) | v2)) - 8))();
}

uint64_t sub_19C5F5150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * ((((a5 + ((v6 - 1247897217) & 0x4F6DEFEF) + 106) ^ (v6 + 214))
                                          * ((v5 & 8) == 0)) ^ v6))
                            - 8))();
}

uint64_t sub_19C5F5198@<X0>(int a1@<W2>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  *(_QWORD *)(&a29 + (a2 + a1 + v30)) = 0x4545454545454545;
  return (*(uint64_t (**)(void))(v32
                              + 8
                              * ((28
                                * (((((v31 + 68) & 0xAF) - 24) ^ (((((v31 - 1797901244) & 0x6B29CBAF)
                                                                                   + 0x1FFFFFE4FLL) & v29)
                                                                                 - 8 == v30)) & 1)) ^ (v31 - 1797901244) & 0x6B29CBAFu)))();
}

uint64_t sub_19C5F5208@<X0>(unsigned __int8 a1@<W8>, double a2@<D0>)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(double *)(v5 + (v3 + v6)) = a2;
  return (*(uint64_t (**)(void))(v7 + 8 * ((28 * ((a1 ^ (v4 == v6)) & 1)) ^ v2)))();
}

uint64_t sub_19C5F5238@<X0>(int a1@<W7>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((a2 ^ (a1 + 145) ^ (a1 + 385)) * (v2 != v3)) ^ a2)) - 8))();
}

void sub_19C5F5264()
{
  JUMPOUT(0x19C5F2E30);
}

uint64_t sub_19C5F5274(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,char a35)
{
  int v35;
  int v36;
  uint64_t v37;

  *(&a35 + (v36 + a3)) = 69;
  return ((uint64_t (*)(void))(*(_QWORD *)(v37 + 8
                                              * ((1068 * ((v36 + 1 + a3) < 0x40)) ^ (a5 + v35 + 129)))
                            - 8))();
}

uint64_t sub_19C5F5314@<X0>(uint64_t a1@<X0>, char a2@<W7>, unsigned int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42)
{
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  _BOOL4 v48;

  v47 = *(_DWORD *)(&a30 + ((v45 + v42) & 0xFFFFFFFC) + 72);
  *(_BYTE *)(a1 + (v45 + v42)) = (v47 >> ((a2 + v43 + 80) ^ (a2 + 8))) ^ 0xC6;
  *(_BYTE *)(a1 + (v45 + v42 + 1)) = BYTE2(v47) ^ 0x99;
  *(_BYTE *)(a1 + (v45 + v42 + 2)) = BYTE1(v47) ^ 0x4E;
  *(_BYTE *)(a1 + (v45 + v42 + 3)) = v47 ^ 0x41;
  v48 = v45 - 1907181113 < (a42 + 2010062694);
  if (v45 - 1907181113 < a3 != a42 + 2010062694 < a3)
    v48 = a42 + 2010062694 < a3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v46 + 8 * ((v48 * v44) | v43)) - 4))();
}

void sub_19C5F5688()
{
  JUMPOUT(0x19C5F5508);
}

uint64_t sub_19C5F569C@<X0>(char a1@<W4>, char a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,char a29)
{
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v33 = v30 - 1;
  v34 = ((((v31 - a1 + v29 - 118) ^ 0xBA) + a2 - ((2 * ((v31 - a1 + v29 - 118) ^ 0xBA)) & 0x26)) ^ a2) * (v29 - 103);
  *(&a29 + v33) = (v34 - ((2 * v34) & 0xD2) - 23) ^ 0xE9;
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v32 + 8 * ((389 * (v33 == 0)) ^ v31)) - 8))(0);
}

void sub_19C5F5774(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  char v6;
  _BYTE v7[8];

  v2 = (unint64_t)&v7[qword_1EE425000 - qword_1EE424C88];
  v3 = 2004212711 * v2 + 0x7AEADA820E769987;
  v4 = 2004212711 * (v2 ^ 0x7AEADA820E769987);
  qword_1EE424C88 = v3;
  v5 = off_1E3D64110[((-25 * ((v4 + v3) ^ 0x87)) ^ byte_19CB2C630[byte_19CB16690[(-25 * ((v4 + v3) ^ 0x87))] ^ 0x53])
                   + 119];
  v6 = byte_19CAFC490[byte_19CB2C730[(-25 * (v3 ^ 0x87 ^ v4))] ^ 0x26];
  qword_1EE425000 = v4;
  ((void (*)(uint64_t (*)(uint64_t), void (*)()))v5)(off_1E3D64110[((-25 * (v3 ^ 0x87 ^ v4)) ^ v6) - 31], sub_19C61D1F4);
  __asm { BR              X11 }
}

uint64_t sub_19C5F588C()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1880 * (*(_QWORD *)(*(_QWORD *)(v2 + 2048) - 4) == 0)) ^ v0))
                            - 12))();
}

uint64_t sub_19C5F58C4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 ^ 0x6F2u)))(v1);
}

void sub_19C5F58E4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_19C5F5944()
{
  uint64_t v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((1154 * (v1 != 1055960901)) ^ 0x2D9u)) - 12))();
}

uint64_t sub_19C5F597C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;

  v4 = v1 - (**(_BYTE **)(v3 + 8) == 0);
  *(_DWORD *)(*(_QWORD *)(v2 + 96) + 528) = 1560277383;
  *(_DWORD *)(*(_QWORD *)(v2 + 96) + 532) = 1323025765;
  *(_QWORD *)(*(_QWORD *)(v2 + 96) + 536) = *(_QWORD *)(v2 + 96) + 544;
  v5 = *(_QWORD *)(v3 + 8) + (*(_DWORD *)(v3 + 4) - v4);
  v6 = 545147329
     * (((&v9 | 0xEF32BB2D) - &v9 + (&v9 & 0x10CD44D0)) ^ 0x4FC67B41);
  v10 = *(_QWORD *)(v2 + 96) + 0x26866D3AFFDFE229;
  v13 = v5;
  v9 = (v4 + 2514849) ^ v6;
  v12 = v6 ^ 0x298;
  ((void (*)(int *))(*(_QWORD *)(a1 + 376) - 4))(&v9);
  v7 = v11;
  *(_QWORD *)(*(_QWORD *)(v2 + 96) + 512) = *(_QWORD *)(v3 + 8) + (*(_DWORD *)(v3 + 4) - v4);
  return (v7 - 1824118303);
}

void sub_19C5F5AE8(uint64_t a1)
{
  int v1;
  _BOOL4 v3;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0x26866D3AFFDFE015) == 1323025765
    || *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x26866D3AFFDFE015) == 1323025765;
  v1 = *(_DWORD *)a1 + 1980347521 * (((a1 | 0x906CFAAC) - a1 + (a1 & 0x6F930553)) ^ 0x2988BA51);
  __asm { BR              X15 }
}

void sub_19C5F5BE8()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void sub_19C5F6418(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32)
     - 961177747 * (((a1 ^ 0x6BB4C2C5 | 0x7EE1305) - (a1 ^ 0x6BB4C2C5) + ((a1 ^ 0x6BB4C2C5) & 0xF811ECFA)) ^ 0x4B0820DC);
  __asm { BR              X14 }
}

uint64_t sub_19C5F654C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;

  v14 = v11 > 0x4999A30E;
  *(_DWORD *)(a9 + 4 * (v9 + a1)) = *(_DWORD *)(*(_QWORD *)(v12 - 0x26866D3AFFDFE011) + 4 * (v9 + a1));
  if (v14 == v9 + 717457380 < (int)((v10 - 305) ^ 0xB6665C1A))
    v14 = v9 + 717457380 < (int)(v11 + 912678129);
  return (*(uint64_t (**)(void))(v13 + 8 * ((47 * v14) ^ v10)))();
}

uint64_t sub_19C5F65E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  int v12;
  int v13;
  uint64_t v14;
  _BOOL4 v16;

  v16 = v12 - 1363232806 > 979471591 || v12 - 1363232806 < a12 - 1168012056;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * ((25 * v16) ^ v13)) - ((643 * (v13 ^ 0xE9u)) ^ 0x502)))();
}

uint64_t sub_19C5F6664@<X0>(int a1@<W4>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  _BOOL4 v19;

  *(_DWORD *)(a10 + 4 * (v10 + a2)) = a1 + 408;
  v17 = v12 + v10 + 1;
  v19 = v17 > v13 || v17 < v14;
  return ((uint64_t (*)(void))(*(_QWORD *)(v16 + 8 * ((v19 * v15) ^ v11)) - 4))();
}

uint64_t sub_19C5F66B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7
                                                                                          + 8
                                                                                          * (v6 ^ (((v5 != 0) << 7) | ((v5 != 0) << 9))))
                                                                              - ((((v6 + 2081040627) & 0x83F5D39E) + 902) ^ 0x51ALL)))(a1, a2, a3, a4, a5);
}

uint64_t sub_19C5F6700@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _BOOL4 v15;

  v11 = (a1 - 30) | 6;
  v12 = (*(_DWORD *)(*a4 - 0x33ECBDF6999B6168) - 81999035) * ((v11 + 602778809) & 0xDC124FD8 ^ 0xFB2EA843 ^ *a9);
  v13 = 545147329 * ((((v10 - 128) | 0xEFC4BE69) - (v10 - 128) + ((v10 - 128) & 0x103B4190)) ^ 0x4F307E05);
  *(_DWORD *)(v10 - 128) = (v11 + 732) ^ v13;
  *(_DWORD *)(v10 - 124) = 1323025765 - v13;
  *(_QWORD *)(v10 - 120) = a7;
  *(_QWORD *)(v10 - 104) = a6;
  *(_DWORD *)(v10 - 112) = (((v12 - ((2 * v12) & 0x196947D4) + 213165034) ^ 0xDB671CD3)
                          + 2071881472
                          + ((2 * (v12 - ((2 * v12) & 0x196947D4) + 213165034)) & 0xAFA77E72 ^ 0x9214650)) ^ v13;
  v14 = ((uint64_t (*)(uint64_t))((char *)off_1E3D64110[v11 - 1143] - 4))(v10 - 128);
  v15 = (int)(a5 + 912691035) > 912691036;
  if (a5 > 0x499970A4)
    v15 = 1;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9 + 8 * ((8 * v15) | (16 * v15) | v11)) - 4))(v14);
}

void sub_19C5F68C4()
{
  JUMPOUT(0x19C5F6750);
}

uint64_t sub_19C5F68CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, int a12, uint64_t a13)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;

  v16 = 32 * a12 - ((((v14 + 365) | 0x4A) ^ 0xCA742B00) & (a12 << 6)) - 449178562;
  v17 = 653146051 * ((((v15 - 128) | 0x9DED805D) - ((v15 - 128) & 0x9DED805D)) ^ 0x37F935BF);
  *(_QWORD *)(v15 - 120) = a13;
  *(_DWORD *)(v15 - 128) = v17 + v14 + 1105;
  *(_DWORD *)(v15 - 124) = v17 + (v16 ^ 0xFA07EBD1) - 67666638 + ((v14 + 92) ^ 0xA7029B4 ^ (2 * v16) & 0x3E7BFFC0);
  sub_19C5D1180(v15 - 128);
  return (*(uint64_t (**)(void))(v13 + 8 * ((108 * ((*a10 - 1323025766) > 0x7FFFFFFE)) ^ v14)))();
}

uint64_t sub_19C5F69CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_DWORD *)(v17 - 128) = v15
                         + 1305237457 * ((((2 * (v17 - 128)) | 0x4A33B69A) - (v17 - 128) + 1525032115) ^ 0x1CA07D83)
                         - 79;
  *(_QWORD *)(v17 - 120) = &STACK[0x26866D3AFFDFE059];
  *(_QWORD *)(v17 - 112) = a14;
  sub_19C5B3D5C(v17 - 128);
  *(_QWORD *)(v17 - 120) = a14;
  *(_QWORD *)(v17 - 112) = v16;
  *(_DWORD *)(v17 - 124) = v15 + 291962093 * ((v17 - 128) ^ 0x11F20D4A) + 1079;
  v18 = off_1E3D64110[v15 ^ 0x1BE](v17 - 128);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8
                                            * ((1644 * (*(_DWORD *)(v17 - 128) > (((v15 ^ 0x3DB) + 288) ^ 0x173F04D1u))) ^ v15)))(v18);
}

uint64_t sub_19C5F6AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  uint64_t v16;
  int v17;
  int v18;

  v18 = a16 - 1323025765;
  if (a16 - 1323025765 < 0)
    v18 = 1323025765 - a16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v16
                                        + 8
                                        * ((107
                                          * ((int)((v18 ^ (((v17 + 701) | 0x20) - 822361655))
                                                 + ((2 * v18) & 0x9DF78FEA)
                                                 + 822360074) > (int)(((((v17 + 701) | 0x20) ^ 0x563) - 307) ^ 0xFFFFFDE3))) ^ ((v17 + 701) | 0x20)))
                            - 4))();
}

uint64_t sub_19C5F6B58(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * (((*(_DWORD *)(v2 + 4 * v3) != ((v5 - 1228357808) & 0x49373F7C ^ (a2 + 900)))
                                          * v4) ^ v5))
                            - (v5 + 733)
                            + 1576))();
}

uint64_t sub_19C5F6BA0()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((107 * (v0 - 1 > (int)(((v1 ^ 0x563) - 307) ^ 0xFFFFFDE3))) ^ v1))
                            - 4))();
}

uint64_t sub_19C5F6BE0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v4 + 16);
  *(_DWORD *)(v1 - 128) = v0
                        + 1305237457 * ((2 * ((v1 - 128) & 0x41D84988) - (v1 - 128) + 1042790004) ^ 0x879E10BA)
                        - 119;
  *(_QWORD *)(v1 - 120) = v2;
  *(_QWORD *)(v1 - 112) = v5;
  return sub_19C5B3D5C(v1 - 128);
}

uint64_t sub_19C5F6FA0(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v1 = 1305237457 * (((a1 | 0xF9A7E9AC) - (a1 & 0xF9A7E9AC)) ^ 0x401E4F62);
  v2 = *(_DWORD *)(a1 + 16) - v1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (*(_DWORD *)a1 ^ v1) - 953674094;
  v5 = v4
     + (*(_DWORD *)(v3 - 0xBC8884B3565C635) ^ 0x8BC78E58)
     - ((2 * (v4 + (*(_DWORD *)(v3 - 0xBC8884B3565C635) ^ 0x8BC78E58))) & 0x178F1CB0)
     - 1949856168;
  *(_DWORD *)(v3 - 0xBC8884B3565C635) = v5;
  return (*((uint64_t (**)(void))off_1E3D64110[v2 - 1735] + ((59 * ((v5 ^ 0x8BC78E58) < v4)) ^ v2)))();
}

void sub_19C5F7060(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0xBC8884B3565C639) = (*(_DWORD *)(a1 - 0xBC8884B3565C639) ^ 0x77DF6C14)
                                        + 2011130900
                                        - ((2 * (*(_DWORD *)(a1 - 0xBC8884B3565C639) ^ 0x77DF6C14) + 2) & 0xEFBED828)
                                        + 1;
}

uint64_t sub_19C5F70A8(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  _BOOL4 v5;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0x26866D3AFFDFE015) - 1137074896;
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x26866D3AFFDFE015) - 1137074896;
  v4 = (v2 < -1961532779) ^ (v3 < -1961532779);
  v5 = v2 > v3;
  if (v4)
    v5 = v2 < -1961532779;
  v1 = *(_DWORD *)(a1 + 4) - 291962093 * ((a1 - 447231944 - 2 * (a1 & 0xE557C838)) ^ 0xF4A5C572);
  return ((uint64_t (*)(void))(*((_QWORD *)off_1E3D64110[v1 ^ 0x67C] + ((134 * !v5) ^ v1))
                            - ((v1 + 1253042626) & 0xB55013BF)
                            + 937))();
}

uint64_t sub_19C5F7190(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;

  v5 = (v3 ^ 0x2A5) + v4 - 1116303686;
  v6 = v2 - 1116303422;
  v7 = v6 < -1940761305;
  v8 = v5 < v6;
  if (v7 != v5 < -1940761305)
    v8 = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * ((!v8 * (3 * (v3 ^ 0x2A5) + 1142)) ^ v3)))(a1, 390006686);
}

uint64_t sub_19C5F7204@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v5 = (v4 - 247) | 0x18C;
  if (v3 + 824457883 < 0)
    v6 = v3;
  else
    v6 = v5 - v3 - 1648916707;
  return (*(uint64_t (**)(uint64_t, _QWORD))(v2
                                                    + 8 * ((1846 * (v6 + ((v5 + 606) | 0x20) - 1323027345 >= 0)) ^ v5)))(a1, (a2 + 1));
}

uint64_t sub_19C5F7298(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  unsigned int v7;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1
                                                               + 8
                                                               * ((269
                                                                 * ((*(_DWORD *)(*v4 + 4 * v7) ^ (v2 + 792)) <= (*(_DWORD *)(*v5 + 4 * v7) ^ ((v6 ^ 0x533u) + v2)))) ^ v6))
                                                   - 4))(a1, v3);
}

uint64_t sub_19C5F72E8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  return (*(uint64_t (**)(void))(v3 + 8 * (((((v5 - 779) | 0x3A0) - 903) * (v4 < a3)) ^ v5)))();
}

uint64_t sub_19C5F7310@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W8>)
{
  uint64_t v3;
  int v4;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v3
                                                    + 8 * ((1846 * (v4 - 1323027345 + ((a2 + 606) | 0x20) >= 0)) ^ a2)))(a1, (a3 + 1));
}

_DWORD *sub_19C5F734C(_DWORD *result, int a2)
{
  int v2;

  *result = ((a2 + 638) ^ 0x2E7E0915) - v2;
  return result;
}

void sub_19C5F7368()
{
  uint64_t v0;
  int v1;
  int v2;

  v0 = MEMORY[0x1E0C80A78]();
  v1 = 291962093 * (((v0 | 0x710051E1) - v0 + (v0 & 0x8EFFAE1E)) ^ 0x60F25CAB);
  v2 = *(_DWORD *)(v0 + 28) ^ v1;
  __asm { BR              X9 }
}

uint64_t sub_19C5F7470@<X0>(unsigned int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  LODWORD(STACK[0x20C]) = v1;
  v6 = v1 - 1297;
  v7 = v1 + 48;
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(v5 + 8 * (v1 - 1253)))((*(_DWORD *)(v3 + 24) ^ a1) - 1275063071, 174691538);
  *(_QWORD *)(*(_QWORD *)v4 + 32) = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * ((v7 ^ (v8 == 0)) & 1 ^ v6)) - 4))(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_19C5F74F8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;

  v11 = v0;
  v6 = (v0 - 1902319839) & 0x71631DEF;
  if (v1 >= (v0 ^ 0x359u) + 1275062074)
    v7 = 0;
  else
    v7 = 0xFFFFFFFF00000000;
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, unint64_t, uint64_t))(v5 + 8 * (v0 - 170)))(*(_QWORD *)(*(_QWORD *)v4 + 32), *(_QWORD *)(v3 + 32), (v1 | ((unint64_t)(v1 < (v0 ^ 0x359u) + 1275062074) << 32)) - 1275063071, -1);
  v9 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)v4 + 32) + 4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * ((1777
                                                        * (v7
                                                         - v1
                                                         + (v9 ^ (v6 + 0x6E5FF7AC7BDBF928))
                                                         + ((2 * (_DWORD)v9) & 0xF7B7FDEA) == 0x6E5FF7AC2FDC126DLL)) ^ v11))
                                          - 4))(v8);
}

uint64_t sub_19C5F75EC()
{
  int v0;
  uint64_t v1;

  LODWORD(STACK[0xE50]) = 538285754;
  STACK[0xE58] = 0;
  LODWORD(STACK[0xE60]) = 1660481001;
  LODWORD(STACK[0xE68]) = 1055960901;
  STACK[0xE70] = 0;
  LODWORD(STACK[0xE78]) = 1055960901;
  STACK[0xE80] = 0;
  LODWORD(STACK[0xE88]) = 1055960901;
  STACK[0xE90] = 0;
  LODWORD(STACK[0xE98]) = 1055960901;
  STACK[0xEA0] = 0;
  LOBYTE(STACK[0xEA8]) = 34;
  *(_OWORD *)&STACK[0x38C] = 0u;
  STACK[0x39C] = 0x3EF0AF4500000000;
  LODWORD(STACK[0x388]) = 538285754;
  LODWORD(STACK[0x3A4]) = 1624418606;
  LODWORD(STACK[0x470]) = 1624418606;
  *(_OWORD *)&STACK[0x53C] = 0u;
  *(_OWORD *)&STACK[0x54C] = 0u;
  STACK[0x55C] = 0;
  strcpy((char *)&STACK[0x7F0], "EEEEEEEEEEEEEEEEEEEE");
  LOBYTE(STACK[0x805]) = 0;
  LOWORD(STACK[0x806]) = 0;
  STACK[0x808] = 0;
  STACK[0x810] = 0;
  *(_OWORD *)&STACK[0x818] = 0u;
  *(_OWORD *)&STACK[0x828] = 0u;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v0 - 132443110) & 0x7E4EBD9 ^ 0x3Cu)) - 4))();
}

uint64_t sub_19C5F76F8(__n128 a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;

  v5 = (__n128 *)(v2 + v3);
  v5[73] = a1;
  v5[74] = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((60 * (v3 != 224)) ^ v1)) - 4))();
}

uint64_t sub_19C5F7728(__n128 a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;

  STACK[0x918] = 0x34301688151AE943;
  STACK[0x920] = v3;
  STACK[0x928] = v3;
  LODWORD(STACK[0x930]) = v4;
  *(__n128 *)(v2 + 1452) = a1;
  return ((uint64_t (*)(uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t (**)(uint64_t)))(*(_QWORD *)(v5 + 8 * v1) - 4))(0x75D2FCC4ED1CBBFFLL, &STACK[0x258], 0x7C4785EAAD9B7D37, &STACK[0x348], 0x7A3624D49D1A9A9BLL, &STACK[0x260], off_1E3D64110);
}

uint64_t sub_19C5F781C()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  *(_OWORD *)((char *)&STACK[0x388] + v2) = 0u;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((v2 == 1500) * v1) ^ v0)) - 4))();
}

#error "19C5F7A60: call analysis failed (funcsize=114)"

uint64_t sub_19C5F7A64@<X0>(int a1@<W1>, int a2@<W3>, int a3@<W8>)
{
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((((v3 + 402) | a1) - 998) * (a3 == a2)) ^ v3)) - 4))();
}

uint64_t sub_19C5F7A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a71;
  int v71;
  int v72;
  uint64_t v73;

  return ((uint64_t (*)(void))(*(_QWORD *)(v73
                                        + 8
                                        * ((61
                                          * (((((a6 + v72 + 3) & 0xFFFFFFFC)
                                             - 1954861778
                                             - ((v71 + 385242409 + ((v71 - 215) | 0x18)) & (2 * (a6 + v72 + 3)))) ^ 0x8B7B2D2E) == a71)) ^ (v71 - 241)))
                            - 12))();
}

uint64_t sub_19C5F7AF4(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((1999 * (a3 & ~((v5 + 516) ^ (v4 == v3)))) ^ v5))
                            - 3 * (v5 ^ 0x3D7u)
                            + 1473))();
}

uint64_t sub_19C5F7B3C(int a1)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  _BOOL4 v9;

  v4 = 37 * (v1 ^ 0x5F8);
  v5 = (v1 - 1560048369) & 0x5CFC6DEF;
  v6 = v1 + 370;
  v7 = LODWORD(STACK[0x220]) + 1289800598;
  v8 = (v7 < v5 + 1426561969) ^ ((v2 + 370601272) < 0x55079C7D);
  v9 = v7 < v2 + 370601272;
  if (v8)
    v9 = (v2 + 370601272) < 0x55079C7D;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((v9 * (v4 ^ a1)) ^ v6)) - 8))();
}

uint64_t sub_19C5F7D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;

  v76 = 1305237457 * ((v75 - 160) ^ 0xB9B9A6CE);
  *(_DWORD *)(v75 - 136) = v76 + v72 + 338297657;
  *(_DWORD *)(v75 - 132) = v76 + v73 + 96;
  *(_QWORD *)(v75 - 128) = a72;
  *(_QWORD *)(v75 - 112) = a59;
  *(_QWORD *)(v75 - 152) = a57;
  *(_QWORD *)(v75 - 144) = a61;
  *(_QWORD *)(v75 - 160) = a62;
  ((uint64_t (*)(uint64_t))((char *)off_1E3D64110[v73 ^ 0xAD] - 8))(v75 - 160);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74
                                                                                 + 8
                                                                                 * ((1989
                                                                                   * (*(_DWORD *)(v75 - 120) == 480950058)) ^ v73))
                                                                     - ((v73 + 87027239) & 0xFAD013DF ^ 0x2DBLL)))(2005, 324, 1, 1279043858);
}

uint64_t sub_19C5F7E00()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((*(_DWORD *)(v4 + (v0 + v5) * (uint64_t)v1) != 2043509487)
                                          * (((v3 - 1189906196) & 0x46EC85DF)
                                           + ((v3 - 1189906196) & 0x46EC85DF ^ 0x5D0)
                                           - 1462)) ^ (v3 - 1189906196) & 0x46EC85DF))
                            - 4))();
}

uint64_t sub_19C5F7E70(uint64_t a1, int a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((((v4 + 58) | a2) - 681) * (v2 == v3 - 2060286703)) ^ v4)) - 12))();
}

uint64_t sub_19C5F7EB8()
{
  int v0;
  char v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((v1 + 2) == (v0 - 86)) * ((v0 ^ 0x7E8) - 53)) ^ (v0 - 1241))))();
}

uint64_t sub_19C5F7F4C()
{
  int v0;
  char v1;
  uint64_t v2;
  int v3;
  int v4;

  v3 = v0 - 917;
  v4 = (862002362 - ((v0 - 1477) ^ v1 & 8)) ^ 0x31635CAA;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8
                                             * ((1153 * ((v4 | 0x862451EC) - (v4 | 0x79DBAE13) != 172647401)) ^ v3))
                            - 12))();
}

uint64_t sub_19C5F7FC4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((185
                                          * (*(_DWORD *)(v8 + v7 * (uint64_t)v5 + 36) != a4 + (v4 ^ 0x7F5) - 1281 - 204)) ^ v4))
                            - 12))();
}

uint64_t sub_19C5F8000()
{
  int v0;
  int v1;
  uint64_t v2;
  _BOOL4 v4;

  v4 = v1 + 1511102155 > 642662365 || v1 + 1511102155 < SLODWORD(STACK[0x210]);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v0 ^ (543 * v4))) - ((v0 ^ 0x153u) + 1070) + 1477))();
}

uint64_t sub_19C5F8058@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((*(_DWORD *)(v4 + (v1 + v5) * (uint64_t)v2 + 36) == v1) * ((a1 - 476) ^ 0x5C8)) ^ a1))
                            - ((a1 - 1425) ^ 0x210)))();
}

uint64_t sub_19C5F80A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((((v6 - 2013783850) & 0x7807E5DD ^ 0x679) * (v5 == a5)) ^ v6))
                            - ((v6 - 990389291) & 0x3B0827DF ^ 0x5C1)))();
}

uint64_t sub_19C5F8100()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((1253 * ((*(_BYTE *)(v4 + (v1 + v5) * (uint64_t)v2 + 40) & 8) == 0)) ^ v0))
                            - ((v0 + 1281) ^ 0x5C5)))();
}

uint64_t sub_19C5F8148@<X0>(int a1@<W3>, int a2@<W8>)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v9;

  v6 = *(_DWORD *)(v5 + v2 * (uint64_t)v3 + 36);
  v8 = v6 - 1875888502 > 1550639004 || v6 - 1875888502 < SLODWORD(STACK[0x200]);
  v9 = v6 != ((17 * (a2 ^ 0x4CE)) ^ (a1 - 1417)) + ((a2 - 1013) | 0x500) && v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((26 * v9) ^ a2)) - 4))();
}

uint64_t sub_19C5F81BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;

  if (v9)
    v11 = a5;
  else
    v11 = a8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((1865 * (v11 == (v8 ^ 0x501 ^ (a5 + 188)))) ^ (v8 - 1281))) - 8))();
}

uint64_t sub_19C5F87A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t (*a69)(void);

  return a69();
}

uint64_t sub_19C5F87AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((v5 - 1467) ^ (1821 * (v6 == a5)))) - 12))();
}

void sub_19C5F87D0()
{
  JUMPOUT(0x19C5F7980);
}

void sub_19C5F885C()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = v0;
}

void sub_19C5FA924(uint64_t a1)
{
  int v1;
  int v2;
  _QWORD v3[2];
  _BYTE v4[400];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 16) - 1001500783 * ((a1 - 2 * (a1 & 0xA6350830) - 1506473936) ^ 0xEC81F784);
  v3[0] = 0;
  v3[1] = 0;
  v2 = ((uint64_t (*)(_BYTE *, _QWORD *))off_1E3D64110[v1 ^ 0x2D6])(v4, v3);
  __asm { BR              X9 }
}

uint64_t sub_19C5FAA10@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  int v59;
  BOOL v60;
  int v61;

  if (*(_QWORD *)a3)
    v60 = (*(_DWORD *)(a3 + 12) ^ v59) == ((((4 * a1) ^ 0x1384) + 55135237) & 0xFCB6B3F8 ^ 0x1CC61E81);
  else
    v60 = 1;
  v61 = v60;
  return ((uint64_t (*)(void))(*(_QWORD *)(a59 + 8 * ((420 * v61) ^ a1)) - 12))();
}

uint64_t sub_19C5FAA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  int v65;

  HIDWORD(a9) = -480907450;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a65 + 8 * (int)((1828 * (*(_QWORD *)(a10 + 24) != 0)) ^ (v65 + 853066023) & 0xCD273FB5)) - ((333 * (((((v65 + 853066023) & 0xCD273FB5) - 683) | 0x2B1) ^ 0x2B9)) ^ 0x29ELL)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, *(_QWORD *)(a10 + 24), a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62,
           a63);
}

uint64_t sub_19C5FAB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  int v66;
  int v67;
  int v68;

  v68 = 828122041 * (*(_DWORD *)(a10 + 20) + v67) - 1780424893;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a66
                                                      + 8
                                                      * ((((((v66 + 33) ^ 0xF75BFD47) & (2 * v68)) + (v68 ^ 0x7BADFFFE) != 2075000850)
                                                        * ((v66 - 287) ^ 0x154)) ^ v66))
                                          - 4))(a1);
}

void sub_19C5FABC4()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = v0;
}

#error "19C5FADA0: call analysis failed (funcsize=78)"

uint64_t sub_19C5FADA4@<X0>(char a1@<W3>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  int v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  char v67;
  _BOOL4 v69;

  v66 = v63 + 1;
  v67 = *(_BYTE *)(a59 + (v60 + 683 + v66 + v65));
  *(_BYTE *)(v61 + (v64 + a2 - 1)) = v67 - (a1 & (2 * v67)) + 98;
  v69 = (v66 - 1384666479) < 0x2A35022C || v66 - 1384666479 >= v62;
  return ((uint64_t (*)(void))(*(_QWORD *)(a60 + 8 * ((1523 * v69) ^ v60)) - 4))();
}

uint64_t sub_19C5FAE14@<X0>(uint64_t a1@<X0>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  int v61;
  int v62;

  *(_BYTE *)(v60 + (v62 + a2 - 1)) = -30;
  return (*(uint64_t (**)(uint64_t, uint64_t))(a60
                                                     + 8
                                                     * ((((v62 + a2 - 57) < 8)
                                                       * ((((v61 - 418) | 4) - 603) ^ (v61 - 1001))) ^ v61)))(a1, 3598275614);
}

uint64_t sub_19C5FAE70@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v63;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a63 + 8 * (int)((((v63 + 966986863) & 0xC65CF3BF ^ 0x292) * (a5 != 1703490605)) ^ v63))
                                                                                                - ((v63 + 1353659235) & 0xAF50CFF3)
                                                                                                + 1503))(3599881019, a1, a2, 48264758, a3, a4, 120729406);
}

uint64_t sub_19C5FAF08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  int v65;
  uint64_t v66;
  char v67;
  int v68;
  int v69;

  v69 = (v65 - 1435) | 0x200;
  *(_BYTE *)(v66 + v68 + a9 + ((v69 - 577) | 0x260u) - 615) = v67;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a65 + 8 * ((47 * (v69 - a9 == -1703490020)) ^ v69)) - ((v69 - 64) | 0xB3u) + 695))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57);
}

uint64_t sub_19C5FAF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  unsigned int v65;
  int v66;
  int v67;
  _BOOL4 v69;

  v69 = v66 + 1910142492 > ((2 * v67) ^ 0x9EAB67A2) && v66 + 1910142492 <= v65;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a65 + 8 * ((1924 * v69) ^ v67)) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56);
}

void sub_19C5FAFF8()
{
  JUMPOUT(0x19C5FAF34);
}

uint64_t sub_19C5FB00C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  int v61;
  _BOOL4 v62;

  v62 = a3 == ((v61 + 1957958421) & 0x8B4BEA9F) + 1703490542 + 242 * (v61 ^ 0x4D3) - 1565;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a61 + 8 * (((4 * v62) | (8 * v62)) ^ v61)))(3599881019, a1, a2, 48264758);
}

uint64_t sub_19C5FB078@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;
  int v60;
  char v61;
  int v62;

  *(_BYTE *)(v59 + (a1 + v62)) = v61;
  return ((uint64_t (*)(void))(*(_QWORD *)(a59 + 8
                                              * ((((v60 - 316) ^ 0x298) * ((a1 & 0xFFFFFFFE) == 1703490596)) ^ v60))
                            - 12))();
}

uint64_t sub_19C5FB0DC(int a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16, int a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,uint64_t a63)
{
  int a64;
  int a65;
  int a66;
  int a67;
  uint64_t a68;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unint64_t v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  int v154;
  int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  int v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  int v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  int v173;
  unsigned int v174;
  int v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  int v191;
  int v192;
  BOOL v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  unint64_t v200;
  unsigned int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  unint64_t v209;
  int v210;
  unsigned int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  unsigned int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  unsigned int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  unsigned int v235;
  unsigned int v236;
  int v237;
  int v238;
  unsigned int v239;
  unsigned int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  int v256;
  int v257;
  int v258;
  unsigned int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  unsigned int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  char v281;
  int v282;
  int v283;
  int v284;
  unsigned int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  unsigned int v292;
  int v293;
  int v294;
  int v295;
  unsigned int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  unsigned int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  unsigned int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  unsigned int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  unsigned int v334;
  int v335;
  unsigned int v336;
  int v337;
  int v338;
  unsigned int v339;
  int v340;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int v352;
  int v353;
  unsigned int v354;
  int v355;
  int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  int v363;
  int v364;
  int v365;
  unint64_t v366;
  int v367;
  int v368;
  unsigned int v369;
  int v370;
  unsigned int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  int v389;
  int v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  unsigned int v412;
  unsigned int v413;
  int v414;
  int v415;
  unsigned int v416;
  int v417;
  unsigned int v418;
  int v419;
  int v420;
  int v421;
  unsigned int v422;
  unsigned int v423;
  int v424;
  unsigned int v425;
  int v426;
  int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  int v431;
  int v432;
  unsigned int v433;
  int v434;
  int v435;
  unsigned int v436;
  int v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int v440;
  int v441;
  unsigned int v442;
  int v443;
  int v444;
  unsigned int v445;
  int v446;
  int v447;
  unsigned int v448;
  unsigned int v449;
  int v450;
  unsigned int v451;
  int v452;
  unsigned int v453;
  unsigned int v454;
  int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  int v460;
  unsigned int v461;
  unsigned int v462;
  int v463;
  unsigned int v464;
  int v465;
  int v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  int v470;
  int v471;
  unsigned int v472;
  unsigned int v473;
  unsigned int v474;
  int v475;
  int v476;
  int v477;
  unsigned int v478;
  unsigned int v479;
  unsigned int v480;
  unsigned int v481;
  int v482;
  unsigned int v483;
  int v484;
  unsigned int v485;
  unsigned int v486;
  int v487;
  int v488;
  int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int v492;
  int v493;
  unsigned int v494;
  unsigned int v495;
  int v496;
  unsigned int v497;
  int v498;
  int v499;
  unsigned int v500;
  int v501;
  int v502;
  int v503;
  unsigned int v504;
  int v505;
  int v506;
  unsigned int v507;
  unsigned int v508;
  unsigned int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  unsigned int v514;
  unsigned int v515;
  int v516;
  unsigned int v517;
  unsigned int v518;
  unsigned int v519;
  int v520;
  unsigned int v521;
  unsigned int v522;
  int v523;
  unsigned int v524;
  unsigned int v525;
  int v526;
  int v527;
  unsigned int v528;
  unsigned int v529;
  unsigned int v530;
  int v531;
  unsigned int v532;
  unsigned int v533;
  int v534;
  int v535;
  unsigned int v536;
  unsigned int v537;
  int v538;
  unsigned int v539;
  unsigned int v540;
  int v541;
  unsigned int v542;
  int v543;
  unsigned int v544;
  int v545;
  int v546;
  unsigned int v547;
  unint64_t v548;
  unsigned int v549;
  int v550;
  unsigned int v551;
  unsigned int v552;
  int v553;
  int v554;
  int v555;
  unsigned int v556;
  int v557;
  unsigned int v558;
  unsigned int v559;
  int v560;
  unsigned int v561;
  unsigned int v562;
  int v563;
  unsigned int v564;
  int v565;
  unsigned int v566;
  int v567;
  int v568;
  int v569;
  int v570;
  int v571;
  int v572;
  int v573;
  int v574;
  unsigned int v575;
  unsigned int v576;
  int v577;
  unsigned int v578;
  int v579;
  unsigned int v580;
  unsigned int v581;
  unsigned int v582;
  unsigned int v583;
  int v584;
  unsigned int v585;
  int v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v592;
  unsigned int v593;
  unsigned int v594;
  unsigned int v595;
  unsigned int v596;
  unsigned int v597;
  unsigned int v598;
  int v599;
  unsigned int v600;
  unsigned int v601;
  unsigned int v602;
  unsigned int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  unsigned int v608;
  int v609;
  unsigned int v610;
  unsigned int v611;
  unsigned int v612;
  int v613;
  int v614;
  int v615;
  int v616;
  unsigned int v617;
  int v618;
  unsigned int v619;
  unsigned int v620;
  unsigned int v621;
  unsigned int v622;
  unsigned int v623;
  unsigned int v624;
  int v625;
  unsigned int v626;
  unsigned int v627;
  unsigned int v628;
  int v629;
  int v630;
  int v631;
  int v632;
  unsigned int v633;
  unsigned int v634;
  unsigned int v635;
  unsigned int v636;
  int v637;
  int v638;
  unsigned int v639;
  unsigned int v640;
  unsigned int v641;
  unsigned int v642;
  int v643;
  unsigned int v644;
  int v645;
  unsigned int v646;
  int v647;
  int v648;
  unsigned int v649;
  int v650;
  int v651;
  unsigned int v652;
  unsigned int v653;
  unsigned int v654;
  unsigned int v655;
  int v656;
  unsigned int v657;
  int v658;
  unsigned int v659;
  unsigned int v660;
  unsigned int v661;
  int v662;
  unsigned int v663;
  int v664;
  unsigned int v665;
  unsigned int v666;
  int v667;
  unint64_t v668;
  unsigned int v669;
  int v670;
  unsigned int v671;
  int v672;
  int v673;
  int v674;
  unsigned int v675;
  int v676;
  unsigned int v677;
  int v678;
  int v679;
  int v680;
  unsigned int v681;
  unsigned int v682;
  unsigned int v683;
  int v684;
  int v685;
  unsigned int v686;
  unsigned int v687;
  int v688;
  int v689;
  unsigned int v690;
  int v691;
  int v692;
  unsigned int v693;
  unsigned int v694;
  unsigned int v695;
  int v696;
  unsigned int v697;
  int v698;
  unsigned int v699;
  int v700;
  int v701;
  unsigned int v702;
  unsigned int v703;
  unsigned int v704;
  int v705;
  int v706;
  int v707;
  unsigned int v708;
  int v709;
  unsigned int v710;
  unsigned int v711;
  unsigned int v712;
  unsigned int v713;
  unsigned int v714;
  int v715;
  unsigned int v716;
  int v717;
  unsigned int v718;
  unsigned int v719;
  unsigned int v720;
  int v721;
  unsigned int v722;
  int v723;
  unsigned int v724;
  unsigned int v725;
  unsigned int v726;
  int v727;
  unsigned int v728;
  int v729;
  unsigned int v730;
  int v731;
  unsigned int v732;
  int v733;
  int v734;
  int v735;
  unsigned int v736;
  unsigned int v737;
  unsigned int v738;
  unsigned int v739;
  unsigned int v740;
  int v741;
  int v742;
  unsigned int v743;
  int v744;
  unsigned int v745;
  unsigned int v746;
  unsigned int v747;
  int v748;
  int v749;
  int v750;
  unsigned int v751;
  unsigned int v752;
  int v753;
  unsigned int v754;
  unsigned int v755;
  unsigned int v756;
  unsigned int v757;
  int v758;
  int v759;
  int v760;
  int v761;
  unsigned int v762;
  unsigned int v763;
  unsigned int v764;
  unsigned int v765;
  unsigned int v766;
  unsigned int v767;
  int v768;
  int v769;
  unsigned int v770;
  unsigned int v771;
  unsigned int v772;
  unsigned int v773;
  unsigned int v774;
  int v775;
  int v776;
  int v777;
  unsigned int v778;
  int v779;
  unsigned int v780;
  unsigned int v781;
  int v782;
  int v783;
  int v784;
  unsigned int v785;
  unsigned int v786;
  unsigned int v787;
  int v788;
  unsigned int v789;
  unsigned int v790;
  int v791;
  int v792;
  int v793;
  int v794;
  int v795;
  int v796;
  unsigned int v797;
  int v798;
  unsigned int v799;
  unsigned int v800;
  int v801;
  unsigned int v802;
  int v803;
  unsigned int v804;
  unsigned int v805;
  unsigned int v806;
  int v807;
  int v808;
  unsigned int v809;
  int v810;
  unsigned int v811;
  unsigned int v812;
  unsigned int v813;
  unsigned int v814;
  unsigned int v815;
  int v816;
  unsigned int v817;
  unsigned int v818;
  int v819;
  unsigned int v820;
  int v821;
  int v822;
  int v823;
  int v824;
  unsigned int v825;
  int v826;
  unsigned int v827;
  int v828;
  unsigned int v829;
  unsigned int v830;
  unsigned int v831;
  int v832;
  unsigned int v833;
  int v834;
  unsigned int v835;
  unsigned int v836;
  unsigned int v837;
  unsigned int v838;
  unsigned int v839;
  unsigned int v840;
  unsigned int v841;
  int v842;
  unsigned int v843;
  unsigned int v844;
  int v845;
  unsigned int v846;
  unsigned int v847;
  int v848;
  int v849;
  int v850;
  int v851;
  unsigned int v852;
  int v853;
  unsigned int v854;
  unsigned int v855;
  int v856;
  int v857;
  unsigned int v858;
  unsigned int v859;
  int v860;
  unsigned int v861;
  unsigned int v862;
  int v863;
  int v864;
  int v865;
  int v866;
  int v867;
  int v868;
  int v869;
  unsigned int v870;
  unsigned int v871;
  unsigned int v872;
  unsigned int v873;
  int v874;
  unsigned int v875;
  unsigned int v876;
  int v877;
  unsigned int v878;
  int v879;
  unsigned int v880;
  unsigned int v881;
  unsigned int v882;
  unsigned int v883;
  unsigned int v884;
  int v885;
  int v886;
  unsigned int v887;
  unsigned int v888;
  unsigned int v889;
  int v890;
  unsigned int v891;
  int v892;
  int v893;
  unsigned int v894;
  int v895;
  unsigned int v896;
  unsigned int v897;
  int v898;
  int v899;
  int v900;
  unsigned int v901;
  unsigned int v902;
  unsigned int v903;
  int v904;
  unsigned int v905;
  unsigned int v906;
  unsigned int v907;
  unsigned int v908;
  int v909;
  int v910;
  int v911;
  unsigned int v912;
  int v913;
  unsigned int v914;
  unsigned int v915;
  unsigned int v916;
  unsigned int v917;
  unsigned int v918;
  int v919;
  int v920;
  unsigned int v921;
  int v922;
  unsigned int v923;
  int v924;
  int v925;
  unsigned int v926;
  unsigned int v927;
  unsigned int v928;
  unsigned int v929;
  int v930;
  int v931;
  int v932;
  unsigned int v933;
  unsigned int v934;
  unsigned int v935;
  unsigned int v936;
  int v937;
  int v938;
  unsigned int v939;
  unsigned int v940;
  int v941;
  int v942;
  int v943;
  unsigned int v944;
  unsigned int v945;
  int v946;
  int v947;
  int v948;
  unsigned int v949;
  unsigned int v950;
  int v951;
  unsigned int v952;
  int v953;
  int v954;
  unsigned int v955;
  unsigned int v956;
  unsigned int v957;
  unsigned int v958;
  int v959;
  unsigned int v960;
  unsigned int v961;
  unsigned int v962;
  unsigned int v963;
  int v964;
  int v965;
  unsigned int v966;
  unsigned int v967;
  int v968;
  int v969;
  int v970;
  unsigned int v971;
  unsigned int v972;
  unsigned int v973;
  int v974;
  int v975;
  int v976;
  unsigned int v977;
  unsigned int v978;
  int v979;
  int v980;
  unsigned int v981;
  int v982;
  int v983;
  int v984;
  int v985;
  int v986;
  unsigned int v987;
  unsigned int v988;
  int v989;
  unsigned int v990;
  unsigned int v991;
  int v992;
  unsigned int v993;
  unint64_t v994;
  int v995;
  int v997;
  unsigned int v998;
  int v999;
  int v1000;
  int v1001;
  unsigned int v1002;
  int v1003;
  unsigned int v1004;
  unsigned int v1005;
  unsigned int v1006;
  int v1007;
  int v1008;
  unsigned int v1009;
  unsigned int v1010;
  unsigned int v1011;
  unsigned int v1012;
  int v1013;
  int v1014;
  int v1015;
  unsigned int v1016;
  unsigned int v1017;
  int v1018;
  int v1019;
  int v1020;
  int v1021;
  int v1022;
  int v1023;
  int v1024;
  int v1025;
  int v1026;
  int v1027;
  char v1028;
  int v1029;
  int v1030;
  int v1031;
  int v1032;
  int v1033;
  int v1034;
  int v1035;
  int v1036;
  unsigned int v1037;
  int v1038;
  int v1039;
  unsigned int v1040;
  int v1041;
  int v1042;
  int v1043;
  int v1044;
  int v1045;
  int v1046;
  int v1047;
  int v1048;
  unsigned int v1049;
  int v1050;
  int v1051;
  int v1052;
  int v1053;
  int v1054;
  int v1055;
  int v1056;
  int v1057;
  int v1058;
  int v1059;
  int v1060;
  int v1061;
  int v1062;
  int v1063;
  int v1064;
  int v1065;
  int v1066;
  int v1067;
  int v1068;
  int v1069;
  unsigned int v1070;
  int v1071;
  int v1072;
  int v1073;
  unsigned int v1074;
  unsigned int v1075;
  int v1076;

  v1076 = v68 ^ 0x37;
  LOBYTE(STACK[0x2CE]) = ((unsigned __int16)(8 * a16 - (((v68 ^ 0x37) + 16 * a16 - 28779) & 0xF270) - 15772) >> 8) ^ 0x9B;
  LOWORD(STACK[0x2CC]) = 25186;
  LODWORD(STACK[0x2C8]) = 1650614882;
  LOBYTE(STACK[0x2CF]) = (8 * a16 - (((v68 ^ 0x37) + 16 * a16 - 107) & 0x70) + 100) ^ 0x5E;
  v1068 = a67 + 963419848 + ~((2 * a67 - 834162276) & ((v68 ^ 0x37) - 1533966025));
  v75 = ((((v68 ^ 0x37) - 167 + (LOBYTE(STACK[0x290]) ^ v69) - (a5 & (2 * (LOBYTE(STACK[0x290]) ^ v69)))) << 16)
       - 1367932928) ^ 0xB08B0000;
  v76 = ((((LOBYTE(STACK[0x291]) ^ v69) - ((2 * (LOBYTE(STACK[0x291]) ^ v69)) & 0x70)) << 8) + 1257912320) ^ 0x4AFA3800;
  v77 = (v76 + a6 - ((2 * v76) & 0x71BC3200)) ^ a6 | (v75 + a2 - ((2 * v75) & 0x2CF20000)) ^ a2;
  v78 = (v77 - 960690041 - ((2 * v77) & 0x8D7A110E)) ^ 0xC6BD0887 | ((LOBYTE(STACK[0x292]) ^ v69)
                                                                   - 1914171265
                                                                   - 2 * ((LOBYTE(STACK[0x292]) ^ v69) & 0x7F)) ^ 0x8DE8107F;
  v79 = (((v78 - ((2 * v78) & 0xEA4510)) << 8) + 1965197312) ^ 0x75228800;
  v80 = (v79 + 919122860 - ((2 * v79) & 0x6D916600)) ^ 0x36C8B3AC | ((LOBYTE(STACK[0x293]) ^ v69)
                                                                   - 2090139923
                                                                   - ((2 * (LOBYTE(STACK[0x293]) ^ v69)) & 0x1DA)) ^ 0x836AFEED;
  v997 = v80 - 1386658549 - ((2 * v80) & 0x5AB28A16);
  v81 = ((((LOBYTE(STACK[0x294]) ^ v69) - ((2 * (LOBYTE(STACK[0x294]) ^ v69)) & 0x3C)) << 24) + 503316480) ^ 0x1E000000;
  v82 = (v72 + (((LOBYTE(STACK[0x295]) ^ v69) - ((2 * (LOBYTE(STACK[0x295]) ^ v69)) & 0x1D6)) << 16) - 1829306368) ^ 0x92EB0000;
  v83 = (v81 - 19172548 - (v81 >> 25 << 26)) ^ 0xFEDB733C | (v82 + v71 - ((2 * v82) & 0x6DC60000)) ^ v71;
  v84 = ((((LOBYTE(STACK[0x296]) ^ v69) - ((2 * (LOBYTE(STACK[0x296]) ^ v69)) & 0xE0)) << 8) - 1714130944) ^ 0x99D47000;
  v85 = (v83 + v74 - ((2 * v83) & 0xDEF8BA60)) ^ v74 | (v84 + 1586328652 - ((2 * v84) & 0x3D1AE800)) ^ 0x5E8D744C;
  v86 = (((LOBYTE(STACK[0x299]) ^ v69) - ((2 * (LOBYTE(STACK[0x299]) ^ v69)) & 0x144)) << 21) + 339738624;
  v87 = (v85 + 120729406 - ((2 * v85) & 0xE645E7C)) ^ 0x7322F3E | ((LOBYTE(STACK[0x297]) ^ v69)
                                                                 + a1
                                                                 - ((2 * (LOBYTE(STACK[0x297]) ^ v69)) & 0x76)) ^ a1;
  v88 = v87 + a3 - ((2 * v87) & 0xA99FD304);
  v89 = (LOBYTE(STACK[0x298]) ^ v69) - ((2 * (LOBYTE(STACK[0x298]) ^ v69)) & 0x142) + 2099635617;
  v90 = ((v89 << 29) ^ 0x20000000) + 1992229076 - 2 * ((v89 << 29) ^ 0x20000000);
  v998 = v88;
  v91 = (((v88 << 16) ^ 0xE9820000) - 1260076055 - ((2 * ((v88 << 16) ^ 0xE9820000)) & 0x69C80000)) ^ 0xB4E4C3E9 | (((v89 << 8) ^ 0x25E5A100) - 2068708069 - ((2 * ((v89 << 8) ^ 0x25E5A100)) & 0x9640A00)) ^ 0x84B2051B;
  v92 = (v90 ^ 0x76BF00D4 | ((v91 - ((2 * v91) & 0x671635B2) - 1282729255) >> 11)) ^ 0x167163;
  v93 = (v92 + 1521110633 - ((2 * v92) & 0xB5549CD2)) ^ 0x5AAA4E69 | ((v86 ^ 0x14400000)
                                                                    - 920261123
                                                                    - ((2 * v86) & 0x92400000)) ^ 0xC925EDFD;
  v94 = v93 - ((2 * v93) & 0xEF8DA70) + 125594936;
  HIDWORD(v95) = v94 ^ 0x1573CA;
  LODWORD(v95) = v94 ^ 0xA4600000;
  v96 = ((((v95 >> 21) - ((2 * (v95 >> 21)) & 0xA354)) << 16) + 1370095616) ^ 0x51AA0000;
  v97 = ((((LOBYTE(STACK[0x29A]) ^ v69) - ((2 * (LOBYTE(STACK[0x29A]) ^ v69)) & 0x1E0)) << 8) + 1378807808) ^ 0x522EF000;
  v98 = (v96 + 2005513417 - ((2 * v96) & 0xEF120000)) ^ 0x7789B4C9 | (v97 + 336256784 - ((2 * v97) & 0x2815BE00)) ^ 0x140ADF10;
  v99 = (v98 - 1557930674 - ((2 * v98) & 0x4647BA9C)) ^ 0xA323DD4E | ((LOBYTE(STACK[0x29B]) ^ v69)
                                                                    - 838456774
                                                                    - ((2 * (LOBYTE(STACK[0x29B]) ^ v69)) & 0x74)) ^ 0xCE062A3A;
  v1006 = v99 - ((2 * v99) & 0xFC2A513C) + 2115315870;
  v100 = (LOBYTE(STACK[0x29C]) ^ v69) - ((2 * LOBYTE(STACK[0x29C])) & 0x3A);
  v101 = ((((LOBYTE(STACK[0x29D]) ^ v69) - ((2 * (LOBYTE(STACK[0x29D]) ^ v69)) & 0x4C)) << 8) - 542956032) ^ 0xDFA32600;
  v102 = (v101 + 1664733781 - ((2 * v101) & 0x4673A400)) ^ 0x6339D255 | ((((v100 << 16) + 589103104) ^ 0x231D0000)
                                                                       - 677865189
                                                                       - ((2 * (((v100 << 16) + 589103104) ^ 0x231D0000)) & 0x2F300000)) ^ 0xD798991B;
  v103 = (v102 - 1041009342 - ((2 * v102) & 0x3E6EA84)) ^ 0xC1F37542 | ((LOBYTE(STACK[0x29E]) ^ v69)
                                                                      - 952831048
                                                                      - (a8 & (2 * (LOBYTE(STACK[0x29E]) ^ v69)))) ^ 0xC734F3B8;
  v104 = (((v103 - ((2 * v103) & 0x6245A)) << 8) - 2095960832) ^ 0x83122D00;
  v105 = (v104 - 1175107549 - ((2 * v104) & 0x73EA9000)) ^ 0xB9F54823 | ((LOBYTE(STACK[0x29F]) ^ v69)
                                                                       - 1548913251
                                                                       - ((2 * LOBYTE(STACK[0x29F])) & 0x13A)) ^ 0xA3AD759D;
  v1072 = v105 + a4 - ((2 * v105) & 0x5C0EC6C);
  v106 = (LOBYTE(STACK[0x2A0]) ^ v69) - ((2 * (LOBYTE(STACK[0x2A0]) ^ v69)) & 0xD6);
  v107 = (LOBYTE(STACK[0x2A1]) ^ v69) - ((2 * (LOBYTE(STACK[0x2A1]) ^ v69)) & 0x126);
  v108 = ((((v107 << 16) + 2123563008) ^ 0x7E930000)
        + 1366439239
        - ((2 * (((v107 << 16) + 2123563008) ^ 0x7E930000)) & 0x22E40000)) ^ 0x51723547 | ((((v106 << 24) - 352321536) ^ 0xEB000000)
                                                                                         + 885784403
                                                                                         - ((2
                                                                                           * (((v106 << 24) - 352321536) ^ 0xEB000000)) & 0x68000000)) ^ 0x34CBFF53;
  v109 = ((((LOBYTE(STACK[0x2A2]) ^ v69) - ((2 * (LOBYTE(STACK[0x2A2]) ^ v69)) & 0x72)) << 8) - 1443809024) ^ 0xA9F13900;
  v110 = (v108 + 698973259 - ((2 * v108) & 0x5352F896)) ^ 0x29A97C4B | (v109 - 347295139 - ((2 * v109) & 0x56996400)) ^ 0xEB4CB25D;
  v111 = (v110 + v73 - ((2 * v110) & 0x3C5C5AFE)) ^ v73 | ((LOBYTE(STACK[0x2A3]) ^ v69)
                                                         - 123439493
                                                         - ((2 * (LOBYTE(STACK[0x2A3]) ^ v69)) & 0xF6)) ^ 0xF8A4767B;
  v112 = v111 - 1436272740 - ((2 * v111) & 0x54C86F38);
  v113 = ((((LOBYTE(STACK[0x2A4]) ^ v69) - ((2 * (LOBYTE(STACK[0x2A4]) ^ v69)) & 0x126)) << 16) + 1855127552) ^ 0x6E930000;
  v114 = ((((LOBYTE(STACK[0x2A5]) ^ v69) - ((2 * (LOBYTE(STACK[0x2A5]) ^ v69)) & 0xAAAAAAAA)) << 8) - 666348288) ^ 0xD8485500;
  v115 = (v113 + 795007097 - ((2 * v113) & 0x5EC40000)) ^ 0x2F62D879 | (v114 - 746093083 - (v70 & (2 * v114))) ^ 0xD38785E5;
  v116 = (v115 - 1831307096 - ((2 * v115) & 0x25B0F150)) ^ 0x92D878A8 | ((LOBYTE(STACK[0x2A6]) ^ v69)
                                                                       + 788265266
                                                                       - ((2 * (LOBYTE(STACK[0x2A6]) ^ v69)) & 0x64)) ^ 0x2EFBF932;
  v117 = (((v116 - ((2 * v116) & 0x8B6D6)) << 8) - 2074383616) ^ 0x845B6B00;
  v118 = (v117 - 43255499 - ((2 * v117) & 0xFAD7F200)) ^ 0xFD6BF935 | ((LOBYTE(STACK[0x2A7]) ^ v69)
                                                                     - 434011781
                                                                     - ((2 * (LOBYTE(STACK[0x2A7]) ^ v69)) & 0xF6)) ^ 0xE621817B;
  v1074 = v118 - 471310963 - ((2 * v118) & 0xC7D0BB1A);
  v119 = (LOBYTE(STACK[0x2A9]) ^ v69) - ((2 * (LOBYTE(STACK[0x2A9]) ^ v69)) & 0x99999999);
  v120 = ((((LOBYTE(STACK[0x2A8]) ^ v69) - ((2 * (LOBYTE(STACK[0x2A8]) ^ v69)) & 0x84)) << 24) + 1107296256) ^ 0x42000000;
  v121 = (v120 - 211085280 - ((2 * v120) & 0xE6000000)) ^ 0xF36B1820 | ((((v119 << 16) + 1858863104) ^ 0x6ECC0000)
                                                                      + 712681873
                                                                      - ((2 * (((v119 << 16) + 1858863104) ^ 0x6ECC0000)) & 0x54F40000)) ^ 0x2A7AA991;
  v122 = ((((LOBYTE(STACK[0x2AA]) ^ v69) - ((2 * (LOBYTE(STACK[0x2AA]) ^ v69)) & 0x1E8)) << 8) - 938871808) ^ 0xC809F400;
  v123 = (v121 - 385698975 - ((2 * v121) & 0xD20566C2)) ^ 0xE902B361 | (v122 + 1233146862 - ((2 * v122) & 0x1300A600)) ^ 0x498053EE;
  v124 = (v123 - 989696701 - ((2 * v123) & 0x8A04DA86)) ^ 0xC5026D43 | ((LOBYTE(STACK[0x2AB]) ^ v69)
                                                                      + 529665638
                                                                      - ((2 * (LOBYTE(STACK[0x2AB]) ^ v69)) & 0xCCCCCCCC)) ^ 0x1F920E66;
  v125 = v124 + 528899133 - ((2 * v124) & 0x3F0CB87A);
  v126 = (LOBYTE(STACK[0x2AD]) ^ v69) - ((2 * (LOBYTE(STACK[0x2AD]) ^ v69)) & 0xE2);
  v127 = ((((LOBYTE(STACK[0x2AC]) ^ v69) - ((2 * (LOBYTE(STACK[0x2AC]) ^ v69)) & 0x6E)) << 16) - 482934784) ^ 0xE3370000;
  v128 = (v127 + 74791154 - ((2 * v127) & 0x8EA0000)) ^ 0x47538F2 | ((((v126 << 8) + 317878528) ^ 0x12F27100)
                                                                   - 1016146685
                                                                   - ((2 * (((v126 << 8) + 317878528) ^ 0x12F27100)) & 0x6DDAA00)) ^ 0xC36ED503;
  v129 = (v128 + 900191263 - ((2 * v128) & 0x6B4FA83E)) ^ 0x35A7D41F | ((LOBYTE(STACK[0x2AE]) ^ v69)
                                                                      - 1279309480
                                                                      - ((2 * (LOBYTE(STACK[0x2AE]) ^ v69)) & 0xB0)) ^ 0xB3BF4958;
  v130 = (((v129 - ((2 * v129) & 0x9EF4C)) << 8) - 2064144896) ^ 0x84F7A600;
  v131 = (v130 - 672091239 - ((2 * v130) & 0xAFE16600)) ^ 0xD7F0B399 | ((LOBYTE(STACK[0x2AF]) ^ v69)
                                                                      - 1806980345
                                                                      - 2 * ((LOBYTE(STACK[0x2AF]) ^ v69) & 7)) ^ 0x944BAB07;
  v132 = v131 + 797373452 - ((2 * v131) & 0x5F0DE818);
  v133 = ((((LOBYTE(STACK[0x2B0]) ^ v69) - ((2 * (LOBYTE(STACK[0x2B0]) ^ v69)) & 0xFFFFFFC3)) << 24) + 1627389952) ^ 0x61000000;
  v134 = ((((LOBYTE(STACK[0x2B1]) ^ v69) + (~(2 * (LOBYTE(STACK[0x2B1]) ^ v69)) | 0xFE45)) << 16) + 2078146560) ^ 0x7BDD0000;
  v135 = (v134 + 560768928 - ((2 * v134) & 0x2D80000)) ^ 0x216CA7A0 | (v133 + 1229255095 - ((2 * v133) & 0x92000000)) ^ 0x4944F1B7;
  v136 = ((((LOBYTE(STACK[0x2B2]) ^ v69) - ((2 * (LOBYTE(STACK[0x2B2]) ^ v69)) & 0x6A)) << 8) - 1691929344) ^ 0x9B273500;
  v137 = (v135 + 749089782 - ((2 * v135) & 0x594C67EC)) ^ 0x2CA633F6 | (v136 - 772096593 - ((2 * v136) & 0x23F57A00)) ^ 0xD1FABDAF;
  v138 = (v137 - 995602823 - ((2 * v137) & 0x89509CF2)) ^ 0xC4A84E79 | ((LOBYTE(STACK[0x2B3]) ^ v69)
                                                                      + 1094163419
                                                                      - ((2 * (LOBYTE(STACK[0x2B3]) ^ v69)) & 0x1B6)) ^ 0x41379BDB;
  v139 = v138 - 847063089 - ((2 * v138) & 0x9B05AF9E);
  v140 = ((((LOBYTE(STACK[0x2B4]) ^ v69) - ((2 * (LOBYTE(STACK[0x2B4]) ^ v69)) & 0x172)) << 16) + 1840840704) ^ 0x6DB90000;
  v141 = ((((LOBYTE(STACK[0x2B5]) ^ v69) - ((2 * (LOBYTE(STACK[0x2B5]) ^ v69)) & 0x2C)) << 8) - 1948183040) ^ 0x8BE11600;
  v142 = (v141 - 61749960 - ((2 * v141) & 0x78A38A00)) ^ 0xFC51C538 | (v140 - 827763045 - ((2 * v140) & 0x1D520000)) ^ 0xCEA9569B;
  v143 = (v142 - 1481328980 - ((2 * v142) & 0x4F696D58)) ^ 0xA7B4B6AC | ((LOBYTE(STACK[0x2B6]) ^ v69)
                                                                       - 993583160
                                                                       - ((2 * (LOBYTE(STACK[0x2B6]) ^ v69)) & 0x190)) ^ 0xC4C71FC8;
  v144 = (((v143 - ((2 * v143) & 0x2397D4)) << 8) + 298576384) ^ 0x11CBEA00;
  v145 = (v144 + 997518680 - ((2 * v144) & 0x76E9DA00)) ^ 0x3B74ED58 | ((LOBYTE(STACK[0x2B7]) ^ v69)
                                                                      + 417107836
                                                                      - ((2 * (LOBYTE(STACK[0x2B7]) ^ v69)) & 0xF8)) ^ 0x18DC8F7C;
  v146 = v145 + 416878908 - ((2 * v145) & 0x31B22278);
  v147 = ((((LOBYTE(STACK[0x2B8]) ^ v69) - ((2 * (LOBYTE(STACK[0x2B8]) ^ v69)) & 0x2E)) << 24) + 385875968) ^ 0x17000000;
  v148 = ((((LOBYTE(STACK[0x2B9]) ^ v69) - ((2 * (LOBYTE(STACK[0x2B9]) ^ v69)) & 0x1CA)) << 16) + 2045050880) ^ 0x79E50000;
  v149 = (v148 + 437705776 - ((2 * v148) & 0x342C0000)) ^ 0x1A16DC30 | (v147 - 896551841 - ((2 * v147) & 0x94000000)) ^ 0xCA8FB45F;
  v150 = ((((LOBYTE(STACK[0x2BA]) ^ v69) - (v69 & (2 * (LOBYTE(STACK[0x2BA]) ^ v69)))) << 8) + 64958720) ^ 0x3DF3100;
  v151 = (v149 - 1406017763 - ((2 * v149) & 0x5863BE3A)) ^ 0xAC31DF1D | (v150 + 1044383271 - ((2 * v150) & 0x7C800C00)) ^ 0x3E400627;
  v152 = (v151 + 1603056048 - ((2 * v151) & 0xBF196360)) ^ 0x5F8CB1B0 | ((LOBYTE(STACK[0x2BB]) ^ v69)
                                                                       - 691844213
                                                                       - ((2 * (LOBYTE(STACK[0x2BB]) ^ v69)) & 0x116)) ^ 0xD6C34B8B;
  v153 = v152 - 918895196 - ((2 * v152) & 0x92758B48);
  v154 = ((((LOBYTE(STACK[0x2BC]) ^ v69) - ((2 * (LOBYTE(STACK[0x2BC]) ^ v69)) & 0x40)) << 16) + 35651584) ^ 0x2200000;
  v155 = ((((LOBYTE(STACK[0x2BD]) ^ v69) - ((2 * (LOBYTE(STACK[0x2BD]) ^ v69)) & 0x5C)) << 8) + 1053830656) ^ 0x3ED02E00;
  v156 = (v155 + 72860267 - ((2 * v155) & 0x8AF8400)) ^ 0x457C26B | (v154 - 1692233532 - ((2 * v154) & 0x36440000)) ^ 0x9B2290C4;
  v157 = (v156 - 1893093582 - ((2 * v156) & 0x1E535E64)) ^ 0x8F29AF32 | ((LOBYTE(STACK[0x2BE]) ^ v69)
                                                                       + 1455334132
                                                                       - ((2 * (LOBYTE(STACK[0x2BE]) ^ v69)) & 0x1E8)) ^ 0x56BEA2F4;
  v158 = (((v157 - ((2 * v157) & 0xE466B8)) << 8) + 1915968512) ^ 0x72335C00;
  v159 = (v158 - 2073124313 - ((2 * v158) & 0x8DD4400)) ^ 0x846EA227 | ((LOBYTE(STACK[0x2BF]) ^ v69)
                                                                      - 1603709931
                                                                      - ((2 * LOBYTE(STACK[0x2BF])) & 0x2A)) ^ 0xA0695415;
  v160 = v159 - 647989527 - ((2 * v159) & 0xB2C0EDD2);
  v161 = ((((LOBYTE(STACK[0x2C0]) ^ v69) - ((2 * LOBYTE(STACK[0x2C0])) & 0x2A)) << 24) + 352321536) ^ 0x15000000;
  v162 = ((((LOBYTE(STACK[0x2C1]) ^ v69) - ((2 * (LOBYTE(STACK[0x2C1]) ^ v69)) & 0x1C4)) << 16) + 2044854272) ^ 0x79E20000;
  v163 = (v162 + 350339585 - ((2 * v162) & 0x29C20000)) ^ 0x14E1C201 | (v161 + 279512560 - ((2 * v161) & 0x20000000)) ^ 0x10A905F0;
  v164 = ((((LOBYTE(STACK[0x2C2]) ^ v69) - ((2 * (LOBYTE(STACK[0x2C2]) ^ v69)) & 0x9A)) << 8) - 390116096) ^ 0xE8BF4D00;
  v165 = (v163 + 1869469253 - ((2 * v163) & 0xDEDBAC8A)) ^ 0x6F6DD645 | (v164 - 138761855 - ((2 * v164) & 0x6F755200)) ^ 0xF7BAA981;
  v166 = (v165 - 1273069056 - ((2 * v165) & 0x683D0400)) ^ 0xB41E8200 | ((LOBYTE(STACK[0x2C3]) ^ v69)
                                                                       + 1127540394
                                                                       - ((2 * (LOBYTE(STACK[0x2C3]) ^ v69)) & 0x55555555)) ^ 0x4334E6AA;
  v167 = v166 + 303156520 - ((2 * v166) & 0x24239A50);
  v168 = ((((LOBYTE(STACK[0x2C4]) ^ v69) - ((2 * (LOBYTE(STACK[0x2C4]) ^ v69)) & 0x68)) << 16) + 523501568) ^ 0x1F340000;
  v169 = ((((LOBYTE(STACK[0x2C5]) ^ v69) - ((2 * LOBYTE(STACK[0x2C5])) & 0x12)) << 8) + 1398147328) ^ 0x53560900;
  v170 = (v169 - 2099740518 - ((2 * v169) & 0x5B10000)) ^ 0x82D8809A | (v168 - 1085639514 - ((2 * v168) & 0x7E940000)) ^ 0xBF4A74A6;
  v171 = (v170 - 1354392896 - ((2 * v170) & 0x5E8B3580)) ^ 0xAF459AC0 | ((LOBYTE(STACK[0x2C6]) ^ v69)
                                                                       - 87959003
                                                                       - ((2 * (LOBYTE(STACK[0x2C6]) ^ v69)) & 0x4A)) ^ 0xFAC1DA25;
  v172 = (((v171 - ((2 * v171) & 0x7686C4)) << 8) + 994271744) ^ 0x3B436200;
  v173 = (v172 + 67262235 - ((2 * v172) & 0x804AE00)) ^ 0x402571B | ((LOBYTE(STACK[0x2C7]) ^ v69)
                                                                   + 1609813148
                                                                   - ((2 * LOBYTE(STACK[0x2C7])) & 0x138)) ^ 0x5FF3CC9C;
  v174 = v173 - 505671643 - ((2 * v173) & 0xC3B8204A);
  v175 = ((((LOBYTE(STACK[0x2C8]) ^ v69) - ((2 * (LOBYTE(STACK[0x2C8]) ^ v69)) & 0xB8)) << 24) + 1543503872) ^ 0x5C000000;
  v176 = ((((LOBYTE(STACK[0x2C9]) ^ v69) - 2 * ((LOBYTE(STACK[0x2C9]) ^ v69) & 0xF)) << 16) + 51314688) ^ 0x30F0000;
  v177 = (v176 - 342745566 - ((2 * v176) & 0x57240000)) ^ 0xEB921E22 | (v175 + 2067071328 - ((2 * v175) & 0xF7FFFFFF)) ^ 0x7B350160;
  v178 = ((((LOBYTE(STACK[0x2CA]) ^ v69) - ((2 * (LOBYTE(STACK[0x2CA]) ^ v69)) & 0xD6)) << 8) - 41456896) ^ 0xFD876B00;
  v179 = (v177 + 1779074572 - ((2 * v177) & 0xD4150C18)) ^ 0x6A0A860C | (v178 + 730384518 - ((2 * v178) & 0x57119000)) ^ 0x2B88C886;
  v180 = (v179 + 538644714 - ((2 * v179) & 0x403621D4)) ^ 0x201B10EA | ((LOBYTE(STACK[0x2CB]) ^ v69)
                                                                      + 490658754
                                                                      - ((2 * (LOBYTE(STACK[0x2CB]) ^ v69)) & 0x184)) ^ 0x1D3EDBC2;
  v181 = v180 - 1250994033 - ((2 * v180) & 0x6ADEB11E);
  v182 = ((((LOBYTE(STACK[0x2CC]) ^ v69) - ((2 * (LOBYTE(STACK[0x2CC]) ^ v69)) & 0x1D8)) << 16) - 269746176) ^ 0xEFEC0000;
  v183 = ((((LOBYTE(STACK[0x2CD]) ^ v69) - ((2 * LOBYTE(STACK[0x2CD])) & 0x118)) << 8) - 670528512) ^ 0xD8088C00;
  v184 = (v183 - 1767087138 - ((2 * v183) & 0x2D58C600)) ^ 0x96AC63DE | (v182 - 998428862 - ((2 * v182) & 0x8FA0000)) ^ 0xC47D2F42;
  v185 = (v184 + 611898174 - ((2 * v184) & 0x48F1A67C)) ^ 0x2478D33E | ((LOBYTE(STACK[0x2CE]) ^ v69)
                                                                      + 312814792
                                                                      - ((2 * (LOBYTE(STACK[0x2CE]) ^ v69)) & 0x190)) ^ 0x12A52CC8;
  v186 = (((v185 - ((2 * v185) & 0x8AF6AA)) << 8) + 1165710592) ^ 0x457B5500;
  v187 = (v186 + 373188261 - ((2 * v186) & 0x2C7CCC00)) ^ 0x163E66A5 | ((LOBYTE(STACK[0x2CF]) ^ v69)
                                                                      - 1032927183
                                                                      - (v69 & (2 * (LOBYTE(STACK[0x2CF]) ^ v69)))) ^ 0xC26EC831;
  v188 = v187 + 1954049170 - ((2 * v187) & 0xE8F0D924);
  v189 = v188 ^ v1006 ^ 0x33C1AE99;
  v190 = (v189 & 8 | (16 * (((v189 & 8) >> 3) & 1))) ^ 0xDE5F7DCE;
  v1000 = v112;
  v191 = v112 ^ v153 ^ 0x635EF238;
  HIDWORD(v95) = v139 ^ v997 ^ v174 ^ v1006 ^ 0x33C1AE99 ^ 0x59CB04E6;
  LODWORD(v95) = v139 ^ v997 ^ v174 ^ v1006 ^ 0x33C1AE99;
  v192 = (v95 >> 31) - 1005440713 - ((2 * (v95 >> 31)) & 0x8824626E);
  v193 = ((v190 + 564167218) & v191) + 260468936 - ((2 * ((v190 + 564167218) & v191)) & 0x1F0CE170) == 260468936;
  v194 = v190 + 2080160636;
  v195 = 951826200 - v190;
  if (v193)
    v195 = v194;
  v196 = v1072 ^ v88 ^ v146;
  v197 = v189 & 0xFFFFFFF7;
  v198 = v191 - 1515993418 + v195 - ((2 * (v191 - 1515993418 + v195)) & 0x86ED33F2) + 1131846137;
  HIDWORD(v200) = v198 ^ v197 ^ 0x6FC2736C;
  LODWORD(v200) = v198 ^ ~v197;
  v199 = v200 >> 31;
  HIDWORD(v200) = v196 ^ v181 ^ 0x7B99D607;
  LODWORD(v200) = v196 ^ ~v181;
  v201 = v199 + 1549014615 - ((2 * v199) & 0xB8A82CAE);
  v202 = (v200 >> 31) - 1292794654 - ((2 * (v200 >> 31)) & 0x65E309C4);
  v203 = v202 ^ v167;
  v204 = (v203 & 1 ^ 0x22EB7FFB) + 2 * (v203 & 1);
  v205 = v125 ^ 0x1F865C3D;
  v999 = v205;
  v193 = ((v204 - 585859067) & v205) + 70182741 - ((2 * ((v204 - 585859067) & v205)) & 0x85DCE8E) == 70182741;
  v206 = v204 - 574625803;
  v207 = 597092331 - v204;
  if (v193)
    v207 = v206;
  v208 = v1074 ^ v1072 ^ v160;
  HIDWORD(v209) = v208 ^ 0x7C7A6C65 ^ v192;
  LODWORD(v209) = v208 ^ ~v192;
  v210 = (v209 >> 31) - 1739941141 - ((2 * (v209 >> 31)) & 0x309535D6);
  v211 = ((v203 & 0xFFFFFFFE ^ 0xAAF8C9A2)
        + (v203 & 0x3AAB91AE ^ 0x1003100D)
        - ((v203 & 0xFFFFFFFE ^ 0xAAF8C9A2) & 0x3AAB91AE)) ^ v112 ^ (v205
                                                                   - 11233264
                                                                   + v207
                                                                   - ((2 * (v205 - 11233264 + v207)) & 0x55B1748C)
                                                                   - 1428637114);
  HIDWORD(v209) = v211 ^ 0x300F9C1D;
  LODWORD(v209) = v211;
  v212 = (v209 >> 31) + 1645036609 - ((2 * (v209 >> 31)) & 0xC41A8882);
  v1001 = v132;
  v1002 = v139;
  v213 = v139 ^ v181 ^ v125;
  HIDWORD(v209) = v132 ^ v1074 ^ v174 ^ v201 ^ 0x71E6AFF3;
  LODWORD(v209) = v132 ^ v1074 ^ v174 ^ v201;
  v214 = (v209 >> 31) + 318795590 - ((2 * (v209 >> 31)) & 0x2600DE8C);
  v215 = v210;
  HIDWORD(v209) = v213 ^ 0x7F214996 ^ v210;
  LODWORD(v209) = v213 ^ ~v210;
  v216 = v209 >> 31;
  v1003 = v146;
  v1004 = v153;
  HIDWORD(v209) = v146 ^ v132 ^ v188 ^ v212 ^ 0x212ACDE3;
  LODWORD(v209) = v146 ^ v132 ^ v188 ^ v212;
  v217 = v216 - 717919371 - ((2 * v216) & 0xAA6AD6EA);
  v218 = (v209 >> 31) - ((2 * (v209 >> 31)) & 0xE1D59276);
  v219 = v153 ^ v139 ^ v192;
  v220 = v214;
  HIDWORD(v209) = v219 ^ 0x53AA4C1A ^ v214;
  LODWORD(v209) = v219 ^ ~v214;
  v221 = (v209 >> 31) - 1971788420 - ((2 * (v209 >> 31)) & 0x14F1CAF8);
  v222 = v218 - 253048517;
  v223 = v167;
  v1007 = v167;
  v224 = v167 ^ v153 ^ (v218 - 253048517) ^ v201;
  HIDWORD(v209) = v224 ^ 0x7795D7E0;
  LODWORD(v209) = v224;
  v225 = (v209 >> 31) - 691933301 - ((2 * (v209 >> 31)) & 0xAD83DF16);
  v1009 = v174;
  v1005 = v160;
  HIDWORD(v209) = v174 ^ v160 ^ v210 ^ v221 ^ 0x2A8E195B;
  LODWORD(v209) = v174 ^ v160 ^ v210 ^ v221;
  v226 = (v209 >> 31) - 403469470 - ((2 * (v209 >> 31)) & 0xCFE716C4);
  v227 = v160 ^ v146 ^ v202;
  v1028 = v227 ^ v217;
  v228 = v217;
  HIDWORD(v209) = v227 ^ v217 ^ 0x267D8842;
  LODWORD(v209) = v227 ^ ~v217;
  v229 = (v209 >> 31) + 264923914 - ((2 * (v209 >> 31)) & 0x1F94D614);
  v1010 = v188;
  HIDWORD(v209) = v188 ^ v174 ^ v220 ^ v225 ^ 0x5065FC7A;
  LODWORD(v209) = v188 ^ v174 ^ v220 ^ v225;
  v230 = (v209 >> 31) - 1668158870 - ((2 * (v209 >> 31)) & 0x3923D4D4);
  v1008 = v181;
  v231 = v181 ^ v223 ^ v229;
  v232 = v212;
  HIDWORD(v209) = v231 ^ v212 ^ 0x4AB9BAEC;
  LODWORD(v209) = v231 ^ ~v212;
  v233 = v222 ^ 0xFE0FE45D ^ ((v209 >> 31) + 249900390 - ((2 * (v209 >> 31)) & 0x1DCA5ACC));
  v234 = (v209 >> 31) + 249900390 - ((2 * (v209 >> 31)) & 0x1DCA5ACC);
  v1011 = v202 ^ 0xB2F184E2;
  v235 = 2 * ((v233 & (v202 ^ 0xB2F184E2)) - ((2 * (v233 & (v202 ^ 0xB2F184E2))) & 0x380C0322)) + 940311330;
  v236 = ((v233 + v1011) ^ 0xFFD7FFFF)
       + ((2 * (v233 + v1011)) & 0xFFAFFFFE)
       + (v235 ^ 0x584FA333)
       + ((2 * v235) & 0x3F78BFDC ^ 0xCFE7F9BB)
       + 1;
  v237 = (v236 - ((2 * v236 + 1070120928) & 0x48A4453C) - 1003060594) ^ v188;
  HIDWORD(v209) = v237 ^ 0x502A4E0C;
  LODWORD(v209) = v237;
  v238 = (v209 >> 31) + 132575530 - ((2 * (v209 >> 31)) & 0xFCDE254);
  v239 = ((2 * v222) ^ 0xE1D59276) - ((2 * ((2 * v222) ^ 0xE1D59276)) & 0x3057ADA4) - 668215598;
  v240 = (v222 ^ 0xCCD8DA02) + (v239 & 0x78642672 ^ 0x67DDBDB9) + ((2 * v239) & 0x70C844C4 ^ 0x30400484) - 1073593323;
  HIDWORD(v209) = v192 ^ v1008 ^ v228 ^ v226 ^ 0x43BB89AF;
  LODWORD(v209) = v192 ^ v1008 ^ v228 ^ v226;
  v241 = (v209 >> 31) - 300558877 - ((2 * (v209 >> 31)) & 0xDC2BABC6);
  v1012 = v201;
  v1013 = v215;
  v242 = v221;
  v243 = v201 ^ v192 ^ v221;
  v244 = v230;
  HIDWORD(v209) = v243 ^ v230 ^ 0xEAF2876;
  LODWORD(v209) = v243 ^ ~v230;
  v245 = (v209 >> 31) - 1331779000 - ((2 * (v209 >> 31)) & 0x613D5490);
  v246 = v215 ^ v202 ^ v229;
  v247 = v241;
  HIDWORD(v209) = v246 ^ 0x4B64A0E0 ^ v241;
  LODWORD(v209) = v246 ^ ~v241;
  v248 = (v209 >> 31) + 1547241597 - ((2 * (v209 >> 31)) & 0xB87210FA);
  v1014 = v232;
  v249 = v201 ^ v232 ^ v225;
  v250 = v238;
  HIDWORD(v209) = v249 ^ 0x6F7E4CB7 ^ v238;
  LODWORD(v209) = v249 ^ ~v238;
  v251 = (v209 >> 31) + 1656821430 - ((2 * (v209 >> 31)) & 0xC5822D6C);
  v1020 = v229 ^ 0xFCA6B0A;
  HIDWORD(v209) = v229 ^ 0xFCA6B0A;
  LODWORD(v209) = v229;
  v252 = (v209 >> 30) - ((2 * (v209 >> 30)) & 0x4115D7C6);
  v1015 = v220;
  v253 = v220 ^ v215 ^ v226;
  HIDWORD(v209) = v253 ^ v245 ^ 0x5C27D487;
  LODWORD(v209) = v253 ^ ~v245;
  v254 = (v209 >> 31) + 1059168085 - ((2 * (v209 >> 31)) & 0x7E433EAA);
  v255 = v228;
  v1016 = v228;
  v256 = v232 ^ v228 ^ v234;
  v257 = v248;
  HIDWORD(v209) = v256 ^ 0x65E40A2F ^ v248;
  LODWORD(v209) = v256 ^ ~v248;
  v258 = (v209 >> 31) + 499022421 - ((2 * (v209 >> 31)) & 0x3B7CF4AA);
  v259 = ((2 * v240) & 0xFBFFC776)
       + (v240 ^ 0x7DFFE3BB)
       - ((2 * (((2 * v240) & 0xFBFFC776) + (v240 ^ 0x7DFFE3BB)) + 194777624) & 0x48648292)
       + 1778403925;
  v260 = v230 ^ v220 ^ v259;
  v261 = v251;
  HIDWORD(v209) = v260 ^ 0x4962D2D3 ^ v251;
  LODWORD(v209) = v260 ^ ~v251;
  v262 = (v209 >> 31) - 1858550831 - ((2 * (v209 >> 31)) & 0x227187A2);
  v263 = v258;
  HIDWORD(v209) = v258 ^ v250 ^ 0x1A588B7F;
  LODWORD(v209) = v258 ^ v250;
  v264 = (v209 >> 30) - ((2 * (v209 >> 30)) & 0x2A196E8C);
  v1018 = v242;
  v265 = v242 ^ v255 ^ v247;
  v266 = v254;
  HIDWORD(v209) = v265 ^ v254 ^ 0xE79C4BF;
  LODWORD(v209) = v265 ^ ~v254;
  v267 = v209 >> 31;
  v252 -= 1601508381;
  v264 += 353154886;
  HIDWORD(v209) = v264 ^ ~v252;
  LODWORD(v209) = v264 ^ v252 ^ 0xA8742884;
  v268 = v267 - 1493123275 - ((2 * v267) & 0x4E017E6A);
  v269 = (v209 >> 2) - ((2 * (v209 >> 2)) & 0xCF809FFA) + 1740656637;
  v1017 = v259;
  v270 = v269 ^ v259 ^ 0x54AC41C8;
  v271 = ((2 * (v270 & 0x24A36AF5 ^ 0x44033E61)) & 0x10294C2) - (v270 & 0x24A36AF5 ^ 0x44033E61);
  v272 = ((2 * (v270 & 0x5B5C950A ^ 0x43008002)) & 0x34880804) - (v270 & 0x5B5C950A ^ 0x43008002) + 1161476973;
  v273 = ((v272 & 0x4E821528 ^ 0x480006E1) + (v272 & 0xB17DE816 ^ 0x9138A807) - 2) ^ 0xCF0207C8 | (v271 + 1685501078) ^ 0x2057C883;
  HIDWORD(v209) = (v273 + 1842494071 - ((2 * v273) & 0x5BA474EE)) ^ 0x6DD23A77;
  LODWORD(v209) = v269 ^ ~v259;
  v274 = v209 >> 31;
  v1021 = v226;
  v275 = v257;
  v276 = v226 ^ v229 ^ v257 ^ v268;
  v277 = v268;
  HIDWORD(v209) = v276 ^ 0x13005720;
  LODWORD(v209) = v276;
  v278 = (v209 >> 31) + 834017971 - ((2 * (v209 >> 31)) & 0x636C3566);
  v1019 = v225;
  v279 = v262;
  HIDWORD(v209) = v242 ^ v225 ^ v245 ^ v262 ^ 0x7D1F636E;
  LODWORD(v209) = v242 ^ v225 ^ v245 ^ v262;
  v280 = (v209 >> 31) + 796557573 - ((2 * (v209 >> 31)) & 0x5EF5020A);
  v281 = v274 - 42;
  v282 = v274 - 1415237674 - ((2 * v274) & 0x574A5FAC);
  v283 = v234;
  v1023 = v234;
  v284 = v261;
  v1030 = v261;
  HIDWORD(v209) = v225 ^ v234 ^ v261 ^ v282 ^ 0x1140FB8D;
  LODWORD(v209) = v225 ^ v234 ^ v261 ^ v282;
  v285 = (v209 >> 31) - 546734997 - ((2 * (v209 >> 31)) & 0xBED2F8D6);
  v1025 = v244;
  HIDWORD(v209) = v226 ^ v244 ^ v266 ^ v280 ^ 0x6B397F58;
  LODWORD(v209) = v226 ^ v244 ^ v266 ^ v280;
  v286 = (v209 >> 31) - 653494134 - ((2 * (v209 >> 31)) & 0xB218F114);
  v1022 = v247;
  v287 = v247 ^ v283 ^ v263;
  v288 = v278;
  HIDWORD(v209) = v287 ^ v278 ^ 0x4CF89863;
  LODWORD(v209) = v287 ^ ~v278;
  v289 = (v209 >> 31) - 1147907395 - ((2 * (v209 >> 31)) & 0x7728A57A);
  v1026 = v250;
  v290 = v250 ^ v244 ^ v279;
  v291 = v279;
  v292 = v285;
  HIDWORD(v209) = v290 ^ 0x5526A4FA ^ v285;
  LODWORD(v209) = v290 ^ ~v285;
  v293 = v209 >> 31;
  v294 = v275;
  v1029 = v275;
  v295 = v289;
  HIDWORD(v209) = v275 ^ v250 ^ v289 ^ v282 ^ 0x4BEE843C;
  LODWORD(v209) = v275 ^ v250 ^ v289 ^ v282;
  v296 = v293 - 584557412 - ((2 * v293) & 0xBA50B938);
  v297 = (v209 >> 31) - 151208209 - ((2 * (v209 >> 31)) & 0xEDF97DDE);
  v298 = v245;
  v1027 = v245;
  v299 = v284 ^ v245 ^ v280;
  v300 = v280;
  v301 = v299 ^ v296;
  v302 = v296;
  HIDWORD(v209) = v301 ^ 0x200D6167;
  LODWORD(v209) = v301;
  v303 = v209 >> 31;
  HIDWORD(v209) = v247 ^ v298 ^ v277 ^ v286 ^ 0x2087B814;
  LODWORD(v209) = v247 ^ v298 ^ v277 ^ v286;
  v304 = v303 + 1028726628 - ((2 * v303) & 0x7AA23EC8);
  v305 = (v209 >> 31) - 1083944669 - ((2 * (v209 >> 31)) & 0x7EC8A246);
  v306 = v263;
  v1031 = v266;
  v1032 = v263;
  v307 = v263 ^ v284 ^ v297 ^ v292;
  v308 = v292;
  HIDWORD(v209) = v307 ^ 0x56EAAE67;
  LODWORD(v209) = v307;
  v309 = (v209 >> 31) + 780275838 - ((2 * (v209 >> 31)) & 0x5D0420FC);
  v310 = v266;
  v311 = v288;
  v312 = v294 ^ v266 ^ v288;
  HIDWORD(v209) = v312 ^ 0x6DCADCB8 ^ v305;
  LODWORD(v209) = v312 ^ ~v305;
  v313 = (v209 >> 31) + 925061535 - ((2 * (v209 >> 31)) & 0x6E46A33E);
  v314 = v291;
  v1033 = v291;
  v1034 = v277;
  v315 = v291 ^ v310 ^ v286 ^ v304;
  v316 = v304;
  HIDWORD(v209) = v315 ^ 0x4A443B6A;
  LODWORD(v209) = v315;
  v317 = (v209 >> 31) - 337968908 - ((2 * (v209 >> 31)) & 0xD7B601E8);
  v318 = v277;
  v319 = v306 ^ v277 ^ v295;
  v320 = v295;
  v321 = v319 ^ v313;
  HIDWORD(v209) = v321 ^ 0x3609C642;
  LODWORD(v209) = v321;
  v322 = (v209 >> 31) + 1663471034 - ((2 * (v209 >> 31)) & 0xC64D1B74);
  v323 = v311;
  v1035 = v300;
  v1036 = v311;
  v324 = v322 ^ v311 ^ v282 ^ v297;
  v325 = v297;
  v326 = ((2 * v324) ^ 0x1F920C60) + 1378603392 - 2 * (((2 * v324) ^ 0x1F920C60) & 0x522BD196 ^ (2 * v324) & 0x16);
  v327 = v300;
  v328 = v300 ^ v318 ^ v305;
  v329 = v305;
  v330 = v317;
  HIDWORD(v209) = v328 ^ 0x5CC56FE7 ^ v317;
  LODWORD(v209) = v328 ^ ~v317;
  v331 = (v209 >> 31) + 2031897156 - ((2 * (v209 >> 31)) & 0xF2389488);
  v332 = ((v308 << 22) ^ 0x1AC00000) - ((2 * ((v308 << 22) ^ 0x1AC00000)) & 0x4B000000);
  v324 >>= 31;
  v333 = ((v326 | v324) ^ 0x522BD180) + 1414843212 - 2 * (((v326 | v324) ^ 0x522BD180) & 0x5454CB5E ^ v326 & 0x12);
  v1024 = v282;
  v334 = v302;
  v335 = v282 ^ v314 ^ v302;
  HIDWORD(v209) = v335 ^ v309 ^ 0x4937A0E5;
  LODWORD(v209) = v335 ^ ~v309;
  v336 = v308;
  v1037 = v308;
  v337 = v308 ^ v327 ^ v316 ^ ((v209 >> 31) - 1627622043 - ((2 * (v209 >> 31)) & 0x3DF8EACA));
  v338 = (v209 >> 31) - 1627622043 - ((2 * (v209 >> 31)) & 0x3DF8EACA);
  v339 = ((((v337 ^ 0x53BE976Fu) >> v324) + 1494136350 - ((2 * ((v337 ^ 0x53BE976Fu) >> v324)) & 0xB21D6C3C)) ^ 0x590EB61E) >> (((2 * v324) ^ 0x1F) + v324);
  v340 = v320;
  v1038 = v320;
  v341 = v309;
  v342 = v309 ^ v320 ^ v333;
  v343 = v333;
  HIDWORD(v209) = v342 ^ 0x18F;
  LODWORD(v209) = v342 ^ 0xC1428800;
  v344 = ((v209 >> 10) - ((2 * (v209 >> 10)) & 0x875D6930) + 1135522968) ^ (v332 + 632072303);
  v1039 = v286;
  v345 = v286 ^ v323 ^ v313;
  HIDWORD(v209) = v345 ^ 0x268579E2 ^ v331;
  LODWORD(v209) = v345 ^ ~v331;
  v346 = (v209 >> 31) - 872231648 - ((2 * (v209 >> 31)) & 0x98059A40);
  HIDWORD(v209) = v344 ^ (v336 >> 10) ^ 0x12C8CD;
  LODWORD(v209) = v344 ^ 0x14800000;
  v347 = (v209 >> 22) - ((2 * (v209 >> 22)) & 0x7240AEBE);
  v348 = (v339 - ((2 * v339) & 0xEA) - 11) ^ 0xBC;
  v349 = (((2 * v348) | 0x7DD22A0A) - v348 - 1055462661) ^ 0x3F6F1905;
  v350 = (((2 * v349) & 0x4BD5C630) - v349 - 636150553) ^ 0xDB9310AE | (((2 * v337) ^ 0xA77D2EDE)
                                                                      - 645282397
                                                                      - ((2 * ((2 * v337) ^ 0xA77D2EDE)) & 0xB3138B44)) ^ 0xD989C5A3;
  v351 = v350 - 921219763 - ((2 * v350) & 0x922E9A9A);
  v352 = v334;
  v1040 = v334;
  HIDWORD(v209) = v334 ^ v286 ^ v330 ^ v351 ^ 0x26E869AF;
  LODWORD(v209) = v334 ^ v286 ^ v330 ^ v351;
  v353 = (v209 >> 31) + 2091744470 - ((2 * (v209 >> 31)) & 0xF95AF9AC);
  v1056 = v353 ^ 0x7CAD7CD6;
  v354 = (~v316 & 0x40 ^ 0xB57FD1F7) + 2 * (~v316 & 0x40);
  HIDWORD(v209) = (v347 + a19) ^ 0x2519C295;
  LODWORD(v209) = -958420832 - v347;
  v355 = (v209 >> 31) - 1038171783 - ((2 * (v209 >> 31)) & 0x843D82F2);
  v356 = 2
       * (((v353 ^ 0x7CAD7CD6) & (v331 ^ 0x791C4A44)) - ((2 * ((v353 ^ 0x7CAD7CD6) & (v331 ^ 0x791C4A44))) & 0x36C19C7A))
       - 1228825478;
  v357 = ((2 * ((v353 ^ 0x7CAD7CD6) + (v331 ^ 0x791C4A44))) & 0xFB779B0A)
       + (((v353 ^ 0x7CAD7CD6) + (v331 ^ 0x791C4A44)) ^ 0xFDBBCD85)
       + (v356 ^ 0xEE818EEB)
       + ((2 * v356) & 0x4F7FDADC ^ 0xB2FCE72B);
  v1043 = v316;
  v358 = ((2 * (v316 & 0xFFFFFFBF ^ 0xFD38F9A0)) | 0xC09F3E82) - (v316 & 0xFFFFFFBF ^ 0xFD38F9A0) + 531652799;
  v359 = (v358 & 0xE0E7E8BD ^ 0x408180BC) + (v358 & 0x1F181742 ^ 0x81541);
  v193 = ((v357 - 1442570261) & (v354 + 1249914377))
       - 937535633
       - ((2 * ((v357 - 1442570261) & (v354 + 1249914377))) & 0x903CAE80) == -937535633;
  v360 = v354 + 1792851966;
  v361 = -706976788 - v354;
  if (!v193)
    v360 = v361;
  v362 = v360 + v357 - ((2 * (v360 + v357) + 323951596) & 0xDF5EFEB6);
  v363 = v329 ^ v340 ^ v322;
  v364 = v346;
  HIDWORD(v366) = v363 ^ 0x2BD44304 ^ v346;
  LODWORD(v366) = v363 ^ ~v346;
  v365 = v366 >> 31;
  v1041 = v297;
  HIDWORD(v366) = v352 ^ v297 ^ v338 ^ v355 ^ 0x7736566F;
  LODWORD(v366) = v352 ^ v297 ^ v338 ^ v355;
  v367 = v365 - 2022679235 - ((2 * v365) & 0xEE0BA7A);
  v368 = (v366 >> 31) + 76516901 - ((2 * (v366 >> 31)) & 0x91F1C4A);
  v369 = v351;
  v1057 = v368 ^ 0x48F8E25;
  v370 = (v368 ^ 0x48F8E25) + (v368 ^ v351 ^ 0x32673C97) + 1;
  v371 = (v351 ^ ((v351 ^ 0x36E8B2B2) - ((2 * (v351 ^ 0x36E8B2B2) + 2) & 0x6EA720C4) - 1219260317) ^ 0xF174428C ^ (v370 - ((2 * v370) & 0x1E613F46) - 1892638813))
       + (v368 ^ 0x48F8E25);
  v372 = ((2 * v371) & 0x5AEC8F7E) + (v371 ^ 0x2D7647BF);
  v373 = v341;
  v1044 = v341;
  HIDWORD(v366) = v316 ^ v341 ^ 0x530F1A;
  LODWORD(v366) = v316 ^ v341 ^ 0x13800000;
  v374 = (v366 >> 23) - ((2 * (v366 >> 23)) & 0xAC281E3A);
  v362 -= 111735471;
  v375 = (v359 - 1) ^ v329;
  HIDWORD(v366) = v375 ^ 0x3064C241 ^ v362;
  LODWORD(v366) = v375 ^ ~v362;
  v376 = (v366 >> 31) + 218382713 - ((2 * (v366 >> 31)) & 0x1A0882F2);
  HIDWORD(v366) = v372 + 636993;
  LODWORD(v366) = v372 - 762726335;
  v377 = ((v366 >> 23) - ((2 * (v366 >> 23)) & 0xF803D0D2) - 66983831) ^ (v374 - 703328483);
  HIDWORD(v366) = v377 ^ 0x189;
  LODWORD(v366) = v377 ^ 0xB7CBAA00;
  v378 = (v366 >> 9) - ((2 * (v366 >> 9)) & 0xFD7CF4B8);
  v1042 = v313;
  v379 = v367;
  HIDWORD(v366) = v325 ^ v313 ^ v343 ^ v367 ^ 0x12FB7901;
  LODWORD(v366) = v325 ^ v313 ^ v343 ^ v367;
  v380 = (v366 >> 31) + 1526336893 - ((2 * (v366 >> 31)) & 0xB5F41AFA);
  HIDWORD(v366) = (v378 + a18) ^ 0x7EBE7A5C;
  LODWORD(v366) = 21071267 - v378;
  v381 = (v366 >> 31) - ((2 * (v366 >> 31)) & 0xC95045D6);
  v382 = v330;
  v1045 = v330;
  v383 = v330 ^ v313 ^ v364 ^ v376;
  v384 = v376;
  HIDWORD(v366) = v383 ^ 0x1DFEDD32;
  LODWORD(v366) = v383;
  v385 = (v366 >> 31) + 543387878 - ((2 * (v366 >> 31)) & 0x40C6E1CC);
  v1046 = v322;
  v386 = v373 ^ v322 ^ v355;
  v387 = v380;
  HIDWORD(v366) = v386 ^ 0x554051C0 ^ v380;
  LODWORD(v366) = v386 ^ ~v380;
  v388 = (v366 >> 31) - 947245495 - ((2 * (v366 >> 31)) & 0x8F145C92);
  v1058 = v381 + 1688740587;
  v389 = v338;
  v1047 = v338;
  v390 = v382 ^ v338 ^ v353;
  HIDWORD(v366) = v390 ^ 0x353AAE6B ^ v1058 ^ 0x25855B8B;
  LODWORD(v366) = v390 ^ ~(v1058 ^ 0x25855B8B);
  v391 = (v366 >> 31) - 1284187298 - ((2 * (v366 >> 31)) & 0x66E9B6BC);
  v392 = v331 ^ v322 ^ v379;
  v393 = v379;
  v394 = v385;
  HIDWORD(v366) = v392 ^ 0x3D29EA25 ^ v385;
  LODWORD(v366) = v392 ^ ~v385;
  v395 = v366 >> 31;
  v1048 = v343;
  v396 = v388;
  v1059 = v388;
  HIDWORD(v366) = v389 ^ v343 ^ v368 ^ v388 ^ 0x9AD1E45;
  LODWORD(v366) = v389 ^ v343 ^ v368 ^ v388;
  v397 = v395 + 358533932 - ((2 * v395) & 0x2ABD9658);
  v398 = (v366 >> 31) - 311219688 - ((2 * (v366 >> 31)) & 0xDAE65430);
  v1049 = v369;
  HIDWORD(v366) = v369 ^ v331 ^ v384 ^ v391 ^ 0xE7B9D2E;
  LODWORD(v366) = v369 ^ v331 ^ v384 ^ v391;
  v399 = (v366 >> 31) - 1592591623 - ((2 * (v366 >> 31)) & 0x4225F5F2);
  v1050 = v364;
  v400 = v364 ^ v343 ^ v387;
  v401 = v387;
  v402 = v397;
  v1061 = v397;
  HIDWORD(v366) = v400 ^ 0x57F2C03D ^ v397;
  LODWORD(v366) = v400 ^ ~v397;
  v403 = (v366 >> 31) + 431000792 - ((2 * (v366 >> 31)) & 0x336119B0);
  v404 = v355;
  v1051 = v355;
  v1063 = v398;
  HIDWORD(v366) = v369 ^ v355 ^ v398 ^ v1058 ^ 0x25855B8B ^ 0x5ACA0100;
  LODWORD(v366) = v369 ^ v355 ^ v398 ^ v1058 ^ 0x25855B8B;
  v1065 = (v366 >> 31) + 468175778 - ((2 * (v366 >> 31)) & 0x37CF9744);
  v1055 = v394;
  v1064 = v399;
  HIDWORD(v366) = v353 ^ v364 ^ v394 ^ v399 ^ 0x31DE3BE9;
  LODWORD(v366) = v353 ^ v364 ^ v394 ^ v399;
  v405 = (v366 >> 31) + 1436714844 - ((2 * (v366 >> 31)) & 0xAB450EB8);
  v1053 = v393;
  v406 = v393 ^ v404 ^ v396;
  v1062 = v403;
  HIDWORD(v366) = v406 ^ 0x1B543ED5 ^ v403;
  LODWORD(v366) = v406 ^ ~v403;
  v1067 = (v366 >> 31) + 302236567 - ((2 * (v366 >> 31)) & 0x2407872E);
  v407 = v353 ^ v368 ^ v1065;
  v1060 = v391;
  HIDWORD(v366) = v407 ^ v391 ^ 0x50B1E20F;
  LODWORD(v366) = v407 ^ ~v391;
  LOBYTE(v406) = ((v282 & 0x1F ^ 0xC) - ((2 * v281) & 4) - 94) ^ 0x2A;
  v1066 = (v366 >> 31) + 1946289539 - ((2 * (v366 >> 31)) & 0xE8040B06);
  v1054 = v384;
  v408 = v384 ^ v393 ^ v402;
  HIDWORD(v366) = v408 ^ 0x4A885034 ^ v405;
  LODWORD(v366) = v408 ^ ~v405;
  v409 = (v366 >> 31) - 267668708 - ((2 * (v366 >> 31)) & 0xE0176638);
  v410 = v401;
  v1052 = v401;
  v411 = v401 ^ v368 ^ v398 ^ v1067;
  v1071 = ((2 * v411) ^ 0x420AD5AE) - ((2 * ((2 * v411) ^ 0x420AD5AE)) & 0x7A8E7CE8);
  v412 = ((((v411 ^ 0xA1056AD7) >> ((((2 * v406) & 0xA) - v406 + 122) ^ 0xE8))
         - 410812474
         - ((2 * ((v411 ^ 0xA1056AD7) >> ((((2 * v406) & 0xA) - v406 + 122) ^ 0xE8))) & 0xCF06FF8C)) ^ 0xE7837FC6) >> ((((2 * v406) & 0xA) - v406 + 122) ^ 0xF7);
  v1070 = v412 - ((2 * v412) & 0x19C7982A);
  v413 = ((417081137 - a67) & (a65 + 1150845075))
       - 254743042
       - ((2 * ((417081137 - a67) & (a65 + 1150845075))) & 0xE1A1DBFC);
  v414 = a66 - ((2 * a66 + 1206108290) & 0xCD69375E);
  HIDWORD(v366) = v384 ^ v1058 ^ 0x25855B8B ^ v399 ^ v1066 ^ 0x64A4192F;
  LODWORD(v366) = v384 ^ v1058 ^ 0x25855B8B ^ v399 ^ v1066;
  v415 = v366 >> 31;
  v416 = ((((-603054146 - a66) & (a64 + 971646099))
         - ((2 * ((-603054146 - a66) & (a64 + 971646099))) & 0x36B1E2B2)
         - 1688669863) ^ 0x408F65CD ^ ((((v414 - 1968800784) ^ 0x66B49BAF) & (a65 + 1150845075))
                                     - ((2 * (((v414 - 1968800784) ^ 0x66B49BAF) & (a65 + 1150845075))) & 0xB7AF2928)
                                     - 606628716))
       + 297077379;
  HIDWORD(v366) = v1068 ^ 1;
  LODWORD(v366) = v1068 ^ 0x5248C5F8;
  v417 = v366 >> 2;
  HIDWORD(v366) = v1068 ^ 0x248C5F9;
  LODWORD(v366) = v1068 ^ 0x55555555;
  v418 = v417 + 1361184032 - ((2 * v417) & 0xA2440A40);
  v419 = ((v366 >> 27) ^ 0x7AFADCEF)
       + a62
       + ((2 * (v366 >> 27)) & 0xF5F5B9DE)
       + (v416 ^ 0x7BEDDEFF)
       + ((2 * v416) & 0xF7DBBDFE)
       + (((v997 ^ 0xAD59450B) + 1221422870) ^ 0x76FCEDF8)
       + ((2 * ((v997 ^ 0xAD59450B) + 1221422870)) & 0xEDF9DBF0);
  HIDWORD(v366) = 1968800767 - v414;
  LODWORD(v366) = (v414 - 1968800784) ^ 0x66B49BAC;
  v420 = (v366 >> 2) - 644341426 - ((2 * (v366 >> 2)) & 0xB330429C);
  v421 = v1068 ^ 0x5248C5F9;
  v422 = a64 - ((2 * a64 + 1845922468) & 0x9D8694BA) - 2050584657;
  v423 = ((v413 ^ 0xF0D0EDFE) & (v422 ^ 0xCEC34A5D)) - ((2 * ((v413 ^ 0xF0D0EDFE) & (v422 ^ 0xCEC34A5D))) & 0x72F2A830);
  v424 = v394 ^ v410 ^ v403;
  HIDWORD(v366) = v424 ^ 0x1322425F ^ v409;
  LODWORD(v366) = v424 ^ ~v409;
  v1069 = v366 >> 31;
  v425 = v419 + 918034623;
  v426 = v419 + 918034623 - ((2 * v419 + 144837134) & 0x64CE2770);
  HIDWORD(v366) = v426 ^ 0x26713B8;
  LODWORD(v366) = v426 ^ 0x30000000;
  v427 = v422 ^ v413;
  v428 = v420 ^ 0xD998214E;
  v429 = (v427 ^ 0x3E13A7A3)
       + ((v420 ^ 0xD998214E) & v421 ^ 0x7ED7FF6E)
       + ((2 * ((v420 ^ 0xD998214E) & v421)) & 0xFDAFFEDC)
       + ((2 * v423 - 218978256) ^ 0x4D9CDB8F)
       + ((2 * (2 * v423 - 218978256)) & 0x7EDCE77C ^ 0x64C44060)
       - 1044804397;
  v430 = (v429 ^ 0xEEEDF8D9) + ((2 * v429) & 0xDDDBF1B2) + 286394151 + (v998 ^ 0x54CFE982);
  v431 = ((2 * v430) & 0xFEFF5FFE)
       + (v430 ^ 0x7F7FAFFF)
       + ((v366 >> 27) ^ 0x4E5FFFFE)
       + ((2 * (v366 >> 27)) & 0x9CBFFFFC);
  v432 = v426 ^ 0x326713B8;
  v433 = ((v426 ^ 0x326713B8) & (v420 ^ v418 ^ 0x88BA246E))
       - ((2 * ((v426 ^ 0x326713B8) & (v420 ^ v418 ^ 0x88BA246E))) & 0x543E0894);
  v434 = v431 + 515927875 - ((2 * v431 + 521359802) & 0x1E6D8CCC);
  HIDWORD(v366) = v434 ^ 0x736C666;
  LODWORD(v366) = v434 ^ 0x8000000;
  v435 = (v433 + 706675786) ^ v420;
  v436 = (v435 & 0x508DA889 ^ 0xFFF77776) - ((2 * v435) & 0x10112) - 759271561;
  v437 = (__PAIR64__(v425, v432) >> 2) + 1767645726 - ((2 * (__PAIR64__(v425, v432) >> 2)) & 0xD2B8443C);
  v438 = v436 ^ 0xF58E179C ^ v1006 ^ 0x33C1AE99;
  v439 = 2
       * (((v1006 ^ 0xEB0D289E) & (v436 ^ 0x2D42919B))
        - ((2 * ((v1006 ^ 0xEB0D289E) & (v436 ^ 0x2D42919B))) & 0x4A4D58FC))
       - 900900612;
  v440 = v438 + (v439 ^ 0x1DF22333) + 675316785 + ((2 * v439) & 0xAF7EF79C ^ 0x841AB198);
  v1073 = (v440 ^ 0x35F7BE7F) - 16779340 + ((2 * v440) & 0x6BEF7CFE);
  v441 = a65
       + (v435 & 0xAF725776 ^ 0x58BFFA66)
       + ((2 * v435) & 0x5660AEC4 ^ 0x46000A00)
       + ((v366 >> 27) ^ 0x2FEAF7FB)
       + ((2 * (v366 >> 27)) & 0x5FD5EFF6)
       + v1073;
  v442 = v441 + 1825007428 - ((2 * v441 + 504359500) & 0xBB7EE43C);
  HIDWORD(v366) = v442 ^ 0x5BF721E;
  LODWORD(v366) = v442 ^ 0xDFFFFFFF;
  v443 = (v437 ^ 0x43E7A5F1 ^ (((-260679902 - v431) & (v418 ^ 0x387E273E ^ v437))
                             - ((2 * ((-260679902 - v431) & (v418 ^ 0x387E273E ^ v437))) & 0x55770FDE)
                             + 716933103))
       - 1998931321;
  v444 = v428
       + (v443 ^ 0x777D7EEB)
       + ((2 * v443) & 0xEEFAFDD6)
       + ((v366 >> 27) ^ 0xFED7F7F7)
       + ((2 * (v366 >> 27)) & 0xFDAFEFEE)
       - 1985312482;
  v445 = (v1072 ^ 0x2E07636) + (v444 ^ 0x5E7D3FFB) + ((2 * v444) & 0xBCFA7FF6) - 1585266683;
  HIDWORD(v366) = (v441 + 1825007428) ^ 2;
  LODWORD(v366) = v442 ^ 0xDDBF721C;
  v446 = (v366 >> 2) - 1838875929 - ((2 * (v366 >> 2)) & 0x24C9F5CE);
  v437 ^= 0x695C221Eu;
  HIDWORD(v366) = (v431 + 515927875) ^ 2;
  LODWORD(v366) = v434 ^ 0xF36C664;
  v447 = (v366 >> 2) - 312402308 - ((2 * (v366 >> 2)) & 0xDAC23CF8);
  v448 = v447 ^ 0xED611E7C;
  v449 = (((v442 ^ 0xDDBF721E) & (v447 ^ 0xED611E7C))
        + 580410365
        + (~(2 * ((v442 ^ 0xDDBF721E) & (v447 ^ 0xED611E7C))) | 0xBACF4805)
        + 1) ^ 0x22985BFD | (((1895303897 - v441) & v437) - 157643973 - ((2 * ((1895303897 - v441) & v437)) & 0xED351676)) ^ 0xF69A8B3B;
  v450 = ((2 * v445) & 0x2FF6BB5C)
       + (v445 ^ 0x17FB5DAE)
       - 2 * ((((2 * v445) & 0x2FF6BB5C) + (v445 ^ 0x17FB5DAE) + 967598436) & 0x6C7D8DB3 ^ (v445 ^ 0x17FB5DAE) & 2)
       + 640282389;
  HIDWORD(v366) = v450 ^ 0x47D8DB1;
  LODWORD(v366) = v450 ^ 0x68000000;
  v451 = (v418 ^ 0x51220520) + (v449 ^ 0x6F7F9FEF) + ((2 * v449) & 0xDEFF3FDE) - 1870634991;
  v452 = (v1000 ^ 0xAA64379C)
       + (v451 ^ 0xBFD33EEE)
       + ((2 * v451) & 0x7FA67DDC)
       + ((v366 >> 27) ^ 0x1E77FD77)
       + ((2 * (v366 >> 27)) & 0x3CEFFAEE)
       - 1907944230;
  v453 = ((2 * v452) & 0xECDBF7AA) + (v452 ^ 0x766DFBD5);
  v454 = ((v450 ^ 0x6C7D8DB1) & (v447 ^ 0x7F05E49B ^ v446))
       - ((2 * ((v450 ^ 0x6C7D8DB1) & (v447 ^ 0x7F05E49B ^ v446))) & 0x85E2F74E);
  HIDWORD(v366) = v450 ^ 1;
  LODWORD(v366) = v450 ^ 0x6C7D8DB0;
  v455 = (v366 >> 2) - 86292592 - ((2 * (v366 >> 2)) & 0xF5B68F20);
  v456 = v453 + 1620497277;
  v457 = v453 + 1620497277 - ((2 * v453 - 284927734) & 0xD2294DF0);
  HIDWORD(v366) = v457 ^ 0x114A6F8;
  LODWORD(v366) = v457 ^ 0xE8000000;
  v458 = v447 ^ 0xAF9065DB ^ (v454 + 1123122087);
  v457 ^= 0xE914A6F8;
  v459 = v455 ^ 0xFADB4790;
  v460 = v437
       + ((v458 - 1415376703) ^ 0xFF13347F)
       + ((2 * (v458 - 1415376703)) & 0xFE2668FE)
       + ((v366 >> 27) ^ 0xFE57EEDF)
       + ((2 * (v366 >> 27)) & 0xFCAFDDBE)
       + 43310242;
  v461 = (v1074 ^ 0xE3E85D8D) + (v460 ^ 0xF1CEF73F) + ((2 * v460) & 0xE39DEE7E) + 238094529;
  v462 = ((2 * v461) & 0xF7777FE8) + (v461 ^ 0xFBBBBFF4);
  v463 = v462 - ((2 * v462 + 642208200) & 0x3172E042) - 874702587;
  HIDWORD(v366) = v463 ^ 0xB97021;
  LODWORD(v366) = v463 ^ 0x18000000;
  v464 = ((v457 & (v455 ^ 0xFADB4790)) - 1439561537 - ((2 * (v457 & (v455 ^ 0xFADB4790))) & 0x5464117E)) ^ 0xAA3208BF | (((-2005019782 - v453) & (v446 ^ 0x9264FAE7)) - 1986057414 - ((2 * ((-2005019782 - v453) & (v446 ^ 0x9264FAE7))) & 0x133E5674)) ^ 0x899F2B3A;
  v465 = (__PAIR64__(v456, v457) >> 2) - 1123674588 - ((2 * (__PAIR64__(v456, v457) >> 2)) & 0x7A0C2C48);
  v466 = v448
       + (v464 ^ 0x6BF0EE9F)
       + ((2 * v464) & 0xD7E1DD3E)
       + ((v366 >> 27) ^ 0xDB77FF6F)
       + ((2 * (v366 >> 27)) & 0xB6EFFEDE)
       - 1156605665;
  v467 = v999 + (v466 ^ 0x4DCEFFFD) + ((2 * v466) & 0x9B9DFFFA) - 1305411581;
  v468 = ((2 * v467) & 0x65D73FDE) + (v467 ^ 0xB2EB9FEF);
  v469 = ((1289508635 - v462) & (v455 ^ 0x47DD51B4 ^ v465))
       - ((2 * ((1289508635 - v462) & (v455 ^ 0x47DD51B4 ^ v465))) & 0x93BB2922);
  HIDWORD(v366) = v461;
  LODWORD(v366) = v463 ^ 0x18B97020;
  v470 = (v366 >> 2) - 878864231 - ((2 * (v366 >> 2)) & 0x973B3132);
  HIDWORD(v366) = (v468 - ((2 * v468 + 37528826) & 0x70F7E48) - 1465511519) ^ 0x387BF24;
  LODWORD(v366) = v468 - ((2 * v468 + 37528826) & 0x70F7E48) - 1465511519;
  v471 = (((v446 ^ 0x9264FAE7) - 1356284774) ^ 0xBC54FADB)
       + ((2 * ((v446 ^ 0x9264FAE7) - 1356284774)) & 0x78A9F5B6)
       + (v465 ^ 0xF4DB82B5 ^ (v469 + 1239258257))
       + ((v366 >> 27) ^ 0xCF7D3BFE)
       + ((2 * (v366 >> 27)) & 0x9EFA77FC)
       + 1949157671;
  v472 = (v1001 ^ 0x2F86F40C) + (v471 ^ 0xAEFEFB7E) + ((2 * v471) & 0x5DFDF6FC) + 1359021186;
  v473 = ((2 * v472) & 0xA5B71458) + (v472 ^ 0x52DB8A2C);
  v474 = v473 - ((2 * v473 + 821847462) & 0x566C3A06);
  HIDWORD(v366) = (v474 + 62148566) ^ 0x3361D03;
  LODWORD(v366) = (v474 + 62148566) ^ 0xA8000000;
  v475 = (v470 ^ 0xF1C50B88 ^ (((1524739458 - v468) & (v465 ^ 0x769B8EBD ^ v470))
                             - ((2 * ((1524739458 - v468) & (v465 ^ 0x769B8EBD ^ v470))) & 0x74B12622)
                             + 978883345))
       + ((v366 >> 27) ^ 0xFBB3E4DB)
       + ((2 * (v366 >> 27)) & 0xF767C9B6);
  HIDWORD(v366) = v468 + 1;
  LODWORD(v366) = (v468 - ((2 * v468 + 37528826) & 0x70F7E48) - 1465511519) ^ 0x387BF24;
  v476 = (v366 >> 2) + 1298681541 - ((2 * (v366 >> 2)) & 0x9AD09D8A);
  HIDWORD(v366) = -62148591 - v474;
  LODWORD(v366) = (v474 + 62148566) ^ 0xAB361D00;
  v477 = (v366 >> 2) - 524586172 - ((2 * (v366 >> 2)) & 0xC176E688);
  v478 = v459 + ((v475 + 72096549) ^ 0x7FBE72AC) + ((2 * (v475 + 72096549)) & 0xFF7CE558) + 31687904;
  v479 = (v1002 ^ 0xCD82D7CF) + (v478 ^ 0xBBFED9BF) + ((2 * v478) & 0x77FDB37E) + 1140926017;
  v480 = ((2 * v479) & 0xFFFFF5FE) + (v479 ^ 0xFFFFFAFF);
  v481 = v480 - 142036686;
  v482 = v480 - 142036686 - ((2 * v480 + 834735644) & 0x3D505428) - 16;
  HIDWORD(v366) = v482 ^ 0x6A82A14;
  LODWORD(v366) = v482 ^ 0x18000000;
  v483 = (v476 ^ 0x3F40366 ^ (((-1484665556 - v473) & (v470 ^ 0x86F5D65C ^ v476))
                            - ((2 * ((-1484665556 - v473) & (v470 ^ 0x86F5D65C ^ v476))) & 0x9D389B46)
                            + 1318866339))
       - 1613993498;
  v484 = (v465 ^ 0xBD061624)
       + (v483 ^ 0x7DDEBFFF)
       + ((2 * v483) & 0xFBBD7FFE)
       + ((v366 >> 27) ^ 0xF5AE7BEF)
       + ((2 * (v366 >> 27)) & 0xEB5CF7DE)
       - 1938635758;
  v485 = ((2 * ((v1003 ^ 0x18D9113C) - 1162473549)) & 0xFFDB5EF6)
       + (((v1003 ^ 0x18D9113C) - 1162473549) ^ 0x7FEDAF7B)
       + (v484 ^ 0xCBFD728F)
       + ((2 * v484) & 0x97FAE51E);
  v486 = (v476 ^ 0x7B47078D ^ (((v482 ^ 0x1EA82A14) & (v476 ^ 0xADD33D81 ^ v477))
                             - ((2 * ((v482 ^ 0x1EA82A14) & (v476 ^ 0xADD33D81 ^ v477))) & 0x6C5E9290)
                             + 909068616))
       + 2042114089;
  v487 = v485 - ((2 * v485 + 1747565548) & 0x621A87BA) + 1696735699;
  HIDWORD(v366) = v487 ^ 0x10D43DD;
  LODWORD(v366) = v487 ^ 0xB0000000;
  v488 = (v470 ^ 0xCB9D9899)
       + (v486 ^ 0xFB5F7DE7)
       + ((2 * v486) & 0xF6BEFBCE)
       + ((v366 >> 27) ^ 0xEFEFF4EF)
       + ((2 * (v366 >> 27)) & 0xDFDFE9DE)
       + 347114794;
  HIDWORD(v366) = v481;
  LODWORD(v366) = v482 ^ 0x1EA82A14;
  v489 = (v366 >> 2) + 1376474037 - ((2 * (v366 >> 2)) & 0xA416A76A);
  v490 = (v1004 ^ 0xC93AC5A4) + (v488 ^ 0xFFECF8FE) + ((2 * v488) & 0xFFD9F1FC) + 1246978;
  v491 = v490 ^ 0xF7B7EB6A;
  v492 = ((2 * v490) & 0xEF6FD6D4) + (v490 ^ 0xF7B7EB6A);
  v493 = 2 * v492 - ((4 * v492 + 608794650) & 0x51533500);
  v494 = (v477 ^ 0x37C3972 ^ (((v487 ^ 0xB10D43DD) & (v477 ^ 0xB2B020F1 ^ v489))
                            - ((2 * ((v487 ^ 0xB10D43DD) & (v477 ^ 0xB2B020F1 ^ v489))) & 0xC78E946C)
                            - 473478602))
       - 1018475001;
  v495 = v492 + 17980934;
  v492 -= 384672250;
  v496 = (v476 ^ 0x4D684EC5)
       + (v494 ^ 0x7EFEFFFB)
       + ((2 * v494) & 0xFDFDFFF6)
       + ((__PAIR64__(v495, v492) >> 27) ^ 0x3DEFBFFF)
       + ((2 * (__PAIR64__(v495, v492) >> 27)) & 0x7BDF7FFE)
       + 1125203974;
  v497 = (v1005 ^ 0xD96076E9) + (v496 ^ 0xF5FF1ED7) + ((2 * v496) & 0xEBFE3DAE) + 167829801;
  v498 = ((2 * v497) & 0x79F5FF5E) + (v497 ^ 0x3CFAFFAF);
  v499 = v489 ^ 0x520B53B5;
  v500 = (((((v493 + 2060342925) ^ 0x5756657E) + v492) ^ 0x5AFCFFFF)
        - 1526530047
        + ((2 * (((v493 + 2060342925) ^ 0x5756657E) + v492)) & 0xB5F9FFFE)) & (v489 ^ 0x520B53B5);
  HIDWORD(v366) = v487 ^ 1;
  LODWORD(v366) = v487 ^ 0xB10D43DC;
  v501 = (v366 >> 2) + 42349393 - ((2 * (v366 >> 2)) & 0x50C66A2);
  HIDWORD(v366) = v491 + 2;
  LODWORD(v366) = v492;
  v502 = v501 ^ 0x2863351;
  v503 = (v366 >> 2) + 1006378588 - ((2 * (v366 >> 2)) & 0x77F83CB8);
  v504 = v498 - ((2 * v498 - 1267181626) & 0xFED8CE9A);
  HIDWORD(v366) = (v504 + 1504219952) ^ 0x76C674D;
  LODWORD(v366) = -1504219953 - v504;
  v505 = (((v492 & (v501 ^ 0x2863351)) - ((2 * (v492 & (v501 ^ 0x2863351))) & 0xE5ADDC2A) + 1926688277) ^ 0xDBB10716 ^ (v500 - ((2 * v500) & 0x52CFD206) - 1452807933))
       + ((v366 >> 27) ^ 0x7F877DBE)
       + ((2 * (v366 >> 27)) & 0xFF0EFB7C)
       - 304673688;
  v506 = ((-1513892836 - v498) & (v501 ^ 0x397A2D0D ^ v503))
       - ((2 * ((-1513892836 - v498) & (v501 ^ 0x397A2D0D ^ v503))) & 0x6803FC84);
  v507 = (v477 ^ 0xE0BB7344) + (v505 ^ 0x94FFFAF7) + ((2 * v505) & 0x29FFF5EE) + 1795163401;
  v508 = (v1007 ^ 0x1211CD28) + (v507 ^ 0xAFFE7E5D) + ((2 * v507) & 0x5FFCFCBA) + 1342276003;
  v509 = ((2 * v508) & 0xBAFDBB6E) + (v508 ^ 0xDD7EDDB7);
  v510 = v509 - ((2 * v509 + 524952440) & 0x46EFBB8A) + 857534337;
  HIDWORD(v366) = v510 ^ 0x377DDC5;
  LODWORD(v366) = v510 ^ 0x20000000;
  v511 = v366 >> 27;
  HIDWORD(v366) = v510 ^ 1;
  LODWORD(v366) = v510 ^ 0x2377DDC4;
  v512 = (v366 >> 2) + 979335158 - ((2 * (v366 >> 2)) & 0x74BEEFEC);
  HIDWORD(v366) = (v504 + 1504219952) ^ 1;
  LODWORD(v366) = (v504 + 1504219952) ^ 0xFF6C674C;
  v513 = (v366 >> 2) - 313458783 - ((2 * (v366 >> 2)) & 0xDAA1FF42);
  v514 = (v1009 ^ 0xE1DC1025)
       + (((v503 ^ 0x8FFDE01E ^ (v506 - 1274937790)) + v499) ^ 0x4F7EFEDE)
       + ((2 * ((v503 ^ 0x8FFDE01E ^ (v506 - 1274937790)) + v499)) & 0x9EFDFDBC)
       + (v511 ^ 0xB69FFFFE)
       + ((2 * v511) & 0x6D3FFFFC)
       - 1550240489;
  v515 = ((2 * v514) & 0xF43DDBBE) + (v514 ^ 0xFA1EEDDF);
  v516 = v510 ^ 0x2377DDC5;
  v517 = v513 ^ 0xED50FFA1;
  v503 ^= 0x3BFC1E5Cu;
  v518 = ((v516 & (v513 ^ 0xED50FFA1)) - 1037392592 - ((2 * (v516 & (v513 ^ 0xED50FFA1))) & 0x84554A60)) ^ 0xC22AA530 | (((-262476221 - v509) & v503) + 116765625 - ((2 * ((-262476221 - v509) & v503)) & 0xDEB6772)) ^ 0x6F5B3B9;
  v519 = v515 - ((2 * v515 + 760655758) & 0x336C0266);
  HIDWORD(v366) = (v519 - 798926598) ^ 0x1B60133;
  LODWORD(v366) = (v519 - 798926598) ^ 0x18000000;
  v520 = v502
       + (v518 ^ 0x7FFDFE19)
       + ((2 * v518) & 0xFFFBFC32)
       + ((v366 >> 27) ^ 0x7BDF6FF4)
       + ((2 * (v366 >> 27)) & 0xF7BEDFE8)
       + 1502488968;
  v521 = v512 ^ 0xBD23368C ^ (((1230284856 - v515) & (v513 ^ 0xD70F8857 ^ v512))
                            - ((2 * ((1230284856 - v515) & (v513 ^ 0xD70F8857 ^ v512))) & 0xEF882F4)
                            - 2021899910);
  v522 = (v1008 ^ 0xB56F588F) + (v520 ^ 0xFCFE79FB) + ((2 * v520) & 0xF9FCF3F6) + 50431493;
  v523 = v522 ^ 0x5C5DB3CE;
  v524 = ((2 * v522) & 0xB8BB679C) + (v522 ^ 0x5C5DB3CE);
  v525 = v524 - ((2 * v524 + 1366449260) & 0xB46F1A9A) + 49331075;
  HIDWORD(v366) = v525 ^ 0x2378D4D;
  LODWORD(v366) = v525 ^ 0x58000000;
  v526 = v366 >> 27;
  HIDWORD(v366) = ~(v519 - 798926594);
  LODWORD(v366) = (v519 - 798926598) ^ 0x19B60130;
  v527 = (v366 >> 2) - 1645164655 - ((2 * (v366 >> 2)) & 0x3BE18F22);
  v528 = v503 + ((v521 - 1437896587) ^ 0x8CFABF5F) + ((2 * (v521 - 1437896587)) & 0x19F57EBE) + 1929724065;
  v529 = (v1010 ^ 0x74786C92)
       + (v528 ^ 0x2FFAE7C7)
       + ((2 * v528) & 0x5FF5CF8E)
       + (v526 ^ 0xF79D7FBF)
       + ((2 * v526) & 0xEF3AFF7E)
       - 2002869858;
  v530 = v529 + 1998596900 - ((2 * v529) & 0xEE405648);
  HIDWORD(v366) = v530 ^ 0x7202B24;
  LODWORD(v366) = v530 ^ 0x70000000;
  v512 ^= 0x3A5F77F6u;
  v531 = v512 + v1011;
  v532 = v517 + ((1464259017 - v524) & v512 ^ 0xFF2FFFFE) + ((2 * ((1464259017 - v524) & v512)) & 0xFE5FFFFC);
  v533 = v527 ^ 0x9DF0C791;
  v534 = v532
       + ((v525 ^ 0x5A378D4D) & v533 ^ 0xFF0A3CF9)
       + ((2 * ((v525 ^ 0x5A378D4D) & v533)) & 0xFE1479F2)
       + ((v366 >> 27) ^ 0x2FF77FEB)
       + ((2 * (v366 >> 27)) & 0x5FEEFFD6);
  HIDWORD(v366) = v523 + 2;
  LODWORD(v366) = v525 ^ 0x5A378D4C;
  v535 = (v366 >> 2) + 2065925986 - ((2 * (v366 >> 2)) & 0xF6470EC4);
  v536 = (v192 ^ 0xC4123137) + ((v534 - 226498584) ^ 0x7AFDC7D5) + ((2 * (v534 - 226498584)) & 0xF5FB8FAA) - 2063452117;
  v537 = ((2 * v536) & 0xFFD7CFEE) + (v536 ^ 0x7FEBE7F7);
  v530 ^= 0x77202B24u;
  v538 = (__PAIR64__(v529, v530) >> 2) - 1235749407 - ((2 * (__PAIR64__(v529, v530) >> 2)) & 0x6CAFEBC2);
  v539 = v527 ^ 0x52D18BB5 ^ ((v530 & (v527 ^ 0xE6D340F3 ^ v535))
                            - ((2 * (v530 & (v527 ^ 0xE6D340F3 ^ v535))) & 0x9E429848)
                            - 819901404);
  v540 = v537 - ((2 * v537 + 1942608304) & 0xB918EB7E);
  HIDWORD(v366) = (v540 + 376529559) ^ 0x48C75BF;
  LODWORD(v366) = (v540 + 376529559) ^ 0x58000000;
  v541 = v366 >> 27;
  v542 = ((2 * v531) & 0xCFFDBBFE)
       + (v531 ^ 0xE7FEDDFF)
       + ((v539 + 1962826561) ^ 0x7F5DBECF)
       + ((2 * (v539 + 1962826561)) & 0xFEBB7D9E)
       + (v541 ^ 0xD8FDBEDE);
  v193 = v482 == 514337300;
  v543 = v535 ^ 0x7B238762;
  v544 = ((1176179495 - v537) & v543) - 407087555 - ((2 * ((1176179495 - v537) & v543)) & 0xCF78AC7A);
  v545 = v538 ^ 0x49A80A1E ^ (v540 + 376529559);
  if (v193)
    v545 = v540 + 376529559;
  v546 = v545 ^ 0x5C8C75BF;
  v547 = v538 ^ 0xB657F5E1;
  HIDWORD(v548) = -376529572 - v540;
  LODWORD(v548) = (v540 + 376529559) ^ 0x5C8C75BC;
  v549 = ((v546 & (v538 ^ 0xB657F5E1)) - 427369410 - ((2 * (v546 & (v538 ^ 0xB657F5E1))) & 0xCD0DB87C)) ^ 0xE686DC3E | v544 ^ 0xE7BC563D;
  v550 = (v548 >> 2) - 937094566 - ((2 * (v548 >> 2)) & 0x904A24B4);
  v551 = v542 + ((2 * v541) & 0xB1FB7DBC);
  v552 = v551 - ((2 * v551 + 1246987608) & 0xB5A81CB0) - 143100;
  HIDWORD(v548) = v552 ^ 0x2D40E58;
  LODWORD(v548) = v552 ^ 0x58000000;
  v553 = v548 >> 27;
  v554 = v552 ^ 0x5AD40E58;
  HIDWORD(v548) = v542;
  LODWORD(v548) = v552 ^ 0x5AD40E58;
  v555 = (v548 >> 2) - 1147301648 - ((2 * (v548 >> 2)) & 0x773B21E0);
  v556 = v533
       + (v549 ^ 0x5FFFECBB)
       + ((2 * v549) & 0xBFFFD976)
       + (v553 ^ 0x77F71DB3)
       + ((2 * v553) & 0xEFEE3B66)
       - 1042807192;
  v557 = (v1012 ^ 0x5C541657) + (v556 ^ 0x17D7DF9D) + ((2 * v556) & 0x2FAFBF3A) - 400023453;
  v558 = ((2 * v557) & 0xBFFFC75E)
       + (v557 ^ 0xDFFFE3AF)
       - ((2 * (((2 * v557) & 0xBFFFC75E) + (v557 ^ 0xDFFFE3AF)) - 1050211800) & 0xE239C132);
  HIDWORD(v548) = (v558 - 774871635) ^ 0x11CE099;
  LODWORD(v548) = (v558 - 774871635) ^ 0xF0000000;
  v559 = v550 ^ 0xC825125A;
  v560 = v543
       + ((1523989843 - v551) & v547 ^ 0x7F72FFBB)
       + ((2 * ((1523989843 - v551) & v547)) & 0xFEE5FF76)
       + (v554 & (v550 ^ 0xC825125A) ^ 0x734BE667)
       + ((2 * (v554 & (v550 ^ 0xC825125A))) & 0xE697CCCE)
       + ((v548 >> 27) ^ 0x5FDB9FFF)
       + ((2 * (v548 >> 27)) & 0xBFB73FFE)
       - 1769832111;
  v561 = (v1013 ^ 0x984A9AEB) + (v560 ^ 0x3EC7DB8F) + ((2 * v560) & 0x7D8FB71E) - 1053285263;
  v562 = ((2 * v561) & 0x97A8F7D4) + (v561 ^ 0x4BD47BEA);
  v563 = (2 * v562 + 186772602) & 0x3E3A8464;
  v562 -= 995215249;
  v564 = v562 - v563;
  HIDWORD(v548) = (v562 - v563) ^ 0x71D4232;
  LODWORD(v548) = (v562 - v563) ^ 0x98000000;
  v565 = (v550 ^ v555 ^ 0x82A46233 ^ (v558 - 774871635))
       + ((v548 >> 27) ^ 0xEBDFF3A9)
       + ((2 * (v548 >> 27)) & 0xD7BFE752)
       + 337644631;
  v566 = v547 + (v565 ^ 0x53FCEC3F) + ((2 * v565) & 0xA7F9D87E) - 2140968011;
  v567 = (v1014 ^ 0x620D4441) + (v566 ^ 0x1C1FEAFF) + ((2 * v566) & 0x383FD5FE) - 471853823;
  v568 = ((2 * v567) & 0x77FDB7F6)
       + (v567 ^ 0x3BFEDBFB)
       - ((2 * (((2 * v567) & 0x77FDB7F6) + (v567 ^ 0x3BFEDBFB)) + 1022717796) & 0x486D9140);
  v569 = v568 + 45187154;
  v570 = 2 * (v568 + 45187154);
  v571 = (v570 ^ 0x486D9140) - 2 * ((v570 ^ 0x486D9140) & 0x2E5727E ^ v570 & 0x1A) + 451244645;
  v572 = v571 & 0x29201E6 ^ 0x401201C3 | v571 & 0xD6DFE18;
  HIDWORD(v548) = (v558 - 774871623) ^ 1;
  LODWORD(v548) = (v558 - 774871635) ^ 0xF11CE098;
  v573 = (v548 >> 2) + 561859824 - ((2 * (v548 >> 2)) & 0x42FA99E0);
  HIDWORD(v548) = v562 ^ 2;
  LODWORD(v548) = v564 ^ 0x9F1D4230;
  v574 = v548 >> 2;
  v575 = ((v570 ^ 0x486D9140) - 2 * ((v570 ^ 0x486D9140) & 0x4B7A348E ^ v570 & 8) - 881183610) & 0xF0000000 ^ 0xC0000000;
  v576 = (((((2 * v575) & 0x80000000) - v575 + 844448120) ^ 0x9B5D5E3) + ((-45187155 - v568) >> 31) - 1) ^ 0x3BE0949A;
  v577 = (v576 + 131172975 - ((2 * v576) & 0xFA314DE)) ^ 0x7D18A6F | (v572 - 1) ^ 0x4AF773A6;
  v578 = v577 - ((2 * v577) & 0x98A583A4) + 1280491986;
  HIDWORD(v548) = v578 ^ 0x9465C4;
  LODWORD(v548) = v578 ^ 0x60000000;
  v579 = (((v555 ^ v573 ^ 0x5FD9E32 ^ v564) + 686734482) ^ 0x7F0DFFDE)
       + ((2 * ((v555 ^ v573 ^ 0x5FD9E32 ^ v564) + 686734482)) & 0xFE1BFFBC)
       - 2131623902
       + (((v548 >> 28) - ((2 * (v548 >> 28)) & 0xD573A92) + 111910217) ^ 0xCAC1DC2B);
  v580 = v559 + (v579 ^ 0x59FF77BF) + ((2 * v579) & 0xB3FEEF7E) - 1509914559;
  v581 = (v1015 ^ 0x13006F46) + (v580 ^ 0x67B4FBE7) + ((2 * v580) & 0xCF69F7CE) - 1739914215;
  v582 = ((2 * v581) & 0x3F5E776C) + (v581 ^ 0x9FAF3BB6);
  v583 = v582 + 1427852849;
  v584 = v582 + 1427852849 - ((2 * v582 + 1282926258) & 0x5DBEB590) - 16;
  HIDWORD(v548) = v584 ^ 0x6DF5AC8;
  LODWORD(v548) = v584 ^ 0xA8000000;
  v585 = v574 + 1442291855 - ((2 * v574) & 0xABEF411E);
  v586 = ((2 * ((v555 ^ 0xBB9D90F0) + (v1016 ^ 0xD5356B75))) & 0xFBB7F9FE)
       + (((v555 ^ 0xBB9D90F0) + (v1016 ^ 0xD5356B75)) ^ 0xFDDBFCFF)
       + (((v573 ^ v585 ^ 0xD0BC24DF ^ v569) + 1141401652) ^ 0x4EFFDEFF)
       + ((2 * ((v573 ^ v585 ^ 0xD0BC24DF ^ v569) + 1141401652)) & 0x9DFFBDFE)
       + ((v548 >> 27) ^ 0xDDDBF7BF)
       + ((2 * (v548 >> 27)) & 0xBBB7EF7E);
  HIDWORD(v548) = v569;
  LODWORD(v548) = v569 ^ 0xA436C8A0;
  v587 = v548 >> 2;
  v588 = v586 - 2 * ((v586 + 1683376) & 0x6A1ECBFB ^ v586 & 3);
  v589 = v588 + 1782086568;
  HIDWORD(v548) = (v588 + 1782086568) ^ 0x21ECBF8;
  LODWORD(v548) = (v588 + 1782086568) ^ 0x68000000;
  v590 = v548 >> 27;
  v1075 = v415 - 17827930 - ((2 * v415) & 0xFDDFEF4C);
  HIDWORD(v548) = v583;
  LODWORD(v548) = v584 ^ 0xAEDF5AC8;
  v591 = v587 + 374859732 - ((2 * v587) & 0x2CAFCFA8);
  v592 = (v548 >> 2) + 1011791229 - ((2 * (v548 >> 2)) & 0x789D6AFA);
  v593 = (v591 ^ 0xD5E6AD56 ^ v592) + (v592 ^ 0x3C4EB57D) + 1;
  v594 = (v585 ^ v591 ^ 0xED7F1D93 ^ v584) + (v590 ^ 0xFB7EF7FF) + ((2 * v590) & 0xF6FDEFFE) + 75565057;
  v595 = (v573 ^ 0x217D4CF0) + (v594 ^ 0x7FF267EA) + ((2 * v594) & 0xFFE4CFD4) - 1831429204;
  v596 = (v1017 ^ 0x24324149) + (v595 ^ 0x72B941BF) + ((2 * v595) & 0xE572837E) - 1924743615;
  v597 = ((2 * v596) & 0xFFFDF9F4) + (v596 ^ 0x7FFEFCFA);
  v598 = (v591 ^ ((v591 ^ 0xE9A8182B) - ((2 * (v591 ^ 0xE9A8182B) + 2) & 0xDF9390BE) - 271988640) ^ 0x5A95C496 ^ (v593 - ((2 * v593) & 0x4617D63A) - 1559500003))
       + (v592 ^ 0x3C4EB57D);
  HIDWORD(v548) = v588 + 1782086584;
  LODWORD(v548) = (v588 + 1782086568) ^ 0x6A1ECBF8;
  v599 = (v548 >> 2) + 2058693088 - ((2 * (v548 >> 2)) & 0xF56A53C0);
  v600 = v597 - 1628285389;
  v601 = v597 - 1628285389 - ((2 * v597 - 1205610974) & 0x85C0D60C) - 28;
  HIDWORD(v548) = v601 ^ 0x2E06B06;
  LODWORD(v548) = v601 ^ 0xC0000000;
  v602 = (v589 ^ 0x8B66C6CB ^ (v598 - ((2 * v598) & 0xC2F01A66) - 512225997)) + 1705774211;
  v603 = (v585 ^ 0x55F7A08F) + (v602 ^ 0x7FBE69FB) + ((2 * v602) & 0xFF7CD3F6) - 2143185403;
  v604 = (v1018 ^ 0x8A78E57C)
       + (v603 ^ 0xFFCFFFEE)
       + ((2 * v603) & 0xFF9FFFDC)
       + ((v548 >> 27) ^ 0x26EDF7EE)
       + ((2 * (v548 >> 27)) & 0x4DDBEFDC)
       - 649983964;
  v605 = ((2 * v604) & 0x1F1BB5FE)
       + (v604 ^ 0xF8DDAFF)
       - ((2 * (((2 * v604) & 0x1F1BB5FE) + (v604 ^ 0xF8DDAFF)) + 1933576254) & 0x5886F80E);
  HIDWORD(v548) = v600 ^ 2;
  LODWORD(v548) = v601 ^ 0xC2E06B04;
  v606 = v548 >> 2;
  v607 = v605 + 635666470;
  HIDWORD(v548) = (v605 + 635666470) ^ 0x4437C07;
  LODWORD(v548) = (v605 + 635666470) ^ 0x28000000;
  v608 = v606 + 1104452939 - ((2 * v606) & 0x83A93A96);
  v609 = (v591 ^ 0x1657E7D4) + ((v548 >> 27) ^ 0xDEFF7DFA) + ((2 * (v548 >> 27)) & 0xBDFEFBF4) + 553681414;
  v610 = (v592 ^ v599 ^ 0x841BF79B ^ v601) + (v609 ^ 0x7E4DFFBF) + ((2 * v609) & 0xFC9BFF7E) - 2119040959;
  v611 = v1020 + (v610 ^ 0x79FFD5F2) + ((2 * v610) & 0xF3FFABE4) + 1021043942;
  v612 = ((2 * v611) & 0xBD7BFF8E)
       + (v611 ^ 0xDEBDFFC7)
       - ((2 * (((2 * v611) & 0xBD7BFF8E) + (v611 ^ 0xDEBDFFC7)) + 847274500) & 0x7BCE17DE);
  v613 = v605 + 635666474;
  v614 = v608 ^ v599 ^ (v605 + 635666470);
  HIDWORD(v548) = ~v613;
  LODWORD(v548) = v607 ^ 0x2C437C04;
  v615 = (v548 >> 2) - 1212639244 - ((2 * (v548 >> 2)) & 0x6F712FE8);
  HIDWORD(v548) = (v612 + 388447473) ^ 0x5E70BEF;
  LODWORD(v548) = (v612 + 388447473) ^ 0x38000000;
  v616 = (v548 >> 27) - 32679777 - ((2 * (v548 >> 27)) & 0xFC1AB13E);
  v617 = ((v616 ^ 0xFE0D589F) & (v614 ^ 0x1722C8AC)) - ((2 * ((v616 ^ 0xFE0D589F) & (v614 ^ 0x1722C8AC))) & 0x3EC6D4FA);
  v618 = v616 ^ v614;
  v619 = (v618 & 0xB4289ED8 ^ 0xB4280200 | 0x95875ECB) - (v618 & 0xB4289ED8 ^ 0xB4280200 | 0x6A78A134) + 1786290484;
  v620 = ((v619 & 0x20A2331A ^ 0x22203102) + (v619 ^ 0x89874EF9) - ((v619 ^ 0x89874EF9) & 0x22A2331A)) ^ 0x2AA2B138 | v618 & 0x4BD76127 ^ 0x49070023;
  v621 = (v592 ^ 0x3C4EB57D)
       + ((2 * v617 - 1094265606) ^ 0x5D99AC14)
       + ((2 * (2 * v617 - 1094265606)) & 0xC6BEF1DC ^ 0x448CA1D4)
       + (v620 ^ 0xE7F55FFF)
       + ((2 * v620) & 0xCFEABFFE)
       + 2105049749;
  v622 = (v1019 ^ 0xD6C1EF8B) - 2130706430 + (v621 ^ 0x7EFFFEFF) + ((2 * v621) & 0xFDFFFDFE) + 255;
  v623 = ((2 * v622) & 0xEFFFBF7E)
       + (v622 ^ 0xF7FFDFBF)
       - 2
       * ((((2 * v622) & 0xEFFFBF7E) + (v622 ^ 0xF7FFDFBF) + 235712608) & 0x1715B35F ^ (((2 * v622) & 0xEFFFBF7E)
                                                                                      + (v622 ^ 0xF7FFDFBF)) & 2);
  v624 = v608 ^ v615 ^ 0xCB8B0150 ^ (v612 + 388447473);
  HIDWORD(v548) = -388447486 - v612;
  LODWORD(v548) = (v612 + 388447473) ^ 0x3DE70BEC;
  v625 = (v548 >> 2) - 1509692986 - ((2 * (v548 >> 2)) & 0x4C07D38C);
  v626 = (((((v623 + 1159881661) ^ 0x1715B35D) << (v1028 & 5))
         + 1361517112
         - ((2 * (((v623 + 1159881661) ^ 0x1715B35D) << (v1028 & 5))) & 0xA24E3470)) ^ 0x51271A38) << (v1028 & 5 ^ 5);
  v627 = (v599 ^ 0x7AB529E0)
       + ((v624 + 1975572830) ^ 0xDCEF3DDF)
       + ((2 * (v624 + 1975572830)) & 0xB9DE7BBE)
       + (((v623 + 1159881661) >> 27) ^ 0xE5FDDEF9)
       + (((v623 + 1159881661) >> 26) & 0x36 ^ 4)
       + (v626 ^ 0x7FC1FF6F)
       + ((2 * v626) & 0xFF83FEDE)
       - 1118772297;
  v628 = (v1021 ^ 0xE7F38B62) + 1250628229 + (v627 ^ 0xAE8DFFBE);
  v629 = v628 + ((2 * v627) & 0x5D1BFF7C) + 527220184 - ((2 * (v628 + ((2 * v627) & 0x5D1BFF7C))) & 0x3ED97BB0);
  HIDWORD(v548) = v629 ^ 0x76CBDD8;
  LODWORD(v548) = v629 ^ 0x18000000;
  v630 = (v608 ^ 0x41D49D4B) + ((v548 >> 27) ^ 0x4FEB3E6E) + ((2 * (v548 >> 27)) & 0x9FD67CDC);
  HIDWORD(v548) = (v623 + 1159881669) ^ 1;
  LODWORD(v548) = (v623 + 1159881661) ^ 0x1715B35C;
  v631 = (v548 >> 2) + 1177685247 - ((2 * (v548 >> 2)) & 0x8C6419FE);
  v632 = (v615 ^ v625 ^ 0x6AECD6F ^ (v623 + 1159881661)) - 406907186;
  v633 = ((2 * ((v1023 ^ 0xEE52D66) - 2028284717)) & 0xFF3CF6F8)
       + (((v1023 ^ 0xEE52D66) - 2028284717) ^ 0x7F9E7B7C)
       + (v632 ^ 0x7F737BFF)
       + ((2 * v632) & 0xFEE6F7FE)
       + ((v630 - 1340817006) ^ 0x3EF4F6BB)
       + ((2 * (v630 - 1340817006)) & 0x7DE9ED76);
  v634 = v633 - ((2 * v633 + 66200468) & 0xCCD9DE2);
  v635 = (v625 ^ 0xA603E9C6) + (v1022 ^ 0xEE15D5E3);
  v636 = v634 + 1214243003;
  HIDWORD(v548) = (v634 + 1214243003) ^ 0x666CEF1;
  LODWORD(v548) = v634 + a17;
  v637 = v548 >> 27;
  HIDWORD(v548) = v628;
  LODWORD(v548) = v629 ^ 0x1F6CBDD8;
  v638 = v548 >> 2;
  v639 = (v625 ^ v631 ^ 0xFF5D58E1 ^ v629) + (v637 ^ 0xB6FFF9FB) + ((2 * v637) & 0x6DFFF3F6) - 1901390787;
  v640 = (v615 ^ 0xB7B897F4) + (v639 ^ 0x13FFA3F7) + ((2 * v639) & 0x27FF47EE) - 335520759;
  v641 = (v1025 ^ 0x9C91EA6A) + (v640 ^ 0x7AB4BA9F) + ((2 * v640) & 0xF569753E) - 2058664607;
  v642 = ((2 * v641) & 0xBAEEE9FA)
       + (v641 ^ 0xDD7774FD)
       - ((2 * (((2 * v641) & 0xBAEEE9FA) + (v641 ^ 0xDD7774FD)) - 1754345256) & 0xA2B658C6);
  HIDWORD(v548) = (v642 + 487757007) ^ 0x15B2C63;
  LODWORD(v548) = (v642 + 487757007) ^ 0xD0000000;
  v643 = v548 >> 27;
  v644 = v638 + 1153335717 - ((2 * v638) & 0x897D034A);
  HIDWORD(v548) = v636 ^ 1;
  LODWORD(v548) = v636 ^ 0x8666CEF0;
  v645 = (v548 >> 2) + 350020975 - ((2 * (v548 >> 2)) & 0x29B9CADE);
  v646 = ((2 * v635) & 0x4EF7EFBE)
       + (v635 ^ 0x277BF7DF)
       + (((v631 ^ v644 ^ 0x84EA43AB ^ v636) + 17546727) ^ 0xBFFDADFF)
       + ((2 * ((v631 ^ v644 ^ 0x84EA43AB ^ v636) + 17546727)) & 0x7FFB5BFE)
       + (v643 ^ 0x5DF79DDC)
       + ((2 * v643) & 0xBBEF3BB8);
  v647 = v646 - 2 * ((v646 + 677177856) & 0x44B29397 ^ v646 & 0x11) - 317751930;
  HIDWORD(v548) = v647 ^ 0x4B29386;
  LODWORD(v548) = v647 ^ 0xC0000000;
  v648 = (v644 ^ v645 ^ 0x813948A9 ^ (v642 + 487757007))
       + ((v548 >> 27) ^ 0xBBBDB1BE)
       + ((2 * (v548 >> 27)) & 0x777B637C)
       + 1145196098;
  v649 = (v631 ^ 0x46320CFF) + (v648 ^ 0xF96D4F6F) + ((2 * v648) & 0xF2DA9EDE);
  HIDWORD(v548) = -487757016 - v642;
  LODWORD(v548) = (v642 + 487757007) ^ 0xD15B2C60;
  v650 = (v548 >> 2) - 40064521 + (~(2 * (v548 >> 2)) | 0x4C6AC11);
  HIDWORD(v548) = v647 ^ 2;
  LODWORD(v548) = v647 ^ 0xC4B29384;
  v651 = (v548 >> 2) + 964509223 - ((2 * (v548 >> 2)) & 0x72FA7C4E);
  v652 = (v1026 ^ 0x7E6F12A) + ((v649 + 1207186462) ^ 0xD1C74FF6) + ((2 * (v649 + 1207186462)) & 0xA38E9FEC) + 775467018;
  v653 = ((2 * v652) & 0x7DF67BF6) + (v652 ^ 0xBEFB3DFB);
  v654 = (~v651 & 0x10000 ^ 0xFCFBF8CB) + 2 * (~v651 & 0x10000);
  v655 = v653 - ((2 * v653 - 587574222) & 0xF233CB98) - 409530395;
  HIDWORD(v548) = v655 ^ 0x119E5CC;
  LODWORD(v548) = v655 ^ 0x78000000;
  v656 = (v548 >> 27) - 1188080821 - ((2 * (v548 >> 27)) & 0x725EA696);
  v657 = ++v650 ^ 0xFD9CA9F7;
  v658 = (v645 ^ v650 ^ 0x2DF2DF1E ^ v647)
       - ((2 * (v645 ^ v650 ^ 0x2DF2DF1E ^ v647) + 399887736) & 0x397B0F92)
       + 1218997893;
  v659 = ((v656 ^ 0xB92F534B) & (v658 ^ 0x1CBD87C9)) - ((2 * ((v656 ^ 0xB92F534B) & (v658 ^ 0x1CBD87C9))) & 0x34EEFD2A);
  v660 = (v658 ^ 0xA592D482 ^ v656)
       + ((2 * v659 - 1259406038) ^ 0x43550673)
       + 138675367
       + ((2 * (2 * v659 - 1259406038)) & 0xEF77F6B0 ^ 0x6955F210);
  v661 = (v1027 ^ 0xB09EAA48) + (v660 ^ 0xB07FFCFF) + ((2 * v660) & 0x60FFF9FE) + 1333789441;
  v662 = (v644 ^ 0x44BE81A5) + (v661 ^ 0x3DEB6CDE) + ((2 * v661) & 0x7BD6D9BC) - 1038839006;
  v663 = ((2 * v662) & 0xFFFFF9F6) + (v662 ^ 0x7FFFFCFB);
  HIDWORD(v548) = v653 + 1;
  LODWORD(v548) = v655 ^ 0x7919E5CC;
  v664 = (v548 >> 2) + 465447229 - ((2 * (v548 >> 2)) & 0x377C527A);
  v193 = ((v654 + 50595637) & v657) - 1145457704 - ((2 * ((v654 + 50595637) & v657)) & 0x77720000) == -1145457704;
  v665 = v654 + 2074542016;
  v666 = 1973350742 - v654;
  if (v193)
    v666 = v665;
  v667 = v663 - ((2 * v663 + 98439124) & 0x368E801C) - 566867976;
  HIDWORD(v668) = v667 ^ 0x347400E;
  LODWORD(v668) = v667 ^ 0x18000000;
  v669 = (((v651 & 0xFFFEFFFF ^ 0x79781C77) + (v651 & 0xE9152 ^ 0x78100) - ((v651 & 0xFFFEFFFF ^ 0x79781C77) & 0xE9152)) ^ (v657 - 2023946379 + v666 - ((2 * (v657 - 2023946379 + v666)) & 0xFD28F5FA) - 23823619) ^ v655 ^ 0xC7862C33)
       + 1969134470;
  v670 = (v645 ^ 0x14DCE56F)
       + (v669 ^ 0x6CFFFE5F)
       + ((2 * v669) & 0xD9FFFCBE)
       + ((v668 >> 27) ^ 0xCEF7DFDE)
       + ((2 * (v668 >> 27)) & 0x9DEFBFBC);
  v671 = ((2 * ((v1029 ^ 0x5C39087D) - 109359077)) & 0xFFBE9AFA)
       + (((v1029 ^ 0x5C39087D) - 109359077) ^ 0xFFDF4D7D)
       + ((v670 - 1006100029) ^ 0x6FFB7F77)
       + ((2 * (v670 - 1006100029)) & 0xDFF6FEEE);
  v672 = v671 - ((2 * v671 + 541746712) & 0x71025078) + 1218861896;
  HIDWORD(v668) = v672 ^ 0x81283C;
  LODWORD(v668) = v672 ^ 0xBFFFFFFF;
  v673 = v657
       + (((v651 ^ v664 ^ 0x39845714 ^ v667) + 18733790) ^ 0xFCB3D6F3)
       + ((2 * ((v651 ^ v664 ^ 0x39845714 ^ v667) + 18733790)) & 0xF967ADE6)
       + ((v668 >> 27) ^ 0xF1EF0CAE)
       + ((2 * (v668 >> 27)) & 0xE3DE195C)
       + 291314783;
  v674 = (v1030 ^ 0x62C116B6) + (v673 ^ 0x3E7FFFE7) + ((2 * v673) & 0x7CFFFFCE) - 1048575975;
  v675 = ((2 * v674) & 0xEFEE7FBE) + (v674 ^ 0x77F73FDF);
  HIDWORD(v668) = v663 ^ 2;
  LODWORD(v668) = v667 ^ 0x1B47400C;
  v676 = (v668 >> 2) + 1055996477 - ((2 * (v668 >> 2)) & 0x7DE2747A);
  v677 = v675 - ((2 * v675 + 730440136) & 0x2D99C1D6);
  HIDWORD(v668) = v671;
  LODWORD(v668) = v672 ^ 0xB881283C;
  v678 = (v668 >> 2) + 1006836408 - ((2 * (v668 >> 2)) & 0x78063570);
  HIDWORD(v668) = (v677 + 210874831) ^ 0x6CCE0EB;
  LODWORD(v668) = (v677 + 210874831) ^ 0x10000000;
  v679 = v668 >> 27;
  HIDWORD(v668) = -v677;
  LODWORD(v668) = (v677 + 210874831) ^ 0x16CCE0E8;
  v680 = (v668 >> 2) + 557697724 - ((2 * (v668 >> 2)) & 0x427B9578);
  v681 = (v651 ^ 0x397D3E27)
       + (((v664 ^ v676 ^ 0x9DCE3B3C ^ v672) - 1832775116) ^ 0x5DABBF95)
       + ((2 * ((v664 ^ v676 ^ 0x9DCE3B3C ^ v672) - 1832775116)) & 0xBB577F2A)
       + (v679 ^ 0xF7F71FD6)
       + ((2 * v679) & 0xEFEE3FAC)
       - 1436737387;
  v682 = (v1031 ^ 0x3F219F55) + (v681 ^ 0xEFE7B6AB) + ((2 * v681) & 0xDFCF6D56) + 270027093;
  v683 = ((2 * v682) & 0xB3FDE5AA)
       + (v682 ^ 0xD9FEF2D5)
       - 2
       * ((((2 * v682) & 0xB3FDE5AA) + (v682 ^ 0xD9FEF2D5) + 35186328) & 0x128195C7 ^ (((2 * v682) & 0xB3FDE5AA)
                                                                                     + (v682 ^ 0xD9FEF2D5)) & 6)
       + 345668697;
  HIDWORD(v668) = v683 ^ 0x28195C1;
  LODWORD(v668) = v683 ^ 0x10000000;
  v684 = (v676 ^ v678 ^ 0x143EC06E ^ (v677 + 210874831)) - 763163710;
  v685 = (v664 ^ 0x1BBE293D)
       + (v684 ^ 0xFE1F3E3F)
       + ((2 * v684) & 0xFC3E7C7E)
       + ((v668 >> 27) ^ 0x3E3DEFDF)
       + ((2 * (v668 >> 27)) & 0x7C7BDFBE)
       - 1012739614;
  v686 = (v1032 ^ 0x1DBE7A55) + (v685 ^ 0xE5EF3729) + ((2 * v685) & 0xCBDE6E52) + 437307607;
  v687 = ((2 * v686) & 0xFFEBFFEE) + (v686 ^ 0x7FF5FFF7);
  v688 = v678 ^ v680 ^ 0xFBF45C5 ^ v683;
  HIDWORD(v668) = v683 ^ 1;
  LODWORD(v668) = v683 ^ 0x128195C0;
  v689 = (v668 >> 2) + 724808577 - ((2 * (v668 >> 2)) & 0x56676702);
  v690 = v687 - ((2 * v687 + 952221648) & 0xF1E5FC00) - 1789665816;
  HIDWORD(v668) = v687;
  LODWORD(v668) = v690 ^ 0x78F2FE00;
  v691 = (v668 >> 2) + 1000574242 - ((2 * (v668 >> 2)) & 0x77471A44);
  HIDWORD(v668) = v690 ^ 0xF2FE00;
  LODWORD(v668) = v690 ^ 0x78000000;
  v692 = (v676 ^ 0x3EF13A3D)
       + ((v688 + 1404773284) ^ 0x37DDFFFB)
       + ((2 * (v688 + 1404773284)) & 0x6FBBFFF6)
       + ((v668 >> 27) ^ 0x77BBEBBF)
       + ((2 * (v668 >> 27)) & 0xEF77D77E)
       + 1348867142;
  v693 = (v1033 ^ 0x9138C3D1) + (v692 ^ 0x79B7D9ED) + ((2 * v692) & 0xF36FB3DA) - 2042092013;
  v694 = ((2 * v693) & 0xBF47BECE) + (v693 ^ 0xDFA3DF67);
  v695 = v694 - ((2 * v694 + 1995821356) & 0xE7BD7134) + 794403120;
  HIDWORD(v668) = v695 ^ 0x3DEB89A;
  LODWORD(v668) = v695 ^ 0xF0000000;
  v696 = (v680 ^ v689 ^ 0x72FC873D ^ v690)
       + ((v668 >> 27) ^ 0x756BDFFD)
       + ((2 * (v668 >> 27)) & 0xEAD7BFFA)
       - 1970003965;
  v697 = (v1034 ^ 0xA700BF35)
       + (((v678 ^ 0x3C031AB8) - 1028479089) ^ 0x5F7DF9B7)
       + ((2 * ((v678 ^ 0x3C031AB8) - 1028479089)) & 0xBEFBF36E)
       + (v696 ^ 0x6DB4F7FF)
       + ((2 * v696) & 0xDB69EFFE)
       + 852299338;
  HIDWORD(v668) = v694 ^ 2;
  LODWORD(v668) = v695 ^ 0xF3DEB898;
  v698 = (v668 >> 2) + 721557753 - ((2 * (v668 >> 2)) & 0x560431F2);
  v699 = ((2 * v697) & 0xFF7BF6D2)
       + (v697 ^ 0x7FBDFB69)
       - ((2 * (((2 * v697) & 0xFF7BF6D2) + (v697 ^ 0x7FBDFB69)) + 1490194770) & 0xC6A42752)
       - 1883546542;
  v700 = v691 ^ 0x3BA38D22;
  HIDWORD(v668) = v699 ^ 0x35213A9;
  LODWORD(v668) = v699 ^ 0x60000000;
  v701 = (v680 ^ 0x213DCABC)
       + (((v689 ^ v691 ^ 0xE34E8639 ^ v695) + 1803906443) ^ 0x8DFFEEFF)
       + ((2 * ((v689 ^ v691 ^ 0xE34E8639 ^ v695) + 1803906443)) & 0x1BFFDDFE)
       + ((v668 >> 27) ^ 0xDEFF1ED9)
       + ((2 * (v668 >> 27)) & 0xBDFE3DB2)
       - 1828654552;
  v702 = (v1024 ^ 0xABA52FD6) + (v701 ^ 0x7FE69B7D) + ((2 * v701) & 0xFFCD36FA) - 2145819517;
  v703 = ((2 * v702) & 0xEF7CCE94)
       + (v702 ^ 0xF7BE674A)
       - 2 * ((((2 * v702) & 0xEF7CCE94) + (v702 ^ 0xF7BE674A) + 194385612) & 0x45CC7E2B ^ (v702 ^ 0xF7BE674A) & 3);
  HIDWORD(v668) = (v703 + 1365415156) ^ 0x5CC7E28;
  LODWORD(v668) = (v703 + 1365415156) ^ 0x40000000;
  v704 = (((v699 ^ 0x635213A9 | v691 ^ 0x3BA38D22)
         - ((2 * (v699 ^ 0x635213A9 | v691 ^ 0x3BA38D22)) & 0x57D58520)
         + 736805520) ^ (((v691 ^ 0x58F19E8B ^ v699) & (v698 ^ 0xD4FDE706))
                       - ((2 * ((v691 ^ 0x58F19E8B ^ v699) & (v698 ^ 0xD4FDE706))) & 0x646BA5A8)
                       - 1305095468) ^ 0x99DF1044)
       - 1873337703;
  v705 = ((2 * v704) & 0xFB7FF5FA)
       + (v704 ^ 0x7DBFFAFD)
       + ((v668 >> 27) ^ 0x7B5F77FF)
       + ((2 * (v668 >> 27)) & 0xF6BEEFFE);
  HIDWORD(v668) = v699 ^ 1;
  LODWORD(v668) = v699 ^ 0x635213A8;
  v706 = (v668 >> 2) - 7805470 - ((2 * (v668 >> 2)) & 0xFF11CBC4);
  v707 = (v703 + 1365415156) ^ 0x45CC7E28;
  v708 = v705 - ((2 * v705 + 230758920) & 0xBD7A32FE) + 1704830595;
  v709 = ((v708 ^ 0x5EBD197F) & (v689 ^ 0x2B33B381)) - ((2 * ((v708 ^ 0x5EBD197F) & (v689 ^ 0x2B33B381))) & 0x2988D032);
  v710 = (v689 ^ 0x758EAAFE ^ v708)
       + ((2 * v709 + 696832050) ^ 0xD3770F8D)
       + 83894337
       + ((2 * (2 * v709 + 696832050)) & 0xF5FFBF7C ^ 0x5111A064);
  v711 = (v1035 ^ 0x2F7A8105) + (v710 ^ 0x6773EDEF) + ((2 * v710) & 0xCEE7DBDE) - 1735650799;
  v712 = ((2 * v711) & 0xEFCE1FFC)
       + (v711 ^ 0xF7E70FFE)
       - ((2 * (((2 * v711) & 0xEFCE1FFC) + (v711 ^ 0xF7E70FFE)) + 230364298) & 0x258F4932)
       + 430255838;
  HIDWORD(v668) = v712 ^ 0x2C7A499;
  LODWORD(v668) = v712 ^ 0x10000000;
  v698 ^= 0x2B0218F9u;
  v713 = (((v707 | v706 ^ 0xFF88E5E2) - 1634894953 - ((2 * (v707 | v706 ^ 0xFF88E5E2)) & 0x3D1AF72E)) ^ 0x9E8D7B97) & v698;
  v714 = (v713 - 1358418074 - ((2 * v713) & 0x5E105ECC)) ^ 0xAF082F66 | ((v707 & (v706 ^ 0xFF88E5E2))
                                                                       - 930747638
                                                                       - ((2 * (v707 & (v706 ^ 0xFF88E5E2))) & 0x910BD614)) ^ 0xC885EB0A;
  v715 = (v1036 ^ 0x31B61AB3)
       + ((v700 + 1804346385) ^ 0xFEECF5BF)
       + ((2 * (v700 + 1804346385)) & 0xFDD9EB7E)
       + (v714 ^ 0xFBCFFD3F)
       + ((2 * v714) & 0xF79FFA7E)
       + ((v668 >> 27) ^ 0xCB7C7D6F)
       + ((2 * (v668 >> 27)) & 0x96F8FADE)
       + 969314195;
  HIDWORD(v668) = v703 + 1365415168;
  LODWORD(v668) = v707;
  v716 = ((2 * v715) & 0xE7FFF946)
       + (v715 ^ 0x73FFFCA3)
       - 2
       * ((((2 * v715) & 0xE7FFF946) + (v715 ^ 0x73FFFCA3) + 797940776) & 0x74FFCEB3 ^ (((2 * v715) & 0xE7FFF946)
                                                                                      + (v715 ^ 0x73FFFCA3)) & 2);
  v717 = (v668 >> 2) - 1444119923 - ((2 * (v668 >> 2)) & 0x53D8F51A);
  v718 = v717 ^ 0xA9EC7A8D;
  HIDWORD(v668) = (v716 + 613378777) ^ 0x4FFCEB1;
  LODWORD(v668) = (v716 + 613378777) ^ 0x70000000;
  v719 = ((((v706 ^ 0xED4F417B ^ v712) & (v717 ^ 0xA9EC7A8D))
         - ((2 * ((v706 ^ 0xED4F417B ^ v712) & (v717 ^ 0xA9EC7A8D))) & 0x9740E676)
         + 1268806459) ^ (((v712 ^ 0x12C7A499) & (v706 ^ 0xFF88E5E2))
                        - ((2 * ((v712 ^ 0x12C7A499) & (v706 ^ 0xFF88E5E2))) & 0xA14CAD9E)
                        + 1353078479) ^ 0x1B0625F4)
       - 1773897427;
  v720 = v698 + (v719 ^ 0x7B3EFEFB) + ((2 * v719) & 0xF67DFDF6) - 2067726075;
  v721 = (v1037 ^ 0xDF697C6B) + ((v668 >> 27) ^ 0x1ECD7DF4) + ((2 * (v668 >> 27)) & 0x3D9AFBE8) - 516783604;
  v722 = ((2 * v720) & 0xFCF6F7A8) + (v720 ^ 0x7E7B7BD4) + (v721 ^ 0xFFB33FF7) + ((2 * v721) & 0xFF667FEE);
  HIDWORD(v668) = v712 ^ 1;
  LODWORD(v668) = v712 ^ 0x12C7A498;
  v723 = (v668 >> 2) - 216818266 - ((2 * (v668 >> 2)) & 0xE6273B4C);
  v724 = v723 ^ 0xF3139DA6;
  v725 = (v723 ^ 0x87EC5317 ^ (v716 + 613378777)) & (v717 ^ 0x56138572);
  v726 = ((v725 - ((2 * v725) & 0xF7082634) + 2072253210) ^ (((v716 + 613378777) ^ 0x74FFCEB1 | v723 ^ 0xF3139DA6)
                                                           - ((2 * ((v716 + 613378777) ^ 0x74FFCEB1 | v723 ^ 0xF3139DA6)) & 0x7BC669EA)
                                                           - 1109183243) ^ 0xC66727EF)
       - 62559834;
  HIDWORD(v668) = (v722 - ((2 * v722 + 89198536) & 0x4C72180) + 2097944740) ^ 0x26390C0;
  LODWORD(v668) = v722 - ((2 * v722 + 89198536) & 0x4C72180) + 2097944740;
  v727 = (v706 ^ 0xFF88E5E2)
       + (v726 ^ 0x56B7EFD3)
       + ((2 * v726) & 0xAD6FDFA6)
       + ((v668 >> 27) ^ 0xF3B3FE7F)
       + ((2 * (v668 >> 27)) & 0xE767FCFE)
       - 1248587346;
  v728 = (v1039 ^ 0xD90C788A) + (v727 ^ 0x53EDF38C) + ((2 * v727) & 0xA7DBE718) - 1408103308;
  HIDWORD(v668) = (v716 + 613378781) ^ 1;
  LODWORD(v668) = (v716 + 613378777) ^ 0x74FFCEB0;
  v729 = (v668 >> 2) + 1100342589 - ((2 * (v668 >> 2)) & 0x832BCA7A);
  v730 = ((2 * v728) & 0xDFACFC74)
       + (v728 ^ 0xEFD67E3A)
       - ((2 * (((2 * v728) & 0xDFACFC74) + (v728 ^ 0xEFD67E3A)) + 1174383096) & 0x5F674E36);
  v731 = v729 ^ 0x4195E53D;
  HIDWORD(v668) = (v730 + 1387494423) ^ 0x7B3A71B;
  LODWORD(v668) = (v730 + 1387494423) ^ 0xA8000000;
  v732 = ((v729 ^ 0x4195E53D | v723 ^ 0xF3139DA6)
        - ((2 * (v729 ^ 0x4195E53D | v723 ^ 0xF3139DA6)) & 0xA20F2562)
        + 1359450801) ^ 0x7E0279E ^ (((-2057865189 - v722) & (v723 ^ 0xB286789B ^ v729))
                                   - ((2 * ((-2057865189 - v722) & (v723 ^ 0xB286789B ^ v729))) & 0xADCF6A5E)
                                   + 1458025775);
  v733 = __PAIR64__(v722, (v722 - ((2 * v722 + 89198536) & 0x4C72180) + 2097944740) ^ 0x26390C0) >> 2;
  v734 = v733 - 1977759152 - ((2 * v733) & 0x143B94A0);
  v735 = v718
       + ((v732 - 828621208) ^ 0xFE7F5FEF)
       + ((2 * (v732 - 828621208)) & 0xFCFEBFDE)
       + ((v668 >> 27) ^ 0x7EFBDF8F)
       + ((2 * (v668 >> 27)) & 0xFDF7BF1E);
  v736 = (v730 + 1387494423) ^ 0xAFB3A71B;
  v737 = v734 ^ 0x8A1DCA50;
  v738 = (v736 | v734 ^ 0x8A1DCA50) - 1708596716 - ((2 * (v736 | v734 ^ 0x8A1DCA50)) & 0x3451C428);
  v739 = (v1038 ^ 0xBB9452BD)
       + ((v735 - 2105229182) ^ 0xA3DDEE77)
       + ((2 * (v735 - 2105229182)) & 0x47BBDCEE)
       + 1545736585;
  v740 = ((2 * v739) & 0xFDFFDAAE) + (v739 ^ 0x7EFFED57);
  HIDWORD(v668) = -1387494444 - v730;
  LODWORD(v668) = (v730 + 1387494423) ^ 0xAFB3A718;
  v741 = (v668 >> 2) - 676045513 - ((2 * (v668 >> 2)) & 0xAF68BA6E);
  v742 = v740 - ((2 * v740 + 50274874) & 0x26726992) + 1421395430;
  HIDWORD(v668) = v742 ^ 0x33934C9;
  LODWORD(v668) = v742 ^ 0x10000000;
  v743 = (((v738 ^ 0x9A28E214) & v731) + 1607273051 - ((2 * ((v738 ^ 0x9A28E214) & v731)) & 0xBF9A14B6)) ^ 0x5FCD0A5B | ((v736 & (v734 ^ 0x8A1DCA50)) + 1446840884 - ((2 * (v736 & (v734 ^ 0x8A1DCA50))) & 0xAC7A1468)) ^ 0x563D0A34;
  v744 = v724
       + (v743 ^ 0xDF57DFF8)
       + ((2 * v743) & 0xBEAFBFF0)
       + ((v668 >> 27) ^ 0xFE27FFFF)
       + ((2 * (v668 >> 27)) & 0xFC4FFFFE)
       - 1167489456;
  v745 = (v1040 ^ 0xDD285C9C) + (v744 ^ 0x7F1D9FEF) + ((2 * v744) & 0xFE3B3FDE) - 2132647919;
  v746 = ((2 * v745) & 0xFBE19ECA) + (v745 ^ 0xFDF0CF65);
  v747 = v746 + 504330422;
  v748 = v746 + 504330422 - ((2 * v746 + 1921191520) & 0x499BE2D4) - 28;
  HIDWORD(v668) = v748 ^ 0x4CDF16A;
  LODWORD(v668) = v748 ^ 0x20000000;
  v749 = v668 >> 27;
  HIDWORD(v668) = v740 + 1;
  LODWORD(v668) = v742 ^ 0x133934C8;
  v750 = (v668 >> 2) - 987039593 - ((2 * (v668 >> 2)) & 0x8A55F12E);
  v751 = v741 ^ 0xD7B45D37;
  v752 = (v750 ^ 0xC52AF897 | v741 ^ 0xD7B45D37) - ((2 * (v750 ^ 0xC52AF897 | v741 ^ 0xD7B45D37)) & 0x2C8A116C);
  v753 = ((113146063 - v746) & (v741 ^ 0x129EA5A0 ^ v750))
       - ((2 * ((113146063 - v746) & (v741 ^ 0x129EA5A0 ^ v750))) & 0x32F5B876);
  v754 = ((((v734 ^ 0x9924FE99 ^ v742) & (v741 ^ 0x284BA2C8))
         - ((2 * ((v734 ^ 0x9924FE99 ^ v742) & (v741 ^ 0x284BA2C8))) & 0xB525DB7A)
         + 1519578557) ^ ((v742 ^ 0x133934C9 | v734 ^ 0x8A1DCA50)
                        - ((2 * (v742 ^ 0x133934C9 | v734 ^ 0x8A1DCA50)) & 0x80527C9C)
                        + 1076444750) ^ 0x1ABBD3F3)
       + (v749 ^ 0xFFACB5CF)
       + ((2 * v749) & 0xFF596B9E)
       - 2135203185;
  v755 = v731 + (v754 ^ 0xBE5EDBAF) + ((2 * v754) & 0x7CBDB75E) + 1101079633;
  v756 = (v329 ^ 0xBF645123) + (v755 ^ 0x7FD1DD7F) + ((2 * v755) & 0xFFA3BAFE) - 2144460159;
  v757 = ((2 * v756) & 0xE7FBFFFC)
       + (v756 ^ 0x73FDFFFE)
       - 2
       * ((((2 * v756) & 0xE7FBFFFC) + (v756 ^ 0x73FDFFFE) + 448111744) & 0x35DE9FFF ^ (((2 * v756) & 0xE7FBFFFC)
                                                                                      + (v756 ^ 0x73FDFFFE)) & 0x14);
  v758 = (v753 + 427482171) ^ (v752 - 1773860682);
  HIDWORD(v668) = (v757 - 795589525) ^ 0x5DE9FEB;
  LODWORD(v668) = (v757 - 795589525) ^ 0x30000000;
  v759 = v668 >> 27;
  v760 = ((2 * v758) ^ 0x1E7FA91A) - ((2 * ((2 * v758) ^ 0x1E7FA91A)) & 0x182A2928);
  HIDWORD(v668) = v747 ^ 2;
  LODWORD(v668) = v748 ^ 0x24CDF168;
  v761 = (v668 >> 2) - 632822876 - ((2 * (v668 >> 2)) & 0xB48FC748);
  v762 = ((v757 - 795589525) ^ 0x35DE9FEB | v750 ^ 0xC52AF897)
       - ((2 * ((v757 - 795589525) ^ 0x35DE9FEB | v750 ^ 0xC52AF897)) & 0x8BAC71DE);
  v763 = (v758 ^ 0x2DD8C9DC) + (v759 ^ 0xFFFD8BDB) + ((2 * v759) & 0xFFFB17B6) + 160805;
  v764 = ((2 * (v737 + (v1041 ^ 0xF6FCBEEF))) & 0xB9FFBDFC)
       + ((v737 + (v1041 ^ 0xF6FCBEEF)) ^ 0xDCFFDEFE)
       + ((v760 - 1944775532) & 0x45CE3AA2 ^ 0xD87AA9F3)
       + ((2 * (v760 - 1944775532)) & 0x889C7044 ^ 0x8082000)
       + (v763 ^ 0xFF1A8B7B)
       + ((2 * v763) & 0xFE3516F6);
  v765 = v764 - ((2 * v764 + 1731655486) & 0xE4133456);
  v766 = (v750 ^ 0xF0F4677C ^ (v757 - 795589525)) & (v761 ^ 0x25B81C5B);
  HIDWORD(v668) = 795589524 - v757;
  LODWORD(v668) = (v757 - 795589525) ^ 0x35DE9FE8;
  v767 = v766 - ((2 * v766) & 0x4139DE42);
  v768 = (v668 >> 2) + 1606257698 - ((2 * (v668 >> 2)) & 0xBF7B1844);
  HIDWORD(v668) = (v765 + 631576010) ^ 0x2099A2B;
  LODWORD(v668) = (v765 + 631576010) ^ 0xF0000000;
  v769 = ((v762 - 975816465) ^ (v767 + 547155745) ^ 0xE54AD7CE)
       + ((v668 >> 27) ^ 0xFFFB0F97)
       + ((2 * (v668 >> 27)) & 0xFFF61F2E)
       + 323689;
  v770 = v751 + (v769 ^ 0x7B1D73DF) + ((2 * v769) & 0xF63AE7BE);
  v771 = v761 ^ 0xDA47E3A4;
  v772 = (((v765 + 631576010) ^ 0xF2099A2B) & (v761 ^ 0xDA47E3A4))
       - ((2 * (((v765 + 631576010) ^ 0xF2099A2B) & (v761 ^ 0xDA47E3A4))) & 0x57B1C0F0);
  v773 = (v1043 ^ 0x3D511F64)
       + ((v770 - 1385118379) ^ 0xF7AFBFEF)
       + ((2 * (v770 - 1385118379)) & 0xEF5F7FDE)
       + 139477009;
  v774 = ((2 * v773) & 0xE3F1DE9E) + (v773 ^ 0x71F8EF4F);
  v775 = v761 ^ 0x284E798F ^ (v765 + 631576010);
  v776 = v768 ^ 0x5FBD8C22;
  v777 = v774 + 277019219 - ((2 * v774 + 690563250) & 0x37DCCBF4);
  HIDWORD(v668) = v777 ^ 0x3EE65FA;
  LODWORD(v668) = v777 ^ 0x18000000;
  v778 = ((v772 + 735633528) ^ ((v775 & (v768 ^ 0x5FBD8C22))
                              - ((2 * (v775 & (v768 ^ 0x5FBD8C22))) & 0x9BE331BA)
                              + 1307678941) ^ 0x662978A5)
       + 1232406298;
  v779 = (v750 ^ 0xC52AF897)
       + (v778 ^ 0x3D4DFEF7)
       + ((2 * v778) & 0x7A9BFDEE)
       + ((v668 >> 27) ^ 0x7BF3DBFF)
       + ((2 * (v668 >> 27)) & 0xF7E7B7FE)
       + 1186866442;
  HIDWORD(v668) = -631576031 - v765;
  LODWORD(v668) = (v765 + 631576010) ^ 0xF2099A28;
  v780 = (v1042 ^ 0x3723519F) + (v779 ^ 0xB6F9FFD2) + ((2 * v779) & 0x6DF3FFA4) + 1225130030;
  v781 = ((2 * v780) & 0xE6BFEEF6) + (v780 ^ 0xF35FF77B);
  v782 = (v668 >> 2) + 556328950 - ((2 * (v668 >> 2)) & 0x4251CFEC);
  v783 = v782 ^ 0x2128E7F6;
  HIDWORD(v668) = v774 + 1;
  LODWORD(v668) = v777 ^ 0x1BEE65F8;
  v784 = (v668 >> 2) + 200949817 - ((2 * (v668 >> 2)) & 0x17F48072);
  v785 = (2 * v781 - 1534231410) & 0xFAA736E8;
  v781 -= 811968069;
  v786 = v781 - v785;
  HIDWORD(v668) = v786 ^ 0x5539B74;
  LODWORD(v668) = v786 ^ 0x78000000;
  v787 = ((((v782 ^ 0x2128E7F6) & (v768 ^ 0x5FBD8C22))
         - ((2 * ((v782 ^ 0x2128E7F6) & (v768 ^ 0x5FBD8C22))) & 0x6F822D0E)
         + 935401095) ^ 0xA50FCA40 ^ (((v777 ^ 0x1BEE65FA) & (v768 ^ 0x7E956BD4 ^ v782))
                                    - ((2 * ((v777 ^ 0x1BEE65FA) & (v768 ^ 0x7E956BD4 ^ v782))) & 0x259DB98E)
                                    - 1831936825))
       - 60594265;
  v788 = v771
       + (v787 ^ 0x4EFDE66F)
       + ((2 * v787) & 0x9DFBCCDE)
       + ((v668 >> 27) ^ 0xFB7D7F5F)
       + ((2 * (v668 >> 27)) & 0xF6FAFEBE)
       - 1249600974;
  v789 = (v1044 ^ 0x2E82107E) + (v788 ^ 0x6FD7F3F3) + ((2 * v788) & 0xDFAFE7E6) - 1876423667;
  v790 = ((2 * v789) & 0xDE7DDAFE) + (v789 ^ 0xEF3EED7F);
  v791 = v786 ^ 0x7D539B74;
  v792 = ((v786 ^ 0x7D539B74) & (v782 ^ 0x2128E7F6)) - ((2 * ((v786 ^ 0x7D539B74) & (v782 ^ 0x2128E7F6))) & 0x50D1E7A6);
  v793 = v790 - ((2 * v790 + 116576108) & 0x1115BD5A) - 1409005981;
  HIDWORD(v668) = v793 ^ 0x8ADEAD;
  LODWORD(v668) = v793 ^ 0x8000000;
  v794 = v784 ^ 0xBFA4039;
  v795 = ((v782 ^ 0x5C7B7C82 ^ v786) & (v784 ^ 0xBFA4039))
       - ((2 * ((v782 ^ 0x5C7B7C82 ^ v786) & (v784 ^ 0xBFA4039))) & 0x5B9266CC);
  v796 = (__PAIR64__(v781, v791) >> 2) - 2022004215 - ((2 * (__PAIR64__(v781, v791) >> 2)) & 0xEF55412);
  v797 = v796 ^ 0x877AAA09;
  v798 = v776
       + ((((v795 - 1379323034) ^ (v792 + 677966803) ^ 0x85A1C0B5) + 1059914426) ^ 0xFB5F7BEF)
       + ((2 * (((v795 - 1379323034) ^ (v792 + 677966803) ^ 0x85A1C0B5) + 1059914426)) & 0xF6BEF7DE)
       + ((v668 >> 27) ^ 0x5DFF977D)
       + ((2 * (v668 >> 27)) & 0xBBFF2EFA)
       - 1499403116;
  v799 = (v1045 ^ 0xEBDB00F4) + (v798 ^ 0x5F5FFCFD) + ((2 * v798) & 0xBEBFF9FA) - 1600126205;
  v800 = ((2 * v799) & 0xA2BF9F1E)
       + (v799 ^ 0x515FCF8F)
       - ((2 * (((2 * v799) & 0xA2BF9F1E) + (v799 ^ 0x515FCF8F)) + 1025365286) & 0x3225DE92)
       + 396483036;
  HIDWORD(v668) = v800 ^ 0x112EF49;
  LODWORD(v668) = v800 ^ 0x18000000;
  v801 = v668 >> 27;
  HIDWORD(v668) = v793 ^ 1;
  LODWORD(v668) = v793 ^ 0x88ADEAC;
  v802 = ((v796 ^ 0x877AAA09 | v784 ^ 0xBFA4039)
        - ((2 * (v796 ^ 0x877AAA09 | v784 ^ 0xBFA4039)) & 0x24BB8468)
        - 1839349196) ^ 0x5ED680A7 ^ (((1552324681 - v790) & (v784 ^ 0x8C80EA30 ^ v796))
                                    - ((2 * ((1552324681 - v790) & (v784 ^ 0x8C80EA30 ^ v796))) & 0x99168526)
                                    - 863288685);
  v803 = (v668 >> 2) + 390082694 - ((2 * (v668 >> 2)) & 0x2E80610C);
  v804 = v783
       + ((v802 + 1272312086) ^ 0x7CDCF0A9)
       + ((2 * (v802 + 1272312086)) & 0xF9B9E152)
       + (v801 ^ 0x79FD66CB)
       + ((2 * v801) & 0xF3FACD96)
       + 153462924;
  v805 = (v1046 ^ 0x63268DBA) + (v804 ^ 0x766FB8FB) + ((2 * v804) & 0xECDF71F6) - 1987033339;
  v806 = ((2 * v805) & 0xADDFDB56)
       + (v805 ^ 0x56EFEDAB)
       - ((2 * (((2 * v805) & 0xADDFDB56) + (v805 ^ 0x56EFEDAB)) + 413908022) & 0x2F6A2CFA);
  v807 = v803 ^ 0x17403086;
  HIDWORD(v668) = (v806 - 2079656808) ^ 0x7B5167D;
  LODWORD(v668) = (v806 - 2079656808) ^ 0x90000000;
  v808 = ((((v803 ^ 0x17403086) & (v796 ^ 0x877AAA09))
         - ((2 * ((v803 ^ 0x17403086) & (v796 ^ 0x877AAA09))) & 0x5028C6AC)
         + 672424790) ^ 0xD4E44A57 ^ (((v800 ^ 0x1912EF49) & (v796 ^ 0x903A9A8F ^ v803))
                                    - ((2 * ((v800 ^ 0x1912EF49) & (v796 ^ 0x903A9A8F ^ v803))) & 0xF9E05202)
                                    - 51369727))
       + ((v668 >> 27) ^ 0x77ABCFFE)
       + ((2 * (v668 >> 27)) & 0xEF579FFC)
       - 1360964116;
  v809 = v794 + (v808 ^ 0x7BE5F6EF) + ((2 * v808) & 0xF7CBEDDE);
  HIDWORD(v668) = v800 ^ 1;
  LODWORD(v668) = v800 ^ 0x1912EF48;
  v810 = (v668 >> 2) - 951386143 - ((2 * (v668 >> 2)) & 0x8E95FFC2);
  v811 = (v1047 ^ 0x9EFC7565)
       + ((v809 - 2078668527) ^ 0x1AF7B58F)
       + ((2 * (v809 - 2078668527)) & 0x35EF6B1E)
       - 452441487;
  v812 = ((2 * v811) & 0x4D67BEEE)
       + (v811 ^ 0xA6B3DF77)
       - ((2 * (((2 * v811) & 0x4D67BEEE) + (v811 ^ 0xA6B3DF77)) + 62222070) & 0x2253FF72);
  v813 = v810 ^ 0xC74AFFE1;
  v814 = ((v806 - 2079656808) ^ 0x97B5167D) & (((v810 ^ 0xC74AFFE1 | v803 ^ 0x17403086)
                                              + 454068255
                                              - ((2 * (v810 ^ 0xC74AFFE1 | v803 ^ 0x17403086)) & 0x3621103E)) ^ 0x1B10881F);
  v815 = (v814 + 641935680 - ((2 * v814) & 0x4C865280)) ^ 0x26432940 | (((v810 ^ 0xC74AFFE1) & (v803 ^ 0x17403086))
                                                                      + 1394372991
                                                                      - ((2 * ((v810 ^ 0xC74AFFE1) & (v803 ^ 0x17403086))) & 0xA638E2FE)) ^ 0x531C717F;
  HIDWORD(v668) = (v806 - 2079656792) ^ 1;
  LODWORD(v668) = (v806 - 2079656808) ^ 0x97B5167C;
  v816 = (v668 >> 2) + 29935145 - ((2 * (v668 >> 2)) & 0x3918C52);
  v817 = v812 + 1392817972;
  HIDWORD(v668) = (v812 + 1392817972) ^ 0x129FFB9;
  LODWORD(v668) = (v812 + 1392817972) ^ 0x90000000;
  v818 = (((v812 + 1392817972) ^ 0x9129FFB9) & (v810 ^ 0xC74AFFE1))
       - ((2 * (((v812 + 1392817972) ^ 0x9129FFB9) & (v810 ^ 0xC74AFFE1))) & 0x6319CF1A);
  v819 = v797
       + (v815 ^ 0xDCA3BE7F)
       + ((2 * v815) & 0xB9477CFE)
       + ((v668 >> 27) ^ 0xEE5FFBFC)
       + ((2 * (v668 >> 27)) & 0xDCBFF7F8)
       - 332727749;
  v820 = (v331 ^ 0x791C4A44) + (v819 ^ 0xFE785FFF) + ((2 * v819) & 0xFCF0BFFE) + 25665537;
  HIDWORD(v668) = (v812 + 1392817984) ^ 1;
  LODWORD(v668) = (v812 + 1392817972) ^ 0x9129FFB8;
  v821 = (v668 >> 2) - 384967917 - ((2 * (v668 >> 2)) & 0xD21BB626);
  v822 = v810 ^ 0x56630058 ^ v817;
  v823 = v816 ^ 0x1C8C629;
  v824 = (v822 & (v816 ^ 0x1C8C629)) - ((2 * (v822 & (v816 ^ 0x1C8C629))) & 0x73BABA9C);
  v825 = ((2 * v820) & 0x7FFFD1EC)
       + (v820 ^ 0xBFFFE8F6)
       - 2
       * ((((2 * v820) & 0x7FFFD1EC) + (v820 ^ 0xBFFFE8F6) + 401415984) & 0x2F15309F ^ (((2 * v820) & 0x7FFFD1EC)
                                                                                      + (v820 ^ 0xBFFFE8F6)) & 6)
       - 956149815;
  HIDWORD(v668) = v825 ^ 0x7153099;
  LODWORD(v668) = v825 ^ 0xA8000000;
  v826 = ((v818 - 1316165747) ^ (v824 - 1176674994) ^ 0x851BAC3) - 1385960412;
  v827 = v821 ^ 0xE90DDB13;
  v828 = (v1048 ^ 0x5454CB4C)
       + (v826 ^ 0xFF6929DD)
       + ((2 * v826) & 0xFED253BA)
       + ((v668 >> 27) ^ 0x2FFFAFFF)
       + ((2 * (v668 >> 27)) & 0x5FFF5FFE)
       - 795400668;
  v829 = v807 + (v828 ^ 0xFDC6D5BD) + ((2 * v828) & 0xFB8DAB7A) + 37300803;
  v830 = ((2 * v829) & 0xF7F57FFE) + (v829 ^ 0x7BFABFFF);
  LOBYTE(v829) = ((2 * (v446 & 5 ^ 1)) | 0x18) - (v446 & 5 ^ 1) - 12;
  LOBYTE(v829) = (v829 & 0xAC ^ 0xA8) + (v829 ^ 0x14) - ((v829 ^ 0x14) & 0xAC);
  v831 = (v825 ^ 0xAF153099) & (((v821 ^ 0xE90DDB13 | v823) + 655878916 - ((2 * (v821 ^ 0xE90DDB13 | v823)) & 0x4E2FD608)) ^ 0x2717EB04);
  v832 = v831 - 1299367700 - ((2 * v831) & 0x651A71D8);
  v833 = v830 - ((2 * v830 + 192553330) & 0x19907D96) - 226144380;
  HIDWORD(v668) = v825 ^ 1;
  LODWORD(v668) = v825 ^ 0xAF153098;
  v834 = (v668 >> 2) - 2136684387 - ((2 * (v668 >> 2)) & 0x149913A);
  v835 = v832 ^ 0xB28D38EC | (((v821 ^ 0xE90DDB13) & v823)
                            + 790270374
                            - ((2 * ((v821 ^ 0xE90DDB13) & v823)) & 0x5E35234C)) ^ 0x2F1A91A6;
  v836 = ((((v833 ^ 0x8CC83ECB) << (v829 ^ 0xB0))
         - 95564359
         - ((2 * ((v833 ^ 0x8CC83ECB) << (v829 ^ 0xB0))) & 0xF49B9B72)) ^ 0xFA4DCDB9) << (v829 ^ 0xB5);
  v837 = v813
       + (v835 ^ 0x7F8FDEFF)
       + ((2 * v835) & 0xFF1FBDFE)
       + ((v833 >> 27) ^ 0xE3AB7FFD)
       + ((v833 >> 26) & 0x18)
       + (v836 ^ 0xBABBCFB3)
       + ((2 * v836) & 0x75779F66)
       + 2086544360;
  v838 = (v1049 ^ 0xC9174D4D) + (v837 ^ 0xF4FBDFB5) + ((2 * v837) & 0xE9F7BF6A) + 184819787;
  v839 = ((2 * v838) & 0xABAFFCF8) + (v838 ^ 0xD5D7FE7C);
  v840 = v834 ^ 0x80A4C89D;
  v841 = (((v821 ^ 0x65C5E5D8 ^ v833) & (v834 ^ 0x80A4C89D))
        - ((2 * ((v821 ^ 0x65C5E5D8 ^ v833) & (v834 ^ 0x80A4C89D))) & 0x2CE76560)
        - 1770802512) ^ (((v833 ^ 0x8CC83ECB) & (v821 ^ 0xE90DDB13))
                       - ((2 * ((v833 ^ 0x8CC83ECB) & (v821 ^ 0xE90DDB13))) & 0xCBF89ABE)
                       + 1711033695);
  HIDWORD(v668) = v830 + 1;
  LODWORD(v668) = v833 ^ 0x8CC83EC8;
  v842 = (v668 >> 2) + 1599728171 - ((2 * (v668 >> 2)) & 0xBEB3D456);
  v843 = v839 - 1886537626;
  v844 = v839 - 1886537626 - ((2 * v839 + 1037883316) & 0xE13E9908) - 8;
  HIDWORD(v668) = v844 ^ 0x9F4C84;
  LODWORD(v668) = v844 ^ 0x70000000;
  v845 = v823
       + (((v841 ^ 0xF38FFFEF) + 825927328) ^ 0x73DDEFBE)
       + ((2 * ((v841 ^ 0xF38FFFEF) + 825927328)) & 0xE7BBDF7C)
       + ((v668 >> 27) ^ 0x6EAFDFF8)
       + ((2 * (v668 >> 27)) & 0xDD5FBFF0)
       + 494022730;
  v846 = (v1050 ^ 0xCC02CD20) + (v845 ^ 0xB3CBDDE9) + ((2 * v845) & 0x6797BBD2) + 1278485015;
  v847 = ((2 * v846) & 0x37BBDBB6) + (v846 ^ 0x9BDDEDDB);
  v848 = ((v842 ^ 0x2FC6A6AF ^ v844) & (v834 ^ 0x7F5B3762))
       - ((2 * ((v842 ^ 0x2FC6A6AF ^ v844) & (v834 ^ 0x7F5B3762))) & 0x66298E0C);
  v844 ^= 0x709F4C84u;
  v849 = (__PAIR64__(v843, v844) >> 2) + 722716734 - ((2 * (__PAIR64__(v843, v844) >> 2)) & 0x5627907C);
  v850 = v847 - ((2 * v847 + 67522754) & 0x426E5CA4) + 1664767667;
  HIDWORD(v668) = v850 ^ 0x1372E52;
  LODWORD(v668) = v850 ^ 0xA0000000;
  v851 = v842 ^ 0x5F59EA2B;
  v852 = (((v844 | v842 ^ 0x5F59EA2B) - ((2 * (v844 | v842 ^ 0x5F59EA2B)) & 0xA2C217B4) - 782169126) ^ (v848 - 1290483962) ^ 0x6275CCDC)
       - 1166032343;
  v853 = v827
       + (v852 ^ 0x57BD2EFE)
       + ((2 * v852) & 0xAF7A5DFC)
       + ((v668 >> 27) ^ 0xFDFCFBF4)
       + ((2 * (v668 >> 27)) & 0xFBF9F7E8)
       - 1438264050;
  v854 = (v1051 ^ 0xC21EC179) + (v853 ^ 0x5EAFF7DD) + ((2 * v853) & 0xBD5FEFBA) - 1588590557;
  v855 = ((2 * v854) & 0xF6837DFE) + (v854 ^ 0xFB41BEFF);
  v856 = v849 ^ 0x2B13C83E;
  v857 = (2 * v855 + 850687848) & 0x7189E1F4;
  v855 += 304032942;
  v858 = v855 - v857;
  HIDWORD(v668) = v858 ^ 0xC4F0FA;
  LODWORD(v668) = v858 ^ 0x38000000;
  v859 = ((((v850 ^ 0xA1372E52) & (v842 ^ 0x5F59EA2B))
         - ((2 * ((v850 ^ 0xA1372E52) & (v842 ^ 0x5F59EA2B))) & 0x442667E6)
         + 571683827) ^ (((v842 ^ 0xFE6EC479 ^ v850) & (v849 ^ 0x2B13C83E))
                       - ((2 * ((v842 ^ 0xFE6EC479 ^ v850) & (v849 ^ 0x2B13C83E))) & 0xB26683EC)
                       - 650952202) ^ 0xFB207205)
       + 861673106;
  v860 = v840
       + (v859 ^ 0xBFE71FFF)
       + ((2 * v859) & 0x7FCE3FFE)
       + ((v668 >> 27) ^ 0x7BF67CBC)
       + ((2 * (v668 >> 27)) & 0xF7ECF978);
  v861 = ((2 * (v1056 + 1539286602)) & 0xBFFDF97E)
       + ((v1056 + 1539286602) ^ 0x5FFEFCBF)
       + ((v860 - 1004379323) ^ 0x4F9FB7FC)
       + ((2 * (v860 - 1004379323)) & 0x9F3F6FF8);
  v862 = v861 - ((2 * v861 + 12752522) & 0x18C02AE6);
  HIDWORD(v668) = v847 + 1;
  LODWORD(v668) = v850 ^ 0xA1372E50;
  v863 = v668 >> 2;
  HIDWORD(v668) = v855 ^ 2;
  LODWORD(v668) = v858 ^ 0x38C4F0F8;
  v864 = v863 + 389150328 - ((2 * v863) & 0x2E63ECF0);
  v865 = (v668 >> 2) + 1349585042 - ((2 * (v668 >> 2)) & 0xA0E21124);
  HIDWORD(v668) = (v862 - 591306568) ^ 0x4601573;
  LODWORD(v668) = (v862 - 591306568) ^ 0x88000000;
  v866 = v668 >> 27;
  HIDWORD(v668) = 591306555 - v862;
  LODWORD(v668) = (v862 - 591306568) ^ 0x8C601570;
  v867 = v668 >> 2;
  v868 = (v849 ^ v864 ^ 0x4E6CEBC ^ v858) + (v866 ^ 0xFD9AED7) + ((2 * v866) & 0x1FB35DAE) - 1110577449;
  v869 = v851 + (v868 ^ 0x2FDDBBFD) + ((2 * v868) & 0x5FBB77FA) - 803060733;
  v870 = (v1053 ^ 0x87705D3D) + (v869 ^ 0x76ABF737) + ((2 * v869) & 0xED57EE6E) - 1990981431;
  v871 = ((2 * v870) & 0xEDFE96FE) + (v870 ^ 0x76FF4B7F);
  v872 = v871 - ((2 * v871 + 192393554) & 0xEF79831A) + 2105055798;
  HIDWORD(v668) = v872 ^ 0x7BCC18D;
  LODWORD(v668) = v872 ^ 0xF0000000;
  v873 = (v864 ^ v865 ^ 0xCB20EB99 ^ (v862 - 591306568)) - 240967884;
  v874 = v856
       + (v873 ^ 0x1FFFFFB5)
       + ((2 * v873) & 0x3FFFFF6A)
       + ((v668 >> 27) ^ 0xFFFFF57B)
       + ((2 * (v668 >> 27)) & 0xFFFFEAF6)
       - 536868144;
  v875 = v1057 + (v874 ^ 0x6FF9DD8F) + ((2 * v874) & 0xDFF3BB1E) - 1878646159;
  v876 = ((2 * v875) & 0x6EEED2FE)
       + (v875 ^ 0xB777697F)
       - ((2 * (((2 * v875) & 0x6EEED2FE) + (v875 ^ 0xB777697F)) + 1116762694) & 0x4290EE2E);
  HIDWORD(v668) = (v876 - 1030705094) ^ 0x1487717;
  LODWORD(v668) = (v876 - 1030705094) ^ 0xA0000000;
  v877 = v668 >> 27;
  HIDWORD(v668) = v871 + 1;
  LODWORD(v668) = v872 ^ 0xF7BCC18C;
  v878 = v867 + 1538166105 - ((2 * v867) & 0xB75D1AB2);
  v879 = (v668 >> 2) - 1859721112 - ((2 * (v668 >> 2)) & 0x224DD0D0);
  v880 = (v865 ^ v878 ^ 0xFC634446 ^ v872) + 71529345 + (v877 ^ 0xFBBC8C7F) + ((2 * v877) & 0xF77918FE);
  v881 = (v864 ^ 0x1731F678) + (v880 ^ 0xEB2EEFCF) + ((2 * v880) & 0xD65DDF9E) - 912640654;
  v882 = (v1054 ^ 0xD044179) + (v881 ^ 0x7FEFB5FB) + ((2 * v881) & 0xFFDF6BF6) - 2146416123;
  v883 = ((2 * v882) & 0xEFA5FFF6) + (v882 ^ 0xF7D2FFFB);
  v884 = v883 - ((2 * v883 + 999110964) & 0xBFB7A2CC) + 2107796992;
  HIDWORD(v668) = v884 ^ 0x7DBD166;
  LODWORD(v668) = v884 ^ 0x58000000;
  v885 = (v878 ^ v879 ^ 0x6BC01226 ^ (v876 - 1030705094))
       + ((v668 >> 27) ^ 0x4BEFF6DF)
       + ((2 * (v668 >> 27)) & 0x97DFEDBE);
  HIDWORD(v668) = ~(v876 - 1030705082);
  LODWORD(v668) = (v876 - 1030705094) ^ 0xA1487714;
  v886 = (v668 >> 2) - 1207012001 - ((2 * (v668 >> 2)) & 0x701CEABE);
  v887 = (v865 ^ 0x50710892)
       + ((v885 + 1003224433) ^ 0x7DFEE38E)
       + ((2 * (v885 + 1003224433)) & 0xFBFDC71C)
       - 2113856398;
  v888 = (v1052 ^ 0x5AFA0D7D) + (v887 ^ 0x75EDFEEA) + ((2 * v887) & 0xEBDBFDD4) - 1978531562;
  v889 = (((((2 * ((v884 ^ v886) & 0x1CE04030 ^ 0x14004000)) & 0x20808060)
          - ((v884 ^ v886) & 0x1CE04030 ^ 0x14004000)
          + 748896005) ^ 0x582EAB8C)
        - 1) ^ 0x644DD4B8 | (((v884 ^ v886) & 0xE31FBFCF ^ 0xA3139703)
                           - ((2 * ((v884 ^ v886) & 0xE31FBFCF ^ 0xA3139703)) & 0xC23F470E)
                           + 1709171639) ^ 0x25D9D0BD;
  HIDWORD(v668) = v879 ^ 0x26E868;
  LODWORD(v668) = v879 ^ 0x91000000;
  v890 = (v668 >> 23) - ((2 * (v668 >> 23)) & 0x9830C6B8);
  v891 = v889 - ((2 * v889) & 0xF55FC616) - 89136373;
  HIDWORD(v668) = v891 ^ 0x2FE30B;
  LODWORD(v668) = v891 ^ 0xFA800000;
  v892 = ((v668 >> 23) - ((2 * (v668 >> 23)) & 0x29C28C90) + 350307912) ^ (v890 + 1276666716);
  HIDWORD(v668) = v892 ^ 0x61;
  LODWORD(v668) = v892 ^ 0x1F9D6800;
  v893 = (v668 >> 9) - ((2 * (v668 >> 9)) & 0x961255CC);
  v894 = ((2 * v888) & 0xF96FDFEC)
       + (v888 ^ 0xFCB7EFF6)
       - 2 * ((((2 * v888) & 0xF96FDFEC) + (v888 ^ 0xFCB7EFF6) + 99540368) & 0x17D4A47B ^ (v888 ^ 0xFCB7EFF6) & 2)
       - 574389751;
  HIDWORD(v668) = v894 ^ 0x7D4A479;
  LODWORD(v668) = v894 ^ 0x90000000;
  v895 = (v878 ^ 0x5BAE8D59)
       + ((v668 >> 27) ^ 0xFFED9BDB)
       + ((2 * (v668 >> 27)) & 0xFFDB37B6)
       + ((((v893 + 1258892006) ^ 0xF1AA98C0) - 1423944951) ^ 0x37EBFBFD)
       + ((2 * (((v893 + 1258892006) ^ 0xF1AA98C0) - 1423944951)) & 0x6FD7F7FA)
       - 937007064;
  v896 = (v1058 ^ 0x9935FCA7) - 2130706430 + (v895 ^ 0x7EFFFFFE) + ((2 * v895) & 0xFDFFFFFC);
  v897 = ((2 * v896) & 0xDEFFFFFE)
       + (v896 ^ 0xEF7FFFFF)
       + 1298944421
       + (~(2 * (((2 * v896) & 0xDEFFFFFE) + (v896 ^ 0xEF7FFFFF)) + 528801180) | 0xC4AC3A53);
  HIDWORD(v668) = v883 ^ 2;
  LODWORD(v668) = v884 ^ 0x5FDBD164;
  v898 = (v668 >> 2) + 432611855 - ((2 * (v668 >> 2)) & 0x3392441E);
  HIDWORD(v668) = v897 ^ 0x5A9E2D6;
  LODWORD(v668) = v897 ^ 0x18000000;
  v899 = v668 >> 27;
  HIDWORD(v668) = v894 ^ 1;
  LODWORD(v668) = v894 ^ 0x97D4A478;
  v900 = (v668 >> 2) + 1623228577 - ((2 * (v668 >> 2)) & 0xC1810142);
  v901 = (v879 ^ 0x9126E868)
       + (((v886 ^ v898 ^ 0x3613F329 ^ v894) - 2057793587) ^ 0xFFFFF39F)
       + ((2 * ((v886 ^ v898 ^ 0x3613F329 ^ v894) - 2057793587)) & 0xFFFFE73E)
       + (v899 ^ 0x3AEFEFD8)
       + ((2 * v899) & 0x75DFDFB0)
       - 988799863;
  v902 = (v1055 ^ 0x206370E6) + (v901 ^ 0x76AFD2EE) + ((2 * v901) & 0xED5FA5DC) - 1991234286;
  v903 = ((2 * v902) & 0xBEF7AFEC)
       + (v902 ^ 0x5F7BD7F6)
       - ((2 * (((2 * v902) & 0xBEF7AFEC) + (v902 ^ 0x5F7BD7F6)) + 186430502) & 0x3E8D8426);
  HIDWORD(v668) = (v903 - 2066408410) ^ 0x746C213;
  LODWORD(v668) = (v903 - 2066408410) ^ 0x98000000;
  v904 = (v886 ^ 0xB80E755F)
       + (((v898 ^ v900 ^ 0x64A04078 ^ v897) - 918404734) ^ 0x796FF53B)
       + ((2 * ((v898 ^ v900 ^ 0x64A04078 ^ v897) - 918404734)) & 0xF2DFEA76)
       + ((v668 >> 27) ^ 0x9FFEDB35)
       + ((2 * (v668 >> 27)) & 0x3FFDB66A)
       - 426692720;
  v905 = (v1059 ^ 0xC78A2E49) + (v904 ^ 0x9BFFAFFF) + ((2 * v904) & 0x37FF5FFE) + 1677742081;
  v906 = ((2 * v905) & 0xDF7FFE3E) + (v905 ^ 0x6FBFFF1F);
  v907 = v906 - ((2 * v906 + 583074410) & 0xAD457666) + 1745042536;
  v908 = ((32 * v907) ^ 0xD4576660) + 1291745980 - ((2 * ((32 * v907) ^ 0xD4576660)) & 0x99FCF540);
  v909 = ((2 * (v907 >> 27)) ^ 0x34) + ((v907 >> 27) ^ 0x2BFFFFA5);
  HIDWORD(v668) = v897 ^ 2;
  LODWORD(v668) = v897 ^ 0x1DA9E2D4;
  v910 = (v668 >> 2) + 927273038 - ((2 * (v668 >> 2)) & 0x6E8A209C);
  v911 = v909 - 738197439;
  v912 = v909
       + ((v908 ^ 0x4CFE7ABC | (v909 - 738197439)) ^ 0x21585002)
       - ((2 * (v908 ^ 0x4CFE7ABC | (v909 - 738197439))) & 0xBD4F5FFA)
       + 1;
  HIDWORD(v668) = 2066408401 - v903;
  LODWORD(v668) = (v903 - 2066408410) ^ 0x9F46C210;
  v913 = (v668 >> 2) - 1190599619 - ((2 * (v668 >> 2)) & 0x7211C87A);
  v914 = (v908 ^ ((v908 ^ 0xB3018543) - ((2 * (v908 ^ 0xB3018543) + 2) & 0xEA0571FE) + 1963112704) ^ 0x9213816B ^ (v912 - ((2 * v912 + 1699700860) & 0x57DE8650) + 1586951014))
       + v911;
  v915 = (v900 ^ v910 ^ 0xC8C352FC ^ (v903 - 2066408410)) - 97758930;
  v916 = (v898 ^ 0x19C9220F)
       + (v915 ^ 0xD5DABE7D)
       + ((2 * v915) & 0xABB57CFA)
       + (v914 ^ 0x5DFE97FE)
       + ((2 * v914) & 0xBBFD2FFC)
       - 869881467;
  v917 = ((2 * v916) & 0xAFC3E9FE) + (v916 ^ 0x57E1F4FF);
  v918 = ((2 * ((v1060 ^ 0xB374DB5E) - 1474426111 + v917)) & 0xBFF657BE)
       + (((v1060 ^ 0xB374DB5E) - 1474426111 + v917) ^ 0xDFFB2BDF);
  v919 = v918 - ((2 * v918 + 1618381202) & 0x750ADF5E) + 717272184;
  HIDWORD(v668) = v919 ^ 0x2856FAF;
  LODWORD(v668) = v919 ^ 0x38000000;
  v920 = (v900 ^ 0x60C080A1)
       + (((v910 ^ v913 ^ 0x58EF4F40 ^ v907) - 1603733000) ^ 0x3FFDC667)
       + ((2 * ((v910 ^ v913 ^ 0x58EF4F40 ^ v907) - 1603733000)) & 0x7FFB8CCE)
       + ((v668 >> 27) ^ 0x57D7FBFD)
       + ((2 * (v668 >> 27)) & 0xAFAFF7FA)
       + 1747598748;
  v921 = (v1061 ^ 0x155ECB2C) + (v920 ^ 0x7BEB7EFF) + ((2 * v920) & 0xF7D6FDFE) - 2079031039;
  HIDWORD(v668) = v918 + 1;
  LODWORD(v668) = v919 ^ 0x3A856FAC;
  v922 = (v668 >> 2) + 707596327 - ((2 * (v668 >> 2)) & 0x545A204E);
  v923 = ((2 * v921) & 0x9FEFFF7E)
       + (v921 ^ 0x4FF7FFBF)
       - ((2 * (((2 * v921) & 0x9FEFFF7E) + (v921 ^ 0x4FF7FFBF)) - 1274834882) & 0xD0E3479A)
       - 1032623124;
  HIDWORD(v668) = v906 + 1;
  LODWORD(v668) = v907 ^ 0xD6A2BB30;
  v924 = (v668 >> 2) + 1494787432 - ((2 * (v668 >> 2)) & 0xB2314AD0);
  HIDWORD(v668) = v923 ^ 0x71A3CD;
  LODWORD(v668) = v923 ^ 0xE8000000;
  v925 = (v913 ^ v924 ^ 0xDA952EFA ^ v919)
       + ((v668 >> 27) ^ 0xFF9FBBDF)
       + ((2 * (v668 >> 27)) & 0xFF3F77BE)
       + 1050085654;
  v926 = (v910 ^ 0x3745104E) + (v925 ^ 0xFFFF6F7C) + ((2 * v925) & 0xFFFEDEF8) + 36996;
  v927 = (v1063 ^ 0xED732A18) + (v926 ^ 0xCFC8DBFF) + ((2 * v926) & 0x9F91B7FE) + 808920065;
  v928 = ((2 * v927) & 0x7DABF37A)
       + (v927 ^ 0x3ED5F9BD)
       - ((2 * (((2 * v927) & 0x7DABF37A) + (v927 ^ 0x3ED5F9BD)) - 1700002232) & 0xF63A1C2E);
  v929 = (v924 ^ v922 ^ 0x9B441682 ^ v923) + 57863904;
  HIDWORD(v668) = v923 ^ 1;
  LODWORD(v668) = v923 ^ 0xE871A3CC;
  v930 = (v668 >> 2) + 360320358 - ((2 * (v668 >> 2)) & 0x2AF41ACC);
  HIDWORD(v668) = (v928 - 931983045) ^ 0x31D0E17;
  LODWORD(v668) = (v928 - 931983045) ^ 0x78000000;
  v931 = (v913 ^ 0xB908E43D)
       + (v929 ^ 0x4B31F3D9)
       + ((2 * v929) & 0x9663E7B2)
       + ((v668 >> 27) ^ 0x55BBFFFB)
       + ((2 * (v668 >> 27)) & 0xAB77FFF6)
       + 1595018284;
  v932 = (v922 ^ v930 ^ 0x444A1356 ^ (v928 - 931983045)) - 1540884995;
  v933 = (v1064 ^ 0xA112FAF9) + (v931 ^ 0x5E8EFFBF) + ((2 * v931) & 0xBD1DFF7E) - 1586429887;
  v934 = ((2 * v933) & 0xFBFFCA7E) + (v933 ^ 0xFDFFE53F);
  v935 = v934 + 434458873;
  v936 = v934 + 434458873 - ((2 * v934 - 1847600274) & 0xA1EAC64C) - 28;
  HIDWORD(v668) = v936 ^ 0xF56326;
  LODWORD(v668) = v936 ^ 0x55555555;
  v937 = (v924 ^ 0x5918A568)
       + (v932 ^ 0x37FDA78F)
       + ((2 * v932) & 0x6FFB4F1E)
       + ((v668 >> 27) ^ 0x2F8FF36F)
       + ((2 * (v668 >> 27)) & 0x5F1FE6DE)
       - 1737333502;
  HIDWORD(v668) = 931983024 - v928;
  LODWORD(v668) = (v928 - 931983045) ^ 0x7B1D0E14;
  v938 = (v668 >> 2) - 1827835631 - ((2 * (v668 >> 2)) & 0x261AE222);
  v939 = (v1062 ^ 0x19B08CD8) + (v937 ^ 0x74EFFE9F) + ((2 * v937) & 0xE9DFFD3E) - 1961885343;
  v940 = ((2 * v939) & 0x2FEBF3FE) + (v939 ^ 0x97F5F9FF);
  v941 = v940 - ((2 * v940 + 478782388) & 0x2E8B0774) + 629822868;
  HIDWORD(v668) = v935 ^ 2;
  LODWORD(v668) = v936 ^ 0x50F56324;
  v942 = (v668 >> 2) + 1782997395 - ((2 * (v668 >> 2)) & 0xD48CC326);
  HIDWORD(v668) = v941 ^ 0x74583BA;
  LODWORD(v668) = v941 ^ 0x90000000;
  v943 = (v922 ^ 0x2A2D1027)
       + (((v930 ^ v938 ^ 0xD6821F51 ^ v936) + 801519791) ^ 0x6BB7BFFE)
       + ((2 * ((v930 ^ v938 ^ 0xD6821F51 ^ v936) + 801519791)) & 0xD76F7FFC)
       + ((v668 >> 27) ^ 0xDDF6CFFF)
       + ((2 * (v668 >> 27)) & 0xBBED9FFE)
       - 1236176893;
  v944 = (v1065 ^ 0x1BE7CBA2) + (v943 ^ 0x71FFFDFB) + ((2 * v943) & 0xE3FFFBF6) - 1912602107;
  v945 = ((2 * v944) & 0xCFDEB5FE) + (v944 ^ 0x67EF5AFF);
  HIDWORD(v668) = v940 ^ 2;
  LODWORD(v668) = v941 ^ 0x974583B8;
  v946 = (v668 >> 2) - 138106850 - ((2 * (v668 >> 2)) & 0xEF89503C);
  v947 = v945 - 2 * ((v945 + 850210344) & 0x35C28D77 ^ v945 & 6) + 1752152985;
  HIDWORD(v668) = v947 ^ 0x5C28D71;
  LODWORD(v668) = v947 ^ 0x30000000;
  v948 = (v930 ^ 0x157A0D66)
       + (((v938 ^ v942 ^ 0x6E0E9338 ^ v941) - 1622954693) ^ 0x75F6BEBB)
       + ((2 * ((v938 ^ v942 ^ 0x6E0E9338 ^ v941) - 1622954693)) & 0xEBED7D76)
       + ((v668 >> 27) ^ 0xFBEFDFEF)
       + ((2 * (v668 >> 27)) & 0xF7DFBFDE)
       - 1910939306;
  LOBYTE(v941) = ((v917 + 1) & 2) - 29 - 2 * ((v917 + 1) & 2);
  v949 = (v405 ^ 0x55A2875C) + (v948 ^ 0x7F66EF7B) + ((2 * v948) & 0xFECDDEF6) - 2137452411;
  v950 = ((2 * v949) & 0x2BF7DCBC) + (v949 ^ 0x95FBEE5E);
  v951 = (2 * v950 + 172379258) & 0x19BEBA54;
  v950 += 570590055;
  v952 = v950 - v951;
  HIDWORD(v668) = (v950 - v951) ^ 0x4DF5D2A;
  LODWORD(v668) = (v950 - v951) ^ 0x88000000;
  v953 = (v942 ^ v946 ^ 0xA84044FC ^ v947) + ((v668 >> 27) ^ 0xFF7F7FF2) + ((2 * (v668 >> 27)) & 0xFEFEFFE4) + 8421390;
  HIDWORD(v668) = v947 ^ 1;
  LODWORD(v668) = v947 ^ 0x35C28D70;
  v954 = (v668 >> 2) - 1015714682 - ((2 * (v668 >> 2)) & 0x86EAD90C);
  v955 = ((((v952 ^ 0x8CDF5D2A) >> (v941 ^ 0xE3))
         - 2072380535
         - ((2 * ((v952 ^ 0x8CDF5D2A) >> (v941 ^ 0xE3))) & 0x8F3F712)) ^ 0x8479FB89) >> (v941 ^ 0xE1);
  v956 = (v938 ^ 0x930D7111) + (v953 ^ 0x77BDB9D7) + ((2 * v953) & 0xEF7B73AE) - 1785333600;
  v957 = (v1067 ^ 0x1203C397) + (v956 ^ 0x5E6CD3FE) + ((2 * v956) & 0xBCD9A7FC) - 1584190462;
  v958 = ((2 * v957) & 0xBFEB6D7C)
       + (v957 ^ 0xDFF5B6BE)
       - ((2 * (((2 * v957) & 0xBFEB6D7C) + (v957 ^ 0xDFF5B6BE)) - 1171082942) & 0xF7BF6162);
  HIDWORD(v668) = (v958 + 1492715858) ^ 0x3DFB0B1;
  LODWORD(v668) = (v958 + 1492715858) ^ 0x78000000;
  v959 = (v946 ^ v954 ^ 0xB86E99B2 ^ v952) + ((v668 >> 27) ^ 0x33DBFCFB) + ((2 * (v668 >> 27)) & 0x67B7F9F6) - 940905015;
  v960 = (v942 ^ 0x6A466193) + (v959 ^ 0xF9E55BFE) + ((2 * v959) & 0xF3CAB7FC) + 102409218;
  v961 = v955 - 582516736 - ((2 * v955) & 0xBA8F0A38) + 1308;
  v962 = (v1066 ^ 0x74020583) + (v960 ^ 0x7791FCFF) + ((2 * v960) & 0xEF23F9FE) - 2006056191;
  v963 = ((2 * v962) & 0xFDF9CDFE) + (v962 ^ 0x7EFCE6FF);
  v964 = (((v952 << 15) ^ 0x10000) - (v950 << 16) + 53344) & 0x18000;
  HIDWORD(v668) = v961 ^ 0x51C;
  LODWORD(v668) = v961 ^ 0xDD478000;
  v965 = (v668 >> 15) - ((2 * (v668 >> 15)) & 0x48279C38) - 1542205924;
  v966 = v963 - 1055687695;
  HIDWORD(v668) = (v958 + 1492715874) ^ 1;
  LODWORD(v668) = (v958 + 1492715858) ^ 0x7BDFB0B0;
  v967 = v963 - 1055687695 - ((2 * v963 - 1623334874) & 0xE2E917BC);
  v968 = (v668 >> 2) + 1641146245 - ((2 * (v668 >> 2)) & 0xC3A3CF0A);
  HIDWORD(v668) = v964 ^ 0x1B7F2 ^ v965;
  LODWORD(v668) = v965 ^ 0xEC620000;
  v969 = (v668 >> 17) - ((2 * (v668 >> 17)) & 0xAF2C1486) + 1469450819;
  HIDWORD(v668) = v967 ^ 0x1748BDE;
  LODWORD(v668) = v967 ^ 0x70000000;
  v970 = (v946 ^ 0xF7C4A81E)
       + (((v954 ^ (v958 + 1492715858) ^ 0x93CBF24C ^ v969) - 1142550407) ^ 0xDEEDE999)
       + ((2 * ((v954 ^ (v958 + 1492715858) ^ 0x93CBF24C ^ v969) - 1142550407)) & 0xBDDBD332)
       + ((v668 >> 27) ^ 0x19BBF7BF)
       + ((2 * (v668 >> 27)) & 0x3377EF7E)
       + 123084456;
  v971 = (v409 ^ 0xF00BB31C) + (v970 ^ 0x2F5FC7FE) + ((2 * v970) & 0x5EBF8FFC) - 794806270;
  v972 = ((2 * v971) & 0xF7EBEF1A) + (v971 ^ 0x7BF5F78D);
  v973 = v972 - 888677342;
  v974 = v972 - 888677342 - 2 * ((v972 + 310819280) & 0x38812256 ^ v972 & 4);
  HIDWORD(v668) = v974 ^ 0x812252;
  LODWORD(v668) = v974 ^ 0x38000000;
  v975 = (v954 ^ 0xC3756C86)
       + (((v969 ^ v968 ^ 0x3BC44220 ^ v967) - 1655169826) ^ 0x71DC6EFB)
       + ((2 * ((v969 ^ v968 ^ 0x3BC44220 ^ v967) - 1655169826)) & 0xE3B8DDF6)
       + ((v668 >> 27) ^ 0xFE9FFEDF)
       + ((2 * (v668 >> 27)) & 0xFD3FFDBE);
  HIDWORD(v668) = v966 ^ 2;
  LODWORD(v668) = v967 ^ 0x71748BDC;
  v976 = (v668 >> 2) + 752688079 - ((2 * (v668 >> 2)) & 0x59BA379E);
  v977 = ((v1071 + 1028079220) ^ 0xB1A4F261 ^ (v1070 - 1931228139))
       + ((v975 - 1887202778) ^ 0xF9FDAFFF)
       + ((2 * (v975 - 1887202778)) & 0xF3FB5FFE)
       + 100814849;
  v978 = ((2 * v977) & 0xFE7FF7F6) + (v977 ^ 0x7F3FFBFB);
  v979 = v978 - ((2 * v978 + 194335226) & 0x8E436A0) - 1304640435;
  v980 = (v968 ^ v976 ^ 0x758DDE18 ^ v974) - 632249383;
  v981 = v980 ^ 0xBCED5AFD;
  HIDWORD(v668) = v973 ^ 2;
  LODWORD(v668) = v974 ^ 0x38812250;
  v982 = (2 * v980) & 0x79DAB5FA;
  v983 = (v668 >> 2) - 979295462 - ((2 * (v668 >> 2)) & 0x8B424634);
  v984 = v979 ^ 0x4721B50;
  HIDWORD(v668) = v979 ^ 0x4721B50;
  LODWORD(v668) = v979;
  v985 = (v969 ^ 0x2B612E7B) + v981 + v982 + ((v668 >> 27) ^ 0x49DBDEBF) + ((2 * (v668 >> 27)) & 0x93B7BD7E) - 113850812;
  v986 = v985 - 1789206101 - ((2 * v985) & 0x2AB5C356);
  v987 = v976 ^ v983 ^ 0xED0E2385 ^ v979;
  v988 = 2
       * (((v986 ^ 0x955AE1AB) & (v1075 ^ 0xFEEFF7A6))
        - ((2 * ((v986 ^ 0x955AE1AB) & (v1075 ^ 0xFEEFF7A6))) & 0x696F6788))
       + 1768908680;
  v989 = (v1075 ^ 0x6BB5160D ^ v986) + (v988 ^ 0x5594806D) - 1023141861 + ((2 * v988) & 0x79F7CFC8 ^ 0x50D6CF00);
  v990 = ((2 * v989) & 0xCABEFD3E) + (v989 ^ 0xE55F7E9F);
  v991 = v987 + 362849356;
  v992 = ((2 * (a62 - 28994045 + (v976 ^ 0x2CDD1BCF))) & 0x577DFBFA)
       + ((a62 - 28994045 + (v976 ^ 0x2CDD1BCF)) ^ 0x2BBEFDFD);
  if (v1073 == 888649267)
    v993 = 0x80000000;
  else
    v993 = 1846341127;
  HIDWORD(v994) = v990 + 45260638;
  LODWORD(v994) = v990 + 179478366;
  v995 = (v968 ^ 0x61D1E785)
       + (v991 ^ 0xBE7F7FFF)
       + ((2 * v991) & 0x7CFEFFFE)
       + ((v994 >> 27) ^ 0xC7EFEE7D)
       + ((2 * (v994 >> 27)) & 0x8FDFDCFA);
  HIDWORD(v994) = v978 + 1;
  LODWORD(v994) = v984;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a68
                                                                             + 8
                                                                             * ((7
                                                                               * ((int)((v993 & 0x6E0CEE07 ^ 0xD2BFE3EF)
                                                                                      + 759176209
                                                                                      + ((2 * (v993 & 0x6E0CEE07)) & 0xA57FC7DE)) >= 0)) | (v1076 + 837)))
                                                                 - 8))(a65 + ((v994 >> 2) ^ 0x75DFEFEE) + ((2 * (v994 >> 2)) & 0xEBBFDFDC) - 1977610222, a66 + v990 + 179478366, a67+ (v1069 ^ 0xEB1E9EFE)+ ((2 * v1069) & 0xD63D3DFC)+ ((v995 + 2039517572) ^ 0xB9EFFB6F)+ ((2 * (v995 + 2039517572)) & 0x73DFF6DE)+ 263422749, (v992 - 704943104));
}

uint64_t sub_19C605B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a67
                                                                                          + 8
                                                                                          * (a20 ^ (111
                                                                                                  * ((a21 & 1) == 0))))
                                                                              - ((11 * (a20 ^ 0x22B) - 555) | 0x231u)
                                                                              + 695))(a1, a2, a3, a4, 118);
}

uint64_t sub_19C605BAC@<X0>(char a1@<W4>, char a2@<W7>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _BYTE *a8, int a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  char v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  char v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;

  v68 = v65 + 1904699743;
  v69 = a3
      + 224500049
      - ((((v62 - 1050452154) & 0x3E9C9F7F) + 2 * (a3 + 224500049) + 1116064545) & 0xBAE5E6CA)
      + 2125846963;
  v70 = ((v68 + 233 * (v62 ^ 0x2B6) + 1099701214) ^ 0x43C3D3F3)
      - 440343992
      - 2
      * (((v68 + 233 * (v62 ^ 0x2B6) + 1099701214) ^ 0x43C3D3F3) & 0x65C0E24C ^ (v68 + 233 * (v62 ^ 0x2B6) + 1099701214) & 4);
  v71 = 2 * v68 - ((4 * v68 + 103840356) & 0xDD483F3C) + 1908169936;
  v72 = (v71 & 0x8787A7E6 ^ 0x7835B813) + ((2 * v71) & 0xD034F08 ^ 0xD000F08) + 21905515 + (v70 ^ 0xE5C0E248);
  v73 = ((((v69 ^ 0x5D72F365) >> ((-75 - (a2 & 0x10 | 0x82)) ^ 0x33))
        + 682976259
        - ((2 * ((v69 ^ 0x5D72F365) >> ((-75 - (a2 & 0x10 | 0x82)) ^ 0x33))) & 0x516AC806)) ^ 0x28B56403) >> ((-75 - (a2 & 0x10 | 0x82)) & 0x10);
  v74 = v73 - (a1 & (2 * v73));
  v75 = bswap32(v72);
  *a8 = (v75 - ((2 * v75) & 0xB0) - 40) ^ 0xD8;
  a8[1] = (BYTE1(v75) - ((v75 >> 7) & 0xC) - 122) ^ 0x86;
  v76 = HIBYTE(v75) - ((v75 >> 23) & 0x10);
  a8[2] = (BYTE2(v75) - ((v75 >> 15) & 0x3C) - 98) ^ 0x9E;
  a8[4] = HIBYTE(v69) ^ 0x5D;
  v77 = bswap32(v66 - 826765147);
  v78 = bswap32(v63 - 303425393);
  v79 = bswap32(v64 + 1211243245);
  a8[6] = ((unsigned __int16)(a3 - 26287 - ((((v62 + 24390) & 0x9F7F) + 2 * (a3 - 26287) - 13535) & 0xE6CA) - 9805) >> 8) ^ 0xF3;
  a8[3] = (v76 - 120) ^ 0x88;
  a8[5] = (v74 - 69) ^ 0xBB;
  a8[8] = (v77 - ((2 * v77) & 0x90) - 56) ^ 0xC8;
  a8[9] = (BYTE1(v77) - ((v77 >> 7) & 0x88) + 68) ^ 0x44;
  a8[7] = (a3 + 81 - ((((v62 + 70) & 0x7F) + 2 * (a3 + 81) + 33) & 0xCA) - 77) ^ 0x65;
  a8[10] = (BYTE2(v77) - ((v77 >> 15) & 0xD4) - 22) ^ 0xEA;
  a8[11] = (HIBYTE(v77) - ((v77 >> 23) & 0x82) - 63) ^ 0xC1;
  a8[12] = (v78 + (~(2 * v78) | 7) - 3) ^ 0xFC;
  a8[14] = (BYTE2(v78) - ((v78 >> 15) & 0x38) - 100) ^ 0x9C;
  a8[13] = (BYTE1(v78) - ((v78 >> 7) & 0x3E) - 97) ^ 0x9F;
  a8[16] = (v79 + (~(2 * v79) | 0x57) - 43) ^ 0xD4;
  a8[15] = ((~(v78 >> 23) | 0xF9) + HIBYTE(v78) - 124) ^ 0x83;
  a8[19] = (HIBYTE(v79) - (v67 & (v79 >> 23)) + 92) ^ 0x5C;
  a8[18] = (BYTE2(v79) - ((v79 >> 15) & 0x46) - 93) ^ 0xA3;
  a8[17] = (BYTE1(v79) - ((v79 >> 7) & 0xF4) - 6) ^ 0xFA;
  return ((uint64_t (*)(void))(*(_QWORD *)(a62 + 8 * (v62 ^ (1742 * (a10 & 1)))) - 4))();
}

void sub_19C605F94(char a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  LOBYTE(STACK[0x2E0]) = v12;
  LOBYTE(STACK[0x2E3]) = a3;
  LOBYTE(STACK[0x2E1]) = v13;
  LOBYTE(STACK[0x2E7]) = a4;
  LOBYTE(STACK[0x2E5]) = a8;
  LOBYTE(STACK[0x2E8]) = v15;
  LOBYTE(STACK[0x2E2]) = v14;
  LOBYTE(STACK[0x2EB]) = v16;
  LOBYTE(STACK[0x2EA]) = v11;
  LOBYTE(STACK[0x2E6]) = a7;
  LOBYTE(STACK[0x2E4]) = a1;
  LOBYTE(STACK[0x2E9]) = a2;
  LOBYTE(STACK[0x2F0]) = a6;
  LOBYTE(STACK[0x2F3]) = v17;
  LOBYTE(STACK[0x2F2]) = v18;
  LOBYTE(STACK[0x2EE]) = a5;
  LOBYTE(STACK[0x2F1]) = v19;
  LOBYTE(STACK[0x2EC]) = v10;
  LOBYTE(STACK[0x2ED]) = v9;
  LOBYTE(STACK[0x2EF]) = v8;
  JUMPOUT(0x19C5FAD34);
}

uint64_t sub_19C6060AC(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a64;
  uint64_t a66;

  LODWORD(a60) = a4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)(a66 + 8 * ((139 * (HIDWORD(a18) - 1868875200 < a64 + 1115 + 771 * ((a64 + 1168) ^ 0x749u) - 3420)) ^ (a64 + 1168))) - 4))(a1, 2591476754, 1422911874, 196, 278, 4175305098, 123413839, 368, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           __PAIR64__(a1, a6),
           __PAIR64__(a3, a2));
}

uint64_t sub_19C606188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a65 + 8 * (((((a9 - 965) | 0x434) - 1590) * (a20 == 1868875136)) ^ a9)) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11);
}

void sub_19C6061DC()
{
  JUMPOUT(0x19C5FADA8);
}

void sub_19C6061FC()
{
  LOBYTE(STACK[0x290]) = 98;
  JUMPOUT(0x19C606288);
}

void sub_19C6062F8()
{
  JUMPOUT(0x19C60629CLL);
}

void sub_19C606308(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = 402930427 * (a1 ^ 0x1AB9FCBD);
  v2 = *(_DWORD *)a1 + v1;
  v3 = (*(_BYTE *)(a1 + 16) ^ v1);
  ((void (*)(char *, void (*)()))off_1E3D64110[v2 ^ 0x388])((char *)off_1E3D64110[v2 - 766] - 12, sub_19C61CE44);
  v4 = *(_QWORD *)((char *)off_1E3D64110[v2 - 702] - 4);
  v6 = v2 + 1980347521 * (((&v5 | 0x8D433EA1) - (&v5 & 0x8D433EA1)) ^ 0x34A77E5C) + 120;
  v5 = v4;
  sub_19C5EEFA4((uint64_t)&v5);
  __asm { BR              X8 }
}

uint64_t sub_19C606420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16, char a17)
{
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  a17 = (-109 * (((&a16 ^ 0xFB) - 2 * ((&a16 ^ 0xFB) & 0x70) + 112) ^ 0x97)) ^ 0x37;
  a16 = 961177747
      * (((&a16 ^ 0x689A8DFB) - 2 * ((&a16 ^ 0x689A8DFB) & 0xB847EB70) - 1203246224) ^ 0xF78F9797)
      + v18
      + 427;
  sub_19C609244((uint64_t)&a16);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 + 8 * (((**(_DWORD **)(v20 + 8 * (v17 ^ 0x5D0)) == 0) * (((v17 ^ 0x163) - 277) ^ 0x33E)) ^ v17))
                                                                                                - 4))(v21, v22, v23, v24, v25, v26, v27);
}

uint64_t sub_19C6064D8@<X0>(int a1@<W8>)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t (*v13)(uint64_t, _BYTE *, _DWORD *);
  int v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  unsigned int v19;
  uint64_t result;
  uint64_t v21;
  _BYTE v22[30];
  _BYTE v23[140];

  v8 = *(unsigned int **)(v6 + 8 * (a1 ^ 0x20A));
  v9 = *(_QWORD *)(v6 + 8 * (a1 - 755));
  v10 = *v8;
  v11 = *(_BYTE **)(v9 - 4);
  v22[0] = *v11 - 74;
  v22[1] = v11[1] - 74;
  v22[2] = v11[2] - 74;
  v22[3] = v11[3] - 74;
  v22[4] = v11[4] - 74;
  v22[5] = v11[5] - 74;
  v22[6] = v11[6] - 74;
  v22[7] = v11[7] - 74;
  v22[8] = v11[8] - 74;
  v22[9] = v11[9] - 74;
  v22[10] = v11[10] - 74;
  v22[11] = v11[11] - 74;
  v22[12] = v11[12] - 74;
  v22[13] = v11[13] - 74;
  v22[14] = v11[14] - 74;
  v22[15] = v11[15] - 74;
  v22[16] = v11[16] - 74;
  v22[17] = v11[17] - 74;
  v22[18] = v11[18] - 74;
  v22[19] = v11[19] - 74;
  v22[20] = v11[20] - 74;
  v22[21] = v11[21] - 74;
  v12 = *(_BYTE **)(v9 - 4);
  v22[22] = v12[22] - 74;
  v22[23] = v12[23] - 74;
  v22[24] = v12[24] - 74;
  v22[25] = v12[25] - 74;
  v22[26] = v12[26] - 74;
  v22[27] = v12[27] - 74;
  v22[28] = v12[28] - 74;
  v22[29] = v12[29] - 74;
  v13 = *(uint64_t (**)(uint64_t, _BYTE *, _DWORD *))(v6 + 8 * (a1 - 784));
  v14 = v13(v10, v22, v2);
  v15 = ((2 * v14) & 0xFFFBBDFC) + (v14 ^ 0x7FFDDEFE);
  if (v15 != 2147344126)
  {
    if (v15 == 2147345228)
    {
      v16 = *v8;
      v17 = **(_BYTE ***)(v6 + 8 * (v4 ^ 0x3EA));
      v23[0] = *v17 - 5;
      v23[1] = v17[1] - 5;
      v23[2] = v17[2] - 5;
      v23[3] = v17[3] - 5;
      v23[4] = v17[4] - 5;
      v23[5] = v17[5] - 5;
      v23[6] = v17[6] - 5;
      v23[7] = v17[7] - 5;
      v23[8] = v17[8] - 5;
      v23[9] = v17[9] - 5;
      v23[10] = v17[10] - 5;
      v23[11] = v17[11] - 5;
      v23[12] = v17[12] - 5;
      v23[13] = v17[13] - 5;
      v23[14] = v17[14] - 5;
      v23[15] = v17[15] - 5;
      v23[16] = v17[16] - 5;
      v23[17] = v17[17] - 5;
      v23[18] = v17[18] - 5;
      v23[19] = v17[19] - 5;
      v18 = v13(v16, v23, v2);
      v19 = (2 * v18) & 0xBDFBD59C;
      v15 = (v18 ^ 0xDEFDEACE) + 1810849786;
    }
    else
    {
      v19 = -890278966;
    }
    __asm { BR              X8 }
  }
  *(_DWORD *)(v7 + 356) = ((*(_DWORD *)(v7 + 356) | 0xA)
                         - 647295315
                         + ((((*(_DWORD *)(v7 + 356) & 0x596B0EB5 | 2) ^ (*(_DWORD *)(v7 + 356) | 0x7FFFFFEF)) << (v4 - 26)) ^ 0x35)
                         + 1) ^ 0xD96B0EAD;
  *(_DWORD *)(v7 + 56) = 199845539;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _DWORD *))(v6 + 8 * (v4 ^ 0x32D)))(*v2, v7 + 344, v7 + 348, v7 + 352, v3);
  v21 = *(_QWORD *)(v1 + 8);
  *(_DWORD *)(*(_QWORD *)(v1 + 24) - 0x1999DED01FDB6F7ALL) = *v2;
  *(_DWORD *)(v21 - 0x6BE73BCCCB7EB823) = ((v4 + 277) ^ 0x72B) + *v3 - ((2 * *v3) & 0xE976D896) + 1958439216;
  *(_DWORD *)(v1 + 20) = 480950058;
  return result;
}

void sub_19C606964(uint64_t a1)
{
  int v1;
  _BOOL4 v4;

  v4 = *(_QWORD *)(a1 + 32) != 0x23F2B20168D9FD5
    && *(_QWORD *)a1 != 0x2EF0B0C65646C434
    && *(_QWORD *)(a1 + 24) != 0x8471747BBF054D0;
  v1 = *(_DWORD *)(a1 + 20) + 961177747 * (((a1 | 0x7F5A09C8) - (a1 & 0x7F5A09C8)) ^ 0x5808F8D4);
  __asm { BR              X9 }
}

uint64_t sub_19C606A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  int v21;
  uint64_t v22;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 + 8 * ((682 * (*(_DWORD *)(a21 - 0x23F2B20168D9FBDLL) == 480950058)) ^ v21)) - (v21 + 601) + 1710))(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_19C606AB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, int a7@<W8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  _BOOL4 v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v26 = *(_DWORD *)(a17 + 12) + a7;
  v27 = 6 * (v22 ^ 0x68D);
  LODWORD(v34) = a7 + *(_DWORD *)(a17 + 16) - 1844214458 + v27;
  if (v34 >= 0xFFFFFFFE)
    v28 = 1604891906;
  else
    v28 = 1604891918;
  *(_DWORD *)(v25 - 124) = v28;
  HIDWORD(v34) = *(_DWORD *)(a20 - 0x23F2B20168D9FC5);
  v29 = v26 - ((2 * v26 + 1954288040) & 0x402B56F6) + 1515435087;
  v30 = (HIDWORD(v34) + 1444750005) < 0x88D3EA7E;
  if (v30 == (v27 ^ 0x88D3EB1C) > 0x88D3EA7E)
    v30 = (HIDWORD(v34) + 1444750005) > 0x88D3EA7E;
  LODWORD(a18) = 43 * (v23 ^ 0x443);
  HIDWORD(a19) = HIDWORD(v34) + 1444750005;
  LODWORD(v32) = v29 ^ 0x3E;
  HIDWORD(v32) = (v29 >> 8) ^ 0xFFFFFFEE;
  LODWORD(v33) = HIWORD(v29) ^ 0x50;
  HIDWORD(v33) = HIBYTE(v29) ^ 0xFFFFFFE5;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 8 * ((200 * v30) ^ v27)))(a1, 445979082, a2, a3, a4, a5, a6, 1472956436, a8, a20 - 0x23F2B20168D9FC5, v32, v33, a12, a13, a14, v34, a16, a17, a18,
           a19,
           a20,
           v23 ^ 0x6B7u,
           a22,
           v23 ^ 0x45ELL);
}

uint64_t sub_19C606CEC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;

  v15 = a2 + a8 - 1918935518;
  v16 = *(unsigned __int8 *)(*v13 + v15);
  v17 = ((((v16 ^ v12) - ((2 * v16) & 0x24)) << 24) - 1845493760) ^ 0x92000000;
  v18 = *(unsigned __int8 *)(*v13 + v15 + 1) ^ v12;
  v19 = (((v18 + (~(2 * v18) | 0xFF99)) << 16) + 154402816) ^ 0x9330000;
  v20 = (v17 - 1243999419 - ((2 * v17) & 0x6A000000)) ^ 0xB5DA1345 | (v19 - 1967598374 - ((2 * v19) & 0x15700000)) ^ 0x8AB8D4DA;
  v21 = *(unsigned __int8 *)(*v13 + v15 + 2) ^ v12;
  v22 = (v8 + ((v21 - ((2 * v21) & 0x2C)) << 8)) ^ v8;
  v23 = (v20 + 1057246763 - ((2 * v20) & 0x7E089C56)) ^ 0x3F044E2B | (v22 + 2065703632 - ((2 * v22) & 0x76404400)) ^ 0x7B2022D0;
  v24 = *(unsigned __int8 *)(*v13 + v15 + 3);
  v25 = (v23 - 363555188 - ((2 * v23) & 0xD4A92D18)) ^ 0xEA54968C | ((v24 ^ v12) - 1154295272 - ((2 * v24) & 0x30)) ^ 0xBB32DA18;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v11 + 8 * (v10 - 1100)) - 4))(v25 + v9, v25 + v9 - ((2 * v25) & 0x39556E54), *(_DWORD *)(v14 - 128) & 0x20000000);
}

uint64_t sub_19C6074CC(int a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22)
{
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v32 = (a22 - 415);
  v33 = (v32 - 0x526600000000014BLL) ^ (((unint64_t)((a6 ^ v30) - ((2 * a6) & 0x134) + 44455) << 48)
                                      - 0xD000000000000);
  v34 = (((unint64_t)((a5 ^ v30) - 2 * ((a5 ^ v30) & 1) + 4) << 56)
       - 0x300000000000000) ^ 0x100000000000000;
  v35 = (v33 - 0x4245339EE17D12D0 - ((2 * v33) & 0x7B74000000000000)) ^ 0xBDBACC611E82ED30 | (v34
                                                                                                  - 0x1E341E473EAB87A3
                                                                                                  - ((2 * v34) & 0xC3FFFFFFFFFFFFFFLL)) ^ 0xE1CBE1B8C154785DLL;
  v36 = (((unint64_t)((a3 ^ v30) - ((2 * (a3 ^ v30)) & 0x11C) + 5632167) << 40)
       - 0x190000000000) ^ 0x55F08E0000000000;
  v37 = (v35 - 0x3DE15B831C6F9F40 - ((2 * v35) & 0x843D48F9C720C180)) ^ 0xC21EA47CE39060C0 | (v36
                                                                                                  - 0xA2706F5686A2991
                                                                                                  - ((2 * v36) & 0x6BB1F20000000000)) ^ 0xF5D8F90A9795D66FLL;
  v38 = (((unint64_t)((a1 ^ v30) - ((2 * a1) & 0x104) + 941993871) << 32) - 0xD00000000) ^ 0x3825AF8200000000;
  v39 = (v37 + 0x1681357E54323BBLL - ((2 * v37) & 0x2D026AFCA864776)) ^ 0x1681357E54323BBLL | (v38
                                                                                               - 0x4CD41C49DE4F66B5
                                                                                               - ((2 * v38) & 0x6657C76C00000000)) ^ 0xB32BE3B621B0994BLL;
  v40 = ((((v27 ^ v30) - ((2 * (v27 ^ v30)) & 0x196)) << 24) + 0xFF73E7DCB000000) ^ 0xFF73E7DCB000000;
  v41 = (v39 - 0x2C540E58126A2DLL - ((2 * v39) & 0xFFA757E34FDB2BA6)) ^ 0xFFD3ABF1A7ED95D3 | (v40
                                                                                                + 0x528C32943C22E3F8
                                                                                                - ((2 * v40) & 0x2518652878000000)) ^ 0x528C32943C22E3F8;
  v42 = ((((v26 ^ v30) - ((2 * (v26 ^ v30)) & 0xA6)) << 16) - 0x569E0A1B72AD0000) ^ 0xA961F5E48D530000;
  v43 = (v41 - 0x4D131DC85BB08351 - ((2 * v41) & 0x65D9C46F489EF95ELL)) ^ 0xB2ECE237A44F7CAFLL | (v42
                                                                                                  + 0x5197BF2246213623
                                                                                                  - ((2 * v42) & 0x232F7E448C420000)) ^ 0x5197BF2246213623;
  v44 = ((((v25 ^ v30) - ((2 * (v25 ^ v30)) & 0x146)) << 8) - 0x1F03F660E3F65D00) ^ 0xE0FC099F1C09A300;
  v45 = (v43 + 0x740F592E26AC6018 - ((2 * v43) & 0xE81EB25C4D58C030)) ^ 0x740F592E26AC6018 | (v44
                                                                                                  + 0x556668013ACA22C0
                                                                                                  - ((2 * v44) & 0x2ACCD00275944400)) ^ 0x556668013ACA22C0;
  v46 = (v45 - 0x538C4180C10B2D72 - ((2 * v45) & 0x58E77CFE7DE9A51CLL)) ^ 0xAC73BE7F3EF4D28ELL | ((v23 ^ v30)
                                                                                                  - 0x7E93861C4821B760
                                                                                                  - ((2 * (int)v23) & 0x140)) ^ 0x816C79E3B7DE48A0;
  v47 = (v24 - 1);
  v48 = (v47 | ((unint64_t)(v47 < a8) << 32)) - 751898609;
  LOBYTE(v41) = *(_BYTE *)((v46 ^ 0x9DBFCDFFC7FBF6FELL) + 0x6240320038040902 + ((2 * v46) & 0x3B7F9BFF8FF7EDFCLL) + v48);
  *(_BYTE *)(*v31 + v22 + v48) = v41 - ((2 * v41) & 0x8A) + 69;
  return (*(uint64_t (**)(void))(v29 + 8 * (int)((929 * ((_DWORD)v47 != (((a22 - 744) | v28) ^ (a8 - 1270)))) ^ v32)))();
}

uint64_t sub_19C607938()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((208 * (v0 != ((v1 - 1317) ^ 0x3FED4B0C))) ^ (v1 - 740))) - 8))();
}

uint64_t sub_19C607984@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W8>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;

  *(_BYTE *)(*v9 + (v5 + a3)) = *(_BYTE *)(*v9 + (v6 + a2));
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (((v3 + ((v4 - 769) | 0xC0) - 714 != v7) * a1) ^ v4)) - 8))();
}

uint64_t sub_19C6079D4@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9)
{
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _BOOL4 v13;

  *(_BYTE *)(*v12 + (v9 + a1)) = -59;
  v13 = v9 - 452143272 < (a9 + 1937023261);
  if ((a9 + 1937023261) < 0xF243B923 != v9 - 452143272 < (v10 - 230443599))
    v13 = (a9 + 1937023261) < 0xF243B923;
  return (*(uint64_t (**)(void))(v11 + 8 * ((170 * !v13) ^ v10)))();
}

uint64_t sub_19C607A50@<X0>(int a1@<W8>)
{
  unsigned int v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  _BOOL4 v12;

  v9 = v5 < v1;
  *(_BYTE *)(*v8 + (v2 + 1 + a1)) = 69;
  v10 = v2 + v4 + ((v3 + 1558548717) & 0xA31A6FFD);
  v11 = v9 ^ (v10 < v1);
  v12 = v10 < v5;
  if (!v11)
    v9 = v12;
  return (*(uint64_t (**)(void))(v7 + 8 * ((!v9 * v6) ^ v3)))();
}

void sub_19C607ABC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v6 - 0x2EF0B0C65646C434) = *v4;
  *(_DWORD *)(v7 - 0x8471747BBF054D0) = a4;
  *v4 = 0;
  *(_QWORD *)(v10 - 0x23F2B20168D9FCDLL) = 0x6C20E1706C20E170;
  *v5 = 850839497;
  *(_DWORD *)(v10 - 0x23F2B20168D9FC1) = ((*(_DWORD *)(v10 - 0x23F2B20168D9FC1) & 0xFFFFFFFE ^ 0x8601193E | 0x1270C490)
                                          - (*(_DWORD *)(v10 - 0x23F2B20168D9FC1) & 0xFFFFFFFE ^ 0x8601193E | 0xED8F3B6F)
                                          - 309380241) ^ 0x9471DDAE;
  *(_DWORD *)(v9 + 8) = *v8;
}

void sub_19C607BCC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24) + 1980347521 * ((((2 * a1) | 0x86F3B850) - a1 - 1132059688) ^ 0xFA9D9CD5);
  __asm { BR              X10 }
}

uint64_t sub_19C607CFC()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v5;

  v5 = *(_DWORD *)(v2 + 20) - v0 != 38189163 && *(_OWORD *)v2 != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((239 * v5) ^ v1)) - ((v1 - 894335967) & 0x354E776F ^ 0x103)))();
}

uint64_t sub_19C607D60()
{
  int v0;
  _QWORD *v1;
  uint64_t v2;
  int v3;
  _BOOL4 v5;

  v3 = v0 - 1135;
  v5 = v1[7] == 0x2800B519C6721999 || (v1[6] | v1[4]) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1133 * ((((v3 + 593) ^ v5) & 1) == 0)) ^ v3)) - 12))();
}

uint64_t sub_19C607DBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  int v20;
  uint64_t v21;

  return ((uint64_t (*)(uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v21 + 8 * ((((2 * v20) ^ 0x663) * (v19 == 0)) ^ v20)) - ((14 * (v20 ^ 0x368u)) ^ 0x2D0)))(a1, &STACK[0x26866D3AFFDFE0C1], a2, a3, a4, a5, a6, a7, a1, a10, a11, a12, a13, a14, a15, a16, a17, &STACK[0x26866D3AFFDFE0C1], a19,
           a8 - 0x423FD2BA70FB1A17);
}

uint64_t sub_19C607ED4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v48)(uint64_t);
  uint64_t v49;
  void (*v50)(uint64_t);
  void (*v51)(uint64_t);
  uint64_t v52;

  v36 = v28 + 791;
  v37 = 545147329 * ((2 * ((v35 - 144) & 0x342A1B68) - (v35 - 144) + 1272308880) ^ 0xEB2124FC);
  *(_QWORD *)(v35 - 136) = v33;
  *(_DWORD *)(v35 - 124) = (v28 - 64) ^ v37;
  *(_QWORD *)(v35 - 120) = v26;
  *(_DWORD *)(v35 - 144) = (v29 + 1020285068 + v28 + 791) ^ v37;
  v52 = a1 + v27;
  ((void (*)(uint64_t))(*(_QWORD *)(v30 + 8 * (v28 ^ 0x2F7)) - 4))(v35 - 144);
  HIDWORD(a12) = (v36 - 1517) | 0x109;
  HIDWORD(a10) = (v36 - 941098512) & 0x3818012B;
  LODWORD(a9) = v36 - 943;
  *(_QWORD *)(v35 - 144) = a21;
  *(_QWORD *)(v35 - 136) = a20;
  *(_DWORD *)(v35 - 128) = (v36 - 943) ^ (1001500783
                                        * (((v35 - 144) & 0xD46D5E07 | ~((v35 - 144) | 0xD46D5E07)) ^ 0x61265E4C));
  v51 = (void (*)(uint64_t))(*(_QWORD *)(v30 + 8 * (v36 - 1462)) - 4);
  v51(v35 - 144);
  HIDWORD(a7) = v36 - 979;
  *(_DWORD *)(v35 - 112) = v36
                         - 979
                         + 961177747
                         * ((1396034265 - ((v35 - 144) | 0x5335CAD9) + ((v35 - 144) | 0xACCA3526)) ^ 0x8B98C43A);
  *(_QWORD *)(v35 - 128) = v34;
  *(_QWORD *)(v35 - 120) = a20;
  *(_QWORD *)(v35 - 144) = a21;
  *(_QWORD *)(v35 - 136) = v33;
  v50 = (void (*)(uint64_t))(*(_QWORD *)(v30 + 8 * (v36 - 1298)) - 8);
  v50(v35 - 144);
  LODWORD(v49) = v36 + 210;
  *(_QWORD *)(v35 - 112) = v31;
  *(_QWORD *)(v35 - 104) = v34;
  *(_DWORD *)(v35 - 128) = v36
                         + 210
                         - 291962093
                         * ((-452633057 - ((v35 - 144) | 0xE5055E1F) + ((v35 - 144) | 0x1AFAA1E0)) ^ 0xB08ACAA);
  *(_QWORD *)(v35 - 144) = a21;
  *(_QWORD *)(v35 - 136) = v34;
  *(_QWORD *)(v35 - 120) = a20;
  v38 = *(void (**)(uint64_t))(v30 + 8 * (v36 - 1398));
  v38(v35 - 144);
  HIDWORD(v49) = v36 + 146;
  *(_DWORD *)(v35 - 144) = v36
                         + 146
                         - 291962093 * ((((v35 - 144) | 0xCDEEF093) + (~(v35 - 144) | 0x32110F6C)) ^ 0xDC1CFDD8);
  *(_QWORD *)(v35 - 120) = v34;
  *(_QWORD *)(v35 - 112) = a20;
  *(_QWORD *)(v35 - 136) = a21;
  *(_QWORD *)(v35 - 128) = v34;
  *(_QWORD *)(v35 - 104) = a13;
  v48 = *(void (**)(uint64_t))(v30 + 8 * (v36 - 1411));
  v48(v35 - 144);
  *(_DWORD *)(v35 - 128) = (v36 - 943) ^ (1001500783
                                        * ((815243602 - ((v35 - 144) | 0x3097A152) + ((v35 - 144) | 0xCF685EAD)) ^ 0x85DCA119));
  *(_QWORD *)(v35 - 144) = a21;
  *(_QWORD *)(v35 - 136) = a16;
  v51(v35 - 144);
  *(_DWORD *)(v35 - 112) = v36 - 979 + 961177747 * ((v35 - 144) ^ 0x2752F11C);
  *(_QWORD *)(v35 - 128) = a11;
  *(_QWORD *)(v35 - 120) = a16;
  *(_QWORD *)(v35 - 144) = a21;
  *(_QWORD *)(v35 - 136) = v33;
  v50(v35 - 144);
  *(_DWORD *)(v35 - 128) = v36
                         + 210
                         - 291962093
                         * ((((v35 - 144) | 0x990B0FA8) - (v35 - 144) + ((v35 - 144) & 0x66F4F050)) ^ 0x88F902E2);
  *(_QWORD *)(v35 - 112) = v31;
  *(_QWORD *)(v35 - 104) = a11;
  *(_QWORD *)(v35 - 144) = a21;
  *(_QWORD *)(v35 - 136) = a11;
  *(_QWORD *)(v35 - 120) = a16;
  v38(v35 - 144);
  *(_QWORD *)(v35 - 112) = a16;
  *(_QWORD *)(v35 - 104) = a14;
  *(_QWORD *)(v35 - 136) = a21;
  *(_QWORD *)(v35 - 128) = a11;
  *(_DWORD *)(v35 - 144) = v36
                         + 146
                         - 291962093
                         * ((-1789737638 - ((v35 - 144) | 0x9552C55A) + ((v35 - 144) | 0x6AAD3AA5)) ^ 0x7B5F37EF);
  *(_QWORD *)(v35 - 120) = a11;
  v48(v35 - 144);
  *(_QWORD *)(v35 - 136) = a11;
  *(_QWORD *)(v35 - 128) = v34;
  *(_DWORD *)(v35 - 144) = (v36 - 295) ^ (1575213817
                                        * (((((v35 - 144) | 0x7CE8C98) ^ 0xFFFFFFFE) - (~(v35 - 144) | 0xF8317367)) ^ 0x7554C3AB));
  ((uint64_t (*)(uint64_t))((char *)off_1E3D64110[v36 & 0xE4FFEADD] - 4))(v35 - 144);
  *(_QWORD *)(v35 - 144) = a11;
  *(_DWORD *)(v35 - 132) = v36
                         + 1431787901 * (((v35 - 144) & 0xF5B77B45 | ~((v35 - 144) | 0xF5B77B45)) ^ 0x21D82E6D)
                         + 501;
  sub_19C619F90(v35 - 144);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, void (*)(uint64_t), uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 + 8 * ((28 * (*(_DWORD *)(v35 - 136) - 24851040 >= (HIDWORD(a10) + HIDWORD(a12) + 366093421))) ^ v36)) - 8))(v39, v40, v41, v42, v43, v44, v45, v46, a2, v33, v48, v49, v50, a7, v51, a9, a10, a11, a12,
           v38,
           (char *)off_1E3D64110[v36 ^ 0x51B] - 12,
           v52,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           v34,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_19C608430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void (*a20)(uint64_t),void (*a21)(uint64_t),uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v51;
  uint64_t v52;
  int v53;

  v46 = v41 + 1462;
  v47 = v41;
  *(_DWORD *)(v45 - 128) = v41
                         + 1462
                         - 291962093 * ((((v45 - 144) | 0xE792B4EB) - ((v45 - 144) & 0xE792B4EB)) ^ 0xF660B9A1);
  *(_QWORD *)(v45 - 144) = a28;
  *(_QWORD *)(v45 - 136) = v44;
  v52 = v41 ^ 0x23Eu;
  v51 = v41 + 554;
  v53 = v41 + 1293;
  *(_QWORD *)(v45 - 120) = v43;
  *(_QWORD *)(v45 - 112) = a41;
  *(_QWORD *)(v45 - 104) = v44;
  a20(v45 - 144);
  *(_QWORD *)(v45 - 120) = v43;
  *(_QWORD *)(v45 - 112) = v44;
  *(_QWORD *)(v45 - 104) = a22;
  *(_QWORD *)(v45 - 144) = a28;
  *(_QWORD *)(v45 - 136) = v44;
  *(_DWORD *)(v45 - 128) = v46
                         - 291962093
                         * ((((v45 - 144) ^ 0xD4ADD39D | 0x3D705D2D) - (((v45 - 144) ^ 0xD4ADD39D) & 0x3D705D2D)) ^ 0xF82F83FA);
  a20(v45 - 144);
  v48 = 2 * (v45 - 144);
  *(_DWORD *)(v45 - 128) = v47 + 1001500783 * (((v48 | 0x636F0BF4) - (v45 - 144) - 834110970) ^ 0x7B037A4E) + 459630764;
  *(_QWORD *)(v45 - 144) = v44;
  *(_QWORD *)(v45 - 136) = a27;
  sub_19C61D7A4(v45 - 144);
  *(_DWORD *)(v45 - 136) = (v47 + 128) ^ (1305237457
                                        * ((1247189337 - ((v45 - 144) | 0x4A569959) + ((v45 - 144) | 0xB5A966A6)) ^ 0xC10C068));
  *(_QWORD *)(v45 - 128) = a29;
  *(_QWORD *)(v45 - 144) = v44;
  a21(v45 - 144);
  *(_QWORD *)(v45 - 136) = a29;
  *(_QWORD *)(v45 - 128) = v44;
  *(_DWORD *)(v45 - 144) = v47 + 1305237457 * (((v48 | 0xE4C38250) - (v45 - 144) + 228474584) ^ 0x4BD867E6) + 154;
  v49 = sub_19C5B3D5C(v45 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v42 + 8 * (((v51 ^ 0x36E) * (a26 != 0)) ^ v53)) - v52 + 813))(v49);
}

uint64_t sub_19C6086A8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v4 = 402930427 * ((((v3 - 144) | 0x8A88D9F5) + (~(v3 - 144) | 0x7577260A)) ^ 0x90312549);
  *(_DWORD *)(v3 - 144) = v4 + v7 + 473653855 + ((v0 + 565) | 0x10);
  *(_DWORD *)(v3 - 124) = v0 - v4 - 125;
  *(_QWORD *)(v3 - 136) = v8;
  *(_QWORD *)(v3 - 120) = v2;
  result = ((uint64_t (*)(uint64_t))((char *)off_1E3D64110[v0 ^ 0x36A] - 4))(v3 - 144);
  *(_DWORD *)(v6 - 0x2800B519C6721999) = v7;
  *(_DWORD *)(v1 + 16) = 480950058;
  return result;
}

void sub_19C608818(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 ^ (1431787901 * ((2 * (a1 & 0x5EC99DAE) - (_DWORD)a1 - 1590271407) ^ 0x8AA6C886));
  __asm { BR              X9 }
}

uint64_t sub_19C6088F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8)
{
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;

  v14 = v13 - 518 + *(_DWORD *)(a1 + 16) + v12 + *(_DWORD *)(v8 - 0x23F2B20168D9FC5);
  v15 = 1980347521 * ((&a5 & 0x9174A69 | ~(&a5 | 0x9174A69)) ^ 0x4F0CF56B);
  a7 = v8;
  a8 = v14 + v15 - 1630131566;
  a6 = v15 ^ 0x56D1B5EB;
  a5 = (v13 + 1009) ^ v15;
  v16 = ((uint64_t (*)(int *))(*(_QWORD *)(a2 + 8 * (v13 ^ 0x3AD)) - 12))(&a5);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v11 + 8 * ((114 * (*v10 == v9)) ^ v13)) - 12))(v16);
}

uint64_t sub_19C6089CC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((*(_QWORD *)(v0 + 8) == 0x566016E7416088D8) * (((v1 + 518) ^ 0x6A7) - 1426)) ^ v1)))();
}

uint64_t sub_19C608A10()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((((v0 - 1423) | 0x555) - 1287) * (v1 == 1564105161)) ^ v0)) - 12))();
}

void sub_19C608A44(int a1@<W8>)
{
  char v1;
  uint64_t v2;
  _DWORD *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  v5 = (a1 & 0xBFFFFFFF ^ 0x5F83706B)
     - (((a1 & 0xBFFFFFFF ^ 0x5F83706B) & 0x1F83707F ^ a1 & 0x14) << (v1 - 92))
     + 528707691;
  v6 = *(_QWORD *)(v2 - 0x23F2B20168D9FD5);
  v7 = *v3 - 850839497;
  *(_BYTE *)(v6 + v7) = HIBYTE(v5) ^ 0x5A;
  *(_BYTE *)(v6 + v7 + 1) = BYTE2(v5) ^ 0xC6;
  *(_BYTE *)(v6 + v7 + 2) = BYTE1(v5) ^ 0x35;
  *(_BYTE *)(v6 + v7 + 3) = v5 ^ 0x2E;
  v8 = *(_QWORD *)(v2 - 0x23F2B20168D9FD5);
  v9 = v4 - ((2 * v4 + 1166756974) & 0x402B56F6) + 1121669554;
  v10 = *v3 - 850839497;
  *(_BYTE *)(v8 + (*v3 - 850839493)) = HIBYTE(v9) ^ 0xE5;
  *(_BYTE *)(v8 + (v10 + 5)) = BYTE2(v9) ^ 0x50;
  *(_BYTE *)(v8 + (v10 + 6)) = BYTE1(v9) ^ 0xEE;
  *(_BYTE *)(v8 + (v10 + 7)) = (v4 - ((2 * v4 + 110) & 0xF6) - 78) ^ 0x3E;
  *v3 = v11 - 1564105451;
}

uint64_t sub_19C608C28(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  _DWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = 653146051 * (((a1 | 0xEDD5F45) - (a1 & 0xEDD5F45)) ^ 0xA4C9EAA7);
  v5 = a1[6] ^ v4;
  v6 = a1[4] + v4;
  v10[1] = (961177747 * (v10 ^ 0x2752F11C)) ^ (v5 + 638444691);
  result = nullsub_1(v10, a2, a3);
  if (v6 > 151537284)
  {
    if (v6 == 436749956)
    {
      v8 = 3;
    }
    else
    {
      if (v6 != 151537285)
        goto LABEL_11;
      v8 = 1;
    }
LABEL_10:
    v9 = *((_QWORD *)off_1E3D64110[v5 ^ 0x617BA340]
         + ((27
           * (((v5 + 116) ^ (((uint64_t (*)(_QWORD, uint64_t))off_1E3D64110[v5 ^ 0x617BA3FF])((*((_DWORD *)off_1E3D64110[v5 - 1635492578] + 6 * v8 + 3)- 1055960901), 3511634213) == 0)) & 1)) ^ (v5 - 1635492242)))- 8;
    __asm { BR              X9 }
  }
  if (v6 == 151537281)
  {
    v8 = 0;
    goto LABEL_10;
  }
  if (v6 == 151537284)
  {
    v8 = 2;
    goto LABEL_10;
  }
LABEL_11:
  a1[10] = -480908138;
  return result;
}

void sub_19C609244(uint64_t a1)
{
  int v1;

  v1 = 961177747 * ((((2 * a1) | 0x785733A2) - a1 + 1137993263) ^ 0x9B7968CD);
  __asm { BR              X10 }
}

uint64_t sub_19C6092F0()
{
  int v0;
  int v1;
  _DWORD *v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((*v2 == v0 + v1) * ((((v0 ^ 0x66F) - 41) | 0x42) ^ 0x2A9)) ^ v0 ^ 0x66F))
                            - 8))();
}

uint64_t sub_19C609348()
{
  int v0;
  _DWORD *v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((617 * (*v1 != 0)) ^ v0)) - 8))();
}

uint64_t sub_19C60936C()
{
  int v0;
  int v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD, _QWORD);
  unsigned int *v5;
  int v6;
  uint64_t v7;

  v6 = (v1 - 638) | 0x482;
  v7 = v4(*v5, (v6 ^ 0xFB10E59F) + v0);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * ((617 * (*v2 != 0)) ^ v6)) - 8))(v7);
}

uint64_t sub_19C6093B4()
{
  int v0;
  uint64_t v1;
  _DWORD *v2;
  uint64_t (*v3)(_QWORD);
  unsigned int *v4;
  uint64_t result;

  result = v3(*v4);
  *v2 = 0;
  *(_DWORD *)v1 = v0 + 1222;
  *(_QWORD *)(v1 + 344) = 0;
  *(_QWORD *)(v1 + 352) = 0;
  *(_DWORD *)(v1 + 360) = 245464089;
  *(_DWORD *)(v1 + 56) = 199845539;
  return result;
}

void sub_19C6093FC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32) - 402930427 * ((-2 - ((a1 | 0x6DB78327) + (~(_DWORD)a1 | 0x92487CD8))) ^ 0x88F18065);
  __asm { BR              X14 }
}

uint64_t sub_19C609500@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11)
{
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;

  v14 = v12 + a9;
  if (v14 >= 0)
    v15 = v14;
  else
    v15 = -v14;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 8 * (((((38 * ((v11 + 140) ^ 0x495)) ^ 0x9C) + 8) * (v15 < 0x83)) ^ (v11 + 140))) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11);
}

uint64_t sub_19C609548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_DWORD *a27)
{
  int v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t (*v30)(uint64_t, uint64_t, _QWORD);

  *a27 = -80827941;
  if (a8 > 0x4D92D3F0 != (int)((v27 + 730) ^ 0xB26D2A4B) > 846015504)
    v29 = (int)((v27 + 730) ^ 0xB26D2A4B) > 846015504;
  else
    v29 = (int)(a8 + 846015503) < 846015504;
  v30 = (uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v28 + 8 * ((1408 * v29) ^ v27)) - 12);
  return v30(a1, 1408, v30);
}

void sub_19C609618()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v2 + v1) = v0;
}

void sub_19C60AC98(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 24) - 1431787901 * ((-2 - ((a1 | 0xCA778890) + (~(_DWORD)a1 | 0x3588776F))) ^ 0x1E18DDB8);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) - 0x26866D3AFFDFE015) - 1323025765 >= 0)
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0x26866D3AFFDFE015) - 1323025765;
  else
    v3 = 1323025765 - *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0x26866D3AFFDFE015);
  v2 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 - 0x26866D3AFFDFE015) - 1323025765 >= 0)
    v4 = *(_DWORD *)(v2 - 0x26866D3AFFDFE015) - 1323025765;
  else
    v4 = 1323025765 - *(_DWORD *)(v2 - 0x26866D3AFFDFE015);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = v1 + 1431787901 * (&v6 ^ 0x2B90AAD7) + 567;
  sub_19C619F90((uint64_t)&v6);
  if (v3 >= v4)
    v5 = (v4 ^ 0xF37AB93E) + 1862270950 + ((2 * v4) & 0xE6F5727C);
  else
    v5 = (v3 ^ 0x7E7ABDE5) - 469763265 + ((2 * v3) & 0xFCF57BCA);
  __asm { BR              X9 }
}

uint64_t sub_19C60AE54@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _BOOL4 v13;

  v9 = 4 * (v7 - 8845867 + ((v8 - 669) | 0x424) - 1843);
  v10 = *(_DWORD *)(*(_QWORD *)(a2 - 0x26866D3AFFDFE011) + v9) ^ 0xFB2EA9DB;
  v11 = *(_DWORD *)(*(_QWORD *)(a3 - 0x26866D3AFFDFE011) + v9) ^ 0xFB2EA9DB;
  v12 = v6 + (v10 ^ 0xBFD7E897) + ((2 * v10) & 0x7FAFD12E) + (v11 ^ 0x40010B0A) - ((2 * v11) & 0x7FFDE9EA);
  *(_DWORD *)(*(_QWORD *)(a5 - 0x26866D3AFFDFE011) + v9) = v12
                                                           + 749680053
                                                           - ((2 * (v12 + 749680053) - 1533489970) & 0xF65D53B6)
                                                           + 1299910722;
  v13 = a1 + 474057435 < -21216257;
  if (v13 == v7 + 2117421526 < -21216257)
    v13 = v7 + 2117421526 < a1 + 474057435;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((16 * !v13) | (32 * !v13)) ^ (v8 - 16))) - 8))();
}

uint64_t sub_19C60B010()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  _BOOL4 v4;

  v4 = v2 + 1440573352 < (int)(v3 + 1449419218);
  if (v2 + 1440573352 < -698064430 != v3 > ((v1 + 1869527691) & 0x90913F57 ^ 0x299B9F3A))
    v4 = v3 > ((v1 + 1869527691) & 0x90913F57 ^ 0x299B9F3A);
  return (*(uint64_t (**)(void))(v0 + 8 * ((!v4 * ((v1 + 1869527691) ^ 0x6F6EC1CA)) ^ v1)))();
}

uint64_t sub_19C60B09C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  uint64_t v14;
  int v15;
  int v16;
  _BOOL4 v17;

  v17 = v16 + 458751987 < (int)((v15 ^ 0x1BDEFB0A) + a14);
  if (a14 > 0x642105E2 != v16 + 458751987 < -1679885795)
    v17 = a14 > 0x642105E2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * ((!v17 * ((v15 ^ 0x1E1) - 233)) ^ v15)) - 12))();
}

uint64_t sub_19C60B11C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8 * (((v1 != 0x5216E2F812B7042) * (((v2 - 204) | 0x2B6) ^ 0x6B4)) | v2))
                            - 8))();
}

uint64_t sub_19C60B160()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((275 * ((v2 - 8845867) < 0x7FFFFFFF)) ^ (v1 - 711)))
                            - 197 * ((v1 + 217) ^ 0x5A4u)
                            + 1761))();
}

uint64_t sub_19C60B634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;

  return ((uint64_t (*)(void))(*(_QWORD *)(v13
                                        + 8
                                        * ((13
                                          * (((*(_DWORD *)(*(_QWORD *)(a12 - 0x26866D3AFFDFE011)
                                                         + 4 * (v15 + v14)) == v16) ^ (((v12 + 19) ^ 0xAD) + 96)) & 1)) | (v12 - 1261)))
                            - 12))();
}

uint64_t sub_19C60B690()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1248 * (v3 + v2 - 1 < (v0 ^ 0x7A0u) + 2147482194)) ^ v0)) - 12))();
}

uint64_t sub_19C60B6DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((13
                                          * (((*(_DWORD *)(a1 + 4 * (v4 + v3)) == v5) ^ ((v2 ^ 0x7D) + 96)) & 1)) | v2 ^ 0x22D0))
                            - 12))();
}

void sub_19C60B724()
{
  int v0;
  int v1;
  int v2;
  int v3;
  uint64_t v4;

  v3 = v1 - 390944995 + (v1 - 390944995) * (v0 + v2);
  *(_DWORD *)(v4 - 0x26866D3AFFDFE015) = (v3 ^ 0x4FFBDDEF) - 18880650 + ((2 * v3) & 0x9FF7BBDE);
}

void sub_19C60B7B4(uint64_t a1)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  _BOOL4 v4;
  BOOL v5;

  v2 = (*(_QWORD *)(a1 + 32) ^ 0x687C75D37FFFFF2FLL)
     - 0x687C75D33FE1B984
     + ((2 * *(_QWORD *)(a1 + 32)) & 0xD0F8EBA6FFFFFE5ELL);
  v3 = (*(_QWORD *)(a1 + 24) ^ 0xBBFFEFD7DBEFE1DFLL)
     + 0x44001028642E63CCLL
     + ((2 * *(_QWORD *)(a1 + 24)) & 0x77FFDFAFB7DFC3BELL);
  v4 = v2 < 0x401E45AB;
  v5 = v2 > v3;
  if (v4 != v3 < 0x401E45AB)
    v5 = v4;
  v1 = *(_DWORD *)(a1 + 4) - 583844137 * ((a1 & 0xC436EEB7 | ~(a1 | 0xC436EEB7)) ^ 0x2B17ACC5);
  __asm { BR              X16 }
}

uint64_t sub_19C60B998(int a1, int a2)
{
  int v2;
  uint64_t v3;
  _BOOL4 v4;

  v4 = (a1 ^ 0x1BCDF5B6) + 1065352179 + (a2 & 0xFDB66EBE ^ 0xC8240492) != 1046164306;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v2 ^ ((2 * v4) | (16 * v4)))) - (v2 - 336) + 527))();
}

uint64_t sub_19C60B9FC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v9 = (v6 - 1);
  v10 = (v9 | ((unint64_t)(v9 < v5) << 32)) - 1046164306;
  *(_BYTE *)(v8 + v10) = *(_BYTE *)(v0 + v10) ^ (49 * (v1 ^ 0x60)) ^ *(_BYTE *)(v3 + (v10 & 0xF)) ^ *(_BYTE *)(v4 + (v10 & 0xF)) ^ *(_BYTE *)((v10 & 0xF) + v2 + 2) ^ (-73 * (v10 & 0xF)) ^ 0x5E;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((2 * ((_DWORD)v9 != v5)) | (16 * ((_DWORD)v9 != v5))) ^ v1))
                            - 12))();
}

uint64_t sub_19C60BA84(int a1, int a2)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((1956
                                          * ((a1 ^ 0x3EE93D13) + v2 - 336 + 278104180 + (a2 & 0xB7FFFFF4 ^ 0x822D85D0) != -325875063)) ^ v2))
                            - 12))();
}

uint64_t sub_19C60BAF8(unsigned int a1, int a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  unint64_t v13;

  v12 = a1 < v8;
  v13 = (a3 | ((unint64_t)(a3 < ((v4 - 1199392972) & 0x477D477B ^ v9)) << 32)) - 2019577426;
  *(_BYTE *)(v11 + v13) = *(_BYTE *)(v3 + v13) ^ *(_BYTE *)(v6 + (v13 & 0xF)) ^ *(_BYTE *)(v7 + (v13 & 0xF)) ^ *(_BYTE *)((v13 & 0xF) + v5 + 2) ^ (-73 * (v13 & 0xF)) ^ 0x45;
  if (v12 == a3 + 1949514808 < v8)
    v12 = a3 + 1949514808 < a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((v12 * a2) ^ v4)) - 12))();
}

uint64_t sub_19C60BBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  int v43;

  v41 = *(_QWORD *)(v37 + 16);
  *(int8x16_t *)(v40 - 112) = veorq_s8(*(int8x16_t *)(*(_QWORD *)(v37 + 40) - 0xFD04FB326B69BB7), (int8x16_t)xmmword_19CAED6C0);
  if (v39)
    v42 = v41 == 0x7B9A35B3D63327D6;
  else
    v42 = 1;
  v43 = !v42;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 8 * ((286 * v43) ^ v36)))(a1, v41 - 0x7B9A35B3D63327D6, a3, a4, a5, a6, a7, a8, a9, a10, v37, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36);
}

uint64_t sub_19C60BC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45)
{
  int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  _BOOL4 v50;

  v47 = (v45 + 2048355476) & 0x85E897FA;
  v48 = (((a45 ^ 0xFCFFBD9A) + v47) ^ (a12 - 1697718021)) + ((2 * (a12 - 1697718021)) & 0xF9FF7E98);
  v50 = v48 != -50348212 && ((v48 + 4) & 0xF) + (v47 ^ 0x392) - 839 + (~(2 * (v48 + 4)) | 0xFFFFFFF5) == 496;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 + 8 * (int)((25 * v50) ^ v47)) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36);
}

uint64_t sub_19C60BCE8@<X0>(unsigned __int8 *a1@<X1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  char *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  char *v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  char *v80;
  unsigned int v81;
  unsigned int v82;
  char *v83;
  uint64_t (*v84)(uint64_t);
  int v85;
  uint64_t (*v86)(uint64_t);
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  int v114;
  int v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  BOOL v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  unint64_t v133;
  int v134;
  int v135;
  int v136;
  unsigned int v137;
  int v138;
  char *v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  uint64_t (*v144)(uint64_t);
  int v145;
  unsigned int v146;
  unsigned int v147;
  char *v148;
  int v149;
  unsigned int v150;
  int v151;
  int v152;
  int v153;
  char *v154;
  int v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  int v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  unsigned int v184;
  int v185;
  int v186;
  int v187;
  unsigned int v188;
  unsigned __int8 *v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  int v193;
  unsigned int v194;
  int v195;
  char *v196;
  int v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  int v201;
  unsigned int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  unsigned int v210;
  int v211;
  int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  int v218;
  int v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  unsigned int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  unsigned int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  char *v238;
  char *v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  unsigned int v247;
  int v248;
  int v249;
  char *v250;
  char *v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  int v259;
  int v260;
  unsigned int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  unsigned int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  int v277;
  unsigned int v278;
  unsigned int v279;
  int v280;
  int v281;
  int v282;
  unsigned int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  int v292;
  unsigned int v293;
  int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  unsigned int v307;
  int v308;
  int v309;
  unsigned int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  unsigned int v322;
  int v323;
  int v324;
  int v325;
  unsigned int v326;
  unsigned int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  int v339;
  int v340;
  unsigned int v341;
  int v342;
  unsigned int v343;
  int v344;
  int v345;
  unsigned int v346;
  unsigned int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  unsigned int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  unsigned int v358;
  int v359;
  int v360;
  unsigned int v361;
  unsigned int v362;
  int v363;
  int v364;
  unsigned int v365;
  unsigned int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  int v371;
  int v372;
  int v373;
  unsigned int v374;
  int v375;
  unsigned int v376;
  unsigned int v377;
  int v378;
  int v379;
  unsigned int v380;
  unsigned int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  int v389;
  int v390;
  int v391;
  int v392;
  int v393;
  unsigned int v394;
  int v395;
  int v396;
  unsigned int v397;
  unsigned int v398;
  int v399;
  uint64_t (*v400)(uint64_t);
  unsigned int v401;
  char *v402;
  int v403;
  int v404;
  char *v405;
  uint64_t v406;
  int v407;
  int v408;
  uint64_t (*v409)(uint64_t);
  int v410;
  int v411;
  int v412;
  int v413;
  uint64_t v414;
  char *v415;
  char *v416;
  int v417;
  unsigned int v418;
  char *v419;
  uint64_t v420;
  char *v421;
  uint64_t v422;
  int v423;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  char *v430;
  char *v431;
  char *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  int v449;
  int v450;
  int v451;
  unsigned int v452;
  int v453;
  int v454;
  int v455;
  uint64_t v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;

  v456 = v19;
  v22 = v17 + 1220;
  v23 = (char *)off_1E3D64110[v17 ^ 0x17D] - 8;
  v24 = v23[*(unsigned __int8 *)(v18 - 0x7B9A35B3D63327D1) ^ 0xBELL];
  v25 = ((((v24 ^ 1) + ((v17 + 1220) ^ 0xA74C) - ((2 * v24) & 0x1B8)) << 16) - 1900544) ^ 0xA1DC0000;
  v26 = v25 - ((2 * v25) & 0x60CC0000);
  v27 = (char *)off_1E3D64110[v17 ^ 0x1F2] - 4;
  HIDWORD(v28) = v27[*(unsigned __int8 *)(v18 - 0x7B9A35B3D63327C8) ^ 0x3ELL];
  LODWORD(v28) = (HIDWORD(v28) ^ 0xA6) << 24;
  v29 = (v28 >> 25) + (~(2 * (v28 >> 25)) | 0xFFFFFFC5) - 98;
  v30 = ((((((v28 >> 25) + (~(2 * (v28 >> 25)) | 0xC5) - 98) ^ 0x25) - ((2 * v29) & 0x90)) << 8)
       + 1745438720) ^ 0x68094800;
  v31 = v23[*(unsigned __int8 *)(v18 - 0x7B9A35B3D63327CDLL) ^ 0x94] ^ 0xD2;
  v32 = (((v31 - ((2 * v31) & 0x19A)) << 16) - 1462960128) ^ 0xA8CD0000;
  v33 = v32 - ((2 * v32) & 0x6C1A0000);
  v34 = (char *)off_1E3D64110[v17 - 367] - 8;
  LOBYTE(v32) = v34[*(unsigned __int8 *)(v18 - 0x7B9A35B3D63327D3) ^ 0x11];
  v35 = ((2 * v32) & 0xBF ^ 0x16) + (v32 ^ 0x74);
  v36 = (v35 + 33) % 0x47u;
  v37 = ((v36 ^ 0x6E) + ((2 * v36) & 0xDD) - 68);
  v38 = (v35 + (v36 ^ 0x40) - ((2 * v36) & 0x7E) + 35);
  HIDWORD(v28) = v27[*(unsigned __int8 *)(v18 - 0x7B9A35B3D63327D4) ^ 4];
  LODWORD(v28) = (HIDWORD(v28) ^ 0xA6) << 24;
  v39 = ((((((v28 >> 25) - ((2 * (v28 >> 25)) & 0x72) - 71) ^ 0xB8)
         - ((2 * (((v28 >> 25) - ((2 * (v28 >> 25)) & 0x72) - 71) ^ 0xB8)) & 0x1EC)) << 8)
       - 328731136) ^ 0xEC67F600;
  v40 = (v39 - ((2 * v39) & 0x1F9D2E00) - 808544377) ^ 0xCFCE9787 | (v37
                                                                   + v38
                                                                   + ((v37 < 0x2A) << 8)
                                                                   + ((v38 < 0x42) << 8)
                                                                   - 108);
  v41 = (char *)off_1E3D64110[v17 - 403] - 12;
  v42 = v41[*a1 ^ 0x31];
  HIDWORD(v28) = ~v42;
  LODWORD(v28) = (v42 ^ 0xF0) << 24;
  v43 = ((v28 >> 27) - ((2 * (v28 >> 27)) & 0xF4) + 122) ^ 0xB2;
  v44 = (((v43 + (~(2 * v43) | 0xA3)) << 24) + 788529152) ^ 0x2E000000;
  v45 = (v40 - ((2 * v40) & 0x544C1C1C) - 1440346610) ^ 0xAA260E0E | (v44 - ((2 * v44) & 0xC3FFFFFF) - 505769883) ^ 0xE1DA9065;
  v46 = v45 - ((2 * v45) & 0x2FC6E1B0);
  v47 = v34[*(unsigned __int8 *)(v18 - 0x7B9A35B3D63327C7) ^ 0xF3];
  v48 = ((v47 ^ 0x69) - 2 * ((v47 ^ 0x69) & 1) + 8775681) ^ 0x85E801 | (v30 - ((2 * v30) & 0x71E2AE00) - 118401232) ^ 0xF8F15730;
  v49 = v48 - ((2 * v48) & 0xC35FAC2);
  v50 = v34[*(unsigned __int8 *)(v18 - 0x7B9A35B3D63327CFLL) ^ 0xE6] ^ 0x8F;
  v51 = (v50 + 1157412954 + (~(2 * v50) | 0xFFFFFF4B) + 1) ^ 0x44FCB85A | (v26 - 261713394) ^ 0xF066920E;
  v52 = v41[*(unsigned __int8 *)(v18 - 0x7B9A35B3D63327CELL) ^ 0x68];
  HIDWORD(v28) = ~v52;
  LODWORD(v28) = (v52 ^ 0xF0) << 24;
  v53 = ((v28 >> 27) - ((2 * (v28 >> 27)) & 0xD4) + 106) ^ 0xAB;
  v54 = (((v53 - ((2 * v53) & 0xFFFFFFC3)) << 24) + 1627389952) ^ 0x61000000;
  v55 = (v54 - ((2 * v54) & 0x68000000) + 876850506) ^ 0x3443AD4A | (v33 + 906853052) ^ 0x360D7ABC;
  HIDWORD(v28) = v27[*(unsigned __int8 *)(v18 - 0x7B9A35B3D63327D0) ^ 0x9CLL];
  LODWORD(v28) = (HIDWORD(v28) ^ 0xA6) << 24;
  v56 = ((v28 >> 25) - ((2 * (v28 >> 25)) & 0xBE) - 33) ^ 0x37;
  v57 = (((v56 - ((2 * v56) & 0x1E8)) << 8) - 1683885056) ^ 0x9BA1F400;
  v58 = v27[*(unsigned __int8 *)(v18 - 0x7B9A35B3D63327CCLL) ^ 0xD5];
  v59 = (v57 - ((2 * v57) & 0x18692400) + 1278513889) ^ 0x4C3492E1 | (v51 - ((2 * v51) & 0x10798B52) + 138200489) ^ 0x83CC5A9;
  LODWORD(v27) = v59 - ((2 * v59) & 0x63B1051E);
  HIDWORD(v28) = v58;
  LODWORD(v28) = (v58 ^ 0xA6) << 24;
  v60 = ((((((v28 >> 25) - 2 * ((v28 >> 25) & 7) - 121) ^ 0x3D)
         - ((2 * (((v28 >> 25) - 2 * ((v28 >> 25) & 7) - 121) ^ 0x3D)) & 0x8C)) << 8)
       + 152126976) ^ 0x9114600;
  v61 = (v55 - ((2 * v55) & 0x85D3582E) - 1024873449) ^ 0xC2E9AC17 | (v60 - ((2 * v60) & 0x78502A00) - 1138223706) ^ 0xBC2815A6;
  LODWORD(v34) = v34[*(unsigned __int8 *)(v18 - 0x7B9A35B3D63327CBLL) ^ 0xE9] ^ 0x66;
  v62 = (v61 - 639557056 + (~(2 * v61) | 0x4C3DBB7F) + 1) ^ 0xD9E12240 | ((_DWORD)v34
                                                                        - ((2 * (_DWORD)v34) & 0xF4)
                                                                        + 1240196474) ^ 0x49EBE57A;
  LODWORD(v34) = v41[*(unsigned __int8 *)(v18 - 0x7B9A35B3D63327D2) ^ 0x32];
  v63 = v62 - ((2 * v62) & 0x5491A1AC) + 709415126;
  HIDWORD(v28) = ~(_DWORD)v34;
  LODWORD(v28) = (v34 ^ 0xF0) << 24;
  v64 = ((v28 >> 27) - ((2 * (v28 >> 27)) & 0x1C) + 14) ^ 0x33;
  v65 = (((v64 + (~(2 * v64) | 0x35)) << 24) + 1711276032) ^ 0x65000000;
  v66 = (v65 - ((2 * v65) & 0x7C000000) + 1055508466) ^ 0x3EE9C7F2 | ((_DWORD)v27 + 836272783) ^ 0x31D8828F;
  v67 = v66 - ((2 * v66) & 0x240B666C) + 302363446;
  v68 = v41[*(unsigned __int8 *)(v18 - 0x7B9A35B3D63327CALL) ^ 0xD5];
  HIDWORD(v28) = ~v68;
  LODWORD(v28) = (v68 ^ 0xF0) << 24;
  LODWORD(v27) = (v28 >> 27) - ((2 * (v28 >> 27)) & 0x30) + 24;
  v69 = ((((v27 ^ 0xFD) - ((2 * (v27 ^ 0xFD)) & 0x92)) << 24) - 922746880) ^ 0xC9000000;
  v70 = v23[*(unsigned __int8 *)(v18 - 0x7B9A35B3D63327C9) ^ 0x33] ^ 0x77;
  v71 = v70 - 2 * (v70 & 0xF) - 331550449;
  v72 = (v69 - ((2 * v69) & 0x74000000) - 1168114982) ^ 0xBA5FFADA | (((v71 << 16) ^ 0xF10F0000)
                                                                    - ((2 * ((v71 << 16) ^ 0xF10F0000)) & 0x11920000)
                                                                    + 147454929) ^ 0x8C9FBD1;
  v73 = (v72 - ((2 * v72) & 0x570B7A24) - 1417298670) ^ 0xAB85BD12 | (v49 - 971309727) ^ 0xC61AFD61;
  v74 = v73 + 1141775761 + (~(2 * v73) | 0x77E3C4DF);
  v75 = v23[*(unsigned __int8 *)(v18 - 0x7B9A35B3D63327D5) ^ 0x48] ^ 0x37;
  v76 = (((v75 - ((2 * v75) & 0x26)) << 16) + 1527971840) ^ 0x5B130000;
  v77 = (v76 - ((2 * v76) & 0x65980000) - 221488428) ^ 0xF2CC5AD4 | (v46 - 1746702120) ^ 0x97E370D8;
  v78 = (v77 - ((2 * v77) & 0x67CCCE54) - 1276745942) ^ 0x71547CD1;
  v79 = v71 ^ 0xEC3CF1F8;
  v80 = (char *)off_1E3D64110[v17 ^ 0x14F] - 12;
  LODWORD(v27) = *(_DWORD *)&v80[4 * (v27 ^ 0x73)];
  HIDWORD(v28) = v27 ^ 0x31;
  LODWORD(v28) = v27 ^ 0x133C6E00;
  v81 = v74 ^ 0x9E33D5E9;
  v82 = (v74 ^ 0x4C | 0xA9E2D91D) - (v74 ^ 0x4C | 0x561D26E2) + 1444751074;
  v83 = (char *)off_1E3D64110[v17 - 294] - 8;
  v84 = off_1E3D64110[v17 ^ 0x135];
  v85 = *(_DWORD *)&v83[4 * v79] ^ *((_DWORD *)v84 + (v47 ^ 0x7C));
  v86 = off_1E3D64110[v17 - 469];
  v453 = v78;
  v87 = v85 ^ *((_DWORD *)v86 + (v29 ^ 0x90u)) ^ ((v28 >> 8)
                                                                 - ((2 * (v28 >> 8)) & 0xD123F50A)
                                                                 + 1754397317) ^ ((v82 & 0xA980C018)
                                                                                + (v82 ^ 0xEB83C91F)
                                                                                - ((v82 ^ 0xEB83C91F) & 0x2010018)
                                                                                + 68944896) ^ 0x669E1F06 ^ v78;
  v454 = v67;
  v452 = v81;
  v449 = v87 ^ v67 ^ v63;
  v88 = v449 ^ v81;
  v89 = *(_DWORD *)&v80[4 * (((v449 ^ v81) >> 24) ^ 0xAE)];
  HIDWORD(v28) = v89 ^ 0x31;
  LODWORD(v28) = v89 ^ 0x133C6E00;
  v90 = (v87 ^ v67 ^ v63 ^ v81);
  v91 = (v90 ^ 0x2A0A021B) + ((v449 ^ v81) & 0x9C ^ 0x15A51D84) - ((v90 ^ 0x2A0A021B) & 0x2200029C);
  v92 = ((v90 ^ 0x46 | 0x6004053B) - (v90 ^ 0x46 | 0x9FFBFAC4) - 1610876220) ^ 0x4314061A;
  v451 = v87;
  HIDWORD(v447) = *((_DWORD *)v84 + (((v92 | 0xAEB85437) - (v92 | 0x5147ABC8) + 1363651528) ^ 0x8DA857E8)) ^ *((_DWORD *)v86 + (BYTE1(v88) ^ 0x9Au)) ^ *(_DWORD *)&v83[4 * (((BYTE2(v88) ^ 0xCF | 0x273ADE3B) - (BYTE2(v88) ^ 0xCF | 0xD8C521C4) - 658169404) ^ 0x273ADE94)] ^ ((v28 >> 8) - ((2 * (v28 >> 8)) & 0x2B325D5C) - 1785123154) ^ v87 ^ v91;
  v448 = v449 ^ v81 ^ 0x54D76B01;
  v455 = v63;
  v93 = HIDWORD(v447) ^ 0xA04261D ^ v63;
  v94 = v93 ^ v448;
  v95 = *(_DWORD *)&v80[4 * (((v93 ^ v448) >> 24) ^ 0xEE)];
  HIDWORD(v28) = v95 ^ 0x31;
  LODWORD(v28) = v95 ^ 0x133C6E00;
  v450 = v87 ^ v67;
  HIDWORD(v445) = HIDWORD(v447) ^ 0xA04261D ^ v87 ^ v67;
  LODWORD(v446) = *((_DWORD *)v84 + (v94 ^ 0x2Bu)) ^ *(_DWORD *)&v83[4
                                                                                    * (((BYTE2(v94) ^ 0xD7)
                                                                                      + (HIWORD(v94) & 0xF5 ^ 0xC4DDFF20)
                                                                                      - ((BYTE2(v94) ^ 0xD7) & 0xF5)) ^ 0xC4DDFF6D)] ^ *((_DWORD *)v86 + ((((v94 >> 8) & 0x9E ^ 0x3EC03591) + ((v94 >> 8) & 0x61 ^ 0x80020021) - 1) ^ 0xBEC2350C)) ^ HIDWORD(v447) ^ 0xA04261D ^ ((v28 >> 8) - ((2 * (v28 >> 8)) & 0x79DC36F2) - 1125246087) ^ ((v94 ^ 0x34420AA4) + (v94 & 0x3A ^ 0xABCA41A) - ((v94 ^ 0x34420AA4) & 0x442023A));
  LODWORD(v445) = v446 ^ 0x8E6DE7DD ^ HIDWORD(v445);
  LODWORD(v447) = v93;
  HIDWORD(v444) = v445 ^ 0x44234559 ^ v93;
  v96 = HIDWORD(v444) ^ 0xA70AE78F;
  v97 = *(_DWORD *)&v80[4 * (((HIDWORD(v444) ^ 0xA70AE78F ^ v93 ^ v448) >> 24) ^ 0x5F)];
  HIDWORD(v28) = v97 ^ 0x31;
  LODWORD(v28) = v97 ^ 0x133C6E00;
  v98 = ((HIDWORD(v444) ^ 0xA70AE78F ^ v93 ^ v448) >> 16) ^ 0x88404051;
  LODWORD(v444) = HIDWORD(v444) ^ 0xA70AE78F ^ v93 ^ v448;
  v99 = ((((v96 ^ v94) >> 8) & 0xC2)
       + (((unsigned __int16)(v96 ^ v94) >> 8) ^ 0xFFFFFFC2)
       + (((unsigned __int16)(v96 ^ v94) >> 8) | 0xFF9A273D)
       + 1) ^ 0xFD9A08B1;
  HIDWORD(v443) = *((_DWORD *)v86 + ((v99 - ((2 * v99) & 0x1E76D8FC) - 818189186) ^ 0xCD3B434C)) ^ *((_DWORD *)v84 + ((((2 * ((v96 ^ v94) ^ 0x252EBDC2)) & 0x401D4AB4) - ((v96 ^ v94) ^ 0x252EBDC2) + 387979941) ^ 0x320EA784u)) ^ *(_DWORD *)&v83[4 * (((v98 | 0xF1E2E2EB) - (v98 | 0xE1D1D14) + 236789012) ^ 0x79A2A2CF)] ^ ((v28 >> 8) - ((2 * (v28 >> 8)) & 0x2538481A) + 312222733) ^ v446 ^ 0x8E6DE7DD ^ (((v96 ^ v94) & 0x42 ^ 0xEC7D0C03) + ((v96 ^ v94) & 0xBD) - 1);
  LODWORD(v443) = HIDWORD(v443) ^ 0x9DB6CBC7 ^ v445 ^ 0x44234559;
  HIDWORD(v446) = v94;
  v100 = v443 ^ 0x104CA99A ^ v94;
  v101 = ((BYTE2(v100) ^ 0x8E) - ((v100 >> 15) & 0xA0) - 1913606576) ^ 0x956A0E50;
  v102 = ((v443 ^ 0x9A ^ v94 ^ 0x7C)
        - ((2 * (v443 ^ 0x9A ^ v94 ^ 0x7C)) & 0x19C)
        + 2011564750) ^ 0x67E710CA;
  v103 = *(_DWORD *)&v80[4 * (HIBYTE(v100) ^ 4)];
  HIDWORD(v28) = v103 ^ 0x31;
  LODWORD(v28) = v103 ^ 0x133C6E00;
  v104 = *((_DWORD *)v86 + (((unsigned __int16)(v443 ^ 0xA99A ^ v94) >> 8) ^ 0x8Bu)) ^ *((_DWORD *)v84 + (v443 ^ 0x9A ^ v94 ^ 0x62u)) ^ ((v28 >> 8) - ((2 * (v28 >> 8)) & 0x9A32C7B4) - 853974054) ^ *(_DWORD *)&v83[4 * ((((2 * v101) | 0x981BD27E) - v101 + 871503553) ^ 0xD49749F4)] ^ HIDWORD(v443) ^ 0x9DB6CBC7 ^ (v102 - ((2 * v102) & 0x243E) - 1445292513) ^ 0x74B92AF6;
  v105 = v443 ^ 0x104CA99A ^ HIDWORD(v444) ^ 0xA70AE78F;
  LODWORD(v441) = v104 ^ v443 ^ 0x104CA99A;
  HIDWORD(v442) = v100;
  HIDWORD(v440) = v441 ^ 0xD1519A2F ^ v105;
  v106 = HIDWORD(v440) ^ v100;
  v107 = ((v106 & 0xBB ^ 0x8D04F008) + (v106 & 0x44 ^ 0x41) - 1) ^ 0xFECC19D;
  v108 = *(_DWORD *)&v80[4 * (HIBYTE(v106) ^ 0x25)];
  HIDWORD(v28) = v108 ^ 0x31;
  LODWORD(v28) = v108 ^ 0x133C6E00;
  HIDWORD(v441) = v105;
  LODWORD(v442) = v104;
  v109 = *((_DWORD *)v84 + ((((2 * v107) & 0x10030A2) - v107 + 2137728942) ^ 0xFD831636)) ^ *((_DWORD *)v86
                                                                                            + (((BYTE1(v106) ^ 0xC0016474 | 0xCB4E29C0)
                                                                                              - (BYTE1(v106) ^ 0xC0016474 | 0x34B1D63F)
                                                                                              + 884069951) ^ 0xB4F4DC6)) ^ *(_DWORD *)&v83[4 * (((HIWORD(v106) & 0x7E ^ 0x2A400047) - (HIWORD(v106) & 0x81) + 277023360) ^ 0x3AC30A7C)] ^ ((v28 >> 8) - ((2 * (v28 >> 8)) & 0x11FA5ED4) - 1996673174) ^ v104 ^ v106 ^ 0x51ECCF86;
  LODWORD(v439) = v109 ^ v105;
  v110 = v109 ^ v105 ^ 0xFAC7DF94;
  LODWORD(v440) = v106;
  v111 = v110 ^ v106;
  v112 = *(_DWORD *)&v80[4 * (((v110 ^ v106) >> 24) ^ 0x82)];
  HIDWORD(v28) = v112 ^ 0x31;
  LODWORD(v28) = v112 ^ 0x133C6E00;
  v113 = (((2 * (BYTE2(v111) ^ 0xF2)) | 0x8E49FA90) - (BYTE2(v111) ^ 0xF2) - 1193606472) ^ 0xD6ADDD49;
  v114 = (v110 ^ v106);
  HIDWORD(v439) = v109;
  HIDWORD(v437) = v109 ^ v441 ^ 0xD1519A2F;
  LODWORD(v438) = *(_DWORD *)&v83[4 * ((v113 - ((2 * v113) & 0x3B2AF07C) - 1651148738) ^ 0xC1C5865)] ^ *((_DWORD *)v86 + ((((v111 >> 8) & 0x2E ^ 0x2125) + ((v111 >> 8) & 0xD1) - 1) ^ 0x21AE)) ^ *((_DWORD *)v84 + (((v114 ^ 0x77) - ((2 * (v114 ^ 0x77)) & 0x92) + 585) ^ 0x2E8u)) ^ ((v28 >> 8) - ((2 * (v28 >> 8)) & 0xDD58A15E) + 1856786607) ^ v109 ^ ((((v111 & 0x40) + (v114 ^ 0xAA075D)) | 0x78548000) - ((v114 ^ 0xAA075D) & 0x200140));
  LODWORD(v437) = v438 ^ 0xF5B4847A ^ HIDWORD(v437);
  HIDWORD(v436) = v437 ^ 0xEE41FF1B ^ v110;
  v115 = HIDWORD(v436) ^ 0xFAE63A9;
  HIDWORD(v438) = v110 ^ v106;
  v116 = HIDWORD(v436) ^ 0xFAE63A9 ^ v110 ^ v106;
  v117 = *(_DWORD *)&v80[4 * (HIBYTE(v116) ^ 0xEA)];
  HIDWORD(v28) = v117 ^ 0x31;
  LODWORD(v28) = v117 ^ 0x133C6E00;
  v118 = ((2 * (BYTE2(v116) ^ 0x90)) & 0x14C) - (BYTE2(v116) ^ 0x90) - 1447643815;
  v119 = ((BYTE1(v116) ^ 0xC2) + ((v116 >> 8) & 0x6E ^ 0x2038EE2C) - ((BYTE1(v116) ^ 0xC2) & 0x6E)) ^ 0x277CFE8A;
  v120 = BYTE4(v436) ^ 0xA9 ^ v111;
  v121 = ((2 * (v120 ^ 0x98)) | 0x1CE996EE) - (v120 ^ 0x98) - 242535287;
  HIDWORD(v435) = *((_DWORD *)v86 + ((((2 * v119) & 0xC800330) - v119 + 152335975) ^ 0xE50669Eu)) ^ *(_DWORD *)&v83[4 * (((v118 & 0xA034319A ^ 0x4600010A) + (v118 ^ 0xB13C74D1) - ((v118 ^ 0xB13C74D1) & 0x1008019A)) ^ 0xEEB6F0BE)] ^ *((_DWORD *)v84 + (((v120 ^ 0xD) - ((2 * (v120 ^ 0xD)) & 0x2A) + 16661) ^ 0x41B0u)) ^ ((v28 >> 8) - ((2 * (v28 >> 8)) & 0x4039B37A) - 1608721987) ^ v438 ^ 0xF5B4847A ^ ((v121 & 0x4700B61 ^ 0xB0881301) + (v121 & 0xA04C49E ^ 0x9004007) - 1);
  v122 = HIDWORD(v435) ^ 0xCCEFFE41;
  v123 = HIDWORD(v435) ^ 0xCCEFFE41 ^ v437 ^ 0xEE41FF1B;
  v124 = v123 ^ 0x5639B37C ^ HIDWORD(v436) ^ 0xFAE63A9;
  v125 = (2 * (v124 & 0x2000)) ^ 0x4000 | v124 & 0x2000;
  v126 = ((v125 - 0x2000) & (v116 ^ 0x6BDD7E65)) == ((2 * ((v125 - 0x2000) & (v116 ^ 0x6BDD7E65))) & 0x6F88BF18);
  v127 = v125 + 1533528700;
  v128 = 1533545084 - v125;
  if (v126)
    v128 = v127;
  LODWORD(v436) = v116;
  HIDWORD(v434) = v123 ^ 0x5639B37C ^ HIDWORD(v436) ^ 0xFAE63A9;
  v129 = ((v116 ^ 0xCD2E2623)
        - 1533536892
        + v128
        - ((2 * ((v116 ^ 0xCD2E2623) - 1533536892 + v128)) & 0x7F8D38D6)
        + 1069980779) ^ v124 & 0xFFFFDFFF;
  v130 = ((unsigned __int16)(((v116 ^ 0x2623)
                                             + 5508
                                             + v128
                                             - ((2 * ((v116 ^ 0x2623) + 5508 + v128)) & 0x38D6)
                                             - 25493) ^ v124 & 0xDFFF) >> 8) ^ 0x8528C088;
  v131 = ((BYTE2(v129) ^ 0x59) + (HIWORD(v129) & 0x14 ^ 0xE0C2C204) - ((BYTE2(v129) ^ 0x59) & 0x14)) ^ 0xCD15E3F0;
  v132 = *(_DWORD *)&v80[4 * (HIBYTE(v129) ^ 0x73)];
  HIDWORD(v133) = v132 ^ 0x31;
  LODWORD(v133) = v132 ^ 0x133C6E00;
  HIDWORD(v433) = *(_DWORD *)&v83[4 * (((v131 | 0xED5E18F4) - (v131 | 0x12A1E70B) + 312600331) ^ 0xC0893934)] ^ *((_DWORD *)v86 + ((((v129 >> 8) & 8) + v130 - (v130 & 0x428C008) + 986972928) ^ 0xBBD4032F)) ^ *((_DWORD *)v84 + (((v129 & 0x30 ^ 0xCE200311) + (v129 & 0xCF) - 1) ^ 0xCE200392)) ^ ((v133 >> 8) - ((2 * (v133 >> 8)) & 0x403B3D7A) - 1608671555) ^ v122 ^ v129;
  LODWORD(v434) = v129;
  v134 = HIDWORD(v433) ^ 0x32000F8 ^ v115;
  v135 = (v83[4 * (((v131 | 0xED5E18F4) - (v131 | 0x12A1E70B) + 312600331) ^ 0xC0893934)] ^ *((_BYTE *)v86 + 4 * ((((v129 >> 8) & 8) + v130 - (v130 & 0x428C008) + 986972928) ^ 0xBBD4032F)) ^ *((_BYTE *)v84 + 4 * (((v129 & 0x30 ^ 0xCE200311) + (v129 & 0xCF) - 1) ^ 0xCE200392)) ^ (BYTE1(v133) - ((2 * BYTE1(v133)) & 0x7A) - 67) ^ v122 ^ v129) ^ 0xF8 ^ v115 ^ v129;
  v136 = *(_DWORD *)&v80[4 * (((v134 ^ v129) >> 24) ^ 9)];
  HIDWORD(v133) = v136 ^ 0x31;
  LODWORD(v133) = v136 ^ 0x133C6E00;
  v137 = ((BYTE1(v134) ^ BYTE1(v129)) ^ 0x9B | 0x26AFCB4D)
       - ((BYTE1(v134) ^ BYTE1(v129)) ^ 0x9B | 0xD95034B2)
       - 649055054;
  HIDWORD(a17) = v134 ^ v129 ^ 0x72B05F6;
  v138 = *((_DWORD *)v84 + (((v135 ^ 0xC6 | 0xD9F95260) - (v135 ^ 0xC6 | 0x2606AD9F) + 637971871) ^ 0xD9F95256)) ^ *(_DWORD *)&v83[4 * (((v134 ^ v129) >> 16) ^ 0x99)] ^ ((v133 >> 8) - ((2 * (v133 >> 8)) & 0x25BAF0BE) - 1830979489) ^ *((_DWORD *)v86 + (((v137 & 0x62801D3 ^ 0x40101112) + (v137 ^ 0xBE2FEAC5) - ((v137 ^ 0xBE2FEAC5) & 0x1D3)) ^ 0xDEB830F4));
  v139 = (char *)off_1E3D64110[v17 - 337] - 12;
  v140 = v139[*(unsigned __int8 *)(v21 - 108) ^ 0x4BLL];
  HIDWORD(v133) = v140 ^ 4;
  LODWORD(v133) = (v140 ^ 0xC0) << 24;
  v141 = v138 ^ ((v135 ^ 0x3A0270BB | 0x23D92381) - (v135 ^ 0x3A0270BB | 0xDC26DC7E) - 601432962) ^ 0xC99F6DA5;
  v142 = ((v133 >> 29) - ((2 * (v133 >> 29)) & 0xB2) + 89) ^ 0x78;
  v143 = ((v142 - ((2 * v142) & 0x30)) << 24) - 1744830464;
  v144 = off_1E3D64110[v17 ^ 0x17B];
  v145 = *((unsigned __int8 *)v144 + (*(unsigned __int8 *)(v21 - 107) ^ 0x48)) ^ 0xAA;
  v146 = (((v145 - ((2 * v145) & 0xC)) << 16) - 754581504) ^ 0xD3060000;
  v147 = ((v143 ^ 0x98000000) + (v143 >> 30 << 31) - 1069888525) ^ 0xC03ACBF3 | (v146
                                                                               - ((2 * v146) & 0x12CC0000)
                                                                               - 916009566) ^ 0xC966CDA2;
  v148 = (char *)off_1E3D64110[v17 ^ 0xE9] - 8;
  v149 = (((((v148[*(unsigned __int8 *)(v21 - 106) ^ 0xCELL] - 30) ^ 0x85)
          - ((2 * ((v148[*(unsigned __int8 *)(v21 - 106) ^ 0xCELL] - 30) ^ 0x85)) & 0x17A)) << 8)
        + 671530240) ^ 0x2806BD00;
  v150 = (v147 - ((2 * v147) & 0xAB617036) + 1437644827) ^ 0x55B0B81B | (v149 - ((2 * v149) & 0x4CE7E400) + 1718874669) ^ 0x6673F22D;
  v151 = v139[*(unsigned __int8 *)(v21 - 100) ^ 0xE9];
  HIDWORD(v133) = v151 ^ 4;
  LODWORD(v133) = (v151 ^ 0xC0) << 24;
  v152 = ~(2 * (v133 >> 29)) + (v133 >> 29);
  v153 = ((((v152 ^ 0xC6) - ((2 * v152) & 0x72)) << 24) + 956301312) ^ 0x39000000;
  v154 = (char *)off_1E3D64110[v17 ^ 0x160] - 12;
  v155 = v154[*(unsigned __int8 *)(v21 - 105) ^ 0xD1];
  HIDWORD(v133) = v155 ^ 1;
  LODWORD(v133) = ~v155 << 24;
  v156 = (v150 - ((2 * v150) & 0x23697F90) + 297058248) ^ 0x11B4BFC8 | ((((v133 >> 31)
                                                                                         - ((2 * (v133 >> 31)) & 0x7C)
                                                                                         + 62) ^ 0xFC)
                                                                      - ((2
                                                                        * (((v133 >> 31)
                                                                          - ((2 * (v133 >> 31)) & 0x7C)
                                                                          + 62) ^ 0xFC)) & 0xB0)
                                                                      - 142103208) ^ 0xF787AD58;
  v157 = v148[*(unsigned __int8 *)(v21 - 110) ^ 0x53];
  v158 = (v157 - 2 * ((v157 + 34) & 0x2B ^ v157 & 1) - 116) ^ 0xB4;
  v159 = (((v158 - ((2 * v158) & 0x196)) << 8) - 1941058816) ^ 0x8C4DCB00;
  v160 = v148[*(unsigned __int8 *)(v21 - 98) ^ 0x9FLL];
  v161 = (v160 - ((2 * v160 + 68) & 0x54) - 116) ^ 0xA8;
  v162 = (((v161 - ((2 * v161) & 0x134)) << 8) + 1405983232) ^ 0x53CD9A00;
  v163 = (v162 - ((2 * v162) & 0x9768400) + 1153123034) ^ 0x44BB42DA | (v153 - ((2 * v153) & 0xD6000000) - 342833476) ^ 0xEB90C6BC;
  v164 = v163 - ((2 * v163) & 0xCFADB854);
  v165 = *((unsigned __int8 *)v144 + (*(unsigned __int8 *)(v21 - 111) ^ 0x31)) ^ 0x6D;
  v166 = (v159 - ((2 * v159) & 0x186C5A00) + 204877062) ^ 0xC362D06 | ((v165 << 16)
                                                                     - ((v165 << 17) & 0x1080000)
                                                                     - 1249583030) ^ 0xB584E04A;
  v167 = v139[*(unsigned __int8 *)(v21 - 112) ^ 0x3FLL];
  HIDWORD(v133) = v167 ^ 4;
  LODWORD(v133) = (v167 ^ 0xC0) << 24;
  v168 = ((v133 >> 29) - ((2 * (v133 >> 29)) & 0x8A) + 69) ^ 0xEC;
  v169 = (((v168 - ((2 * v168) & 0xFFFFFF9F)) << 24) - 822083584) ^ 0xCF000000;
  v170 = (v169 - ((2 * v169) & 0xF3FFFFFF) - 110306275) ^ 0xF96CDC1D | (v166 - ((2 * v166) & 0x656655D0) + 850602728) ^ 0x32B32AE8;
  v171 = v170 - ((2 * v170) & 0xBF90AB50);
  v431 = v148;
  v172 = (v148[*(unsigned __int8 *)(v21 - 102) ^ 0x7DLL]
        - ((2 * v148[*(unsigned __int8 *)(v21 - 102) ^ 0x7DLL] - 60) & 0xE8)
        - 42) ^ 0xCE;
  v173 = (((v172 - ((2 * v172) & 0x74)) << 8) + 731068928) ^ 0x2B933A00;
  v432 = v139;
  v174 = v139[*(unsigned __int8 *)(v21 - 104) ^ 0x1ALL];
  HIDWORD(v133) = v174 ^ 4;
  LODWORD(v133) = (v174 ^ 0xC0) << 24;
  v175 = ((v133 >> 29) - ((2 * (v133 >> 29)) & 0x6C) + 54) ^ 0x76;
  v176 = (((v175 - ((2 * v175) & 0xFFFFFFDF)) << 24) + 1862270976) ^ 0x6F000000;
  v177 = (v176 - ((2 * v176) & 0x3E000000) - 1615960390) ^ 0x9FAE66BA | (v173 - ((2 * v173) & 0x1533CE00) - 895883284) ^ 0xCA99E7EC;
  v178 = v154[*(unsigned __int8 *)(v21 - 97) ^ 0x68];
  HIDWORD(v133) = v178 ^ 1;
  LODWORD(v133) = ~v178 << 24;
  v179 = (v164 - 405349334) ^ 0xE7D6DC2A | ((((v133 >> 31) - ((2 * (v133 >> 31)) & 8) - 124) ^ 0x84)
                                          - ((2 * (((v133 >> 31) - ((2 * (v133 >> 31)) & 8) - 124) ^ 0x84)) & 0xFA)
                                          - 1325122179) ^ 0xB1043D7D;
  v180 = v154[*(unsigned __int8 *)(v21 - 101) ^ 0xD7];
  HIDWORD(v133) = v180 ^ 1;
  LODWORD(v133) = ~v180 << 24;
  v181 = (v177 - ((2 * v177) & 0x7E8CE1BC) + 1061581022) ^ 0x3F4670DE | ((((v133 >> 31)
                                                                                          - ((2 * (v133 >> 31)) & 0x2E)
                                                                                          + 23) ^ 0x17)
                                                                       - ((2
                                                                         * (((v133 >> 31)
                                                                           - ((2 * (v133 >> 31)) & 0x2E)
                                                                           + 23) ^ 0x17)) & 0x16C)
                                                                       + 752039094) ^ 0x2CD334B6;
  v182 = *((unsigned __int8 *)v144 + (*(unsigned __int8 *)(v21 - 103) ^ 0xD6));
  v183 = ((((v182 ^ 0x4C) - ((2 * v182) & 4)) << 16) + 1073872896) ^ 0x40020000;
  v184 = (v181 - ((2 * v181) & 0x2D227802) + 378616833) ^ 0x16913C01 | (v183 - ((2 * v183) & 0xF2280000) + 2031413388) ^ 0x7914E88C;
  v430 = v154;
  v185 = v154[*(unsigned __int8 *)(v21 - 109) ^ 0x60];
  HIDWORD(v133) = v185 ^ 1;
  LODWORD(v133) = ~v185 << 24;
  v186 = ((((v133 >> 31) - ((2 * (v133 >> 31)) & 0x32) - 103) ^ 0x73)
        - ((2 * (((v133 >> 31) - ((2 * (v133 >> 31)) & 0x32) - 103) ^ 0x73)) & 0xB2)
        - 1648281767) ^ 0x9DC13759 | (v171 - 540519000) ^ 0xDFC855A8;
  LODWORD(v139) = ((((*((unsigned __int8 *)v144 + (*(unsigned __int8 *)(v21 - 99) ^ 0x86)) ^ 0x4A)
                   - ((2 * *((unsigned __int8 *)v144 + (*(unsigned __int8 *)(v21 - 99) ^ 0x86))) & 0x68)) << 16)
                 - 617349120) ^ 0xDB340000;
  LODWORD(v139) = ((_DWORD)v139 - ((2 * (_DWORD)v139) & 0x64000000) - 234849916) ^ 0xF2007984 | (v179
                                                                                               - ((2 * v179) & 0x535F5D4)
                                                                                               + 43711210) ^ 0x29AFAEA;
  *(_DWORD *)(v21 - 256) = (v186 - ((2 * v186) & 0x9423552) - 2069816663) ^ 0xF25CAF68;
  v459 = (v156 - ((2 * v156) & 0x1A1B1296) - 1928492725) ^ 0x9E263196;
  v458 = ((_DWORD)v139 - ((2 * (_DWORD)v139) & 0x3CF5838) - 2115523556) ^ 0x9A4BA683;
  v457 = (v184 - ((2 * v184) & 0x8C35F900) + 1176173696) ^ 0x1B78E354;
  HIDWORD(v429) = a2 + 50348212;
  LODWORD(v435) = HIDWORD(v435) ^ 0xCCEFFE41 ^ v437 ^ 0xEE41FF1B;
  HIDWORD(v428) = HIDWORD(v433) ^ 0x32000F8 ^ v123 ^ 0x5639B37C;
  LODWORD(v429) = v123 ^ 0x86E35094 ^ v141;
  LODWORD(v428) = v141 ^ HIDWORD(v433) ^ 0x32000F8;
  LODWORD(v433) = v134;
  HIDWORD(v427) = v134 ^ 0x9156996F ^ v429;
  LODWORD(v427) = v22 & 0x3107B1A4;
  HIDWORD(v426) = v22 ^ 0x62B;
  LODWORD(v426) = v22 ^ 0x68E;
  HIDWORD(v425) = v22 ^ 0x627;
  LODWORD(v425) = v22 ^ 0x652;
  *(_DWORD *)(v21 - 116) = v22;
  HIDWORD(a7) = v22 ^ 0x6A0;
  v187 = *(_DWORD *)(v21 - 116);
  *(_QWORD *)(v21 - 128) = 1;
  v188 = (v187 - 381) ^ 0x7FFFFAC5 | 0x8F8FAAB4;
  v189 = v20;
  v190 = v20[1] ^ 3;
  v191 = (((2 * v188) ^ 7) - 150933617) ^ 0xF700EF85;
  *(_QWORD *)(v21 - 136) = v191;
  v192 = ((((*((unsigned __int8 *)v144 + v190) ^ 4) - ((2 * (*((unsigned __int8 *)v144 + v190) ^ 4)) & 0x18A)) << 16)
        - 1195048960) ^ 0xB8C50000;
  LODWORD(v154) = v192 + 506890572 - ((2 * v192) & 0x3C6C0000);
  v193 = *((unsigned __int8 *)v144 + (v20[v191] ^ 0xD2));
  *(_QWORD *)(v21 - 144) = 14;
  v194 = ((((v193 ^ 0x6A) - ((2 * (v193 ^ 0x6A)) & 0x7C)) << 16) - 1170341888) ^ 0xBA3E0000;
  v195 = v194 - 994395673 - ((2 * v194) & 0x9740000);
  v196 = v148;
  v197 = v148[v20[14] ^ 0x75];
  v198 = (((2 * v188) ^ 0xF) - 1760715229) ^ 0x970D9E1D;
  *(_QWORD *)(v21 - 152) = v198;
  v199 = (v197 - ((2 * v197 - 60) & 0x8E) - 87) ^ 0x94;
  v200 = (((v199 - ((2 * v199) & 0x8E)) << 8) - 1794488576) ^ 0x950A4700;
  LODWORD(v148) = v200 + 866362258 - ((2 * v200) & 0x67474600);
  v201 = *((unsigned __int8 *)v144 + (v20[v198] ^ 0x20)) ^ 0x7A;
  v202 = (((v201 - ((2 * v201) & 0xF2)) << 16) - 25624576) ^ 0xFE790000;
  *(_QWORD *)(v21 - 216) = 12;
  v203 = v432[v20[12] ^ 0xA5];
  HIDWORD(v133) = v203 ^ 4;
  LODWORD(v133) = (v203 ^ 0xC0) << 24;
  v204 = ((v133 >> 29) + (~(2 * (v133 >> 29)) | 0x57) + 85) ^ 0xAA;
  v205 = (((v204 - ((2 * v204) & 0xF8)) << 24) + 2080374784) ^ 0x7C000000;
  LODWORD(v148) = (v205 - 983641097 - ((2 * v205) & 0x8A000000)) ^ 0xC55ED3F7 | v148 ^ 0x33A3A392;
  *(_QWORD *)(v21 - 184) = 3;
  v206 = v430[v20[3] ^ 0x6DLL];
  HIDWORD(v133) = v206 ^ 1;
  LODWORD(v133) = ~v206 << 24;
  *(_QWORD *)(v21 - 208) = 11;
  v207 = ((v133 >> 31) - ((2 * (v133 >> 31)) & 0xCE) - 25) ^ 0xE7;
  LODWORD(v154) = (v207 + 998403376 - ((2 * v207) & 0x60)) ^ 0x3B826D30 | v154 ^ 0x1E36894C;
  v208 = v430[v20[11] ^ 0xCCLL];
  HIDWORD(v133) = v208 ^ 1;
  LODWORD(v133) = ~v208 << 24;
  v209 = ((v133 >> 31) - ((2 * (v133 >> 31)) & 0xF4) - 6) ^ 0x73;
  v210 = (v209 - 1934819163 - ((2 * v209) & 0x14A)) ^ 0x8CAD00A5 | v195 ^ 0xC4BAB9E7;
  *(_QWORD *)(v21 - 160) = 13;
  v211 = *((unsigned __int8 *)v144 + (v20[13] ^ 0xEBLL));
  *(_QWORD *)(v21 - 192) = 7;
  v212 = ((((v211 ^ 0x29) - ((2 * (v211 ^ 0x29)) & 0x1E0)) << 16) + 418381824) ^ 0x18F00000;
  v213 = v430[v20[7] ^ 5];
  v214 = ((_DWORD)v148 + 602793713 - ((2 * (_DWORD)v148) & 0x47DBCDE2)) ^ 0x23EDE6F1 | (v212
                                                                                      - 999692081
                                                                                      - ((2 * v212) & 0x8D20000)) ^ 0xC469E8CF;
  HIDWORD(v133) = v213 ^ 1;
  LODWORD(v133) = ~v213 << 24;
  *(_QWORD *)(v21 - 200) = 15;
  LODWORD(v148) = ((v133 >> 31) - ((2 * (v133 >> 31)) & 0xA8) + 84) ^ 0x36;
  v215 = (v148 - 1441189670 - ((2 * (_DWORD)v148) & 0x1B4)) ^ 0xAA1930DA | (v202
                                                                                           - 585137628
                                                                                           - ((2 * v202) & 0x3A3E0000)) ^ 0xDD1F8224;
  v216 = v430[~v20[15]];
  HIDWORD(v133) = v216 ^ 1;
  LODWORD(v133) = ~v216 << 24;
  LODWORD(v148) = ((v133 >> 31) - ((2 * (v133 >> 31)) & 0x14) + 10) ^ 1;
  v217 = (v214 - 1109028686 - ((2 * v214) & 0x7BCB2164)) ^ 0xBDE590B2 | (v148
                                                                       + 1143057441
                                                                       - ((2 * (_DWORD)v148) & 0x42)) ^ 0x4421AC21;
  *(_QWORD *)(v21 - 232) = 4;
  v218 = v432[v20[4] ^ 0x1DLL];
  HIDWORD(v133) = v218 ^ 4;
  LODWORD(v133) = (v218 ^ 0xC0) << 24;
  v219 = ((v133 >> 29) - ((2 * (v133 >> 29)) & 0x36) + 27) ^ 0xED;
  v220 = (((v219 - ((2 * v219) & 0xCA)) << 24) - 452984832) ^ 0xE5000000;
  v221 = (v220 - 619017265 - ((2 * v220) & 0xB6000000)) ^ 0xDB1A8BCF | (v215 - 128606741 - ((2 * v215) & 0x70AB3BD6)) ^ 0xF8559DEB;
  *(_QWORD *)(v21 - 176) = 10;
  v222 = v20[10] ^ 0x81;
  *(_QWORD *)(v21 - 240) = 2;
  LODWORD(v222) = (~(2 * v196[v222] + 4) | 0xC5) + v196[v222] - 128;
  LODWORD(v222) = ((((v222 ^ 0xDD) - ((2 * (_DWORD)v222) & 4)) << 8) + 1004929536) ^ 0x3BE60200;
  v223 = v20[2];
  LODWORD(v222) = (v222 - 2025914205 - ((2 * v222) & 0xE7E0000)) ^ 0x873F00A3 | (v210
                                                                               - 996252781
                                                                               - ((2 * v210) & 0x93CC726)) ^ 0xC49E6393;
  v224 = (((((v196[v223 ^ 0xBD] - ((2 * v196[v223 ^ 0xBD] - 60) & 0x9E) - 79) ^ 0xA1)
          - 2 * (((v196[v223 ^ 0xBD] - ((2 * v196[v223 ^ 0xBD] - 60) & 0x9E) - 79) ^ 0xA1) & 1)) << 8)
        + 1128268032) ^ 0x43400100;
  v225 = (v224 - 327703303 - ((2 * v224) & 0x58EF4800)) ^ 0xEC77A4F9 | ((_DWORD)v154
                                                                      - 1891324840
                                                                      - ((2 * (_DWORD)v154) & 0x1E8958B0)) ^ 0x8F44AC58;
  *(_QWORD *)(v21 - 168) = 8;
  v226 = v432[v20[8] ^ 0x73];
  HIDWORD(v133) = v226 ^ 4;
  LODWORD(v133) = (v226 ^ 0xC0) << 24;
  *(_DWORD *)(v21 - 252) = -1886410060;
  *(_QWORD *)(v21 - 224) = 0;
  v227 = (v133 >> 29) + (~(2 * (v133 >> 29)) | 0x53) + 87;
  v228 = ((((v227 ^ 0x38) - ((2 * v227) & 8)) << 24) + 0x4000000) ^ 0x4000000;
  v229 = (v228 + 1040486937 - ((2 * v228) & 0x7C000000)) ^ 0x3E049219 | (v222 - 1169886342 - ((2 * v222) & 0x7489E6F4)) ^ 0xBA44F37A;
  LODWORD(v154) = v432[*v20 ^ 0x19];
  HIDWORD(v133) = v154 ^ 4;
  LODWORD(v133) = (v154 ^ 0xC0) << 24;
  LODWORD(v154) = v229 - ((2 * v229) & 0x88B6C88A) - 1000643515;
  v230 = ((v133 >> 29) - ((2 * (v133 >> 29)) & 0xF6) + 123) ^ 0xCE;
  v231 = (((v230 - ((2 * v230) & 0xBBBBBBBB)) << 24) + 1560281088) ^ 0x5D000000;
  v232 = (v225 + 710815638 - ((2 * v225) & 0x54BC5F2C)) ^ 0x2A5E2F96 | (v231 + 976671820 - ((2 * v231) & 0x74000000)) ^ 0x3A36D44C;
  *(_QWORD *)(v21 - 248) = 6;
  LOBYTE(v225) = v196[v20[6] ^ 0xF2];
  LOBYTE(v225) = (v225 - ((2 * v225 + 4) & 0x1E) + 113) ^ 0x24;
  v233 = (v221 + 1384486090 - ((2 * v221) & 0xA50B2994)) ^ 0x528594CA | ((v225 << 8)
                                                                       + 1669664703
                                                                       - ((v225 & 0xF) << 9)) ^ 0x63850FBF;
  v234 = *(_DWORD *)(v21 - 256) ^ v453 ^ (v232 - ((2 * v232) & 0x21D285FE) - 1863761153);
  v235 = v459 ^ v454 ^ (v233 - ((2 * v233) & 0x119A0D82) - 1999829311);
  v236 = v458 ^ v452 ^ (v217 - ((2 * v217) & 0xB867FD42) + 1546911393);
  v237 = v457 ^ v455 ^ v154;
  v238 = (char *)off_1E3D64110[v187 - 1477] - 8;
  LODWORD(v222) = *(_DWORD *)&v238[4
                                 * ((((v236 >> 8) & 0xC0)
                                   + 1738022656
                                   + (BYTE1(v236) ^ 0xC5)
                                   - ((BYTE1(v236) ^ 0xC5) & 0xC0)) ^ 0x67981F1B)];
  v239 = (char *)off_1E3D64110[v187 - 1615] - 4;
  v240 = *(_DWORD *)&v239[4 * (HIBYTE(v234) ^ 0x98)];
  HIDWORD(v133) = v240 ^ 4;
  LODWORD(v133) = v240 ^ 0xDC973780;
  v241 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0xE2BFF334);
  v242 = *(_DWORD *)&v238[4 * (BYTE1(v237) ^ 0xE9)];
  v243 = *(_DWORD *)&v239[4 * (HIBYTE(v235) ^ 0x4B)];
  LODWORD(v154) = v242 - ((2 * v242 + 1133110954) & 0x4E89C662);
  HIDWORD(v133) = v243 ^ 4;
  LODWORD(v133) = v243 ^ 0xDC973780;
  v244 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0x546E6834);
  v245 = *(_DWORD *)&v239[4 * (HIBYTE(v236) ^ 0x63)];
  HIDWORD(v133) = v245 ^ 4;
  LODWORD(v133) = v245 ^ 0xDC973780;
  v246 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0xA9091D26);
  v247 = (v234 >> 8) & 0xFD ^ 0xD4C81F41 | (v234 >> 8) & 2;
  v248 = *(_DWORD *)&v238[4
                        * (((((v234 >> 8) & 0xFD ^ 0xD4C81F41) & 0xD4481E65 ^ 0x2A103420)
                          + (v247 ^ 0xD4CE4A5F)
                          - ((v247 ^ 0xD4CE4A5F) & 0x5465)) ^ 0xFE5E2B54)];
  v249 = v248 - ((2 * v248 - 1014372694) & 0x90A7E444);
  v250 = (char *)off_1E3D64110[v187 - 1697] - 8;
  v251 = (char *)off_1E3D64110[v427] - 4;
  v252 = *(_DWORD *)&v251[4 * ((v459 ^ v454 ^ (v233 - ((2 * v233) & 0x82) - 63)) ^ 0x57)] ^ (v249 - 1441208969) ^ *(_DWORD *)&v250[4 * (((HIWORD(v236) & 0xCE ^ 0x12EB4BC8) + (BYTE2(v236) ^ 0x20040007) - ((BYTE2(v236) ^ 0x20040007) & 0x200000CE)) ^ 0x12EF4B96)];
  v253 = *(_DWORD *)&v239[4 * (HIBYTE(v237) ^ 0xCF)];
  HIDWORD(v133) = v253 ^ 4;
  LODWORD(v133) = v253 ^ 0xDC973780;
  v254 = *(_DWORD *)&v238[4 * (BYTE1(v235) ^ 0xAE)];
  LODWORD(v222) = *(_DWORD *)&v251[4 * ((*(_BYTE *)(v21 - 256) ^ v453 ^ (-(char)v232 - 1)) ^ 0x6B)] ^ v450 ^ *(_DWORD *)&v250[4 * (BYTE2(v237) ^ 0xDF)] ^ (v244 - 1439222758) ^ (v222 - ((2 * v222 - 1014372694) & 0xD39A7342) - 879612682);
  v255 = (v241 - 245368422) ^ v451 ^ ((_DWORD)v154 - 1995843962) ^ *(_DWORD *)&v251[4 * (v236 ^ 0x6B)] ^ *(_DWORD *)&v250[4 * (BYTE2(v235) ^ 0x27)];
  LODWORD(v154) = *(_DWORD *)&v251[4 * (v237 ^ 0xE8)];
  v256 = v252 ^ v449 ^ ((v133 >> 7) - ((2 * (v133 >> 7)) & 0x18C2420A) - 1939791611);
  v257 = v154 ^ v448 ^ *(_DWORD *)&v250[4 * (BYTE2(v234) ^ 0x5C)] ^ (v254
                                                                                 - ((2 * v254 + 59369130) & 0x26849210)
                                                                                 + 1963408477) ^ (v246 - 729510253);
  LOBYTE(v202) = ((v252 & 0x10 ^ 0xF6) + 2 * (v252 & 0x10) - 46) ^ 0x88;
  v258 = ((((v222 ^ 0xFDF4B3D0) >> ((v202 - ((2 * v202) & 0xE0) - 14) ^ 0xB2))
         - 461093262
         - ((2 * ((v222 ^ 0xFDF4B3D0) >> ((v202 - ((2 * v202) & 0xE0) - 14) ^ 0xB2))) & 0xC9088CE4)) ^ 0xE4844672) >> ((v202 - ((2 * v202) & 0xE0) - 14) ^ 0xA2);
  LOBYTE(v235) = v258 - ((2 * v258) & 0x58);
  v259 = *(_DWORD *)&v239[4 * (HIBYTE(v255) ^ 0x11)];
  HIDWORD(v133) = v259 ^ 4;
  LODWORD(v133) = v259 ^ 0xDC973780;
  v260 = v133 >> 7;
  v261 = ((v255 ^ 0xB3) + (v255 & 0x88 ^ 0x16D2E508) - ((v255 ^ 0xB3) & 0x88888888)) ^ 0x1276AD88;
  v262 = *(_DWORD *)&v239[4 * (HIBYTE(v257) ^ 0x34)];
  HIDWORD(v133) = v262 ^ 4;
  LODWORD(v133) = v262 ^ 0xDC973780;
  v263 = v260 - ((2 * v260) & 0xF138C262);
  LODWORD(v154) = (v133 >> 7) - ((2 * (v133 >> 7)) & 0xF6D0AC6);
  v264 = (((2 * (BYTE1(v256) ^ 0xD)) | 0x2D20455C) - (BYTE1(v256) ^ 0xD) - 378544814) ^ 0x169D222E;
  v265 = *(_DWORD *)&v238[4 * ((-1283526557 - (v264 | 0xB37EF063) + (v264 | 0x4C810F9C)) ^ 0x4C8C0F56)];
  v266 = v265 - ((2 * v265 - 1014372694) & 0xDA1BF78C);
  v267 = ((BYTE1(v257) ^ 0x56) + ((v257 >> 8) & 0xB6 ^ 0x7BF560A0) - ((BYTE1(v257) ^ 0x56) & 0xB6)) ^ 0xFBF5E2DA;
  v268 = *(_DWORD *)&v238[4 * ((-1370316480 - (v267 | 0xAE52A140) + (v267 | 0x51AD5EBF)) ^ 0xD1ADDC44)];
  v269 = v268 - ((2 * v268 + 59369130) & 0x3840FBA4);
  v270 = *(_DWORD *)&v239[4 * (HIBYTE(v256) ^ 2)];
  HIDWORD(v133) = v270 ^ 4;
  LODWORD(v133) = v270 ^ 0xDC973780;
  v271 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0x838E34FC);
  v272 = (((2 * (BYTE1(v222) ^ 0x13)) | 0x74AA36D2) - (BYTE1(v222) ^ 0x13) - 978656105) ^ 0x1B555ABA;
  LOWORD(v134) = (v222 & 0xD7) + (v222 & 0x28 ^ 0xF021) - 1;
  v273 = *(_DWORD *)&v238[4 * ((((2 * v272) | 0xF115829E) - v272 + 125124273) ^ 0xD98A80E3)];
  LODWORD(v148) = (((((v255 >> 8) & 0x91) + (BYTE1(v255) ^ 0xDB)) | 0xA8154000) - ((BYTE1(v255) ^ 0xDB) & 0x91)) ^ 0x2C82459A;
  LODWORD(v148) = *(_DWORD *)&v238[4 * ((((2 * (_DWORD)v148) | 0x7FDB495C) - (_DWORD)v148 + 1074944850) ^ 0x3B7AA129)];
  LODWORD(v222) = *(_DWORD *)&v239[4 * (BYTE3(v222) ^ 0xA9)];
  HIDWORD(v133) = v222 ^ 4;
  LODWORD(v133) = v222 ^ 0xDC973780;
  LODWORD(v222) = (v263 + 2023514417) ^ HIDWORD(v447) ^ *(_DWORD *)&v251[4 * (v257 ^ 0xE5)] ^ (v266 - 825037029) ^ *(_DWORD *)&v250[4 * ((v235 + 44) ^ 0x2C)];
  v274 = *(_DWORD *)&v251[4 * ((((2 * v261) | 0xC46243E6) - v261 + 500096525) ^ 0xE6956903)] ^ HIDWORD(v445) ^ *(_DWORD *)&v250[4 * (BYTE2(v256) ^ 0x22)] ^ ((v133 >> 7) - ((2 * (v133 >> 7)) & 0x5A4802C0) + 757334368) ^ (v269 - 35294937);
  v275 = *(_DWORD *)&v250[4 * (BYTE2(v255) ^ 0x15)] ^ HIDWORD(v446) ^ *(_DWORD *)&v251[4
                                                                                     * (v256 ^ 0x4C)] ^ ((_DWORD)v154 + 129402211);
  LODWORD(v154) = *(_DWORD *)&v250[4 * (BYTE2(v257) ^ 0xA8)];
  v276 = v275 ^ (v273 - ((2 * v273 + 1133110954) & 0x79E93D40) - 1632005643);
  LODWORD(v154) = v154 ^ v447 ^ (v271 + 1103567486) ^ ((_DWORD)v148
                                                                   - ((2 * (_DWORD)v148 - 1014372694) & 0xC536A544)
                                                                   + 1147160055) ^ *(_DWORD *)&v251[4 * (((v134 & 0x481 ^ 0x14A1C401) + (v134 & 0x1B7E ^ 0xB001121) - 1) ^ 0x1FA1C57F)];
  v277 = *(_DWORD *)&v239[4 * (HIBYTE(v276) ^ 0xDC)];
  v278 = (((2 * (_DWORD)v154) & 0x136) + (v154 ^ 0xFFFFFF9F) - 1404187547) ^ 0xA58D8040;
  v279 = ((2 * v278) | 0xECC906AE) - v278;
  HIDWORD(v133) = v277 ^ 4;
  LODWORD(v133) = v277 ^ 0xDC973780;
  v280 = *(_DWORD *)&v239[4 * ((v154 >> 24) ^ 0x8B)];
  v281 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0x93B47D9E);
  HIDWORD(v133) = v280 ^ 4;
  LODWORD(v133) = v280 ^ 0xDC973780;
  v282 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0xC95E9600);
  v283 = ((v222 >> 8) & 0xF1 ^ 0x4542FE51) + ((v222 >> 8) & 0xE ^ 7) - 1;
  v284 = *(_DWORD *)&v238[4 * (((v283 ^ 0x4482EE79) - ((2 * v283) & 0x3000300) + 1728742784) ^ 0x66CA95D8)];
  v285 = v284 - ((2 * v284 + 59369130) & 0x1DCA7380);
  v286 = *(_DWORD *)&v239[4 * (HIBYTE(v274) ^ 0x63)];
  HIDWORD(v133) = v286 ^ 4;
  LODWORD(v133) = v286 ^ 0xDC973780;
  v287 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0x218138D8);
  v288 = *(_DWORD *)&v239[4 * (BYTE3(v222) ^ 0x9B)];
  HIDWORD(v133) = v288 ^ 4;
  LODWORD(v133) = v288 ^ 0xDC973780;
  v289 = (((2 * (BYTE2(v154) ^ 9)) | 0x917A7498) - (BYTE2(v154) ^ 9) - 1220360780) ^ 0xABD3BE6;
  v290 = v289 - ((2 * v289) & 0xCFF64AD4);
  v291 = ((v222 ^ 0xCC699C5C) + 865493861 + ((2 * (_DWORD)v222) & 0x136 ^ 0x106)) % 0x62;
  LOBYTE(v148) = (((v222 ^ 0xC7) + (v291 ^ 0x22) - ((2 * v291) & 0xBA) - 34) ^ 0xDC)
               + ((2 * ((v222 ^ 0xC7) + (v291 ^ 0x22) - ((2 * v291) & 0xBA) - 34)) & 0xB8);
  v292 = ((2 * v291) & 0xEE)
       + (v291 ^ 0x5F9E9F77)
       + 2 * ((_BYTE)v148 + 36)
       + (((_BYTE)v148 + 36) ^ 0x73FFFFFF);
  LODWORD(v148) = *(_DWORD *)&v238[4 * (BYTE1(v274) ^ 0xA4)];
  LODWORD(v154) = *(_DWORD *)&v238[4
                                 * (((BYTE1(v154) ^ 0x8241C8F2)
                                   - ((2 * (BYTE1(v154) ^ 0x8241C8F2)) & 0x311E4)
                                   - 1592280590) ^ 0x23567177)];
  v293 = (_DWORD)v154 - ((2 * (_DWORD)v154 - 1014372694) & 0xA5ED1E78);
  LODWORD(v154) = *(_DWORD *)&v250[4 * (BYTE2(v276) ^ 0xD4)] ^ HIDWORD(v444) ^ (v282 - 458274048) ^ *(_DWORD *)&v251[4 * (v274 ^ 0x4B)] ^ (v285 + 1890200853);
  v294 = *(_DWORD *)&v238[4 * (BYTE1(v276) ^ 0x51)];
  v295 = *(_DWORD *)&v250[4 * ((v290 - 402971286) ^ 0xA5FB24D7)] ^ v445 ^ (v287 + 281058412) ^ (v294
                                                                                              - 954775541
                                                                                              + (~(2 * v294 - 1014372694) | 0x355B5695)) ^ *(_DWORD *)&v251[4 * ((v292 - ((2 * v292 + 1489158420) & 0x97AD9278) - 130537018) ^ 0xCBD6C992)];
  v296 = *(_DWORD *)&v250[4 * (BYTE2(v274) ^ 0xEC)] ^ v446 ^ *(_DWORD *)&v251[4 * (v276 ^ 0x2F)] ^ (v293 + 884703889) ^ ((v133 >> 7) - ((2 * (v133 >> 7)) & 0x48DEBF50) + 611278760);
  v297 = *(_DWORD *)&v251[4 * ((v279 - 1986298711) ^ 0x7FA4CFE2)] ^ v444 ^ *(_DWORD *)&v250[4 * (BYTE2(v222) ^ 0xC9)] ^ ((_DWORD)v148 - ((2 * (_DWORD)v148 + 1133110954) & 0x72AEA362) - 1692646138) ^ (v281 + 1239039695);
  v298 = *(_DWORD *)&v238[4
                        * (((unsigned __int16)(*(_WORD *)&v251[4 * ((v279 - 1986298711) ^ 0x7FA4CFE2)] ^ v444 ^ *(_WORD *)&v250[4 * (BYTE2(v222) ^ 0xC9)] ^ ((_WORD)v148 - ((2 * (_WORD)v148 - 6486) & 0xA362) + 17670) ^ (v281 + 16079)) >> 8) ^ 0x1B)];
  v299 = v298 - ((2 * v298 + 1133110954) & 0x566ED954);
  LODWORD(v222) = *(_DWORD *)&v239[4 * (HIBYTE(v295) ^ 0xF)];
  HIDWORD(v133) = v222 ^ 4;
  LODWORD(v133) = v222 ^ 0xDC973780;
  v300 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0x3667CAA0);
  v301 = *(_DWORD *)&v239[4 * (HIBYTE(v296) ^ 0xEC)];
  HIDWORD(v133) = v301 ^ 4;
  LODWORD(v133) = v301 ^ 0xDC973780;
  LODWORD(v222) = *(_DWORD *)&v238[4 * (BYTE1(v295) ^ 0x6B)];
  v302 = *(_DWORD *)&v239[4 * ((v154 >> 24) ^ 0xC0)];
  v303 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0x64966EAA);
  HIDWORD(v133) = v302 ^ 4;
  LODWORD(v133) = v302 ^ 0xDC973780;
  LODWORD(v148) = (v133 >> 7) - ((2 * (v133 >> 7)) & 0x9E093A62);
  v304 = *(_DWORD *)&v239[4 * (HIBYTE(v297) ^ 0x26)];
  HIDWORD(v133) = v304 ^ 4;
  LODWORD(v133) = v304 ^ 0xDC973780;
  v305 = *(_DWORD *)&v238[4 * (BYTE1(v154) ^ 0xD8)];
  v306 = *(_DWORD *)&v238[4 * (BYTE1(v296) ^ 0x3F)];
  v307 = *(_DWORD *)&v251[4 * (v154 ^ 0x38)] ^ HIDWORD(v442) ^ *(_DWORD *)&v250[4
                                                                                               * (BYTE2(v296) ^ 0xF7)] ^ ((v133 >> 7) - ((2 * (v133 >> 7)) & 0xCB2C7036) + 1704343579) ^ (v222 - ((2 * v222 - 1014372694) & 0x98B73DB2) - 1373597138);
  LODWORD(v222) = *(_DWORD *)&v250[4 * (BYTE2(v297) ^ 0x21)] ^ HIDWORD(v441) ^ ((_DWORD)v148 - 821781199) ^ (v306 - ((2 * v306 - 1014372694) & 0xB1515E50) - 1167220099) ^ *(_DWORD *)&v251[4 * (v295 ^ 0xEA)];
  v308 = *(_DWORD *)&v251[4 * (v297 ^ 0x5A)] ^ HIDWORD(v443) ^ (v303 - 1303693483) ^ (v305 - ((2 * v305 + 1133110954) & 0x5FC8CC7C) - 1851172461);
  v309 = *(_DWORD *)&v251[4 * (v296 ^ 0x3C)];
  v310 = v308 ^ *(_DWORD *)&v250[4 * (BYTE2(v295) ^ 0xC3)];
  LODWORD(v154) = v309 ^ v443 ^ (v299 + 217866239) ^ *(_DWORD *)&v250[4 * (BYTE2(v154) ^ 0xC0)] ^ (v300 + 456385872);
  v311 = *(_DWORD *)&v239[4 * ((v154 >> 24) ^ 0x76)];
  HIDWORD(v133) = v311 ^ 4;
  LODWORD(v133) = v311 ^ 0xDC973780;
  v312 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0x7DDAF0C0);
  v313 = *(_DWORD *)&v239[4 * (BYTE3(v222) ^ 0xF0)];
  HIDWORD(v133) = v313 ^ 4;
  LODWORD(v133) = v313 ^ 0xDC973780;
  v314 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0x3DA5BF42);
  v315 = *(_DWORD *)&v239[4 * (HIBYTE(v307) ^ 0x24)];
  HIDWORD(v133) = v315 ^ 4;
  LODWORD(v133) = v315 ^ 0xDC973780;
  LODWORD(v148) = *(_DWORD *)&v238[4 * (BYTE1(v222) ^ 0x49)];
  v316 = *(_DWORD *)&v238[4 * (BYTE1(v154) ^ 0x65)];
  v317 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0xED0C4FFA);
  v318 = ((BYTE1(v307) ^ 0xF) + ((v307 >> 8) & 0x45 ^ 0x2F5CA240) - ((BYTE1(v307) ^ 0xF) & 0x45)) ^ 0x273DA30E;
  v319 = *(_DWORD *)&v238[4 * ((v318 - ((2 * v318) & 0x10C00590) - 1108816184) ^ 0xB589CF56)];
  v320 = *(_DWORD *)&v239[4 * (HIBYTE(v310) ^ 0xC4)];
  HIDWORD(v133) = v320 ^ 4;
  LODWORD(v133) = v320 ^ 0xDC973780;
  v321 = *(_DWORD *)&v238[4 * (BYTE1(v310) ^ 0xE3)];
  v322 = *(_DWORD *)&v251[4 * (v307 ^ 0x67)] ^ v442 ^ ((_DWORD)v148
                                                                      - ((2 * (_DWORD)v148 + 1133110954) & 0x620E9812)
                                                                      - 1832108194) ^ *(_DWORD *)&v250[4 * (BYTE2(v154) ^ 0xF8)] ^ ((v133 >> 7) - ((2 * (v133 >> 7)) & 0x80B2B798) + 1079598028);
  LODWORD(v154) = *(_DWORD *)&v251[4
                                 * ((668406395
                                   - (v154 ^ 0xB8 | 0x27D7127B)
                                   + (v154 ^ 0xB8 | 0xD828ED84)) ^ 0xD828EDAA)] ^ HIDWORD(v440) ^ *(_DWORD *)&v250[4 * (BYTE2(v307) ^ 0x51)] ^ (v314 + 517136289) ^ (v321 - ((2 * v321 - 1014372694) & 0xDBB12344) + 1335723255);
  v323 = *(_DWORD *)&v250[4 * (BYTE2(v310) ^ 0x2D)] ^ v440 ^ (v317 + 1988503549);
  v324 = *(_DWORD *)&v251[4 * (v310 ^ 0x15)];
  v325 = v312 - 1091733408;
  v326 = v323 ^ (v316 - ((2 * v316 + 59369130) & 0x30498322) - 102124314) ^ *(_DWORD *)&v251[4
                                                                                           * (v222 ^ 0x27)];
  v327 = v324 ^ v441 ^ v325 ^ *(_DWORD *)&v250[4 * (BYTE2(v222) ^ 0x26)] ^ (v319
                                                                          - ((2 * v319 + 1133110954) & 0x79B3E624)
                                                                          + 513730151);
  LODWORD(v222) = (v322 & 0xF6 ^ 0x10244CD3) + (v322 & 9);
  v328 = *(_DWORD *)&v239[4 * (HIBYTE(v327) ^ 0x95)];
  HIDWORD(v133) = v328 ^ 4;
  LODWORD(v133) = v328 ^ 0xDC973780;
  v329 = v133 >> 7;
  v330 = *(_DWORD *)&v239[4 * (HIBYTE(v326) ^ 0xC2)];
  HIDWORD(v133) = v330 ^ 4;
  LODWORD(v133) = v330 ^ 0xDC973780;
  v331 = v133 >> 7;
  LODWORD(v148) = *(_DWORD *)&v239[4 * ((v154 >> 24) ^ 0xEE)];
  v332 = v329 - ((2 * v329) & 0xBEAB11BA);
  HIDWORD(v133) = v148 ^ 4;
  LODWORD(v133) = v148 ^ 0xDC973780;
  v333 = v331 - ((2 * v331) & 0xA074032A);
  v334 = *(_DWORD *)&v238[4 * (BYTE1(v327) ^ 0x93)];
  v335 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0x78CF82FC);
  v336 = v334 - ((2 * v334 + 1133110954) & 0x581E74A8);
  v337 = *(_DWORD *)&v238[4 * (BYTE1(v326) ^ 0x63)];
  LODWORD(v148) = ((BYTE2(v322) ^ 0x62) + (HIWORD(v322) & 0xD3 ^ 0x3B247091) - ((BYTE2(v322) ^ 0x62) & 0xD3)) ^ 0x273470C3;
  v338 = *(_DWORD *)&v238[4 * (BYTE1(v154) ^ 0xC4)];
  v339 = *(_DWORD *)&v238[4
                        * (((BYTE1(v322) ^ 0x10060C87) - ((2 * (BYTE1(v322) ^ 0x10060C87)) & 0x40902) + 559150977) ^ 0x3155FB3F)];
  v340 = *(_DWORD *)&v239[4 * (HIBYTE(v322) ^ 0xC)];
  HIDWORD(v133) = v340 ^ 4;
  LODWORD(v133) = v340 ^ 0xDC973780;
  LODWORD(v222) = *(_DWORD *)&v251[4 * (((_DWORD)v222 - 1) ^ 0x10244C60)] ^ HIDWORD(v437) ^ *(_DWORD *)&v250[4 * (BYTE2(v154) ^ 0x4E)] ^ (v337 - ((2 * v337 + 59369130) & 0x9479370) - 429343475) ^ (v332 + 1599441117);
  v341 = *(_DWORD *)&v251[4 * (v326 ^ 0xE6)] ^ HIDWORD(v439) ^ (v338
                                                                               - ((2 * v338 + 1133110954) & 0x501EC076)
                                                                               - 1982573680) ^ ((v133 >> 7)
                                                                                              - ((2 * (v133 >> 7)) & 0x45615358)
                                                                                              - 1565480532) ^ *(_DWORD *)&v250[4 * (BYTE2(v327) ^ 0x11)];
  v342 = *(_DWORD *)&v250[4 * (((_DWORD)v148 - ((2 * (_DWORD)v148) & 0x2020132C) + 1387817366) ^ 0x4EA86995)] ^ HIDWORD(v438) ^ (v333 + 1345978773) ^ *(_DWORD *)&v251[4 * (v154 ^ 0x93)];
  LODWORD(v154) = *(_DWORD *)&v250[4 * (BYTE2(v326) ^ 0xC0)];
  v343 = v342 ^ (v336 - 1915474519);
  v344 = v154 ^ v439 ^ (v335 + 1013432702) ^ *(_DWORD *)&v251[4 * (v327 ^ 0x4C)] ^ (v339 - ((2 * v339 - 1014372694) & 0xB33A8954) + 996292607);
  v345 = ((2 * v344) ^ 0x4D2B1B3E) - ((2 * ((2 * v344) ^ 0x4D2B1B3E)) & 0x5858B648) + 741104421;
  v346 = ((2 * ((v344 ^ 0x26958D9F) - 167673003)) & 0xF7EF33F6)
       + (((v344 ^ 0x26958D9F) - 167673003) ^ 0xFBF799FB)
       + (v345 & 0xEC0306AA ^ 0xA45C0A21)
       + ((2 * v345) & 0xC8060D54 ^ 0xB7FFFBBF);
  v347 = v346 - ((2 * v346 - 145179638) & 0xD3F8FAFA) - 441918590;
  v348 = *(_DWORD *)&v238[4 * (BYTE1(v341) ^ 0x95)];
  LODWORD(v154) = v348 - ((2 * v348 - 1014372694) & 0x8B33BE5E);
  v349 = *(_DWORD *)&v238[4 * (BYTE1(v222) ^ 0xEC)];
  v350 = v349 - ((2 * v349 - 1014372694) & 0xC03A1B5E);
  v351 = (v347 ^ 0x140E927F)
       + (v347 & 0xE8 ^ 0x41610C80)
       - ((v347 ^ 0x140E927F) & 0x100200E8);
  v352 = ((BYTE1(v343) ^ 0x33) + ((v343 >> 8) & 0xB6 ^ 0xFA61B284) - ((BYTE1(v343) ^ 0x33) & 0xB6)) ^ 0xF2229296;
  v353 = *(_DWORD *)&v239[4 * (HIBYTE(v347) ^ 0x3D)];
  HIDWORD(v133) = v353 ^ 4;
  LODWORD(v133) = v353 ^ 0xDC973780;
  v354 = v133 >> 7;
  v355 = *(_DWORD *)&v238[4 * ((v352 - ((2 * v352) & 0x10000634) - 1103832294) ^ 0xB677FB4F)];
  LODWORD(v148) = *(_DWORD *)&v239[4 * (BYTE3(v222) ^ 0x9B)];
  HIDWORD(v133) = v148 ^ 4;
  LODWORD(v133) = v148 ^ 0xDC973780;
  LODWORD(v148) = v133 >> 7;
  v356 = *(_DWORD *)&v239[4 * (HIBYTE(v343) ^ 0xF7)];
  HIDWORD(v133) = v356 ^ 4;
  LODWORD(v133) = v356 ^ 0xDC973780;
  v357 = (v133 >> 7) + 360423640 + (~(2 * (v133 >> 7)) | 0xD508BE51);
  v358 = (((2 * (BYTE1(v347) ^ 9)) & 0x90) - (BYTE1(v347) ^ 9) + 2109407671) ^ 0xB872A9D3;
  v359 = *(_DWORD *)&v238[4 * ((((2 * v358) | 0xE7254B4E) - v358 - 1938990503) ^ 0xB65B0D68)];
  v360 = *(_DWORD *)&v239[4 * (HIBYTE(v341) ^ 0xB0)];
  HIDWORD(v133) = v360 ^ 4;
  LODWORD(v133) = v360 ^ 0xDC973780;
  v361 = *(_DWORD *)&v251[4 * (v341 ^ 0xA6)] ^ v437 ^ *(_DWORD *)&v250[4 * (BYTE2(v347) ^ 0xFC)] ^ ((_DWORD)v148 - ((2 * (_DWORD)v148) & 0x4A263E2C) + 622010134) ^ (v355 - ((2 * v355 + 59369130) & 0x36F1C134) + 2101203951);
  v362 = *(_DWORD *)&v250[4 * (BYTE2(v222) ^ 0x66)] ^ v438 ^ *(_DWORD *)&v251[4 * (v343 ^ 0xD0)] ^ ((v133 >> 7) - ((2 * (v133 >> 7)) & 0xC6316F2) - 2043573383) ^ (v359 - ((2 * v359 + 59369130) & 0x12767AF2) + 1795174606);
  v363 = v436 ^ (v350 - 1042153212) ^ *(_DWORD *)&v250[4 * (BYTE2(v341) ^ 0xE1)] ^ v357;
  v364 = *(_DWORD *)&v250[4 * (BYTE2(v343) ^ 0x44)];
  v365 = *(_DWORD *)&v251[4 * (v351 ^ 0x456D9E44)] ^ v363;
  v366 = v364 ^ HIDWORD(v436) ^ ((_DWORD)v154 - 1486957948) ^ *(_DWORD *)&v251[4 * (v222 ^ 0xFA)] ^ (v354 - ((2 * v354) & 0xB762C594) + 1538351818);
  v367 = *(_DWORD *)&v239[4 * (HIBYTE(v362) ^ 0x14)];
  v368 = *(_DWORD *)&v238[4 * (BYTE1(v362) ^ 0xAE)];
  HIDWORD(v133) = v367 ^ 4;
  LODWORD(v133) = v367 ^ 0xDC973780;
  v369 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0xB0A598C0);
  v370 = *(_DWORD *)&v239[4 * (HIBYTE(v365) ^ 0x96)];
  HIDWORD(v133) = v370 ^ 4;
  LODWORD(v133) = v370 ^ 0xDC973780;
  v371 = v133 >> 7;
  LODWORD(v154) = *(_DWORD *)&v239[4 * (HIBYTE(v366) ^ 0x45)];
  LODWORD(v222) = v368 - 1499060337 - ((2 * v368 - 1014372694) & 0x89C26874);
  HIDWORD(v133) = v154 ^ 4;
  LODWORD(v133) = v154 ^ 0xDC973780;
  LODWORD(v154) = *(_DWORD *)&v238[4 * (BYTE1(v365) ^ 0x85)];
  v372 = (_DWORD)v154 - ((2 * (_DWORD)v154 + 1133110954) & 0x66C3820A);
  LODWORD(v154) = *(_DWORD *)&v238[4 * (BYTE1(v361) ^ 0xBD)];
  v373 = ((2 * (v362 ^ 0xB2)) & 0x19C) - (v362 ^ 0xB2);
  v374 = *(_DWORD *)&v239[4 * (HIBYTE(v361) ^ 0x2C)];
  v375 = *(_DWORD *)&v238[4 * (BYTE1(v366) ^ 0xF8)];
  LODWORD(v154) = (v371 - ((2 * v371) & 0xFA7F73E6) - 46155277) ^ v129 ^ ((_DWORD)v154
                                                                        - ((2 * (_DWORD)v154 - 1014372694) & 0x8E92F516)
                                                                        + 688811488) ^ *(_DWORD *)&v251[4 * (v366 ^ 0x8D)] ^ *(_DWORD *)&v250[4 * (BYTE2(v362) ^ 0x46)];
  LODWORD(v222) = *(_DWORD *)&v250[4 * (BYTE2(v365) ^ 0x83)] ^ HIDWORD(v434) ^ ((v133 >> 7)
                                                                              - ((2 * (v133 >> 7)) & 0x1A637C3A)
                                                                              - 1926119907) ^ *(_DWORD *)&v251[4 * (v361 ^ 0x64)] ^ v222;
  v376 = (v369 - 665662368) ^ HIDWORD(v435) ^ *(_DWORD *)&v251[4 * (v365 ^ 0x17)] ^ *(_DWORD *)&v250[4 * (BYTE2(v361) ^ 0xB9)] ^ (v375 - ((2 * v375 + 59369130) & 0x237E90EA) - 209437750);
  v377 = *(_DWORD *)&v250[4 * (BYTE2(v366) ^ 0xA8)] ^ v435 ^ (v372 - 1792625574) ^ *(_DWORD *)&v251[4 * ((v373 + 1073) ^ 0x431)] ^ (v374 >> 7) ^ (((v374 << 25) ^ 0x8000000) - ((v374 & 3) << 26) - 2041452840);
  v378 = *(_DWORD *)&v239[4 * (HIBYTE(v376) ^ 0x2C)];
  HIDWORD(v133) = v378 ^ 4;
  LODWORD(v133) = v378 ^ 0xDC973780;
  v379 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0x7964B68);
  v380 = ((v154 & 0x51) + (v154 & 0xAE ^ 0x84CEA003) - 1) ^ 0x74D7DB97;
  v381 = v380 - ((2 * v380) & 0xE022FEEE);
  v382 = ((v376 ^ 0x41) - ((2 * (v376 ^ 0x41)) & 0xC0) + 1865831008) ^ 0x62364364;
  LODWORD(v148) = *(_DWORD *)&v239[4 * (BYTE3(v222) ^ 0x9E)];
  v383 = ((2 * v382) & 0x100007F2) - v382;
  HIDWORD(v133) = v148 ^ 4;
  LODWORD(v133) = v148 ^ 0xDC973780;
  v384 = (v133 >> 7) - ((2 * (v133 >> 7)) & 0x6F6C3E76);
  v385 = *(_DWORD *)&v239[4 * ((v154 >> 24) ^ 0x40)];
  HIDWORD(v133) = v385 ^ 4;
  LODWORD(v133) = v385 ^ 0xDC973780;
  v386 = v133 >> 7;
  LODWORD(v148) = *(_DWORD *)&v239[4 * (HIBYTE(v377) ^ 0xDD)];
  LODWORD(v239) = *(_DWORD *)&v238[4 * (BYTE1(v376) ^ 0xCB)];
  HIDWORD(v133) = v148 ^ 4;
  LODWORD(v133) = v148 ^ 0xDC973780;
  v387 = v386 - ((2 * v386) & 0xE4992A84);
  v388 = *(_DWORD *)&v250[4 * (BYTE2(v222) ^ 0xC3)];
  v389 = *(_DWORD *)&v250[4 * (BYTE2(v154) ^ 0xD2)];
  v390 = *(_DWORD *)&v250[4 * (BYTE2(v376) ^ 0x95)];
  LODWORD(v250) = *(_DWORD *)&v250[4
                                 * (((BYTE2(v377) ^ 0x6047C4BD) - ((2 * (BYTE2(v377) ^ 0x6047C4BD)) & 0x180CE) + 1624423) & 0x1F07FF ^ 0x1F05ED)];
  LOWORD(v148) = ((2 * v377) & 0x152) + (v377 ^ 0xFFEF);
  LODWORD(v154) = *(_DWORD *)&v238[4
                                 * (((BYTE1(v154) ^ 0xEC)
                                   + ((v154 >> 8) & 0x32 ^ 0x2012)
                                   - ((BYTE1(v154) ^ 0xEC) & 0x32)) ^ 0x2045)];
  v391 = ((BYTE1(v377) ^ 1) - ((v377 >> 7) & 0xC4) + 345387618) ^ 0x25847B4F;
  v392 = *(_DWORD *)&v238[4 * ((((2 * v391) | 0x2492199E) - v391 - 306777295) ^ 0x235B4595)];
  v393 = v392 - ((2 * v392 - 1014372694) & 0x9DDA5F7E);
  v394 = HIDWORD(v428) ^ v388 ^ ((v133 >> 7) - ((2 * (v133 >> 7)) & 0x2AFB03EC) + 360546806) ^ ((_DWORD)v154
                                                                                              - ((2 * (_DWORD)v154
                                                                                                - 1014372694) & 0xEDE30508)
                                                                                              + 1488352729) ^ *(_DWORD *)&v251[4 * ((v383 - 1794247674) ^ 0x980DE584)];
  v395 = *(_DWORD *)&v238[4 * (BYTE1(v222) ^ 0x13)];
  v396 = *(_DWORD *)&v251[4 * ((v381 + 1966178167) ^ 0x852804DF)];
  LODWORD(v154) = v379 + 63645108;
  v397 = (_DWORD)v239 - ((2 * (_DWORD)v239 - 1014372694) & 0xE0536AD4) + 1374595263;
  LODWORD(v239) = v390 ^ HIDWORD(a17) ^ (v387 + 1917621570) ^ *(_DWORD *)&v251[4 * (v222 ^ 0xFA)] ^ (v393 + 816980756);
  LODWORD(v251) = v389 ^ v433 ^ (v384 - 1212801221) ^ v397 ^ *(_DWORD *)&v251[4 * (((_WORD)v148 + 1367) & 0x7FF ^ 0x52B)];
  v398 = v250 ^ (v395 - ((2 * v395 - 1014372694) & 0xA8AECB68) - 1239656183);
  v399 = *(_DWORD *)(v21 - 116);
  v400 = off_1E3D64110[v399 - 1681];
  LODWORD(v222) = *((_DWORD *)v400 + ((v239 >> 24) ^ 0x29));
  HIDWORD(v133) = v222 ^ 0x79B;
  LODWORD(v133) = v222 ^ 0x95E2C800;
  v401 = v396 ^ HIDWORD(v433) ^ v154 ^ v398;
  v402 = (char *)off_1E3D64110[(int)v426] - 4;
  v403 = *(_DWORD *)&v402[4 * (v401 ^ 0x77)];
  LODWORD(v222) = (v394 ^ 0x57 | 0x231FA489) - (v394 ^ 0x57 | 0xDCE05B76) - 589276298;
  LODWORD(v222) = *(_DWORD *)&v402[4
                                 * (((v222 & 0x201707EB ^ 0x10840260) + (v222 & 0x308A014 ^ 0x1682001) - 1) ^ 0x32F3865F)];
  LODWORD(v238) = *(_DWORD *)&v402[4 * v239];
  v404 = *(_DWORD *)&v402[4 * (v251 ^ 0xA0)];
  v405 = (char *)off_1E3D64110[SHIDWORD(v426)] - 12;
  LODWORD(v154) = *(_DWORD *)&v405[4
                                 * ((((2 * (BYTE1(v401) ^ 0x6C)) | 0x56326FBA) - (BYTE1(v401) ^ 0x6C) - 723072989) ^ 0x2B193742)];
  v406 = *(unsigned int *)&v405[4 * (((unsigned __int16)((unsigned __int16)v251 ^ 0x7DE7) >> 8) ^ 0x31)];
  v407 = *(_DWORD *)&v405[4
                        * ((((((v394 >> 8) & 0x63) + (BYTE1(v394) ^ 0x63)) | 0x800) - ((BYTE1(v394) ^ 0x63) & 0x63)) ^ 0x80F)];
  v408 = *(_DWORD *)&v405[4 * (BYTE1(v239) ^ 0x72)];
  v409 = off_1E3D64110[SHIDWORD(v425)];
  LODWORD(v198) = *((_DWORD *)v409 + (BYTE2(v401) ^ 0x19u));
  v410 = *((_DWORD *)v409 + (BYTE2(v239) ^ 0xA5u));
  LODWORD(v405) = *((_DWORD *)v409
                  + ((((2 * (BYTE2(v394) ^ 0xA0225857)) & 0x4040A022) - (BYTE2(v394) ^ 0xA0225857) - 565834258) ^ 0x7E6455AD));
  v411 = *((_DWORD *)v400 + ((v251 >> 24) ^ 0x93));
  v412 = *((_DWORD *)v400 + (HIBYTE(v401) ^ 0xE8));
  LODWORD(v239) = (v133 >> 11) - ((2 * (v133 >> 11)) & 0x76B4117E);
  v413 = *((_DWORD *)v400 + (HIBYTE(v394) ^ 0x5C));
  HIDWORD(v133) = v413 ^ 0x79B;
  LODWORD(v133) = v413 ^ 0x95E2C800;
  LODWORD(v251) = v403 ^ v429 ^ *((_DWORD *)v409 + (((v251 ^ 0xA7DC7DE7) >> 16) ^ 0x72u)) ^ v408 ^ ((v133 >> 11) - ((2 * (v133 >> 11)) & 0x5EC26D5C) + 794900142);
  v414 = HIDWORD(v427) ^ HIDWORD(a17) ^ v198 ^ v407 ^ v404 ^ ((_DWORD)v239 - 1151727425);
  v415 = (char *)off_1E3D64110[(int)v425] - 12;
  v189[*(_QWORD *)(v21 - 248)] = v415[((BYTE1(v251) ^ 0xC) - ((2 * (BYTE1(v251) ^ 0xC)) & 0x1Cu) + 32782) ^ 0x80F4] ^ 0x54;
  v416 = (char *)off_1E3D64110[v399 - 1563] - 8;
  LODWORD(v198) = v416[BYTE3(v414) ^ 0xECLL];
  HIDWORD(v133) = v198 ^ 0x2A;
  LODWORD(v133) = (_DWORD)v198 << 24;
  LODWORD(v198) = (v133 >> 30) - ((2 * (v133 >> 30)) & 0x54) + 42;
  HIDWORD(v133) = v198 ^ 0x2A;
  LODWORD(v133) = (_DWORD)v198 << 24;
  LODWORD(v198) = (v133 >> 30) - ((2 * (v133 >> 30)) & 0x22);
  HIDWORD(v133) = ~(v198 - 107);
  LODWORD(v133) = (((_DWORD)v198 - 111) ^ 0x44444444) << 24;
  v189[*(_QWORD *)(v21 - 216)] = ((v133 >> 26) - ((2 * (v133 >> 26)) & 0xD6) - 21) ^ 0x74;
  HIDWORD(v133) = v411 ^ 0x79B;
  LODWORD(v133) = v411 ^ 0x95E2C800;
  LODWORD(v198) = (v133 >> 11) - ((2 * (v133 >> 11)) & 0x9D3EDEB0);
  HIDWORD(v133) = v412 ^ 0x79B;
  LODWORD(v133) = v412 ^ 0x95E2C800;
  LODWORD(v238) = v428 ^ v406 ^ v238 ^ v405 ^ ((v133 >> 11)
                                                                         - ((2 * (v133 >> 11)) & 0x83669CA8)
                                                                         + 1102270036);
  v417 = v416[(v251 >> 24) ^ 0x2ELL];
  v418 = v154 ^ HIDWORD(v427) ^ v410 ^ (v198 + 1319071576) ^ v222;
  HIDWORD(v133) = v417 ^ 0x2A;
  LODWORD(v133) = v417 << 24;
  v189[*(_QWORD *)(v21 - 232)] = ((v133 >> 30) - ((2 * (v133 >> 30)) & 0xAC) - 42) ^ 0xE7;
  LODWORD(v198) = (v154 ^ BYTE4(v427) ^ v410 ^ (v198 + 88) ^ v222) ^ 0x61;
  LODWORD(v198) = (1033949777 - (v198 | 0x3DA0D251) + (v198 | 0xC25F2DAE)) ^ 0x561DBD2C;
  v419 = (char *)off_1E3D64110[v399 - 1529] - 12;
  LODWORD(v198) = v419[(((2 * (_DWORD)v198) | 0x9540BE2C) - v198 + 895459562) ^ 0x5EE2CF60];
  HIDWORD(v133) = v198 ^ 2;
  LODWORD(v133) = (v198 ^ 0xD4) << 24;
  v189[*(_QWORD *)(v21 - 208)] = ((v133 >> 26) + (~(2 * (v133 >> 26)) | 0xB9) + 36) ^ 0x77;
  v189[*(_QWORD *)(v21 - 240)] = v415[(((2 * (BYTE1(v238) ^ 0xB1577)) | 0x1B5D911E)
                                     - (BYTE1(v238) ^ 0xB1577u)
                                     + 1917925233) ^ 0x8DA5DD25] ^ 0xB8;
  LODWORD(v198) = ((v238 & 0x19)
                 + (v238 ^ 0x9F)
                 - ((v238 ^ 0x9F) & 0x19)
                 + 1159189248) ^ 0x7475308;
  LODWORD(v198) = v419[(((2 * (_DWORD)v198) | 0x6C34F49C) - v198 - 907704910) ^ 0x744AFA27];
  HIDWORD(v133) = v198 ^ 2;
  LODWORD(v133) = (v198 ^ 0xD4) << 24;
  v189[*(_QWORD *)(v21 - 184)] = ((v133 >> 26) - ((2 * (v133 >> 26)) & 0x18) - 116) ^ 0xA6;
  LODWORD(v198) = v416[(v238 >> 24) ^ 0xA0];
  HIDWORD(v133) = v198 ^ 0x2A;
  LODWORD(v133) = (_DWORD)v198 << 24;
  v420 = *(_QWORD *)(v21 - 224);
  v189[v420] = ((v133 >> 30) - ((2 * (v133 >> 30)) & 0xEA) + 117) ^ 0x82;
  LODWORD(v198) = v419[v251 ^ 0x59];
  HIDWORD(v133) = v198 ^ 2;
  LODWORD(v133) = (v198 ^ 0xD4) << 24;
  v189[*(_QWORD *)(v21 - 192)] = (v133 >> 26) - ((2 * (v133 >> 26)) & 0xB4) + 90;
  LODWORD(v198) = v419[v414 ^ 0x22];
  HIDWORD(v133) = v198 ^ 2;
  LODWORD(v133) = (v198 ^ 0xD4) << 24;
  v189[*(_QWORD *)(v21 - 200)] = ((v133 >> 26) - ((2 * (v133 >> 26)) & 0x84) - 62) ^ 0x4E;
  LODWORD(v198) = ((2 * (BYTE2(v251) ^ 0xDA)) | 0xEC56EDE) - (BYTE2(v251) ^ 0xDA) + 2023573649;
  v421 = (char *)off_1E3D64110[SHIDWORD(a7)] - 12;
  LODWORD(v198) = v421[((v198 & 0x1FBE2932 ^ 0x18940810)
                                       + (v198 ^ 0x872AB566)
                                       - ((v198 ^ 0x872AB566) & 0x1FBE2932)) ^ 0x1FF62B10] ^ (v251 >> 16);
  v422 = (v198 & 0x96 ^ 0xF9) & 0x16;
  LOBYTE(v417) = (v198 & 0x69 ^ 0x9F) - ((2 * (v198 & 0x69 ^ 0x9F)) & 0x90) + 70;
  LOBYTE(v198) = (((v198 & 0x96 ^ 0xF9) + ((2 * ((v198 & 0x96 ^ 0xF9) & 0x16 ^ (v198 | 0x7D))) ^ 0x97) + 94) ^ 0x3B) & (v417 ^ 0x4A);
  v189[*(_QWORD *)(v21 - 152)] = (v198 & 0x6F ^ v417 & 0x66 | v198 & 0x90) ^ 0x42;
  LODWORD(v198) = ((((WORD1(v414) & 1) + (BYTE2(v414) ^ 0x81)) | 0xEEB9C200) - ((BYTE2(v414) ^ 0x81) & 1)) ^ 0xDEB5FA11;
  v189[*(_QWORD *)(v21 - 160)] = BYTE2(v414) ^ 0xDC ^ v421[(1733875013
                                                          - (v198 | 0x6758D545)
                                                          + (v198 | 0x98A72ABA)) ^ 0xA8AB125FLL];
  LODWORD(v198) = ((BYTE1(v414) ^ 0xBA) + ((v414 >> 8) & 0xC9 ^ 0x68F8F841) - ((BYTE1(v414) ^ 0xBA) & 0xC9)) ^ 0x4AF8F649;
  v189[*(_QWORD *)(v21 - 144)] = v415[(218459535 - (v198 | 0xD056D8F) + (v198 | 0xF2FA9270)) ^ 0xD0FA9C45] ^ 0xA8;
  LODWORD(v198) = ((2 * (BYTE2(v418) ^ 0x25)) & 0x1FC) - (BYTE2(v418) ^ 0x25) - 1052757247;
  v189[*(_QWORD *)(v21 - 136)] = BYTE2(v418) ^ 0x4F ^ v421[((v198 & 0x27BA ^ 0x340804B8)
                                                          + (v198 ^ 0x4353B342)
                                                          - ((v198 ^ 0x4353B342) & 0x800007BA)) ^ 0x361BA7A5];
  v189[*(_QWORD *)(v21 - 176)] = v415[((BYTE1(v418) ^ 0x22) - ((2 * (BYTE1(v418) ^ 0x22)) & 0xE0u) + 2928) ^ 0xB01] ^ 0xE0;
  LODWORD(v198) = ((BYTE2(v238) ^ 0x37)
                 + ((v238 >> 16) & 0x7F ^ 0xBA2EF948)
                 - ((BYTE2(v238) ^ 0x37) & 0x7F)) ^ 0x5F02FD7F;
  v189[*(_QWORD *)(v21 - 128)] = v421[(((2 * (_DWORD)v198) | 0x88A94262) - v198 + 1001086671) ^ 0x2178A55CLL] ^ BYTE2(v238);
  LODWORD(v198) = v416[HIBYTE(v418) ^ 0x64];
  HIDWORD(v133) = v198 ^ 0x2A;
  LODWORD(v133) = (_DWORD)v198 << 24;
  v423 = v420 - 1886410044 - 2 * ((v420 + 16) & 0xF8FAABC ^ *(_DWORD *)(v21 - 252) & 8);
  v189[*(_QWORD *)(v21 - 168)] = ((v133 >> 30) - ((2 * (v133 >> 30)) & 0xE4) - 14) ^ 0x8E;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, uint64_t (*)(uint64_t), char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v456 + 8 * (((4 * ((v423 ^ 0x8F8FAAB4) >= HIDWORD(v429))) | (8 * ((v423 ^ 0x8F8FAAB4) >= HIDWORD(v429)))) ^ (v399 - 1182))))(412354576, v414, v420, v415, 22, v422, v406, 42, a3, a4, a5, a6, a7, v425, v426, v427, v428, v429, v430,
           v431,
           v144,
           v432,
           a17,
           v433,
           v434,
           v435,
           v436,
           v437,
           v438,
           v439,
           v440,
           v441,
           v442,
           v443,
           v444,
           v445,
           v446,
           v447);
}

void sub_19C610FD4()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 - 256) = v0 ^ 0xB97E4DDD;
  JUMPOUT(0x19C60DC9CLL);
}

uint64_t sub_19C611018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45)
{
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;

  v46 = a12 - ((a10 + 485939036) & 0x64104B6A) + ((a45 + 381) ^ 0xFFFFF95D) + 1289160392;
  v47 = (v46 ^ 0x77D56BCA) + 2130704368 + ((2 * v46) & 0x8BBA9CFE ^ 0x10086A) != 1155352175;
  return ((uint64_t (*)(void))(*(_QWORD *)(v45 + 8 * ((v47 | (4 * v47)) ^ a45)) - 8))();
}

uint64_t sub_19C6110E0(int a1)
{
  unsigned int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v5 = (v2 - 1);
  v6 = ((a1 + 495434375) & 0xE27846F5) + v5 + ((unint64_t)(v5 < v1) << 32) - 1155353892;
  *(_BYTE *)(v4 + v6) ^= *((_BYTE *)off_1E3D64110[a1 ^ 0x5B5] + (v6 & 0xF) - 12) ^ *((_BYTE *)off_1E3D64110[a1 ^ 0x58E]
                                                                                   + (v6 & 0xF)
                                                                                   - 2) ^ (99 * (v6 & 0xF)) ^ *((_BYTE *)off_1E3D64110[a1 ^ 0x423] + (v6 & 0xF) - 1);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((((_DWORD)v5 != v1) | (4 * ((_DWORD)v5 != v1))) ^ a1)) - 8))();
}

void sub_19C61119C()
{
  int v0;
  int v1;
  int *v2;

  if (v0 == 1998832976)
    v1 = 480950058;
  else
    v1 = -480908046;
  *v2 = v1;
}

void sub_19C611200(uint64_t a1)
{
  __asm { BR              X8 }
}

void sub_19C611334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  char v10;
  _BOOL4 v12;

  v12 = (**(unsigned __int8 **)(a7 + 80) ^ 0xDDDEBD9B)
      + (**(unsigned __int8 **)(v8 + 1648) ^ 0x60000441)
      + ((**(unsigned __int8 **)(a7 + 80) << ((v10 + 29) ^ 0x25 ^ (v10 + 1))) & 0x136)
      - ((2 * (**(unsigned __int8 **)(v8 + 1648) ^ 0x41)) & 0xFFFFFFF7)
      - 1417462713 != v7
     || a6 == 1304693349;
  __asm { BR              X15 }
}

uint64_t sub_19C6125A0@<X0>(int a1@<W4>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  *(_BYTE *)(v2 + (v6 + v4)) = *(_BYTE *)(a2 + (v6 + v4));
  return (*(uint64_t (**)(void))(v7 + 8 * ((42 * (v6 - 1 == v3)) ^ (a1 + v5 - 32))))();
}

void I4nm3F2ne()
{
  int v0[8];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[0] = (1980347521 * (((v0 | 0x1DF9B175) + (~v0 | 0xE2064E8A)) ^ 0xA41DF189)) ^ 0x63B;
  sub_19C5B426C(v0);
  v0[1] = (583844137 * ((1542028444 - (v0 | 0x5BE97C9C) + (v0 | 0xA4168363)) ^ 0xB4C83EEE)) ^ 0xD9A13099;
  sub_19C61D0E8(v0);
  __asm { BR              X8 }
}

uint64_t sub_19C6126EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13)
{
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  a13 = v15 ^ ((((&a12 | 0x3C395B91) + (~&a12 | 0xC3C6A46E)) ^ 0x2CE7E61D) * v14);
  v18 = sub_19C61D0E8(&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v17 + 8 * ((55 * (a12 == v13)) ^ v16)) - 4))(v18);
}

uint64_t sub_19C612750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, int a13, unint64_t *a14)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  a12 = 522 - 653146051 * (&a12 ^ 0xAA14B5E2);
  a14 = &STACK[0x1BB16424708BA5B];
  sub_19C5B7A1C(&a12);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15
                                                                                          + 8
                                                                                          * ((1595 * (a13 == v14)) ^ 0xC4u))
                                                                              - 8))(v16, v17, v18, v19, v20);
}

uint64_t sub_19C6127F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, uint64_t a13, unsigned int a14, int a15, int a16, unsigned int a17)
{
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;

  v20 = 1575213817 * ((2 * (&a12 & 0x22B906B8) - &a12 - 582551225) ^ 0x5023498B);
  a17 = 1476503266 - v20;
  a12 = &STACK[0x43A4C4D315BFAF6D];
  a13 = a9;
  a14 = 1783734812 - v20;
  a16 = (v19 - 871891674) ^ v20;
  v21 = sub_19C61CA08((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18
                                                      + 8
                                                      * ((156 * (a15 != v17 + ((v19 - 905646745) & 0x35FB12DF) - 159)) ^ v19))
                                          - (v19 + 108)
                                          + 188))(v21);
}

uint64_t sub_19C6128D4()
{
  unsigned int v0;
  int v1;
  uint64_t v2;
  void (*v3)(unint64_t **);
  int v4;
  int v5;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unsigned int v11;

  v11 = (v4 + 252) ^ (1001500783 * ((&v9 + 1564895627 - 2 * (&v9 & 0x5D46698B)) ^ 0x17F2963F));
  v9 = v8;
  v10 = &STACK[0x143DED155B0DEDF0];
  ((void (*)(unint64_t **))(*(_QWORD *)(v2 + 8 * (v4 + 16)) - 12))(&v9);
  LODWORD(v9) = v4
              + ((2 * ((&v9 ^ 0xB0151CF7) & 0x602240BD) - (&v9 ^ 0xB0151CF7) - 1612857534) ^ 0x3E3AAEFF)
              * v1
              + 73;
  v10 = v8;
  sub_19C5F1B8C((uint64_t)&v9);
  v5 = HIDWORD(v9);
  v10 = v8;
  HIDWORD(v9) = v4
              - ((2 * ((&v9 ^ 0x61573B24) & 0x49975014) - (&v9 ^ 0x61573B24) + 912830441) ^ 0x46CD9987)
              * v1
              + 643;
  v3(&v9);
  v10 = v7;
  HIDWORD(v9) = v4 - 37 - (&v9 ^ 0x11F20D4A) * v1 + 680;
  v3(&v9);
  return v5 ^ v0;
}

void sub_19C612A68(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_19C612B18@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, int a4, unint64_t *a5, unsigned int a6, uint64_t a7, unsigned int a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v11 = 1431787901 * ((939729711 - (&a4 | 0x3803232F) + (&a4 | 0xC7FCDCD0)) ^ 0xEC6C7607);
  a4 = (v8 + 436) ^ v11;
  a5 = &STACK[0x566016E7416088E0];
  a7 = v9;
  a6 = 1564105165 - v11;
  a8 = v11 + 527984947;
  v12 = ((uint64_t (*)(int *))(*(_QWORD *)(a1 + 8 * (v8 ^ 0x12D)) - 12))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10
                                                      + 8
                                                      * ((725
                                                        * (*(_DWORD *)(v9 - 0x23F2B20168D9FBDLL) == ((v8 - 177443325) & 0xA9391F6) + 480949684)) ^ v8))
                                          - 4))(v12);
}

void sub_19C612C1C(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;
  int v4;
  _BYTE *v5;

  v4 = *(_DWORD *)(v1 + 20) - v2;
  *v5 = HIBYTE(v4) ^ 0x9D;
  v5[1] = (v3 + 126) ^ BYTE2(v4);
  v5[2] = BYTE1(v4) ^ 0x11;
  v5[3] = v4 ^ 0xE9;
  *(_DWORD *)(v1 + 16) = *a1;
}

void sub_19C612C94(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t (*v6)(uint64_t);
  char v7;
  _BYTE v8[8];

  v2 = (unint64_t)&v8[qword_1EE425000 ^ qword_1EE425008];
  v3 = 2004212711 * v2 + 0x25022B4C6E0E05D1;
  v4 = 2004212711 * (v2 ^ 0x7AEADA820E769987);
  v5 = byte_19CAFC290[byte_19CB2C530[(-25 * (v3 ^ 0x87 ^ v4))] ^ 0x19];
  qword_1EE425008 = v3;
  v6 = off_1E3D64110[((-25 * (v3 ^ 0x87 ^ v4)) ^ v5) + 114];
  v7 = byte_19CAFC290[byte_19CB2C530[(-25 * ((v4 - v3) ^ 0x87))] ^ 0x12];
  qword_1EE425000 = v4;
  ((void (*)(uint64_t (*)(uint64_t), void (*)()))v6)(off_1E3D64110[((-25 * ((v4 - v3) ^ 0x87)) ^ v7) - 36], sub_19C61D1F4);
  __asm { BR              X11 }
}

uint64_t sub_19C612DA4()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((998 * (*(_QWORD *)(*(_QWORD *)(v2 + 2048) - 4) == 0)) ^ v0))
                            - 4))();
}

uint64_t sub_19C612DDC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 - 1709)))(v1);
}

void sub_19C612DF8(_DWORD *a1)
{
  unsigned int v1;
  int v2;

  v1 = *a1 + 1001500783 * (((a1 | 0x7A806C72) - (a1 & 0x7A806C72)) ^ 0x303493C6);
  v2 = ((uint64_t (*)(char *, void (*)()))off_1E3D64110[v1 - 737])((char *)off_1E3D64110[v1 - 865] - 4, sub_19C5EF2A4);
  __asm { BR              X9 }
}

uint64_t sub_19C612ED8()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((1355
                                          * (**(_DWORD **)(v1 + 8 * (v2 ^ 0x3C3)) == ((v2 + 1454876498) & 0xA94857FD ^ (v0 - 316)))) ^ v2))
                            - 4))();
}

uint64_t sub_19C612F28()
{
  unsigned int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v16 = v3;
  v5 = *(_DWORD *)(v3 + 44) ^ v0;
  v6 = *(_QWORD *)(v16 + 8);
  **(_DWORD **)(v16 + 16) = 0;
  v7 = 961177747 * ((2043148711 - ((v4 - 152) | 0x79C7F9A7) + ((v4 - 152) | 0x86380658)) ^ 0xA16AF744);
  STACK[0x840] = v6;
  *(_DWORD *)(v4 - 152) = v1 - 1536615744 - v7;
  *(_DWORD *)(v4 - 148) = v7 ^ 0x1CF4C8AF;
  sub_19C74C624(v4 - 152);
  v8 = *(_DWORD *)(v4 - 136);
  v9 = 961177747 * ((2 * ((v4 - 152) & 0x3A69EA98) - (v4 - 152) - 980019868) ^ 0xE2C4E478);
  STACK[0x298] = v6;
  STACK[0x840] = v6;
  *(_DWORD *)(v4 - 152) = v1 - 1536615744 - v9;
  *(_DWORD *)(v4 - 148) = v9 ^ 0x1CF4C8B3;
  v10 = sub_19C74C624(v4 - 152);
  v11 = *(_DWORD *)(v4 - 136) + v8;
  v12 = v11 > 0xC5D272AF;
  v13 = v11 + 976063824;
  v14 = 0xFFFFFFFF00000000;
  if (v5 >= ((v1 - 333) ^ 0x338A2606u))
    v14 = 0;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * ((432
                                                        * (((v1 + 1) ^ (v14 - v5 + v13 + (v12 << 32) == 111371731)) & 1)) ^ v1))
                                          - 4))(v10);
}

uint64_t sub_19C6130BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _BOOL4 v33;

  v20 = v15;
  v21 = *(_QWORD *)(v17 + 8 * (v15 - 86));
  v22 = *(_QWORD *)(v21 + 804);
  *(_DWORD *)(v19 - 144) = v20 + 1980347521 * ((v19 + 976528332 - 2 * ((v19 - 152) & 0x3A34A464)) ^ 0x83D0E499) + 540;
  *(_QWORD *)(v18 + 1296) = v22;
  sub_19C5EEFA4(v19 - 152);
  v31 = v21 - 4;
  if (*(_DWORD *)(v21 - 4) == 1846655414)
    v32 = 1846655315;
  else
    v32 = *(_DWORD *)(v21 - 4);
  v33 = *(_QWORD *)(v31 + 8 * (v32 - 1846655314) + 8) != 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 8 * (((2 * v33) | (8 * v33)) ^ v20)))(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_19C613184@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((v1 == a1) * (((v3 + 141) | 0x64) - 843)) ^ v3))
                            - ((v3 + 141) ^ 0x267u)
                            + 363))();
}

uint64_t sub_19C6131BC()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  _BOOL4 v7;

  if (v3 == ((v0 + 611) ^ (v5 + 281)))
    v6 = v5;
  else
    v6 = v3;
  v7 = *(_QWORD *)(v1 + 8 * (v6 + v2) + 8) != 0;
  return (*(uint64_t (**)(void))(v4 + 8 * (((2 * v7) | (8 * v7)) ^ v0)))();
}

uint64_t sub_19C613208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v30;

  v30 = v16;
  HIDWORD(a13) = v17;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8 * (v18 - 754)))(64, 0x1030040A43055ADLL);
  *v30 = v21;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 8 * (int)(((v21 != 0) * ((((v18 + 1712057121) & 0x99F415DD) - 357) ^ 0x371)) ^ v18)))(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_19C61327C(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  int v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_19C61D6B0(a1, 0, 0x40uLL);
  v28 = v26(v27, 3504810603);
  *(_QWORD *)(*(_QWORD *)a24 + 40) = v28;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24
                                                                                 + 8
                                                                                 * (int)(((v28 != 0)
                                                                                        * ((v25 + 2110957948) & 0x822D53BA ^ 0x3E5)) ^ v25))
                                                                     - 12))(v28, v29, v30, v31);
}

uint64_t sub_19C6132EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23)
{
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v28 = 27 * (((v25 - 1207) | 0x400) ^ 0x420u);
  v29 = *(_QWORD *)(*(_QWORD *)v26 + 40);
  v30 = STACK[0x298] + 12;
  STACK[0x290] = v28;
  v31 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t))(v27
                                                                                        + 8 * ((v25 + 464) ^ 0x6BB)))(v29, v30, ((2 * (_DWORD)v23) & 0x79DBC7DC) + 0x4411EC20C3121C12 + ((v28 - 0x4411EC20C3121C48) ^ v23), -1);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24 + 8 * ((v25 + 464) ^ (97 * (a23 != 0)))) - 12))(v31);
}

uint64_t sub_19C6133A8()
{
  int v0;
  uint64_t v1;
  _QWORD *v2;
  int v3;
  _BYTE *v4;

  v3 = (STACK[0x290] - 1734429495) & 0x67614FF9;
  v4 = sub_19C61D6B0(&STACK[0x338], 0, 0x400uLL);
  v2[130] = &STACK[0x338];
  LODWORD(STACK[0x2A4]) = 8;
  LODWORD(STACK[0x270]) = v0 + 1888070752;
  LODWORD(STACK[0x26C]) = v0 + 172448891;
  *(int32x4_t *)&STACK[0x220] = vdupq_n_s32(0x4D8BFE51u);
  *(int32x4_t *)&STACK[0x230] = vdupq_n_s32(0x280F357u);
  *(int32x4_t *)&STACK[0x200] = vdupq_n_s32(0x298E9F86u);
  *(int32x4_t *)&STACK[0x210] = vdupq_n_s32(0x7FFFFFFEu);
  *v2 = ((138 * (v3 ^ 0x4FBu)) ^ 0x154) + 48;
  return ((uint64_t (*)(_BYTE *))(*(_QWORD *)(v1
                                                      + 8
                                                      * (((&STACK[0x338] == 0) * ((68 * (v3 ^ 0x4F4)) ^ 0x29B)) ^ v3))
                                          - 12))(v4);
}

uint64_t sub_19C6137D4()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  _QWORD *v2;

  *v2 = v0 - 64;
  return v1();
}

uint64_t sub_19C6137E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v26 = a9 ^ 0x3F2u;
  v27 = (32 * (&STACK[0x780] + v23)
       + 16 * ~(&STACK[0x780] + v23)) & 0x20;
  STACK[0x290] = (unint64_t)&STACK[0x780]
               + 2 * v27
               + v23
               + ((v27 | 0x5FEFBFCE77FF710ELL) ^ v26)
               - 0x5FEFBFCE77FF73E8;
  v28 = *(_QWORD *)(v24 + 8 * (int)((((v26 + 142) ^ 0x260) + 926) ^ v26));
  STACK[0x288] = *(_QWORD *)(v25 + 8 * ((int)v26 - 460));
  STACK[0x280] = *(_QWORD *)(v25 + 8 * ((int)v26 - 719));
  STACK[0x248] = a4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 - 12))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           v22,
           a22);
}

uint64_t sub_19C6138BC@<X0>(int a1@<W1>, uint64_t a2@<X3>, int a3@<W4>, int a4@<W8>)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  unint64_t v10;
  char v11;
  char v12;

  v8 = (_BYTE *)(a2 + (a3 - 1471422715));
  v9 = -798555377
     * ((*(_DWORD *)(*(_QWORD *)STACK[0x288] + (*(int *)STACK[0x280] & 0xFFFFFFFFFE7266B0)) ^ v8) & 0x7FFFFFFF);
  v10 = -798555377 * (v9 ^ HIWORD(v9));
  v11 = *(_BYTE *)(*(_QWORD *)(v7 + 8 * (a4 - 12)) + (v10 >> 24) + 1);
  v12 = *(_BYTE *)(*(_QWORD *)(v7 + 8 * (a4 - 176)) + (v10 >> 24)) ^ *(_BYTE *)(*(_QWORD *)(v7 + 8 * (a4 + 3))
                                                                                + (v10 >> 24)
                                                                                - 11);
  LODWORD(v10) = v10 ^ (-11 * (v10 >> 24));
  *v8 = v12 ^ (((v4 ^ 0xAB55EF81) >> (v5 - 113))
             - ((2 * ((v4 ^ 0xAB55EF81) >> (v5 - 113))) & 0xC0)
             + ((((a4 - 29) & 0x7C) + 114) ^ 4)
             - 2) ^ v11 ^ v10 ^ 0xE0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((54
                                          * (a3
                                           - (((v12 ^ (((v4 ^ 0xAB55EF81) >> (v5 - 113))
                                                                      - ((2 * ((v4 ^ 0xAB55EF81) >> (v5 - 113))) & 0xC0)
                                                                      + ((((a4 - 29) & 0x7C) + 114) ^ 4)
                                                                      - 2) ^ v11 ^ v10) ^ 0xE0) != 0) == a1)) ^ a4))
                            - 4))();
}

uint64_t sub_19C614E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t (*a20)(void))
{
  _QWORD *v20;

  *v20 -= 64;
  return a20();
}

uint64_t sub_19C614E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23)
{
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  STACK[0x2A8] = 0x200000005;
  v29 = *v25;
  v30 = *(_QWORD *)(*v25 + 24);
  STACK[0x2B0] = v30 + 101;
  LODWORD(STACK[0x2B8]) = a23;
  STACK[0x2C0] = v30 + 16;
  LODWORD(STACK[0x2C8]) = 20;
  STACK[0x2D0] = *(_QWORD *)(v29 + 48);
  LODWORD(STACK[0x2D8]) = 32;
  STACK[0x2E0] = v28 - 184;
  LODWORD(STACK[0x2E8]) = 32;
  STACK[0x2F0] = (unint64_t)&STACK[0x738];
  STACK[0x2F8] = (unint64_t)&STACK[0x2A4];
  LODWORD(STACK[0x300]) = 1;
  STACK[0x308] = *(_QWORD *)(v29 + 24) + 37;
  LODWORD(STACK[0x310]) = 64;
  STACK[0x318] = (unint64_t)&STACK[0x740];
  LODWORD(STACK[0x320]) = 64;
  *(_QWORD *)(v27 + 1304) = a10;
  *(_DWORD *)(v28 - 152) = v23
                         - 1431787901 * ((2 * ((v28 - 152) & 0x7E95EF30) - (v28 - 152) - 2123755317) ^ 0xAAFABA1C)
                         + 1403485841;
  v31 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v26 + 8 * (v23 ^ 0x32E)) - 8))(v28 - 152);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24
                                                      + 8
                                                      * (((*(_DWORD *)(v28 - 136) == 480950058)
                                                        * ((v23 - 702430524) & 0x29DE3BD7 ^ 0x764)) ^ (v23 - 88)))
                                          - 8))(v31);
}

void sub_19C614FB4()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(uint64_t, _BYTE *);
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t (*v28)(uint64_t, _BYTE *, uint64_t, unint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  int v33;
  int v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  _BYTE v40[416];

  v7 = v0 + 174;
  v8 = 6 * ((v0 + 174) ^ 0x47Au);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 36) = 4;
  **(_DWORD **)(*(_QWORD *)v3 + 24) = v2;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 4) = 830;
  v35(*(_QWORD *)(*(_QWORD *)v3 + 24) + *(unsigned int *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 12) + 101, *(_QWORD *)(v4 + 8 * ((v0 + 174) ^ 0x469)) - 12, 830, -1);
  v9 = bswap64(v5[131]);
  v10 = bswap64(v5[132]);
  v11 = bswap64(v5[133]);
  v12 = (_BYTE *)(v1 + 32);
  v13 = bswap64(v5[135]);
  v14 = bswap64(v5[136]);
  v15 = bswap64(v5[137]);
  v16 = bswap64(v5[138]);
  v5[131] = bswap64(v5[134]);
  v5[134] = v9;
  v5[132] = v11;
  v5[133] = v10;
  v5[135] = v16;
  v5[138] = v13;
  v5[136] = v15;
  v5[137] = v14;
  v17 = *(uint64_t (**)(uint64_t, _BYTE *))(v4 + 8 * ((v0 + 174) ^ 0x487));
  v18 = v17(4, v40);
  v19 = v18 ^ 0xD6FFBDEF5DDF27FCLL;
  v20 = (2 * v18) & 0xADFF7BDEBBBE4FF8;
  v21 = v17(4, v12);
  v22 = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 8 * (v7 ^ 0x4E4)))(0x2000000000000010, v19 + (v8 ^ 0xFE37BF2F5DFFE5E8 ^ v21) + v20 + ((2 * v21) & 0xFC6F7E5EBBFFCFF0) + 0x2AC882E14420F00CLL);
  v23 = ((2 * v22) & 0x8BE7595D5D5BDBF4) + (v22 ^ 0x45F3ACAEAEADEDFALL);
  v24 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  v25 = v24 + *(unsigned int *)(v24 + 12);
  v26 = v25 + *(unsigned int *)(v24 + 4) + 101;
  v27 = v23 + v25 + *(unsigned int *)(v24 + 4) - 0x45F3ACAEAEADED95;
  v28 = *(uint64_t (**)(uint64_t, _BYTE *, uint64_t, unint64_t))(v4 + 8 * (v7 ^ 0x536));
  v29 = v28(4, v12, v26, v27);
  v30 = v28(4, v40, v26, v29);
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v4 + 8 * (v7 - 786)))(0x2000000000000010, v27, v26, v30);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8) = (v23
                                                        - 2 * ((v23 + 290591238) & 0x1946169B ^ v23 & 1)
                                                        + 1788356768) ^ 0x1946169A;
  *v32 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  LODWORD(v8) = (v8 + 631028204) & 0xDA634777;
  **(_DWORD **)(v39 + 32) = v38 + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8) + 931;
  *(_DWORD *)v36 = v34;
  *v37 = (v8 ^ 0x91EE45DA) + v33;
  v31 = *(_QWORD *)(v36 + 808);
  *(_DWORD *)(v6 - 144) = (v8 - 718) ^ (402930427
                                      * ((2 * ((v6 - 152) & 0x7E54668) - (v6 - 152) - 132466283) ^ 0xE2A34528));
  v5[162] = v31;
  sub_19C5D187C(v6 - 152);
  *(_DWORD *)(v39 + 40) = 480950058;
}

void sub_19C6154B4(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v4;
  unint64_t *v5;
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 24) - 291962093 * ((~(_DWORD)a1 & 0xE3F3EFE2 | a1 & 0x1C0C101D) ^ 0xF201E2A8);
  v2 = 1001500783
     * ((2 * ((&v4 ^ 0x23885347) & 0x1CE339BD) - (&v4 ^ 0x23885347) - 484653502) ^ 0x8A206AB1);
  v6 = v2 ^ 0x9CAF10F4;
  v4 = v1 - 167302558 + v2;
  v5 = &STACK[0xBC8884B3565C9C9];
  sub_19C5B3498((uint64_t)&v4);
  __asm { BR              X14 }
}

uint64_t sub_19C6158C8@<X0>(int a1@<W4>, uint64_t a2@<X5>, int a3@<W8>)
{
  char v3;
  int v4;
  uint64_t v5;
  int v6;

  v6 = (16 * a1) ^ 0x7450;
  *((_BYTE *)&STACK[0x350] + (v4 + v6 - 497)) = v3;
  *((_BYTE *)&STACK[0x350] + (a3 - 130558812)) = *(_BYTE *)(a2 + 1);
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((1075 * (((v6 - 490) | 0x40u) - 66 > 2)) ^ v6)) - 8))();
}

uint64_t sub_19C617EC4@<X0>(uint64_t a1@<X3>, uint64_t a2@<X5>, int a3@<W8>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  *(_BYTE *)(a1 + ((v3 - 1397282450) & 0x5348D4E7 ^ (v6 + 63)) + a3) = *(_BYTE *)(a2
                                                                                              + (v5 - 390715867));
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (v3 ^ (1778 * ((v4 + 73) < 4)))) - 8))();
}

uint64_t sub_19C617F24@<X0>(uint64_t a1@<X3>, uint64_t a2@<X5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unint64_t a40)
{
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;

  v44 = (v40 - 432) | 6;
  *(_BYTE *)(a1 + (v44 ^ (v42 + 60)) + a3) = *(_BYTE *)(a2 + (v41 - 390715866));
  v45 = 1305237457 * ((((2 * (v43 - 216)) | 0x638ED42) - (v43 - 216) - 52197025) ^ 0xBAA5D06F);
  STACK[0x3E0] = a40;
  *(_DWORD *)(v43 - 200) = v45 + v44 + 1752;
  *(_DWORD *)(v43 - 216) = v45 ^ 0x38D7E972;
  v46 = sub_19C5F6FA0(v43 - 216);
  return a13(v46);
}

uint64_t sub_19C617FC0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8 * (((((v0 == v1) ^ v2) & 1) * ((v2 ^ 0xFF) + 1480)) ^ v2))
                            - 8))();
}

uint64_t sub_19C617FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  char v8;
  uint64_t v9;

  *(_BYTE *)(a4 + (v4 + v7)) = v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((v7 + v4 + 1) > 0x37) | v5)) - 14 * (v5 ^ v6) + 62))();
}

void sub_19C618034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  char v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;

  v11 = LOBYTE(STACK[0x3B0]) ^ 0x87;
  if (v11 == 134)
  {
    v16 = STACK[0x394];
    v17 = STACK[0x390];
    LOBYTE(STACK[0x388]) = ((v10 + 122) ^ (8 * LOBYTE(STACK[0x394])))
                         + ((2 * ((v10 + 122) ^ (8 * LOBYTE(STACK[0x394])))) & 0x80)
                         + 69;
    LOBYTE(STACK[0x389]) = (v16 >> 5) ^ 0x37;
    LOBYTE(STACK[0x38A]) = (v16 >> 13) ^ 0x79;
    LOBYTE(STACK[0x38B]) = (v16 >> 21) ^ 0x1B;
    HIDWORD(v18) = v17 ^ 0x17DF6C14;
    LODWORD(v18) = v16 ^ 0x80000000;
    LOBYTE(STACK[0x38C]) = ((v18 >> 29) - ((2 * (v18 >> 29)) & 0xCF) + 103) ^ 0x22;
    LOBYTE(STACK[0x38D]) = (v17 >> 5) ^ 0x25;
    LOBYTE(STACK[0x38E]) = (v17 >> 13) ^ 0xBE;
    v15 = (v17 >> 21) ^ 0xFFFFFFFB;
  }
  else
  {
    if (v11 != 133)
      goto LABEL_6;
    v12 = STACK[0x390];
    v13 = STACK[0x394];
    LOBYTE(STACK[0x388]) = (LODWORD(STACK[0x390]) >> (a10 & 0xF7 ^ 0x47)) ^ 0xFB;
    LOBYTE(STACK[0x389]) = (v12 >> 13) ^ 0xBE;
    LOBYTE(STACK[0x38A]) = (v12 >> 5) ^ 0x25;
    HIDWORD(v14) = v12 ^ 0x17DF6C14;
    LODWORD(v14) = v13 ^ 0x80000000;
    LOBYTE(STACK[0x38B]) = ((v14 >> 29) - 2 * ((v14 >> 29) & 0x3F) - 65) ^ 0xFA;
    LOBYTE(STACK[0x38C]) = (v13 >> 21) ^ 0x1B;
    LOBYTE(STACK[0x38D]) = (v13 >> 13) ^ 0x79;
    LOBYTE(STACK[0x38E]) = (v13 >> 5) ^ 0x37;
    LOBYTE(v15) = ((8 * v13) ^ 0xC0) - 2 * (((8 * v13) ^ 0xC0) & 0x48 ^ (8 * v13) & 8) + 69;
  }
  LOBYTE(STACK[0x38F]) = v15;
LABEL_6:
  JUMPOUT(0x19C6162C4);
}

uint64_t sub_19C6181D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,unsigned __int8 a56,uint64_t a57,uint64_t a58,char a59)
{
  unsigned int v59;
  uint64_t v60;
  int v61;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int8x16_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int8x16x4_t v87;

  v61 = a56 ^ 0x4C;
  if (v61 == 78)
    return ((uint64_t (*)(void))(*(_QWORD *)(v60
                                          + 8 * (int)((1795 * (LODWORD(STACK[0x3AC]) != 1380648494)) ^ (v59 + 838)))
                              - ((v59 + 838) ^ 0x388)))();
  if (v61 == 77)
    return ((uint64_t (*)(void))(*(_QWORD *)(v60
                                          + 8
                                          * (int)(((LODWORD(STACK[0x3AC]) == 1380648494) * ((v59 ^ 0x33D) - 644)) ^ (v59 + 821)))
                              - 4))();
  v63 = vdupq_n_s64(((2 * (_QWORD)&a59) & 0xB54D5EDDCFBEEBE0)+ ((unint64_t)&a59 ^ 0x5AA6AF6EE7DF75F2)+ (v59 ^ 0xAFFBDCD77DABEA26));
  v64 = vaddq_s64(v63, (int64x2_t)xmmword_19CAED650);
  v65 = vaddq_s64(v63, (int64x2_t)xmmword_19CAEC290);
  v66 = vaddq_s64(v63, (int64x2_t)xmmword_19CAEC2A0);
  v67 = vaddq_s64(v63, (int64x2_t)xmmword_19CAE7980);
  v68 = vdupq_n_s64(0xF55D73B99A749FAELL);
  v69 = (int8x16_t)vdupq_n_s64(0xBAuLL);
  v70 = (int8x16_t)vdupq_n_s64(0xDDB1C1A889AD617ALL);
  v71 = vdupq_n_s64(0x6ED8E0D444D6B0BDuLL);
  v72 = vdupq_n_s64(0xF55D73B99A749FBFLL);
  v73 = (int8x16_t)vdupq_n_s64(0x7EuLL);
  v74 = vdupq_n_s64(0xC6uLL);
  v75 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v66, v68), v69);
  v76 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v67, v68), v69);
  v77 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v65, v68), v69);
  v78 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v64, v68), v69);
  v79 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v78, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v78, v78), v70)), v71), (int8x16_t)v71);
  v80 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v77, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v77, v77), v70)), v71), (int8x16_t)v71);
  v81 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v76, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v76, v76), v70)), v71), (int8x16_t)v71);
  v82 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v75, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v75, v75), v70)), v71), (int8x16_t)v71);
  v83 = vaddq_s64(v66, v72);
  v82.i64[0] *= v83.i64[0];
  v82.i64[1] *= v83.i64[1];
  v84 = vaddq_s64(v67, v72);
  v81.i64[0] *= v84.i64[0];
  v81.i64[1] *= v84.i64[1];
  v85 = vaddq_s64(v65, v72);
  v80.i64[0] *= v85.i64[0];
  v80.i64[1] *= v85.i64[1];
  v86 = vaddq_s64(v64, v72);
  v79.i64[0] *= v86.i64[0];
  v79.i64[1] *= v86.i64[1];
  v87.val[1] = (int8x16_t)vaddq_s64(vsubq_s64(v82, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v82, v82), v73)), v74);
  v87.val[0] = (int8x16_t)vaddq_s64(vsubq_s64(v81, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v81, v81), v73)), v74);
  v87.val[2] = (int8x16_t)vaddq_s64(vsubq_s64(v80, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v80, v80), v73)), v74);
  v87.val[3] = (int8x16_t)vaddq_s64(vsubq_s64(v79, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v79, v79), v73)), v74);
  STACK[0x3A4] = (unint64_t)vrev64_s8(veor_s8(vadd_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v87, (int8x16_t)xmmword_19CAECB90), (int8x8_t)0xF9F9F9F9F9F9F9F9), (int8x8_t)0xBFBFBFBFBFBFBFBFLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(v60
                                        + 8 * (int)((614 * (((955 * (v59 ^ 0x44)) ^ 0x72ELL) == 8)) ^ v59 ^ 0x556))
                            - 8))();
}

void sub_19C6186B4()
{
  JUMPOUT(0x19C61853CLL);
}

uint64_t sub_19C6186C8@<X0>(char a1@<W8>)
{
  char v1;
  char v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = v4 - 1;
  v7 = ((((v2 + a1) ^ 0xBA) + v1 - (((v3 - 3) ^ 9) & (2 * ((v2 + a1) ^ 0xBA)))) ^ v1) * (v2 + a1 + 17);
  *((_BYTE *)&STACK[0x350] + v6) = (v7 - 2 * (v7 & 0x3F) - 65) ^ 0xBF;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((247 * (v6 == 0)) ^ v3)) - 8))();
}

uint64_t sub_19C618738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;

  v19 = *(_QWORD *)(a15 + 40);
  memset((void *)(v18 - 252), 69, 16);
  v20 = 583844137 * (((~(v18 - 216) & 0x8085B08A) - (~(v18 - 216) | 0x8085B08B)) ^ 0x905B0D06);
  STACK[0x3F0] = (unint64_t)&STACK[0x340];
  STACK[0x3E8] = v19;
  STACK[0x3F8] = v18 - 236;
  STACK[0x400] = v18 + 0xFD04FB326B69ABBLL;
  *(_DWORD *)(v18 - 212) = v20 + v15 + 1602;
  *(_DWORD *)(v18 - 208) = v20 ^ 0x65311F15;
  v21 = off_1E3D64110[v15 ^ 0x58](v18 - 216);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v17
                                                      + 8
                                                      * (((*(_DWORD *)(v18 - 216) == ((v15 - 37257396) & 0x23886CB ^ (v16 - 1417)))
                                                        * (((v15 - 49) | 4) + 1714)) ^ v15))
                                          - 8))(v21);
}

uint64_t sub_19C61886C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v10;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 8) + v0 - 0x592C18BA95D1DDEDLL);
  v7 = (v6 ^ 0x6075DAD7)
     + (*(unsigned __int8 *)(v4 + v0 - 0x592C18BA95D1DDEDLL) ^ 0x2013A140)
     + (((v3 - 1605) ^ 0x1E8) & (2 * v6))
     - ((2 * *(unsigned __int8 *)(v4 + v0 - 0x592C18BA95D1DDEDLL)) & 0xFF7F)
     - 1007761927;
  v8 = v0 + 1;
  v10 = v7 != 1148731920 || v8 == v2 + 16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((v10 | (16 * v10)) ^ v3)) - 8))();
}

uint64_t sub_19C618904@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v4 = 402930427
     * ((((v3 - 216) | 0x1B69D2786FCE509FLL) - (v3 - 216) + ((v3 - 216) & 0xE4962D879031AF60)) ^ 0x6EC9ECBC7577AC22);
  *(_DWORD *)(v3 - 216) = (a1 - 861034591) ^ v4;
  *(_DWORD *)(v3 - 212) = v4 + a1 - 861034591 - 83;
  STACK[0x3F8] = v1 - v4;
  *(_DWORD *)(v3 - 200) = -402930427
                        * ((((v3 - 216) | 0x6FCE509F) - (v3 - 216) + ((v3 - 216) & 0x9031AF60)) ^ 0x7577AC22);
  *(_DWORD *)(v3 - 192) = a1 - 861034591 - v4 - 178;
  *(_DWORD *)(v3 - 176) = v4 + a1 - 389757712;
  STACK[0x3E0] = v4 + 1148731920;
  v5 = ((uint64_t (*)(uint64_t))((char *)off_1E3D64110[a1 ^ 0x5D] - 12))(v3 - 216);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * *(int *)(v3 - 196)) - 8))(v5);
}

void sub_19C6189F4()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 48) = 480950058;
}

void sub_19C618A4C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) ^ (1305237457 * (a1 ^ 0xB9B9A6CE));
  __asm { BR              X11 }
}

uint64_t sub_19C618AF4(_QWORD *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8 * ((26 * (*(_DWORD *)(*a1 + v3) == ((((v4 - 536) | 3) + 706) ^ v2))) | v4))
                            - 12))();
}

uint64_t sub_19C618B2C@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a1 + (((&v5 | 0x74AD8F18) - (&v5 & 0x74AD8F18)) ^ 0xCD1429D6) * v2 + 26;
  v6 = v3;
  v7 = a2;
  return sub_19C5B3D5C((uint64_t)&v5);
}

void sub_19C618CC8(uint64_t a1)
{
  int v1;
  _DWORD v2[2];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8) ^ (1431787901 * ((-2 - ((a1 | 0x85E7A388) + (~(_DWORD)a1 | 0x7A185C77))) ^ 0x5188F6A0));
  v3 = *(_QWORD *)a1;
  v2[0] = (1575213817 * (v2 ^ 0x8D65B0CC)) ^ (v1 + 297);
  sub_19C5B73A0((uint64_t)v2);
  __asm { BR              X9 }
}

uint64_t sub_19C618DEC@<X0>(uint64_t a1@<X8>)
{
  unsigned int v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  _BOOL4 v6;

  v5 = (((v4 + v3) >> 4) & 0x497DFFE ^ 0x4928168) + (((v4 + v3) >> 5) ^ 0x61B2AF4B);
  v6 = ((v2 - 1107132253) & 0x41FD7FFF ^ 0x203094FB) + v5 < v1 - 2105768641;
  if (v1 > 0x7D837AC0 != v5 < 0x624BEFFF)
    v6 = v1 > 0x7D837AC0;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((v6 * ((v2 - 1285981604) & 0x4CA686BF ^ 0x17B)) ^ (v2 + 958)))
                            - 12))();
}

uint64_t sub_19C618EBC@<X0>(uint64_t a1@<X8>)
{
  char v1;
  int v2;
  unsigned int v3;

  v3 = ((v1 & 0x1F ^ 0x18 | 0xEFB42508) - (v1 & 0x1F ^ 0x18 | 0x104BDAF7) + 273406711) ^ 0xEF3C2018;
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((((v3 | 0x731ADD82) - (v3 | 0x8CE5227D) - 1931140483 != (((v2 - 492) | 0x505) ^ 0x7392DDCE))
                                * ((v2 ^ 0x36C) - 341)) | v2)))();
}

uint64_t sub_19C618F5C@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(a2
                                                     + 8
                                                     * (a1 ^ (1928 * ((v2 + v3) < 0x7FFFFFFF))))
                                         - ((a1 + 680) | 0xD6u)
                                         + 1230))((a1 + 680) | 0xD6u);
}

uint64_t sub_19C618FB4@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  char v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  unsigned int v10;
  _BOOL4 v11;

  v8 = a1 - 64;
  v9 = (_QWORD *)(v7 - 0x26866D3AFFDFE011);
  v10 = ((2 * (*(_DWORD *)(*v9 + 4 * (v3 - 1648559046)) ^ v5)) << ~(v4 ^ 3)) | ((*(_DWORD *)(*v9
                                                                                             + 4 * (v3 - 1648559047)) ^ v5) >> (v4 ^ 3));
  *(_DWORD *)(*v9 + 4 * (int)(((v8 + 958) ^ 0xC4A93A96) + 995541440)) = v10 + v5 - (v6 & (2 * v10));
  v11 = v2 + 1379349472 > -269794333;
  if (v2 >= 498339842)
    v11 = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(a2 + 8 * ((121 * !v11) ^ (v8 + 9))) - 8))();
}

void sub_19C6190A8()
{
  JUMPOUT(0x19C619014);
}

void sub_19C6190B0()
{
  _DWORD *v0;

  *v0 = 1323025765;
}

void sub_19C619284(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) + 1431787901 * (a1 ^ 0x2B90AAD7);
  __asm { BR              X9 }
}

uint64_t sub_19C619340@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, int a7, int a8, int a9)
{
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v13 = 402930427 * (((&a4 | 0xCD1FC8E9) - (&a4 & 0xCD1FC8E9)) ^ 0xD7A63454);
  a5 = v12;
  a6 = &STACK[0x7F8EAF18153CC817];
  a4 = &STACK[0x1B72FA547311DF20];
  a7 = v11 - v13 + 273;
  a9 = v13 ^ 0x78EBAB5E;
  v14 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(a1 + 8 * (v11 ^ 0x252)) - 12))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10
                                                      + 8
                                                      * ((470
                                                        * ((((v11 + 71) ^ (*(_DWORD *)(v12 - 0x23F2B20168D9FBDLL) == v9 + ((v11 + 71) | 0x51) - 883)) & 1) == 0)) ^ v11))
                                          - 8))(v14);
}

uint64_t sub_19C61943C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  unsigned int v10;
  uint64_t v11;
  int v12;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((15 * ((a10 ^ v10) < 0x15)) ^ v12))
                            - ((v12 - 351) | 0x60u)
                            - ((v12 + 17) | 0x1Au)
                            + 1542))();
}

uint64_t sub_19C619480()
{
  int v0;
  int v1;
  _DWORD *v2;
  uint64_t v3;
  unsigned int v4;

  *v2 = v1;
  v4 = ((2 * v1) & 0xFFEDE7EE)
     + (v1 ^ 0xFFF6F3F7)
     - ((2 * (((2 * v1) & 0xFFEDE7EE) + (v1 ^ 0xFFF6F3F7)) + 1185810) & 0xB77DF670)
     - 607648434
     + ((v0 - 306) | 0xB1);
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v3
                                                     + 8
                                                     * ((1328
                                                       * (((2 * v4) & 0xAF1531F6 ^ 0xA7153070)
                                                        + (v4 ^ 0x8C3463C3)
                                                        - 67635235 != 1401065688)) ^ v0))
                                         - 4))((v0 + 153));
}

uint64_t sub_19C61953C(uint64_t a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (a2 ^ (997 * ((v3 + v2 - 1468700923) > 7))))
                            - (((a2 - 499) | 0x294u) ^ 0x290)))();
}

uint64_t sub_19C61958C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1183 * (v2 - v3 - 4 >= ((a2 - 38638144) & 0x24D955D ^ 0x531uLL))) ^ a2))
                            - 4))();
}

uint64_t sub_19C6195DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((((a5 - 942) ^ 0x136) * (v5 < 0x20)) ^ a5)) - 4))();
}

uint64_t sub_19C619608(int a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;

  v6.i64[0] = 0x4545454545454545;
  v6.i64[1] = 0x4545454545454545;
  v7 = v4 + (((a1 ^ 0x2FD) - 298) ^ 0xAC7D6D53);
  v8 = *(int8x16_t *)(v2 + v7 - 15);
  v9 = *(int8x16_t *)(v2 + v7 - 31);
  v10 = v1 + v7;
  *(int8x16_t *)(v10 - 15) = veorq_s8(v8, v6);
  *(int8x16_t *)(v10 - 31) = veorq_s8(v9, v6);
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((1300 * ((v3 & 0xFFFFFFE0) == 32)) ^ ((a1 ^ 0x2FD) - 82))) - 8))();
}

void sub_19C619678()
{
  JUMPOUT(0x19C619638);
}

void sub_19C619684()
{
  uint64_t v0;
  int v1;

  *(_DWORD *)(v0 + 12) = v1 + 212;
}

void sub_19C6198F8(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 24) ^ (545147329
                             * ((-184725319 - (a1 ^ 0xD6223E5C | 0xF4FD50B9) + (a1 ^ 0xD6223E5C | 0xB02AF46)) ^ 0x7DD45176));
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v2 - 0x33ECBDF6999B6170);
  LODWORD(v10) = v1
               - 291962093
               * (((&v8 | 0xBAFD9269) - &v8 + (&v8 & 0x45026D90)) ^ 0xAB0F9F23)
               - 213;
  v12 = v6;
  v13 = v3;
  v8 = v2;
  v9 = &STACK[0x26866D3AFFDFE039];
  v11 = v5;
  off_1E3D64110[v1 ^ 0x7EF]((uint64_t)&v8);
  v7 = *(_QWORD *)(v2 - 0x33ECBDF6999B6178);
  LODWORD(v8) = v1
              + 1305237457 * ((&v8 & 0x786735E6 | ~(&v8 | 0x786735E6)) ^ 0x3E216CD7)
              - 1521;
  v9 = &STACK[0x26866D3AFFDFE049];
  v10 = v7;
  sub_19C5B3D5C((uint64_t)&v8);
  v8 = v4;
  LODWORD(v9) = (653146051
               * ((-811315147
                 - (&v8 ^ 0x863B8F6D | 0xCFA45035)
                 + (&v8 ^ 0x863B8F6D | 0x305BAFCA)) ^ 0x1C749545)) ^ (v1 - 1664);
  sub_19C5B850C((uint64_t)&v8);
  __asm { BR              X8 }
}

uint64_t sub_19C619B68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;

  v5 = *(_QWORD *)(v8 + 32);
  v6 = 583844137 * ((-353127087 - ((v4 - 144) | 0xEAF3B551) + ((v4 - 144) | 0x150C4AAE)) ^ 0x5D2F723);
  *(_DWORD *)(v4 - 128) = v6 + 222781783;
  *(_DWORD *)(v4 - 144) = v6 + v3 - 262;
  *(_QWORD *)(v4 - 136) = v10;
  sub_19C5F1CDC((_DWORD *)(v4 - 144));
  *(_QWORD *)(v4 - 120) = v2;
  *(_QWORD *)(v4 - 112) = v1;
  *(_QWORD *)(v4 - 144) = v0;
  *(_QWORD *)(v4 - 136) = v1;
  *(_QWORD *)(v4 - 104) = v10;
  *(_DWORD *)(v4 - 128) = v3
                        - 291962093
                        * (((((v4 - 144) | 0x2F981028) ^ 0xFFFFFFFE) - (~(v4 - 144) | 0xD067EFD7)) ^ 0xC195E29D)
                        - 213;
  v9(v4 - 144);
  *(_DWORD *)(v4 - 144) = v3 + 1305237457 * ((v4 - 144) ^ 0xB9B9A6CE) - 1521;
  *(_QWORD *)(v4 - 136) = v5;
  *(_QWORD *)(v4 - 128) = v1;
  return sub_19C5B3D5C(v4 - 144);
}

uint64_t sub_19C619E54(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  unsigned int v9;
  _BOOL4 v11;

  v1 = 961177747 * (((a1 | 0x350C175F) - (a1 & 0x350C175F)) ^ 0x125EE643);
  v2 = *(_DWORD *)(a1 + 16) - v1;
  v3 = *(_DWORD *)(a1 + 4) - v1;
  if (v3 < 0)
    v3 = -v3;
  v4 = ((v3 >> 4) & 0x3FBB37E) + ((v3 >> 5) ^ 0x5DFDD9BF);
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x26866D3AFFDFE015);
  v7 = v5 - 1323025765;
  v6 = v5 - 1323025765 < 0;
  v8 = 1323025765 - v5;
  if (!v6)
    v8 = v7;
  v9 = v8 + 313219547;
  v11 = (v4 - 1263697892) > 0x12AB59DA && v4 - 1263697892 < v9;
  return (*((uint64_t (**)(void))off_1E3D64110[v2 ^ 0x458] + ((28 * v11) ^ v2)))();
}

unsigned int *sub_19C619F44@<X0>(unsigned int *result@<X0>, int a2@<W8>)
{
  char v2;
  uint64_t v3;
  int v4;

  *result = ((*(_DWORD *)(*(_QWORD *)(v3 - 0x26866D3AFFDFE011) + 4 * (v4 - 1576917439)) ^ 0xFB2EA9DB) >> v2) & 1 ^ a2;
  return result;
}

_DWORD *sub_19C619F88@<X0>(_DWORD *result@<X0>, int a2@<W8>)
{
  *result = a2;
  return result;
}

void sub_19C619F90(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _DWORD v3[2];
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 12) - 1431787901 * (((a1 | 0x3F1050A9) - a1 + (a1 & 0xC0EFAF56)) ^ 0x1480FA7E);
  v2 = *(_QWORD *)a1;
  v3[0] = (1575213817 * ((v3 & 0xDF2C1199 | ~(v3 | 0xDF2C1199)) ^ 0xADB65EAA)) ^ (v1 - 1443);
  v4 = v2;
  sub_19C5B73A0((uint64_t)v3);
  __asm { BR              X8 }
}

void sub_19C61A090()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;

  if ((*(_DWORD *)(v2 - 0x26866D3AFFDFE015) - 1323025766) >= 0x7FFFFFFF)
    v3 = v1;
  else
    v3 = v1 + 2;
  *(_DWORD *)(v0 + 8) = v3;
}

void sub_19C61A0FC(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_19C61A19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31)
{
  uint64_t v31;
  int v32;
  uint64_t v34;

  v32 = *(_DWORD *)(a2 + 4);
  v34 = *(_QWORD *)(a2 + 8);
  HIDWORD(a20) = -1457532144;
  a31 = 1411270856;
  HIDWORD(a17) = v32 - 1055960901;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, unint64_t *, unint64_t *, unint64_t *, uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v31 + 5120) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, a9, &STACK[0x238], a11, &STACK[0x7C4785EAAD9B7D9F], &STACK[0x75D2FCC4ED1CBC5F], &STACK[0x473E55EB2C47D9EC], &STACK[0xAA902E15648DD6A], a16, a17, &a31, v34,
           a20,
           0x826D0E73EF0AF45,
           0);
}

uint64_t sub_19C61A2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  uint64_t v9;
  int v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (v7 | (8 * (v8 == v10))))
                            + a7
                            - ((61 * (v7 ^ 0x4FA) - 134555915) & 0xDF47FFEF)))();
}

uint64_t sub_19C61A328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v18;
  int v19;
  uint64_t v20;

  return ((uint64_t (*)(void))(*(_QWORD *)(v20
                                        + 8
                                        * ((((v18 ^ 0x2DC) - 1052)
                                          * (((((v19 - 1055960898) & 0xFFFFFFFC)
                                             - 478609972
                                             - ((2 * (v19 - 1055960898)) & 0xC6F1FB98)) ^ 0xE378FDCC) != a18)) ^ v18))
                            - 4))();
}

uint64_t sub_19C61A388@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _BOOL4 v20;

  v20 = a1 == 1411270856 || a15 - v16 != -919199326;
  return ((uint64_t (*)(void))(*(_QWORD *)(v18 + 8 * ((106 * ((((v15 - 949) ^ v20) & 1) == 0)) ^ v15))
                            - ((v15 - 949) ^ (v17 - 128) ^ a9)))();
}

uint64_t sub_19C61A3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22)
{
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  _BOOL4 v27;

  v25 = ((v22 + 683484293) | 4) - 315;
  v26 = v22 + 683484276;
  v27 = a22 + 1564597921 < (v23 + 645398595);
  if ((a22 + 1564597921) < 0x6568AF88 != (v23 + 645398595) < 0x6568AF88)
    v27 = (v23 + 645398595) < 0x6568AF88;
  return ((uint64_t (*)(void))(*(_QWORD *)(v24 + 8 * ((!v27 * (v25 ^ 0x1C7)) ^ v26)) - 12))();
}

uint64_t sub_19C61A590()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((63 * (*(_DWORD *)(v4 + 48 * (v1 + v5) + 36) != v1)) ^ v0))
                            - ((v2 + v0 + 1349899610) & 0xD8474EB5 ^ 0x43DLL)))();
}

uint64_t sub_19C61A5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19)
{
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v24 = 1305237457 * ((~((v23 - 160) | 0x945E95B7) + ((v23 - 160) & 0x945E95B7)) ^ 0xD218CC86);
  STACK[0x2E0] = a19;
  STACK[0x2C0] = a15;
  STACK[0x2D0] = a14;
  STACK[0x2C8] = a12;
  *(_DWORD *)(v23 - 136) = v24 + v19 + 338297657;
  *(_DWORD *)(v23 - 132) = v24 + v22 + 16;
  STACK[0x2F0] = a13;
  v25 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(a8 + 8 * (v22 - 187)) - 8))(v23 - 160);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8
                                                            * ((619 * (*(_DWORD *)(v23 - 120) == 480950058)) ^ v22))
                                          - (((v22 ^ (v20 - 252)) - v20 + 1567) ^ 0x617)))(v25);
}

uint64_t sub_19C61A6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 8 * ((60 * ((((71 * (v9 ^ 0x61B)) ^ (*(_DWORD *)(v11 + 48 * (v8 + v12)) == 1056653450)) & 1) == 0)) ^ v9)) - 4))(a1, a2, a3, a4, a5, a6, a7, v7);
}

uint64_t sub_19C61A748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8
                                        * ((983
                                          * ((v7 ^ 0xA91FD310) == (((v8 - 1761424210) | 0x40401004) ^ 0x174662B8) + v9)) ^ v8))
                            + a7
                            - ((v8 - 2092802908) | 0x5400800Eu)))();
}

uint64_t sub_19C61A7C0@<X0>(int a1@<W5>, int a2@<W8>)
{
  int v2;
  uint64_t v5;
  uint64_t v7;
  int v8;

  if ((v2 + 1457532157) <= 0x19 && ((1 << (v2 - 3)) & 0x2000A03) != 0)
  {
    v7 = a2 & 0xFFFFFFFFFFFFFFFLL;
    if (v7)
    {
      if (v7 == 3)
      {
        v8 = (*(uint64_t (**)())(v5 + 48 * a2 + 8))();
        __asm { BR              X8 }
      }
      __asm { BR              X17 }
    }
    __asm { BR              X11 }
  }
  return a1 ^ 0xE355ECF4;
}

void sub_19C61ADCC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) + 291962093 * (((a1 | 0xAE2E1E7A) - a1 + (a1 & 0x51D1E185)) ^ 0xBFDC1330);
  __asm { BR              X14 }
}

uint64_t sub_19C61AF08()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (v2 >= 0)
    v4 = v2;
  else
    v4 = -v2;
  if (v0 >= 0)
    v5 = v0;
  else
    v5 = -v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v1 ^ (1439 * (v4 > v5)))) - 8))();
}

uint64_t sub_19C61AF40()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (int)((((v2 ^ 0x77F1E73F)
                                                + (v0 & 0xEFE3CE7E)
                                                + ((v1 + 1819155679) & 0x9391E3E7)
                                                - 2012342982 >= ((((v1 + 1819155679) & 0x9391E3E7) + 957) ^ 0x7FFFF9BC))
                                               * ((((v1 + 1819155679) & 0x9391E3E7) - 558) ^ 0x4F9)) ^ (v1 + 1819155679) & 0x9391E3E7))
                            - 4))();
}

void sub_19C61AFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)(a2 + v2) = 1323025765;
}

uint64_t sub_19C61C814(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  _QWORD v8[3];
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 16)
     - 511487701 * ((2 * ((a1 ^ 0xB8D50854) & 0x515B4D0F) - (a1 ^ 0xB8D50854) + 782545648) ^ 0x8E18CE6C);
  v4 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = 402930427 * (((v8 | 0xCDB9E118) - v8 + (v8 & 0x32461EE0)) ^ 0xD7001DA5);
  v9 = v2 - v6 + 705637805;
  v11 = v6 ^ 0x78C274A2;
  v8[0] = v5;
  v8[1] = v3;
  v8[2] = v4;
  result = ((uint64_t (*)(uint64_t))((char *)off_1E3D64110[v2 ^ 0xD5F0D6B6] - 12))((uint64_t)v8);
  *(_DWORD *)(a1 + 32) = v10;
  return result;
}

uint64_t sub_19C61C948(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  int v6;
  BOOL v7;
  uint64_t v8;

  v1 = 1305237457 * ((-2 - ((~result | 0x21626499E965B1) + (result | 0xFFDE9D9B66169A4ELL))) ^ 0xD17CFB152050C37FLL);
  v2 = *(_QWORD *)(result + 16) ^ v1;
  v3 = *(_QWORD *)(result + 8) ^ v1;
  v4 = (uint64_t)v3 < (uint64_t)v2;
  v5 = v3 < v2;
  v6 = v4;
  if (((*(_DWORD *)(result + 32) ^ v1) & 1) != 0)
    v5 = v6;
  v7 = !v5;
  v8 = 36;
  if (!v7)
    v8 = 40;
  *(_DWORD *)(result + 28) = *(_DWORD *)(result + v8) ^ v1 ^ (*(_DWORD *)result + v1);
  return result;
}

uint64_t sub_19C61C9F0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 24);
  return 0;
}

uint64_t sub_19C61CA08(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = 1575213817 * (((a1 | 0x702D6850) - a1 + (a1 & 0x8FD297AF)) ^ 0xFD48D89C);
  v3 = *(_DWORD *)(a1 + 24) ^ v2;
  v5 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = 2061182703 * (*(_DWORD *)(a1 + 28) + v2) - ((-172601890 * (*(_DWORD *)(a1 + 28) + v2) + 1086900142) & 0xC2416158);
  v7 = 961177747 * ((&v10 + 1722009944 - 2 * ((unint64_t)&v10 & 0x66A3C958)) ^ 0x41F13844);
  v8 = v7 ^ (v2 + *(_DWORD *)(a1 + 16) - 73331635);
  v15 = v3 + v7 + 871892197;
  v13 = v8;
  v14 = v6 + v7 + 25498755;
  v10 = v4;
  v12 = v5;
  result = off_1E3D64110[v3 ^ 0xCC07FD39]((uint64_t)&v10);
  *(_DWORD *)(a1 + 20) = v11;
  return result;
}

uint64_t T8HkBFEVEnY(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unsigned int v6;
  _BYTE v8[8];
  _QWORD v9[2];
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = (unint64_t)&v8[qword_1EE425038 + qword_1EE425000];
  qword_1EE425038 = 2004212711 * v5 - 0x7AEADA820E769987;
  qword_1EE425000 = 2004212711 * (v5 ^ 0x7AEADA820E769987);
  v6 = 291962093 * ((((2 * v9) | 0x8156C28A) - v9 - 1084973381) ^ 0x51596C0F);
  v11 = (a1 ^ 0xFC57FD3E) + ((2 * a1) & 0xF8AFFA7C) - v6 + 1207825126;
  v12 = v6 ^ ((a3 ^ 0x6FFFFBFF) - 603984096 + ((2 * a3) & 0xDFFFF7FE));
  v13 = v6 ^ 0x5CD;
  v14 = a2;
  v9[0] = a4;
  v9[1] = a5;
  ((uint64_t (*)(uint64_t))((char *)off_1E3D64110[((-25
                                                                                          * ((qword_1EE425000
                                                                                            - (-25 * v5
                                                                                             + 121)) ^ 0x87)) ^ byte_19CB02700[byte_19CAFC390[(-25 * ((qword_1EE425000 - (-25 * v5 + 121)) ^ 0x87))] ^ 0x12])
                                                         + 236]
                                   - 8))((uint64_t)v9);
  return v10 ^ 0x1CAAB72Au;
}

uint64_t sub_19C61CD14(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  _DWORD v10[4];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = 1575213817 * ((-2 - ((a1 | 0x20BA2424) + (~(_DWORD)a1 | 0xDF45DBDB))) ^ 0x52206B17);
  v3 = *(_DWORD *)(a1 + 24) ^ v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = v2 + *(_DWORD *)a1 + 1167995306;
  v8 = 583844137 * ((v10 - 1249890239 - 2 * ((unint64_t)v10 & 0xB5803041)) ^ 0xA55E8DCC);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = v6;
  v13 = v5;
  v14 = v4;
  v10[1] = v3 + v8 + 1006215990;
  v10[2] = v7 ^ v8;
  result = off_1E3D64110[v3 ^ 0xC4066354]((uint64_t)v10);
  *(_DWORD *)(a1 + 28) = v10[0];
  return result;
}

void sub_19C61CE44()
{
  _BYTE v0[8];
  unsigned int v1;
  unsigned int v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  qword_1EE425010 = 2004212711 * ((unint64_t)&v0[qword_1EE425010 + qword_1EE425000] ^ 0x7AEADA820E769987);
  qword_1EE425000 = qword_1EE425010;
  v3 = (uint64_t (*)(uint64_t))&unk_1EE431840;
  v2 = 1001500783 * (((&v1 | 0xFA599E8F) + (~&v1 | 0x5A66170)) ^ 0xB0ED613A) + 479;
  sub_19C5EF570((uint64_t)&v1);
  v3 = off_1E3D64110[((-25 * ((qword_1EE425000 - qword_1EE425010) ^ 0x87)) ^ byte_19CAFC490[byte_19CB2C730[(-25 * ((qword_1EE425000 - qword_1EE425010) ^ 0x87))] ^ 0x42])
                   + 85];
  v2 = 1001500783
     * (((&v1 | 0x69D88424) - &v1 + (&v1 & 0x96277BD8)) ^ 0x236C7B90)
     + 479;
  sub_19C5EF570((uint64_t)&v1);
  LOBYTE(v2) = (-109 * ((~&v1 | 0xE2) + (&v1 | 0x1D))) ^ 0x36;
  v1 = 961177747 * (((~&v1 | 0xFC866FE2) + (&v1 | 0x379901D)) ^ 0x242B6100) + 1222;
  sub_19C609244((uint64_t)&v1);
}

uint64_t sub_19C61D048(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  int v6;
  int v7;
  _DWORD *v8;

  v1 = 1431787901 * (((result | 0xA4A86D44794EECB9) - (result & 0xA4A86D44794EECB9)) ^ 0xE247B5A252DE466ELL);
  v2 = *(_QWORD *)(result + 8) + v1;
  v3 = *(_QWORD *)(result + 16) ^ v1;
  v4 = v3 == v2;
  v5 = v3 > v2;
  v6 = v4;
  if (((*(_DWORD *)(result + 28) - (_DWORD)v1) & 1) != 0)
    v7 = v5;
  else
    v7 = v6;
  if (v7)
    v8 = (_DWORD *)result;
  else
    v8 = (_DWORD *)(result + 24);
  *(_DWORD *)(result + 4) = (*v8 + v1) ^ (*(_DWORD *)(result + 32) + v1);
  return result;
}

uint64_t sub_19C61D0D0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_19C61D0E8(int *a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t result;
  int v5;

  v2 = a1[1] ^ (583844137 * ((a1 & 0x1D4F369D | ~(a1 | 0x1D4F369D)) ^ 0xF26E74EF));
  v3 = v2 + 643747725;
  result = ((uint64_t (*)(uint64_t (*)(uint64_t), char *))off_1E3D64110[v2 ^ 0xD9A1300A])(off_1E3D64110[v2 + 643747725], (char *)off_1E3D64110[v2 & 0x205807E8] - 12);
  v5 = *(_DWORD *)off_1E3D64110[v3 + 58];
  if ((_DWORD)result != ((2 * (_DWORD)result) & 0x39556E54))
    v5 = -480907884;
  *a1 = v5;
  return result;
}

uint64_t sub_19C61D1B4(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 8) - 0xCF56532DB59BD67) = 0x1000000;
  return result;
}

uint64_t sub_19C61D1D4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 88) = 34;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 8);
  return 0;
}

void sub_19C61D1F4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[4];
  unsigned int v3;
  char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = qword_1EE425000 - qword_1EE425AB0 - (_QWORD)&v1;
  qword_1EE425AB0 = (2004212711 * v0) ^ 0x7AEADA820E769987;
  qword_1EE425000 = 2004212711 * (v0 ^ 0x7AEADA820E769987);
  v4 = (char *)off_1E3D64110[((-25 * ((qword_1EE425000 + qword_1EE425AB0) ^ 0x87)) ^ byte_19CB02700[byte_19CAFC390[(-25 * ((qword_1EE425000 + qword_1EE425AB0) ^ 0x87))] ^ 0x54])
                           + 17]
     - 4;
  v3 = 1001500783 * (v2 ^ 0x4AB4FFB4) + 479;
  sub_19C5EF570((uint64_t)v2);
}

uint64_t sub_19C61D300(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_19C61D318(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = 402930427 * (((a1 | 0x13E3F966) - a1 + (a1 & 0xEC1C0699)) ^ 0x95A05DB);
  v3 = *(_DWORD *)(a1 + 48) - v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = 961177747 * ((((2 * &v10) | 0x13EB67B2) - &v10 - 167097305) ^ 0x2EA742C5);
  v14 = *(_DWORD *)(a1 + 8) - v2 + v8 - 24028438;
  v10 = v4;
  v12 = v7;
  v13 = v5;
  v15 = v6;
  v16 = v3 + 114529861 - v8 + 103;
  result = ((uint64_t (*)(uint64_t))((char *)off_1E3D64110[v3 + 114529861] - 4))((uint64_t)&v10);
  *(_DWORD *)(a1 + 12) = v11;
  return result;
}

uint64_t sub_19C61D44C(uint64_t result)
{
  unint64_t v1;
  int v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  _BOOL4 v9;
  int v10;
  int v11;

  v1 = 402930427 * (((result | 0xA6437F5B6077367) - result + (result & 0xF59BC80A49F88C98)) ^ 0x7FC40931ACBE8FDALL);
  v2 = *(_DWORD *)(result + 16) + v1;
  v3 = *(_DWORD *)result ^ v1;
  v4 = *(_QWORD *)(result + 32) + v1;
  v5 = *(_QWORD *)(result + 8) - v1;
  v6 = *(_DWORD *)(result + 4) - v1;
  v7 = *(_DWORD *)(result + 24) + v1;
  v8 = v4 >= v5;
  v9 = v4 != v5;
  v10 = v8;
  if ((v2 & 1) != 0)
    v11 = v10;
  else
    v11 = v9;
  if (v11)
    v7 = v3;
  *(_DWORD *)(result + 20) = v7 ^ v6;
  return result;
}

char *sub_19C61D4F0(char *result, char *a2, unint64_t a3)
{
  unint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  BOOL v11;
  char v12;
  unint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  if (((a2 ^ result) & 7) != 0)
  {
    if ((a3 + 7) >= 8)
      return (char *)((uint64_t (*)(void))((char *)&loc_19C61D5C4 + 4 * byte_19CAFC590[a3 & 7]))();
  }
  else
  {
    v3 = -(int)result & 7;
    switch((int)v3)
    {
      case 1:
        goto LABEL_11;
      case 2:
        goto LABEL_10;
      case 3:
        goto LABEL_9;
      case 4:
        goto LABEL_8;
      case 5:
        goto LABEL_7;
      case 6:
        goto LABEL_6;
      case 7:
        v4 = *result++;
        *a2++ = v4;
LABEL_6:
        v5 = *result++;
        *a2++ = v5;
LABEL_7:
        v6 = *result++;
        *a2++ = v6;
LABEL_8:
        v7 = *result++;
        *a2++ = v7;
LABEL_9:
        v8 = *result++;
        *a2++ = v8;
LABEL_10:
        v9 = *result++;
        *a2++ = v9;
LABEL_11:
        v10 = *result++;
        *a2++ = v10;
        break;
      default:
        break;
    }
    v11 = a3 >= v3;
    v12 = a3 - v3;
    if (!v11)
      v12 = 0;
    v13 = v12 & 7;
    switch(v13)
    {
      case 0uLL:
        return result;
      case 1uLL:
        goto LABEL_24;
      case 2uLL:
        goto LABEL_23;
      case 3uLL:
        goto LABEL_22;
      case 4uLL:
        goto LABEL_21;
      case 5uLL:
        goto LABEL_20;
      case 6uLL:
        goto LABEL_19;
      case 7uLL:
        v14 = *result++;
        *a2++ = v14;
LABEL_19:
        v15 = *result++;
        *a2++ = v15;
LABEL_20:
        v16 = *result++;
        *a2++ = v16;
LABEL_21:
        v17 = *result++;
        *a2++ = v17;
LABEL_22:
        v18 = *result++;
        *a2++ = v18;
LABEL_23:
        v19 = *result++;
        *a2++ = v19;
LABEL_24:
        *a2 = *result;
        break;
      default:
        result = (char *)((uint64_t (*)(void))((char *)&loc_19C61D610 + 4 * byte_19CAFC59F[(v13 >> 3) & 7]))();
        break;
    }
  }
  return result;
}

_BYTE *sub_19C61D6B0(_BYTE *result, char a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = -(int)result & 7;
  if (v3 > a3)
    LODWORD(v3) = a3;
  switch((int)v3)
  {
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_7;
    case 5:
      goto LABEL_6;
    case 6:
      goto LABEL_5;
    case 7:
      *result++ = a2;
LABEL_5:
      *result++ = a2;
LABEL_6:
      *result++ = a2;
LABEL_7:
      *result++ = a2;
LABEL_8:
      *result++ = a2;
LABEL_9:
      *result++ = a2;
LABEL_10:
      *result++ = a2;
      break;
    default:
      break;
  }
  v4 = a3 - v3;
  v6 = v4;
  v5 = v4 & 7;
  switch(v6)
  {
    case 0uLL:
      return result;
    case 1uLL:
      goto LABEL_20;
    case 2uLL:
      goto LABEL_19;
    case 3uLL:
      goto LABEL_18;
    case 4uLL:
      goto LABEL_17;
    case 5uLL:
      goto LABEL_16;
    case 6uLL:
      goto LABEL_15;
    case 7uLL:
      *result++ = a2;
LABEL_15:
      *result++ = a2;
LABEL_16:
      *result++ = a2;
LABEL_17:
      *result++ = a2;
LABEL_18:
      *result++ = a2;
LABEL_19:
      *result++ = a2;
LABEL_20:
      *result = a2;
      break;
    default:
      result = (_BYTE *)((uint64_t (*)(void))((char *)&loc_19C61D740 + 4 * byte_19CAFC5B6[(v5 >> 3) & 7]))();
      break;
  }
  return result;
}

uint64_t sub_19C61D7A4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 16) - 1001500783 * ((a1 & 0x2E5937E8 | ~(a1 | 0x2E5937E8)) ^ 0x9B1237A3);
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  v6 = v2;
  v4 = v1 - 1980347521 * (&v4 ^ 0xB9E440FD) - 459629450;
  return ((uint64_t (*)(uint64_t))((char *)off_1E3D64110[v1 ^ 0x1B65694B] - 12))((uint64_t)&v4);
}

#error "19C61D878: too big function (funcsize=0)"

uint64_t sub_19C74C394(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v6;
  int v7;

  v1 = 653146051
     * (((result | 0x39F1D44DD111CA95) - (result | 0xC60E2BB22EEE356ALL) - 0x39F1D44DD111CA96) ^ 0x96063FD27B057F77);
  v2 = *(_QWORD *)(result + 32) + v1;
  v3 = *(_QWORD *)(result + 8) ^ v1;
  v4 = v3 == v2;
  v5 = v3 > v2;
  if (((*(_DWORD *)(result + 20) ^ (653146051
                                   * (((result | 0xD111CA95)
                                     - (result | 0x2EEE356A)
                                     + 787363178) ^ 0x7B057F77))) & 1) != 0)
    v6 = v5;
  else
    v6 = v4;
  if (v6)
    v7 = *(_DWORD *)(result + 24)
       - 653146051 * (((result | 0xD111CA95) - (result | 0x2EEE356A) + 787363178) ^ 0x7B057F77);
  else
    v7 = *(_DWORD *)(result + 28) ^ (653146051
                                   * (((result | 0xD111CA95) - (result | 0x2EEE356A) + 787363178) ^ 0x7B057F77));
  *(_DWORD *)result = v7 ^ (*(_DWORD *)(result + 40)
                          + 653146051 * (((result | 0xD111CA95) - (result | 0x2EEE356A) + 787363178) ^ 0x7B057F77));
  return result;
}

void sub_19C74C438(_DWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)((char *)off_1E3D64110[*a1
                                       + 1305237457
                                       * ((a1 & 0x184B74F6 | ~(a1 | 0x184B74F6)) ^ 0x5E0D2DC7)
                                       - 145037880]
                 + 804);
  v2 = *v1;
  v4 = (1980347521 * ((-257107981 - (&v3 | 0xF0ACD7F3) + (&v3 | 0xF53280C)) ^ 0xB6B768F1)) ^ (*a1 + 1305237457 * ((a1 & 0x184B74F6 | ~(a1 | 0x184B74F6)) ^ 0x5E0D2DC7) - 145036630);
  v3 = v2;
  sub_19C5CB234((uint64_t)&v3);
  *v1 = 0;
}

void sub_19C74C53C(_DWORD *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *a1 + 545147329 * ((a1 & 0x360E977D | ~(a1 | 0x360E977D)) ^ 0x6905A8EE) + 1675821302;
  v2 = *(_QWORD *)((char *)off_1E3D64110[*a1
                                       + 545147329
                                       * ((a1 & 0x360E977D | ~(a1 | 0x360E977D)) ^ 0x6905A8EE)
                                       + 1675821229]
                 - 4);
  v3 = (402930427 * (((&v2 | 0xE99A655B) - (&v2 & 0xE99A655B)) ^ 0xF32399E6)) ^ v1;
  sub_19C5D187C((uint64_t)&v2);
}

uint64_t sub_19C74C624(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;

  v1 = *(_QWORD *)(result + 8);
  v2 = (*(_DWORD *)(result + 4) ^ (961177747 * ((result & 0xB495536F | ~(result | 0xB495536F)) ^ 0x6C385D8C)))
     - 485804203;
  v3 = (((*(unsigned __int8 *)(v1 + v2) - ((2 * *(unsigned __int8 *)(v1 + v2)) & 0x1C)) << 24) + 234881024) ^ 0xE000000;
  v4 = *(unsigned __int8 *)(v1
                          + (*(_DWORD *)(result + 4) ^ (961177747
                                                      * ((result & 0xB495536F | ~(result | 0xB495536F)) ^ 0x6C385D8C)))
                          - 485804202);
  v5 = (((v4 - ((2 * v4) & 0x34)) << 16) + 152698880) ^ 0x91A0000;
  v6 = (v5 - ((2 * v5) & 0x4CE40000) + 645035284) ^ 0x26727514 | (v3 - ((2 * v3) & 0x44444444) + 578119957) ^ 0x22756915;
  v7 = *(unsigned __int8 *)(v1
                          + (*(_DWORD *)(result + 4) ^ (961177747
                                                      * ((result & 0xB495536F | ~(result | 0xB495536F)) ^ 0x6C385D8C)))
                          - 485804201);
  v8 = (((v7 - ((2 * v7) & 0x11C)) << 8) + 1394773504) ^ 0x53228E00;
  v9 = (v6 - ((2 * v6) & 0xFD5FEF6C) - 22022218) ^ 0xFEAFF7B6 | (v8 - ((2 * v8) & 0x63207800) + 1905278202) ^ 0x71903CFA;
  LODWORD(v1) = *(unsigned __int8 *)(v1
                                   + (*(_DWORD *)(result + 4) ^ (961177747
                                                               * ((result & 0xB495536F | ~(result | 0xB495536F)) ^ 0x6C385D8C)))
                                   - 485804200);
  *(_DWORD *)(result + 16) = (v9 - ((2 * v9) & 0x88C1FA0E) - 1000276729) ^ 0xC460FD07 | (v1
                                                                                       - ((2 * v1) & 0xFFFFFFBF)
                                                                                       - 1422793505) ^ 0xAB31E4DF;
  return result;
}

uint64_t sub_19C74C7A0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 8);
  return 0;
}

#error "19C74C7B8: too big function (funcsize=0)"

void JsonMapImpl::JsonMapImpl(JsonMapImpl *this)
{
  _BYTE v2[8];
  uint64_t *v3;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)this);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)this);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v2, 0, 0, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)this, (uint64_t)v2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v3, v2[0]);
}

void sub_19C7B3370(_Unwind_Exception *a1)
{
  uint64_t **v1;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  v4 = *(_BYTE *)a1;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)a2 = v4;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t **nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(uint64_t **a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a1 + 1, *(unsigned __int8 *)a1);
  return a1;
}

uint64_t JsonMapImpl::JsonMapImpl(uint64_t a1, _QWORD *a2)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  JsonMapImpl::deserialize((_BYTE *)a1, a2);
  return a1;
}

void sub_19C7B349C(_Unwind_Exception *a1)
{
  uint64_t **v1;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v1);
  _Unwind_Resume(a1);
}

_QWORD *JsonMapImpl::deserialize(_BYTE *a1, _QWORD *a2)
{
  void *exception;

  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Input stream is not valid");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return nlohmann::operator>>(a2, a1);
}

void sub_19C7B351C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL JsonMapImpl::getKeys(uint64_t a1, uint64_t *a2)
{
  _BOOL8 result;
  __int128 *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8[4];
  unsigned __int8 *v9[4];

  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(v9, a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_begin(v9);
  while (1)
  {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(v8, a1);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(v8);
    result = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(v9, v8);
    if (result)
      break;
    v5 = (__int128 *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(v9);
    v6 = a2[1];
    if (v6 >= a2[2])
    {
      v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v5);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v5);
      v7 = v6 + 24;
    }
    a2[1] = v7;
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(v9);
  }
  return result;
}

uint64_t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(_QWORD *a1)
{
  nlohmann::detail::exception *exception;
  _QWORD v3[3];

  if (!*a1)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key();
  if (*(_BYTE *)*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v3, "cannot use key() for non-object iterators");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(207, (uint64_t)v3, exception);
  }
  return a1[1] + 32;
}

void sub_19C7B36F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(unsigned __int8 **result)
{
  int v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  BOOL v5;

  if (!*result)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++();
  v1 = **result;
  if (v1 == 2)
  {
    result[2] += 16;
  }
  else if (v1 == 1)
  {
    v2 = result[1];
    v3 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = *(unsigned __int8 **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (unsigned __int8 *)*((_QWORD *)v2 + 2);
        v5 = *(_QWORD *)v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    result[1] = v4;
  }
  else
  {
    ++result[3];
  }
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(uint64_t a1, const void **a2)
{
  nlohmann::detail::exception *exception;
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  __int128 v9;
  std::string::size_type v10;

  if (*(_BYTE *)a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    v6 = std::string::insert(&v8, 0, "cannot use at() with ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10 = v6->__r_.__value_.__r.__words[2];
    v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(304, (uint64_t)&v9, exception);
  }
  return std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::at(*(_QWORD *)(a1 + 8), a2);
}

void sub_19C7B3870(uint64_t a1, std::string *a2, __int128 a3)
{
  __break(1u);
}

void sub_19C7B3908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  int v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_19C7B396C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a1, a2);
}

void sub_19C7B39F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void JsonMapImpl::getObject(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[8];
  uint64_t *v7;
  _BYTE v8[8];
  uint64_t *v9;

  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(a1, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v6, v4);
  v5 = operator new();
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v8, (uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v5, (uint64_t)v8);
  *a3 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v7, v6[0]);
}

void sub_19C7B3AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v11;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a11);
  MEMORY[0x1A1AD6260](v11, 0x1022C40B06DCE69);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

void JsonMapImpl::setString(unsigned __int8 *a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  _BYTE v6[8];
  uint64_t *v7;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v6, a3);
  v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](a1, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)v5, (uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v7, v6[0]);
}

void sub_19C7B3B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](unsigned __int8 *a1, const void **a2)
{
  int v4;
  _QWORD *v5;
  uint64_t **v6;
  nlohmann::detail::exception *exception;
  char *v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  __int128 v13;
  std::string::size_type v14;

  v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *v5 = v5 + 1;
    *((_QWORD *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    v4 = *a1;
  }
  if (v4 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v12, v9);
    v10 = std::string::insert(&v12, 0, "cannot use operator[] with a string argument with ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v14 = v10->__r_.__value_.__r.__words[2];
    v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(305, (uint64_t)&v13, exception);
  }
  v6 = (uint64_t **)*((_QWORD *)a1 + 1);
  *(_QWORD *)&v13 = a2;
  return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v13)+ 7;
}

void sub_19C7B3CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

_QWORD *nlohmann::operator>>(_QWORD *a1, _BYTE *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[2];
  _BYTE v10[24];
  _BYTE *v11;
  _BYTE v12[24];
  _BYTE *v13;
  void *v14[20];

  v14[19] = *(void **)MEMORY[0x1E0C80C00];
  v9[0] = a1;
  v9[1] = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v11 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>((uint64_t)v9, (uint64_t)v10, 1, 0, (uint64_t)v12);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse((uint64_t)v12, 0, a2);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v14);
  v4 = v13;
  if (v13 == v12)
  {
    v5 = 4;
    v4 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v11;
  if (v11 == v10)
  {
    v7 = 4;
    v6 = v10;
    goto LABEL_10;
  }
  if (v11)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)v9);
  return a1;
}

void sub_19C7B3E14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list v3;
  uint64_t v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD *);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~parser((uint64_t)va2);
  v3 = (va_list)v12;
  if (v12 == (_QWORD *)va1)
  {
    v4 = 4;
    va_copy(v3, va1);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)va);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t JsonMapImpl::serialize(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  const std::locale::facet *v3;
  std::locale v5;

  *(uint64_t *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 24) = 4;
  v2 = nlohmann::operator<<(a2, a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v5, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v5);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_19C7B3F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t *nlohmann::operator<<(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const std::ios_base *v10;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  std::locale v22;
  void (***v23[81])(void);

  v23[80] = *(void (****)(void))MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v6 = *((_QWORD *)v5 + 3);
  *((_QWORD *)v5 + 3) = 0;
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C100;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E3D5B5C8;
  v7[1].__shared_owners_ = (uint64_t)a1;
  v19 = v7;
  v20 = &v7[1].__vftable;
  v21 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24));
  fmtflags = v10[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v10);
    v12 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
    fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
    std::locale::~locale(&v22);
    v10[1].__fmtflags_ = fmtflags;
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer((uint64_t)v23, (uint64_t)&v20, (char)fmtflags, 0);
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v23, a2, v6 > 0, 0, v6 & ~(v6 >> 63), 0);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v23);
  return a1;
}

void sub_19C7B40F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, std::locale a13, char a14)
{
  std::locale::~locale(&a13);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void JsonMap::JsonMap(JsonMap *this)
{
  JsonMapImpl *v2;

  v2 = (JsonMapImpl *)operator new();
  JsonMapImpl::JsonMapImpl(v2);
  *(_QWORD *)this = v2;
}

void sub_19C7B4178(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1022C40B06DCE69);
  _Unwind_Resume(a1);
}

uint64_t *JsonMap::JsonMap(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = operator new();
  JsonMapImpl::JsonMapImpl(v4, a2);
  *a1 = v4;
  return a1;
}

void sub_19C7B41F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x1022C40B06DCE69);
  _Unwind_Resume(a1);
}

void JsonMap::~JsonMap(uint64_t ***this)
{
  uint64_t **v1;

  v1 = *this;
  *this = 0;
  if (v1)
    std::default_delete<JsonMapImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

BOOL JsonMap::hasKey(uint64_t a1, const void **a2)
{
  return **(_BYTE **)a1 == 1
      && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_unique<std::string>(*(_QWORD *)(*(_QWORD *)a1 + 8), a2) != 0;
}

BOOL JsonMap::getKeys(uint64_t *a1, uint64_t *a2)
{
  return JsonMapImpl::getKeys(*a1, a2);
}

std::string *JsonMap::getString@<X0>(uint64_t *a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;

  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(*a1, a2);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v4, a3);
}

_QWORD *JsonMap::getObject@<X0>(uint64_t *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  JsonMapImpl::getObject(*a1, a2, &v5);
  result = (_QWORD *)operator new();
  *result = v5;
  *a3 = result;
  return result;
}

void sub_19C7B430C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t **a10)
{
  uint64_t **v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<JsonMapImpl>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

void JsonMap::setString(unsigned __int8 **a1, const void **a2, uint64_t a3)
{
  JsonMapImpl::setString(*a1, a2, a3);
}

uint64_t JsonMap::serialize(uint64_t *a1, uint64_t *a2)
{
  return JsonMapImpl::serialize(*a1, a2);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(uint64_t result)
{
  const char *v1;
  int v2;

  switch(*(_BYTE *)result)
  {
    case 1:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::object || m_value.object != nullptr";
      v2 = 18026;
      break;
    case 2:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::array || m_value.array != nullptr";
      v2 = 18027;
      break;
    case 3:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::string || m_value.string != nullptr";
      v2 = 18028;
      break;
    case 8:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::binary || m_value.binary != nullptr";
      v2 = 18029;
      break;
    default:
      return result;
  }
  __assert_rtn("assert_invariant", "json.hpp", v2, v1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(uint64_t **a1, int a2)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t i;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  void *v20;
  void *v21;
  void **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  v3 = a2 - 1;
  if (a2 == 1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, (*a1)[2]);
    v4 = (uint64_t)(*a1 + 1);
    v5 = (_QWORD *)**a1;
    if (v5 != (_QWORD *)v4)
    {
      v6 = v25;
      do
      {
        if (v6 >= v26)
        {
          v6 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v5 + 7));
        }
        else
        {
          *(_BYTE *)v6 = *((_BYTE *)v5 + 56);
          *(_QWORD *)(v6 + 8) = v5[8];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 7));
          *((_BYTE *)v5 + 56) = 0;
          v5[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
          v6 += 16;
        }
        v25 = v6;
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != (_QWORD *)v4);
    }
  }
  else if (a2 == 2)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, ((*a1)[1] - **a1) >> 4);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v22, **a1, (*a1)[1], &v24);
  }
  for (i = v25; v24 != v25; i = v25)
  {
    v12 = *(_BYTE *)(i - 16);
    v11 = i - 16;
    LOBYTE(v22) = v12;
    v23 = *(uint64_t **)(v11 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    *(_BYTE *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v24, v25 - 16);
    if (v22 == 1)
    {
      v13 = v23;
      v14 = v23 + 1;
      v15 = (_QWORD *)*v23;
      if ((uint64_t *)*v23 != v23 + 1)
      {
        v16 = v25;
        do
        {
          if (v16 >= v26)
          {
            v16 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v15 + 7));
          }
          else
          {
            *(_BYTE *)v16 = *((_BYTE *)v15 + 56);
            *(_QWORD *)(v16 + 8) = v15[8];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v15 + 7));
            *((_BYTE *)v15 + 56) = 0;
            v15[8] = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
            v16 += 16;
          }
          v25 = v16;
          v17 = (_QWORD *)v15[1];
          if (v17)
          {
            do
            {
              v18 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (_QWORD *)v15[2];
              v9 = *v18 == (_QWORD)v15;
              v15 = v18;
            }
            while (!v9);
          }
          v15 = v18;
        }
        while (v18 != v14);
        v13 = v23;
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)v13, (char *)v13[1]);
      *v13 = (uint64_t)(v13 + 1);
      v13[2] = 0;
      v13[1] = 0;
    }
    else if (v22 == 2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v27, *v23, v23[1], &v24);
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](v23);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22);
  }
  switch(v3)
  {
    case 0:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)*a1, (char *)(*a1)[1]);
      goto LABEL_41;
    case 1:
      v22 = (void **)*a1;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
      goto LABEL_41;
    case 2:
      v19 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0)
        goto LABEL_42;
      v20 = (void *)*v19;
      break;
    case 7:
      v19 = *a1;
      v21 = (void *)**a1;
      if (!v21)
        goto LABEL_42;
      v19[1] = (uint64_t)v21;
      v20 = v21;
      break;
    default:
      goto LABEL_43;
  }
  operator delete(v20);
LABEL_41:
  v19 = *a1;
LABEL_42:
  operator delete(v19);
LABEL_43:
  v22 = (void **)&v24;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_19C7B47A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  BOOL v7;

  v1 = result;
  v3 = *result;
  v2 = result[1];
  if (v2 != *result)
  {
    v4 = v2 - 16;
    v5 = (unsigned __int8 *)(v2 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      v6 = *v5;
      v5 -= 16;
      result = (_QWORD *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v4 + 8, v6);
      v7 = v4 == v3;
      v4 = (uint64_t)v5;
    }
    while (!v7);
  }
  v1[1] = v3;
  return result;
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E3D427D0, MEMORY[0x1E0DE42D0]);
}

void sub_19C7B48DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3 - 16;
    do
    {
      *(_BYTE *)(v7 - 16) = *(_BYTE *)v9;
      v10 = v7 - 16;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v9 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
      *(_BYTE *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
      v7 = *((_QWORD *)&v17 + 1) - 16;
      *((_QWORD *)&v17 + 1) -= 16;
      v11 = v9 == a5;
      v9 -= 16;
    }
    while (!v11);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *i;
  uint64_t result;

  for (i = *(unsigned __int8 **)(a2 + 32); i != *(unsigned __int8 **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)i);
    result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(i + 8, *i);
    i = (unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 16);
  }
  return result;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v2 - 16);
      result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v2 - 8, *(unsigned __int8 *)(v2 - 16));
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  unint64_t v7;

  v5 = a2;
  if (a2 != a3)
  {
    v7 = a4[1];
    do
    {
      if (v7 >= a4[2])
      {
        v7 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a4, v5);
      }
      else
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)a4, v5);
        v7 += 16;
      }
      a4[1] = v7;
      v5 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)v4 = *(_BYTE *)a2;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
  *(_QWORD *)(a1 + 8) = v4 + 16;
  return result;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[16 * v12];
  *(_BYTE *)v11 = *(_BYTE *)a2;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v15[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_19C7B4DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  BOOL v8;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4 != a2)
  {
    v5 = v4 - 16;
    v6 = (unsigned __int8 *)(v4 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
      v7 = *v6;
      v6 -= 16;
      result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v5 + 8, v7);
      v8 = v5 == a2;
      v5 = (uint64_t)v6;
    }
    while (!v8);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(a2 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a2 + 64, a2[56]);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)(v4 - 16);
      v7 = v4 - 16;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        v8 = *v7;
        v7 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6 + 8, v8);
        v9 = v6 == (_QWORD)v2;
        v6 = (uint64_t)v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_BYTE *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(_BYTE *a1, int a2)
{
  _QWORD *v3;

  switch(a2)
  {
    case 1:
      v3 = operator new(0x18uLL);
      v3[2] = 0;
      v3[1] = 0;
      *v3 = v3 + 1;
      goto LABEL_8;
    case 2:
      v3 = operator new(0x18uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
      goto LABEL_8;
    case 3:
      v3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>("");
      goto LABEL_8;
    case 4:
      *a1 = 0;
      return a1;
    case 8:
      v3 = operator new(0x20uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
      *((_WORD *)v3 + 12) = 0;
LABEL_8:
      *(_QWORD *)a1 = v3;
      break;
    default:
      *(_QWORD *)a1 = 0;
      break;
  }
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_19C7B5040(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::exception::name(int a1@<W1>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  std::operator+<char>();
  v4 = std::string::append(&v12, ".");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v14, "] ");
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_19C7B5170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

nlohmann::detail::exception *nlohmann::detail::exception::exception(nlohmann::detail::exception *this, int a2, const char *a3)
{
  *(_QWORD *)this = &off_1E3D5B5F8;
  *((_DWORD *)this + 2) = a2;
  MEMORY[0x1A1AD5E28]((char *)this + 16, a3);
  return this;
}

void sub_19C7B5210(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

void nlohmann::detail::exception::~exception(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E3D5B5F8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E3D5B5F8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x1A1AD6260);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  nlohmann::detail::exception *exception;
  uint64_t v19[2];
  uint64_t v20;
  uint64_t *v21;

  v8 = a2;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    v10 = 24 * a3;
    v11 = a2;
    while (1)
    {
      v12 = *(_QWORD *)(v11 + 16) ? *(_QWORD *)(v11 + 16) : v11;
      if (*(_BYTE *)v12 != 2
        || *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8) - **(_QWORD **)(v12 + 8) != 32
        || *(_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v12, 0) != 3)
      {
        break;
      }
      v11 += 24;
      v10 -= 24;
      if (!v10)
        goto LABEL_10;
    }
    v13 = 0;
    if ((a4 & 1) == 0)
    {
LABEL_17:
      if (a5 == 2)
        v16 = 0;
      else
        v16 = v13;
      if (a5 != 1)
        LOBYTE(v13) = 1;
      if ((v13 & 1) == 0)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v20, "cannot create object from initializer list");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v19);
        nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(301, (uint64_t)&v20, exception);
      }
      if (!v16)
        goto LABEL_24;
      goto LABEL_12;
    }
  }
  else
  {
LABEL_10:
    v13 = 1;
    if ((a4 & 1) == 0)
      goto LABEL_17;
  }
  if (!v13)
  {
LABEL_24:
    *(_BYTE *)a1 = 2;
    v20 = v8;
    v19[0] = v8 + 24 * a3;
    *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(&v20, v19);
    goto LABEL_25;
  }
LABEL_12:
  *(_BYTE *)a1 = 1;
  v14 = operator new(0x18uLL);
  v14[2] = 0;
  v14[1] = 0;
  *v14 = v14 + 1;
  *(_QWORD *)(a1 + 8) = v14;
  if (a3)
  {
    v15 = 24 * a3;
    do
    {
      nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(v8, (uint64_t)&v20);
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a1 + 8), *(const void ***)(*v21 + 8), *(__int128 **)(*v21 + 8), *v21 + 16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20);
      v8 += 24;
      v15 -= 24;
    }
    while (v15);
  }
LABEL_25:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_19C7B5564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&__p);
  _Unwind_Resume(a1);
}

void nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  const char *v15;
  void *__p[2];
  unsigned __int8 v17;
  void *v18;
  char v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  int64_t v23;

  std::string::basic_string[abi:ne180100]<0>(&v18, "type_error");
  nlohmann::detail::exception::name(a1, &v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v17 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v20, (const std::string::value_type *)v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a2;
  else
    v11 = *(const std::string::value_type **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = std::string::append(&v21, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v23 = v13->__r_.__value_.__r.__words[2];
  v22 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(v18);
  if (v23 >= 0)
    v15 = (const char *)&v22;
  else
    v15 = (const char *)v22;
  nlohmann::detail::exception::exception(a3, a1, v15);
  *(_QWORD *)a3 = &off_1E3D5B528;
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
}

void sub_19C7B5708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::type_error::~type_error(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E3D5B5F8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E3D5B5F8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x1A1AD6260);
}

uint64_t nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, v3);
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = operator new(0x18uLL);
  v5 = *a1;
  v6 = *a2;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 3);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(v4, v5, v6, v7);
  return v4;
}

void sub_19C7B586C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](uint64_t a1, uint64_t a2)
{
  nlohmann::detail::exception *exception;
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  __int128 v9;
  std::string::size_type v10;

  if (*(_BYTE *)a1 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    v6 = std::string::insert(&v8, 0, "cannot use operator[] with a numeric argument with ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10 = v6->__r_.__value_.__r.__words[2];
    v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(305, (uint64_t)&v9, exception);
  }
  return **(_QWORD **)(a1 + 8) + 16 * a2;
}

void sub_19C7B5948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

const char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(char *a1)
{
  unint64_t v1;

  v1 = *a1;
  if (v1 > 9)
    return "number";
  else
    return off_1E3D64A58[v1];
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t **a1, const void **a2, __int128 *a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    v8 = (uint64_t *)operator new(0x48uLL);
    v11[1] = a1 + 1;
    std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>((uint64_t)(v8 + 4), a3, a4);
    v12 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v13, v9, v8);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v7, a3, (const void **)(v4 + 32)))break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

uint64_t std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;

  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)a3;
  v6 = a1 + 24;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
  return a1;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_19C7B5E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v4, v6);
      v6 += 24;
      v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_19C7B5F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[8];
  uint64_t *v5;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(a2, (uint64_t)v4);
  *(_BYTE *)a1 = v4[0];
  *(_QWORD *)(a1 + 8) = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  v4[0] = 0;
  v5 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  BOOL v9;

  if (a3 != a5)
  {
    v6 = a3 - 16;
    v7 = (unsigned __int8 *)(a3 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
      v8 = *v7;
      v7 -= 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v6 + 8), v8);
      v9 = v6 == a5;
      v6 = (uint64_t)v7;
    }
    while (!v9);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  switch(*(_BYTE *)a1)
  {
    case 1:
      v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(const void ****)(a2 + 8));
      goto LABEL_8;
    case 2:
      v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(uint64_t **)(a2 + 8));
      goto LABEL_8;
    case 3:
      v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(*(_QWORD *)(a2 + 8));
      goto LABEL_8;
    case 4:
      v4 = (std::string *)*(unsigned __int8 *)(a2 + 8);
      goto LABEL_8;
    case 5:
    case 6:
    case 7:
      v4 = *(std::string **)(a2 + 8);
      goto LABEL_8;
    case 8:
      v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(*(_QWORD *)(a2 + 8));
LABEL_8:
      *(_QWORD *)(a1 + 8) = v4;
      break;
    default:
      break;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(const void ***a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)operator new(0x18uLL);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](v2, a1);
  return v2;
}

void sub_19C7B618C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_19C7B61DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

const void **std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2
    || std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 2), v12 + 4, a5))
    {
      goto LABEL_16;
    }
    return (const void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 2), a5, v15 + 4))return (const void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_19C7B64F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(&this[1], (char *)a2 + 24);
  return this;
}

void sub_19C7B6564(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v2, *a1, a1[1], (a1[1] - *a1) >> 4);
  return v2;
}

void sub_19C7B65C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_19C7B663C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v4, v6);
      v6 += 16;
      v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_19C7B66E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(uint64_t a1)
{
  std::string *v2;
  std::string *v3;

  v2 = (std::string *)operator new(0x18uLL);
  v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  return v3;
}

void sub_19C7B6750(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2, *(const void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  *((_WORD *)v2 + 12) = *(_WORD *)(a1 + 24);
  return v2;
}

void sub_19C7B67AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C7B681C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v4, a2, v2 + 4))
      {
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v4, v2 + 4, a2))
          return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_begin(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  int v2;

  v1 = *result;
  if (!*result)
    __assert_rtn("set_begin", "json.hpp", 11268, "m_object != nullptr");
  v2 = *v1;
  if (*v1)
  {
    if (v2 == 2)
    {
      result[2] = (unsigned __int8 *)**((_QWORD **)v1 + 1);
    }
    else if (v2 == 1)
    {
      result[1] = (unsigned __int8 *)**((_QWORD **)v1 + 1);
    }
    else
    {
      result[3] = 0;
    }
  }
  else
  {
    result[3] = (unsigned __int8 *)1;
  }
  return result;
}

_QWORD *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0x8000000000000000;
  if (!a2)
    __assert_rtn("iter_impl", "json.hpp", 11182, "m_object != nullptr");
  return result;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  int v2;

  v1 = *result;
  if (!*result)
    __assert_rtn("set_end", "json.hpp", 11305, "m_object != nullptr");
  v2 = *v1;
  if (v2 == 2)
  {
    result[2] = *(unsigned __int8 **)(*((_QWORD *)v1 + 1) + 8);
  }
  else if (v2 == 1)
  {
    result[1] = (unsigned __int8 *)(*((_QWORD *)v1 + 1) + 8);
  }
  else
  {
    result[3] = (unsigned __int8 *)1;
  }
  return result;
}

BOOL nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  nlohmann::detail::exception *exception;
  _QWORD v8[3];

  v2 = *a1;
  if (*a1 != *a2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "cannot compare iterators of different containers");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(212, (uint64_t)v8, exception);
  }
  if (!v2)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>();
  v3 = *v2;
  if (v3 == 2)
  {
    v4 = a1[2];
    v5 = a2[2];
  }
  else if (v3 == 1)
  {
    v4 = a1[1];
    v5 = a2[1];
  }
  else
  {
    v4 = a1[3];
    v5 = a2[3];
  }
  return v4 == v5;
}

void sub_19C7B6B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  const char *v15;
  void *__p[2];
  unsigned __int8 v17;
  void *v18;
  char v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  int64_t v23;

  std::string::basic_string[abi:ne180100]<0>(&v18, "invalid_iterator");
  nlohmann::detail::exception::name(a1, &v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v17 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v20, (const std::string::value_type *)v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a2;
  else
    v11 = *(const std::string::value_type **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = std::string::append(&v21, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v23 = v13->__r_.__value_.__r.__words[2];
  v22 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(v18);
  if (v23 >= 0)
    v15 = (const char *)&v22;
  else
    v15 = (const char *)v22;
  nlohmann::detail::exception::exception(a3, a1, v15);
  *(_QWORD *)a3 = &off_1E3D5B5A0;
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
}

void sub_19C7B6CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::invalid_iterator::~invalid_iterator(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E3D5B5F8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E3D5B5F8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x1A1AD6260);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_19C7B6DE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_19C7B6EF4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::at(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

void nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  const char *v15;
  void *__p[2];
  unsigned __int8 v17;
  void *v18;
  char v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  int64_t v23;

  std::string::basic_string[abi:ne180100]<0>(&v18, "out_of_range");
  nlohmann::detail::exception::name(a1, &v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v17 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v20, (const std::string::value_type *)v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a2;
  else
    v11 = *(const std::string::value_type **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = std::string::append(&v21, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v23 = v13->__r_.__value_.__r.__words[2];
  v22 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(v18);
  if (v23 >= 0)
    v15 = (const char *)&v22;
  else
    v15 = (const char *)v22;
  nlohmann::detail::exception::exception(a3, a1, v15);
  *(_QWORD *)a3 = &off_1E3D5B578;
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
}

void sub_19C7B7244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::out_of_range::~out_of_range(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E3D5B5F8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E3D5B5F8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x1A1AD6260);
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E3D427D8, MEMORY[0x1E0DE42E0]);
}

void sub_19C7B7328(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

std::string *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t a1, std::string *this)
{
  nlohmann::detail::exception *exception;
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  __int128 v9;
  std::string::size_type v10;

  if (*(_BYTE *)a1 != 3)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    v6 = std::string::insert(&v8, 0, "type must be string, but is ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10 = v6->__r_.__value_.__r.__words[2];
    v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(302, (uint64_t)&v9, exception);
  }
  return std::string::operator=(this, *(const std::string **)(a1 + 8));
}

void sub_19C7B746C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void std::default_delete<JsonMapImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t **a2)
{
  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a2 + 1, *(unsigned __int8 *)a2);
    JUMPOUT(0x1A1AD6260);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_19C7B7614(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  return this;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int8 a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *result;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v11, a2);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parser(a5, a1, (uint64_t)v11, a3, a4);
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19C7B77A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse(uint64_t a1, int a2, _BYTE *a3)
{
  _QWORD *v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14[8];
  uint64_t *v15;
  _BYTE v16[8];
  uint64_t *v17;
  unsigned __int8 v18[8];
  uint64_t *v19;
  _BYTE v20[8];
  uint64_t *v21;
  void *v22[2];
  char v23;
  std::string __p;
  __int128 v25;
  uint64_t v26;
  std::exception v27;
  std::runtime_error v28;
  std::string v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE *v32;
  __int128 v33;
  __int128 v34;
  unsigned __int8 v35;
  char v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
  {
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v30, a1);
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser((uint64_t)&v32, (uint64_t)a3, (uint64_t)v30, *(_BYTE *)(a1 + 184));
    v6 = v31;
    if (v31 == v30)
    {
      v7 = 4;
      v6 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_21;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_21:
    nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, (uint64_t *)&v32);
    if (a2)
    {
      v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan((int64x2_t *)(a1 + 40));
      *(_DWORD *)(a1 + 32) = v12;
      if (v12 != 15)
      {
        v13 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &v29);
        v25 = *(_OWORD *)(a1 + 72);
        v26 = *(_QWORD *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(v22, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xFu, (uint64_t)v22, &__p);
        v20[0] = 0;
        v21 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)&v25, (uint64_t)&__p, (nlohmann::detail::exception *)&v27);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v32, v13, (uint64_t)&v29, (const nlohmann::detail::parse_error *)&v27);
        v27.__vftable = (std::exception_vtbl *)&off_1E3D5B5F8;
        std::runtime_error::~runtime_error(&v28);
        std::exception::~exception(&v27);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v23 < 0)
          operator delete(v22[0]);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
      }
    }
    if (v37)
    {
      v18[0] = 9;
      v19 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)a3, (uint64_t)v18);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
      nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v32);
      return;
    }
    if (*a3 == 9)
    {
      v16[0] = 0;
      v17 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)a3, (uint64_t)v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    }
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v32);
    goto LABEL_34;
  }
  v8 = *(_BYTE *)(a1 + 184);
  v32 = a3;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v36 = v8;
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, (uint64_t *)&v32, (uint64_t)a3);
  if (a2)
  {
    v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan((int64x2_t *)(a1 + 40));
    *(_DWORD *)(a1 + 32) = v9;
    if (v9 != 15)
    {
      v10 = *(_QWORD *)(a1 + 72);
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &v29);
      v25 = *(_OWORD *)(a1 + 72);
      v26 = *(_QWORD *)(a1 + 88);
      std::string::basic_string[abi:ne180100]<0>(v22, "value");
      nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xFu, (uint64_t)v22, &__p);
      v20[0] = 0;
      v21 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)&v25, (uint64_t)&__p, (nlohmann::detail::exception *)&v27);
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v32, v10, (uint64_t)&v29, (const nlohmann::detail::parse_error *)&v27);
      v27.__vftable = (std::exception_vtbl *)&off_1E3D5B5F8;
      std::runtime_error::~runtime_error(&v28);
      std::exception::~exception(&v27);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v23 < 0)
        operator delete(v22[0]);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
    }
  }
  v11 = v35;
  if (v35)
  {
    v14[0] = 9;
    v15 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)a3, (uint64_t)v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
  }
  if ((_QWORD)v33)
  {
    *((_QWORD *)&v33 + 1) = v33;
    operator delete((void *)v33);
  }
  if (!v11)
LABEL_34:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a3);
}

void sub_19C7B7C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::exception a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  std::runtime_error *v47;
  uint64_t v48;
  void *v50;

  a33.__vftable = (std::exception_vtbl *)&off_1E3D5B5F8;
  std::runtime_error::~runtime_error(v47 + 1);
  std::exception::~exception(&a33);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a15);
  if (a28 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a43 < 0)
    operator delete(a38);
  v50 = *(void **)(v48 - 200);
  if (v50)
  {
    *(_QWORD *)(v48 - 192) = v50;
    operator delete(v50);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~parser(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer((void **)(a1 + 40));
  v2 = *(_QWORD **)(a1 + 24);
  if (v2 == (_QWORD *)a1)
  {
    v3 = 4;
    v2 = (_QWORD *)a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parser(uint64_t a1, uint64_t a2, uint64_t a3, __int8 a4, char a5)
{
  uint64_t v9;
  int64x2_t *v10;

  v9 = std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1, a3);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)a2;
  v10 = (int64x2_t *)(v9 + 40);
  *(_DWORD *)(v9 + 32) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(v9 + 56) = a5;
  *(_DWORD *)(v9 + 60) = -1;
  *(_BYTE *)(v9 + 64) = 0;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_QWORD *)(v9 + 136) = 0;
  *(_QWORD *)(v9 + 144) = "";
  *(_QWORD *)(v9 + 160) = 0;
  *(_QWORD *)(v9 + 168) = 0;
  *(_QWORD *)(v9 + 152) = 0;
  *(_DWORD *)(v9 + 176) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_decimal_point();
  v10[9].i8[0] = a4;
  *(_DWORD *)(a1 + 32) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v10);
  return a1;
}

void sub_19C7B7EF0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  _QWORD *v4;
  uint64_t v5;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_decimal_point()
{
  lconv *v0;

  v0 = localeconv();
  if (!v0)
    __assert_rtn("get_decimal_point", "json.hpp", 6346, "loc != nullptr");
  if (v0->decimal_point)
    return *v0->decimal_point;
  else
    return 46;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(int64x2_t *this)
{
  int v2;
  uint64_t result;
  int *v6;
  int64x2_t *v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  _DWORD v12[2];
  int v13;

  if (this[2].i64[0]
    || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::skip_bom(this))
  {
    do
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
      v2 = this[1].i32[1];
    }
    while (v2 <= 0x20 && ((1 << v2) & 0x100002600) != 0);
    while (this[1].i8[0])
    {
      if (v2 != 47)
        break;
      if (!nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_comment(this))
        return 14;
      do
      {
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
        v2 = this[1].i32[1];
      }
      while (v2 <= 0x20 && ((1 << v2) & 0x100002600) != 0);
    }
    if (v2 <= 90)
    {
      switch(v2)
      {
        case '"':
          result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string((uint64_t)this);
          break;
        case '#':
        case '$':
        case '%':
        case '&':
        case '\'':
        case '(':
        case ')':
        case '*':
        case '+':
        case '.':
        case '/':
          goto LABEL_46;
        case ',':
          result = 13;
          break;
        case '-':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number((uint64_t)this);
          break;
        case ':':
          result = 12;
          break;
        default:
          if ((v2 + 1) >= 2)
            goto LABEL_46;
          result = 15;
          break;
      }
      return result;
    }
    if (v2 <= 109)
    {
      switch(v2)
      {
        case '[':
          return 8;
        case ']':
          return 10;
        case 'f':
          qmemcpy(v12, "false", 5);
          v6 = v12;
          v7 = this;
          v8 = 5;
          v9 = 2;
          return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v7, (unsigned __int8 *)v6, v8, v9);
      }
    }
    else if (v2 > 122)
    {
      if (v2 == 123)
        return 9;
      if (v2 == 125)
        return 11;
    }
    else
    {
      if (v2 == 110)
      {
        v11 = 1819047278;
        v6 = &v11;
        v7 = this;
        v8 = 4;
        v9 = 3;
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v7, (unsigned __int8 *)v6, v8, v9);
      }
      if (v2 == 116)
      {
        v13 = 1702195828;
        v6 = &v13;
        v7 = this;
        v8 = 4;
        v9 = 1;
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v7, (unsigned __int8 *)v6, v8, v9);
      }
    }
LABEL_46:
    v10 = "invalid literal";
  }
  else
  {
    v10 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
  }
  this[6].i64[1] = (uint64_t)v10;
  return 14;
}

BOOL nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::skip_bom(int64x2_t *a1)
{
  if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 239)
  {
    return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 187
        && nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 191;
  }
  else
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget((uint64_t)a1);
    return 1;
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_comment(int64x2_t *a1)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t result;
  const char *v6;

  v2 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1);
  if (v2 == 47)
  {
    do
    {
      do
        v4 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1)
           + 1;
      while (v4 >= 0xF);
    }
    while (((0x4803u >> v4) & 1) == 0);
    return 1;
  }
  else
  {
    if (v2 == 42)
    {
      do
      {
        while (1)
        {
          v3 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1);
          if (v3 != 42)
            break;
          if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 47)
            return 1;
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget((uint64_t)a1);
        }
      }
      while ((v3 + 1) >= 2);
      v6 = "invalid comment; missing closing '*/'";
    }
    else
    {
      v6 = "invalid comment; expecting '/' or '*' after '/'";
    }
    result = 0;
    a1[6].i64[1] = (uint64_t)v6;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(int64x2_t *this, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  int v9;

  if (*a2 != this[1].u8[4])
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal();
  if (a3 >= 2)
  {
    v6 = a3 - 1;
    v7 = a2 + 1;
    while (1)
    {
      v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
      v9 = *v7++;
      if (v9 != v8)
        break;
      if (!--v6)
        return a4;
    }
    this[6].i64[1] = (uint64_t)"invalid literal";
    return 14;
  }
  return a4;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string(uint64_t a1)
{
  int v2;
  uint64_t result;
  const char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 *v9;
  int v10;
  unsigned int codepoint;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(a1);
  if (*(_DWORD *)(a1 + 20) != 34)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string();
  while (2)
  {
    while (2)
    {
      v2 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
         + 1;
      result = 4;
      v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          v5 = *(_DWORD *)(a1 + 20);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
          v4 = "invalid string: forbidden character after backslash";
          if (v10 <= 97)
          {
            switch(v10)
            {
              case '"':
                LOBYTE(v5) = 34;
                break;
              case '/':
                LOBYTE(v5) = 47;
                break;
              case '\\':
                LOBYTE(v5) = 92;
                break;
              default:
                goto LABEL_82;
            }
            goto LABEL_4;
          }
          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          *(_QWORD *)&v14 = 0xBF00000080;
          v6 = a1;
          v7 = 2;
          goto LABEL_19;
        case 225:
          v8 = xmmword_19CB2D570;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          v8 = xmmword_19CB2D560;
          goto LABEL_7;
        case 238:
          v8 = xmmword_19CB2D550;
LABEL_7:
          v14 = v8;
          v6 = a1;
          v7 = 4;
          goto LABEL_19;
        case 241:
          v15 = 0xBF00000080;
          v9 = &xmmword_19CB2CB14;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          v15 = 0xBF00000080;
          v9 = &xmmword_19CB2CB2C;
          goto LABEL_18;
        case 245:
          v15 = 0xBF00000080;
          v9 = &xmmword_19CB2CB44;
LABEL_18:
          v14 = *v9;
          v6 = a1;
          v7 = 6;
LABEL_19:
          if ((nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(v6, &v14, v7) & 1) == 0)return 14;
          continue;
        default:
          v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }
      break;
    }
    switch(v10)
    {
      case 'n':
        LOBYTE(v5) = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        LOBYTE(v5) = 13;
        goto LABEL_4;
      case 't':
        LOBYTE(v5) = 9;
        goto LABEL_4;
      case 'u':
        codepoint = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((int64x2_t *)a1);
        if (codepoint == -1)
          goto LABEL_85;
        v12 = codepoint;
        if ((codepoint & 0xFFFFFC00) != 0xD800)
        {
          if ((codepoint & 0xFFFFFC00) == 0xDC00)
          {
            v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }
          if (codepoint >= 0x110000)
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string();
          if (codepoint > 0x7F)
          {
            if (codepoint <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 80), (codepoint >> 6) | 0xC0);
              goto LABEL_39;
            }
            if (!HIWORD(codepoint))
            {
              std::string::push_back((std::string *)(a1 + 80), (codepoint >> 12) | 0xE0);
              goto LABEL_38;
            }
LABEL_37:
            std::string::push_back((std::string *)(a1 + 80), (v12 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 80), (v12 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 80), (v12 >> 6) & 0x3F | 0x80);
LABEL_39:
            LOBYTE(v5) = v12 & 0x3F | 0x80;
            goto LABEL_4;
          }
          LOBYTE(v5) = codepoint;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 80), v5);
          continue;
        }
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1) != 92
          || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1) != 117)
        {
LABEL_86:
          v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((int64x2_t *)a1);
        if (v13 != -1)
        {
          if (v13 >> 10 != 55)
            goto LABEL_86;
          v12 = v13 + (v12 << 10) - 56613888;
          goto LABEL_37;
        }
LABEL_85:
        v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(_QWORD *)(a1 + 104) = v4;
        return 14;
      default:
        if (v10 == 98)
        {
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v10 != 102)
            goto LABEL_82;
          LOBYTE(v5) = 12;
        }
        goto LABEL_4;
    }
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number(uint64_t a1)
{
  int v2;
  std::string *v3;
  int v4;
  std::string *v5;
  int v6;
  int v7;
  std::string *v8;
  const char **v9;
  const char *v10;
  uint64_t v11;
  int v13;
  const char *v14;
  int v15;
  int v16;
  const char **v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char **v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  char *__endptr;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(a1);
  v2 = *(_DWORD *)(a1 + 20);
  if ((v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 80), 48);
      v4 = 5;
    }
    else
    {
      if (v2 != 45)
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
      v3 = (std::string *)(a1 + 80);
      std::string::push_back((std::string *)(a1 + 80), 45);
      v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
      if ((v13 - 49) < 9)
      {
        v2 = *(_DWORD *)(a1 + 20);
        v4 = 6;
        goto LABEL_3;
      }
      if (v13 != 48)
      {
        v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
      v4 = 6;
    }
    v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    if (v15 == 101 || v15 == 69)
    {
      v5 = (std::string *)(a1 + 80);
      goto LABEL_9;
    }
    if (v15 != 46)
      goto LABEL_40;
    v5 = (std::string *)(a1 + 80);
LABEL_34:
    std::string::push_back(v5, *(_BYTE *)(a1 + 136));
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
       - 48 > 9)
    {
      v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }
    v5 = (std::string *)(a1 + 80);
    do
    {
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
      v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    }
    while ((v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
      __endptr = 0;
      *__error() = 0;
      goto LABEL_14;
    }
LABEL_9:
    std::string::push_back(v5, *(_BYTE *)(a1 + 20));
    v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    if ((v7 - 48) < 0xA)
    {
      v8 = (std::string *)(a1 + 80);
      goto LABEL_11;
    }
    if (v7 == 45 || v7 == 43)
    {
      v8 = (std::string *)(a1 + 80);
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
      if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
         - 48 < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(_BYTE *)(a1 + 20));
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
           - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
          while (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
                - 48 < 0xA);
        }
        goto LABEL_13;
      }
      v14 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      v14 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_52:
    *(_QWORD *)(a1 + 104) = v14;
    return 14;
  }
  v3 = (std::string *)(a1 + 80);
  v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  v5 = (std::string *)(a1 + 80);
  while (1)
  {
    v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    if ((v6 - 48) >= 0xA)
      break;
    std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
  }
  if (v6 == 46)
    goto LABEL_34;
  if (v6 == 69 || v6 == 101)
    goto LABEL_9;
LABEL_40:
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
  __endptr = 0;
  *__error() = 0;
  if (v4 == 6)
  {
    v21 = (const char **)(a1 + 80);
    v22 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0)
      v22 = *v21;
    v23 = strtoll(v22, &__endptr, 10);
    if (*(char *)(a1 + 103) < 0)
    {
      v21 = *(const char ***)(a1 + 80);
      v24 = *(_QWORD *)(a1 + 88);
    }
    else
    {
      v24 = *(unsigned __int8 *)(a1 + 103);
    }
    if (__endptr != (char *)v21 + v24)
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
    if (!*__error())
    {
      *(_QWORD *)(a1 + 112) = v23;
      return 6;
    }
  }
  else
  {
    v17 = (const char **)(a1 + 80);
    v18 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0)
      v18 = *v17;
    v19 = strtoull(v18, &__endptr, 10);
    if (*(char *)(a1 + 103) < 0)
    {
      v17 = *(const char ***)(a1 + 80);
      v20 = *(_QWORD *)(a1 + 88);
    }
    else
    {
      v20 = *(unsigned __int8 *)(a1 + 103);
    }
    if (__endptr != (char *)v17 + v20)
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
    if (!*__error())
    {
      *(_QWORD *)(a1 + 120) = v19;
      return 5;
    }
  }
LABEL_14:
  v9 = (const char **)(a1 + 80);
  v10 = (const char *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    v10 = *v9;
  *(double *)(a1 + 128) = strtod(v10, &__endptr);
  if (*(char *)(a1 + 103) < 0)
  {
    v9 = *(const char ***)(a1 + 80);
    v11 = *(_QWORD *)(a1 + 88);
  }
  else
  {
    v11 = *(unsigned __int8 *)(a1 + 103);
  }
  if (__endptr != (char *)v9 + v11)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
  return 7;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(int64x2_t *this)
{
  __int32 character;
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  char v14;
  uint64_t result;
  uint64_t v16;

  this[2] = vaddq_s64(this[2], vdupq_n_s64(1uLL));
  if (this[1].i8[8])
  {
    this[1].i8[8] = 0;
    character = this[1].i32[1];
  }
  else
  {
    character = nlohmann::detail::input_stream_adapter::get_character((nlohmann::detail::input_stream_adapter *)this);
    this[1].i32[1] = character;
  }
  if (character == -1)
    return 0xFFFFFFFFLL;
  v4 = (_BYTE *)this[4].i64[0];
  v3 = this[4].u64[1];
  if ((unint64_t)v4 >= v3)
  {
    v6 = this[3].i64[1];
    v7 = &v4[-v6];
    v8 = (uint64_t)&v4[-v6 + 1];
    if (v8 < 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v9 = v3 - v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (uint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = (char *)(v11 + v10);
    v7[v11] = character;
    v5 = (uint64_t)&v7[v11 + 1];
    if (v4 == (_BYTE *)v6)
    {
      v11 += (uint64_t)v7;
    }
    else
    {
      v13 = &v4[~v6];
      do
      {
        v14 = *--v4;
        (v13--)[v11] = v14;
      }
      while (v4 != (_BYTE *)v6);
      v4 = (_BYTE *)this[3].i64[1];
    }
    this[3].i64[1] = v11;
    this[4].i64[0] = v5;
    this[4].i64[1] = (uint64_t)v12;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v4 = character;
    v5 = (uint64_t)(v4 + 1);
  }
  this[4].i64[0] = v5;
  result = this[1].u32[1];
  if ((_DWORD)result == 10)
  {
    v16 = this[3].i64[0] + 1;
    this[2].i64[1] = 0;
    this[3].i64[0] = v16;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(result + 40);
  v2 = *(_QWORD *)(result + 40);
  *(_BYTE *)(result + 24) = 1;
  --*(_QWORD *)(result + 32);
  if (v2 || (v1 = (_QWORD *)(result + 48), (v2 = *(_QWORD *)(result + 48)) != 0))
    *v1 = v2 - 1;
  if (*(_DWORD *)(result + 20) != -1)
  {
    v3 = *(_QWORD *)(result + 64);
    if (*(_QWORD *)(result + 56) == v3)
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget();
    *(_QWORD *)(result + 64) = v3 - 1;
  }
  return result;
}

uint64_t nlohmann::detail::input_stream_adapter::get_character(nlohmann::detail::input_stream_adapter *this)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t result;
  std::ios_base *v5;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (unsigned __int8 *)v2[3];
  if (v3 == (unsigned __int8 *)v2[4])
  {
    result = (*(uint64_t (**)(_QWORD *))(*v2 + 80))(v2);
    if ((_DWORD)result == -1)
    {
      v5 = (std::ios_base *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24));
      std::ios_base::clear(v5, v5->__rdstate_ | 2);
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v2[3] = v3 + 1;
    return *v3;
  }
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;

  if (*(char *)(a1 + 103) < 0)
  {
    **(_BYTE **)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 103) = 0;
  }
  v2 = *(_BYTE **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v2;
  v3 = *(_DWORD *)(a1 + 20);
  v4 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v2 >= v4)
  {
    v6 = v4 - (_QWORD)v2;
    v7 = 2 * v6;
    if (2 * v6 <= 1)
      v7 = 1;
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL)
      v8 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v8 = v7;
    v9 = operator new(v8);
    *v9 = v3;
    v5 = v9 + 1;
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v9 + 1;
    *(_QWORD *)(a1 + 72) = &v9[v8];
    if (v2)
      operator delete(v2);
  }
  else
  {
    *v2 = v3;
    v5 = v2 + 1;
  }
  *(_QWORD *)(a1 + 64) = v5;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint(int64x2_t *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int32 v5;
  __int32 v6;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[1].i32[1] != 117)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint();
  v2 = 0;
  LODWORD(v3) = 0;
  v8 = xmmword_19CB2D580;
  do
  {
    v4 = *(_DWORD *)((char *)&v8 + v2);
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
    v5 = this[1].i32[1];
    v6 = v5 - 48;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 65) > 5)
      {
        if ((v5 - 97) > 5)
          return 0xFFFFFFFFLL;
        v6 = v5 - 87;
      }
      else
      {
        v6 = v5 - 55;
      }
    }
    v3 = ((v6 << v4) + v3);
    v2 += 4;
  }
  while (v2 != 16);
  if (v3 >= 0x10000)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint();
  return v3;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  std::string *v6;
  _DWORD *v7;
  int v8;
  uint64_t result;

  if (a3 > 6 || ((1 << a3) & 0x54) == 0)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range();
  v6 = (std::string *)(a1 + 80);
  std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
  v7 = &a2[a3];
  while (1)
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    v8 = *(_DWORD *)(a1 + 20);
    if (*a2 > v8 || v8 > a2[1])
      break;
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7)
      return 1;
  }
  result = 0;
  *(_QWORD *)(a1 + 104) = "invalid string: ill-formed UTF-8 byte";
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(void **this)
{
  void *v2;

  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)this);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  __int128 *v4;
  int64x2_t *v5;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  uint64_t *v33;
  uint64_t *v34;
  std::string v35;
  std::string __p;
  void *v37[2];
  std::string::size_type v38;
  std::exception v39;
  std::runtime_error v40;
  std::string v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v42 = 0;
  v43 = 0;
  v44 = 0;
  v4 = (__int128 *)(a1 + 120);
  v5 = (int64x2_t *)(a1 + 40);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v39.__vftable) = 1;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v39, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v39.__vftable) = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v39, 0);
        goto LABEL_19;
      case 3:
        v39.__vftable = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v39, 0);
        goto LABEL_19;
      case 4:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4, 0);
        goto LABEL_19;
      case 5:
        v39.__vftable = *(std::exception_vtbl **)(a1 + 160);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t **)&v39, 0);
        goto LABEL_19;
      case 6:
        v39.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t **)&v39, 0);
        goto LABEL_19;
      case 7:
        if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v39.__vftable = *(std::exception_vtbl **)(a1 + 168);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t **)&v39, 0);
          goto LABEL_19;
        }
        v28 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v35);
        v29 = std::string::insert(&v35, 0, "number overflow parsing '");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        v31 = std::string::append(&__p, "'");
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v38 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)v37 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33);
        nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(406, (uint64_t)v37, (nlohmann::detail::exception *)&v39);
        v17 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>((uint64_t)a2, v28, (uint64_t)&v41, (const nlohmann::detail::out_of_range *)&v39);
        v39.__vftable = (std::exception_vtbl *)&off_1E3D5B5F8;
        std::runtime_error::~runtime_error(&v40);
        std::exception::~exception(&v39);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&v33);
        if (SHIBYTE(v38) < 0)
          operator delete(v37[0]);
        goto LABEL_50;
      case 8:
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56;
        v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2);
          goto LABEL_13;
        }
        LOBYTE(v39.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v42, &v39);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_56;
        v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4)
            goto LABEL_59;
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56;
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12)
            goto LABEL_60;
          LOBYTE(v39.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v42, &v39);
          v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
        v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          v17 = 0;
          goto LABEL_44;
        }
LABEL_19:
        v9 = v43;
        if (!v43)
        {
LABEL_43:
          v17 = 1;
          goto LABEL_44;
        }
        while (2)
        {
          if (((*(_QWORD *)&v42[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)) & 1) != 0)
          {
            v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13)
              goto LABEL_36;
            if (v10 != 10)
            {
              v22 = *(_QWORD *)(a1 + 72);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
              *(_OWORD *)v37 = *(_OWORD *)(a1 + 72);
              v38 = *(_QWORD *)(a1 + 88);
              std::string::basic_string[abi:ne180100]<0>(&v35, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xAu, (uint64_t)&v35, &__p);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33);
              nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
              v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v22, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
              goto LABEL_61;
            }
            if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2))
              goto LABEL_56;
            v11 = v43;
            if (!v43)
            {
              v24 = 10820;
              goto LABEL_63;
            }
LABEL_30:
            v9 = v11 - 1;
            v43 = v9;
            if (!v9)
              goto LABEL_43;
            continue;
          }
          break;
        }
        v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            v25 = *(_QWORD *)(a1 + 72);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
            *(_OWORD *)v37 = *(_OWORD *)(a1 + 72);
            v38 = *(_QWORD *)(a1 + 88);
            std::string::basic_string[abi:ne180100]<0>(&v35, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xBu, (uint64_t)&v35, &__p);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33);
            nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
            v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v25, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
            goto LABEL_61;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2))
            goto LABEL_56;
          v11 = v43;
          if (!v43)
          {
            v24 = 10874;
LABEL_63:
            __assert_rtn("sax_parse_internal", "json.hpp", v24, "!states.empty()");
          }
          goto LABEL_30;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          v26 = *(_QWORD *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
          *(_OWORD *)v37 = *(_OWORD *)(a1 + 72);
          v38 = *(_QWORD *)(a1 + 88);
          std::string::basic_string[abi:ne180100]<0>(&v35, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 4u, (uint64_t)&v35, &__p);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33);
          nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
          v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v26, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
          goto LABEL_61;
        }
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56;
        v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          goto LABEL_37;
        }
LABEL_60:
        v27 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
        *(_OWORD *)v37 = *(_OWORD *)(a1 + 72);
        v38 = *(_QWORD *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v35, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xCu, (uint64_t)&v35, &__p);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
        v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v27, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
LABEL_61:
        v17 = v23;
        v39.__vftable = (std::exception_vtbl *)&off_1E3D5B5F8;
        std::runtime_error::~runtime_error(&v40);
        std::exception::~exception(&v39);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&v33);
LABEL_50:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
LABEL_44:
        if (v42)
          operator delete(v42);
        return v17;
      case 0xE:
        v19 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
        *(_OWORD *)v37 = *(_OWORD *)(a1 + 72);
        v38 = *(_QWORD *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v35, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0, (uint64_t)&v35, &__p);
        LOBYTE(v33) = 0;
        v34 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
        v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v19, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
        goto LABEL_49;
      default:
        v21 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
        *(_OWORD *)v37 = *(_OWORD *)(a1 + 72);
        v38 = *(_QWORD *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v35, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0x10u, (uint64_t)&v35, &__p);
        LOBYTE(v33) = 0;
        v34 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
        v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v21, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
LABEL_49:
        v17 = v20;
        v39.__vftable = (std::exception_vtbl *)&off_1E3D5B5F8;
        std::runtime_error::~runtime_error(&v40);
        std::exception::~exception(&v39);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v34, v33);
        goto LABEL_50;
    }
  }
}

void sub_19C7B9A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::exception a31)
{
  std::runtime_error *v31;
  uint64_t v32;
  void *v34;

  a31.__vftable = (std::exception_vtbl *)&off_1E3D5B5F8;
  std::runtime_error::~runtime_error(v31 + 1);
  std::exception::~exception(&a31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (*(char *)(v32 - 89) < 0)
    operator delete(*(void **)(v32 - 112));
  v34 = *(void **)(v32 - 88);
  if (v34)
    operator delete(v34);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::parse_error *a4)
{
  nlohmann::detail::parse_error *exception;
  nlohmann::detail::parse_error *v7;

  *(_BYTE *)(a1 + 88) = 1;
  if (*(_BYTE *)(a1 + 128))
  {
    exception = (nlohmann::detail::parse_error *)__cxa_allocate_exception(0x28uLL);
    v7 = nlohmann::detail::parse_error::parse_error(exception, a4);
  }
  return 0;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *i;
  unsigned int v5;
  char __str[8];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(unsigned __int8 **)(a1 + 56);
  for (i = *(unsigned __int8 **)(a1 + 64); v3 != i; ++v3)
  {
    v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      v7 = 0;
      *(_QWORD *)__str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::append(a2, __str);
    }
  }
}

void sub_19C7B9CE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, nlohmann::detail::exception *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  const char *v26;
  void *__p[2];
  unsigned __int8 v28;
  std::string v29;
  void *v30;
  char v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  __int128 v37;
  int64_t v38;

  std::string::basic_string[abi:ne180100]<0>(&v30, "parse_error");
  nlohmann::detail::exception::name(a1, &v32);
  v8 = std::string::append(&v32, "parse error");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  nlohmann::detail::parse_error::position_string((uint64_t)a2, &v29);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v29;
  else
    v10 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    size = v29.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v33, (const std::string::value_type *)v10, size);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v34, ": ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v28 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v28 & 0x80u) == 0)
    v17 = v28;
  else
    v17 = (std::string::size_type)__p[1];
  v18 = std::string::append(&v35, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = *(char *)(a3 + 23);
  if (v20 >= 0)
    v21 = (const std::string::value_type *)a3;
  else
    v21 = *(const std::string::value_type **)a3;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(a3 + 23);
  else
    v22 = *(_QWORD *)(a3 + 8);
  v23 = std::string::append(&v36, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v38 = v23->__r_.__value_.__r.__words[2];
  v37 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if ((char)v28 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v31 < 0)
    operator delete(v30);
  v25 = *a2;
  if (v38 >= 0)
    v26 = (const char *)&v37;
  else
    v26 = (const char *)v37;
  nlohmann::detail::exception::exception(a4, a1, v26);
  *(_QWORD *)a4 = &off_1E3D5B550;
  *((_QWORD *)a4 + 4) = v25;
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
}

void sub_19C7B9F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (*(char *)(v45 - 57) < 0)
    operator delete(*(void **)(v45 - 80));
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  unsigned int v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  void *v24;
  char *v25;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  char *v30;
  std::string *v31;
  __int128 v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string __p;
  std::string v36;
  std::string v37;
  std::string v38;
  __int128 v39;
  int64_t v40;

  std::string::basic_string[abi:ne180100]<0>(a4, "syntax error ");
  v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a3 + 8);
  if (v8)
  {
    std::operator+<char>();
    v9 = std::string::append(&v38, " ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v40 = v9->__r_.__value_.__r.__words[2];
    v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0)
      v11 = (const std::string::value_type *)&v39;
    else
      v11 = (const std::string::value_type *)v39;
    if (v40 >= 0)
      v12 = HIBYTE(v40);
    else
      v12 = *((_QWORD *)&v39 + 1);
    std::string::append(a4, v11, v12);
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
  std::string::append(a4, "- ");
  v13 = *(_DWORD *)(a1 + 32);
  if (v13 == 14)
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, *(char **)(a1 + 144));
    v14 = std::string::append(&v36, "; last read: '");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v38, "'");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v40 = v20->__r_.__value_.__r.__words[2];
    v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0)
      v22 = (const std::string::value_type *)&v39;
    else
      v22 = (const std::string::value_type *)v39;
    if (v40 >= 0)
      v23 = HIBYTE(v40);
    else
      v23 = *((_QWORD *)&v39 + 1);
    std::string::append(a4, v22, v23);
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }
LABEL_46:
    if (!a2)
      return;
    goto LABEL_50;
  }
  v25 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(v13);
  std::string::basic_string[abi:ne180100]<0>(&v38, v25);
  v26 = std::string::insert(&v38, 0, "unexpected ");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v40 = v26->__r_.__value_.__r.__words[2];
  v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0)
    v28 = (const std::string::value_type *)&v39;
  else
    v28 = (const std::string::value_type *)v39;
  if (v40 >= 0)
    v29 = HIBYTE(v40);
  else
    v29 = *((_QWORD *)&v39 + 1);
  std::string::append(a4, v28, v29);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_46;
  v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v24);
  if (!a2)
    return;
LABEL_50:
  v30 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(a2);
  std::string::basic_string[abi:ne180100]<0>(&v38, v30);
  v31 = std::string::insert(&v38, 0, "; expected ");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v40 = v31->__r_.__value_.__r.__words[2];
  v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0)
    v33 = (const std::string::value_type *)&v39;
  else
    v33 = (const std::string::value_type *)v39;
  if (v40 >= 0)
    v34 = HIBYTE(v40);
  else
    v34 = *((_QWORD *)&v39 + 1);
  std::string::append(a4, v33, v34);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_19C7BA340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  if (*(char *)(v34 - 41) < 0)
    operator delete(*(void **)(v34 - 64));
  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::~parse_error(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E3D5B5F8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E3D5B5F8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x1A1AD6260);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::exception_vtbl *v5;
  int64x2_t *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t **v14;
  int v15;
  int v16;
  uint64_t **v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  uint64_t *v35;
  uint64_t *v36;
  std::string v37;
  std::string __p;
  void *v39[2];
  std::string::size_type v40;
  std::exception v41;
  std::runtime_error v42;
  std::string v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v44 = 0;
  v45 = 0;
  v46 = 0;
  v5 = (std::exception_vtbl *)(a1 + 120);
  v6 = (int64x2_t *)(a1 + 40);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v41.__vftable) = 1;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v41, a3);
        goto LABEL_17;
      case 2:
        LOBYTE(v41.__vftable) = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v41, a3);
        goto LABEL_17;
      case 3:
        v41.__vftable = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v41, a3);
        goto LABEL_17;
      case 4:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v5, a3);
        goto LABEL_17;
      case 5:
        v41.__vftable = *(std::exception_vtbl **)(a1 + 160);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t *)&v41, a3);
        goto LABEL_17;
      case 6:
        v41.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t *)&v41, a3);
        goto LABEL_17;
      case 7:
        if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v41.__vftable = *(std::exception_vtbl **)(a1 + 168);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t *)&v41, a3);
          goto LABEL_17;
        }
        v30 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v43);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v37);
        v31 = std::string::insert(&v37, 0, "number overflow parsing '");
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        v33 = std::string::append(&__p, "'");
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v40 = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)v39 = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v35);
        nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(406, (uint64_t)v39, (nlohmann::detail::exception *)&v41);
        v19 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>((uint64_t)a2, v30, (uint64_t)&v43, (const nlohmann::detail::out_of_range *)&v41);
        v41.__vftable = (std::exception_vtbl *)&off_1E3D5B5F8;
        std::runtime_error::~runtime_error(&v42);
        std::exception::~exception(&v41);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&v35);
        if (SHIBYTE(v40) < 0)
          operator delete(v39[0]);
        goto LABEL_43;
      case 8:
        if (!nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL, a3))goto LABEL_56;
        v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 == 10)
          goto LABEL_12;
        LOBYTE(v41.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v44, &v41);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL, a3) & 1) == 0)
        {
LABEL_56:
          v19 = 0;
          goto LABEL_37;
        }
        v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4)
            goto LABEL_51;
          v17 = *(uint64_t ***)(*(_QWORD *)(a2[2] - 8) + 8);
          v41.__vftable = v5;
          a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)&v5->~exception, (uint64_t)&std::piecewise_construct, (__int128 **)&v41)+ 7);
          v18 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
          *(_DWORD *)(a1 + 32) = v18;
          if (v18 != 12)
            goto LABEL_54;
          LOBYTE(v41.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v44, &v41);
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v16;
          continue;
        }
LABEL_12:
        a2[2] -= 8;
LABEL_17:
        v9 = v45;
        if (!v45)
        {
LABEL_36:
          v19 = 1;
          goto LABEL_37;
        }
        while (2)
        {
          if (((*(_QWORD *)&v44[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)) & 1) != 0)
          {
            v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13)
              goto LABEL_31;
            if (v10 != 10)
            {
              v24 = *(_QWORD *)(a1 + 72);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v43);
              *(_OWORD *)v39 = *(_OWORD *)(a1 + 72);
              v40 = *(_QWORD *)(a1 + 88);
              std::string::basic_string[abi:ne180100]<0>(&v37, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xAu, (uint64_t)&v37, &__p);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v35);
              nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v39, (uint64_t)&__p, (nlohmann::detail::exception *)&v41);
              v25 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v24, (uint64_t)&v43, (const nlohmann::detail::parse_error *)&v41);
              goto LABEL_55;
            }
            a2[2] -= 8;
            v11 = v45;
            if (!v45)
            {
              v26 = 10820;
              goto LABEL_53;
            }
LABEL_26:
            v9 = v11 - 1;
            v45 = v9;
            if (!v9)
              goto LABEL_36;
            continue;
          }
          break;
        }
        v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            v27 = *(_QWORD *)(a1 + 72);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v43);
            *(_OWORD *)v39 = *(_OWORD *)(a1 + 72);
            v40 = *(_QWORD *)(a1 + 88);
            std::string::basic_string[abi:ne180100]<0>(&v37, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xBu, (uint64_t)&v37, &__p);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v35);
            nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v39, (uint64_t)&__p, (nlohmann::detail::exception *)&v41);
            v25 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v27, (uint64_t)&v43, (const nlohmann::detail::parse_error *)&v41);
            goto LABEL_55;
          }
          a2[2] -= 8;
          v11 = v45;
          if (!v45)
          {
            v26 = 10874;
LABEL_53:
            __assert_rtn("sax_parse_internal", "json.hpp", v26, "!states.empty()");
          }
          goto LABEL_26;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_51:
          v28 = *(_QWORD *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v43);
          *(_OWORD *)v39 = *(_OWORD *)(a1 + 72);
          v40 = *(_QWORD *)(a1 + 88);
          std::string::basic_string[abi:ne180100]<0>(&v37, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 4u, (uint64_t)&v37, &__p);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v35);
          nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v39, (uint64_t)&__p, (nlohmann::detail::exception *)&v41);
          v25 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v28, (uint64_t)&v43, (const nlohmann::detail::parse_error *)&v41);
          goto LABEL_55;
        }
        v14 = *(uint64_t ***)(*(_QWORD *)(a2[2] - 8) + 8);
        v41.__vftable = v5;
        a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (const void **)&v5->~exception, (uint64_t)&std::piecewise_construct, (__int128 **)&v41)+ 7);
        v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v15;
        if (v15 == 12)
        {
LABEL_31:
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
          goto LABEL_32;
        }
LABEL_54:
        v29 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v43);
        *(_OWORD *)v39 = *(_OWORD *)(a1 + 72);
        v40 = *(_QWORD *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v37, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xCu, (uint64_t)&v37, &__p);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v35);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v39, (uint64_t)&__p, (nlohmann::detail::exception *)&v41);
        v25 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v29, (uint64_t)&v43, (const nlohmann::detail::parse_error *)&v41);
LABEL_55:
        v19 = v25;
        v41.__vftable = (std::exception_vtbl *)&off_1E3D5B5F8;
        std::runtime_error::~runtime_error(&v42);
        std::exception::~exception(&v41);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&v35);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
LABEL_37:
        if (v44)
          operator delete(v44);
        return v19;
      case 0xE:
        v21 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v43);
        *(_OWORD *)v39 = *(_OWORD *)(a1 + 72);
        v40 = *(_QWORD *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v37, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0, (uint64_t)&v37, &__p);
        LOBYTE(v35) = 0;
        v36 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v39, (uint64_t)&__p, (nlohmann::detail::exception *)&v41);
        v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v21, (uint64_t)&v43, (const nlohmann::detail::parse_error *)&v41);
        goto LABEL_42;
      default:
        v23 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v43);
        *(_OWORD *)v39 = *(_OWORD *)(a1 + 72);
        v40 = *(_QWORD *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v37, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0x10u, (uint64_t)&v37, &__p);
        LOBYTE(v35) = 0;
        v36 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v39, (uint64_t)&__p, (nlohmann::detail::exception *)&v41);
        v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v23, (uint64_t)&v43, (const nlohmann::detail::parse_error *)&v41);
LABEL_42:
        v19 = v22;
        v41.__vftable = (std::exception_vtbl *)&off_1E3D5B5F8;
        std::runtime_error::~runtime_error(&v42);
        std::exception::~exception(&v41);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v36, v35);
        goto LABEL_43;
    }
  }
}

void sub_19C7BAD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::exception a31)
{
  std::runtime_error *v31;
  uint64_t v32;
  void *v34;

  a31.__vftable = (std::exception_vtbl *)&off_1E3D5B5F8;
  std::runtime_error::~runtime_error(v31 + 1);
  std::exception::~exception(&a31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (*(char *)(v32 - 105) < 0)
    operator delete(*(void **)(v32 - 128));
  v34 = *(void **)(v32 - 104);
  if (v34)
    operator delete(v34);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::parse_error *a4)
{
  nlohmann::detail::parse_error *exception;
  nlohmann::detail::parse_error *v7;

  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 41))
  {
    exception = (nlohmann::detail::parse_error *)__cxa_allocate_exception(0x28uLL);
    v7 = nlohmann::detail::parse_error::parse_error(exception, a4);
  }
  return 0;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  char v8;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = a1 + 32;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1 + 96, a3);
  *(_BYTE *)(a1 + 136) = 9;
  *(_BYTE *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 144) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  v8 = 1;
  std::vector<BOOL>::push_back(v6, &v8);
  return a1;
}

void sub_19C7BB020(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  _QWORD *v3;
  uint64_t **v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v6 = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v4);
  v8 = (_QWORD *)v1[15];
  if (v8 == v6)
  {
    v9 = v6;
    v10 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v10 = 5;
    v9 = (_QWORD *)v1[15];
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = (void *)v1[7];
  if (v11)
    operator delete(v11);
  if (*v2)
    operator delete(*v2);
  v12 = *v5;
  if (*v5)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2)
{
  char **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  nlohmann::detail::exception *exception;
  std::string *v25;
  __int128 v26;
  std::string v27;
  __int128 v28;
  std::string::size_type v29;
  char v30;

  v4 = (char **)(a1 + 1);
  v30 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 0);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v30);
  LOBYTE(v28) = 1;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v28, 1);
  v6 = v5;
  v7 = (_QWORD *)a1[2];
  v8 = a1[3];
  if ((unint64_t)v7 >= v8)
  {
    v10 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v11 = v8 - (_QWORD)*v4;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = v6;
    v9 = v15 + 8;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v17 = *v4;
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v9;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v9 = v7 + 1;
  }
  a1[2] = (uint64_t)v9;
  if (a2 != -1)
  {
    v20 = (char *)*(v9 - 1);
    if (v20)
    {
      v21 = *v20;
      if (v21 > 2)
        v22 = 1;
      else
        v22 = qword_19CB2D530[v21];
      if (v22 < a2)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v27, a2);
        v25 = std::string::insert(&v27, 0, "excessive object size: ");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v29 = v25->__r_.__value_.__r.__words[2];
        v28 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(408, (uint64_t)&v28, exception);
      }
    }
  }
  return 1;
}

void sub_19C7BB504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  int v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 *v12[4];
  unsigned __int8 *v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[8];
  uint64_t *v17;

  v2 = a1[2];
  if (*(_QWORD *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 1) & 1) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, (uint64_t)(a1 + 17));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*(_QWORD *)(a1[2] - 8), (uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
  }
  v4 = a1[1];
  v3 = a1[2];
  if (v4 == v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  v5 = a1[5];
  if (!v5)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  a1[2] = v3 - 8;
  a1[5] = v5 - 1;
  if (v4 != v3 - 8)
  {
    v6 = *(unsigned __int8 **)(v3 - 16);
    if (v6)
    {
      if (*v6 - 1 <= 1)
      {
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(&v13, (uint64_t)v6);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_begin(&v13);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(v12, *(_QWORD *)(a1[2] - 8));
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(v12);
        if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(&v13, v12))
        {
          while (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v13) != 9)
          {
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(&v13);
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(v12, *(_QWORD *)(a1[2] - 8));
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(v12);
            if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(&v13, v12))
            {
              return 1;
            }
          }
          v7 = *(unsigned __int8 **)(a1[2] - 8);
          v9 = v13;
          v10 = v14;
          v11 = v15;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v7, &v9, v12);
        }
      }
    }
  }
  return 1;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(_QWORD *a1, __int128 *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  _BYTE v7[8];
  uint64_t *v8;
  char v9;
  _BYTE v10[8];
  uint64_t *v11;
  __int128 *v12;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v10, (uint64_t)a2);
  v9 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (a1[2] - a1[1]) >> 3, 4);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 7), &v9);
  if (v9 && *(_QWORD *)(a1[2] - 8))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v7, (uint64_t)(a1 + 17));
    v4 = *(uint64_t ***)(*(_QWORD *)(a1[2] - 8) + 8);
    v12 = a2;
    v5 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
    a1[10] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)(v5 + 7), (uint64_t)v7);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
  return 1;
}

void sub_19C7BB7D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, uint64_t *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2)
{
  char **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  nlohmann::detail::exception *exception;
  std::string *v25;
  __int128 v26;
  std::string v27;
  __int128 v28;
  std::string::size_type v29;
  char v30;

  v4 = (char **)(a1 + 1);
  v30 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 2);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v30);
  LOBYTE(v28) = 2;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v28, 1);
  v6 = v5;
  v7 = (_QWORD *)a1[2];
  v8 = a1[3];
  if ((unint64_t)v7 >= v8)
  {
    v10 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v11 = v8 - (_QWORD)*v4;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = v6;
    v9 = v15 + 8;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v17 = *v4;
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v9;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v9 = v7 + 1;
  }
  a1[2] = (uint64_t)v9;
  if (a2 != -1)
  {
    v20 = (char *)*(v9 - 1);
    if (v20)
    {
      v21 = *v20;
      if (v21 > 2)
        v22 = 1;
      else
        v22 = qword_19CB2D530[v21];
      if (v22 < a2)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v27, a2);
        v25 = std::string::insert(&v27, 0, "excessive array size: ");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v29 = v25->__r_.__value_.__r.__words[2];
        v28 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(408, (uint64_t)&v28, exception);
      }
    }
  }
  return 1;
}

void sub_19C7BB9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  int v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t *v10;

  v2 = a1[2];
  if (*(_QWORD *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 3) & 1) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)(a1 + 17));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*(_QWORD *)(a1[2] - 8), (uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v5 = a1[1];
  v4 = a1[2];
  if (v5 == v4)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  v6 = a1[5];
  if (!v6)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  a1[2] = v4 - 8;
  a1[5] = v6 - 1;
  if (v5 == v4 - 8)
    v3 = 1;
  if ((v3 & 1) == 0)
  {
    v7 = *(_QWORD *)(v4 - 16);
    if (*(_BYTE *)v7 == 2)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](*(_QWORD *)(v7 + 8), *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8) - 16);
  }
  return 1;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::out_of_range *a4)
{
  nlohmann::detail::out_of_range *exception;
  nlohmann::detail::out_of_range *v7;

  *(_BYTE *)(a1 + 88) = 1;
  if (*(_BYTE *)(a1 + 128))
  {
    exception = (nlohmann::detail::out_of_range *)__cxa_allocate_exception(0x20uLL);
    v7 = nlohmann::detail::out_of_range::out_of_range(exception, a4);
  }
  return 0;
}

uint64_t std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()(uint64_t a1, int a2, char a3)
{
  uint64_t v3;
  char v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const char *v18;
  int v19;
  _BYTE v20[8];
  uint64_t *v21;
  _BYTE v22[8];
  uint64_t *v23;
  _BYTE v24[8];
  uint64_t *v25;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v24[0] = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v25, v6);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v22[0] = v24[0];
        v23 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        v24[0] = 0;
        v25 = 0;
        v13 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
        return v13;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v24);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v10, (uint64_t)v24);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          v13 = 1;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v14 = a1[8];
          if (v14)
          {
            v15 = v14 - 1;
            v16 = *(_QWORD *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v15;
            if (((v16 >> v15) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              v20[0] = v24[0];
              v21 = v25;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
              v24[0] = 0;
              v25 = 0;
              v13 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v18 = "!key_keep_stack.empty()";
          v19 = 6092;
        }
        else
        {
          v18 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v19 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v19, v18);
      }
    }
LABEL_17:
    v13 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_19C7BBE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[16 * v12];
  *(_BYTE *)v11 = *(_BYTE *)a2;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v15[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_19C7BBFD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(unsigned __int8 **a1)
{
  unsigned __int8 *result;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  nlohmann::detail::exception *exception;
  _QWORD v7[3];

  result = *a1;
  if (!result)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
  v3 = *result;
  if (v3 == 2)
  {
    v5 = *(unsigned __int8 **)(*((_QWORD *)result + 1) + 8);
    result = a1[2];
    if (result == v5)
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
  }
  else if (v3 == 1)
  {
    v4 = a1[1];
    if (v4 == (unsigned __int8 *)(*((_QWORD *)result + 1) + 8))
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
    return v4 + 56;
  }
  else if (a1[3])
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "cannot get value");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(214, (uint64_t)v7, exception);
  }
  return result;
}

void sub_19C7BC0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(unsigned __int8 *a1@<X0>, unsigned __int8 **a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 **v6;
  int v7;
  void **v8;
  void **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  nlohmann::detail::exception *exception;
  nlohmann::detail::exception *v19;
  nlohmann::detail::exception *v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  std::string v24;
  __int128 v25;
  std::string::size_type v26;

  if (*a2 != a1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v25, "iterator does not fit current value");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(202, (uint64_t)&v25, exception);
  }
  v6 = (unsigned __int8 **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(a3, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(v6);
  v7 = *a1;
  if ((v7 - 3) < 6)
  {
    if (a2[3])
    {
      v19 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v25, "iterator out of range");
      nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(205, (uint64_t)&v25, v19);
    }
    if (v7 == 8)
    {
      v9 = (void **)(a1 + 8);
      v8 = (void **)*((_QWORD *)a1 + 1);
      v14 = *v8;
      if (*v8)
      {
        v8[1] = v14;
        v10 = v14;
        goto LABEL_13;
      }
    }
    else
    {
      if (v7 != 3)
      {
LABEL_15:
        *a1 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
        return;
      }
      v9 = (void **)(a1 + 8);
      v8 = (void **)*((_QWORD *)a1 + 1);
      if (*((char *)v8 + 23) < 0)
      {
        v10 = *v8;
LABEL_13:
        operator delete(v10);
        v8 = (void **)*v9;
      }
    }
    operator delete(v8);
    *v9 = 0;
    goto LABEL_15;
  }
  if (v7 == 1)
  {
    v15 = (uint64_t **)*((_QWORD *)a1 + 1);
    v16 = (uint64_t *)a2[1];
    v17 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(v15, v16);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)(v16 + 4));
    operator delete(v16);
    a3[1] = v17;
  }
  else
  {
    if (v7 != 2)
    {
      v20 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v21 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:ne180100]<0>(&v24, v21);
      v22 = std::string::insert(&v24, 0, "cannot use erase() with ");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v26 = v22->__r_.__value_.__r.__words[2];
      v25 = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(307, (uint64_t)&v25, v20);
    }
    v11 = *((_QWORD *)a1 + 1);
    v12 = (uint64_t)a2[2];
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v25, v12 + 16, *(_QWORD *)(v11 + 8), v12);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](v11, v13);
    a3[2] = v12;
  }
}

void sub_19C7BC368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  char v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if ((v22 & 1) != 0)
    __cxa_free_exception(v21);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _BYTE v8[8];
  uint64_t *v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v8[0] = *(_BYTE *)v5;
      v9 = *(uint64_t **)(v5 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
      *(_BYTE *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a4, (uint64_t)v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
      a4 += 16;
      v5 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

nlohmann::detail::out_of_range *nlohmann::detail::out_of_range::out_of_range(nlohmann::detail::out_of_range *this, const nlohmann::detail::out_of_range *a2)
{
  *(_QWORD *)this = &off_1E3D5B5F8;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  MEMORY[0x1A1AD5E40]((char *)this + 16, (char *)a2 + 16);
  *(_QWORD *)this = &off_1E3D5B578;
  return this;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const char *v18;
  int v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;
  unsigned __int8 v24[8];
  uint64_t *v25;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v24[0] = 7;
    v25 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v22[0] = v24[0];
        v23 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        v24[0] = 0;
        v25 = 0;
        v13 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
        return v13;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v24);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v10, (uint64_t)v24);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          v13 = 1;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v14 = a1[8];
          if (v14)
          {
            v15 = v14 - 1;
            v16 = *(_QWORD *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v15;
            if (((v16 >> v15) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              v20[0] = v24[0];
              v21 = v25;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
              v24[0] = 0;
              v25 = 0;
              v13 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v18 = "!key_keep_stack.empty()";
          v19 = 6092;
        }
        else
        {
          v18 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v19 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v19, v18);
      }
    }
LABEL_17:
    v13 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_19C7BCB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const char *v18;
  int v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;
  unsigned __int8 v24[8];
  uint64_t *v25;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = (uint64_t *)*a2;
    v24[0] = 4;
    v25 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v22[0] = v24[0];
        v23 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        v24[0] = 0;
        v25 = 0;
        v13 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
        return v13;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v24);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v10, (uint64_t)v24);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          v13 = 1;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v14 = a1[8];
          if (v14)
          {
            v15 = v14 - 1;
            v16 = *(_QWORD *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v15;
            if (((v16 >> v15) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              v20[0] = v24[0];
              v21 = v25;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
              v24[0] = 0;
              v25 = 0;
              v13 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v18 = "!key_keep_stack.empty()";
          v19 = 6092;
        }
        else
        {
          v18 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v19 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v19, v18);
      }
    }
LABEL_17:
    v13 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_19C7BCE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const char *v17;
  int v18;
  _BYTE v19[8];
  uint64_t *v20;
  _BYTE v21[8];
  uint64_t *v22;
  _BYTE v23[8];
  uint64_t *v24;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v23[0] = 0;
    v24 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v21[0] = v23[0];
        v22 = v24;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
        v23[0] = 0;
        v24 = 0;
        v12 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
        return v12;
      }
      v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        v8 = *v7;
        if (v8 == 2)
        {
          v9 = (uint64_t *)*((_QWORD *)v7 + 1);
          v10 = v9[1];
          if (v10 >= v9[2])
          {
            v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v23);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v9, (uint64_t)v23);
            v11 = v10 + 16;
          }
          v9[1] = v11;
          v12 = 1;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          v13 = a1[8];
          if (v13)
          {
            v14 = v13 - 1;
            v15 = *(_QWORD *)(a1[7] + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v14;
            if (((v15 >> v14) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              v19[0] = v23[0];
              v20 = v24;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
              v23[0] = 0;
              v24 = 0;
              v12 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v17 = "!key_keep_stack.empty()";
          v18 = 6092;
        }
        else
        {
          v17 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v18 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v18, v17);
      }
    }
LABEL_17:
    v12 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_19C7BD10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const char *v18;
  int v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;
  unsigned __int8 v24[8];
  uint64_t *v25;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v24[0] = 5;
    v25 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v22[0] = v24[0];
        v23 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        v24[0] = 0;
        v25 = 0;
        v13 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
        return v13;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v24);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v10, (uint64_t)v24);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          v13 = 1;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v14 = a1[8];
          if (v14)
          {
            v15 = v14 - 1;
            v16 = *(_QWORD *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v15;
            if (((v16 >> v15) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              v20[0] = v24[0];
              v21 = v25;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
              v24[0] = 0;
              v25 = 0;
              v13 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v18 = "!key_keep_stack.empty()";
          v19 = 6092;
        }
        else
        {
          v18 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v19 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v19, v18);
      }
    }
LABEL_17:
    v13 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_19C7BD3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const char *v17;
  int v18;
  _BYTE v19[8];
  uint64_t *v20;
  _BYTE v21[8];
  uint64_t *v22;
  _BYTE v23[8];
  uint64_t *v24;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v23, a2);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v21[0] = v23[0];
        v22 = v24;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
        v23[0] = 0;
        v24 = 0;
        v12 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
        return v12;
      }
      v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        v8 = *v7;
        if (v8 == 2)
        {
          v9 = (uint64_t *)*((_QWORD *)v7 + 1);
          v10 = v9[1];
          if (v10 >= v9[2])
          {
            v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v23);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v9, (uint64_t)v23);
            v11 = v10 + 16;
          }
          v9[1] = v11;
          v12 = 1;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          v13 = a1[8];
          if (v13)
          {
            v14 = v13 - 1;
            v15 = *(_QWORD *)(a1[7] + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v14;
            if (((v15 >> v14) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              v19[0] = v23[0];
              v20 = v24;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
              v23[0] = 0;
              v24 = 0;
              v12 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v17 = "!key_keep_stack.empty()";
          v18 = 6092;
        }
        else
        {
          v17 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v18 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v18, v17);
      }
    }
LABEL_17:
    v12 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_19C7BD678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const char *v18;
  int v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;
  unsigned __int8 v24[8];
  uint64_t *v25;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v24[0] = 6;
    v25 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v22[0] = v24[0];
        v23 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        v24[0] = 0;
        v25 = 0;
        v13 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
        return v13;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v24);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v10, (uint64_t)v24);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          v13 = 1;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v14 = a1[8];
          if (v14)
          {
            v15 = v14 - 1;
            v16 = *(_QWORD *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v15;
            if (((v16 >> v15) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              v20[0] = v24[0];
              v21 = v25;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
              v24[0] = 0;
              v25 = 0;
              v13 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v18 = "!key_keep_stack.empty()";
          v19 = 6092;
        }
        else
        {
          v18 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v19 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v19, v18);
      }
    }
LABEL_17:
    v13 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_19C7BD940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

nlohmann::detail::parse_error *nlohmann::detail::parse_error::parse_error(nlohmann::detail::parse_error *this, const nlohmann::detail::parse_error *a2)
{
  *(_QWORD *)this = &off_1E3D5B5F8;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  MEMORY[0x1A1AD5E40]((char *)this + 16, (char *)a2 + 16);
  *(_QWORD *)this = &off_1E3D5B550;
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  return this;
}

void nlohmann::detail::parse_error::position_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  std::to_string(&v12, *(_QWORD *)(a1 + 16) + 1);
  v4 = std::string::insert(&v12, 0, " at line ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v13, ", column ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(_QWORD *)(a1 + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_19C7BDB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 25) < 0)
    operator delete(*(void **)(v26 - 48));
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

const char *nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(unsigned int a1)
{
  if (a1 > 0x10)
    return "unknown token";
  else
    return off_1E3D64AA8[a1];
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  v2 = *(_QWORD **)(a1 + 120);
  if (v2 == (_QWORD *)(a1 + 96))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(void **)(a1 + 56);
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 32);
  if (v5)
    operator delete(v5);
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  nlohmann::detail::exception *exception;
  std::string *v24;
  __int128 v25;
  std::string v26;
  __int128 v27;
  std::string::size_type v28;

  LOBYTE(v27) = 1;
  v5 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v27, a3);
  v6 = a1[3];
  v7 = (uint64_t *)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[1];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = (uint64_t *)&v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = v5;
    v8 = v15 + 1;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v19;
      }
      while (v17 != v18);
      v17 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v8;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  a1[2] = (uint64_t)v8;
  if (a2 != -1)
  {
    v20 = *(char *)*(v8 - 1);
    if (v20 > 2)
      v21 = 1;
    else
      v21 = qword_19CB2D530[v20];
    if (v21 < a2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v26, a2);
      v24 = std::string::insert(&v26, 0, "excessive object size: ");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v28 = v24->__r_.__value_.__r.__words[2];
      v27 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(408, (uint64_t)&v27, exception);
    }
  }
  return 1;
}

void sub_19C7BDDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  int v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  nlohmann::detail::exception *exception;
  std::string *v24;
  __int128 v25;
  std::string v26;
  __int128 v27;
  std::string::size_type v28;

  LOBYTE(v27) = 2;
  v5 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v27, a3);
  v6 = a1[3];
  v7 = (uint64_t *)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[1];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = (uint64_t *)&v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = v5;
    v8 = v15 + 1;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v19;
      }
      while (v17 != v18);
      v17 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v8;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  a1[2] = (uint64_t)v8;
  if (a2 != -1)
  {
    v20 = *(char *)*(v8 - 1);
    if (v20 > 2)
      v21 = 1;
    else
      v21 = qword_19CB2D530[v20];
    if (v21 < a2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v26, a2);
      v24 = std::string::insert(&v26, 0, "excessive array size: ");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v28 = v24->__r_.__value_.__r.__words[2];
      v27 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(408, (uint64_t)&v27, exception);
    }
  }
  return 1;
}

void sub_19C7BDFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  int v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::out_of_range *a4)
{
  nlohmann::detail::out_of_range *exception;
  nlohmann::detail::out_of_range *v7;

  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 41))
  {
    exception = (nlohmann::detail::out_of_range *)__cxa_allocate_exception(0x20uLL);
    v7 = nlohmann::detail::out_of_range::out_of_range(exception, a4);
  }
  return 0;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v12;
  _BYTE v13[8];
  uint64_t *v14;
  _BYTE v15[8];
  uint64_t *v16;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v10 = *a2;
    v15[0] = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v16, v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v15[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(v7, a2);
      }
      else
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::detail::value_t>((uint64_t)v7, a2);
        v9 = v8 + 16;
      }
      v7[1] = v9;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v12 = *a2;
      v13[0] = v12;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v14, v12);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::detail::value_t>(uint64_t a1, unsigned __int8 *a2)
{
  _BYTE *v3;
  int v4;
  uint64_t result;

  v4 = *a2;
  v3 = *(_BYTE **)(a1 + 8);
  *v3 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v3 + 8, v4);
  result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  *(_QWORD *)(a1 + 8) = v3 + 16;
  return result;
}

void sub_19C7BE224(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[16 * v9];
  v12 = *a2;
  *v11 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v11 + 8, v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
  v16 += 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_19C7BE30C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v13;
  unsigned __int8 v14[8];
  uint64_t *v15;
  unsigned __int8 v16[8];
  uint64_t *v17;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v16[0] = 7;
    v17 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 7;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v13 = (uint64_t *)*a2;
      v14[0] = 7;
      v15 = v13;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 7;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_19C7BE57C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v13;
  unsigned __int8 v14[8];
  uint64_t *v15;
  unsigned __int8 v16[8];
  uint64_t *v17;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v16[0] = 4;
    v17 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 4;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v13 = (uint64_t *)*a2;
      v14[0] = 4;
      v15 = v13;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 4;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_19C7BE7EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE v11[8];
  uint64_t *v12;
  _BYTE v13[8];
  uint64_t *v14;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v13[0] = 0;
    v14 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(v7);
      }
      else
      {
        *(_BYTE *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v9 = v8 + 16;
      }
      v7[1] = v9;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      v11[0] = 0;
      v12 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];

  v2 = *a1;
  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v5 = (uint64_t)(a1 + 2);
  v6 = a1[2] - v2;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v13[4] = a1 + 2;
  v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v5, v7);
  v9 = (uint64_t)&v8[16 * v3];
  v13[0] = v8;
  v13[1] = v9;
  v13[3] = &v8[16 * v10];
  *(_BYTE *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  v13[2] = v9 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v13);
  v11 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v13);
  return v11;
}

void sub_19C7BEA28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v13;
  unsigned __int8 v14[8];
  uint64_t *v15;
  unsigned __int8 v16[8];
  uint64_t *v17;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v16[0] = 5;
    v17 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 5;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v13 = (uint64_t *)*a2;
      v14[0] = 5;
      v15 = v13;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 5;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_19C7BEC98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t **v5;
  int v6;
  _BYTE v8[8];
  uint64_t *v9;
  _BYTE v10[8];
  uint64_t *v11;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v10, a2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
    return *a1;
  }
  else
  {
    v5 = *(uint64_t ***)(v4 - 8);
    v6 = *(unsigned __int8 *)v5;
    if (v6 == 2)
    {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(v5[1], a2);
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v8, a2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = &v13[16 * v9];
    v18 = &v13[16 * v12];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v16, a2);
    v17 = v16 + 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, &v15);
    v8 = a1[1];
    std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_19C7BEE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v13;
  unsigned __int8 v14[8];
  uint64_t *v15;
  unsigned __int8 v16[8];
  uint64_t *v17;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v16[0] = 6;
    v17 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 6;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v13 = (uint64_t *)*a2;
      v14[0] = 6;
      v15 = v13;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 6;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_19C7BF100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlohmann::detail::input_stream_adapter::~input_stream_adapter(nlohmann::detail::input_stream_adapter *this)
{
  if (*(_QWORD *)this)
    std::ios_base::clear((std::ios_base *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24)), *(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32) & 2);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(void (****a1)(void), uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v11)(void);
  void (**v12)(void);
  unsigned int v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(void);
  unsigned int v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD **v29;
  uint64_t *v30;
  _QWORD **v31;
  uint64_t (*v32)(void);
  void (*v34)(void);
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t (***v38)(void);
  _QWORD **v39;
  unsigned __int8 **v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned __int8 **v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned int v62;
  _QWORD **v63;
  uint64_t v64;
  void (*v65)(void);
  unint64_t v66;
  _QWORD **v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD **v74;

  switch(*(_BYTE *)a2)
  {
    case 0:
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 1:
      v12 = **a1;
      if (!*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16))
      {
        v11 = (uint64_t (*)(void))v12[1];
        return v11();
      }
      if (a3)
      {
        v12[1]();
        v13 = a6 + a5;
        v14 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          v15 = (unint64_t)a1[77];
          if (v15 >= v13)
            goto LABEL_7;
        }
        else
        {
          v15 = *((unsigned __int8 *)a1 + 631);
          if (v13 <= v15)
          {
LABEL_7:
            v16 = *(_QWORD **)(a2 + 8);
            v17 = (_QWORD *)*v16;
            if (v16[2] == 1)
            {
              v18 = (_QWORD *)*v16;
            }
            else
            {
              v66 = 0;
              do
              {
                v67 = a1 + 76;
                if (*((char *)a1 + 631) < 0)
                  v67 = (_QWORD **)*v14;
                ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v67, (a6 + a5));
                ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v17 + 4, a4);
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v17 + 7, 1, a4, a5, (a6 + a5));
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v68 = (_QWORD *)v17[1];
                if (v68)
                {
                  do
                  {
                    v18 = v68;
                    v68 = (_QWORD *)*v68;
                  }
                  while (v68);
                }
                else
                {
                  do
                  {
                    v18 = (_QWORD *)v17[2];
                    v50 = *v18 == (_QWORD)v17;
                    v17 = v18;
                  }
                  while (!v50);
                }
                ++v66;
                v16 = *(_QWORD **)(a2 + 8);
                v17 = v18;
              }
              while (v66 < v16[2] - 1);
            }
            v69 = v16 + 1;
            if (v18 == v69)
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            v70 = (_QWORD *)v18[1];
            if (v70)
            {
              do
              {
                v71 = v70;
                v70 = (_QWORD *)*v70;
              }
              while (v70);
            }
            else
            {
              v73 = v18;
              do
              {
                v71 = (_QWORD *)v73[2];
                v50 = *v71 == (_QWORD)v73;
                v73 = v71;
              }
              while (!v50);
            }
            if (v71 != v69)
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            v74 = a1 + 76;
            if (*((char *)a1 + 631) < 0)
              v74 = (_QWORD **)*v14;
            ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v74, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v18 + 4, a4);
            ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v18 + 7, 1, a4, a5, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10);
            v65 = (**a1)[1];
            goto LABEL_108;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v15, 32);
        goto LABEL_7;
      }
      (*v12)();
      v45 = *(_QWORD *)(a2 + 8);
      v46 = *(_QWORD **)v45;
      if (*(_QWORD *)(v45 + 16) != 1)
      {
        v47 = 0;
        do
        {
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v46 + 4, a4);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v46 + 7, 0, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44);
          v48 = (_QWORD *)v46[1];
          v49 = v46;
          if (v48)
          {
            do
            {
              v46 = v48;
              v48 = (_QWORD *)*v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              v46 = (_QWORD *)v49[2];
              v50 = *v46 == (_QWORD)v49;
              v49 = v46;
            }
            while (!v50);
          }
          ++v47;
          v45 = *(_QWORD *)(a2 + 8);
        }
        while (v47 < *(_QWORD *)(v45 + 16) - 1);
      }
      v51 = (_QWORD *)(v45 + 8);
      if (v46 == v51)
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      v52 = (_QWORD *)v46[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        v72 = v46;
        do
        {
          v53 = (_QWORD *)v72[2];
          v50 = *v53 == (_QWORD)v72;
          v72 = v53;
        }
        while (!v50);
      }
      if (v53 != v51)
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v46 + 4, a4);
      ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v46 + 7, 0, a4, a5, a6);
LABEL_109:
      v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 2:
      v19 = *(uint64_t **)(a2 + 8);
      v20 = *v19;
      v21 = v19[1];
      v22 = **a1;
      if (v20 == v21)
      {
        v11 = (uint64_t (*)(void))v22[1];
        return v11();
      }
      if (a3)
      {
        v22[1]();
        v23 = a6 + a5;
        v24 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          v25 = (unint64_t)a1[77];
          if (v25 >= v23)
            goto LABEL_13;
        }
        else
        {
          v25 = *((unsigned __int8 *)a1 + 631);
          if (v23 <= v25)
          {
LABEL_13:
            v26 = *(uint64_t **)(a2 + 8);
            v28 = *v26;
            v27 = v26[1];
            if (v28 != v27 - 16)
            {
              do
              {
                v29 = a1 + 76;
                if (*((char *)a1 + 631) < 0)
                  v29 = (_QWORD **)*v24;
                ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v29, (a6 + a5));
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v28, 1, a4, a5, (a6 + a5));
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v28 += 16;
                v30 = *(uint64_t **)(a2 + 8);
                v27 = v30[1];
              }
              while (v28 != v27 - 16);
              v28 = *v30;
            }
            if (v28 == v27)
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            v31 = a1 + 76;
            if (*((char *)a1 + 631) < 0)
              v31 = (_QWORD **)*v24;
            ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v31, (a6 + a5));
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16, 1, a4, a5, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10);
            if (*((char *)a1 + 631) < 0)
              v24 = (_QWORD *)*v24;
            ((void (*)(void (***)(void), _QWORD *, _QWORD))(**a1)[1])(*a1, v24, a6);
            goto LABEL_95;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v25, 32);
        goto LABEL_13;
      }
      (*v22)();
      v54 = *(uint64_t **)(a2 + 8);
      v56 = *v54;
      v55 = v54[1];
      if (v56 == v55 - 16)
      {
        v57 = v56;
      }
      else
      {
        v57 = v56;
        do
        {
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v57, 0, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44);
          v57 += 16;
          v58 = *(uint64_t **)(a2 + 8);
          v55 = v58[1];
        }
        while (v57 != v55 - 16);
        v56 = *v58;
      }
      if (v56 == v55)
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v57, 0, a4, a5, a6);
LABEL_95:
      v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 3:
      (***a1)();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, *(uint64_t **)(a2 + 8), a4);
      v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 4:
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 5:
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(a1, *(_QWORD *)(a2 + 8));
    case 6:
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(a1, *(_QWORD *)(a2 + 8));
    case 7:
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float((char *)a1, *(double *)(a2 + 8));
    case 8:
      v34 = (**a1)[1];
      if (a3)
      {
        v34();
        v35 = (a6 + a5);
        v36 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          v37 = (unint64_t)a1[77];
          if (v37 >= v35)
          {
            v38 = (uint64_t (***)(void))*a1;
            goto LABEL_62;
          }
        }
        else
        {
          v37 = *((unsigned __int8 *)a1 + 631);
          if (v35 <= v37)
          {
            v38 = (uint64_t (***)(void))*a1;
            v39 = a1 + 76;
            goto LABEL_63;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v37, 32);
        v38 = (uint64_t (***)(void))*a1;
        v39 = a1 + 76;
        if ((*((char *)a1 + 631) & 0x80000000) == 0)
        {
LABEL_63:
          ((void (*)(uint64_t (***)(void), _QWORD **, uint64_t))(*v38)[1])(v38, v39, v35);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\"bytes\": [", 10);
          v59 = *(unsigned __int8 ***)(a2 + 8);
          v61 = *v59;
          v60 = v59[1];
          if (v61 != v60)
          {
            if (v61 != v60 - 1)
            {
              do
              {
                v62 = *v61++;
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v62);
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ", ", 2);
              }
              while (v61 != (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1));
            }
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v61);
          }
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "],\n", 3);
          v63 = a1 + 76;
          if (*((char *)a1 + 631) < 0)
            v63 = (_QWORD **)*v36;
          ((void (*)(void (***)(void), _QWORD **, uint64_t))(**a1)[1])(*a1, v63, v35);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\"subtype\": ", 11);
          v64 = *(_QWORD *)(a2 + 8);
          if (*(_BYTE *)(v64 + 25))
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v64 + 24));
          else
            ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "null", 4);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10);
          v65 = (**a1)[1];
LABEL_108:
          v65();
          goto LABEL_109;
        }
LABEL_62:
        v39 = (_QWORD **)*v36;
        goto LABEL_63;
      }
      v34();
      v40 = *(unsigned __int8 ***)(a2 + 8);
      v42 = *v40;
      v41 = v40[1];
      if (v42 != v41)
      {
        while (v42 != v41 - 1)
        {
          v43 = *v42++;
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v43);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44);
          v41 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 8) + 8);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v42);
      }
      ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "],\"subtype\":", 12);
      v44 = *(_QWORD *)(a2 + 8);
      if (*(_BYTE *)(v44 + 25))
      {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v44 + 24));
        goto LABEL_109;
      }
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 9:
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    default:
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
  }
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C100;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_character()
{
  return std::ostream::put();
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_characters()
{
  return std::ostream::write();
}

void nlohmann::detail::output_stream_adapter<char>::~output_stream_adapter()
{
  JUMPOUT(0x1A1AD6260);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  lconv *v7;
  char *thousands_sep;
  char *decimal_point;
  int8x16_t *v10;
  int8x16_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v7 = localeconv();
  *(_QWORD *)(a1 + 80) = v7;
  thousands_sep = v7->thousands_sep;
  if (thousands_sep)
    LOBYTE(thousands_sep) = *thousands_sep;
  *(_BYTE *)(a1 + 88) = (_BYTE)thousands_sep;
  decimal_point = v7->decimal_point;
  if (v7->decimal_point)
    LOBYTE(decimal_point) = *decimal_point;
  *(_OWORD *)(a1 + 90) = 0u;
  *(_BYTE *)(a1 + 89) = (_BYTE)decimal_point;
  *(_OWORD *)(a1 + 106) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 202) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 266) = 0u;
  *(_OWORD *)(a1 + 282) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_OWORD *)(a1 + 314) = 0u;
  *(_OWORD *)(a1 + 330) = 0u;
  *(_OWORD *)(a1 + 346) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 378) = 0u;
  *(_OWORD *)(a1 + 394) = 0u;
  *(_OWORD *)(a1 + 410) = 0u;
  *(_OWORD *)(a1 + 426) = 0u;
  *(_OWORD *)(a1 + 442) = 0u;
  *(_OWORD *)(a1 + 458) = 0u;
  *(_OWORD *)(a1 + 474) = 0u;
  *(_OWORD *)(a1 + 490) = 0u;
  *(_OWORD *)(a1 + 506) = 0u;
  *(_OWORD *)(a1 + 522) = 0u;
  *(_OWORD *)(a1 + 538) = 0u;
  *(_OWORD *)(a1 + 554) = 0u;
  *(_OWORD *)(a1 + 570) = 0u;
  *(_OWORD *)(a1 + 586) = 0u;
  *(_BYTE *)(a1 + 602) = a3;
  v10 = (int8x16_t *)operator new(0x208uLL);
  *(_QWORD *)(a1 + 608) = v10;
  *(_QWORD *)(a1 + 624) = 0x8000000000000208;
  v11 = vdupq_n_s8(a3);
  *(_QWORD *)(a1 + 616) = 512;
  *v10 = v11;
  v10[1] = v11;
  v10[2] = v11;
  v10[3] = v11;
  v10[4] = v11;
  v10[5] = v11;
  v10[6] = v11;
  v10[7] = v11;
  v10[8] = v11;
  v10[9] = v11;
  v10[10] = v11;
  v10[11] = v11;
  v10[12] = v11;
  v10[13] = v11;
  v10[14] = v11;
  v10[15] = v11;
  v10[16] = v11;
  v10[17] = v11;
  v10[18] = v11;
  v10[19] = v11;
  v10[20] = v11;
  v10[21] = v11;
  v10[22] = v11;
  v10[23] = v11;
  v10[24] = v11;
  v10[25] = v11;
  v10[26] = v11;
  v10[27] = v11;
  v10[28] = v11;
  v10[29] = v11;
  v10[30] = v11;
  v10[31] = v11;
  v10[32].i8[0] = 0;
  *(_DWORD *)(a1 + 632) = a4;
  return a1;
}

void sub_19C7BFD98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped(uint64_t result, uint64_t *a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t (*v25)(void);
  int v26;
  nlohmann::detail::exception *exception;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  char *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  uint64_t *v36;
  nlohmann::detail::exception *v37;
  _BYTE v38[16];
  std::string v39;
  std::string v40;
  std::string v41;
  __int128 v42;
  std::string::size_type v43;
  char __str[8];
  std::string::size_type v45;
  char v46;
  char v47;
  unsigned int v48[3];

  v47 = 0;
  LOBYTE(v3) = *((char *)a2 + 23) < 0;
  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  if (!v4)
    return result;
  v7 = (_QWORD *)result;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v48[0] = 0;
  v12 = result + 90;
  do
  {
    if ((v3 & 1) != 0)
      v13 = (uint64_t *)*a2;
    else
      v13 = a2;
    v14 = *((unsigned __int8 *)v13 + v8);
    result = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(&v47, v48, v14);
    if ((_DWORD)result == 1)
    {
      v16 = *((_DWORD *)v7 + 158);
      if ((v16 - 1) >= 2)
      {
        if (!v16)
        {
          v46 = 3;
          *(_DWORD *)__str = 0;
          snprintf(__str, 3uLL, "%.2X", v14);
          exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
          std::to_string(&v39, v8);
          v28 = std::string::insert(&v39, 0, "invalid UTF-8 byte at index ");
          v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v40.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          v30 = std::string::append(&v40, ": 0x");
          v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v41.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          if (v46 >= 0)
            v32 = __str;
          else
            v32 = *(char **)__str;
          if (v46 >= 0)
            v33 = v46;
          else
            v33 = v45;
          v34 = std::string::append(&v41, v32, v33);
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v43 = v34->__r_.__value_.__r.__words[2];
          v42 = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38);
          nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(316, (uint64_t)&v42, exception);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
      }
      v17 = v9 != 0;
      if (v16 == 1)
      {
        v18 = v12 + v10;
        if (a3)
        {
          *(_DWORD *)v18 = 1717990748;
          *(_WORD *)(v18 + 4) = 25702;
          v10 += 6;
        }
        else
        {
          v10 += 3;
          *(_WORD *)v18 = -16401;
          *(_BYTE *)(v18 + 2) = -67;
        }
        if ((unint64_t)(v10 - 500) <= 0xC)
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v12, v10);
          v10 = 0;
        }
      }
      v9 = 0;
      v8 -= v17;
      v47 = 0;
      v11 = v10;
    }
    else if ((_DWORD)result)
    {
      if ((a3 & 1) == 0)
      {
        if (*((char *)a2 + 23) >= 0)
          v19 = a2;
        else
          v19 = (uint64_t *)*a2;
        *(_BYTE *)(v12 + v11++) = *((_BYTE *)v19 + v8);
      }
      ++v9;
    }
    else
    {
      switch(v48[0])
      {
        case 8u:
          v15 = 25180;
          goto LABEL_43;
        case 9u:
          v15 = 29788;
          goto LABEL_43;
        case 0xAu:
          v15 = 28252;
          goto LABEL_43;
        case 0xBu:
          goto LABEL_29;
        case 0xCu:
          v15 = 26204;
          goto LABEL_43;
        case 0xDu:
          v15 = 29276;
          goto LABEL_43;
        default:
          if (v48[0] == 34)
          {
            v15 = 8796;
            goto LABEL_43;
          }
          if (v48[0] == 92)
          {
            v15 = 23644;
LABEL_43:
            *(_WORD *)(v12 + v11) = v15;
            v11 += 2;
            goto LABEL_44;
          }
LABEL_29:
          if (v48[0] > 0x7E)
            v20 = a3;
          else
            v20 = 0;
          if (v48[0] < 0x20 || v20)
          {
            v24 = (char *)(v12 + v11);
            if (HIWORD(v48[0]))
            {
              result = snprintf(v24, 0xDuLL, "\\u%04x\\u%04x", (unsigned __int16)((v48[0] >> 10) - 10304), v48[0] & 0x3FF | 0xDC00);
              v11 += 12;
            }
            else
            {
              result = snprintf(v24, 7uLL, "\\u%04x", v48[0]);
              v11 += 6;
            }
          }
          else
          {
            if (*((char *)a2 + 23) >= 0)
              v21 = a2;
            else
              v21 = (uint64_t *)*a2;
            *(_BYTE *)(v12 + v11++) = *((_BYTE *)v21 + v8);
          }
LABEL_44:
          if ((unint64_t)(v11 - 500) > 0xC)
          {
            v9 = 0;
            v10 = v11;
          }
          else
          {
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v12, v11);
            v11 = 0;
            v10 = 0;
            v9 = 0;
          }
          break;
      }
    }
    ++v8;
    v22 = *((char *)a2 + 23);
    v3 = v22 >> 31;
    v23 = a2[1];
    if (v22 >= 0)
      v23 = *((unsigned __int8 *)a2 + 23);
  }
  while (v8 < v23);
  if (v47)
  {
    v26 = *((_DWORD *)v7 + 158);
    switch(v26)
    {
      case 1:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v12, v10);
        v25 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
        break;
      case 2:
        v25 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
        break;
      case 0:
        v46 = 3;
        *(_DWORD *)__str = 0;
        v36 = (uint64_t *)*a2;
        if (v22 >= 0)
          v36 = a2;
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v36 + v23 - 1));
        v37 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v41);
        nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(316, (uint64_t)&v42, v37);
      default:
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
    }
    return v25();
  }
  else if (v11)
  {
    v25 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
    return v25();
  }
  return result;
}

void sub_19C7C0330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void *v41;
  int v42;
  uint64_t v43;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&a29);
  if (a41 < 0)
  {
    operator delete(__p);
    if ((v42 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v43 - 97) < 0)
        operator delete(*(void **)(v43 - 120));
      _Unwind_Resume(a1);
    }
  }
  else if (!v42)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v41);
  goto LABEL_6;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(_QWORD *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  char *v5;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  LOBYTE(v2) = a2;
  if (a2 >= 0xA)
  {
    if (a2 >= 0x64)
    {
      *(_WORD *)((char *)a1 + 17) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[(a2 - 100 * ((41 * a2) >> 12))];
      v5 = (char *)a1 + 17;
      v2 = (41 * a2) >> 12;
      goto LABEL_10;
    }
    v3 = 2;
  }
  else
  {
    v3 = 1;
  }
  v5 = (char *)a1 + v3 + 16;
  if (a2 < 0xA)
  {
LABEL_10:
    *(v5 - 1) = v2 | 0x30;
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  }
  *((_WORD *)v5 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[a2];
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  _BYTE *v3;
  char *v4;
  int v6;
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  v2 = a2;
  v3 = a1 + 2;
  if ((v2 & 0x8000000000000000) != 0)
  {
    *v3 = 45;
    v2 = -(uint64_t)v2;
    if (v2 >= 0xA)
    {
      v6 = 4;
      v10 = v2;
      while (1)
      {
        if (v10 <= 0x63)
        {
          v6 -= 2;
          goto LABEL_24;
        }
        if (v10 <= 0x3E7)
          break;
        if (v10 >> 4 < 0x271)
          goto LABEL_24;
        v6 += 4;
        v9 = v10 >= 0x186A0;
        v10 /= 0x2710uLL;
        if (!v9)
        {
          v6 -= 3;
          goto LABEL_24;
        }
      }
      --v6;
    }
    else
    {
      v6 = 1;
    }
LABEL_24:
    v7 = v6 + 1;
  }
  else
  {
    if (v2 < 0xA)
    {
      v4 = (char *)a1 + 17;
LABEL_33:
      *(v4 - 1) = v2 + 48;
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
    }
    v7 = 4;
    v8 = v2;
    while (1)
    {
      if (v8 <= 0x63)
      {
        v7 -= 2;
        goto LABEL_25;
      }
      if (v8 <= 0x3E7)
        break;
      if (v8 >> 4 < 0x271)
        goto LABEL_25;
      v7 += 4;
      v9 = v8 >= 0x186A0;
      v8 /= 0x2710uLL;
      if (!v9)
      {
        v7 -= 3;
        goto LABEL_25;
      }
    }
    --v7;
  }
LABEL_25:
  if (v7 >= 0x3F)
    nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
  v4 = &v3[v7];
  if (v2 < 0x64)
  {
    v11 = v2;
  }
  else
  {
    do
    {
      v11 = v2 / 0x64;
      *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v2 % 0x64];
      v4 -= 2;
      v12 = v2 >> 4;
      v2 /= 0x64uLL;
    }
    while (v12 > 0x270);
  }
  if (v11 < 0xA)
  {
    LOBYTE(v2) = v11;
    goto LABEL_33;
  }
  *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v11];
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  v2 = a2;
  if (a2 < 0xA)
  {
    v3 = (uint64_t)a1 + 17;
LABEL_21:
    *(_BYTE *)(v3 - 1) = v2 + 48;
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  }
  v5 = 4;
  v6 = a2;
  while (1)
  {
    if (v6 <= 0x63)
    {
      v5 -= 2;
      goto LABEL_13;
    }
    if (v6 <= 0x3E7)
      break;
    if (v6 >> 4 < 0x271)
      goto LABEL_13;
    v7 = v6 >> 5;
    v6 /= 0x2710uLL;
    v5 += 4;
    if (v7 <= 0xC34)
    {
      v5 -= 3;
      goto LABEL_13;
    }
  }
  --v5;
LABEL_13:
  if (v5 >= 0x3F)
    nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
  v3 = (uint64_t)a1 + v5 + 16;
  if (a2 < 0x64)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = v2 / 0x64;
      *(_WORD *)(v3 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * (v2 % 0x64)];
      v3 -= 2;
      v9 = v2 >> 4;
      v2 /= 0x64uLL;
    }
    while (v9 > 0x270);
  }
  if (v8 < 0xA)
  {
    LOBYTE(v2) = v8;
    goto LABEL_21;
  }
  *(_WORD *)(v3 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * v8];
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float(char *a1, double a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, const char *, uint64_t);
  uint64_t v5;
  const char *v6;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v5 = *(_QWORD *)a1;
    v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(_QWORD **)a1 + 8);
    v6 = "null";
    v3 = 4;
  }
  else
  {
    v3 = nlohmann::detail::to_chars<double>(a1 + 16, (uint64_t)(a1 + 80), a2) - (a1 + 16);
    v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(_QWORD **)a1 + 8);
    v5 = *(_QWORD *)a1;
    v6 = a1 + 16;
  }
  return v4(v5, v6, v3);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(_BYTE *a1, unsigned int *a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;

  v3 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[a3];
  if (*a1)
    v4 = a3 & 0x3F | (*a2 << 6);
  else
    v4 = (0xFFu >> v3) & a3;
  *a2 = v4;
  v5 = 16 * *a1 + v3 + 256;
  if (v5 >= 0x190)
    __assert_rtn("decode", "json.hpp", 16606, "index < 400");
  v6 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v5];
  *a1 = v6;
  return v6;
}

char *nlohmann::detail::to_chars<double>(char *a1, uint64_t a2, double a3)
{
  char *v3;
  char *result;
  unint64_t v5;
  char *v6;

  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    nlohmann::detail::to_chars<double>();
  v3 = a1;
  if ((*(_QWORD *)&a3 & 0x8000000000000000) != 0)
  {
    a3 = -a3;
    *a1 = 45;
    v3 = a1 + 1;
  }
  if (a3 == 0.0)
  {
    *(_WORD *)v3 = 11824;
    result = v3 + 3;
    v3[2] = 48;
  }
  else
  {
    v5 = a2 - (_QWORD)v3;
    if (a2 - (uint64_t)v3 <= 16)
      nlohmann::detail::to_chars<double>();
    v6 = 0;
    nlohmann::detail::dtoa_impl::grisu2<double>((uint64_t)v3, (unsigned int *)&v6 + 1, &v6, a3);
    if (SHIDWORD(v6) >= 18)
      nlohmann::detail::to_chars<double>();
    if (v5 <= 0x15)
      nlohmann::detail::to_chars<double>();
    if (v5 == 22)
      nlohmann::detail::to_chars<double>();
    return nlohmann::detail::dtoa_impl::format_buffer((nlohmann::detail::dtoa_impl *)v3, (char *)HIDWORD(v6), (int)v6, -4, 15);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2<double>(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4)
{
  uint64_t v7;
  uint64_t v9[6];

  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    nlohmann::detail::dtoa_impl::grisu2<double>();
  if (a4 <= 0.0)
    nlohmann::detail::dtoa_impl::grisu2<double>();
  nlohmann::detail::dtoa_impl::compute_boundaries<double>((uint64_t)v9, a4);
  return nlohmann::detail::dtoa_impl::grisu2(a1, a2, a3, v9[2], v9[3], v9[0], v9[1], v7, v9[4], (nlohmann::detail::dtoa_impl *)v9[5]);
}

char *nlohmann::detail::dtoa_impl::format_buffer(nlohmann::detail::dtoa_impl *this, char *a2, int a3, int a4, int a5)
{
  int v5;
  uint64_t v7;
  char *result;
  _BYTE *v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;

  if ((a4 & 0x80000000) == 0)
    nlohmann::detail::dtoa_impl::format_buffer();
  if (a5 <= 0)
    nlohmann::detail::dtoa_impl::format_buffer();
  v5 = (int)a2;
  v7 = a3 + (uint64_t)(int)a2;
  if ((a3 & 0x80000000) == 0 && (int)v7 <= a5)
  {
    memset((char *)this + (int)a2, 48, a3);
    *((_BYTE *)this + v7) = 46;
    result = (char *)this + v7 + 2;
    *((_BYTE *)this + (int)v7 + 1) = 48;
    return result;
  }
  if ((int)v7 < 1 || (int)v7 > a5)
  {
    if ((int)v7 > a4 && (int)v7 <= 0)
    {
      v10 = -(int)v7;
      memmove((char *)this + v10 + 2, this, (int)a2);
      *(_WORD *)this = 11824;
      memset((char *)this + 2, 48, v10);
      return (char *)this + v10 + v5 + 2;
    }
    if ((_DWORD)a2 == 1)
    {
      v11 = 1;
    }
    else
    {
      memmove((char *)this + 2, (char *)this + 1, (int)a2 - 1);
      *((_BYTE *)this + 1) = 46;
      v11 = v5 + 1;
    }
    v12 = (char *)this + v11;
    *v12 = 101;
    if ((int)v7 <= -999)
      nlohmann::detail::dtoa_impl::format_buffer();
    if ((int)v7 >= 1001)
      nlohmann::detail::dtoa_impl::format_buffer();
    if ((int)v7 >= 1)
      v13 = 43;
    else
      v13 = 45;
    if ((int)v7 - 1 >= 0)
      v14 = v7 - 1;
    else
      v14 = 1 - v7;
    v12[1] = v13;
    if (v14 > 9)
    {
      if (v14 > 0x63)
      {
        v12[2] = (unsigned __int16)v14 / 0x64u + 48;
        v17 = (unsigned __int16)v14 % 0x64u;
        v12[3] = (v17 / 0xAu) | 0x30;
        v12[4] = (v17 % 0xAu) | 0x30;
        v16 = 2;
        return &v12[v16 + 3];
      }
      v12[2] = v14 / 0xAu + 48;
      v15 = (v14 % 0xAu) | 0x30;
    }
    else
    {
      v12[2] = 48;
      v15 = v14 + 48;
    }
    v12[3] = v15;
    v16 = 1;
    return &v12[v16 + 3];
  }
  if ((a3 & 0x80000000) == 0)
    nlohmann::detail::dtoa_impl::format_buffer();
  v9 = (char *)this + v7;
  memmove(v9 + 1, v9, (int)a2 - (unint64_t)v7);
  *v9 = 46;
  return (char *)this + v5 + 1;
}

uint64_t nlohmann::detail::dtoa_impl::compute_boundaries<double>@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  if (a2 <= 0.0)
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  v4 = *(_QWORD *)&a2 >> 52;
  v5 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  v6 = 2 * v5;
  v7 = *(_QWORD *)&a2 >> 53;
  v8 = 4 * v5;
  v9 = (*(_QWORD *)&a2 >> 52) - 1077;
  v10 = 0x10000000000000;
  if ((*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    v8 = 2 * v5;
    v9 = (*(_QWORD *)&a2 >> 52) - 1076;
    v10 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  v11 = v7 == 0;
  if (v7)
    v12 = v8;
  else
    v12 = 2 * v5;
  if (v11)
    v9 = (*(_QWORD *)&a2 >> 52) - 1076;
  else
    v5 = v10;
  v3 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (v4)
  {
    v13 = (*(_QWORD *)&a2 >> 52) - 1076;
  }
  else
  {
    v12 = 2 * v3;
    v9 = -1075;
    v13 = 4294966221;
  }
  if (v4)
  {
    v14 = (*(_QWORD *)&a2 >> 52) - 1075;
  }
  else
  {
    v6 = 2 * v3;
    v14 = 4294966222;
  }
  if (v4)
    v15 = v5;
  else
    v15 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v24 = v12 - 1;
  v25 = v9;
  v16 = nlohmann::detail::dtoa_impl::diyfp::normalize(v6 | 1, v13);
  v18 = v17;
  v19 = nlohmann::detail::dtoa_impl::diyfp::normalize_to(&v24, v17);
  v21 = v20;
  result = nlohmann::detail::dtoa_impl::diyfp::normalize(v15, v14);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v23;
  *(_QWORD *)(a1 + 16) = v19;
  *(_DWORD *)(a1 + 24) = v21;
  *(_QWORD *)(a1 + 32) = v16;
  *(_DWORD *)(a1 + 40) = v18;
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, nlohmann::detail::dtoa_impl *a10)
{
  uint64_t cached_power_for_binary_exponent;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  _QWORD v29[2];
  _QWORD v30[2];
  _QWORD v31[2];

  v31[0] = a4;
  v31[1] = a5;
  v30[0] = a6;
  v30[1] = a7;
  v29[0] = a9;
  v29[1] = a10;
  if ((_DWORD)a10 != (_DWORD)a5)
    nlohmann::detail::dtoa_impl::grisu2();
  if ((_DWORD)a10 != (_DWORD)a7)
    nlohmann::detail::dtoa_impl::grisu2();
  cached_power_for_binary_exponent = nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(a10);
  v15 = v14;
  v27 = cached_power_for_binary_exponent;
  v28 = v16;
  v17 = nlohmann::detail::dtoa_impl::diyfp::mul(v30, &v27);
  v19 = v18;
  v20 = nlohmann::detail::dtoa_impl::diyfp::mul(v31, &v27);
  v22 = v21;
  v23 = nlohmann::detail::dtoa_impl::diyfp::mul(v29, &v27);
  *a3 = -v15;
  return nlohmann::detail::dtoa_impl::grisu2_digit_gen(a1, a2, a3, v20 + 1, v22, v17, v19, v25, v23 - 1, v24);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::normalize(uint64_t result, unint64_t a2)
{
  if (!result)
    __assert_rtn("normalize", "json.hpp", 14760, "x.f != 0");
  for (; (result & 0x8000000000000000) == 0; a2 = (a2 - 1) | a2 & 0xFFFFFFFF00000000)
    result *= 2;
  return result;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::normalize_to(uint64_t *a1, int a2)
{
  int v2;
  uint64_t v3;
  unint64_t result;
  const char *v5;
  int v6;

  v2 = *((_DWORD *)a1 + 2) - a2;
  if (v2 < 0)
  {
    v5 = "delta >= 0";
    v6 = 14779;
    goto LABEL_6;
  }
  v3 = *a1;
  result = *a1 << v2;
  if (result >> v2 != v3)
  {
    v5 = "((x.f << delta) >> delta) == x.f";
    v6 = 14780;
LABEL_6:
    __assert_rtn("normalize_to", "json.hpp", v6, v5);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(nlohmann::detail::dtoa_impl *this)
{
  int v1;
  unsigned int v2;
  _QWORD *v3;
  int v4;

  if ((int)this <= -1501)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  if ((int)this >= 1501)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  v1 = 78913 * (-61 - (int)this) / 0x40000;
  if ((int)this < -61)
    ++v1;
  if (v1 <= -315)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  v2 = (int)((v1 + 307 + (((__int16)(v1 + 307) >> 28) & 7)) << 16) >> 19;
  if (v2 >= 0x4F)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  v3 = (_QWORD *)((char *)&nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
                + 16 * (unsigned __int16)v2);
  v4 = v3[1] + (_DWORD)this;
  if (v4 <= -125)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  if (v4 >= -95)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  return *v3;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::mul(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = HIDWORD(*a1);
  v3 = HIDWORD(*a2);
  v4 = v3 * (unint64_t)*a1;
  v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v4
         + v5
         + 0x80000000) >> 32);
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_digit_gen(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  _QWORD v47[2];

  v47[0] = a4;
  v47[1] = a5;
  v46[0] = a6;
  v46[1] = a7;
  v44 = a9;
  v45 = a10;
  if ((int)a10 <= -61)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  if ((int)a10 >= -31)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  v13 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v47);
  v14 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v46);
  v15 = -(int)v45;
  v16 = v44 >> -(char)v45;
  if (!(_DWORD)v16)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  v17 = v14;
  v18 = 1 << v15;
  v19 = (1 << v15) - 1;
  v20 = v19 & v44;
  if (v16 <= 0x3B9AC9FF)
  {
    if (v16 <= 0x5F5E0FF)
    {
      if (v16 <= 0x98967F)
      {
        if (v16 <= 0xF423F)
        {
          v23 = v16 >> 5;
          v24 = v16 >> 4;
          if (v16 <= 9)
            v25 = 1;
          else
            v25 = 10;
          if (v16 <= 9)
            v26 = 1;
          else
            v26 = 2;
          if (v16 <= 0x63)
            v27 = v26;
          else
            v27 = 3;
          if (v16 <= 0x63)
            v28 = v25;
          else
            v28 = 100;
          if (v16 <= 0x3E7)
            v29 = v27;
          else
            v29 = 4;
          if (v16 <= 0x3E7)
            v30 = v28;
          else
            v30 = 1000;
          if (v24 <= 0x270)
            v31 = v29;
          else
            v31 = 5;
          if (v24 <= 0x270)
            v32 = v30;
          else
            v32 = 10000;
          if (v23 <= 0xC34)
            v22 = v31;
          else
            v22 = 6;
          if (v23 > 0xC34)
            v21 = 100000;
          else
            v21 = v32;
        }
        else
        {
          v21 = 1000000;
          v22 = 7;
        }
      }
      else
      {
        v21 = 10000000;
        v22 = 8;
      }
    }
    else
    {
      v21 = 100000000;
      v22 = 9;
    }
  }
  else
  {
    v21 = 1000000000;
    v22 = 10;
  }
  v33 = v22 + 1;
  do
  {
    v34 = v16 / v21;
    if (v16 / v21 >= 0xA)
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    v16 = v16 % v21;
    v35 = (int)*a2;
    *a2 = v35 + 1;
    *(_BYTE *)(a1 + v35) = v34 + 48;
    if ((v16 << v15) + v20 <= v13)
    {
      *a3 = *a3 + v33 - 2;
      v18 = (unint64_t)v21 << v15;
      v40 = (char *)*a2;
      v41 = a1;
      v42 = v13;
      v20 += v16 << v15;
      return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
    }
    v21 /= 0xAu;
    --v33;
  }
  while (v33 > 1);
  if (v20 <= v13)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  v36 = 0;
  do
  {
    if (v20 >= 0x199999999999999ALL)
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    v37 = (10 * v20) >> v15;
    if (v37 >= 0xA)
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    v38 = (int)*a2;
    *a2 = v38 + 1;
    *(_BYTE *)(a1 + v38) = v37 + 48;
    v39 = 5 * v13;
    v20 = (10 * v20) & v19;
    v13 *= 10;
    v17 *= 10;
    --v36;
  }
  while (v20 > 2 * v39);
  *a3 += v36;
  v40 = (char *)*a2;
  v41 = a1;
  v42 = v13;
  return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::sub(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;
  const char *v4;
  int v5;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
  {
    v4 = "x.e == y.e";
    v5 = 14683;
LABEL_6:
    __assert_rtn("sub", "json.hpp", v5, v4);
  }
  v2 = *(_QWORD *)a1 >= *(_QWORD *)a2;
  result = *(_QWORD *)a1 - *(_QWORD *)a2;
  if (!v2)
  {
    v4 = "x.f >= y.f";
    v5 = 14684;
    goto LABEL_6;
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_round(uint64_t this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;

  if ((int)a2 <= 0)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (a3 > a4)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (a4 < a5)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (!a6)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (a5 < a3 && a4 - a5 >= a6)
  {
    v6 = ((_DWORD)a2 - 1);
    v7 = -(uint64_t)a5;
    v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3)
        break;
      v9 = *(unsigned __int8 *)(this + v6);
      if (v9 == 48)
        nlohmann::detail::dtoa_impl::grisu2_round();
      *(_BYTE *)(this + v6) = v9 - 1;
      if (v8 >= a3)
        break;
      v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }
    while (v10 >= a6);
  }
  return this;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0)
    operator delete(*(void **)(a1 + 608));
  return std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1);
}

void OUTLINED_FUNCTION_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 5793, a4);
}

void OUTLINED_FUNCTION_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 6045, a4);
}

void OUTLINED_FUNCTION_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 5802, a4);
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key()
{
  __assert_rtn("key", "json.hpp", 11708, "m_object != nullptr");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++()
{
  __assert_rtn("operator++", "json.hpp", 11418, "m_object != nullptr");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>()
{
  __assert_rtn("operator==", "json.hpp", 11500, "m_object != nullptr");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal()
{
  __assert_rtn("scan_literal", "json.hpp", 7503, "std::char_traits<char_type>::to_char_type(current) == literal_text[0]");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string()
{
  __assert_rtn("scan_string", "json.hpp", 6580, "0x00 <= codepoint && codepoint <= 0x10FFFF");
}

{
  __assert_rtn("scan_string", "json.hpp", 6460, "current == '\\\"'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number()
{
  __assert_rtn("scan_number", "json.hpp", 7209, "false");
}

{
  __assert_rtn("scan_number", "json.hpp", 7489, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "json.hpp", 7456, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "json.hpp", 7472, "endptr == token_buffer.data() + token_buffer.size()");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget()
{
  __assert_rtn("unget", "json.hpp", 7595, "!token_string.empty()");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint()
{
  __assert_rtn("get_codepoint", "json.hpp", 6398, "0x0000 <= codepoint && codepoint <= 0xFFFF");
}

{
  __assert_rtn("get_codepoint", "json.hpp", 6372, "current == 'u'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range()
{
  __assert_rtn("next_byte_in_range", "json.hpp", 6419, "ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object()
{
  __assert_rtn("end_object", "json.hpp", 5938, "!ref_stack.empty()");
}

{
  __assert_rtn("end_object", "json.hpp", 5939, "!keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array()
{
  __assert_rtn("end_array", "json.hpp", 5994, "!ref_stack.empty()");
}

{
  __assert_rtn("end_array", "json.hpp", 5995, "!keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1("handle_value", "json.hpp", a3, "!keep_stack.empty()");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->()
{
  __assert_rtn("operator->", "json.hpp", 11373, "m_object != nullptr");
}

{
  __assert_rtn("operator->", "json.hpp", 11379, "m_it.object_iterator != m_object->m_value.object->end()");
}

{
  __assert_rtn("operator->", "json.hpp", 11385, "m_it.array_iterator != m_object->m_value.array->end()");
}

void nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0("handle_value", "json.hpp", a3, "ref_stack.back()->is_array() || ref_stack.back()->is_object()");
}

{
  OUTLINED_FUNCTION_2("handle_value", "json.hpp", a3, "object_element");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump()
{
  __assert_rtn("dump", "json.hpp", 16075, "false");
}

{
  __assert_rtn("dump", "json.hpp", 15850, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15851, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15878, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15879, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15920, "!val.m_value.array->empty()");
}

{
  __assert_rtn("dump", "json.hpp", 15941, "!val.m_value.array->empty()");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped()
{
  __assert_rtn("dump_escaped", "json.hpp", 16337, "false");
}

{
  __assert_rtn("dump_escaped", "json.hpp", 16274, "false");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>()
{
  __assert_rtn("dump_integer", "json.hpp", 16439, "n_chars < number_buffer.size() - 1");
}

void nlohmann::detail::to_chars<double>()
{
  __assert_rtn("to_chars", "json.hpp", 15697, "last - first >= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "json.hpp", 15707, "len <= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "json.hpp", 15715, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "json.hpp", 15716, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
}

{
  __assert_rtn("to_chars", "json.hpp", 15679, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2<double>()
{
  __assert_rtn("grisu2", "json.hpp", 15505, "value > 0");
}

{
  __assert_rtn("grisu2", "json.hpp", 15504, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::format_buffer()
{
  __assert_rtn("format_buffer", "json.hpp", 15594, "min_exp < 0");
}

{
  __assert_rtn("format_buffer", "json.hpp", 15595, "max_exp > 0");
}

{
  __assert_rtn("append_exponent", "json.hpp", 15541, "e > -1000");
}

{
  __assert_rtn("append_exponent", "json.hpp", 15542, "e < 1000");
}

{
  __assert_rtn("format_buffer", "json.hpp", 15621, "k > n");
}

void nlohmann::detail::dtoa_impl::compute_boundaries<double>()
{
  __assert_rtn("compute_boundaries", "json.hpp", 14803, "value > 0");
}

{
  __assert_rtn("compute_boundaries", "json.hpp", 14802, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2()
{
  __assert_rtn("grisu2", "json.hpp", 15443, "m_plus.e == v.e");
}

{
  __assert_rtn("grisu2", "json.hpp", 15442, "m_plus.e == m_minus.e");
}

void nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15083, "e >= -1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15084, "e <= 1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15089, "index >= 0");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15093, "kAlpha <= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15094, "kGamma >= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15090, "static_cast<std::size_t>(index) < kCachedPowers.size()");
}

void nlohmann::detail::dtoa_impl::grisu2_digit_gen()
{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15216, "M_plus.e >= kAlpha");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15217, "M_plus.e <= kGamma");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15238, "p1 > 0");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15274, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15372, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15381, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15361, "p2 > delta");
}

void nlohmann::detail::dtoa_impl::grisu2_round()
{
  __assert_rtn("grisu2_round", "json.hpp", 15160, "len >= 1");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 15161, "dist <= delta");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 15162, "rest <= delta");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 15163, "ten_k > 0");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 15188, "buf[len - 1] != '0'");
}

std::string *MPL::detail::ModelPackageItemInfoImpl::ModelPackageItemInfoImpl(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v12 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v12;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v13 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v13;
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v14 = *a5;
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 2);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v14;
  }
  v15 = this + 4;
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v16 = *a6;
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a6 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  return this;
}

void sub_19C7C1FC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void MPL::detail::ModelPackageItemInfoImpl::~ModelPackageItemInfoImpl(void **this)
{
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t MPL::ModelPackageItemInfo::path(MPL::ModelPackageItemInfo *this)
{
  return *(_QWORD *)this + 24;
}

std::string *MPL::detail::ModelPackageImpl::ModelPackageImpl(std::string *this, const std::__fs::filesystem::path *a2, int a3, std::string::value_type a4)
{
  __int128 v8;
  JsonMap *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 **data;
  std::string::size_type v13;
  uint64_t *v14;
  uint64_t ***v15;
  std::runtime_error *v17;
  std::runtime_error *exception;
  std::runtime_error *v19;
  std::runtime_error *v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  void *v29;
  char v30;
  std::string v31;
  std::string __p;
  uint64_t v33;
  _BYTE v34[56];
  void *v35;
  char v36;
  uint64_t v37;
  _QWORD v38[21];

  v38[20] = *MEMORY[0x1E0C80C00];
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    v8 = *(_OWORD *)&a2->__pn_.__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v8;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, kModelPackageManifestFileName);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)a2, (std::__fs::filesystem::path *)&this[1]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &kModelPackageDataDir);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)a2, (std::__fs::filesystem::path *)&this[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__s.__data_[8] = a4;
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)this, 0);
  if (__p.__r_.__value_.__s.__data_[0] && __p.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&this[1], 0);
    if (!__p.__r_.__value_.__s.__data_[0] || __p.__r_.__value_.__s.__data_[0] == 255)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v31, this[1].__r_.__value_.__l.__data_, this[1].__r_.__value_.__l.__size_);
      else
        v31 = this[1];
      v23 = std::string::insert(&v31, 0, "A valid manifest does not exist at path: ");
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &__p);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::ifstream::basic_ifstream(&__p);
    v15 = (uint64_t ***)operator new();
    JsonMap::JsonMap(v15, &__p);
    std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)&this[3], v15);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)&__p + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)&v34[*(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)] | 4);
    __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                              + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40]
                                                                                                + 24);
    MEMORY[0x1A1AD5F48](&__p.__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    v14 = v38;
  }
  else
  {
    if (!a3)
    {
      v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v31, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
      else
        v31 = *this;
      v21 = std::string::insert(&v31, 0, "Failed to open model package at path: ");
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v17, &__p);
      __cxa_throw(v17, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!std::__fs::filesystem::__create_directory((const std::__fs::filesystem::path *)this, 0))
    {
      v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v31, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
      else
        v31 = *this;
      v25 = std::string::insert(&v31, 0, "Failed to create model package at path: ");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v19, &__p);
      __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!std::__fs::filesystem::__create_directory((const std::__fs::filesystem::path *)&this[2], 0))
    {
      v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if (SHIBYTE(this[2].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v31, this[2].__r_.__value_.__l.__data_, this[2].__r_.__value_.__l.__size_);
      else
        v31 = this[2];
      v27 = std::string::insert(&v31, 0, "Failed to create data directory at path: ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v20, &__p);
      __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v9 = (JsonMap *)operator new();
    JsonMap::JsonMap(v9);
    std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)&this[3], (uint64_t ***)v9);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)".", 1);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
    std::ostream::operator<<();
    data = (unsigned __int8 **)this[3].__r_.__value_.__l.__data_;
    std::string::basic_string[abi:ne180100]<0>(&v31, "fileFormatVersion");
    std::stringbuf::str();
    JsonMap::setString(data, (const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)&v29);
    if (v30 < 0)
      operator delete(v29);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
    v13 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                              + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50]
                                                                                                + 64);
    __p.__r_.__value_.__r.__words[2] = v13;
    v33 = MEMORY[0x1E0DE4FB8] + 16;
    if (v36 < 0)
      operator delete(v35);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    v14 = &v37;
  }
  MEMORY[0x1A1AD61C4](v14);
  MPL::detail::ModelPackageImpl::validate((MPL::detail::ModelPackageImpl *)this);
  return this;
}

void sub_19C7C264C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  void **v30;
  uint64_t ****v31;
  void *v32;

  __cxa_free_exception(v32);
  std::unique_ptr<JsonMap>::reset[abi:ne180100](v31, 0);
  if (*(char *)(v28 + 71) < 0)
    operator delete(*v30);
  if (*(char *)(v28 + 47) < 0)
    operator delete(*v29);
  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  _Unwind_Resume(a1);
}

std::__fs::filesystem::path *std::__fs::filesystem::operator/[abi:ne180100]@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&a3->__pn_, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  return std::__fs::filesystem::path::operator/=[abi:ne180100](a3, this);
}

void sub_19C7C2844(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_19C7C2964(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD61C4](v1);
  _Unwind_Resume(a1);
}

void MPL::detail::ModelPackageImpl::validate(MPL::detail::ModelPackageImpl *this)
{
  uint64_t *v2;
  _QWORD *v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  unsigned int v7;
  int v8;
  int v9;
  const void **i;
  std::string::size_type size;
  JsonMap *v12;
  JsonMap *v13;
  JsonMap *v14;
  JsonMap *v15;
  _BOOL4 hasKey;
  int v17;
  uint64_t *v18;
  uint64_t ***v19;
  uint64_t ***v20;
  std::runtime_error *v21;
  std::runtime_error *v22;
  std::runtime_error *v23;
  std::runtime_error *exception;
  std::runtime_error *v25;
  void *v26[2];
  char v27;
  std::string v28;
  JsonMap *v29;
  JsonMap *v30;
  std::string v31;
  std::__fs::filesystem::path v32;
  std::string v33;
  const std::string *v34;
  std::string *v35;
  unint64_t v36;
  void *__p[2];
  uint64_t v38;
  void *v39;
  char v40;
  uint64_t v41;
  std::string v42;

  v2 = (uint64_t *)*((_QWORD *)this + 9);
  std::string::basic_string[abi:ne180100]<0>(__p, "fileFormatVersion");
  JsonMap::getString(v2, (const void **)__p, &v42);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  std::istringstream::basic_istringstream[abi:ne180100](__p, &v42, 8);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  memset(&v33, 0, sizeof(v33));
  while (1)
  {
    v3 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (uint64_t)&v33, 0x2Eu);
    if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
      break;
    v4 = v35;
    if ((unint64_t)v35 >= v36)
    {
      v6 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v34, (__int128 *)&v33);
    }
    else
    {
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v35, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
      }
      else
      {
        v5 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
        v35->__r_.__value_.__r.__words[2] = v33.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
      }
      v6 = v4 + 1;
    }
    v35 = v6;
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if ((char *)v35 - (char *)v34 != 72)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v33);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = std::stoi(v34, 0, 10);
  v8 = std::stoi(v34 + 1, 0, 10);
  v9 = std::stoi(v34 + 2, 0, 10);
  if ((v7 & 0x80000000) != 0 || v8 < 0 || v9 < 0)
  {
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v25, &v33);
    __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v7 > 1 || v7 == 1 && v8 || !v8 && v9)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v23, &v33);
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MPL::detail::ModelPackageImpl::getItemInfoEntries(this, &v30);
  if (v30)
  {
    memset(&v33, 0, sizeof(v33));
    JsonMap::getKeys((uint64_t *)v30, (uint64_t *)&v33);
    size = v33.__r_.__value_.__l.__size_;
    for (i = (const void **)v33.__r_.__value_.__r.__words[0]; i != (const void **)size; i += 3)
    {
      MPL::detail::ModelPackageImpl::getItemInfoEntry(this, i, &v29);
      v12 = v29;
      std::string::basic_string[abi:ne180100]<0>(&v32, "path");
      if (JsonMap::hasKey((uint64_t)v12, (const void **)&v32.__pn_.__r_.__value_.__l.__data_))
      {
        v13 = v29;
        std::string::basic_string[abi:ne180100]<0>(&v31, "name");
        if (JsonMap::hasKey((uint64_t)v13, (const void **)&v31.__r_.__value_.__l.__data_))
        {
          v14 = v29;
          std::string::basic_string[abi:ne180100]<0>(&v28, "author");
          if (JsonMap::hasKey((uint64_t)v14, (const void **)&v28.__r_.__value_.__l.__data_))
          {
            v15 = v29;
            std::string::basic_string[abi:ne180100]<0>(v26, "description");
            hasKey = JsonMap::hasKey((uint64_t)v15, (const void **)v26);
            if (v27 < 0)
              operator delete(v26[0]);
            v17 = !hasKey;
          }
          else
          {
            v17 = 1;
          }
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
        }
        else
        {
          v17 = 1;
        }
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
      }
      else
      {
        v17 = 1;
      }
      if (SHIBYTE(v32.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__pn_.__r_.__value_.__l.__data_);
      if (v17)
      {
        v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(v22, &v32.__pn_);
        __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = (uint64_t *)v29;
      std::string::basic_string[abi:ne180100]<0>(v26, "path");
      JsonMap::getString(v18, (const void **)v26, &v28);
      v31 = v28;
      memset(&v28, 0, sizeof(v28));
      std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v31, (uint64_t)this + 48, &v32);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (v27 < 0)
        operator delete(v26[0]);
      std::__fs::filesystem::__status(&v32, 0);
      if (v31.__r_.__value_.__s.__data_[0] == 255 || !v31.__r_.__value_.__s.__data_[0])
      {
        v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(v21, &v31);
        __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (SHIBYTE(v32.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__pn_.__r_.__value_.__l.__data_);
      v19 = (uint64_t ***)v29;
      v29 = 0;
      if (v19)
      {
        JsonMap::~JsonMap(v19);
        MEMORY[0x1A1AD6260]();
      }
    }
    v32.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
    v20 = (uint64_t ***)v30;
    v30 = 0;
    if (v20)
    {
      JsonMap::~JsonMap(v20);
      MEMORY[0x1A1AD6260]();
    }
  }
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  __p[0] = *(void **)MEMORY[0x1E0DE4F58];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F58] + 24);
  v38 = MEMORY[0x1E0DE4FB8] + 16;
  if (v40 < 0)
    operator delete(v39);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A1AD61C4](&v41);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
}

void sub_19C7C2F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  int v41;
  uint64_t v42;

  if (a30 < 0)
  {
    operator delete(__p);
    if ((v41 & 1) == 0)
    {
LABEL_6:
      __p = &a32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::istringstream::~istringstream((uint64_t)&a35);
      if (*(char *)(v42 - 81) < 0)
        operator delete(*(void **)(v42 - 104));
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v40);
  goto LABEL_6;
}

void sub_19C7C2FEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t ***a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a28 < 0)
    operator delete(a23);
  if (a35 < 0)
    operator delete(a30);
  std::unique_ptr<JsonMap>::reset[abi:ne180100](&a21, 0);
  JUMPOUT(0x19C7C326CLL);
}

void sub_19C7C30CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  int v37;

  if (a36 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v37 & 1) == 0)
      goto LABEL_10;
  }
  else if (!v37)
  {
LABEL_10:
    __cxa_end_catch();
    JUMPOUT(0x19C7C3288);
  }
  __cxa_free_exception(v36);
  goto LABEL_10;
}

void sub_19C7C3164(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  JUMPOUT(0x19C7C3178);
}

void sub_19C7C318C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  int v26;
  void *v27;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
LABEL_6:
      JUMPOUT(0x19C7C3260);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void sub_19C7C31C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  int v29;
  void *v30;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (a29 < 0)
        operator delete(a24);
      std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)&a15, 0);
      JUMPOUT(0x19C7C326CLL);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void sub_19C7C3200()
{
  JUMPOUT(0x19C7C3260);
}

void sub_19C7C3210(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    JUMPOUT(0x19C7C325CLL);
  JUMPOUT(0x19C7C3260);
}

void MPL::detail::ModelPackageImpl::~ModelPackageImpl(MPL::detail::ModelPackageImpl *this)
{
  std::error_code v2;
  std::__fs::filesystem::path __replacement;
  std::string v4;
  std::__fs::filesystem::path v5[17];
  _QWORD v6[20];

  v6[19] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 80))
  {
    if (*((char *)this + 47) < 0)
      std::string::__init_copy_ctor_external(&v4, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
    else
      v4 = *(std::string *)((_BYTE *)this + 1);
    MPL::detail::ModelPackageImpl::generateIdentifier(v5);
    __replacement = v5[0];
    std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&v4, &__replacement);
    std::ofstream::basic_ofstream(v5);
    JsonMap::serialize(*((uint64_t **)this + 9), (uint64_t *)v5);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v5 + *(_QWORD *)(v5[0].__pn_.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v5[1].__pn_.__r_.__value_.__r.__words[1]+ *(_QWORD *)(v5[0].__pn_.__r_.__value_.__r.__words[0] - 24)) | 4);
    if ((*((_BYTE *)&v5[1].__pn_.__r_.__value_.__r.__words[1]
          + *(_QWORD *)(v5[0].__pn_.__r_.__value_.__r.__words[0] - 24)) & 5) == 0)
    {
      v2.__val_ = 0;
      v2.__cat_ = std::system_category();
      std::__fs::filesystem::__rename((const std::__fs::filesystem::path *)&v4, (const std::__fs::filesystem::path *)this + 1, &v2);
      if (v2.__val_)
        std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)&v4, 0);
    }
    v5[0].__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
    *(std::string::size_type *)((char *)v5[0].__pn_.__r_.__value_.__r.__words
                              + *(_QWORD *)(v5[0].__pn_.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
    MEMORY[0x1A1AD5F48](&v5[0].__pn_.__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x1A1AD61C4](v6);
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)this + 9, 0);
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void sub_19C7C34CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *MPL::detail::ModelPackageImpl::generateIdentifier@<X0>(_QWORD *a1@<X8>)
{
  _BYTE v4[37];
  unsigned __int8 uu[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)uu = 0;
  v6 = 0;
  memset(v4, 0, sizeof(v4));
  MEMORY[0x1A1AD78A4](uu);
  uuid_unparse(uu, v4);
  return std::string::basic_string[abi:ne180100]<0>(a1, v4);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x1E0DE4FD8];
  v7 = MEMORY[0x1E0DE4FD8] + 64;
  a1[15] = MEMORY[0x1E0DE4FD8] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_19C7C3618(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1A1AD61C4](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x1A1AD5F90](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_19C7C376C(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x19C7C3738);
  }
  __cxa_rethrow();
}

void sub_19C7C37B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void MPL::detail::ModelPackageImpl::getItemInfoEntries(MPL::detail::ModelPackageImpl *this@<X0>, JsonMap **a2@<X8>)
{
  uint64_t v4;
  _BOOL4 hasKey;
  _BOOL4 v6;
  uint64_t *v7;
  JsonMap *v8;
  void *__p[2];
  char v10;

  v4 = *((_QWORD *)this + 9);
  std::string::basic_string[abi:ne180100]<0>(__p, "itemInfoEntries");
  hasKey = JsonMap::hasKey(v4, (const void **)__p);
  v6 = hasKey;
  if ((v10 & 0x80000000) == 0)
  {
    if (hasKey)
      goto LABEL_3;
LABEL_6:
    v8 = (JsonMap *)operator new();
    JsonMap::JsonMap(v8);
    *a2 = v8;
    return;
  }
  operator delete(__p[0]);
  if (!v6)
    goto LABEL_6;
LABEL_3:
  v7 = (uint64_t *)*((_QWORD *)this + 9);
  std::string::basic_string[abi:ne180100]<0>(__p, "itemInfoEntries");
  JsonMap::getObject(v7, (const void **)__p, a2);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_19C7C388C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1A1AD6260](v15, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t ***MPL::detail::ModelPackageImpl::getItemInfoEntry@<X0>(MPL::detail::ModelPackageImpl *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t ***result;
  JsonMap *v6;

  MPL::detail::ModelPackageImpl::getItemInfoEntries(a1, &v6);
  if (JsonMap::hasKey((uint64_t)v6, a2))
    JsonMap::getObject((uint64_t *)v6, a2, a3);
  else
    *a3 = 0;
  result = (uint64_t ***)v6;
  v6 = 0;
  if (result)
  {
    JsonMap::~JsonMap(result);
    return (uint64_t ***)MEMORY[0x1A1AD6260]();
  }
  return result;
}

void sub_19C7C3948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)va, 0);
  _Unwind_Resume(a1);
}

double std::__fs::filesystem::path::parent_path[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t ***MPL::detail::ModelPackageImpl::findItem@<X0>(MPL::detail::ModelPackageImpl *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t ***result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  char v17;
  std::string v18;
  std::string v19;
  std::string __p;
  std::__fs::filesystem::path v21;
  uint64_t *v22;
  char v23;

  result = MPL::detail::ModelPackageImpl::getItemInfoEntry(a1, a2, &v22);
  v7 = v22;
  if (v22)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "path");
    JsonMap::getString(v7, (const void **)&v18.__r_.__value_.__l.__data_, &v19);
    __p = v19;
    memset(&v19, 0, sizeof(v19));
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)a1 + 48, &v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    v8 = v22;
    std::string::basic_string[abi:ne180100]<0>(&v19, "name");
    JsonMap::getString(v8, (const void **)&v19.__r_.__value_.__l.__data_, &__p);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    v9 = v22;
    std::string::basic_string[abi:ne180100]<0>(&v18, "author");
    JsonMap::getString(v9, (const void **)&v18.__r_.__value_.__l.__data_, &v19);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    v10 = v22;
    std::string::basic_string[abi:ne180100]<0>(&v15, "description");
    JsonMap::getString(v10, (const void **)&v15, &v18);
    if (v17 < 0)
      operator delete(v15);
    std::allocate_shared[abi:ne180100]<MPL::detail::ModelPackageItemInfoImpl,std::allocator<MPL::detail::ModelPackageItemInfoImpl>,std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&,void>((__int128 *)a2, (uint64_t)&v21, (__int128 *)&__p, (__int128 *)&v19, (__int128 *)&v18, &v15);
    v11 = operator new(0x28uLL);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = &off_1E3D5BB18;
    std::allocator<MPL::ModelPackageItemInfo>::construct[abi:ne180100]<MPL::ModelPackageItemInfo,std::shared_ptr<MPL::detail::ModelPackageItemInfoImpl>>((uint64_t)&v23, v11 + 3, (uint64_t *)&v15);
    *a3 = v11 + 3;
    a3[1] = v11;
    v12 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__pn_.__r_.__value_.__l.__data_);
    result = (uint64_t ***)v22;
    v22 = 0;
    if (result)
    {
      JsonMap::~JsonMap(result);
      return (uint64_t ***)MEMORY[0x1A1AD6260]();
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_19C7C3C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v33 - 49) < 0)
    operator delete(*(void **)(v33 - 72));
  std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)(v33 - 48), 0);
  _Unwind_Resume(a1);
}

void sub_19C7C3D68()
{
  JUMPOUT(0x19C7C3D54);
}

void MPL::detail::ModelPackageImpl::getRootModel(MPL::detail::ModelPackageImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  BOOL hasKey;
  uint64_t *v6;
  void *exception;
  void *v8[2];
  char v9;
  std::string __p;

  v4 = *((_QWORD *)this + 9);
  std::string::basic_string[abi:ne180100]<0>(&__p, "rootModelIdentifier");
  hasKey = JsonMap::hasKey(v4, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!hasKey)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Failed to look up root model");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = (uint64_t *)*((_QWORD *)this + 9);
  std::string::basic_string[abi:ne180100]<0>(v8, "rootModelIdentifier");
  JsonMap::getString(v6, (const void **)v8, &__p);
  if (v9 < 0)
    operator delete(v8[0]);
  MPL::detail::ModelPackageImpl::findItem(this, (const void **)&__p.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19C7C3E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

_QWORD *MPL::ModelPackage::ModelPackage(_QWORD *a1, char *a2, unsigned __int8 a3, std::string::value_type a4)
{
  std::string::value_type v6;
  unsigned __int8 v7;

  v7 = a3;
  v6 = a4;
  std::allocate_shared[abi:ne180100]<MPL::detail::ModelPackageImpl,std::allocator<MPL::detail::ModelPackageImpl>,std::string const&,BOOL &,BOOL &,void>(a2, &v7, &v6, a1);
  return a1;
}

void MPL::ModelPackage::getRootModel(MPL::detail::ModelPackageImpl **this@<X0>, _QWORD *a2@<X8>)
{
  MPL::detail::ModelPackageImpl::getRootModel(*this, a2);
}

std::__fs::filesystem::path *std::__fs::filesystem::path::operator/=[abi:ne180100](std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  int v4;
  std::__fs::filesystem::path *v5;
  std::string::size_type size;

  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    std::string::operator=(&a1->__pn_, &this->__pn_);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_)
      std::string::push_back(&a1->__pn_, 47);
    v4 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v4 >= 0)
      v5 = this;
    else
      v5 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    if (v4 >= 0)
      size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    else
      size = this->__pn_.__r_.__value_.__l.__size_;
    std::string::append(&a1->__pn_, (const std::string::value_type *)v5, size);
  }
  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_19C7C3FA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_19C7C4118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

uint64_t ***std::unique_ptr<JsonMap>::reset[abi:ne180100](uint64_t ****a1, uint64_t ***a2)
{
  uint64_t ***result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    JsonMap::~JsonMap(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1A1AD5FCC](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1A1AD5FD8](v13);
  return a1;
}

void sub_19C7C431C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1A1AD5FD8](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x19C7C42FCLL);
}

void sub_19C7C4364(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_19C7C4498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

_QWORD *std::ofstream::basic_ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x1A1AD5F3C](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_19C7C462C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AD61C4](v1 + 416);
  _Unwind_Resume(a1);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_19C7C46D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_19C7C48D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<MPL::detail::ModelPackageItemInfoImpl,std::allocator<MPL::detail::ModelPackageItemInfoImpl>,std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&,void>@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, __int128 *a3@<X3>, __int128 *a4@<X4>, __int128 *a5@<X5>, _QWORD *a6@<X8>)
{
  std::string *v12;
  std::string *result;

  v12 = (std::string *)operator new(0x90uLL);
  result = std::__shared_ptr_emplace<MPL::detail::ModelPackageItemInfoImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&,std::allocator<MPL::detail::ModelPackageItemInfoImpl>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 1;
  a6[1] = v12;
  return result;
}

void sub_19C7C4968(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<MPL::detail::ModelPackageItemInfoImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&,std::allocator<MPL::detail::ModelPackageItemInfoImpl>,0>(std::string *a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5, __int128 *a6)
{
  char v8;

  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E3D5BB88;
  std::allocator<MPL::detail::ModelPackageItemInfoImpl>::construct[abi:ne180100]<MPL::detail::ModelPackageItemInfoImpl,std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&>((int)&v8, a1 + 1, a2, a3, a4, a5, a6);
  return a1;
}

void sub_19C7C49D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageItemInfoImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BB88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageItemInfoImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BB88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageItemInfoImpl>::__on_zero_shared(uint64_t a1)
{
  MPL::detail::ModelPackageItemInfoImpl::~ModelPackageItemInfoImpl((void **)(a1 + 24));
}

void std::allocator<MPL::detail::ModelPackageItemInfoImpl>::construct[abi:ne180100]<MPL::detail::ModelPackageItemInfoImpl,std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&>(int a1, std::string *this, __int128 *a3, uint64_t a4, __int128 *a5, __int128 *a6, __int128 *a7)
{
  std::string __p;

  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  MPL::detail::ModelPackageItemInfoImpl::ModelPackageItemInfoImpl(this, a3, (__int128 *)&__p, a5, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19C7C4ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<MPL::ModelPackageItemInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BB18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MPL::ModelPackageItemInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BB18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_emplace<MPL::ModelPackageItemInfo>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 24);
}

void std::allocator<MPL::ModelPackageItemInfo>::construct[abi:ne180100]<MPL::ModelPackageItemInfo,std::shared_ptr<MPL::detail::ModelPackageItemInfoImpl>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  v3 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  *a2 = v3;
  a2[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

std::string *std::allocate_shared[abi:ne180100]<MPL::detail::ModelPackageImpl,std::allocator<MPL::detail::ModelPackageImpl>,std::string const&,BOOL &,BOOL &,void>@<X0>(char *a1@<X1>, unsigned __int8 *a2@<X2>, std::string::value_type *a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0x70uLL);
  result = std::__shared_ptr_emplace<MPL::detail::ModelPackageImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,std::allocator<MPL::detail::ModelPackageImpl>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_19C7C4C00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<MPL::detail::ModelPackageImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,std::allocator<MPL::detail::ModelPackageImpl>,0>(std::string *a1, char *a2, unsigned __int8 *a3, std::string::value_type *a4)
{
  char v6;

  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E3D5BB50;
  std::allocator<MPL::detail::ModelPackageImpl>::construct[abi:ne180100]<MPL::detail::ModelPackageImpl,std::string const&,BOOL &,BOOL &>((uint64_t)&v6, a1 + 1, a2, a3, a4);
  return a1;
}

void sub_19C7C4C64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BB50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BB50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageImpl>::__on_zero_shared(uint64_t a1)
{
  MPL::detail::ModelPackageImpl::~ModelPackageImpl((MPL::detail::ModelPackageImpl *)(a1 + 24));
}

void std::allocator<MPL::detail::ModelPackageImpl>::construct[abi:ne180100]<MPL::detail::ModelPackageImpl,std::string const&,BOOL &,BOOL &>(uint64_t a1, std::string *a2, char *a3, unsigned __int8 *a4, std::string::value_type *a5)
{
  std::string __p;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a3);
  MPL::detail::ModelPackageImpl::ModelPackageImpl(a2, (const std::__fs::filesystem::path *)&__p, *a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19C7C4D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

_QWORD *std::vector<_KDInterval>::__init_with_size[abi:ne180100]<_KDInterval*,_KDInterval*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<_KDInterval>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C7C4DD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<_KDInterval>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void _KDBoundingBox::_KDBoundingBox(_KDBoundingBox *this, _KDBoundingBox *a2)
{
  _KDInterval *begin;
  __int128 v4;
  _KDInterval *v5;

  this->_intervals.__begin_ = 0;
  this->_intervals.__end_ = 0;
  this->_intervals.__end_cap_.__value_ = 0;
  this->_numDimensions = a2->_numDimensions;
  v4 = 0uLL;
  v5 = 0;
  std::vector<_KDInterval>::__init_with_size[abi:ne180100]<_KDInterval*,_KDInterval*>(&v4, a2->_intervals.__begin_, (uint64_t)a2->_intervals.__end_, (a2->_intervals.__end_ - a2->_intervals.__begin_) >> 3);
  begin = this->_intervals.__begin_;
  if (this->_intervals.__begin_)
  {
    this->_intervals.__end_ = begin;
    operator delete(begin);
    this->_intervals.__begin_ = 0;
    this->_intervals.__end_ = 0;
    this->_intervals.__end_cap_.__value_ = 0;
  }
  *(_OWORD *)&this->_intervals.__begin_ = v4;
  this->_intervals.__end_cap_.__value_ = v5;
}

void sub_19C7C4EB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float _KDBoundingBox::computeDistanceFromPoint(_KDBoundingBox *this, const float *a2, float *a3)
{
  unint64_t v3;
  float *v4;
  float result;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  if (a2 == (const float *)this)
    return 0.0;
  v3 = ((char *)a2 - (char *)this) >> 3;
  if (v3 <= 1)
    v3 = 1;
  v4 = (float *)&this->_intervals.__begin_ + 1;
  result = 0.0;
  do
  {
    v6 = *a3++;
    v7 = v6;
    v8 = *(v4 - 1);
    v9 = result + (float)((float)(v6 - v8) * (float)(v6 - v8));
    if (v6 < v8)
      result = v9;
    v10 = *v4;
    v4 += 2;
    v11 = result + (float)((float)(v7 - v10) * (float)(v7 - v10));
    if (v7 > v10)
      result = v11;
    --v3;
  }
  while (v3);
  return result;
}

void sub_19C7C4FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;

  a9.super_class = (Class)MLGPUComputeDeviceRegistry;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19C7C50C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  std::mutex *v11;
  void *v12;
  void *v13;

  v13 = v12;

  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_19C7C5250(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_19C7C525C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_19C7C5310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLE5ProgramLibraryOnDeviceAOTCompilationImpl;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::makeProgramWithMemoryLayout(unint64_t *a1, unint64_t *a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  MIL::Transform::ProgramTransformer *v28;
  MIL::IRTensorValueType *Scalar;
  _QWORD *i;
  MIL::Builder::Variable *v31;
  _anonymous_namespace_ *Type;
  const IRValueType *v33;
  uint64_t Name;
  __int128 v35;
  std::string::size_type v36;
  std::string::size_type v37;
  MIL::Builder::Variable **v38;
  MIL::Builder::Variable **v39;
  MIL::Builder::Variable *v40;
  _anonymous_namespace_ *v41;
  const IRValueType *v42;
  uint64_t v43;
  __int128 v44;
  std::string::size_type v45;
  std::string::size_type v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count_vtbl *v49;
  NSObject *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::runtime_error *exception;
  std::string *v81;
  __int128 v82;
  uint64_t Location;
  const std::string::value_type *v84;
  std::string::size_type v85;
  std::string *v86;
  __int128 v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  __int128 v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  _QWORD v93[2];
  unsigned __int8 v94;
  std::string v95;
  std::string v96;
  std::string v97;
  __int128 buf;
  _QWORD *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  void *__p;
  char v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  std::string v106;
  MIL::Builder::BlockBuilder *v107;
  std::__shared_weak_count *v108;
  std::string v109;
  MIL::Builder::FunctionBuilder *v110;
  std::__shared_weak_count *v111;
  MIL::Builder::ProgramBuilder *v112;
  std::__shared_weak_count *v113;
  _BYTE v114[24];
  __int128 v115;
  __int128 v116;
  int v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = v7;
  v9 = *a2;
  v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v92 = (std::__shared_weak_count *)v10;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
  }
  else
  {
    v92 = 0;
  }
  v91 = v9;
  objc_msgSend(v7, "inputDescriptionsByName");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "outputDescriptionsByName");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  CoreML::addMemoryLayoutToProgram((uint64_t)&buf, &v91, a3, v14, v15);
  std::shared_ptr<MIL::IRProgram const>::operator=[abi:ne180100]((uint64_t)a1, &buf);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  v19 = v92;
  if (v92)
  {
    p_shared_owners = (unint64_t *)&v92->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *a1;
  v23 = (std::__shared_weak_count *)a1[1];
  v88 = *a1;
  v89 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    *(_QWORD *)&v90 = v22;
    *((_QWORD *)&v90 + 1) = v89;
    if (v89)
    {
      v26 = (unint64_t *)&v89->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  else
  {
    v90 = *a1;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 56))(v22, a3))
  {
    v28 = (MIL::Transform::ProgramTransformer *)MEMORY[0x1A1AD5798](v114, v88);
    MIL::Transform::ProgramTransformer::GetProgramBuilder(v28);
    MIL::Builder::ProgramBuilder::GetFunction();
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 40))(v88);
    MIL::IRTensorValueType::MakeScalar();
    Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
    v115 = 0u;
    v116 = 0u;
    v117 = 1065353216;
    MIL::Builder::FunctionBuilder::GetInputs(v110);
    for (i = v99; i; i = (_QWORD *)*i)
    {
      v31 = (MIL::Builder::Variable *)i[2];
      Type = (_anonymous_namespace_ *)MIL::Builder::Variable::TryGetType(v31);
      {
        Name = MIL::Builder::Variable::GetName(v31);
        if (*(char *)(Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v109, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
        }
        else
        {
          v35 = *(_OWORD *)Name;
          v109.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
          *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v35;
        }
        MIL::IRTensorValueType::MakeStringValue();
        MIL::IRTensorValueType::MakeBoolValue(Scalar);
        std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_impl<std::unique_ptr<MIL::IRTensorValue const>,std::unique_ptr<MIL::IRTensorValue const>>((uint64_t)&v115, (uint64_t *)&v97, (uint64_t *)&v96);
        v36 = v96.__r_.__value_.__r.__words[0];
        v96.__r_.__value_.__r.__words[0] = 0;
        if (v36)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v36 + 8))(v36);
        v37 = v97.__r_.__value_.__r.__words[0];
        v97.__r_.__value_.__r.__words[0] = 0;
        if (v37)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v37 + 8))(v37);
        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v109.__r_.__value_.__l.__data_);
      }
    }
    std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::~__hash_table((uint64_t)&buf);
    MIL::Builder::FunctionBuilder::SelectedSpecialization(v110);
    MIL::Builder::FunctionBuilder::GetBlock();
    if (v107)
    {
      MIL::Builder::BlockBuilder::GetOutputs(v107);
      v39 = (MIL::Builder::Variable **)*((_QWORD *)&buf + 1);
      v38 = (MIL::Builder::Variable **)buf;
      if ((_QWORD)buf != *((_QWORD *)&buf + 1))
      {
        do
        {
          v40 = *v38;
          v41 = (_anonymous_namespace_ *)MIL::Builder::Variable::TryGetType(*v38);
          {
            v43 = MIL::Builder::Variable::GetName(v40);
            if (*(char *)(v43 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v43, *(_QWORD *)(v43 + 8));
            }
            else
            {
              v44 = *(_OWORD *)v43;
              v106.__r_.__value_.__r.__words[2] = *(_QWORD *)(v43 + 16);
              *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v44;
            }
            MIL::IRTensorValueType::MakeStringValue();
            MIL::IRTensorValueType::MakeBoolValue(Scalar);
            std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_impl<std::unique_ptr<MIL::IRTensorValue const>,std::unique_ptr<MIL::IRTensorValue const>>((uint64_t)&v115, (uint64_t *)&v97, (uint64_t *)&v96);
            v45 = v96.__r_.__value_.__r.__words[0];
            v96.__r_.__value_.__r.__words[0] = 0;
            if (v45)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v45 + 8))(v45);
            v46 = v97.__r_.__value_.__r.__words[0];
            v97.__r_.__value_.__r.__words[0] = 0;
            if (v46)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v46 + 8))(v46);
            if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v106.__r_.__value_.__l.__data_);
          }
          ++v38;
        }
        while (v38 != v39);
        v38 = (MIL::Builder::Variable **)buf;
      }
      if (v38)
      {
        *((_QWORD *)&buf + 1) = v38;
        operator delete(v38);
      }
    }
    if (*((_QWORD *)&v116 + 1))
    {
      MIL::IRDictionaryValueType::Make();
      MIL::IRDictionaryValueType::MakeValue();
      v47 = buf;
      v104 = buf;
      if ((_QWORD)buf)
      {
        v48 = (std::__shared_weak_count *)operator new();
        v49 = (std::__shared_weak_count_vtbl *)buf;
        v48->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C2F8;
        v48->__shared_owners_ = 0;
        v48->__shared_weak_owners_ = 0;
        v48[1].__vftable = v49;
      }
      else
      {
        v48 = 0;
      }
      v105 = v48;
      std::string::basic_string[abi:ne180100]<0>(&__p, "NeuralEngineOptimizedIOBuffer");
      v100 = v47;
      v101 = v48;
      if (v48)
      {
        v51 = (unint64_t *)&v48->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      MIL::Builder::FunctionBuilder::SetAttribute();
      v53 = v101;
      if (v101)
      {
        v54 = (unint64_t *)&v101->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      if (v103 < 0)
        operator delete(__p);
      MIL::Builder::ProgramBuilder::CreateProgram(v112);
      if (((*(uint64_t (**)(char *))(*((_QWORD *)&buf + 1) + 16))((char *)&buf + 8) & 1) == 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        MIL::MILResult::GetMessage((MIL::MILResult *)((char *)&buf + 8));
        std::operator+<char>();
        v81 = std::string::append(&v95, " location");
        v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v82;
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        Location = MIL::MILResult::GetLocation((MIL::MILResult *)((char *)&buf + 8));
        (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)Location + 24))(v93);
        if ((v94 & 0x80u) == 0)
          v84 = (const std::string::value_type *)v93;
        else
          v84 = (const std::string::value_type *)v93[0];
        if ((v94 & 0x80u) == 0)
          v85 = v94;
        else
          v85 = v93[1];
        v86 = std::string::append(&v96, v84, v85);
        v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v97);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v56 = buf;
      if ((_QWORD)buf)
      {
        v57 = (_QWORD *)operator new();
        v58 = buf;
        *v57 = &off_1E3D5C4F0;
        v57[1] = 0;
        v57[2] = 0;
        v57[3] = v58;
      }
      else
      {
        v57 = 0;
      }
      *(_QWORD *)&buf = 0;
      v59 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
      *(_QWORD *)&v90 = v56;
      *((_QWORD *)&v90 + 1) = v57;
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      MEMORY[0x1A1AD5408]((char *)&buf + 8);
      v62 = buf;
      *(_QWORD *)&buf = 0;
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
      v63 = v105;
      if (v105)
      {
        v64 = (unint64_t *)&v105->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
    }
    v66 = v108;
    if (v108)
    {
      v67 = (unint64_t *)&v108->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v115);
    v69 = v111;
    if (v111)
    {
      v70 = (unint64_t *)&v111->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = v113;
    if (v113)
    {
      v73 = (unint64_t *)&v113->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v114);
  }
  else
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v50 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_19C486000, v50, OS_LOG_TYPE_INFO, "Not inserting NeuralEngineOptimizedIOBuffer attribute because it does not have the specified entry point function.", (uint8_t *)&buf, 2u);
    }

  }
  std::shared_ptr<MIL::IRProgram const>::operator=[abi:ne180100]((uint64_t)a1, &v90);
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  if (*((_QWORD *)&v90 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (v89)
  {
    v78 = (unint64_t *)&v89->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }

}

void sub_19C7C5C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  _QWORD *v60;
  uint64_t v61;
  void *v62;
  int v63;
  uint64_t v64;
  void *v67;
  void *v68;
  NSObject *v69;
  void *v70;
  NSObject *v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;

  if (!a2)
    _Unwind_Resume(exception_object);
  if (a41 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a34 < 0)
    operator delete(a29);
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v63 & 1) == 0)
      goto LABEL_13;
  }
  else if (!v63)
  {
LABEL_13:
    MEMORY[0x1A1AD5408](v61);
    v67 = a43;
    a43 = 0;
    if (v67)
      (*(void (**)(void *))(*(_QWORD *)v67 + 8))(v67);
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v64 - 224);
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v64 - 128);
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v64 - 184);
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v64 - 168);
    MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)(v64 - 152));
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    v68 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v69 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        v75 = (*(uint64_t (**)(void *))(*(_QWORD *)v68 + 16))(v68);
        *(_DWORD *)(v64 - 128) = 136315138;
        *(_QWORD *)(v64 - 124) = v75;
        _os_log_error_impl(&dword_19C486000, v69, OS_LOG_TYPE_ERROR, "Failed to configure ML Program for the feature types declared in the model description. It is likely an invalid or broken model. (Underlying exception: %s)", (uint8_t *)(v64 - 128), 0xCu);
      }

      if (v60)
      {
        (*(void (**)(void *))(*(_QWORD *)v68 + 16))(v68);
        +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("%s"));
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 3, v70, CFSTR("Failed to configure ML Program for the feature types declared in the model description. It is likely an invalid or broken model."));
        *v60 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
    else
    {
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v71 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)(v64 - 128) = 0;
        _os_log_error_impl(&dword_19C486000, v71, OS_LOG_TYPE_ERROR, "Failed to set proper memory layout info in the MIL program with unexpected error.", (uint8_t *)(v64 - 128), 2u);
      }

      if (v60)
      {
        v72 = (void *)MEMORY[0x1E0CB35C8];
        *(_QWORD *)(v64 - 144) = *MEMORY[0x1E0CB2D50];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Failed to set proper memory layout info in the MIL program with unexpected error."));
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)(v64 - 136) = v73;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v64 - 136, v64 - 144, 1);
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v72, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 0, v74);
        *v60 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
    __cxa_end_catch();
    JUMPOUT(0x19C7C5B20);
  }
  __cxa_free_exception(v62);
  goto LABEL_13;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD61C4](a1 + 128);
  return a1;
}

uint64_t *std::unique_ptr<e5rt_e5_compiler_options,MLE5ObjectDeleter<e5rt_e5_compiler_options>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
    return (uint64_t *)e5rt_e5_compiler_options_release();
  return result;
}

uint64_t *std::unique_ptr<e5rt_e5_compiler,MLE5ObjectDeleter<e5rt_e5_compiler>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
    return (uint64_t *)e5rt_e5_compiler_release();
  return result;
}

uint64_t ___ZN12_GLOBAL__N_128serializeProgramForDebuggingENSt3__110shared_ptrIKN3MIL9IRProgramEEEP20MLModelConfiguration_block_invoke()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  return result;
}

void std::__shared_ptr_pointer<MIL::IRProgram  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB309A9))
    return a1 + 24;
  else
    return 0;
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2))
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::__shared_ptr_pointer<MIL::MILContext  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB2FB9CLL))
    return a1 + 24;
  else
    return 0;
}

uint64_t std::shared_ptr<MIL::IRProgram const>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_19C7C65B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C7C6734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7C69B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C7C6AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7C6BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19C7C6CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_19C7C6D98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_19C7C8514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,void *a28,void *a29,uint64_t a30,void *a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

double Kernel::swap_index(Kernel *this, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *((_QWORD *)this + 3);
  v4 = *(_QWORD *)(v3 + 8 * a2);
  *(_QWORD *)(v3 + 8 * a2) = *(_QWORD *)(v3 + 8 * a3);
  *(_QWORD *)(v3 + 8 * a3) = v4;
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    result = *(double *)(v5 + 8 * a2);
    *(_QWORD *)(v5 + 8 * a2) = *(_QWORD *)(v5 + 8 * a3);
    *(double *)(v5 + 8 * a3) = result;
  }
  return result;
}

void Solver::~Solver(Solver *this)
{
  JUMPOUT(0x1A1AD6260);
}

uint64_t Solver::select_working_set(Solver *this, int *a2, int *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t result;

  v4 = *((unsigned int *)this + 2);
  if ((int)v4 < 1)
    return 1;
  v7 = 0;
  v8 = 0xFFFFFFFFLL;
  v9 = -INFINITY;
  do
  {
    if (*(_BYTE *)(*((_QWORD *)this + 2) + v7) == 1)
    {
      if (*(_BYTE *)(*((_QWORD *)this + 4) + v7) != 1)
      {
        v10 = -*(double *)(*((_QWORD *)this + 3) + 8 * v7);
        if (v9 <= v10)
          goto LABEL_9;
      }
    }
    else if (*(_BYTE *)(*((_QWORD *)this + 4) + v7))
    {
      v10 = *(double *)(*((_QWORD *)this + 3) + 8 * v7);
      if (v10 >= v9)
      {
LABEL_9:
        v9 = v10;
        v8 = v7;
      }
    }
    ++v7;
  }
  while (v4 != v7);
  if ((_DWORD)v8 == -1)
  {
    v11 = 0;
    LODWORD(v8) = -1;
  }
  else
  {
    v11 = (***((uint64_t (****)(_QWORD, uint64_t))this + 6))(*((_QWORD *)this + 6), v8);
    LODWORD(v4) = *((_DWORD *)this + 2);
  }
  if ((int)v4 < 1)
    return 1;
  v12 = 0;
  v13 = *((_QWORD *)this + 2);
  v14 = -1;
  v15 = -INFINITY;
  v16 = INFINITY;
  while (2)
  {
    if (*(_BYTE *)(v13 + v12) == 1)
    {
      if (*(_BYTE *)(*((_QWORD *)this + 4) + v12))
      {
        v17 = *((_QWORD *)this + 3);
        v18 = *(double *)(v17 + 8 * v12);
        v19 = v9 + v18;
        if (v18 >= v15)
          v15 = *(double *)(v17 + 8 * v12);
        if (v19 > 0.0)
        {
          v20 = *(double *)(*((_QWORD *)this + 7) + 8 * (int)v8) + *(double *)(*((_QWORD *)this + 7) + 8 * v12);
          v21 = *(float *)(v11 + 4 * v12);
          v22 = (double)*(char *)(v13 + (int)v8) * -2.0;
          goto LABEL_27;
        }
      }
    }
    else if (*(_BYTE *)(*((_QWORD *)this + 4) + v12) != 1)
    {
      v23 = *(double *)(*((_QWORD *)this + 3) + 8 * v12);
      v19 = v9 - v23;
      v24 = -v23;
      if (v15 <= v24)
        v15 = v24;
      if (v19 > 0.0)
      {
        v20 = *(double *)(*((_QWORD *)this + 7) + 8 * (int)v8) + *(double *)(*((_QWORD *)this + 7) + 8 * v12);
        v22 = (double)*(char *)(v13 + (int)v8) + (double)*(char *)(v13 + (int)v8);
        v21 = *(float *)(v11 + 4 * v12);
LABEL_27:
        v25 = v20 + v22 * v21;
        v26 = -(v19 * v19);
        if (v25 <= 0.0)
          v25 = 1.0e-12;
        v27 = v26 / v25;
        if (v27 <= v16)
        {
          v14 = v12;
          v16 = v27;
        }
      }
    }
    if (v4 != ++v12)
      continue;
    break;
  }
  if (v9 + v15 >= *((double *)this + 8) && v14 != -1)
  {
    result = 0;
    *a2 = v8;
    *a3 = v14;
    return result;
  }
  return 1;
}

double Solver::calculate_rho(Solver *this)
{
  uint64_t v1;
  int v2;
  unsigned __int8 *v3;
  double *v4;
  unsigned __int8 *v5;
  double v6;
  double v7;
  double v8;
  int v9;
  int v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  double v20;

  v1 = *((unsigned int *)this + 2);
  if ((int)v1 < 1)
  {
    v7 = INFINITY;
    v8 = -INFINITY;
  }
  else
  {
    v2 = 0;
    v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
    v4 = (double *)*((_QWORD *)this + 3);
    v5 = (unsigned __int8 *)*((_QWORD *)this + 4);
    v6 = 0.0;
    v7 = INFINITY;
    v8 = -INFINITY;
    do
    {
      v10 = *v3++;
      v9 = v10;
      v11 = (double)(char)v10;
      v12 = *v4++;
      v13 = v12 * v11;
      LODWORD(v12) = *v5++;
      v14 = LODWORD(v12);
      if (v8 <= v13)
        v15 = v13;
      else
        v15 = v8;
      if (v7 >= v13)
        v16 = v13;
      else
        v16 = v7;
      if (v9 == 1)
        v15 = v8;
      else
        v16 = v7;
      v17 = v6 + v13;
      if (v8 <= v13)
        v18 = v13;
      else
        v18 = v8;
      if (v7 < v13)
        v13 = v7;
      if (v9 == 255)
        v18 = v8;
      else
        v13 = v7;
      if (v14 == 1)
        v19 = v2;
      else
        v19 = v2 + 1;
      if (v14 == 1)
      {
        v7 = v13;
        v8 = v18;
        v20 = v6;
      }
      else
      {
        v20 = v17;
      }
      if (v14)
      {
        v2 = v19;
      }
      else
      {
        v7 = v16;
        v8 = v15;
      }
      if (v14)
        v6 = v20;
      --v1;
    }
    while (v1);
    if (v2 > 0)
      return v6 / (double)v2;
  }
  return (v7 + v8) * 0.5;
}

void Solver::do_shrinking(Solver *this)
{
  int v2;
  unsigned __int8 *v3;
  double *v4;
  unsigned __int8 *v5;
  double v6;
  uint64_t v7;
  double v8;
  int v9;
  int v10;
  int v11;
  int v12;
  double v13;
  int i;

  v2 = *((_DWORD *)this + 2);
  if (v2 < 1)
  {
    v8 = -INFINITY;
    v6 = -INFINITY;
  }
  else
  {
    v4 = (double *)*((_QWORD *)this + 3);
    v3 = (unsigned __int8 *)*((_QWORD *)this + 4);
    v5 = (unsigned __int8 *)*((_QWORD *)this + 2);
    v6 = -INFINITY;
    v7 = *((unsigned int *)this + 2);
    v8 = -INFINITY;
    do
    {
      v10 = *v5++;
      v9 = v10;
      v12 = *v3++;
      v11 = v12;
      v13 = *v4;
      if (v9 == 1)
      {
        if (v11 == 1)
          goto LABEL_8;
        if (v8 <= -v13)
          v8 = -v13;
        if (v11)
        {
LABEL_8:
          if (v13 >= v6)
            v6 = *v4;
        }
      }
      else
      {
        if (v11 == 1)
          goto LABEL_15;
        if (v6 <= -v13)
          v6 = -v13;
        if (v11)
        {
LABEL_15:
          if (v13 >= v8)
            v8 = *v4;
        }
      }
      ++v4;
      --v7;
    }
    while (v7);
  }
  if (!*((_BYTE *)this + 116) && v8 + v6 <= *((double *)this + 8) * 10.0)
  {
    *((_BYTE *)this + 116) = 1;
    Solver::reconstruct_gradient((uint64_t)this);
    *((_DWORD *)this + 2) = *((_DWORD *)this + 28);
    info("*");
    v2 = *((_DWORD *)this + 2);
  }
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      if (Solver::be_shrunk(this, i, v8, v6))
      {
        while (1)
        {
          *((_DWORD *)this + 2) = --v2;
          if (v2 <= i)
            break;
          if (!Solver::be_shrunk(this, v2, v8, v6))
          {
            Solver::swap_index(this, i, v2);
            v2 = *((_DWORD *)this + 2);
            break;
          }
        }
      }
    }
  }
}

uint64_t Solver::reconstruct_gradient(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  double v21;
  uint64_t v22;
  double *v23;
  float *v24;
  float v25;

  v1 = *(unsigned int *)(this + 8);
  v2 = *(_DWORD *)(this + 112);
  if ((_DWORD)v1 != v2)
  {
    v3 = this;
    if ((int)v1 < v2)
    {
      v4 = v2 - (uint64_t)(int)v1;
      v5 = (double *)(*(_QWORD *)(this + 24) + 8 * (int)v1);
      v6 = (double *)(*(_QWORD *)(this + 88) + 8 * (int)v1);
      v7 = (double *)(*(_QWORD *)(this + 104) + 8 * (int)v1);
      do
      {
        v8 = *v7++;
        v9 = v8;
        v10 = *v6++;
        *v5++ = v9 + v10;
        --v4;
      }
      while (v4);
    }
    if ((int)v1 < 1)
    {
      v11 = 0;
    }
    else
    {
      v11 = 0;
      v12 = *(unsigned __int8 **)(this + 32);
      v13 = v1;
      do
      {
        v14 = *v12++;
        if (v14 == 2)
          ++v11;
        --v13;
      }
      while (v13);
    }
    if ((int)v1 > 2 * v11)
    {
      this = info("\nWARNING: using -h 0 may be faster\n");
      v2 = *(_DWORD *)(v3 + 112);
      v1 = *(unsigned int *)(v3 + 8);
    }
    if (v2 * v11 <= 2 * (int)v1 * (v2 - (int)v1))
    {
      if ((int)v1 >= 1)
      {
        v19 = 0;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(v3 + 32) + v19) == 2)
          {
            this = (***(uint64_t (****)(_QWORD, uint64_t))(v3 + 48))(*(_QWORD *)(v3 + 48), v19);
            LODWORD(v1) = *(_DWORD *)(v3 + 8);
            v20 = *(_DWORD *)(v3 + 112);
            if ((int)v1 < v20)
            {
              v21 = *(double *)(*(_QWORD *)(v3 + 40) + 8 * v19);
              v22 = v20 - (uint64_t)(int)v1;
              v23 = (double *)(*(_QWORD *)(v3 + 24) + 8 * (int)v1);
              v24 = (float *)(this + 4 * (int)v1);
              do
              {
                v25 = *v24++;
                *v23 = *v23 + v21 * v25;
                ++v23;
                --v22;
              }
              while (v22);
            }
          }
          ++v19;
        }
        while (v19 < (int)v1);
      }
    }
    else if (v2 > (int)v1)
    {
      v15 = (int)v1;
      v16 = v1;
      do
      {
        this = (***(uint64_t (****)(_QWORD, uint64_t, uint64_t))(v3 + 48))(*(_QWORD *)(v3 + 48), v15, v16);
        v16 = *(unsigned int *)(v3 + 8);
        if ((int)v16 >= 1)
        {
          v17 = 0;
          v18 = *(_QWORD *)(v3 + 32);
          do
          {
            if (*(_BYTE *)(v18 + v17) == 2)
              *(double *)(*(_QWORD *)(v3 + 24) + 8 * v15) = *(double *)(*(_QWORD *)(v3 + 24) + 8 * v15)
                                                          + *(double *)(*(_QWORD *)(v3 + 40) + 8 * v17)
                                                          * *(float *)(this + 4 * v17);
            ++v17;
          }
          while (v16 != v17);
        }
        ++v15;
      }
      while (v15 < *(int *)(v3 + 112));
    }
  }
  return this;
}

uint64_t info(const char *a1, ...)
{
  char v2[1024];
  uint64_t v3;
  va_list va;

  va_start(va, a1);
  v3 = *MEMORY[0x1E0C80C00];
  vsprintf(v2, a1, va);
  return svm_print_string(v2);
}

BOOL Solver::be_shrunk(Solver *this, int a2, double a3, double a4)
{
  double v4;
  BOOL v5;

  if (*(_BYTE *)(*((_QWORD *)this + 4) + a2))
  {
    if (*(_BYTE *)(*((_QWORD *)this + 4) + a2) != 1)
      return 0;
    v4 = -*(double *)(*((_QWORD *)this + 3) + 8 * a2);
    if (*(_BYTE *)(*((_QWORD *)this + 2) + a2) != 1)
      goto LABEL_4;
  }
  else
  {
    v4 = *(double *)(*((_QWORD *)this + 3) + 8 * a2);
    if (*(_BYTE *)(*((_QWORD *)this + 2) + a2) == 1)
    {
LABEL_4:
      v5 = v4 <= a4;
      return !v5;
    }
  }
  v5 = v4 <= a3;
  return !v5;
}

double Solver::swap_index(Solver *this, int a2, int a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  v6 = *((_QWORD *)this + 2);
  v7 = *(_BYTE *)(v6 + a2);
  *(_BYTE *)(v6 + a2) = *(_BYTE *)(v6 + a3);
  *(_BYTE *)(v6 + a3) = v7;
  v8 = *((_QWORD *)this + 3);
  v9 = *((_QWORD *)this + 4);
  v10 = *(_QWORD *)(v8 + 8 * a2);
  *(_QWORD *)(v8 + 8 * a2) = *(_QWORD *)(v8 + 8 * a3);
  *(_QWORD *)(v8 + 8 * a3) = v10;
  LOBYTE(v8) = *(_BYTE *)(v9 + a2);
  *(_BYTE *)(v9 + a2) = *(_BYTE *)(v9 + a3);
  *(_BYTE *)(v9 + a3) = v8;
  v11 = *((_QWORD *)this + 5);
  v12 = *(_QWORD *)(v11 + 8 * a2);
  *(_QWORD *)(v11 + 8 * a2) = *(_QWORD *)(v11 + 8 * a3);
  *(_QWORD *)(v11 + 8 * a3) = v12;
  v13 = *((_QWORD *)this + 11);
  v14 = *((_QWORD *)this + 12);
  v15 = *(_QWORD *)(v13 + 8 * a2);
  *(_QWORD *)(v13 + 8 * a2) = *(_QWORD *)(v13 + 8 * a3);
  *(_QWORD *)(v13 + 8 * a3) = v15;
  LODWORD(v13) = *(_DWORD *)(v14 + 4 * a2);
  *(_DWORD *)(v14 + 4 * a2) = *(_DWORD *)(v14 + 4 * a3);
  *(_DWORD *)(v14 + 4 * a3) = v13;
  v16 = *((_QWORD *)this + 13);
  result = *(double *)(v16 + 8 * a2);
  *(_QWORD *)(v16 + 8 * a2) = *(_QWORD *)(v16 + 8 * a3);
  *(double *)(v16 + 8 * a3) = result;
  return result;
}

uint64_t print_string_stdout(const char *a1)
{
  FILE **v1;

  v1 = (FILE **)MEMORY[0x1E0C80C20];
  fputs(a1, (FILE *)*MEMORY[0x1E0C80C20]);
  return fflush(*v1);
}

void Solver_NU::~Solver_NU(Solver_NU *this)
{
  JUMPOUT(0x1A1AD6260);
}

uint64_t Solver_NU::select_working_set(Solver_NU *this, int *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  float v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t result;
  int v33;

  v6 = *((unsigned int *)this + 2);
  if ((int)v6 < 1)
  {
    LODWORD(v8) = -1;
    v9 = -INFINITY;
    LODWORD(v10) = -1;
    v11 = -INFINITY;
    v13 = -INFINITY;
    v14 = -INFINITY;
    v15 = -1;
  }
  else
  {
    v7 = 0;
    v8 = 0xFFFFFFFFLL;
    v9 = -INFINITY;
    v10 = 0xFFFFFFFFLL;
    v11 = -INFINITY;
    do
    {
      if (*(_BYTE *)(*((_QWORD *)this + 2) + v7) == 1)
      {
        if (*(_BYTE *)(*((_QWORD *)this + 4) + v7) != 1 && v11 <= -*(double *)(*((_QWORD *)this + 3) + 8 * v7))
        {
          v11 = -*(double *)(*((_QWORD *)this + 3) + 8 * v7);
          v10 = v7;
        }
      }
      else if (*(_BYTE *)(*((_QWORD *)this + 4) + v7) && *(double *)(*((_QWORD *)this + 3) + 8 * v7) >= v9)
      {
        v9 = *(double *)(*((_QWORD *)this + 3) + 8 * v7);
        v8 = v7;
      }
      ++v7;
    }
    while (v6 != v7);
    if ((_DWORD)v10 == -1)
    {
      v12 = 0;
      LODWORD(v10) = -1;
    }
    else
    {
      v12 = (***((uint64_t (****)(_QWORD, uint64_t))this + 6))(*((_QWORD *)this + 6), v10);
      v6 = *((unsigned int *)this + 2);
    }
    if ((_DWORD)v8 == -1)
    {
      v16 = 0;
      LODWORD(v8) = -1;
    }
    else
    {
      v16 = (***((uint64_t (****)(_QWORD, uint64_t, uint64_t))this + 6))(*((_QWORD *)this + 6), v8, v6);
      LODWORD(v6) = *((_DWORD *)this + 2);
    }
    if ((int)v6 >= 1)
    {
      v17 = 0;
      v15 = -1;
      v14 = -INFINITY;
      v18 = INFINITY;
      v13 = -INFINITY;
      while (1)
      {
        if (*(_BYTE *)(*((_QWORD *)this + 2) + v17) == 1)
        {
          if (!*(_BYTE *)(*((_QWORD *)this + 4) + v17))
            goto LABEL_35;
          v19 = *((_QWORD *)this + 3);
          v20 = *(double *)(v19 + 8 * v17);
          v21 = v11 + v20;
          if (v20 >= v13)
            v13 = *(double *)(v19 + 8 * v17);
          if (v21 <= 0.0)
            goto LABEL_35;
          v22 = *(double *)(*((_QWORD *)this + 7) + 8 * (int)v10) + *(double *)(*((_QWORD *)this + 7) + 8 * v17);
          v23 = *(float *)(v12 + 4 * v17);
        }
        else
        {
          if (*(_BYTE *)(*((_QWORD *)this + 4) + v17) == 1)
            goto LABEL_35;
          v24 = *(double *)(*((_QWORD *)this + 3) + 8 * v17);
          v21 = v9 - v24;
          v25 = -v24;
          if (v14 <= v25)
            v14 = v25;
          if (v21 <= 0.0)
            goto LABEL_35;
          v22 = *(double *)(*((_QWORD *)this + 7) + 8 * (int)v8) + *(double *)(*((_QWORD *)this + 7) + 8 * v17);
          v23 = *(float *)(v16 + 4 * v17);
        }
        v26 = v22 - (float)(v23 + v23);
        v27 = -(v21 * v21);
        if (v26 <= 0.0)
          v26 = 1.0e-12;
        v28 = v27 / v26;
        if (v28 <= v18)
        {
          v15 = v17;
          v18 = v28;
        }
LABEL_35:
        if (v6 == ++v17)
          goto LABEL_38;
      }
    }
    v15 = -1;
    v13 = -INFINITY;
    v14 = -INFINITY;
  }
LABEL_38:
  v29 = v11 + v13;
  v30 = v9 + v14;
  if (v29 > v30)
    v30 = v29;
  if (v30 < *((double *)this + 8) || v15 == -1)
    return 1;
  result = 0;
  if (*(_BYTE *)(*((_QWORD *)this + 2) + v15) == 1)
    v33 = v10;
  else
    v33 = v8;
  *a2 = v33;
  *a3 = v15;
  return result;
}

double Solver_NU::calculate_rho(Solver_NU *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  double v13;

  v1 = *((unsigned int *)this + 2);
  if ((int)v1 < 1)
  {
    v3 = 0;
    v5 = 0.0;
    v6 = INFINITY;
    v7 = -INFINITY;
    v9 = -INFINITY;
    v10 = INFINITY;
  }
  else
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0.0;
    v6 = INFINITY;
    v7 = -INFINITY;
    v8 = 0.0;
    v9 = -INFINITY;
    v10 = INFINITY;
    do
    {
      v11 = *(unsigned __int8 *)(*((_QWORD *)this + 4) + v2);
      if (*(_BYTE *)(*((_QWORD *)this + 2) + v2) == 1)
      {
        if (*(_BYTE *)(*((_QWORD *)this + 4) + v2))
        {
          if (v11 == 1)
          {
            if (v9 <= *(double *)(*((_QWORD *)this + 3) + 8 * v2))
              v9 = *(double *)(*((_QWORD *)this + 3) + 8 * v2);
          }
          else
          {
            ++v4;
            v8 = v8 + *(double *)(*((_QWORD *)this + 3) + 8 * v2);
          }
        }
        else if (v10 >= *(double *)(*((_QWORD *)this + 3) + 8 * v2))
        {
          v10 = *(double *)(*((_QWORD *)this + 3) + 8 * v2);
        }
      }
      else if (*(_BYTE *)(*((_QWORD *)this + 4) + v2))
      {
        if (v11 == 1)
        {
          if (v7 <= *(double *)(*((_QWORD *)this + 3) + 8 * v2))
            v7 = *(double *)(*((_QWORD *)this + 3) + 8 * v2);
        }
        else
        {
          ++v3;
          v5 = v5 + *(double *)(*((_QWORD *)this + 3) + 8 * v2);
        }
      }
      else if (v6 >= *(double *)(*((_QWORD *)this + 3) + 8 * v2))
      {
        v6 = *(double *)(*((_QWORD *)this + 3) + 8 * v2);
      }
      ++v2;
    }
    while (v1 != v2);
    if (v4 > 0)
    {
      v12 = v8 / (double)v4;
      goto LABEL_27;
    }
  }
  v12 = (v10 + v9) * 0.5;
LABEL_27:
  if (v3 < 1)
    v13 = (v6 + v7) * 0.5;
  else
    v13 = v5 / (double)v3;
  *(double *)(*((_QWORD *)this + 15) + 32) = (v12 + v13) * 0.5;
  return (v12 - v13) * 0.5;
}

void Solver_NU::do_shrinking(Solver_NU *this)
{
  int v2;
  unsigned __int8 *v3;
  double *v4;
  double v5;
  unsigned __int8 *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  int v11;
  int v12;
  int v13;
  int v14;
  double v15;
  double v16;
  double v17;
  int i;

  v2 = *((_DWORD *)this + 2);
  if (v2 >= 1)
  {
    v4 = (double *)*((_QWORD *)this + 3);
    v3 = (unsigned __int8 *)*((_QWORD *)this + 4);
    v5 = -INFINITY;
    v6 = (unsigned __int8 *)*((_QWORD *)this + 2);
    v7 = *((unsigned int *)this + 2);
    v8 = -INFINITY;
    v9 = -INFINITY;
    v10 = -INFINITY;
    while (1)
    {
      v12 = *v3++;
      v11 = v12;
      v14 = *v6++;
      v13 = v14;
      if (v11 == 1)
      {
        v15 = *v4;
      }
      else
      {
        v15 = *v4;
        v16 = -*v4;
        if (v13 == 1)
        {
          if (v10 < v16)
            v10 = -*v4;
        }
        else if (v5 < v16)
        {
          v5 = -*v4;
        }
        if (!v11)
          goto LABEL_16;
      }
      if (v13 == 1)
      {
        if (v15 > v9)
          v9 = v15;
      }
      else if (v15 > v8)
      {
        v8 = v15;
      }
LABEL_16:
      ++v4;
      if (!--v7)
        goto LABEL_19;
    }
  }
  v10 = -INFINITY;
  v9 = -INFINITY;
  v8 = -INFINITY;
  v5 = -INFINITY;
LABEL_19:
  if (!*((_BYTE *)this + 116))
  {
    v17 = v10 + v9;
    if (v10 + v9 <= v8 + v5)
      v17 = v8 + v5;
    if (v17 <= *((double *)this + 8) * 10.0)
    {
      *((_BYTE *)this + 116) = 1;
      Solver::reconstruct_gradient((uint64_t)this);
      v2 = *((_DWORD *)this + 28);
      *((_DWORD *)this + 2) = v2;
    }
  }
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      if (Solver_NU::be_shrunk(this, i, v10, v9, v8, v5))
      {
        while (1)
        {
          *((_DWORD *)this + 2) = --v2;
          if (v2 <= i)
            break;
          if (!Solver_NU::be_shrunk(this, v2, v10, v9, v8, v5))
          {
            Solver::swap_index(this, i, v2);
            v2 = *((_DWORD *)this + 2);
            break;
          }
        }
      }
    }
  }
}

BOOL Solver_NU::be_shrunk(Solver_NU *this, int a2, double a3, double a4, double a5, double a6)
{
  double v6;
  BOOL v7;
  double v8;

  if (*(_BYTE *)(*((_QWORD *)this + 4) + a2))
  {
    if (*(_BYTE *)(*((_QWORD *)this + 4) + a2) != 1)
      return 0;
    v6 = -*(double *)(*((_QWORD *)this + 3) + 8 * a2);
    if (*(_BYTE *)(*((_QWORD *)this + 2) + a2) == 1)
      v7 = v6 <= a3;
    else
      v7 = v6 <= a6;
  }
  else
  {
    v8 = *(double *)(*((_QWORD *)this + 3) + 8 * a2);
    if (*(_BYTE *)(*((_QWORD *)this + 2) + a2) == 1)
      v7 = v8 <= a4;
    else
      v7 = v8 <= a5;
  }
  return !v7;
}

void Cache::Cache(Cache *this, int a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  *(_DWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  v4 = malloc_type_calloc(a2, 0x20uLL, 0x10A004007F91357uLL);
  v5 = *(int *)this;
  v6 = (*((_QWORD *)this + 1) >> 2) - 8 * (v5 & 0x7FFFFFFFFFFFFFFLL);
  v7 = v6 <= 2 * v5;
  v8 = 2 * v5;
  if (v7)
    v6 = v8;
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v4;
  *((_QWORD *)this + 3) = (char *)this + 24;
  *((_QWORD *)this + 4) = (char *)this + 24;
}

void Cache::~Cache(Cache *this)
{
  char *v2;
  uint64_t i;

  v2 = (char *)this + 24;
  for (i = *((_QWORD *)this + 4); (char *)i != v2; i = *(_QWORD *)(i + 8))
    free(*(void **)(i + 16));
  free(*((void **)this + 2));
}

uint64_t Cache::get_data(Cache *this, int a2, float **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a4;
  v7 = *((_QWORD *)this + 2);
  v8 = a2;
  v9 = (uint64_t *)(v7 + 32 * a2);
  v11 = v9 + 3;
  v10 = *((_DWORD *)v9 + 6);
  if (v10)
  {
    v12 = *v9;
    *(_QWORD *)(v12 + 8) = v9[1];
    *(_QWORD *)v9[1] = v12;
  }
  v13 = (a4 - v10);
  if ((int)a4 <= v10)
  {
    v19 = *(float **)(v7 + 32 * a2 + 16);
  }
  else
  {
    if (*((_QWORD *)this + 1) < (uint64_t)v13)
    {
      do
      {
        v14 = (uint64_t *)*((_QWORD *)this + 4);
        v15 = *v14;
        *(_QWORD *)(v15 + 8) = v14[1];
        v16 = (void *)v14[2];
        *(_QWORD *)v14[1] = v15;
        free(v16);
        v17 = *((_QWORD *)this + 1) + *((int *)v14 + 6);
        *((_QWORD *)this + 1) = v17;
        v14[2] = 0;
        *((_DWORD *)v14 + 6) = 0;
      }
      while (v17 < v13);
    }
    v18 = v7 + 32 * v8;
    v19 = (float *)malloc_type_realloc(*(void **)(v18 + 16), 4 * (int)v4, 0x100004052888210uLL);
    *(_QWORD *)(v18 + 16) = v19;
    *((_QWORD *)this + 1) -= v13;
    v20 = *v11;
    *v11 = v4;
    v4 = v20;
  }
  v21 = v7 + 32 * v8;
  v22 = *((_QWORD *)this + 3);
  *(_QWORD *)(v21 + 8) = (char *)this + 24;
  *v9 = v22;
  *(_QWORD *)(v22 + 8) = v9;
  **(_QWORD **)(v21 + 8) = v9;
  *a3 = v19;
  return v4;
}

void Cache::swap_index(Cache *this, int a2, int a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  char *v20;
  char *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;

  if (a2 != a3)
  {
    v4 = *((_QWORD *)this + 2);
    v5 = (uint64_t *)(v4 + 32 * a2);
    if (*((_DWORD *)v5 + 6))
    {
      v6 = *v5;
      *(_QWORD *)(v6 + 8) = v5[1];
      *(_QWORD *)v5[1] = v6;
    }
    v7 = (uint64_t *)(v4 + 32 * a3);
    if (*((_DWORD *)v7 + 6))
    {
      v8 = *v7;
      *(_QWORD *)(v8 + 8) = v7[1];
      *(_QWORD *)v7[1] = v8;
    }
    v9 = v4 + 32 * a2;
    v10 = *(_QWORD *)(v9 + 16);
    *(_QWORD *)(v9 + 16) = v7[2];
    v7[2] = v10;
    v11 = *((_QWORD *)this + 2);
    v12 = v11 + 32 * a2;
    v13 = v11 + 32 * a3;
    v14 = *(_DWORD *)(v12 + 24);
    *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v13 + 24) = v14;
    if (*(_DWORD *)(v12 + 24))
    {
      v15 = *((_QWORD *)this + 3);
      *(_QWORD *)v12 = v15;
      *(_QWORD *)(v12 + 8) = (char *)this + 24;
      *(_QWORD *)(v15 + 8) = v12;
      **(_QWORD **)(v12 + 8) = v12;
    }
    if (v14)
    {
      v16 = *((_QWORD *)this + 3);
      v17 = (_QWORD *)(v11 + 32 * a3);
      *v17 = v16;
      v17[1] = (char *)this + 24;
      *(_QWORD *)(v16 + 8) = v17;
      *(_QWORD *)v17[1] = v17;
    }
    if (a2 >= a3)
      v18 = a3;
    else
      v18 = a2;
    if (a2 <= a3)
      v19 = a3;
    else
      v19 = a2;
    v20 = (char *)this + 24;
    v21 = (char *)*((_QWORD *)this + 4);
    if (v21 != (char *)this + 24)
    {
      do
      {
        v22 = *((_DWORD *)v21 + 6);
        if (v22 > v18)
        {
          if (v22 <= v19)
          {
            v25 = *(_QWORD *)v21;
            *(_QWORD *)(v25 + 8) = *((_QWORD *)v21 + 1);
            v26 = (void *)*((_QWORD *)v21 + 2);
            **((_QWORD **)v21 + 1) = v25;
            free(v26);
            *((_QWORD *)this + 1) += *((int *)v21 + 6);
            *((_QWORD *)v21 + 2) = 0;
            *((_DWORD *)v21 + 6) = 0;
          }
          else
          {
            v23 = *((_QWORD *)v21 + 2);
            v24 = *(_DWORD *)(v23 + 4 * v18);
            *(_DWORD *)(v23 + 4 * v18) = *(_DWORD *)(v23 + 4 * v19);
            *(_DWORD *)(v23 + 4 * v19) = v24;
          }
        }
        v21 = (char *)*((_QWORD *)v21 + 1);
      }
      while (v21 != v20);
    }
  }
}

void Kernel::Kernel(Kernel *this, int a2, svm_node *const *a3, const svm_parameter *a4, double a5, __n128 a6)
{
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  int v15;
  double v16;
  double *v17;
  int v18;

  *((double *)this + 5) = a5;
  *(_QWORD *)this = &unk_1E3D4C6A0;
  *((__n128 *)this + 3) = a6;
  v9 = Kernel::kernel_linear;
  switch(LODWORD(a5))
  {
    case 0:
      goto LABEL_6;
    case 1:
      v9 = Kernel::kernel_poly;
      goto LABEL_6;
    case 2:
      v9 = Kernel::kernel_rbf;
      goto LABEL_6;
    case 3:
      v9 = Kernel::kernel_sigmoid;
      goto LABEL_6;
    case 4:
      v9 = Kernel::kernel_precomputed;
LABEL_6:
      *((_QWORD *)this + 1) = v9;
      *((_QWORD *)this + 2) = 0;
      break;
    default:
      break;
  }
  v10 = (void *)operator new[]();
  *((_QWORD *)this + 3) = v10;
  memcpy(v10, a3, 8 * a2);
  if (*((_DWORD *)this + 10) == 2)
  {
    v11 = operator new[]();
    *((_QWORD *)this + 4) = v11;
    if (a2 >= 1)
    {
      v12 = 0;
      v13 = *((_QWORD *)this + 3);
      do
      {
        v14 = *(double **)(v13 + 8 * v12);
        v15 = *(_DWORD *)v14;
        v16 = 0.0;
        if (*(_DWORD *)v14 != -1)
        {
          v17 = *(double **)(v13 + 8 * v12);
          v18 = *(_DWORD *)v14;
          do
          {
            if (v15 == v18)
            {
              v16 = v16 + v14[1] * v17[1];
              v14 += 2;
              v17 += 2;
            }
            else if (v15 > v18)
            {
              v17 += 2;
            }
            else
            {
              v14 += 2;
            }
            v15 = *(_DWORD *)v14;
            if (*(_DWORD *)v14 == -1)
              break;
            v18 = *(_DWORD *)v17;
          }
          while (*(_DWORD *)v17 != -1);
        }
        *(double *)(v11 + 8 * v12++) = v16;
      }
      while (v12 != a2);
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
}

double Kernel::kernel_precomputed(Kernel *this, int a2, int a3)
{
  return *(double *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8 * a2)
                   + 16 * (int)*(double *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8 * a3) + 8)
                   + 8);
}

long double Kernel::kernel_sigmoid(Kernel *this, int a2, int a3)
{
  uint64_t v3;
  double *v4;
  int v5;
  double *v6;
  double v7;
  int v8;

  v3 = *((_QWORD *)this + 3);
  v4 = *(double **)(v3 + 8 * a2);
  v5 = *(_DWORD *)v4;
  if (*(_DWORD *)v4 == -1)
  {
    v7 = 0.0;
  }
  else
  {
    v6 = *(double **)(v3 + 8 * a3);
    v7 = 0.0;
    do
    {
      v8 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 == -1)
        break;
      if (v5 == v8)
      {
        v7 = v7 + v4[1] * v6[1];
        v4 += 2;
        v6 += 2;
      }
      else if (v5 > v8)
      {
        v6 += 2;
      }
      else
      {
        v4 += 2;
      }
      v5 = *(_DWORD *)v4;
    }
    while (*(_DWORD *)v4 != -1);
  }
  return tanh(*((double *)this + 7) + *((double *)this + 6) * v7);
}

long double Kernel::kernel_rbf(Kernel *this, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double *v7;
  int v8;
  double *v9;
  double v10;
  int v11;

  v4 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  v5 = *(double *)(v3 + 8 * a2);
  v6 = *(double *)(v3 + 8 * a3);
  v7 = *(double **)(v4 + 8 * a2);
  v8 = *(_DWORD *)v7;
  if (*(_DWORD *)v7 == -1)
  {
    v10 = 0.0;
  }
  else
  {
    v9 = *(double **)(v4 + 8 * a3);
    v10 = 0.0;
    do
    {
      v11 = *(_DWORD *)v9;
      if (*(_DWORD *)v9 == -1)
        break;
      if (v8 == v11)
      {
        v10 = v10 + v7[1] * v9[1];
        v7 += 2;
        v9 += 2;
      }
      else if (v8 > v11)
      {
        v9 += 2;
      }
      else
      {
        v7 += 2;
      }
      v8 = *(_DWORD *)v7;
    }
    while (*(_DWORD *)v7 != -1);
  }
  return exp(-(*((double *)this + 6) * (v5 + v6 + v10 * -2.0)));
}

double Kernel::kernel_poly(Kernel *this, int a2, int a3)
{
  uint64_t v3;
  double *v4;
  int v5;
  double *v6;
  double v7;
  int v8;
  int v9;
  double v10;
  double result;
  double v12;
  BOOL v13;

  v3 = *((_QWORD *)this + 3);
  v4 = *(double **)(v3 + 8 * a2);
  v5 = *(_DWORD *)v4;
  if (*(_DWORD *)v4 == -1)
  {
    v7 = 0.0;
  }
  else
  {
    v6 = *(double **)(v3 + 8 * a3);
    v7 = 0.0;
    do
    {
      v8 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 == -1)
        break;
      if (v5 == v8)
      {
        v7 = v7 + v4[1] * v6[1];
        v4 += 2;
        v6 += 2;
      }
      else if (v5 > v8)
      {
        v6 += 2;
      }
      else
      {
        v4 += 2;
      }
      v5 = *(_DWORD *)v4;
    }
    while (*(_DWORD *)v4 != -1);
  }
  v9 = *((_DWORD *)this + 11);
  if (v9 < 1)
    return 1.0;
  v10 = *((double *)this + 7) + *((double *)this + 6) * v7;
  result = 1.0;
  do
  {
    if ((v9 & 1) != 0)
      v12 = v10;
    else
      v12 = 1.0;
    result = result * v12;
    v10 = v10 * v10;
    v13 = v9 > 1;
    v9 = v9 >> 1;
  }
  while (v13);
  return result;
}

double Kernel::kernel_linear(Kernel *this, int a2, int a3)
{
  uint64_t v3;
  double *v4;
  int v5;
  double *v6;
  double result;
  int v8;

  v3 = *((_QWORD *)this + 3);
  v4 = *(double **)(v3 + 8 * a2);
  v5 = *(_DWORD *)v4;
  if (*(_DWORD *)v4 == -1)
    return 0.0;
  v6 = *(double **)(v3 + 8 * a3);
  result = 0.0;
  do
  {
    v8 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 == -1)
      break;
    if (v5 == v8)
    {
      result = result + v4[1] * v6[1];
      v4 += 2;
      v6 += 2;
    }
    else if (v5 > v8)
    {
      v6 += 2;
    }
    else
    {
      v4 += 2;
    }
    v5 = *(_DWORD *)v4;
  }
  while (*(_DWORD *)v4 != -1);
  return result;
}

void Kernel::~Kernel(Kernel *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E3D4C6A0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x1A1AD6248](v2, 0x60C8044C4A2DFLL);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    MEMORY[0x1A1AD6248](v3, 0x1000C8000313F17);
}

long double Kernel::k_function(Kernel *this, const svm_node *a2, const svm_node *a3, const svm_parameter *a4)
{
  long double result;
  int v5;
  int var0;
  int v7;
  int v8;
  int v9;
  int v10;
  double v11;
  int v12;
  double v13;
  int v14;
  int var1_low;
  double v16;
  double v17;
  BOOL v18;
  double *v19;
  int v20;
  const svm_node *v21;
  int v22;

  result = 0.0;
  switch(*(&a3->var0 + 1))
  {
    case 0:
      while (1)
      {
        v5 = *(_DWORD *)this;
        if (*(_DWORD *)this == -1)
          break;
        var0 = a2->var0;
        if (a2->var0 == -1)
          break;
        if (v5 == var0)
        {
          result = result + *((double *)this + 1) * a2->var1;
          this = (Kernel *)((char *)this + 16);
          ++a2;
        }
        else if (v5 > var0)
        {
          ++a2;
        }
        else
        {
          this = (Kernel *)((char *)this + 16);
        }
      }
      break;
    case 1:
      while (1)
      {
        v7 = *(_DWORD *)this;
        if (*(_DWORD *)this == -1)
          break;
        v8 = a2->var0;
        if (a2->var0 == -1)
          break;
        if (v7 == v8)
        {
          result = result + *((double *)this + 1) * a2->var1;
          this = (Kernel *)((char *)this + 16);
          ++a2;
        }
        else if (v7 > v8)
        {
          ++a2;
        }
        else
        {
          this = (Kernel *)((char *)this + 16);
        }
      }
      var1_low = LODWORD(a3->var1);
      if (var1_low < 1)
      {
        result = 1.0;
      }
      else
      {
        v16 = a3[1].var1 + *(double *)&a3[1].var0 * result;
        result = 1.0;
        do
        {
          if ((var1_low & 1) != 0)
            v17 = v16;
          else
            v17 = 1.0;
          result = result * v17;
          v16 = v16 * v16;
          v18 = var1_low >= 2;
          var1_low = var1_low >> 1;
        }
        while (v18);
      }
      break;
    case 2:
      while (1)
      {
        v9 = *(_DWORD *)this;
        if (*(_DWORD *)this == -1)
          break;
        v10 = a2->var0;
        if (a2->var0 == -1)
        {
          v19 = (double *)((char *)this + 16);
          do
          {
            result = result + *(v19 - 1) * *(v19 - 1);
            v20 = *(_DWORD *)v19;
            v19 += 2;
          }
          while (v20 != -1);
          break;
        }
        if (v9 == v10)
        {
          v11 = *((double *)this + 1) - a2->var1;
          result = result + v11 * v11;
          this = (Kernel *)((char *)this + 16);
          ++a2;
        }
        else if (v9 <= v10)
        {
          result = result + *((double *)this + 1) * *((double *)this + 1);
          this = (Kernel *)((char *)this + 16);
        }
        else
        {
          result = result + a2->var1 * a2->var1;
          ++a2;
        }
      }
      if (a2->var0 != -1)
      {
        v21 = a2 + 1;
        do
        {
          result = result + v21[-1].var1 * v21[-1].var1;
          v22 = v21->var0;
          ++v21;
        }
        while (v22 != -1);
      }
      result = exp(-(*(double *)&a3[1].var0 * result));
      break;
    case 3:
      v12 = *(_DWORD *)this;
      v13 = 0.0;
      while (v12 != -1)
      {
        v14 = a2->var0;
        if (a2->var0 == -1)
          break;
        if (v12 == v14)
        {
          v13 = v13 + *((double *)this + 1) * a2->var1;
          this = (Kernel *)((char *)this + 16);
          ++a2;
        }
        else if (v12 > v14)
        {
          ++a2;
        }
        else
        {
          this = (Kernel *)((char *)this + 16);
        }
        v12 = *(_DWORD *)this;
      }
      result = tanh(a3[1].var1 + *(double *)&a3[1].var0 * v13);
      break;
    case 4:
      result = *((double *)this + 2 * (int)a2->var1 + 1);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t Solver::Solve(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, const void *a5, _QWORD *a6, uint64_t a7, int a8, double a9, double a10, double a11)
{
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  double v38;
  double *v39;
  float *v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  double *v44;
  uint64_t v45;
  double *v46;
  float v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  float *v52;
  float *v53;
  uint64_t v54;
  uint64_t v55;
  double *v56;
  int v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  uint64_t v83;
  double v84;
  double v85;
  float v86;
  double v87;
  float v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  double v93;
  char v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  float *v99;
  double *v100;
  uint64_t v101;
  float v102;
  double *v103;
  uint64_t v104;
  float v105;
  float *v106;
  double *v107;
  uint64_t v108;
  float v109;
  double *v110;
  uint64_t v111;
  float v112;
  double *v113;
  double *v114;
  double *v115;
  double v116;
  double *v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  int *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t result;
  _QWORD *v135;
  int v137;
  unsigned int v139;
  uint64_t v140;

  *(_DWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  v20 = (void *)operator new[]();
  *(_QWORD *)(a1 + 88) = v20;
  memcpy(v20, a4, 8 * (int)a2);
  v21 = (void *)operator new[]();
  *(_QWORD *)(a1 + 16) = v21;
  memcpy(v21, a5, (int)a2);
  v22 = (void *)operator new[]();
  *(_QWORD *)(a1 + 40) = v22;
  v135 = a6;
  memcpy(v22, a6, 8 * (int)a2);
  *(double *)(a1 + 72) = a9;
  *(double *)(a1 + 80) = a10;
  *(double *)(a1 + 64) = a11;
  *(_BYTE *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 32) = operator new[]();
  v23 = a2;
  if ((int)a2 >= 1)
  {
    v24 = 0;
    do
    {
      v25 = *(double *)(*(_QWORD *)(a1 + 40) + 8 * v24);
      if (*(char *)(*(_QWORD *)(a1 + 16) + v24) <= 0)
        v26 = 80;
      else
        v26 = 72;
      if (v25 >= *(double *)(a1 + v26))
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 32) + v24) = 1;
      }
      else
      {
        v27 = *(_QWORD *)(a1 + 32);
        if (v25 <= 0.0)
          *(_BYTE *)(v27 + v24) = 0;
        else
          *(_BYTE *)(v27 + v24) = 2;
      }
      ++v24;
    }
    while (a2 != v24);
  }
  v28 = operator new[]();
  *(_QWORD *)(a1 + 96) = v28;
  if ((int)a2 >= 1)
  {
    v29 = 0;
    do
    {
      *(_DWORD *)(v28 + 4 * v29) = v29;
      ++v29;
    }
    while (a2 != v29);
  }
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = operator new[]();
  v30 = (_QWORD *)operator new[]();
  *(_QWORD *)(a1 + 104) = v30;
  if ((int)a2 > 0)
  {
    v31 = *(uint64_t **)(a1 + 88);
    v32 = *(_QWORD **)(a1 + 24);
    v33 = a2;
    do
    {
      v34 = *v31++;
      *v32++ = v34;
      *v30++ = 0;
      --v33;
    }
    while (v33);
    v35 = 0;
    v36 = *(_QWORD *)(a1 + 32);
    do
    {
      if (*(_BYTE *)(v36 + v35))
      {
        v37 = (float *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))a3)(a3, v35, a2);
        v38 = *(double *)(*(_QWORD *)(a1 + 40) + 8 * v35);
        v39 = *(double **)(a1 + 24);
        v40 = v37;
        v41 = a2;
        do
        {
          v42 = *v40++;
          *v39 = *v39 + v38 * v42;
          ++v39;
          --v41;
        }
        while (v41);
        v36 = *(_QWORD *)(a1 + 32);
        if (*(_BYTE *)(v36 + v35) == 1)
        {
          v43 = *(_QWORD *)(a1 + 16);
          v44 = *(double **)(a1 + 104);
          v45 = a2;
          do
          {
            if (*(char *)(v43 + v35) <= 0)
              v46 = (double *)(a1 + 80);
            else
              v46 = (double *)(a1 + 72);
            v47 = *v37++;
            *v44 = *v44 + *v46 * v47;
            ++v44;
            --v45;
          }
          while (v45);
        }
      }
      ++v35;
    }
    while (v35 != a2);
  }
  v48 = 0;
  v49 = 100 * a2;
  if (100 * (int)a2 <= 10000000)
    v49 = 10000000;
  if ((int)a2 > 21474836)
    v49 = 0x7FFFFFFF;
  v139 = v49;
  if ((int)a2 >= 1000)
    v50 = 1000;
  else
    v50 = a2;
  v137 = v50;
  v51 = v50 + 1;
  while (1)
  {
    if (!--v51)
    {
      if (a8)
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      info(".");
      v51 = v137;
    }
    v140 = 0;
    if ((*(unsigned int (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 16))(a1, (char *)&v140 + 4, &v140))
    {
      break;
    }
LABEL_44:
    v52 = (float *)(**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a3)(a3, HIDWORD(v140), *(unsigned int *)(a1 + 8));
    v53 = (float *)(**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a3)(a3, v140, *(unsigned int *)(a1 + 8));
    v54 = SHIDWORD(v140);
    v55 = *(_QWORD *)(a1 + 16);
    v56 = *(double **)(a1 + 24);
    v57 = *(unsigned __int8 *)(v55 + SHIDWORD(v140));
    if ((char)v57 <= 0)
      v58 = 80;
    else
      v58 = 72;
    v59 = *(double *)(a1 + v58);
    v60 = (int)v140;
    v61 = *(unsigned __int8 *)(v55 + (int)v140);
    if ((char)v61 <= 0)
      v62 = 80;
    else
      v62 = 72;
    v63 = *(double *)(a1 + v62);
    v64 = *(_QWORD *)(a1 + 56);
    v65 = *(double *)(v64 + 8 * SHIDWORD(v140));
    v66 = *(double *)(v64 + 8 * (int)v140);
    v67 = *(_QWORD *)(a1 + 40);
    v68 = *(double *)(v67 + 8 * SHIDWORD(v140));
    v69 = *(double *)(v67 + 8 * (int)v140);
    v70 = v65 + v66;
    v71 = (float)(v52[(int)v140] + v52[(int)v140]);
    v72 = v56[SHIDWORD(v140)];
    if (v57 == v61)
    {
      v73 = v70 - v71;
      if (v73 <= 0.0)
        v73 = 1.0e-12;
      v74 = (v72 - v56[(int)v140]) / v73;
      v75 = v68 + v69;
      *(double *)(v67 + 8 * SHIDWORD(v140)) = v68 - v74;
      v76 = *(double *)(v67 + 8 * v60) + v74;
      *(double *)(v67 + 8 * v60) = v76;
      if (v68 + v69 <= v59)
      {
        if (v76 < 0.0)
        {
          *(_QWORD *)(v67 + 8 * v60) = 0;
          *(double *)(v67 + 8 * v54) = v75;
        }
      }
      else if (*(double *)(v67 + 8 * v54) > v59)
      {
        *(double *)(v67 + 8 * v54) = v59;
        *(double *)(v67 + 8 * v60) = v75 - v59;
      }
      if (v75 <= v63)
      {
        if (*(double *)(v67 + 8 * v54) >= 0.0)
          goto LABEL_77;
        *(_QWORD *)(v67 + 8 * v54) = 0;
        goto LABEL_73;
      }
      if (*(double *)(v67 + 8 * v60) <= v63)
        goto LABEL_77;
      *(double *)(v67 + 8 * v60) = v63;
      v81 = v75 - v63;
      goto LABEL_76;
    }
    v77 = v70 + v71;
    if (v77 <= 0.0)
      v77 = 1.0e-12;
    v78 = (-v72 - v56[(int)v140]) / v77;
    v79 = v68 - v69;
    *(double *)(v67 + 8 * SHIDWORD(v140)) = v68 + v78;
    v80 = *(double *)(v67 + 8 * v60) + v78;
    *(double *)(v67 + 8 * v60) = v80;
    if (v68 - v69 <= 0.0)
    {
      if (*(double *)(v67 + 8 * v54) < 0.0)
      {
        *(_QWORD *)(v67 + 8 * v54) = 0;
        *(double *)(v67 + 8 * v60) = -v79;
      }
    }
    else if (v80 < 0.0)
    {
      *(_QWORD *)(v67 + 8 * v60) = 0;
      *(double *)(v67 + 8 * v54) = v79;
    }
    if (v79 > v59 - v63)
    {
      if (*(double *)(v67 + 8 * v54) <= v59)
        goto LABEL_77;
      *(double *)(v67 + 8 * v54) = v59;
      v75 = v59 - v79;
LABEL_73:
      *(double *)(v67 + 8 * v60) = v75;
      goto LABEL_77;
    }
    if (*(double *)(v67 + 8 * v60) > v63)
    {
      *(double *)(v67 + 8 * v60) = v63;
      v81 = v63 + v79;
LABEL_76:
      *(double *)(v67 + 8 * v54) = v81;
    }
LABEL_77:
    v82 = *(double *)(v67 + 8 * v54);
    v83 = *(unsigned int *)(a1 + 8);
    if ((int)v83 >= 1)
    {
      v84 = v82 - v68;
      v85 = *(double *)(v67 + 8 * v60) - v69;
      do
      {
        v86 = *v52++;
        v87 = v86;
        v88 = *v53++;
        *v56 = *v56 + v85 * v88 + v87 * v84;
        ++v56;
        --v83;
      }
      while (v83);
      v82 = *(double *)(v67 + 8 * v54);
    }
    v89 = *(_QWORD *)(a1 + 32);
    v90 = *(unsigned __int8 *)(v89 + v54);
    v91 = *(unsigned __int8 *)(v89 + v60);
    if (*(char *)(v55 + v54) <= 0)
      v92 = 80;
    else
      v92 = 72;
    v93 = *(double *)(a1 + v92);
    v94 = 2 * (v82 > 0.0);
    if (v82 >= v93)
      v94 = 1;
    *(_BYTE *)(v89 + v54) = v94;
    v95 = *(double *)(*(_QWORD *)(a1 + 40) + 8 * (int)v140);
    if (*(char *)(*(_QWORD *)(a1 + 16) + (int)v140) <= 0)
      v96 = 80;
    else
      v96 = 72;
    if (v95 >= *(double *)(a1 + v96))
    {
      v97 = *(_QWORD *)(a1 + 32);
      v98 = 1;
    }
    else
    {
      v97 = *(_QWORD *)(a1 + 32);
      if (v95 <= 0.0)
      {
        *(_BYTE *)(v97 + (int)v140) = 0;
        goto LABEL_95;
      }
      v98 = 2;
    }
    *(_BYTE *)(v97 + (int)v140) = v98;
LABEL_95:
    if ((v90 == 1) != (*(_BYTE *)(*(_QWORD *)(a1 + 32) + SHIDWORD(v140)) == 1))
    {
      v99 = (float *)(**(uint64_t (***)(uint64_t))a3)(a3);
      if (v90 == 1)
      {
        if ((int)a2 >= 1)
        {
          v100 = *(double **)(a1 + 104);
          v101 = a2;
          do
          {
            v102 = *v99++;
            *v100 = *v100 + -v59 * v102;
            ++v100;
            --v101;
          }
          while (v101);
        }
      }
      else if ((int)a2 >= 1)
      {
        v103 = *(double **)(a1 + 104);
        v104 = a2;
        do
        {
          v105 = *v99++;
          *v103 = *v103 + v59 * v105;
          ++v103;
          --v104;
        }
        while (v104);
      }
    }
    if ((v91 == 1) != (*(_BYTE *)(*(_QWORD *)(a1 + 32) + (int)v140) == 1))
    {
      v106 = (float *)(**(uint64_t (***)(uint64_t))a3)(a3);
      if (v91 == 1)
      {
        if ((int)a2 >= 1)
        {
          v107 = *(double **)(a1 + 104);
          v108 = a2;
          do
          {
            v109 = *v106++;
            *v107 = *v107 + -v63 * v109;
            ++v107;
            --v108;
          }
          while (v108);
        }
      }
      else if ((int)a2 >= 1)
      {
        v110 = *(double **)(a1 + 104);
        v111 = a2;
        do
        {
          v112 = *v106++;
          *v110 = *v110 + v63 * v112;
          ++v110;
          --v111;
        }
        while (v111);
      }
    }
    if (++v48 == v139)
    {
      v48 = v139;
      goto LABEL_116;
    }
  }
  Solver::reconstruct_gradient(a1);
  *(_DWORD *)(a1 + 8) = a2;
  info("*");
  if (!(*(unsigned int (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 16))(a1, (char *)&v140 + 4, &v140))
  {
    v51 = 1;
    goto LABEL_44;
  }
  if (v48 < v139)
    goto LABEL_119;
LABEL_116:
  if (*(_DWORD *)(a1 + 8) < (int)a2)
  {
    Solver::reconstruct_gradient(a1);
    *(_DWORD *)(a1 + 8) = a2;
    info("*");
  }
  fwrite("\nWARNING: reaching max number of iterations\n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
LABEL_119:
  *(double *)(a7 + 8) = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((int)a2 <= 0)
  {
    *(_QWORD *)a7 = 0;
  }
  else
  {
    v113 = *(double **)(a1 + 40);
    v114 = *(double **)(a1 + 24);
    v115 = *(double **)(a1 + 88);
    v116 = 0.0;
    v117 = v113;
    v118 = a2;
    do
    {
      v119 = *v117++;
      v120 = v119;
      v121 = *v114++;
      v122 = v121;
      v123 = *v115++;
      v116 = v116 + v120 * (v122 + v123);
      --v118;
    }
    while (v118);
    *(double *)a7 = v116 * 0.5;
    v124 = *(int **)(a1 + 96);
    do
    {
      v125 = *(_QWORD *)v113++;
      v126 = v125;
      v127 = *v124++;
      v135[v127] = v126;
      --v23;
    }
    while (v23);
  }
  *(double *)(a7 + 16) = a9;
  *(double *)(a7 + 24) = a10;
  info("\noptimization finished, #iter = %d\n", v48);
  v128 = *(_QWORD *)(a1 + 88);
  if (v128)
    MEMORY[0x1A1AD6248](v128, 0x1000C8000313F17);
  v129 = *(_QWORD *)(a1 + 16);
  if (v129)
    MEMORY[0x1A1AD6248](v129, 0x1000C8077774924);
  v130 = *(_QWORD *)(a1 + 40);
  if (v130)
    MEMORY[0x1A1AD6248](v130, 0x1000C8000313F17);
  v131 = *(_QWORD *)(a1 + 32);
  if (v131)
    MEMORY[0x1A1AD6248](v131, 0x1000C8077774924);
  v132 = *(_QWORD *)(a1 + 96);
  if (v132)
    MEMORY[0x1A1AD6248](v132, 0x1000C8052888210);
  v133 = *(_QWORD *)(a1 + 24);
  if (v133)
    MEMORY[0x1A1AD6248](v133, 0x1000C8000313F17);
  result = *(_QWORD *)(a1 + 104);
  if (result)
    return MEMORY[0x1A1AD6248](result, 0x1000C8000313F17);
  return result;
}

char *svm_train(int *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void **v11;
  double *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  double *v17;
  double v18;
  double *v19;
  uint64_t v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  double *v26;
  uint64_t v27;
  double v28;
  double v29;
  BOOL v30;
  size_t v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  int *v37;
  _QWORD *v38;
  size_t v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _DWORD *v47;
  FILE **v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  size_t v56;
  double *v57;
  double *v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  double *v69;
  double *v70;
  _QWORD *v71;
  double *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  int *v85;
  double *v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  size_t v96;
  _QWORD *v97;
  void *v98;
  void *v99;
  int *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  uint64_t v108;
  int v109;
  int v110;
  double *v111;
  double v112;
  uint64_t v113;
  int *v114;
  uint64_t v115;
  BOOL v116;
  BOOL v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _QWORD *v121;
  double *v122;
  uint64_t v123;
  const svm_parameter *v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  uint64_t v129;
  int *v130;
  uint64_t v131;
  uint64_t v132;
  int *v133;
  uint64_t v134;
  double v135;
  double v136;
  double v137;
  double *v138;
  uint64_t v139;
  double v140;
  double *v141;
  double v142;
  double v143;
  double *v144;
  double *v145;
  double *v146;
  uint64_t v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  long double v156;
  int v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double *v162;
  double *v163;
  uint64_t v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  long double v171;
  double v172;
  double v173;
  long double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double *v182;
  double *v183;
  uint64_t v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  long double v193;
  double *v194;
  double **v195;
  double *v196;
  char *v197;
  double *v198;
  uint64_t v199;
  uint64_t v200;
  double *v201;
  char *v202;
  _DWORD *v203;
  int *v204;
  uint64_t v205;
  int v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  double *v214;
  double *v215;
  uint64_t v216;
  uint64_t v217;
  int *v218;
  _DWORD *v219;
  uint64_t v220;
  int v221;
  int32x2_t *v222;
  int *v223;
  uint64_t v224;
  int v225;
  char *v226;
  int v227;
  size_t v228;
  void *v229;
  unsigned __int8 *v230;
  int v231;
  uint64_t v232;
  _DWORD *v233;
  _DWORD *v235;
  double *v236;
  int v237;
  uint64_t v238;
  _DWORD *v239;
  int *v240;
  int v241;
  uint64_t v242;
  _QWORD *v243;
  int *v244;
  int32x2_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  int v258;
  char *v259;
  uint64_t v260;
  uint64_t v262;
  void **v263;
  void *v264;
  double v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  unsigned int v270;
  double *v271;
  double v272;
  int v273;
  int v274;
  uint64_t v275;
  int v276;
  double v277;
  size_t v279;
  unsigned int v280;
  unsigned int v281;
  size_t size;
  size_t v283;
  int *v284;
  int v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  double *v291;
  int32x2_t *v292;
  int *v293;
  uint64_t v294;
  char *v295;
  _QWORD *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  double *v306;
  double *v307;
  int *v308;
  double v309;
  double v310;
  uint64_t v311;
  double v312;
  double *v313;
  double v314;
  void *v315;
  double v316;
  uint64_t v317;
  double v318;
  int v319;
  double *v320;
  _QWORD *v321;
  int32x2_t *v322;
  int *v323;
  void *v324;
  unsigned int v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  uint64_t v332;
  int v333;
  void *v334;
  _QWORD *v335;

  v4 = (char *)malloc_type_malloc(0xB8uLL, 0x109004003BC950CuLL);
  v5 = v4;
  v6 = *(_OWORD *)a2;
  v7 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v4 + 2) = v7;
  *(_OWORD *)v4 = v6;
  v8 = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 80);
  *((_QWORD *)v4 + 12) = *(_QWORD *)(a2 + 96);
  *((_OWORD *)v4 + 4) = v9;
  *((_OWORD *)v4 + 5) = v10;
  *((_OWORD *)v4 + 3) = v8;
  *((_DWORD *)v4 + 44) = 0;
  v303 = a2;
  if ((*(_DWORD *)a2 - 2) <= 2)
  {
    *((_QWORD *)v4 + 17) = 0;
    v11 = (void **)(v4 + 136);
    *((_DWORD *)v4 + 26) = 2;
    *((_QWORD *)v4 + 18) = 0;
    *((_QWORD *)v4 + 20) = 0;
    *((_QWORD *)v4 + 21) = 0;
    *((_QWORD *)v4 + 15) = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
    if (*(_DWORD *)(a2 + 100) && (*(_DWORD *)a2 - 3) <= 1)
    {
      *v11 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
      v12 = (double *)malloc_type_malloc(8 * *a1, 0x100004000313F17uLL);
      v332 = *(_QWORD *)(a2 + 96);
      v13 = *(_OWORD *)(a2 + 64);
      v331 = *(_OWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v326 = *(_OWORD *)a2;
      v327 = v14;
      v15 = *(_OWORD *)(a2 + 32);
      v329 = *(_OWORD *)(a2 + 48);
      v330 = v13;
      v328 = v15;
      HIDWORD(v332) = 0;
      svm_cross_validation(a1, &v326, 5, v12);
      v16 = *a1;
      if ((int)v16 < 1)
      {
        v23 = 0;
        v25 = 0.0;
      }
      else
      {
        v17 = (double *)*((_QWORD *)a1 + 1);
        v18 = 0.0;
        v19 = v12;
        v20 = *a1;
        do
        {
          v21 = *v17++;
          v22 = *v19;
          *v19 = v21 - *v19;
          ++v19;
          v18 = v18 + vabdd_f64(v21, v22);
          --v20;
        }
        while (v20);
        v23 = 0;
        v24 = sqrt(v18 / (double)(int)v16 * (v18 / (double)(int)v16 + v18 / (double)(int)v16)) * 5.0;
        v25 = 0.0;
        v26 = v12;
        v27 = v16;
        do
        {
          v28 = *v26++;
          v29 = fabs(v28);
          v30 = v29 <= v24;
          if (v29 > v24)
            v29 = -0.0;
          v25 = v25 + v29;
          if (!v30)
            ++v23;
          --v27;
        }
        while (v27);
      }
      v265 = v25 / (double)((int)v16 - v23);
      info("Prob. model for test data: target value = predicted value + z,\nz: Laplace distribution e^(-|z|/sigma)/(2sigma),sigma= %g\n", v265);
      free(v12);
      *(double *)*v11 = v265;
    }
    v236 = (double *)svm_train_one(a1, a2, 0.0, 0.0);
    v267 = v266;
    v268 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
    *((_QWORD *)v5 + 16) = v268;
    *v268 = v267;
    v269 = *a1;
    if ((int)v269 < 1)
    {
      v270 = 0;
    }
    else
    {
      v270 = 0;
      v271 = v236;
      do
      {
        v272 = *v271++;
        v273 = v272 < 0.0;
        if (v272 > 0.0)
          v273 = 1;
        v270 += v273;
        --v269;
      }
      while (v269);
    }
    *((_DWORD *)v5 + 27) = v270;
    *((_QWORD *)v5 + 14) = malloc_type_malloc(8 * v270, 0x2004093837F09uLL);
    **((_QWORD **)v5 + 15) = malloc_type_malloc(8 * v270, 0x100004000313F17uLL);
    *((_QWORD *)v5 + 19) = malloc_type_malloc(4 * v270, 0x100004052888210uLL);
    v274 = *a1;
    if (*a1 >= 1)
    {
      v275 = 0;
      v276 = 0;
      do
      {
        v277 = v236[v275];
        if (v277 < 0.0 || v277 > 0.0)
        {
          *(_QWORD *)(*((_QWORD *)v5 + 14) + 8 * v276) = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * v275);
          *(double *)(**((_QWORD **)v5 + 15) + 8 * v276) = v277;
          *(_DWORD *)(*((_QWORD *)v5 + 19) + 4 * v276++) = ++v275;
          v274 = *a1;
        }
        else
        {
          ++v275;
        }
      }
      while (v275 < v274);
    }
    goto LABEL_232;
  }
  v31 = *a1;
  v32 = *a1;
  v325 = 0;
  v323 = 0;
  v324 = 0;
  v322 = 0;
  v284 = (int *)malloc_type_malloc(4 * v31, 0x100004052888210uLL);
  svm_group_classes(a1, (int *)&v325, &v324, &v323, &v322, (uint64_t)v284);
  v33 = v325;
  if (v325 == 1)
    info("WARNING: training data in only one class. See README for details.\n");
  v34 = (int)v33;
  v35 = malloc_type_malloc(8 * v31, 0x2004093837F09uLL);
  v36 = v35;
  if ((int)v32 >= 1)
  {
    v37 = v284;
    v38 = v35;
    v39 = v32;
    do
    {
      v40 = *v37++;
      *v38++ = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * v40);
      --v39;
    }
    while (v39);
  }
  size = v31;
  v283 = v32;
  v41 = malloc_type_malloc(8 * (int)v33, 0x100004000313F17uLL);
  v42 = v33 - 1;
  if ((int)v33 >= 1)
  {
    v43 = v41;
    v44 = v33;
    do
    {
      *v43++ = *(_QWORD *)(a2 + 48);
      --v44;
    }
    while (v44);
  }
  v291 = (double *)v41;
  v45 = *(_DWORD *)(a2 + 56);
  if (v45 >= 1)
  {
    v46 = 0;
    v47 = v324;
    v48 = (FILE **)MEMORY[0x1E0C80C10];
    do
    {
      if ((int)v33 < 1)
      {
        LODWORD(v49) = 0;
      }
      else
      {
        v49 = 0;
        v50 = *(_DWORD *)(*(_QWORD *)(v303 + 64) + 4 * v46);
        while (v50 != v47[v49])
        {
          if (v33 == ++v49)
          {
            v51 = v303;
            goto LABEL_32;
          }
        }
      }
      if ((_DWORD)v49 == (_DWORD)v33)
      {
        v51 = v303;
        v50 = *(_DWORD *)(*(_QWORD *)(v303 + 64) + 4 * v46);
LABEL_32:
        fprintf(*v48, "WARNING: class label %d specified in weight is not found\n", v50);
        v45 = *(_DWORD *)(v51 + 56);
      }
      else
      {
        v291[v49] = *(double *)(*(_QWORD *)(v303 + 72) + 8 * v46) * v291[v49];
      }
      ++v46;
    }
    while (v46 < v45);
  }
  v52 = (char *)malloc_type_malloc(size, 0x100004077774924uLL);
  v53 = v52;
  if ((int)v283 >= 1)
    bzero(v52, v283);
  v295 = v53;
  v280 = v33 - 1;
  v285 = v42 * v33;
  v54 = (uint64_t)(int)(v42 * v33 + (v42 * (int)v33 < 0)) >> 1;
  v55 = malloc_type_malloc(16 * (v42 * (int)v33 / 2), 0x1080040FC6463CFuLL);
  v281 = v54;
  v56 = 8 * v54;
  v279 = v56;
  if (*(_DWORD *)(v303 + 100))
  {
    v57 = (double *)malloc_type_malloc(v56, 0x100004000313F17uLL);
    v306 = (double *)malloc_type_malloc(v56, 0x100004000313F17uLL);
  }
  else
  {
    v57 = 0;
    v306 = 0;
  }
  v58 = v291;
  v290 = v36;
  v307 = v57;
  if ((int)v33 < 1)
    goto LABEL_162;
  v59 = 0;
  LODWORD(v305) = 0;
  v292 = v322;
  v293 = v323;
  v60 = -1.0;
  v61 = 1;
  v286 = (int)v33;
  v287 = v5;
  v294 = v33;
  v296 = v55;
  do
  {
    v62 = v59 + 1;
    if (v59 + 1 >= v34)
      goto LABEL_161;
    v288 = v59 + 1;
    v289 = v61;
    v305 = (int)v305;
    v63 = v61;
    v64 = v303;
    v297 = v59;
    do
    {
      v299 = v293[v59];
      v300 = v293[v63];
      v65 = v292->i32[v59];
      v304 = v65;
      v302 = v63;
      v66 = v292->u32[v63];
      v67 = v66 + v65;
      v319 = v66 + v65;
      v68 = malloc_type_malloc(8 * ((int)v66 + (int)v65), 0x2004093837F09uLL);
      v321 = v68;
      v311 = 8 * ((int)v66 + (int)v65);
      v69 = (double *)malloc_type_malloc(v311, 0x100004000313F17uLL);
      v70 = v69;
      v320 = v69;
      if ((int)v65 >= 1)
      {
        v71 = v68;
        v72 = v69;
        v73 = v65;
        v74 = &v36[v299];
        do
        {
          v75 = *v74++;
          *v71++ = v75;
          *v72++ = 1.0;
          --v73;
        }
        while (v73);
      }
      v301 = v66;
      v298 = (int)v66;
      v30 = (int)v66 < 1;
      v76 = v305;
      if (!v30)
      {
        v77 = (char *)&v69[v65];
        v78 = &v68[v65];
        v79 = v301;
        v80 = &v36[v300];
        do
        {
          v81 = *v80++;
          *v78++ = v81;
          *(_QWORD *)v77 = 0xBFF0000000000000;
          v77 += 8;
          --v79;
        }
        while (v79);
      }
      if (!*(_DWORD *)(v64 + 100))
        goto LABEL_147;
      v82 = v67;
      v83 = v58[v297];
      v84 = v58[v302];
      v85 = (int *)malloc_type_malloc(4 * v67, 0x100004052888210uLL);
      v86 = (double *)malloc_type_malloc(v311, 0x100004000313F17uLL);
      if ((int)v82 >= 1)
      {
        for (i = 0; i != v82; ++i)
          v85[i] = i;
        v88 = 0;
        v89 = v82;
        do
        {
          v90 = v88 + rand() % (int)v89;
          v91 = v85[v88];
          v85[v88] = v85[v90];
          v85[v90] = v91;
          ++v88;
          --v89;
        }
        while (v89);
      }
      v308 = v85;
      v92 = 0;
      v317 = v298 + v65;
      do
      {
        v93 = v82 * v92;
        v94 = (int)v82 * v92++ / 5;
        v95 = (int)v82 * v92 / 5;
        v333 = v94 - v95 + v82;
        v96 = 8 * v333;
        v97 = malloc_type_malloc(v96, 0x2004093837F09uLL);
        v335 = v97;
        v98 = malloc_type_malloc(v96, 0x100004000313F17uLL);
        v99 = v98;
        v334 = v98;
        if (v93 < 5)
        {
          LODWORD(v105) = 0;
        }
        else
        {
          v100 = v308;
          v101 = v97;
          v102 = v98;
          v103 = (v93 / 5);
          do
          {
            v104 = *v100++;
            *v101++ = v68[v104];
            *v102++ = *(_QWORD *)&v70[v104];
            --v103;
          }
          while (v103);
          LODWORD(v105) = v93 / 5;
        }
        if (v95 < (int)v82)
        {
          v105 = v105;
          v106 = v317 - v95;
          v107 = &v308[v95];
          do
          {
            v108 = *v107++;
            v97[v105] = v68[v108];
            *((double *)v98 + v105++) = v70[v108];
            --v106;
          }
          while (v106);
        }
        if ((_DWORD)v105)
        {
          v109 = 0;
          v110 = 0;
          v111 = (double *)v98;
          v105 = v105;
          do
          {
            v112 = *v111++;
            if (v112 <= 0.0)
              ++v109;
            else
              ++v110;
            --v105;
          }
          while (v105);
        }
        else
        {
          v110 = 0;
          v109 = 0;
        }
        if (v110 | v109)
        {
          if (v110)
            v116 = v109 == 0;
          else
            v116 = 0;
          if (v116)
          {
            if (v94 < v95)
            {
              v129 = v95 - (uint64_t)v94;
              v130 = &v308[v94];
              do
              {
                v131 = *v130++;
                v86[v131] = 1.0;
                --v129;
              }
              while (v129);
            }
          }
          else
          {
            if (v110)
              v117 = 1;
            else
              v117 = v109 == 0;
            if (v117)
            {
              v332 = *(_QWORD *)(v303 + 96);
              v118 = *(_OWORD *)(v303 + 64);
              v331 = *(_OWORD *)(v303 + 80);
              v119 = *(_OWORD *)(v303 + 16);
              v326 = *(_OWORD *)v303;
              v327 = v119;
              v120 = *(_OWORD *)(v303 + 32);
              HIDWORD(v329) = HIDWORD(*(_OWORD *)(v303 + 48));
              v330 = v118;
              v328 = v120;
              HIDWORD(v332) = 0;
              *(_QWORD *)&v329 = 0x3FF0000000000000;
              DWORD2(v329) = 2;
              v121 = malloc_type_malloc(8uLL, 0x100004052888210uLL);
              *(_QWORD *)&v330 = v121;
              v122 = (double *)malloc_type_malloc(0x10uLL, 0x100004000313F17uLL);
              *((_QWORD *)&v330 + 1) = v122;
              v313 = v122;
              v315 = v121;
              *v121 = 0xFFFFFFFF00000001;
              *v122 = v83;
              v122[1] = v84;
              v123 = svm_train(&v333, &v326);
              v125 = v123;
              if (v94 >= v95)
              {
                if (v123)
                  goto LABEL_100;
              }
              else
              {
                v126 = v95 - (uint64_t)v94;
                v127 = &v308[v94];
                do
                {
                  svm_predict_values((svm_node *)v125, (Kernel *)v68[*v127], &v86[*v127], v124);
                  v128 = *v127++;
                  v86[v128] = v86[v128] * (double)**(int **)(v125 + 160);
                  --v126;
                }
                while (v126);
LABEL_100:
                svm_free_model_content(v125);
                free((void *)v125);
              }
              free(v315);
              free(v313);
              goto LABEL_102;
            }
            if (v94 < v95)
            {
              v132 = v95 - (uint64_t)v94;
              v133 = &v308[v94];
              do
              {
                v134 = *v133++;
                v86[v134] = -1.0;
                --v132;
              }
              while (v132);
            }
          }
        }
        else if (v94 < v95)
        {
          v113 = v95 - (uint64_t)v94;
          v114 = &v308[v94];
          do
          {
            v115 = *v114++;
            v86[v115] = 0.0;
            --v113;
          }
          while (v113);
        }
LABEL_102:
        free(v97);
        free(v99);
      }
      while (v92 != 5);
      v135 = 0.0;
      v136 = 0.0;
      v137 = 0.0;
      if ((int)v82 >= 1)
      {
        v138 = v70;
        v139 = v82;
        do
        {
          v140 = *v138++;
          if (v140 <= 0.0)
            v137 = v137 + 1.0;
          else
            v136 = v136 + 1.0;
          --v139;
        }
        while (v139);
      }
      v141 = (double *)malloc_type_malloc(v311, 0x100004000313F17uLL);
      v307[v305] = 0.0;
      v142 = log((v137 + 1.0) / (v136 + 1.0));
      v306[v305] = v142;
      if ((int)v82 < 1)
      {
        v152 = v142;
      }
      else
      {
        v143 = (v136 + 1.0) / (v136 + 2.0);
        v135 = 0.0;
        v144 = v70;
        v145 = v141;
        v146 = v86;
        v147 = v82;
        v148 = 1.0 / (v137 + 2.0);
        do
        {
          v149 = *v144++;
          if (v149 <= 0.0)
            v150 = v148;
          else
            v150 = v143;
          *v145++ = v150;
          v151 = *v146++;
          v152 = v306[v305];
          v153 = v152 + v151 * v307[v305];
          v154 = -v153;
          if (v153 >= 0.0)
          {
            v155 = v150;
          }
          else
          {
            v154 = v153;
            v155 = v150 + v60;
          }
          v156 = exp(v154);
          v135 = v135 + log(v156 + 1.0) + v155 * v153;
          --v147;
        }
        while (v147);
      }
      v157 = 0;
      v57 = v307;
      v76 = v305;
      v158 = 1.0;
      v159 = v152;
      while (1)
      {
        v316 = v135;
        v318 = v159;
        if ((int)v82 < 1)
        {
          v166 = 0.0;
          v168 = 1.0e-12;
          v167 = 1.0e-12;
          v165 = 0.0;
          v161 = 0.0;
        }
        else
        {
          v160 = v57[v76];
          v161 = 0.0;
          v162 = v86;
          v163 = v141;
          v164 = v82;
          v165 = 0.0;
          v166 = 0.0;
          v167 = 1.0e-12;
          v168 = 1.0e-12;
          do
          {
            v169 = *v162;
            v170 = v159 + *v162 * v160;
            if (v170 >= 0.0)
            {
              v174 = exp(-v170);
              v159 = v318;
              v172 = v174 / (v174 + v158);
              v173 = v158 / (v174 + v158);
            }
            else
            {
              v171 = exp(v170);
              v159 = v318;
              v172 = v158 / (v171 + v158);
              v173 = v171 / (v171 + v158);
            }
            v175 = v172 * v173;
            v167 = v167 + v169 * v169 * v175;
            v168 = v168 + v175;
            v176 = *v163++;
            v166 = v166 + v169 * v175;
            v165 = v165 + v169 * (v176 - v172);
            v161 = v161 + v176 - v172;
            ++v162;
            --v164;
          }
          while (v164);
        }
        v57 = v307;
        v76 = v305;
        if (fabs(v165) < 0.00001 && fabs(v161) < 0.00001)
          break;
        v177 = v167 * v168 - v166 * v166;
        v312 = -(v167 * v161 + -v166 * v165) / v177;
        v314 = -(v168 * v165 - v166 * v161) / v177;
        v309 = v307[v305];
        v310 = v161 * v312 + v165 * v314;
        v178 = 1.0;
        while (1)
        {
          v179 = v309 + v178 * v314;
          v180 = v159 + v178 * v312;
          v181 = 0.0;
          if ((int)v82 >= 1)
          {
            v182 = v86;
            v183 = v141;
            v184 = v82;
            do
            {
              v185 = *v182++;
              v186 = v185;
              v187 = *v183++;
              v188 = v187;
              v189 = v180 + v186 * v179;
              v190 = -v189;
              v191 = v187 + -1.0;
              if (v189 >= 0.0)
              {
                v192 = v188;
              }
              else
              {
                v190 = v189;
                v192 = v191;
              }
              v193 = exp(v190);
              v181 = v181 + log(v193 + 1.0) + v192 * v189;
              --v184;
            }
            while (v184);
          }
          if (v181 < v316 + v178 * 0.0001 * v310)
            break;
          v178 = v178 * 0.5;
          v159 = v318;
          if (v178 < 1.0e-10)
          {
            v57 = v307;
            v76 = v305;
            v158 = 1.0;
            v135 = v316;
            goto LABEL_142;
          }
        }
        v57 = v307;
        v76 = v305;
        v307[v305] = v179;
        v306[v305] = v180;
        v159 = v180;
        v135 = v181;
        v158 = 1.0;
LABEL_142:
        if (v178 < 1.0e-10)
        {
          info("Line search fails in two-class probability estimates\n");
          break;
        }
        if (++v157 == 100)
        {
          info("Reaching maximal iterations in two-class probability estimates\n");
          break;
        }
      }
      free(v141);
      free(v86);
      free(v308);
      v36 = v290;
      v58 = v291;
      v64 = v303;
      v60 = -1.0;
LABEL_147:
      v59 = v297;
      v194 = (double *)svm_train_one(&v319, v64, v58[v297], v58[v302]);
      v195 = (double **)&v296[2 * v76];
      *v195 = v194;
      v195[1] = v196;
      if ((int)v304 >= 1)
      {
        v197 = &v295[v299];
        v198 = v194;
        v199 = v304;
        do
        {
          if (!*v197 && *v198 != 0.0)
            *v197 = 1;
          ++v198;
          ++v197;
          --v199;
        }
        while (v199);
      }
      if ((int)v301 >= 1)
      {
        v200 = v298;
        v201 = &v194[(int)v304];
        v202 = &v295[v300];
        do
        {
          if (!*v202 && *v201 != 0.0)
            *v202 = 1;
          ++v201;
          ++v202;
          --v200;
        }
        while (v200);
      }
      free(v68);
      free(v70);
      v305 = v76 + 1;
      v63 = v302 + 1;
      v33 = v294;
    }
    while (v302 + 1 != v294);
    v34 = v286;
    v5 = v287;
    v55 = v296;
    v62 = v288;
    v61 = v289;
LABEL_161:
    ++v61;
    v59 = v62;
  }
  while (v62 != v33);
LABEL_162:
  *((_DWORD *)v5 + 26) = v33;
  v203 = malloc_type_malloc(4 * v34, 0x100004052888210uLL);
  *((_QWORD *)v5 + 20) = v203;
  if ((int)v33 >= 1)
  {
    v204 = (int *)v324;
    v205 = v33;
    do
    {
      v206 = *v204++;
      *v203++ = v206;
      --v205;
    }
    while (v205);
  }
  v207 = malloc_type_malloc(v279, 0x100004000313F17uLL);
  *((_QWORD *)v5 + 16) = v207;
  if (v285 > 1)
  {
    v208 = v281;
    v209 = v55 + 1;
    do
    {
      v210 = *v209;
      v209 += 2;
      *v207++ = v210;
      --v208;
    }
    while (v208);
  }
  if (*(_DWORD *)(v303 + 100))
  {
    *((_QWORD *)v5 + 17) = malloc_type_malloc(v279, 0x100004000313F17uLL);
    v211 = malloc_type_malloc(v279, 0x100004000313F17uLL);
    *((_QWORD *)v5 + 18) = v211;
    if (v285 > 1)
    {
      v212 = (_QWORD *)*((_QWORD *)v5 + 17);
      v213 = v281;
      v214 = v57;
      v215 = v306;
      do
      {
        v216 = *(_QWORD *)v214++;
        *v212++ = v216;
        v217 = *(_QWORD *)v215++;
        *v211++ = v217;
        --v213;
      }
      while (v213);
    }
  }
  else
  {
    *((_QWORD *)v5 + 17) = 0;
    *((_QWORD *)v5 + 18) = 0;
  }
  v218 = (int *)malloc_type_malloc(4 * v34, 0x100004052888210uLL);
  v219 = malloc_type_malloc(4 * v34, 0x100004052888210uLL);
  *((_QWORD *)v5 + 21) = v219;
  if ((int)v33 < 1)
  {
    v221 = 0;
  }
  else
  {
    v220 = 0;
    v221 = 0;
    v222 = v322;
    v223 = v323;
    do
    {
      v224 = v222->u32[v220];
      if ((int)v224 < 1)
      {
        v225 = 0;
      }
      else
      {
        v225 = 0;
        v226 = &v295[v223[v220]];
        do
        {
          v227 = *v226++;
          v221 += v227;
          v225 += v227;
          --v224;
        }
        while (v224);
      }
      v219[v220] = v225;
      v218[v220++] = v225;
    }
    while (v220 != v33);
  }
  info("Total nSV = %d\n", v221);
  *((_DWORD *)v5 + 27) = v221;
  v228 = 8 * v221;
  *((_QWORD *)v5 + 14) = malloc_type_malloc(v228, 0x2004093837F09uLL);
  v229 = malloc_type_malloc(4 * v221, 0x100004052888210uLL);
  v230 = (unsigned __int8 *)v295;
  *((_QWORD *)v5 + 19) = v229;
  if ((int)v283 >= 1)
  {
    v231 = 0;
    v232 = size;
    v233 = v284;
    do
    {
      if (*v230++)
      {
        *(_QWORD *)(*((_QWORD *)v5 + 14) + 8 * v231) = *v36;
        *(_DWORD *)(*((_QWORD *)v5 + 19) + 4 * v231++) = *v233 + 1;
      }
      ++v233;
      ++v36;
      --v232;
    }
    while (v232);
  }
  v235 = malloc_type_malloc(4 * v34, 0x100004052888210uLL);
  v236 = (double *)v235;
  *v235 = 0;
  if ((int)v33 <= 1)
  {
    *((_QWORD *)v5 + 15) = malloc_type_malloc(8 * (int)v280, 0x80040B8603338uLL);
    v243 = v5 + 120;
  }
  else
  {
    v237 = 0;
    v238 = v33 - 1;
    v239 = v235 + 1;
    v240 = v218;
    do
    {
      v241 = *v240++;
      v237 += v241;
      *v239++ = v237;
      --v238;
    }
    while (v238);
    v242 = 0;
    *((_QWORD *)v5 + 15) = malloc_type_malloc(8 * (int)v280, 0x80040B8603338uLL);
    v243 = v5 + 120;
    do
    {
      *(_QWORD *)(*v243 + v242) = malloc_type_malloc(v228, 0x100004000313F17uLL);
      v242 += 8;
    }
    while (8 * v280 != v242);
    v57 = v307;
  }
  v245 = v322;
  v244 = v323;
  if ((int)v33 >= 1)
  {
    v246 = 0;
    LODWORD(v247) = 0;
    v248 = 1;
    do
    {
      v249 = v246 + 1;
      if (v246 + 1 < v34)
      {
        v250 = v245->u32[v246];
        v251 = *((_DWORD *)v236 + v246);
        v247 = (int)v247;
        v252 = &v295[v244[v246]];
        v253 = v248;
        do
        {
          v254 = v244[v253];
          v255 = v245->u32[v253];
          if ((int)v250 >= 1)
          {
            v256 = 0;
            v257 = v251;
            do
            {
              if (v252[v256])
                *(_QWORD *)(*(_QWORD *)(*v243 + 8 * (v253 - 1)) + 8 * v257++) = *(_QWORD *)(v55[2 * v247] + 8 * v256);
              ++v256;
            }
            while (v250 != v256);
          }
          if ((int)v255 >= 1)
          {
            v258 = *((_DWORD *)v236 + v253);
            v259 = &v295[v254];
            v260 = 8 * (int)v250;
            do
            {
              if (*v259++)
                *(_QWORD *)(*(_QWORD *)(*v243 + 8 * v246) + 8 * v258++) = *(_QWORD *)(v55[2 * v247] + v260);
              v260 += 8;
              --v255;
            }
            while (v255);
          }
          ++v247;
          ++v253;
        }
        while (v253 != v33);
      }
      ++v248;
      ++v246;
    }
    while (v249 != v33);
  }
  free(v324);
  free(v57);
  free(v306);
  free(v245);
  free(v284);
  free(v244);
  free(v290);
  free(v291);
  free(v295);
  if (v285 > 1)
  {
    v262 = v281;
    v263 = (void **)v55;
    do
    {
      v264 = *v263;
      v263 += 2;
      free(v264);
      --v262;
    }
    while (v262);
  }
  free(v55);
  free(v218);
LABEL_232:
  free(v236);
  return v5;
}

void svm_cross_validation(int *a1, _DWORD *a2, int a3, double *a4)
{
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  BOOL v12;
  uint64_t j;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int *v19;
  _DWORD *v20;
  _DWORD *v21;
  int *v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  int v41;
  int *v42;
  uint64_t v43;
  int v44;
  int v45;
  _DWORD *v46;
  uint64_t v47;
  int *v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  _DWORD *v64;
  int *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  double *v86;
  _QWORD *v87;
  int v88;
  int *v89;
  double v90;
  uint64_t v91;
  int v92;
  int *v93;
  double v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  _DWORD *v100;
  void *v101;
  double *v102;
  void *v103;
  uint64_t i;
  uint64_t v105;
  void *v106[3];
  void *v107;
  void *v108;
  unsigned int v109;

  v8 = *a1;
  v9 = (int *)malloc_type_malloc(4 * (int)v8, 0x100004052888210uLL);
  if ((int)v8 < a3)
  {
    fwrite("WARNING: # folds > # data. Will use # folds = # data instead (i.e., leave-one-out cross validation)\n", 0x64uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    a3 = v8;
  }
  v10 = (a3 + 1);
  v11 = (int *)malloc_type_malloc(4 * (int)v10, 0x100004052888210uLL);
  v12 = a3 >= (int)v8 || *a2 >= 2u;
  v100 = a2;
  v96 = v8;
  if (!v12)
  {
    v102 = a4;
    v109 = 0;
    v106[0] = 0;
    v107 = 0;
    v108 = 0;
    svm_group_classes(a1, (int *)&v109, &v108, v106, (int32x2_t **)&v107, (uint64_t)v9);
    v98 = (int *)malloc_type_malloc(4 * a3, 0x100004052888210uLL);
    v20 = malloc_type_malloc(4 * (int)v8, 0x100004052888210uLL);
    v21 = v20;
    if ((int)v8 >= 1)
    {
      v22 = v9;
      v23 = v20;
      v24 = v8;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    v26 = v109;
    if ((int)v109 >= 1)
    {
      v27 = 0;
      v28 = v107;
      v29 = v106[0];
      for (i = v109; i != v27; v26 = i)
      {
        if ((int)v28[v27] >= 1)
        {
          v30 = 0;
          v31 = 0;
          do
          {
            v32 = rand();
            v33 = v31 + v29[v27];
            v34 = v33 + v32 % (v30 + v28[v27]);
            v35 = v21[v34];
            v21[v34] = v21[v33];
            v21[v33] = v35;
            ++v31;
            --v30;
          }
          while (v31 < v28[v27]);
        }
        ++v27;
      }
    }
    if (a3 <= 0)
    {
      *v11 = 0;
      v38 = (a3 + 1);
      v39 = v98;
    }
    else
    {
      v36 = 0;
      v37 = (int *)v107;
      v38 = (a3 + 1);
      v39 = v98;
      do
      {
        v98[v36] = 0;
        v40 = v36 + 1;
        if ((int)v26 >= 1)
        {
          v41 = 0;
          v42 = v37;
          v43 = v26;
          do
          {
            v44 = *v42++;
            v41 += v44 * (int)v40 / a3 - v44 * (int)v36 / a3;
            v98[v36] = v41;
            --v43;
          }
          while (v43);
        }
        ++v36;
      }
      while (v40 != a3);
      v45 = 0;
      *v11 = 0;
      v46 = v11 + 1;
      v47 = (a3 + 1) - 1;
      v48 = v98;
      do
      {
        v49 = *v48++;
        v45 += v49;
        *v46++ = v45;
        --v47;
      }
      while (v47);
    }
    a4 = v102;
    v17 = v96;
    if ((int)v26 >= 1)
    {
      v50 = 0;
      v51 = v106[0];
      v52 = v107;
      do
      {
        if (a3 >= 1)
        {
          v53 = 0;
          do
          {
            v54 = v52[v50];
            v55 = v54 * (int)v53 / a3;
            v56 = v53 + 1;
            v57 = v54 * ((int)v53 + 1) / a3;
            if (v55 < v57)
            {
              v58 = v51[v50];
              v59 = v55 + v58;
              v60 = v57 + v58;
              v61 = v11[v53];
              do
              {
                v9[v61] = v21[v59];
                v61 = v11[v53] + 1;
                v11[v53] = v61;
                ++v59;
              }
              while (v59 < v60);
            }
            ++v53;
          }
          while (v56 != a3);
        }
        ++v50;
      }
      while (v50 != v26);
    }
    *v11 = 0;
    if (a3 >= 1)
    {
      v62 = 0;
      v63 = v38 - 1;
      v64 = v11 + 1;
      v65 = v39;
      do
      {
        v66 = *v65++;
        v62 += v66;
        *v64++ = v62;
        --v63;
      }
      while (v63);
    }
    free(v106[0]);
    free(v108);
    free(v107);
    free(v21);
    free(v39);
    goto LABEL_49;
  }
  if ((int)v8 >= 1)
  {
    for (j = 0; j != v8; ++j)
      v9[j] = j;
    v14 = 0;
    do
    {
      v15 = v14 + rand() % (int)v8;
      v16 = v9[v14];
      v9[v14] = v9[v15];
      v9[v15] = v16;
      ++v14;
      --v8;
    }
    while (v8);
  }
  v17 = v96;
  if ((a3 & 0x80000000) == 0)
  {
    v18 = 0;
    v19 = v11;
    do
    {
      *v19++ = v18 / a3;
      v18 += v96;
      --v10;
    }
    while (v10);
LABEL_49:
    if (a3 >= 1)
    {
      v67 = 0;
      v97 = v17;
      v99 = a3;
      do
      {
        v68 = v11[v67];
        v69 = v67 + 1;
        v70 = v11[v69];
        LODWORD(v106[0]) = v68 - v70 + v17;
        v71 = (char *)malloc_type_malloc(8 * SLODWORD(v106[0]), 0x2004093837F09uLL);
        v106[2] = v71;
        v72 = (char *)malloc_type_malloc(8 * ((int)v68 - (int)v70 + v17), 0x100004000313F17uLL);
        v106[1] = v72;
        v105 = v69;
        if ((int)v68 < 1)
        {
          v78 = 0;
        }
        else
        {
          v73 = v9;
          v74 = v71;
          v75 = v72;
          v76 = v68;
          do
          {
            v77 = *v73++;
            *v74++ = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * v77);
            *v75++ = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v77);
            --v76;
          }
          while (v76);
          v78 = v68;
        }
        if ((int)v70 < v17)
        {
          v79 = v97 - v70;
          v80 = &v9[v70];
          v81 = &v72[8 * v78];
          v82 = &v71[8 * v78];
          do
          {
            v83 = *v80++;
            *(_QWORD *)v82 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * v83);
            v82 += 8;
            *(_QWORD *)v81 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v83);
            v81 += 8;
            --v79;
          }
          while (v79);
        }
        v101 = v72;
        v103 = v71;
        v84 = svm_train(v106, v100);
        v85 = (void *)v84;
        if (v100[25] && *v100 <= 1u)
        {
          v86 = a4;
          v87 = malloc_type_malloc(8 * *(int *)(v84 + 104), 0x100004000313F17uLL);
          if ((int)v68 < (int)v70)
          {
            v88 = v70 - v68;
            v89 = &v9[(int)v68];
            do
            {
              v90 = svm_predict_probability((uint64_t)v85, *(Kernel **)(*((_QWORD *)a1 + 2) + 8 * *v89), v87);
              v91 = *v89++;
              v86[v91] = v90;
              --v88;
            }
            while (v88);
          }
          free(v87);
          a4 = v86;
          v17 = v96;
        }
        else if ((int)v68 < (int)v70)
        {
          v92 = v70 - v68;
          v93 = &v9[(int)v68];
          do
          {
            v94 = svm_predict((uint64_t)v85, *(Kernel **)(*((_QWORD *)a1 + 2) + 8 * *v93));
            v95 = *v93++;
            a4[v95] = v94;
            --v92;
          }
          while (v92);
        }
        if (v85)
        {
          svm_free_model_content((uint64_t)v85);
          free(v85);
        }
        free(v103);
        free(v101);
        v67 = v105;
      }
      while (v105 != v99);
    }
  }
  free(v11);
  free(v9);
}

_QWORD *svm_train_one(int *a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  const svm_parameter *v12;
  char *v13;
  double *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  double v19;
  char v20;
  double v21;
  double *v22;
  uint64_t v23;
  double v24;
  char *v25;
  double *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double *v31;
  uint64_t v32;
  const svm_parameter *v33;
  double v34;
  double *v35;
  double *v36;
  double *v37;
  _BYTE *v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  int v43;
  uint64_t i;
  int v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  const svm_parameter *v49;
  double *v50;
  char *v51;
  uint64_t v52;
  double v53;
  char v54;
  double v55;
  unsigned __int8 *v56;
  double *v57;
  uint64_t v58;
  double v59;
  int v60;
  int v61;
  double v62;
  double v63;
  char *v64;
  char *v65;
  double v66;
  int v67;
  double v68;
  uint64_t v69;
  const svm_parameter *v70;
  double *v71;
  int var0_low;
  float64x2_t v73;
  char *v74;
  unsigned int v75;
  size_t v76;
  void *v77;
  const svm_parameter *v78;
  char *v79;
  int v80;
  int v81;
  Cache *v82;
  uint64_t v83;
  double (*v84)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const svm_parameter *v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  double v106;
  double v107;
  double v109;
  float64x2_t v110;
  double v111;
  double v112;
  double v113;
  void (**v114)(Solver *__hidden);
  double (*v115)(_QWORD *, uint64_t, uint64_t);
  uint64_t v116;
  Cache *v117;
  uint64_t v118;
  _QWORD v119[15];
  float64x2_t *v120;

  v8 = malloc_type_malloc(8 * *a1, 0x100004000313F17uLL);
  switch(*(_DWORD *)a2)
  {
    case 0:
      v9 = *a1;
      v10 = *a1;
      v11 = (_QWORD *)operator new[]();
      v12 = (const svm_parameter *)operator new[]();
      v13 = (char *)v12;
      if (v9 >= 1)
      {
        v14 = (double *)*((_QWORD *)a1 + 1);
        v15 = v8;
        v16 = v11;
        v17 = (char *)v12;
        v18 = v10;
        do
        {
          *v15++ = 0;
          *v16++ = 0xBFF0000000000000;
          v19 = *v14++;
          if (v19 > 0.0)
            v20 = 1;
          else
            v20 = -1;
          *v17++ = v20;
          --v18;
        }
        while (v18);
      }
      v119[0] = &off_1E3D4C6D8;
      SVC_Q::SVC_Q((Kernel *)&v114, a1, a2, v12);
      Solver::Solve((uint64_t)v119, v10, (uint64_t)&v114, v11, v13, v8, (uint64_t)&v110, *(_DWORD *)(a2 + 96), a3, a4, *(double *)(a2 + 40));
      SVC_Q::~SVC_Q((SVC_Q *)&v114);
      v21 = 0.0;
      if ((int)v10 >= 1)
      {
        v22 = (double *)v8;
        v23 = v10;
        do
        {
          v24 = *v22++;
          v21 = v21 + v24;
          --v23;
        }
        while (v23);
      }
      if (a3 == a4)
        info("nu = %f\n", v21 / ((double)*a1 * a3));
      if ((int)v10 >= 1)
      {
        v25 = v13;
        v26 = (double *)v8;
        do
        {
          v27 = *v25++;
          *v26 = *v26 * (double)v27;
          ++v26;
          --v10;
        }
        while (v10);
      }
      goto LABEL_74;
    case 1:
      v45 = *a1;
      v46 = *a1;
      v47 = *(double *)(a2 + 80);
      v48 = operator new[]();
      v49 = (const svm_parameter *)v48;
      if (v45 >= 1)
      {
        v50 = (double *)*((_QWORD *)a1 + 1);
        v51 = (char *)v48;
        v52 = v46;
        do
        {
          v53 = *v50++;
          if (v53 > 0.0)
            v54 = 1;
          else
            v54 = -1;
          *v51++ = v54;
          --v52;
        }
        while (v52);
        v55 = v47 * (double)(int)v46 * 0.5;
        v56 = (unsigned __int8 *)v48;
        v57 = (double *)v8;
        v58 = v46;
        v59 = v55;
        do
        {
          v61 = *v56++;
          v60 = v61;
          if (v55 <= 1.0)
            v62 = v55;
          else
            v62 = 1.0;
          if (v59 <= 1.0)
            v63 = v59;
          else
            v63 = 1.0;
          if (v60 == 1)
          {
            v62 = v63;
            v59 = v59 - v63;
          }
          else
          {
            v55 = v55 - v62;
          }
          *v57++ = v62;
          --v58;
        }
        while (v58);
      }
      v64 = (char *)operator new[]();
      v65 = v64;
      if ((int)v46 >= 1)
        bzero(v64, 8 * v46);
      v119[0] = &off_1E3D4C710;
      SVC_Q::SVC_Q((Kernel *)&v114, a1, a2, v49);
      v66 = *(double *)(a2 + 40);
      v67 = *(_DWORD *)(a2 + 96);
      v120 = &v110;
      Solver::Solve((uint64_t)v119, v46, (uint64_t)&v114, v65, v49, v8, (uint64_t)&v110, v67, 1.0, 1.0, v66);
      SVC_Q::~SVC_Q((SVC_Q *)&v114);
      v109 = v113;
      v68 = 1.0 / v113;
      info("C = %f\n", 1.0 / v113);
      if ((int)v46 >= 1)
      {
        v69 = v45;
        v70 = v49;
        v71 = (double *)v8;
        do
        {
          var0_low = SLOBYTE(v70->var0);
          v70 = (const svm_parameter *)((char *)v70 + 1);
          *v71 = *v71 * ((double)var0_low / v109);
          ++v71;
          --v69;
        }
        while (v69);
      }
      v73.f64[0] = v109 * v109;
      v73.f64[1] = v109;
      v110 = vdivq_f64(v110, v73);
      v111 = v68;
      v112 = v68;
      MEMORY[0x1A1AD6248](v49, 0x1000C8077774924);
      v74 = v65;
      v75 = 3227415;
      goto LABEL_76;
    case 2:
      v76 = *a1;
      v77 = (void *)operator new[]();
      v79 = (char *)operator new[]();
      v80 = *a1;
      v81 = (int)(*(double *)(a2 + 80) * (double)*a1);
      if (v81 >= 1)
        memset_pattern16(v8, &unk_19CB399F0, 8 * (int)(*(double *)(a2 + 80) * (double)*a1));
      if (v80 > v81)
        *(double *)&v8[v81] = -((double)v81 - *(double *)(a2 + 80) * (double)v80);
      if (v81 + 1 < (int)v76)
        bzero(&v8[v81 + 1], 8 * (v76 - v81 - 2) + 8);
      if ((int)v76 >= 1)
      {
        bzero(v77, 8 * v76);
        memset(v79, 1, v76);
      }
      v119[0] = &off_1E3D4C6D8;
      Kernel::Kernel((Kernel *)&v114, v80, *((svm_node *const **)a1 + 2), v78, *(double *)(a2 + 4), *(__n128 *)(a2 + 16));
      v114 = (void (**)(Solver *__hidden))&off_1E3D4C5D0;
      v82 = (Cache *)operator new();
      Cache::Cache(v82, *a1, vcvtd_n_s64_f64(*(double *)(a2 + 32), 0x14uLL));
      v117 = v82;
      v118 = operator new[]();
      if (*a1 >= 1)
      {
        v83 = 0;
        do
        {
          v84 = v115;
          v85 = (void (***)(Solver *__hidden))((char *)&v114 + (v116 >> 1));
          if ((v116 & 1) != 0)
            v84 = *(double (**)(_QWORD *, uint64_t, uint64_t))(*v85 + v115);
          v86 = v84(v85, v83, v83);
          *(double *)(v118 + 8 * v83++) = v86;
        }
        while (v83 < *a1);
      }
      Solver::Solve((uint64_t)v119, v76, (uint64_t)&v114, v77, v79, v8, (uint64_t)&v110, *(_DWORD *)(a2 + 96), 1.0, 1.0, *(double *)(a2 + 40));
      ONE_CLASS_Q::~ONE_CLASS_Q((ONE_CLASS_Q *)&v114);
      MEMORY[0x1A1AD6248](v77, 0x1000C8000313F17);
      v74 = v79;
      goto LABEL_75;
    case 3:
      v87 = *a1;
      v88 = *a1;
      v31 = (double *)operator new[]();
      v11 = (_QWORD *)operator new[]();
      v89 = operator new[]();
      v13 = (char *)v89;
      if ((int)v87 >= 1)
      {
        v91 = 0;
        v92 = *(double *)(a2 + 88);
        v93 = *((_QWORD *)a1 + 1);
        v94 = v88;
        v95 = v88;
        do
        {
          v31[v91] = 0.0;
          v96 = *(double *)(v93 + 8 * v91);
          *(double *)&v11[v91] = v92 - v96;
          *(_BYTE *)(v89 + v91) = 1;
          v31[v94] = 0.0;
          *(double *)&v11[v94] = v92 + v96;
          *(_BYTE *)(v89 + v94) = -1;
          ++v91;
          ++v94;
          --v95;
        }
        while (v95);
      }
      v114 = &off_1E3D4C6D8;
      SVR_Q::SVR_Q((uint64_t)v119, (uint64_t)a1, a2, v90);
      Solver::Solve((uint64_t)&v114, 2 * v87, (uint64_t)v119, v11, v13, v31, (uint64_t)&v110, *(_DWORD *)(a2 + 96), *(double *)(a2 + 48), *(double *)(a2 + 48), *(double *)(a2 + 40));
      SVR_Q::~SVR_Q((SVR_Q *)v119);
      if ((int)v88 < 1)
      {
        v98 = 0.0;
      }
      else
      {
        v97 = 0;
        v98 = 0.0;
        do
        {
          v99 = v31[v97];
          v100 = v31[v88 + v97];
          *(double *)&v8[v97] = v99 - v100;
          v98 = v98 + vabdd_f64(v99, v100);
          ++v97;
        }
        while (v88 != v97);
      }
      info("nu = %f\n", v98 / (*(double *)(a2 + 48) * (double)(int)v88));
      goto LABEL_73;
    case 4:
      v28 = *a1;
      v29 = *a1;
      v30 = *(double *)(a2 + 48);
      v31 = (double *)operator new[]();
      v11 = (_QWORD *)operator new[]();
      v32 = operator new[]();
      v13 = (char *)v32;
      if ((int)v28 >= 1)
      {
        v34 = v30 * *(double *)(a2 + 80) * (double)(int)v29 * 0.5;
        v35 = (double *)*((_QWORD *)a1 + 1);
        v36 = v31;
        v37 = (double *)v11;
        v38 = (_BYTE *)v32;
        v39 = v29;
        do
        {
          if (v34 >= v30)
            v40 = v30;
          else
            v40 = v34;
          v36[v29] = v40;
          *v36++ = v40;
          v41 = *v35++;
          v34 = v34 - v40;
          v37[v29] = v41;
          v38[v29] = -1;
          *v37++ = -v41;
          *v38++ = 1;
          --v39;
        }
        while (v39);
      }
      v119[0] = &off_1E3D4C710;
      SVR_Q::SVR_Q((uint64_t)&v114, (uint64_t)a1, a2, v33);
      v42 = *(double *)(a2 + 40);
      v43 = *(_DWORD *)(a2 + 96);
      v120 = &v110;
      Solver::Solve((uint64_t)v119, 2 * v28, (uint64_t)&v114, v11, v13, v31, (uint64_t)&v110, v43, v30, v30, v42);
      SVR_Q::~SVR_Q((SVR_Q *)&v114);
      info("epsilon = %f\n", -v113);
      if ((int)v29 >= 1)
      {
        for (i = 0; i != v29; ++i)
          *(double *)&v8[i] = v31[i] - v31[v29 + i];
      }
LABEL_73:
      MEMORY[0x1A1AD6248](v31, 0x1000C8000313F17);
LABEL_74:
      MEMORY[0x1A1AD6248](v11, 0x1000C8000313F17);
      v74 = v13;
LABEL_75:
      v75 = 2004306212;
LABEL_76:
      MEMORY[0x1A1AD6248](v74, v75 | 0x1000C8000000000);
      break;
    default:
      break;
  }
  info("obj = %f, rho = %f\n", v110.f64[0], v110.f64[1]);
  v101 = *a1;
  if ((int)v101 >= 1)
  {
    v102 = 0;
    v103 = 0;
    v104 = 0;
    v105 = 8 * v101;
    while (1)
    {
      v106 = *(double *)&v8[v102 / 8];
      if (v106 != 0.0)
      {
        v107 = fabs(v106);
        ++v104;
        if (*(double *)(*((_QWORD *)a1 + 1) + v102) > 0.0)
        {
          if (v107 < v111)
            goto LABEL_85;
LABEL_84:
          ++v103;
          goto LABEL_85;
        }
        if (v107 >= v112)
          goto LABEL_84;
      }
LABEL_85:
      v102 += 8;
      if (v105 == v102)
        goto LABEL_88;
    }
  }
  v104 = 0;
  v103 = 0;
LABEL_88:
  info("nSV = %d, nBSV = %d\n", v104, v103);
  return v8;
}

void sub_19C7CD180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  SVR_Q::~SVR_Q((SVR_Q *)&a35);
  _Unwind_Resume(a1);
}

void svm_group_classes(int *a1, int *a2, _QWORD *a3, _QWORD *a4, int32x2_t **a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int32x2_t *v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  int32x2_t *v26;
  __int32 v27;
  uint64_t i;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  int32x2_t *v32;
  __int32 v33;
  _QWORD *v34;
  _QWORD *v35;
  int32x2_t **v36;

  v10 = *a1;
  v11 = *a1;
  v12 = malloc_type_malloc(0x40uLL, 0x100004052888210uLL);
  v13 = (int32x2_t *)malloc_type_malloc(0x40uLL, 0x100004052888210uLL);
  v14 = (int *)malloc_type_malloc(4 * v10, 0x100004052888210uLL);
  if ((int)v10 < 1)
  {
    v16 = 0;
  }
  else
  {
    v34 = a3;
    v35 = a4;
    v36 = a5;
    v15 = 0;
    v16 = 0;
    v17 = 16;
    do
    {
      v18 = (int)*(double *)(*((_QWORD *)a1 + 1) + 8 * v15);
      if (v16 < 1)
      {
        LODWORD(v19) = 0;
      }
      else
      {
        v19 = 0;
        while (v12[v19] != v18)
        {
          if (v16 == ++v19)
          {
            v14[v15] = v16;
            goto LABEL_11;
          }
        }
        ++v13->i32[v19];
      }
      v14[v15] = v19;
      if ((_DWORD)v19 == v16)
      {
LABEL_11:
        if (v16 == v17)
        {
          v17 = 2 * v16;
          v12 = malloc_type_realloc(v12, 8 * v16, 0x100004052888210uLL);
          v13 = (int32x2_t *)malloc_type_realloc(v13, 8 * v16, 0x100004052888210uLL);
        }
        v12[v16] = v18;
        v13->i32[v16++] = 1;
      }
      ++v15;
    }
    while (v15 != v11);
    if (v16 == 2)
    {
      if (*v12 == -1 && v12[1] == 1)
      {
        *(_QWORD *)v12 = 0xFFFFFFFF00000001;
        *v13 = vrev64_s32(*v13);
        v20 = v14;
        v21 = v11;
        do
        {
          *v20 = *v20 == 0;
          ++v20;
          --v21;
        }
        while (v21);
      }
      v16 = 2;
    }
    a4 = v35;
    a5 = v36;
    a3 = v34;
  }
  v22 = malloc_type_malloc(4 * v16, 0x100004052888210uLL);
  *v22 = 0;
  if (v16 > 1)
  {
    v23 = 0;
    v24 = v16 - 1;
    v25 = v22 + 1;
    v26 = v13;
    do
    {
      v27 = v26->i32[0];
      v26 = (int32x2_t *)((char *)v26 + 4);
      v23 += v27;
      *v25++ = v23;
      --v24;
    }
    while (v24);
  }
  if ((int)v11 >= 1)
  {
    for (i = 0; i != v11; ++i)
      *(_DWORD *)(a6 + 4 * (int)v22[v14[i]]++) = i;
  }
  *v22 = 0;
  if (v16 > 1)
  {
    v29 = 0;
    v30 = v16 - 1;
    v31 = v22 + 1;
    v32 = v13;
    do
    {
      v33 = v32->i32[0];
      v32 = (int32x2_t *)((char *)v32 + 4);
      v29 += v33;
      *v31++ = v29;
      --v30;
    }
    while (v30);
  }
  *a2 = v16;
  *a3 = v12;
  *a4 = v22;
  *a5 = v13;
  free(v14);
}

void svm_predict_values(svm_node *a1, Kernel *this, double *a3, const svm_parameter *a4)
{
  uint64_t v7;
  const svm_node **v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  const svm_node *v13;
  uint64_t var1_high;
  uint64_t var1_low;
  uint64_t v16;
  long double *v17;
  const svm_parameter *v18;
  long double *v19;
  const svm_node **v20;
  long double *v21;
  const svm_node *v22;
  int *v23;
  int *v24;
  int v25;
  double var1;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double *v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  double *v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  int v58;
  uint64_t v59;

  if ((a1->var0 - 2) > 2)
  {
    var1_low = SLODWORD(a1[6].var1);
    var1_high = SHIDWORD(a1[6].var1);
    v16 = LODWORD(a1[6].var1);
    v17 = (long double *)malloc_type_malloc(8 * var1_high, 0x100004000313F17uLL);
    v19 = v17;
    if ((int)var1_high >= 1)
    {
      var1_high = var1_high;
      v20 = *(const svm_node ***)&a1[7].var0;
      v21 = v17;
      do
      {
        v22 = *v20++;
        *v21++ = Kernel::k_function(this, v22, a1, v18);
        --var1_high;
      }
      while (var1_high);
    }
    v23 = (int *)malloc_type_malloc(4 * var1_low, 0x100004052888210uLL);
    v24 = v23;
    *v23 = 0;
    if ((int)var1_low > 1)
    {
      v25 = 0;
      var1 = a1[10].var1;
      v27 = v16 - 1;
      v28 = v23 + 1;
      do
      {
        v29 = **(_DWORD **)&var1;
        *(_QWORD *)&var1 += 4;
        v25 += v29;
        *v28++ = v25;
        --v27;
      }
      while (v27);
    }
    v30 = malloc_type_malloc(4 * var1_low, 0x100004052888210uLL);
    v31 = v30;
    if ((int)v16 >= 1)
    {
      bzero(v30, 4 * var1_low);
      v32 = 0;
      LODWORD(v33) = 0;
      v34 = 1;
      do
      {
        v35 = v32 + 1;
        if (v32 + 1 < var1_low)
        {
          v36 = a1[10].var1;
          v37 = a1[7].var1;
          v38 = *(_QWORD *)&a1[8].var0;
          v39 = *(_QWORD *)(*(_QWORD *)&v37 + 8 * v32);
          v33 = (int)v33;
          v40 = v34;
          do
          {
            v41 = *(unsigned int *)(*(_QWORD *)&v36 + 4 * v32);
            if ((int)v41 < 1)
            {
              v45 = 0.0;
            }
            else
            {
              v42 = v24[v32];
              v43 = &v19[v42];
              v44 = (double *)(*(_QWORD *)(*(_QWORD *)&v37 + 8 * v40 - 8) + 8 * v42);
              v45 = 0.0;
              do
              {
                v46 = *v44++;
                v47 = v46;
                v48 = *v43++;
                v45 = v45 + v47 * v48;
                --v41;
              }
              while (v41);
            }
            v49 = *(unsigned int *)(*(_QWORD *)&v36 + 4 * v40);
            if ((int)v49 >= 1)
            {
              v50 = v24[v40];
              v51 = &v19[v50];
              v52 = (double *)(v39 + 8 * v50);
              do
              {
                v53 = *v52++;
                v54 = v53;
                v55 = *v51++;
                v45 = v45 + v54 * v55;
                --v49;
              }
              while (v49);
            }
            v56 = v45 - *(double *)(v38 + 8 * v33);
            a3[v33] = v56;
            if (v56 <= 0.0)
              v57 = v40;
            else
              v57 = v32;
            ++v31[v57];
            ++v33;
            ++v40;
          }
          while (v40 != var1_low);
        }
        ++v34;
        ++v32;
      }
      while (v35 != var1_low);
      if ((int)v16 >= 2)
      {
        v58 = 0;
        v59 = 1;
        do
        {
          if (v31[v59] > v31[v58])
            v58 = v59;
          ++v59;
        }
        while (var1_low != v59);
      }
    }
    free(v19);
    free(v24);
    free(v31);
  }
  else
  {
    v7 = HIDWORD(a1[6].var1);
    if ((int)v7 < 1)
    {
      v10 = 0.0;
    }
    else
    {
      v8 = *(const svm_node ***)&a1[7].var0;
      v9 = **(double ***)&a1[7].var1;
      v10 = 0.0;
      do
      {
        v11 = *v9++;
        v12 = v11;
        v13 = *v8++;
        v10 = v10 + v12 * Kernel::k_function(this, v13, a1, a4);
        --v7;
      }
      while (v7);
    }
    *a3 = v10 - **(double **)&a1[8].var0;
  }
}

void svm_free_model_content(uint64_t a1)
{
  void **v2;
  uint64_t v3;

  if (*(_DWORD *)(a1 + 176))
  {
    if (*(int *)(a1 + 108) >= 1)
    {
      v2 = *(void ***)(a1 + 112);
      if (v2)
        free(*v2);
    }
  }
  if (*(_QWORD *)(a1 + 120) && *(int *)(a1 + 104) >= 2)
  {
    v3 = 0;
    do
      free(*(void **)(*(_QWORD *)(a1 + 120) + 8 * v3++));
    while (v3 < *(int *)(a1 + 104) - 1);
  }
  free(*(void **)(a1 + 112));
  *(_QWORD *)(a1 + 112) = 0;
  free(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 120) = 0;
  free(*(void **)(a1 + 128));
  *(_QWORD *)(a1 + 128) = 0;
  free(*(void **)(a1 + 160));
  *(_QWORD *)(a1 + 160) = 0;
  free(*(void **)(a1 + 136));
  *(_QWORD *)(a1 + 136) = 0;
  free(*(void **)(a1 + 144));
  *(_QWORD *)(a1 + 144) = 0;
  free(*(void **)(a1 + 152));
  *(_QWORD *)(a1 + 152) = 0;
  free(*(void **)(a1 + 168));
  *(_QWORD *)(a1 + 168) = 0;
}

Kernel *SVC_Q::SVC_Q(Kernel *a1, int *a2, uint64_t a3, const svm_parameter *a4)
{
  _QWORD *v8;
  size_t v9;
  void *v10;
  Cache *v11;
  uint64_t v12;
  double (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;

  Kernel::Kernel(a1, *a2, *((svm_node *const **)a2 + 2), a4, *(double *)(a3 + 4), *(__n128 *)(a3 + 16));
  *v8 = &off_1E3D4C630;
  v9 = *a2;
  v10 = (void *)operator new[]();
  *((_QWORD *)a1 + 8) = v10;
  memcpy(v10, a4, v9);
  v11 = (Cache *)operator new();
  Cache::Cache(v11, *a2, vcvtd_n_s64_f64(*(double *)(a3 + 32), 0x14uLL));
  *((_QWORD *)a1 + 9) = v11;
  *((_QWORD *)a1 + 10) = operator new[]();
  if (*a2 >= 1)
  {
    v12 = 0;
    do
    {
      v13 = (double (*)(_QWORD *, uint64_t, uint64_t))*((_QWORD *)a1 + 1);
      v14 = *((_QWORD *)a1 + 2);
      v15 = (_QWORD *)((char *)a1 + (v14 >> 1));
      if ((v14 & 1) != 0)
        v13 = *(double (**)(_QWORD *, uint64_t, uint64_t))(*v15 + v13);
      *(double *)(*((_QWORD *)a1 + 10) + 8 * v12) = v13(v15, v12, v12);
      ++v12;
    }
    while (v12 < *a2);
  }
  return a1;
}

void sub_19C7CD99C(_Unwind_Exception *a1)
{
  Kernel *v1;
  uint64_t v2;

  MEMORY[0x1A1AD6260](v2, 0x10A0C408A4F435CLL);
  Kernel::~Kernel(v1);
  _Unwind_Resume(a1);
}

void SVC_Q::~SVC_Q(SVC_Q *this)
{
  uint64_t v2;
  Cache *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3D4C630;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    MEMORY[0x1A1AD6248](v2, 0x1000C8077774924);
  v3 = (Cache *)*((_QWORD *)this + 9);
  if (v3)
  {
    Cache::~Cache(v3);
    MEMORY[0x1A1AD6260]();
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
    MEMORY[0x1A1AD6248](v4, 0x1000C8000313F17);
  Kernel::~Kernel(this);
}

{
  SVC_Q::~SVC_Q(this);
  JUMPOUT(0x1A1AD6260);
}

void ONE_CLASS_Q::~ONE_CLASS_Q(ONE_CLASS_Q *this)
{
  Cache *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E3D4C5D0;
  v2 = (Cache *)*((_QWORD *)this + 8);
  if (v2)
  {
    Cache::~Cache(v2);
    MEMORY[0x1A1AD6260]();
  }
  v3 = *((_QWORD *)this + 9);
  if (v3)
    MEMORY[0x1A1AD6248](v3, 0x1000C8000313F17);
  Kernel::~Kernel(this);
}

{
  ONE_CLASS_Q::~ONE_CLASS_Q(this);
  JUMPOUT(0x1A1AD6260);
}

uint64_t SVR_Q::SVR_Q(uint64_t a1, uint64_t a2, uint64_t a3, const svm_parameter *a4)
{
  uint64_t v7;
  Cache *v8;
  uint64_t v9;
  uint64_t v10;
  double (*v11)(_QWORD *, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;

  Kernel::Kernel((Kernel *)a1, *(_DWORD *)a2, *(svm_node *const **)(a2 + 16), a4, *(double *)(a3 + 4), *(__n128 *)(a3 + 16));
  *(_QWORD *)v7 = &off_1E3D4C668;
  *(_DWORD *)(v7 + 64) = *(_DWORD *)a2;
  v8 = (Cache *)operator new();
  Cache::Cache(v8, *(_DWORD *)(a1 + 64), vcvtd_n_s64_f64(*(double *)(a3 + 32), 0x14uLL));
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 120) = operator new[]();
  *(_QWORD *)(a1 + 80) = operator new[]();
  *(_QWORD *)(a1 + 88) = operator new[]();
  if (*(int *)(a1 + 64) >= 1)
  {
    v9 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 80) + v9) = 1;
      *(_BYTE *)(*(_QWORD *)(a1 + 80) + *(int *)(a1 + 64) + v9) = -1;
      v10 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)(v10 + 4 * v9) = v9;
      *(_DWORD *)(v10 + 4 * (v9 + *(int *)(a1 + 64))) = v9;
      v11 = *(double (**)(_QWORD *, uint64_t, uint64_t))(a1 + 8);
      v12 = *(_QWORD *)(a1 + 16);
      v13 = (_QWORD *)(a1 + (v12 >> 1));
      if ((v12 & 1) != 0)
        v11 = *(double (**)(_QWORD *, uint64_t, uint64_t))(*v13 + v11);
      v14 = v11(v13, v9, v9);
      v15 = *(_QWORD *)(a1 + 120);
      *(double *)(v15 + 8 * v9) = v14;
      v16 = *(int *)(a1 + 64);
      *(double *)(v15 + 8 * (v9 + v16)) = v14;
      ++v9;
    }
    while (v9 < v16);
  }
  *(_QWORD *)(a1 + 104) = operator new[]();
  *(_QWORD *)(a1 + 112) = operator new[]();
  *(_DWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_19C7CDC90(_Unwind_Exception *a1)
{
  Kernel *v1;
  uint64_t v2;

  MEMORY[0x1A1AD6260](v2, 0x10A0C408A4F435CLL);
  Kernel::~Kernel(v1);
  _Unwind_Resume(a1);
}

void SVR_Q::~SVR_Q(SVR_Q *this)
{
  Cache *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E3D4C668;
  v2 = (Cache *)*((_QWORD *)this + 9);
  if (v2)
  {
    Cache::~Cache(v2);
    MEMORY[0x1A1AD6260]();
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
    MEMORY[0x1A1AD6248](v3, 0x1000C8077774924);
  v4 = *((_QWORD *)this + 11);
  if (v4)
    MEMORY[0x1A1AD6248](v4, 0x1000C8052888210);
  v5 = *((_QWORD *)this + 13);
  if (v5)
    MEMORY[0x1A1AD6248](v5, 0x1000C8052888210);
  v6 = *((_QWORD *)this + 14);
  if (v6)
    MEMORY[0x1A1AD6248](v6, 0x1000C8052888210);
  v7 = *((_QWORD *)this + 15);
  if (v7)
    MEMORY[0x1A1AD6248](v7, 0x1000C8000313F17);
  Kernel::~Kernel(this);
}

{
  SVR_Q::~SVR_Q(this);
  JUMPOUT(0x1A1AD6260);
}

float *SVR_Q::get_Q(SVR_Q *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int data;
  int v9;
  uint64_t v11;
  float *v12;
  double (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  float v16;
  uint64_t v17;
  float *result;
  char *v19;
  int *v20;
  float v21;
  float *v22;
  uint64_t v23;
  float *v24;
  int v25;
  float v26;
  uint64_t v27;
  float *v28;

  v28 = 0;
  v6 = *((_QWORD *)this + 11);
  v7 = *(unsigned int *)(v6 + 4 * a2);
  data = Cache::get_data(*((Cache **)this + 9), *(_DWORD *)(v6 + 4 * a2), &v28, *((unsigned int *)this + 16));
  v9 = *((_DWORD *)this + 16);
  if (data < v9 && v9 >= 1)
  {
    v11 = 0;
    v12 = v28;
    do
    {
      v13 = (double (*)(_QWORD *, uint64_t, uint64_t))*((_QWORD *)this + 1);
      v14 = *((_QWORD *)this + 2);
      v15 = (_QWORD *)((char *)this + (v14 >> 1));
      if ((v14 & 1) != 0)
        v13 = *(double (**)(_QWORD *, uint64_t, uint64_t))(*v15 + v13);
      v16 = v13(v15, v7, v11);
      v12[v11++] = v16;
    }
    while (v11 < *((int *)this + 16));
  }
  v17 = *((int *)this + 24);
  result = (float *)*((_QWORD *)this + v17 + 13);
  *((_DWORD *)this + 24) = 1 - v17;
  if (a3 >= 1)
  {
    v19 = (char *)*((_QWORD *)this + 10);
    v20 = (int *)*((_QWORD *)this + 11);
    v21 = (float)v19[a2];
    v22 = v28;
    v23 = a3;
    v24 = result;
    do
    {
      v25 = *v19++;
      v26 = v21 * (float)v25;
      v27 = *v20++;
      *v24++ = v26 * v22[v27];
      --v23;
    }
    while (v23);
  }
  return result;
}

uint64_t SVR_Q::get_QD(SVR_Q *this)
{
  return *((_QWORD *)this + 15);
}

double SVR_Q::swap_index(SVR_Q *this, int a2, int a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  double result;

  v3 = *((_QWORD *)this + 10);
  v4 = *(_BYTE *)(v3 + a2);
  *(_BYTE *)(v3 + a2) = *(_BYTE *)(v3 + a3);
  *(_BYTE *)(v3 + a3) = v4;
  v5 = *((_QWORD *)this + 11);
  v6 = *(_DWORD *)(v5 + 4 * a2);
  *(_DWORD *)(v5 + 4 * a2) = *(_DWORD *)(v5 + 4 * a3);
  *(_DWORD *)(v5 + 4 * a3) = v6;
  v7 = *((_QWORD *)this + 15);
  result = *(double *)(v7 + 8 * a2);
  *(_QWORD *)(v7 + 8 * a2) = *(_QWORD *)(v7 + 8 * a3);
  *(double *)(v7 + 8 * a3) = result;
  return result;
}

float *ONE_CLASS_Q::get_Q(Cache **this, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t data;
  float *v7;
  uint64_t v8;
  float *v9;
  Cache *v10;
  uint64_t v11;
  _QWORD *v12;
  float v13;
  float *v15;

  v3 = a3;
  v15 = 0;
  data = Cache::get_data(this[8], a2, &v15, a3);
  v7 = v15;
  if ((int)data < v3)
  {
    v8 = data;
    v9 = &v15[(int)data];
    do
    {
      v10 = this[1];
      v11 = (uint64_t)this[2];
      v12 = (Cache **)((char *)this + (v11 >> 1));
      if ((v11 & 1) != 0)
        v10 = *(Cache **)(*v12 + v10);
      v13 = ((double (*)(_QWORD *, uint64_t, uint64_t))v10)(v12, a2, v8);
      *v9++ = v13;
      v8 = (v8 + 1);
    }
    while (v3 != (_DWORD)v8);
  }
  return v7;
}

uint64_t ONE_CLASS_Q::get_QD(ONE_CLASS_Q *this)
{
  return *((_QWORD *)this + 9);
}

double ONE_CLASS_Q::swap_index(Cache **this, int a2, int a3)
{
  Cache *v6;
  uint64_t v7;
  Cache *v8;
  uint64_t v9;
  Cache *v10;
  double result;

  Cache::swap_index(this[8], a2, a3);
  v6 = this[3];
  v7 = *((_QWORD *)v6 + a2);
  *((_QWORD *)v6 + a2) = *((_QWORD *)v6 + a3);
  *((_QWORD *)v6 + a3) = v7;
  v8 = this[4];
  if (v8)
  {
    v9 = *((_QWORD *)v8 + a2);
    *((_QWORD *)v8 + a2) = *((_QWORD *)v8 + a3);
    *((_QWORD *)v8 + a3) = v9;
  }
  v10 = this[9];
  result = *((double *)v10 + a2);
  *((_QWORD *)v10 + a2) = *((_QWORD *)v10 + a3);
  *((double *)v10 + a3) = result;
  return result;
}

float *SVC_Q::get_Q(Cache **this, uint64_t a2, uint64_t a3)
{
  int v3;
  int data;
  float *v7;
  uint64_t v8;
  Cache *v9;
  uint64_t v10;
  _QWORD *v11;
  double v12;
  float v13;
  float *v15;

  v3 = a3;
  v15 = 0;
  data = Cache::get_data(this[9], a2, &v15, a3);
  v7 = v15;
  if (data < v3)
  {
    v8 = data;
    do
    {
      v9 = this[1];
      v10 = (uint64_t)this[2];
      v11 = (Cache **)((char *)this + (v10 >> 1));
      if ((v10 & 1) != 0)
        v9 = *(Cache **)(*v11 + v9);
      v12 = (double)(*((char *)this[8] + v8) * *((char *)this[8] + (int)a2));
      v13 = ((double (*)(_QWORD *, uint64_t, uint64_t))v9)(v11, a2, v8) * v12;
      v7[v8++] = v13;
    }
    while (v3 != (_DWORD)v8);
  }
  return v7;
}

uint64_t SVC_Q::get_QD(SVC_Q *this)
{
  return *((_QWORD *)this + 10);
}

double SVC_Q::swap_index(Cache **this, int a2, int a3)
{
  Cache *v6;
  uint64_t v7;
  Cache *v8;
  uint64_t v9;
  Cache *v10;
  char v11;
  Cache *v12;
  double result;

  Cache::swap_index(this[9], a2, a3);
  v6 = this[3];
  v7 = *((_QWORD *)v6 + a2);
  *((_QWORD *)v6 + a2) = *((_QWORD *)v6 + a3);
  *((_QWORD *)v6 + a3) = v7;
  v8 = this[4];
  if (v8)
  {
    v9 = *((_QWORD *)v8 + a2);
    *((_QWORD *)v8 + a2) = *((_QWORD *)v8 + a3);
    *((_QWORD *)v8 + a3) = v9;
  }
  v10 = this[8];
  v11 = *((_BYTE *)v10 + a2);
  *((_BYTE *)v10 + a2) = *((_BYTE *)v10 + a3);
  *((_BYTE *)v10 + a3) = v11;
  v12 = this[10];
  result = *((double *)v12 + a2);
  *((_QWORD *)v12 + a2) = *((_QWORD *)v12 + a3);
  *((double *)v12 + a3) = result;
  return result;
}

double svm_predict_probability(uint64_t a1, Kernel *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v6;
  const svm_parameter *v7;
  size_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  _QWORD *v29;
  uint64_t v30;
  int v32;
  void **v33;
  _QWORD *v34;
  double v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t i;
  double v42;
  uint64_t v43;
  double *v44;
  double *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  int v51;
  double v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  double *v56;
  double v57;
  uint64_t v58;
  double v59;
  double v60;
  uint64_t j;
  uint64_t v62;
  double *v63;
  double v64;
  double v65;
  double v66;
  double v67;
  void **v68;
  uint64_t v69;
  void *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  void *v75;
  void **v76;
  uint64_t v77;
  double *v78;
  uint64_t size;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;

  v4 = a1;
  if (*(_DWORD *)a1 > 1u || !*(_QWORD *)(a1 + 136) || !*(_QWORD *)(a1 + 144))
    return svm_predict(a1, a2);
  v6 = *(int *)(a1 + 104);
  v78 = (double *)malloc_type_malloc(8 * (((int)v6 - 1) * (int)v6 / 2), 0x100004000313F17uLL);
  svm_predict_values((svm_node *)v4, a2, v78, v7);
  v8 = 8 * v6;
  v9 = (void **)malloc_type_malloc(8 * v6, 0x80040B8603338uLL);
  v10 = v6;
  v83 = v6;
  size = 8 * v6;
  if ((int)v6 >= 1)
  {
    v11 = 0;
    do
      v9[v11++] = malloc_type_malloc(v8, 0x100004000313F17uLL);
    while (v10 != v11);
    v12 = 0;
    v13 = 0;
    v14 = v10 - 1;
    v15 = v9 + 1;
    v16 = 8;
    v76 = v9;
    v77 = v4;
    do
    {
      v17 = v12 + 1;
      if (v12 + 1 < v83)
      {
        v81 = v16;
        v18 = 0;
        v19 = v9[v12];
        v80 = v13;
        v20 = *(_QWORD *)(v4 + 136);
        v21 = *(_QWORD *)(v4 + 144) + 8 * v13;
        v22 = v20 + 8 * v13;
        v23 = &v78[v13];
        v24 = (uint64_t)v19 + v16;
        do
        {
          v25 = *(double *)(v21 + 8 * v18) + v23[v18] * *(double *)(v22 + 8 * v18);
          if (v25 >= 0.0)
          {
            v26 = exp(-v25);
            v27 = v26;
          }
          else
          {
            v26 = exp(v25);
            v27 = 1.0;
          }
          v28 = fmin(fmax(v27 / (v26 + 1.0), 0.0000001), 0.9999999);
          *(double *)(v24 + 8 * v18) = v28;
          *(double *)(v15[v18++] + 8 * v12) = 1.0 - v28;
        }
        while (v14 != v18);
        v17 = v12 + 1;
        v13 = v80 + v18;
        v9 = v76;
        v4 = v77;
        v16 = v81;
      }
      --v14;
      ++v15;
      v16 += 8;
      v12 = v17;
    }
    while (v17 != v10);
    v8 = size;
    if ((_DWORD)v10 == 2)
    {
      v29 = v9[1];
      *a3 = *((_QWORD *)*v9 + 1);
      a3[1] = *v29;
      v30 = v10;
      goto LABEL_55;
    }
  }
  if ((int)v10 <= 100)
    v32 = 100;
  else
    v32 = v10;
  v82 = v32;
  v33 = (void **)malloc_type_malloc(v8, 0x80040B8603338uLL);
  v34 = malloc_type_malloc(v8, 0x100004000313F17uLL);
  v35 = (double)(int)v10;
  if ((int)v10 > 0)
  {
    v36 = 0;
    v37 = (uint64_t *)(v9 + 1);
    v38 = 1;
    v39 = 1;
    do
    {
      *(double *)&a3[v36] = 1.0 / v35;
      v40 = malloc_type_malloc(size, 0x100004000313F17uLL);
      v33[v36] = v40;
      v40[v36] = 0;
      if (v36)
      {
        for (i = 0; i != v36; ++i)
        {
          v42 = *((double *)v9[i] + v36);
          *(double *)&v40[v36] = *(double *)&v40[v36] + v42 * v42;
          v40[i] = *((_QWORD *)v33[i] + v36);
        }
      }
      v43 = v36 + 1;
      if (v36 + 1 < v83)
      {
        v44 = (double *)&v40[v39];
        v45 = (double *)((char *)v9[v36] + v39 * 8);
        v46 = v37;
        v47 = v10;
        do
        {
          v48 = *v46++;
          *(double *)&v40[v36] = *(double *)&v40[v36] + *(double *)(v48 + 8 * v36) * *(double *)(v48 + 8 * v36);
          v49 = *(double *)(v48 + 8 * v36);
          v50 = *v45++;
          *v44++ = -(v49 * v50);
          --v47;
        }
        while (v38 != v47);
      }
      ++v38;
      ++v39;
      ++v37;
      ++v36;
    }
    while (v43 != v10);
  }
  v51 = 0;
  v52 = 0.005 / v35;
  do
  {
    if ((int)v10 < 1)
    {
      if (v52 > 0.0)
        goto LABEL_53;
    }
    else
    {
      v53 = 0;
      v54 = 0.0;
      do
      {
        v55 = 0;
        v34[v53] = 0;
        v56 = (double *)v33[v53];
        v57 = 0.0;
        do
        {
          v57 = v57 + v56[v55] * *(double *)&a3[v55];
          *(double *)&v34[v53] = v57;
          ++v55;
        }
        while (v10 != v55);
        v54 = v54 + *(double *)&a3[v53++] * v57;
      }
      while (v53 != v10);
      v58 = 0;
      v59 = 0.0;
      do
      {
        v60 = vabdd_f64(*(double *)&v34[v58], v54);
        if (v60 > v59)
          v59 = v60;
        ++v58;
      }
      while (v10 != v58);
      if (v59 < v52)
        goto LABEL_50;
      for (j = 0; j != v10; ++j)
      {
        v62 = 0;
        v63 = (double *)v33[j];
        v64 = (v54 - *(double *)&v34[j]) / v63[j];
        *(double *)&a3[j] = *(double *)&a3[j] + v64;
        v65 = v63[j];
        v66 = *(double *)&v34[j] + *(double *)&v34[j];
        v67 = v64 + 1.0;
        do
        {
          *(double *)&v34[v62] = (*(double *)&v34[v62] + v64 * v63[v62]) / v67;
          *(double *)&a3[v62] = *(double *)&a3[v62] / v67;
          ++v62;
        }
        while (v10 != v62);
        v54 = (v54 + v64 * (v66 + v64 * v65)) / v67 / v67;
      }
    }
    ++v51;
  }
  while (v51 != v82);
  info("Exceeds max_iter in multiclass_prob\n", 1.0);
LABEL_50:
  if ((int)v10 >= 1)
  {
    v68 = v33;
    v69 = v10;
    do
    {
      v70 = *v68++;
      free(v70);
      --v69;
    }
    while (v69);
  }
LABEL_53:
  free(v33);
  free(v34);
  if ((int)v10 > 1)
  {
    v30 = v83;
LABEL_55:
    v71 = 0;
    v72 = 1;
    do
    {
      if (*(double *)&a3[v72] > *(double *)&a3[v71])
        v71 = v72;
      ++v72;
    }
    while (v30 != v72);
    v73 = v71;
    goto LABEL_61;
  }
  v73 = 0;
LABEL_61:
  if ((int)v10 >= 1)
  {
    v74 = v9;
    do
    {
      v75 = *v74++;
      free(v75);
      --v10;
    }
    while (v10);
  }
  free(v78);
  free(v9);
  return (double)*(int *)(*(_QWORD *)(v4 + 160) + 4 * v73);
}

double svm_predict(uint64_t a1, Kernel *a2)
{
  size_t v4;
  double *v5;
  const svm_parameter *v6;
  double v7;
  double v8;

  if ((*(_DWORD *)a1 - 2) > 2)
    v4 = 8 * ((*(_DWORD *)(a1 + 104) - 1) * *(_DWORD *)(a1 + 104) / 2);
  else
    v4 = 8;
  v5 = (double *)malloc_type_malloc(v4, 0x100004000313F17uLL);
  svm_predict_values((svm_node *)a1, a2, v5, v6);
  v8 = v7;
  free(v5);
  return v8;
}

uint64_t svm_get_nr_class(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

void svm_free_and_destroy_model(void **a1)
{
  void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      svm_free_model_content((uint64_t)v2);
      free(*a1);
      *a1 = 0;
    }
  }
}

uint64_t svm_get_svm_type(unsigned int *a1)
{
  return *a1;
}

uint64_t svm_get_labels(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 160);
  if (v2 && *(int *)(result + 104) >= 1)
  {
    v3 = 0;
    do
    {
      *(_DWORD *)(a2 + 4 * v3) = *(_DWORD *)(v2 + 4 * v3);
      ++v3;
    }
    while (v3 < *(int *)(result + 104));
  }
  return result;
}

uint64_t svm_get_sv_indices(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 152);
  if (v2 && *(int *)(result + 108) >= 1)
  {
    v3 = 0;
    do
    {
      *(_DWORD *)(a2 + 4 * v3) = *(_DWORD *)(v2 + 4 * v3);
      ++v3;
    }
    while (v3 < *(int *)(result + 108));
  }
  return result;
}

uint64_t svm_get_nr_sv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

double svm_get_svr_probability(uint64_t a1)
{
  uint64_t v1;

  if ((*(_DWORD *)a1 - 3) <= 1)
  {
    v1 = *(_QWORD *)(a1 + 136);
    if (v1)
      return *(double *)v1;
  }
  fwrite("Model doesn't contain information for SVR probability inference\n", 0x40uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  return 0.0;
}

uint64_t svm_save_model(const char *a1, double *a2)
{
  FILE *v3;
  FILE *v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  int v24;
  double *v25;
  int v26;
  char *v28;
  uint64_t v29;

  v3 = fopen(a1, "w");
  if (!v3)
    return 0xFFFFFFFFLL;
  v4 = v3;
  v5 = setlocale(0, 0);
  if (v5)
    v28 = strdup(v5);
  else
    v28 = 0;
  setlocale(0, "C");
  fprintf(v4, "svm_type %s\n", svm_type_table[*(int *)a2]);
  fprintf(v4, "kernel_type %s\n", kernel_type_table[*((int *)a2 + 1)]);
  v6 = *((_DWORD *)a2 + 1);
  if (v6 == 1)
  {
    fprintf(v4, "degree %d\n", *((_DWORD *)a2 + 2));
    v6 = *((_DWORD *)a2 + 1);
  }
  if ((v6 - 1) <= 2)
  {
    fprintf(v4, "gamma %g\n", a2[2]);
    v6 = *((_DWORD *)a2 + 1);
  }
  if ((v6 | 2) == 3)
    fprintf(v4, "coef0 %g\n", a2[3]);
  v8 = *((unsigned int *)a2 + 26);
  v7 = *((unsigned int *)a2 + 27);
  fprintf(v4, "nr_class %d\n", *((_DWORD *)a2 + 26));
  v29 = v7;
  fprintf(v4, "total_sv %d\n", v7);
  fwrite("rho", 3uLL, 1uLL, v4);
  v9 = (v8 - 1) * v8;
  if (v9 >= 0)
    v10 = (v8 - 1) * v8;
  else
    v10 = v9 + 1;
  v11 = (v10 >> 1);
  if (v9 >= 2)
  {
    v12 = 0;
    do
      fprintf(v4, " %g", *(double *)(*((_QWORD *)a2 + 16) + 8 * v12++));
    while (v11 != v12);
  }
  fputc(10, v4);
  if (*((_QWORD *)a2 + 20))
  {
    fwrite("label", 5uLL, 1uLL, v4);
    if ((int)v8 >= 1)
    {
      v13 = 0;
      do
      {
        fprintf(v4, " %d", *(_DWORD *)(*((_QWORD *)a2 + 20) + v13));
        v13 += 4;
      }
      while (4 * v8 != v13);
    }
    fputc(10, v4);
  }
  if (*((_QWORD *)a2 + 17))
  {
    fwrite("probA", 5uLL, 1uLL, v4);
    if (v9 >= 2)
    {
      v14 = 0;
      do
        fprintf(v4, " %g", *(double *)(*((_QWORD *)a2 + 17) + 8 * v14++));
      while (v11 != v14);
    }
    fputc(10, v4);
  }
  if (*((_QWORD *)a2 + 18))
  {
    fwrite("probB", 5uLL, 1uLL, v4);
    if (v9 >= 2)
    {
      v15 = 0;
      do
        fprintf(v4, " %g", *(double *)(*((_QWORD *)a2 + 18) + 8 * v15++));
      while (v11 != v15);
    }
    fputc(10, v4);
  }
  if (*((_QWORD *)a2 + 21))
  {
    fwrite("nr_sv", 5uLL, 1uLL, v4);
    if ((int)v8 >= 1)
    {
      v16 = 0;
      do
      {
        fprintf(v4, " %d", *(_DWORD *)(*((_QWORD *)a2 + 21) + v16));
        v16 += 4;
      }
      while (4 * v8 != v16);
    }
    fputc(10, v4);
  }
  fwrite("SV\n", 3uLL, 1uLL, v4);
  if ((int)v29 >= 1)
  {
    v17 = 0;
    v19 = *((_QWORD *)a2 + 14);
    v18 = (uint64_t *)*((_QWORD *)a2 + 15);
    do
    {
      v20 = v18;
      v21 = (v8 - 1);
      if ((int)v8 >= 2)
      {
        do
        {
          v22 = *v20++;
          fprintf(v4, "%.16g ", *(double *)(v22 + 8 * v17));
          --v21;
        }
        while (v21);
      }
      v23 = *(double **)(v19 + 8 * v17);
      if (*((_DWORD *)a2 + 1) == 4)
      {
        fprintf(v4, "0:%d ", (int)v23[1]);
      }
      else
      {
        v24 = *(_DWORD *)v23;
        if (*(_DWORD *)v23 != -1)
        {
          v25 = v23 + 2;
          do
          {
            fprintf(v4, "%d:%.8g ", v24, *(v25 - 1));
            v26 = *(_DWORD *)v25;
            v25 += 2;
            v24 = v26;
          }
          while (v26 != -1);
        }
      }
      fputc(10, v4);
      ++v17;
    }
    while (v17 != v29);
  }
  setlocale(0, v28);
  free(v28);
  if (ferror(v4))
    return 0xFFFFFFFFLL;
  if (fclose(v4))
    return 0xFFFFFFFFLL;
  return 0;
}

char *svm_load_model(const char *a1)
{
  FILE *v1;
  FILE *v2;
  char *v3;
  char *v4;
  void **v5;
  BOOL v8;
  BOOL v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  FILE *v35;
  const char *v36;
  size_t v37;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  size_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  int v55;
  double *v56;
  char *v57;
  char *v58;
  const char *v59;
  _DWORD *v60;
  char *v61;
  int v62;
  uint64_t v63;
  char *v64;
  char __s2[8];
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v1 = fopen(a1, "rb");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = setlocale(0, 0);
  if (v3)
    v64 = strdup(v3);
  else
    v64 = 0;
  setlocale(0, "C");
  v4 = (char *)malloc_type_malloc(0xB8uLL, 0x109004003BC950CuLL);
  *((_OWORD *)v4 + 8) = 0u;
  v5 = (void **)(v4 + 128);
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_DWORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 9) = 0;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
LABEL_6:
                if (fscanf(v2, "%80s", __s2) != 1)
                  goto LABEL_97;
                if (!(*(_QWORD *)__s2 ^ 0x657079745F6D7673 | v66))
                {
                  if (fscanf(v2, "%80s", __s2) == 1)
                  {
                    for (i = 0; i != 5; ++i)
                    {
                      if (!strcmp(svm_type_table[i], __s2))
                      {
                        *(_DWORD *)v4 = i;
                        goto LABEL_6;
                      }
                    }
                    v35 = (FILE *)*MEMORY[0x1E0C80C10];
                    v36 = "unknown svm type.\n";
                    v37 = 18;
LABEL_96:
                    fwrite(v36, v37, 1uLL, v35);
                  }
                  goto LABEL_97;
                }
                if (*(_QWORD *)__s2 != 0x745F6C656E72656BLL || v66 != 6647929)
                  break;
                if (fscanf(v2, "%80s", __s2) != 1)
                  goto LABEL_97;
                v18 = 0;
                while (strcmp(kernel_type_table[v18], __s2))
                {
                  if (++v18 == 5)
                  {
                    v35 = (FILE *)*MEMORY[0x1E0C80C10];
                    v36 = "unknown kernel function.\n";
                    v37 = 25;
                    goto LABEL_96;
                  }
                }
                *((_DWORD *)v4 + 1) = v18;
              }
              if (*(_DWORD *)__s2 != 1919378788 || *(_DWORD *)&__s2[3] != 6645106)
              {
                v8 = *(_DWORD *)__s2 == 1835884903 && *(unsigned __int16 *)&__s2[4] == 97;
                if (v8 || (*(_DWORD *)__s2 == 1717923683 ? (v9 = *(unsigned __int16 *)&__s2[4] == 48) : (v9 = 0), v9))
                {
                  v19 = fscanf(v2, "%lf");
                  goto LABEL_63;
                }
                if (*(_QWORD *)__s2 ^ 0x7373616C635F726ELL | v66
                  && *(_QWORD *)__s2 ^ 0x76735F6C61746F74 | v66)
                {
                  break;
                }
              }
              v19 = fscanf(v2, "%d");
LABEL_63:
              if (v19 != 1)
                goto LABEL_97;
            }
            if (*(_DWORD *)__s2 != 7301234)
              break;
            v60 = v4 + 104;
            v20 = (*v60 - 1) * *v60;
            if (v20 >= 0)
              v21 = (*v60 - 1) * *v60;
            else
              v21 = v20 + 1;
            v22 = (v21 >> 1);
            *v5 = malloc_type_malloc(8 * (int)v22, 0x100004000313F17uLL);
            if (v20 >= 2)
            {
              v23 = 0;
              while (fscanf(v2, "%lf", (char *)*v5 + v23) == 1)
              {
                v23 += 8;
                if (!--v22)
                  goto LABEL_6;
              }
              goto LABEL_97;
            }
          }
          if (*(_DWORD *)__s2 != 1700946284 || *(unsigned __int16 *)&__s2[4] != 108)
            break;
          v24 = *((int *)v4 + 26);
          *((_QWORD *)v4 + 20) = malloc_type_malloc(4 * v24, 0x100004052888210uLL);
          if ((int)v24 >= 1)
          {
            v25 = 0;
            v26 = 4 * v24;
            while (fscanf(v2, "%d", *((_QWORD *)v4 + 20) + v25) == 1)
            {
              v25 += 4;
              if (v26 == v25)
                goto LABEL_6;
            }
            goto LABEL_97;
          }
        }
        if (*(_DWORD *)__s2 != 1651470960 || *(unsigned __int16 *)&__s2[4] != 65)
          break;
        v27 = (*((_DWORD *)v4 + 26) - 1) * *((_DWORD *)v4 + 26);
        if (v27 >= 0)
          v28 = (*((_DWORD *)v4 + 26) - 1) * *((_DWORD *)v4 + 26);
        else
          v28 = v27 + 1;
        v29 = (v28 >> 1);
        *((_QWORD *)v4 + 17) = malloc_type_malloc(8 * (int)v29, 0x100004000313F17uLL);
        if (v27 >= 2)
        {
          v30 = 0;
          while (fscanf(v2, "%lf", *((_QWORD *)v4 + 17) + v30) == 1)
          {
            v30 += 8;
            if (!--v29)
              goto LABEL_6;
          }
          goto LABEL_97;
        }
      }
      if (*(_DWORD *)__s2 != 1651470960 || *(unsigned __int16 *)&__s2[4] != 66)
        break;
      v31 = (*((_DWORD *)v4 + 26) - 1) * *((_DWORD *)v4 + 26);
      if (v31 >= 0)
        v32 = (*((_DWORD *)v4 + 26) - 1) * *((_DWORD *)v4 + 26);
      else
        v32 = v31 + 1;
      v33 = (v32 >> 1);
      *((_QWORD *)v4 + 18) = malloc_type_malloc(8 * (int)v33, 0x100004000313F17uLL);
      if (v31 >= 2)
      {
        v34 = 0;
        while (fscanf(v2, "%lf", *((_QWORD *)v4 + 18) + v34) == 1)
        {
          v34 += 8;
          if (!--v33)
            goto LABEL_6;
        }
        goto LABEL_97;
      }
    }
    if (*(_DWORD *)__s2 != 1935635054 || *(unsigned __int16 *)&__s2[4] != 118)
      break;
    v14 = *((int *)v4 + 26);
    *((_QWORD *)v4 + 21) = malloc_type_malloc(4 * v14, 0x100004052888210uLL);
    if ((int)v14 >= 1)
    {
      v15 = 0;
      v16 = 4 * v14;
      while (fscanf(v2, "%d", *((_QWORD *)v4 + 21) + v15) == 1)
      {
        v15 += 4;
        if (v16 == v15)
          goto LABEL_6;
      }
      goto LABEL_97;
    }
  }
  if (*(unsigned __int16 *)__s2 ^ 0x5653 | __s2[2])
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "unknown text in model file: [%s]\n", __s2);
LABEL_97:
    fwrite("ERROR: fscanf failed to read model\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    setlocale(0, v64);
    free(v64);
    free(*((void **)v4 + 16));
    free(*((void **)v4 + 20));
    free(*((void **)v4 + 21));
    free(v4);
    return 0;
  }
  do
    v39 = getc(v2);
  while (v39 != -1 && v39 != 10);
  v40 = MEMORY[0x1A1AD6D04](v2);
  max_line_len = 1024;
  v41 = 0;
  line = (uint64_t)malloc_type_malloc(0x400uLL, 0x100004077774924uLL);
  *(_QWORD *)__s2 = 0;
  while (readline(v2))
  {
    strtok((char *)line, ":");
    --v41;
    do
      ++v41;
    while (strtok(0, ":"));
  }
  v42 = *((_DWORD *)v4 + 27);
  fseek(v2, v40, 0);
  v43 = *((_DWORD *)v4 + 26);
  v44 = *((int *)v4 + 27);
  v45 = v43 - 1;
  v63 = *((unsigned int *)v4 + 27);
  *((_QWORD *)v4 + 15) = malloc_type_malloc(8 * (v43 - 1), 0x80040B8603338uLL);
  v46 = 8 * v44;
  v62 = v43;
  if (v43 > 1)
  {
    v47 = 0;
    do
    {
      *(_QWORD *)(*((_QWORD *)v4 + 15) + v47) = malloc_type_malloc(v46, 0x100004000313F17uLL);
      v47 += 8;
    }
    while (8 * (v43 - 1) != v47);
  }
  *((_QWORD *)v4 + 14) = malloc_type_malloc(v46, 0x2004093837F09uLL);
  if ((int)v63 >= 1)
  {
    v48 = (char *)malloc_type_malloc(16 * (v42 + v41), 0x1000040F7F8B94BuLL);
    v49 = 0;
    v50 = 0;
    v61 = v48 + 8;
    do
    {
      readline(v2);
      v51 = v48;
      *(_QWORD *)(*((_QWORD *)v4 + 14) + 8 * v49) = &v48[16 * v50];
      v52 = strtok((char *)line, " \t");
      *(double *)(**((_QWORD **)v4 + 15) + 8 * v49) = strtod(v52, (char **)__s2);
      if (v62 >= 3)
      {
        v53 = 8;
        do
        {
          v54 = strtok(0, " \t");
          *(double *)(*(_QWORD *)(*((_QWORD *)v4 + 15) + v53) + 8 * v49) = strtod(v54, (char **)__s2);
          v53 += 8;
        }
        while (8 * v45 != v53);
      }
      v55 = v50;
      v56 = (double *)&v61[16 * v50];
      v48 = v51;
      while (1)
      {
        v57 = strtok(0, ":");
        v58 = strtok(0, " \t");
        if (!v58)
          break;
        v59 = v58;
        *((_DWORD *)v56 - 2) = strtol(v57, (char **)__s2, 10);
        *v56 = strtod(v59, (char **)__s2);
        v56 += 2;
        ++v55;
      }
      v50 = v55 + 1;
      *(_DWORD *)&v48[16 * v55] = -1;
      ++v49;
    }
    while (v49 != v63);
  }
  free((void *)line);
  setlocale(0, v64);
  free(v64);
  if (!ferror(v2) && !fclose(v2))
  {
    *((_DWORD *)v4 + 44) = 1;
    return v4;
  }
  return 0;
}

void *readline(__sFILE *a1)
{
  void *v2;
  size_t v3;
  int v4;

  if (!fgets((char *)line, max_line_len, a1))
    return 0;
  while (1)
  {
    v2 = (void *)line;
    if (strrchr((char *)line, 10))
      break;
    v3 = 2 * max_line_len;
    max_line_len *= 2;
    line = (uint64_t)malloc_type_realloc(v2, v3, 0x2BFDA227uLL);
    v4 = strlen((const char *)line);
    if (!fgets((char *)(line + v4), max_line_len - v4, a1))
      return (void *)line;
  }
  return v2;
}

void svm_destroy_param(uint64_t a1)
{
  free(*(void **)(a1 + 64));
  free(*(void **)(a1 + 72));
}

const char *svm_check_parameter(unsigned int *a1, uint64_t a2)
{
  unsigned int v2;
  const char *result;
  double v6;
  unsigned int v7;
  uint64_t v9;
  _DWORD *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int *v23;
  int v24;
  int v25;
  double v26;

  v2 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 > 4u)
    return "unknown svm type";
  if (*(_DWORD *)(a2 + 4) > 4u)
    return "unknown kernel type";
  if (*(double *)(a2 + 16) < 0.0)
    return "gamma < 0";
  if ((*(_DWORD *)(a2 + 8) & 0x80000000) != 0)
    return "degree of polynomial kernel < 0";
  if (*(double *)(a2 + 32) <= 0.0)
    return "cache_size <= 0";
  if (*(double *)(a2 + 40) <= 0.0)
    return "eps <= 0";
  if (v2 <= 4 && ((1 << v2) & 0x19) != 0 && *(double *)(a2 + 48) <= 0.0)
    return "C <= 0";
  if (v2 - 1 < 2)
    goto LABEL_16;
  if (v2 == 3)
  {
LABEL_19:
    if (*(double *)(a2 + 88) < 0.0)
      return "p < 0";
    goto LABEL_25;
  }
  if (v2 == 4)
  {
LABEL_16:
    v6 = *(double *)(a2 + 80);
    result = "nu <= 0 or nu > 1";
    if (v6 <= 0.0 || v6 > 1.0)
      return result;
    if (v2 == 3)
      goto LABEL_19;
  }
LABEL_25:
  if (*(_DWORD *)(a2 + 96) > 1u)
    return "shrinking != 0 and shrinking != 1";
  v7 = *(_DWORD *)(a2 + 100);
  if (v7 > 1)
    return "probability != 0 and probability != 1";
  if (v7 == 1 && v2 == 2)
    result = "one-class SVM probability output not supported yet";
  else
    result = 0;
  if (v2 == 1)
  {
    v9 = *a1;
    v10 = malloc_type_malloc(0x40uLL, 0x100004052888210uLL);
    v11 = (int *)malloc_type_malloc(0x40uLL, 0x100004052888210uLL);
    if ((int)v9 < 1)
      goto LABEL_57;
    v12 = 0;
    v13 = 0;
    v14 = 16;
    do
    {
      v15 = (int)*(double *)(*((_QWORD *)a1 + 1) + 8 * v12);
      if (v13 < 1)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        v16 = 0;
        while (v10[v16] != v15)
        {
          if (v13 == ++v16)
            goto LABEL_44;
        }
        ++v11[v16];
      }
      if ((_DWORD)v16 == v13)
      {
LABEL_44:
        if (v13 == v14)
        {
          v14 = 2 * v13;
          v10 = malloc_type_realloc(v10, 8 * v13, 0x100004052888210uLL);
          v11 = (int *)malloc_type_realloc(v11, 8 * v13, 0x100004052888210uLL);
        }
        v10[v13] = v15;
        v11[v13++] = 1;
      }
      ++v12;
    }
    while (v12 != v9);
    if (v13 < 1)
    {
LABEL_57:
      free(v10);
      free(v11);
      return 0;
    }
    else
    {
      v17 = 0;
      v18 = v11 + 1;
      v19 = 1;
      while (1)
      {
        v20 = v17 + 1;
        if (v17 + 1 < (unint64_t)v13)
          break;
LABEL_56:
        ++v19;
        ++v18;
        v17 = v20;
        if (v20 == v13)
          goto LABEL_57;
      }
      v21 = v11[v17];
      v22 = v13;
      v23 = v18;
      while (1)
      {
        v25 = *v23++;
        v24 = v25;
        v26 = *(double *)(a2 + 80) * (double)(v25 + v21) * 0.5;
        if (v21 < v25)
          v24 = v21;
        if (v26 > (double)v24)
          break;
        if (v19 == --v22)
          goto LABEL_56;
      }
      free(v10);
      free(v11);
      return "specified nu is infeasible";
    }
  }
  return result;
}

BOOL svm_check_probability_model(uint64_t a1)
{
  if (*(_DWORD *)a1 > 1u)
  {
    if ((*(_DWORD *)a1 - 3) <= 1)
      return *(_QWORD *)(a1 + 136) != 0;
  }
  else if (*(_QWORD *)(a1 + 136) && *(_QWORD *)(a1 + 144))
  {
    return 1;
  }
  return 0;
}

uint64_t (*svm_set_print_string_function(uint64_t (*result)(const char *)))(const char *)
{
  uint64_t (*v1)(const char *);

  v1 = print_string_stdout;
  if (result)
    v1 = result;
  svm_print_string = v1;
  return result;
}

void sub_19C7CFD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  void *v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v25 - 72) = v24;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 72));
  *(_QWORD *)(v25 - 72) = &a13;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 72));

  _Unwind_Resume(a1);
}

void sub_19C7D08CC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  uint64_t v58;
  void *v61;
  NSObject *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;

  __p = &a23;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a32;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  if (a2 == 1)
  {
    v61 = __cxa_begin_catch(a1);
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v62 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      v67 = (*(uint64_t (**)(void *))(*(_QWORD *)v61 + 16))(v61);
      *(_DWORD *)(v58 - 128) = 136315138;
      *(_QWORD *)(v58 - 124) = v67;
      _os_log_error_impl(&dword_19C486000, v62, OS_LOG_TYPE_ERROR, "Failed to construct MLModelStructurePath with error: %s.", (uint8_t *)(v58 - 128), 0xCu);
    }

    if (a11)
    {
      v63 = (void *)MEMORY[0x1E0CB35C8];
      a57 = *MEMORY[0x1E0CB2D50];
      v64 = (void *)MEMORY[0x1E0CB3940];
      (*(void (**)(void *))(*(_QWORD *)v61 + 16))(v61);
      objc_msgSend(v64, "stringWithFormat:", CFSTR("Failed to construct MLModelStructurePath with error: %s."));
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      a58 = (uint64_t)v65;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a58, &a57, 1);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 0, v66);
      *a11 = (id)objc_claimAutoreleasedReturnValue();

    }
    __cxa_end_catch();
    JUMPOUT(0x19C7D0570);
  }
  if (a30)
  {
    *(_QWORD *)(v58 - 128) = &a27;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 128));
  }

  _Unwind_Resume(a1);
}

void sub_19C7D11CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7D1338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void sub_19C7D1410(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7D14AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_19C7D1528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor(v4 - 32);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3D658A0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__init_with_size[abi:ne180100]<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>*,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 >> 59)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = result + 32 * v8;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::__copy_constructor(v7 + v9, a2 + v9);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      v7 += v9;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_19C7D1758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E3D64C80[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 24) = v3;
  }
  return a1;
}

void sub_19C7D17F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS11_EEEDcST_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS11_EEEDcST_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS11_EEEDcST_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS11_EEEDcST_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

id std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<`anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Type");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Root");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_19C7D19F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<`anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Type");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Program");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_19C7D1ADC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<`anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>(uint64_t a1, uint64_t *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t *v6;
  void *v7;
  void *v8;
  _QWORD v10[2];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Type");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Function");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v4;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Name");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[1] = v5;
  if (*((char *)a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11[1] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_19C7D1C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<`anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[2];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Type");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Block");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v4;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Index");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = v5;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[1] = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, v9, 2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_19C7D1D58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<`anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>(uint64_t a1, uint64_t *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t *v6;
  void *v7;
  void *v8;
  _QWORD v10[2];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Type");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Operation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v4;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Output");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[1] = v5;
  if (*((char *)a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11[1] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_19C7D1EA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<`anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Type");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NeuralNetwork");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_19C7D1F9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<`anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>(uint64_t a1, uint64_t *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t *v6;
  void *v7;
  void *v8;
  _QWORD v10[2];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Type");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Layer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v4;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Name");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[1] = v5;
  if (*((char *)a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11[1] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_19C7D20D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<`anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>()
{
  void *v0;
  void *v1;
  void *v2;
  void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Type");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Pipeline");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_19C7D21CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<`anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>(uint64_t a1, uint64_t *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t *v6;
  void *v7;
  void *v8;
  _QWORD v10[2];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Type");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "SubModel");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v4;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Name");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[1] = v5;
  if (*((char *)a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11[1] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_19C7D2304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

const char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_()
{
  const char *result;
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned int v3;

  result = "N6CoreML14ModelStructure4Path4RootE";
  if (((unint64_t)"N6CoreML14ModelStructure4Path4RootE" & 0x8000000000000000) != 0)
  {
    v1 = (unsigned __int8 *)((unint64_t)"N6CoreML14ModelStructure4Path4RootE" & 0x7FFFFFFFFFFFFFFFLL);
    v2 = 5381;
    do
    {
      result = (const char *)v2;
      v3 = *v1++;
      v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

const char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_()
{
  const char *result;
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned int v3;

  result = "N6CoreML14ModelStructure4Path7ProgramE";
  if (((unint64_t)"N6CoreML14ModelStructure4Path7ProgramE" & 0x8000000000000000) != 0)
  {
    v1 = (unsigned __int8 *)((unint64_t)"N6CoreML14ModelStructure4Path7ProgramE" & 0x7FFFFFFFFFFFFFFFLL);
    v2 = 5381;
    do
    {
      result = (const char *)v2;
      v3 = *v1++;
      v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__string_hash<char>::operator()[abi:ne180100](a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__string_hash<char>::operator()[abi:ne180100](a2);
}

const char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_()
{
  const char *result;
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned int v3;

  result = "N6CoreML14ModelStructure4Path13NeuralNetworkE";
  if (((unint64_t)"N6CoreML14ModelStructure4Path13NeuralNetworkE" & 0x8000000000000000) != 0)
  {
    v1 = (unsigned __int8 *)((unint64_t)"N6CoreML14ModelStructure4Path13NeuralNetworkE" & 0x7FFFFFFFFFFFFFFFLL);
    v2 = 5381;
    do
    {
      result = (const char *)v2;
      v3 = *v1++;
      v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__string_hash<char>::operator()[abi:ne180100](a2);
}

const char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_()
{
  const char *result;
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned int v3;

  result = "N6CoreML14ModelStructure4Path8PipelineE";
  if (((unint64_t)"N6CoreML14ModelStructure4Path8PipelineE" & 0x8000000000000000) != 0)
  {
    v1 = (unsigned __int8 *)((unint64_t)"N6CoreML14ModelStructure4Path8PipelineE" & 0x7FFFFFFFFFFFFFFFLL);
    v2 = 5381;
    do
    {
      result = (const char *)v2;
      v3 = *v1++;
      v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__string_hash<char>::operator()[abi:ne180100](a2);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v1 = *(char *)(a1 + 23);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v1 < 0;
  if (v1 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (!v3)
    v2 = *(unsigned __int8 *)(a1 + 23);
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      v34 = 0x9DDFEA08EB382D69;
      v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      v50 = v46 + v48;
      v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      v53 = v47 + v2 + v46 + v44;
      v54 = v53 + v43;
      v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      v57 = v56 + v45 + v48;
      v58 = __ROR8__(v57, 44);
      v59 = v57 + v49;
      v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      v62 = *v4;
      v61 = v4 + 4;
      v63 = v62 - 0x4B6D499041670D8DLL * v43;
      v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v65 = *(v61 - 3);
        v66 = v63 + v54 + v50 + v65;
        v67 = v61[2];
        v68 = v61[3];
        v69 = v61[1];
        v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        v70 = v52 + v59;
        v71 = *(v61 - 2);
        v72 = *(v61 - 1);
        v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        v74 = v73 + v59 + v72;
        v75 = v73 + v65 + v71;
        v54 = v75 + v72;
        v76 = __ROR8__(v75, 44) + v73;
        v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        v55 = v76 + __ROR8__(v74 + v77, 21);
        v78 = v63 + v60 + *v61;
        v59 = v78 + v69 + v67 + v68;
        v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        v52 = v77;
        v64 += 64;
      }
      while (v64);
      v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      v9 = (char *)v4 + v2;
      v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      v12 = v4[1];
      v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      v16 = v4 + 2;
      v14 = v4[2];
      v15 = v16[1];
      v17 = __ROR8__(v13 + v15, 52);
      v18 = __ROR8__(v13, 37);
      v19 = v13 + v12;
      v20 = __ROR8__(v19, 7);
      v21 = v19 + v14;
      v22 = v20 + v18;
      v23 = *((_QWORD *)v9 - 4) + v14;
      v24 = v11 + v15;
      v25 = __ROR8__(v24 + v23, 52);
      v26 = v22 + v17;
      v27 = __ROR8__(v23, 37);
      v28 = *((_QWORD *)v9 - 3) + v23;
      v29 = __ROR8__(v28, 7);
      v30 = v26 + __ROR8__(v21, 31);
      v31 = v28 + v10;
      v32 = v31 + v24;
      v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      v34 = 0x9AE16A3B2F90404FLL;
      v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      v36 = v4[1];
      v37 = 0xB492B66FBE98F273 * *v4;
      v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      v5 = *v4;
      v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      v82 = *(_DWORD *)v4;
      v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

uint64_t std::operator==[abi:ne180100]<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t result;
  BOOL v9;
  char v10;
  char *v11;

  v4 = *(unsigned int *)(a1 + 24);
  v5 = *(_DWORD *)(a2 + 24);
  v6 = v5 == v4;
  v9 = v5 == -1;
  v7 = v5 == -1;
  if (v9)
    v6 = 0;
  if ((_DWORD)v4 == -1)
    result = v7;
  else
    result = v6;
  v9 = (_DWORD)v4 == -1 || !v6;
  if (!v9)
  {
    v11 = &v10;
    return ((uint64_t (*)(char **, uint64_t))off_1E3D64CC8[v4])(&v11, a1);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul,5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul,6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul,7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul,8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t `anonymous namespace'::missingOrInvalidValueErrorMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[2];
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Failed to append ", 17);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *(_QWORD *)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", missing or invalid value for ", 31);
  v11 = *(char *)(a3 + 23);
  if (v11 >= 0)
    v12 = a3;
  else
    v12 = *(_QWORD *)a3;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a3 + 23);
  else
    v13 = *(_QWORD *)(a3 + 8);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)".", 1);
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v18[0] = v15;
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AD61C4](&v20);
}

void sub_19C7D2CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::toPath(_QWORD *a1, void *a2)
{
  id v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  void *__p;
  __int128 v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  int v17;
  _BYTE v18[24];
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[24];
  int v25;
  _QWORD *v26;
  char v27;
  _BYTE v28[128];
  _BYTE v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v25 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v29, (uint64_t)v24);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v26 = a1;
  v27 = 0;
  v4 = (char *)operator new(0x20uLL);
  *a1 = v4;
  a1[1] = v4;
  a1[2] = v4 + 32;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> const*,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> const*,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>*>((uint64_t)v29, (uint64_t)&v30, (uint64_t)v4);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v29);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v24);
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v21;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v21 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v8);
        v19 = 7;
        CoreML::ModelStructure::Path::appendComponent((uint64_t)a1, (uint64_t)v18);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v18);
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String"));
        v10 = __p;
        *(_QWORD *)v15 = v13;
        *(_QWORD *)&v15[7] = *(_QWORD *)((char *)&v13 + 7);
        v11 = HIBYTE(v13);
        __p = 0;
        v13 = 0uLL;
        v14 = v10;
        v16 = v11;
        v17 = 8;
        CoreML::ModelStructure::Path::appendComponent((uint64_t)a1, (uint64_t)&v14);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v14);
        if (SHIBYTE(v13) < 0)
          operator delete(__p);
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
    }
    while (v6);
  }

}

void sub_19C7D2EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  void *v37;
  uint64_t v38;

  *(_QWORD *)(v38 - 128) = v36;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 128));

  _Unwind_Resume(a1);
}

void std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor(v3 - 32);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E3D64C38[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 24) = v3;
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> const*,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> const*,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::__copy_constructor(a3 + v6, a1 + v6);
      v6 += 32;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void ___ZN12_GLOBAL__N_114componentTypesEv_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[9];
  _QWORD v12[10];

  v12[9] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Root");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v0;
  v12[0] = &unk_1E3DA1DC8;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Program");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v11[1] = v1;
  v12[1] = &unk_1E3DA1DE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Function");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v11[2] = v2;
  v12[2] = &unk_1E3DA1DF8;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Block");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v11[3] = v3;
  v12[3] = &unk_1E3DA1E10;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Operation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v11[4] = v4;
  v12[4] = &unk_1E3DA1E28;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NeuralNetwork");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v11[5] = v5;
  v12[5] = &unk_1E3DA1E40;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Layer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11[6] = v6;
  v12[6] = &unk_1E3DA1E58;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Pipeline");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11[7] = v7;
  v12[7] = &unk_1E3DA1E70;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "SubModel");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v11[8] = v8;
  v12[8] = &unk_1E3DA1E88;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, v11, 9);
  v9 = objc_claimAutoreleasedReturnValue();

}

void sub_19C7D3354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v10 = v7;

  _Unwind_Resume(a1);
}

void sub_19C7D35F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7D41A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void sub_19C7D43F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7D4A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  uint64_t v30;
  void *v32;
  void *v33;

  if (__p)
    operator delete(__p);
  v32 = *(void **)(v30 - 136);
  if (v32)
  {
    *(_QWORD *)(v30 - 128) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(v30 - 112);
  if (v33)
  {
    *(_QWORD *)(v30 - 104) = v33;
    operator delete(v33);
  }
  if (a11)
    operator delete(a11);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_19C7D4C9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_19C7D517C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C7D5390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7D5A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  void *v28;
  void *v29;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);

  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_19C7D5CA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

void sub_19C7D5E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)MLE5InputPortBinder;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19C7D613C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7D645C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7D6630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7D67A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7D6914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7D69FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CoreML::NNCompiler::MLShapeInfo::getShape(CoreML::NNCompiler::MLShapeInfo *this)
{
  int v1;

  if (this)
  {
    v1 = *((_DWORD *)this + 18);
    if (!v1)
      return (uint64_t)this + 8;
  }
  else
  {
    v1 = MEMORY[0x48];
  }
  if (v1 != 1)
    std::__throw_bad_variant_access[abi:ne180100]();
  return (uint64_t)this + 8;
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<_KDInterval>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C7D7250(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::NNCompiler::MLImageShapeInfo::MLImageShapeInfo(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v9;
  _QWORD *v10;
  __int128 v12;
  uint64_t v13;

  if (a4 == 10 || a4 == 40)
    v9 = 1;
  else
    v9 = 3;
  v10 = operator new(0x20uLL);
  *v10 = 1;
  v10[1] = v9;
  v10[2] = a3;
  v10[3] = a2;
  v13 = 0;
  v12 = 0uLL;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v12, v10, (uint64_t)(v10 + 4), 4uLL);
  *(_OWORD *)a1 = v12;
  *(_QWORD *)(a1 + 16) = v13;
  *(_DWORD *)(a1 + 48) = 0;
  operator delete(v10);
  *(_DWORD *)(a1 + 56) = a4;
  return a1;
}

void sub_19C7D7318(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<long long>>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<long long>>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    std::vector<std::vector<long long>>::__swap_out_circular_buffer(v2, v5);
    return (_QWORD *)std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

_QWORD *CoreML::NNCompiler::MLEnumeratedShape::MLEnumeratedShape(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::vector<long long>>::__init_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>((uint64_t)(a1 + 3), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  return a1;
}

void sub_19C7D7434(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<long long>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<long long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t std::vector<std::vector<long long>>::__init_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[3];
  char v11;
  _QWORD *v12;
  _QWORD *v13;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<long long>>>(a4);
    v8 = v7;
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[3 * v9];
    v13 = v7;
    v12 = v7;
    v10[0] = v6 + 2;
    v10[1] = &v12;
    v10[2] = &v13;
    v11 = 0;
    if (a2 != a3)
    {
      do
      {
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v7, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
        v7 = v13 + 3;
        v13 += 3;
        a2 += 24;
      }
      while (a2 != a3);
      v8 = v7;
    }
    v11 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::vector<long long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v6[1] = v8;
  }
  return result;
}

void sub_19C7D75D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::vector<long long>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v2 - 16) = v5;
          operator delete(v5);
        }
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<long long>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

_QWORD *std::vector<std::vector<long long>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v2[2];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<long long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t CoreML::NNCompiler::MLImageShapeInfo::MLImageShapeInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, int a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int v26;
  __int128 v30;
  void *__p[2];
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;
  void **v35[3];
  void **v36;
  char *v37;
  unint64_t v38;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  std::vector<std::vector<long long>>::reserve(&v36, ((char *)a4[1] - (char *)*a4) >> 4);
  v26 = a5;
  if (a5 == 10 || a5 == 40)
    v8 = 1;
  else
    v8 = 3;
  v9 = *a4;
  v10 = a4[1];
  if (*a4 != v10)
  {
    do
    {
      v11 = *v9;
      v12 = v9[1];
      v13 = operator new(0x20uLL);
      v14 = v13 + 4;
      *v13 = 1;
      v13[1] = v8;
      v13[2] = v12;
      v13[3] = v11;
      *(_QWORD *)&v15 = v13;
      *((_QWORD *)&v15 + 1) = v13 + 4;
      v16 = v37;
      if ((unint64_t)v37 >= v38)
      {
        v30 = v15;
        v18 = 0xAAAAAAAAAAAAAAABLL * ((v37 - (char *)v36) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v38 - (_QWORD)v36) >> 3) > v19)
          v19 = 0x5555555555555556 * ((uint64_t)(v38 - (_QWORD)v36) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (_QWORD)v36) >> 3) >= 0x555555555555555)
          v20 = 0xAAAAAAAAAAAAAAALL;
        else
          v20 = v19;
        *((_QWORD *)&v33 + 1) = &v38;
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<long long>>>(v20);
        v22 = &v21[24 * v18];
        __p[0] = v21;
        __p[1] = v22;
        *(_QWORD *)&v33 = &v21[24 * v23];
        *(_OWORD *)v22 = v30;
        *((_QWORD *)v22 + 2) = v14;
        v32 = v22 + 24;
        std::vector<std::vector<long long>>::__swap_out_circular_buffer(&v36, __p);
        v17 = v37;
        std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        *(_OWORD *)v37 = v15;
        *((_QWORD *)v16 + 2) = v14;
        v17 = v16 + 24;
      }
      v37 = v17;
      v9 += 2;
    }
    while (v9 != v10);
  }
  v24 = (char *)operator new(0x20uLL);
  v35[1] = (void **)(v24 + 32);
  v35[2] = (void **)(v24 + 32);
  *(_QWORD *)v24 = 1;
  *((_QWORD *)v24 + 1) = v8;
  *((_QWORD *)v24 + 2) = a3;
  *((_QWORD *)v24 + 3) = a2;
  v35[0] = (void **)v24;
  CoreML::NNCompiler::MLEnumeratedShape::MLEnumeratedShape(__p, (uint64_t)v35, (uint64_t *)&v36);
  operator delete(v24);
  v35[0] = (void **)&v36;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](v35);
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 16) = v32;
  __p[0] = 0;
  __p[1] = 0;
  *(_OWORD *)(a1 + 24) = v33;
  *(_QWORD *)(a1 + 40) = v34;
  v32 = 0;
  v33 = 0uLL;
  v34 = 0;
  *(_DWORD *)(a1 + 48) = 2;
  v36 = (void **)&v33;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&v36);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 56) = v26;
  return a1;
}

void sub_19C7D79C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;
  uint64_t v25;

  operator delete(v24);
  a24 = v25 - 112;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

void std::vector<CoreML::NNCompiler::MLRangeShape::Range>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF0];
    v7 = &v4[16 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
        v10 -= 16;
        v8 -= 16;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

_QWORD *CoreML::NNCompiler::MLRangeShape::MLRangeShape(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__init_with_size[abi:ne180100]<CoreML::NNCompiler::MLRangeShape::Range*,CoreML::NNCompiler::MLRangeShape::Range*>(a1 + 3, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
  return a1;
}

void sub_19C7D7B34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__init_with_size[abi:ne180100]<CoreML::NNCompiler::MLRangeShape::Range*,CoreML::NNCompiler::MLRangeShape::Range*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C7D7BAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

double CoreML::NNCompiler::MLImageShapeInfo::MLImageShapeInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  __int128 v31;
  double result;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _OWORD v37[2];
  __int128 v38;
  _QWORD v39[3];
  char *v40;
  char *v41;
  unint64_t v42;

  v8 = *a4;
  v9 = a4[1];
  v11 = a4[2];
  v10 = a4[3];
  if (a5 == 10 || a5 == 40)
    v13 = 1;
  else
    v13 = 3;
  v14 = operator new(0x20uLL);
  *v14 = 1;
  v14[1] = v13;
  v14[2] = v11;
  v14[3] = v8;
  v15 = operator new(0x20uLL);
  v35 = a2;
  v33 = a1;
  v34 = a5;
  *v15 = 1;
  v15[1] = v13;
  v15[2] = v10;
  v15[3] = v9;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  std::vector<CoreML::NNCompiler::MLRangeShape::Range>::reserve((void **)&v40, 4uLL);
  v16 = 0;
  v18 = v41;
  v17 = v42;
  v19 = v40;
  do
  {
    v20 = v14[v16];
    v21 = v15[v16];
    if ((unint64_t)v18 >= v17)
    {
      v22 = v13;
      v23 = (v18 - v19) >> 4;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60)
      {
        v41 = v18;
        v42 = v17;
        v40 = v19;
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v17 - (_QWORD)v19) >> 3 > v24)
        v24 = (uint64_t)(v17 - (_QWORD)v19) >> 3;
      if (v17 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
        v25 = 0xFFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
        v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v25);
      else
        v26 = 0;
      v27 = (_QWORD *)(v25 + 16 * v23);
      *v27 = v20;
      v27[1] = v21;
      if (v18 == v19)
      {
        v29 = (char *)(v25 + 16 * v23);
        v13 = v22;
      }
      else
      {
        v28 = v25 + 16 * v23;
        v13 = v22;
        do
        {
          v29 = (char *)(v28 - 16);
          *(_OWORD *)(v28 - 16) = *((_OWORD *)v18 - 1);
          v18 -= 16;
          v28 -= 16;
        }
        while (v18 != v19);
      }
      v17 = v25 + 16 * v26;
      v18 = (char *)(v27 + 2);
      if (v19)
        operator delete(v19);
      v19 = v29;
    }
    else
    {
      *(_QWORD *)v18 = v20;
      *((_QWORD *)v18 + 1) = v21;
      v18 += 16;
    }
    ++v16;
  }
  while (v16 != 4);
  v41 = v18;
  v42 = v17;
  v40 = v19;
  v30 = operator new(0x20uLL);
  v39[1] = v30 + 4;
  v39[2] = v30 + 4;
  *v30 = 1;
  v30[1] = v13;
  v30[2] = a3;
  v30[3] = v35;
  v39[0] = v30;
  CoreML::NNCompiler::MLRangeShape::MLRangeShape(v37, (uint64_t)v39, (uint64_t)&v40);
  operator delete(v30);
  if (v19)
  {
    v41 = v19;
    operator delete(v19);
  }
  operator delete(v15);
  operator delete(v14);
  v31 = v37[1];
  *(_OWORD *)v33 = v37[0];
  *(_OWORD *)(v33 + 16) = v31;
  result = *(double *)&v38;
  *(_OWORD *)(v33 + 32) = v38;
  *(_DWORD *)(v33 + 48) = 1;
  *(_DWORD *)(v33 + 56) = v34;
  return result;
}

void sub_19C7D7E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  operator delete(v27);
  if (v26)
    operator delete(v26);
  operator delete(v25);
  operator delete(v24);
  _Unwind_Resume(a1);
}

uint64_t ModelKeyServerAPIFetchKeyResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  ModelKeyServerAPISignedKey *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 0u:
        v17 = 0;
        do
        {
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 == -1 || v19 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
            goto LABEL_39;
          }
          v20 = v19 + 1;
          v21 = *(char *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v20;
          if ((v21 & 0x80000000) == 0)
            break;
        }
        while (v17++ <= 8);
        goto LABEL_39;
      case 1u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 16;
        goto LABEL_31;
      case 2u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 24;
        goto LABEL_31;
      case 3u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 48;
LABEL_31:
        v26 = *(void **)(a1 + v25);
        *(_QWORD *)(a1 + v25) = v24;

        goto LABEL_39;
      case 4u:
        objc_msgSend((id)a1, "clearOneofValuesForKey");
        *(_BYTE *)(a1 + 56) |= 1u;
        *(_DWORD *)(a1 + 8) = 1;
        v27 = objc_alloc_init(ModelKeyServerAPISignedKey);
        objc_storeStrong((id *)(a1 + 40), v27);
        if (!PBReaderPlaceMark() || (ModelKeyServerAPISignedKeyReadFrom((uint64_t)v27, a2) & 1) == 0)
          goto LABEL_41;
        goto LABEL_37;
      case 5u:
        objc_msgSend((id)a1, "clearOneofValuesForKey");
        *(_BYTE *)(a1 + 56) |= 1u;
        *(_DWORD *)(a1 + 8) = 2;
        v27 = objc_alloc_init(ModelKeyServerAPIRawKey);
        objc_storeStrong((id *)(a1 + 32), v27);
        if (PBReaderPlaceMark() && ModelKeyServerAPIRawKeyReadFrom((uint64_t)v27, a2))
        {
LABEL_37:
          PBReaderRecallMark();

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_39;
    }
  }
}

void sub_19C7D9274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C7D9450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19C7D9D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19C7DA168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C7DA2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C7DA390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C7DA448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C7DA500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C7DA5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C7DA670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C7DA728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getTRIFactorClass_block_invoke(uint64_t a1)
{
  TrialProtoLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("TRIFactor");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getTRIFactorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    TrialProtoLibrary();
  }
}

void TrialProtoLibrary()
{
  void *v0;

  if (!TrialProtoLibraryCore_frameworkLibrary)
  {
    TrialProtoLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!TrialProtoLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

void __getTRIFileClass_block_invoke(uint64_t a1)
{
  uint64_t v2;

  TrialProtoLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("TRIFile");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getTRIFileClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = abort_report_np();
    __getTRILevelClass_block_invoke(v2);
  }
}

void __getTRILevelClass_block_invoke(uint64_t a1)
{
  uint64_t v2;

  TrialProtoLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("TRILevel");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getTRILevelClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = abort_report_np();
    __getTRIFactorLevelClass_block_invoke(v2);
  }
}

void __getTRIFactorLevelClass_block_invoke(uint64_t a1)
{
  uint64_t v2;

  TrialProtoLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("TRIFactorLevel");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getTRIFactorLevelClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = abort_report_np();
    __getTRIDownloadOptionsClass_block_invoke(v2);
  }
}

void __getTRIDownloadOptionsClass_block_invoke(uint64_t a1)
{
  TrialLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("TRIDownloadOptions");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getTRIDownloadOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    TrialLibrary();
  }
}

void TrialLibrary()
{
  void *v0;

  if (!TrialLibraryCore_frameworkLibrary)
  {
    TrialLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!TrialLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

void __getTRIExperimentIdentifiersClass_block_invoke(uint64_t a1)
{
  uint64_t v2;

  TrialLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("TRIExperimentIdentifiers");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getTRIExperimentIdentifiersClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = abort_report_np();
    __getTRIClientClass_block_invoke(v2);
  }
}

void __getTRIClientClass_block_invoke(uint64_t a1)
{
  uint64_t v2;

  TrialLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("TRIClient");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getTRIClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = abort_report_np();
    __81__MLModelCollection_endAccessingModelCollectionWithIdentifier_completionHandler___block_invoke(v2);
  }
}

uint64_t __Block_byref_object_copy__1033(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1034(uint64_t a1)
{

}

void sub_19C7DB5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char *a17, char *a18, uint64_t a19, char a20)
{
  void *v20;

  if (__p)
    operator delete(__p);
  if (a17)
  {
    a18 = a17;
    operator delete(a17);
  }
  a17 = &a20;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);

  _Unwind_Resume(a1);
}

void sub_19C7DB964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7DBDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<unsigned long>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19C7DC0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<float *>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 61)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

char *std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  char *result;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v3 = 3 * a2;
  result = (char *)operator new(24 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

void sub_19C7DC724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DASActivityClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DASActivityClass_softClass;
  v7 = get_DASActivityClass_softClass;
  if (!get_DASActivityClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DASActivityClass_block_invoke;
    v3[3] = &unk_1E3D65388;
    v3[4] = &v4;
    __get_DASActivityClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19C7DC9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t DuetActivitySchedulerLibrary()
{
  uint64_t v0;
  void *v2;

  if (DuetActivitySchedulerLibraryCore_frameworkLibrary)
    return DuetActivitySchedulerLibraryCore_frameworkLibrary;
  DuetActivitySchedulerLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = DuetActivitySchedulerLibraryCore_frameworkLibrary;
  if (!DuetActivitySchedulerLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void sub_19C7DCD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id get_DASSchedulerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DASSchedulerClass_softClass;
  v7 = get_DASSchedulerClass_softClass;
  if (!get_DASSchedulerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DASSchedulerClass_block_invoke;
    v3[3] = &unk_1E3D65388;
    v3[4] = &v4;
    __get_DASSchedulerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19C7DCE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C7DD36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void sub_19C7DD5D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7DD7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void sub_19C7DD968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLE5InputPort;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19C7DD9F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7DDA40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7DDA88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7DDAF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7DDB6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7DDBE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7DDD2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7DE2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_19C7DE48C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C7DE508(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C7DE770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C7DE814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C7DE888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C7DEA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);

  _Unwind_Resume(a1);
}

void sub_19C7DECE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C7DEFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void (**v11)(_QWORD);
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a9);

  v11[2](v11);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19C7DF194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_19C7DF2A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C7DF330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7DF39C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7DF440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7DF60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 72) = v26;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 72));
  *(_QWORD *)(v27 - 72) = &a13;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 72));
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(a19);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Archiver::_IArchiveDiskImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BE98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Archiver::_IArchiveDiskImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BE98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void sub_19C7DF918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a12 = &a15;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19C7DFBA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7DFFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char *a21,char *a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  void *v28;
  uint64_t v29;

  __cxa_free_exception(v28);
  *(_QWORD *)(v29 - 96) = &a15;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 96));
  if (__p)
    operator delete(__p);
  if (a21)
  {
    a22 = a21;
    operator delete(a21);
  }
  a21 = &a24;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }

  _Unwind_Resume(a1);
}

_QWORD *std::vector<float const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_19C7E01D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<float const*>::__init_with_size[abi:ne180100]<float const**,float const**>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C7E0248(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD v9[3];
  char v10;
  _QWORD *v11;
  _QWORD *v12;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)v6[1];
    v11 = v7;
    v12 = v7;
    v9[0] = v6 + 2;
    v9[1] = &v11;
    v9[2] = &v12;
    v10 = 0;
    if (a2 == a3)
    {
      v8 = v7;
    }
    else
    {
      v8 = v7;
      do
      {
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v8, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
        v8 = v12 + 3;
        v12 += 3;
        a2 += 24;
      }
      while (a2 != a3);
    }
    v10 = 1;
    result = (_QWORD *)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::vector<long long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
    v6[1] = v8;
  }
  return result;
}

void sub_19C7E0330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C7E03B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C7E0A54(_Unwind_Exception *a1)
{
  void *v1;

  e5rt_tensor_desc_release();
  _Unwind_Resume(a1);
}

void MIL::ValidationError::~ValidationError(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0D45EE0] + 16);
  MEMORY[0x1A1AD5408](&this[1]);
  std::runtime_error::~runtime_error(this);
}

void MIL::ParseError::~ParseError(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0D45ED0] + 16);
  MEMORY[0x1A1AD539C](&this[1]);
  std::runtime_error::~runtime_error(this);
}

void CoreML::NNCompiler::Backend::MIL::WriteProgram(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  std::__fs::filesystem::path *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string v10;
  std::string pn;
  std::string __p;
  std::string v13;
  std::__fs::filesystem::path v14;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v13, a3);
  std::__fs::filesystem::path::path[abi:ne180100]<char [10],void>(&__p, "model.mil");
  v5 = std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v13, &v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  MIL::Text::SerializerOptions::Make((MIL::Text::SerializerOptions *)v5);
  (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)v13.__r_.__value_.__l.__data_ + 88))(v13.__r_.__value_.__r.__words[0], 1);
  v6 = v13.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v14.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, v14.__pn_.__r_.__value_.__l.__data_, v14.__pn_.__r_.__value_.__l.__size_);
  else
    pn = v14.__pn_;
  (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v6 + 24))(v6, &pn);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  (*(void (**)(void))(*(_QWORD *)v13.__r_.__value_.__l.__data_ + 112))();
  if (*(char *)(a4 + 23) < 0)
  {
    v8 = *(_QWORD *)(a4 + 8);
    if (!v8)
      goto LABEL_17;
    v7 = v13.__r_.__value_.__r.__words[0];
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a4, v8);
  }
  else
  {
    if (!*(_BYTE *)(a4 + 23))
      goto LABEL_17;
    v7 = v13.__r_.__value_.__r.__words[0];
    v10 = *(std::string *)a4;
  }
  (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v7 + 56))(v7, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
LABEL_17:
  MIL::Text::SerializeToFile();
  v9 = v13.__r_.__value_.__r.__words[0];
  v13.__r_.__value_.__r.__words[0] = 0;
  if (v9)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
  if (SHIBYTE(v14.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__pn_.__r_.__value_.__l.__data_);
}

void sub_19C7E0FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a14 < 0)
    operator delete(__p);
  if (a28)
    (*(void (**)(uint64_t))(*(_QWORD *)a28 + 8))(a28);
  if (*(char *)(v33 - 33) < 0)
    operator delete(*(void **)(v33 - 56));
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [10],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_19C7E10A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void CoreML::NNCompiler::Backend::MIL::WriteProgram(uint64_t *a1, uint64_t a2, objc_object *a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  std::string v13;
  uint64_t v14;
  std::string __p;

  if ((*(unsigned int (**)(Class))(*(_QWORD *)a3[1].isa + 48))(a3[1].isa) == 1)
  {
    v8 = *a1;
    *a1 = 0;
    v14 = v8;
    +[MLCompilerNeuralNetworkOutput outputWithMILProgram:](MLCompilerNeuralNetworkOutput, "outputWithMILProgram:", &v14);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    setCompiledObject(&__p, a3, v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);

    v10 = v14;
    v14 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  else
  {
    v11 = *a1;
    isa = a3[1].isa;
    if (*((char *)isa + 55) < 0)
      std::string::__init_copy_ctor_external(&v13, *((const std::string::value_type **)isa + 4), *((_QWORD *)isa + 5));
    else
      v13 = *(std::string *)((char *)isa + 32);
    CoreML::NNCompiler::Backend::MIL::WriteProgram(v11, a2, (char *)&v13, a4);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_19C7E11CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(a1);
}

void setCompiledObject(std::string *a1, objc_object *a2, void *a3)
{
  id v5;
  Class isa;
  std::string::size_type size;
  std::string *p_p;
  std::string *v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  void *v13[2];
  unsigned __int8 v14;
  std::string v15;
  std::string __p;

  v5 = a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "CompiledObject");
  (*(void (**)(Class, std::string *, id))(*(_QWORD *)a2[1].isa + 32))(a2[1].isa, &__p, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  isa = a2[1].isa;
  if (*((char *)isa + 55) < 0)
    std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)isa + 4), *((_QWORD *)isa + 5));
  else
    v15 = *(std::string *)((char *)isa + 32);
  std::string::basic_string[abi:ne180100]<0>(v13, "CompiledObject");
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v15;
    else
      v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
    memmove(p_p, v9, size);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + size) = 47;
  if ((v14 & 0x80u) == 0)
    v10 = v13;
  else
    v10 = (void **)v13[0];
  if ((v14 & 0x80u) == 0)
    v11 = v14;
  else
    v11 = (std::string::size_type)v13[1];
  v12 = std::string::append(&__p, (const std::string::value_type *)v10, v11);
  *a1 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);

}

void sub_19C7E1390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  _Unwind_Resume(a1);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t CoreML::NNCompiler::Backend::MIL::OptimizeProgram(CoreML::NNCompiler::Backend::MIL *this, const IRProgram *a2)
{
  MIL::Passes::FlattenBlockNamespace *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (MIL::Passes::FlattenBlockNamespace *)MIL::PassManager::Make(this);
  MIL::Passes::FlattenBlockNamespace::Make(v3);
  v8 = v7;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v8);
  v4 = v8;
  v8 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  (*(void (**)(uint64_t, const IRProgram *))(*(_QWORD *)v6 + 24))(v6, a2);
  result = v6;
  if (v6)
    return (*(uint64_t (**)())(*(_QWORD *)v6 + 8))();
  return result;
}

void sub_19C7E1550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  std::unique_ptr<MIL::Passes::FlattenBlockNamespace>::reset[abi:ne180100](&a11);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::CopyWeights(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  std::string *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  void *v31;
  char v32;
  void *v33;
  BOOL v34;
  std::runtime_error *v35;
  void *v36;
  void *v37;
  BOOL v38;
  std::runtime_error *v39;
  id v40;
  std::string *v41;
  std::string::size_type v42;
  char v43;
  id v44;
  std::string *v45;
  std::string::size_type v46;
  char v47;
  void *v48;
  BOOL v49;
  std::runtime_error *exception;
  id v51;
  std::string *v52;
  std::string::size_type v53;
  char v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  id v64;
  std::string v65;
  id v66;
  std::string v67;
  _QWORD v68[4];

  v68[2] = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned __int8 *)a1 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = a1[1];
  if (v3 && *a2 != a2[1])
  {
    if (v4 >= 0)
      v7 = a1;
    else
      v7 = (uint64_t *)*a1;
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", v7, 1, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "URLByAppendingPathComponent:", CFSTR("weights"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v55 = v9;
    objc_msgSend(v9, "URLByStandardizingPath");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "path");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "stringByAppendingString:", CFSTR("/"));
    v60 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = *(_QWORD *)(a3 + 8);
    if (*(char *)(v12 + 55) < 0)
      std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(v12 + 32), *(_QWORD *)(v12 + 40));
    else
      v67 = *(std::string *)(v12 + 32);
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v67;
    else
      v13 = (std::string *)v67.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", v13, 1, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "URLByAppendingPathComponent:", CFSTR("weights"));
    v59 = (void *)objc_claimAutoreleasedReturnValue();

    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "URLByDeletingLastPathComponent");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "path");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v66 = 0;
    objc_msgSend(v15, "attributesOfItemAtPath:error:", v17, &v66);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v66;

    if (!v57)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "Failed to obtain attributes of .mlmodelc directory.");
      objc_msgSend(v18, "localizedDescription");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = v48 == 0;

      if (!v49)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v65.__r_.__value_.__l.__data_, (const void **)&v67.__r_.__value_.__l.__data_, " Error description: ");
        objc_msgSend(v18, "localizedDescription");
        v51 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v52 = std::string::append(&v65, (const std::string::value_type *)objc_msgSend(v51, "UTF8String"));
        v53 = v52->__r_.__value_.__r.__words[0];
        v68[0] = v52->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v68 + 7) = *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1] + 7);
        v54 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
        v67.__r_.__value_.__r.__words[0] = v53;
        v67.__r_.__value_.__l.__size_ = v68[0];
        *(std::string::size_type *)((char *)&v67.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)&v67.__r_.__value_.__s + 23) = v54;

        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &v67);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v19 = *MEMORY[0x1E0CB2A90];
    objc_msgSend(v57, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2A90]);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = *MEMORY[0x1E0CB2A50];
    objc_msgSend(v57, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2A50]);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v58, v19, v56, v20, 0);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v62, "removeItemAtURL:error:", v59, 0);
    objc_msgSend(v62, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v59, 1, v61, 0);
    v21 = *a2;
    v22 = a2[1];
    while (v21 != v22)
    {
      v23 = v21;
      if (*((char *)v21 + 23) < 0)
        v23 = (uint64_t *)*v21;
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", v23, 0, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "URLByStandardizingPath");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "path");
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      if (!objc_msgSend(v26, "hasPrefix:", v60))
      {
        v36 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v36, "Compilation error: model references file outside of weights folder");
        __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      objc_msgSend(v26, "substringFromIndex:", objc_msgSend(v60, "length"));
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "URLByAppendingPathComponent:", v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "URLByDeletingLastPathComponent");
      v29 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v29, 1, v61, 0);

      v64 = v18;
      LOBYTE(v29) = objc_msgSend(v62, "copyItemAtURL:toURL:error:", v24, v28, &v64);
      v30 = v64;

      if ((v29 & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v67, "Failed to copy weights during compilation.");
        objc_msgSend(v30, "localizedDescription");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = v37 == 0;

        if (!v38)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v65.__r_.__value_.__l.__data_, (const void **)&v67.__r_.__value_.__l.__data_, " Error description: ");
          objc_msgSend(v30, "localizedDescription");
          v44 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v45 = std::string::append(&v65, (const std::string::value_type *)objc_msgSend(v44, "UTF8String"));
          v46 = v45->__r_.__value_.__r.__words[0];
          v68[0] = v45->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v68 + 7) = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
          v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v67.__r_.__value_.__l.__data_);
          v67.__r_.__value_.__r.__words[0] = v46;
          v67.__r_.__value_.__l.__size_ = v68[0];
          *(std::string::size_type *)((char *)&v67.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v68 + 7);
          *((_BYTE *)&v67.__r_.__value_.__s + 23) = v47;

          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v65.__r_.__value_.__l.__data_);
        }
        v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v39, &v67);
        __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      objc_msgSend(v28, "path");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v63 = v30;
      v32 = objc_msgSend(v62, "setAttributes:ofItemAtPath:error:", v61, v31, &v63);
      v18 = v63;

      if ((v32 & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v67, "Failed to set owner and group on copied weights during compilation.");
        objc_msgSend(v18, "localizedDescription");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = v33 == 0;

        if (!v34)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v65.__r_.__value_.__l.__data_, (const void **)&v67.__r_.__value_.__l.__data_, " Error description: ");
          objc_msgSend(v18, "localizedDescription");
          v40 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v41 = std::string::append(&v65, (const std::string::value_type *)objc_msgSend(v40, "UTF8String"));
          v42 = v41->__r_.__value_.__r.__words[0];
          v68[0] = v41->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v68 + 7) = *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7);
          v43 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v67.__r_.__value_.__l.__data_);
          v67.__r_.__value_.__r.__words[0] = v42;
          v67.__r_.__value_.__l.__size_ = v68[0];
          *(std::string::size_type *)((char *)&v67.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v68 + 7);
          *((_BYTE *)&v67.__r_.__value_.__s + 23) = v43;

          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v65.__r_.__value_.__l.__data_);
        }
        v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v35, &v67);
        __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }

      v21 += 3;
    }

  }
}

void sub_19C7E1CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  void *v36;

  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);

  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void **a1, const void **a2, char *__s)
{
  size_t v6;
  size_t v7;
  uint64_t result;
  const void *v9;
  char *v10;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = strlen(__s);
  result = std::string::basic_string[abi:ne180100]((uint64_t)a1, v6 + v7);
  if (*((char *)a1 + 23) < 0)
    a1 = (void **)*a1;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(a1, v9, v6);
  }
  v10 = (char *)a1 + v6;
  if (v7)
    result = (uint64_t)memmove(v10, __s, v7);
  v10[v7] = 0;
  return result;
}

void sub_19C7E2194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void sub_19C7E23E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7E2A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  uint64_t v30;
  void *v32;
  void *v33;

  if (__p)
    operator delete(__p);
  v32 = *(void **)(v30 - 136);
  if (v32)
  {
    *(_QWORD *)(v30 - 128) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(v30 - 112);
  if (v33)
  {
    *(_QWORD *)(v30 - 104) = v33;
    operator delete(v33);
  }
  if (a11)
    operator delete(a11);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);

  _Unwind_Resume(a1);
}

void sub_19C7E2CE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C7E33AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_19C7E3570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19C7E37C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7E3B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);

  _Unwind_Resume(a1);
}

void sub_19C7E3E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_19C7E41A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C7E4234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLAppleGazetteer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19C7E45C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void (**v11)(_QWORD);
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a10);

  v11[2](v11);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19C7E4B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  CoreML::Specification::CoreMLModels::Gazetteer::~Gazetteer((CoreML::Specification::CoreMLModels::Gazetteer *)&a17);
  _Unwind_Resume(a1);
}

void sub_19C7E595C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45)
{
  void *v45;
  void *v46;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  _Unwind_Resume(a1);
}

__n128 google::protobuf::internal::ArenaStringPtr::SetNoArena(__int128 **a1, __n128 *a2)
{
  __int128 *v3;
  __n128 result;
  uint64_t v6;

  v3 = *a1;
  if (*a1 == &google::protobuf::internal::fixed_address_empty_string)
  {
    v6 = operator new();
    result = *a2;
    *(__n128 *)v6 = *a2;
    *(_QWORD *)(v6 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *a1 = (__int128 *)v6;
  }
  else
  {
    if (*((char *)v3 + 23) < 0)
      operator delete(*(void **)v3);
    result = *a2;
    *((_QWORD *)v3 + 2) = a2[1].n128_u64[0];
    *v3 = (__int128)result;
    a2[1].n128_u8[7] = 0;
    a2->n128_u8[0] = 0;
  }
  return result;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void CoreML::Specification::StringVector::add_vector(CoreML::Specification::StringVector *this, const char *a2)
{
  google::protobuf::Arena **v3;
  int *v4;
  int v5;
  int v6;
  google::protobuf::Arena *v7;
  google::protobuf::Arena *Aligned;
  google::protobuf::Arena **v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (google::protobuf::Arena **)((char *)this + 16);
  v4 = (int *)*((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *((_DWORD *)this + 6);
    v6 = *v4;
    if (v5 < *v4)
    {
      *((_DWORD *)this + 6) = v5 + 1;
      goto LABEL_15;
    }
    if (v6 != *((_DWORD *)this + 7))
    {
LABEL_9:
      *v4 = v6 + 1;
      v7 = *v3;
      if (*v3)
      {
        *((_QWORD *)Aligned + 1) = 0;
        *((_QWORD *)Aligned + 2) = 0;
        *(_QWORD *)Aligned = 0;
        v9 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
        *v9 = Aligned;
        v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
        v10 = (unint64_t *)((char *)v7 + 32);
        do
          v11 = __ldxr(v10);
        while (__stxr((unint64_t)v9, v10));
        v9[2] = (google::protobuf::Arena *)v11;
      }
      else
      {
        Aligned = (google::protobuf::Arena *)operator new();
        *((_QWORD *)Aligned + 1) = 0;
        *((_QWORD *)Aligned + 2) = 0;
        *(_QWORD *)Aligned = 0;
      }
      v12 = *((_QWORD *)this + 4);
      v13 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v13 + 1;
      *(_QWORD *)(v12 + 8 * v13 + 8) = Aligned;
LABEL_15:
      JUMPOUT(0x1A1AD5EACLL);
    }
  }
  else
  {
    v5 = *((_DWORD *)this + 6);
    v6 = *((_DWORD *)this + 7);
  }
  if (v5 <= v6)
  {
    google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::StringVector *)((char *)this + 16), v6 - v5 + 1);
    v4 = (int *)*((_QWORD *)this + 4);
  }
  v6 = *v4;
  goto LABEL_9;
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<std::string>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

void google::protobuf::internal::arena_destruct_object<std::string>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *google::protobuf::Map<std::string,std::string>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  google::protobuf::Arena *v4;
  _QWORD *Aligned;
  uint64_t v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x1E0DE4EE8], 32);
  else
    Aligned = operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v11 = *(_QWORD *)(a1 + 40);
  v7 = v11;
  v12 = 0;
  v9 = &v10;
  v10 = 0;
  Aligned[1] = 0;
  Aligned[2] = v7;
  Aligned[3] = 0;
  *Aligned = Aligned + 1;
  std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy((uint64_t)&v9, 0);
  google::protobuf::Map<std::string,std::string>::InnerMap::CopyListToTree(*(uint64_t **)(a1 + 32), a2, v6);
  result = google::protobuf::Map<std::string,std::string>::InnerMap::CopyListToTree(*(uint64_t **)(a1 + 32), a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (uint64_t **)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__find_equal<std::string *>(a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)google::protobuf::Map<std::string,std::string>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(*(google::protobuf::Arena **)(a1 + 16));
    v6[4] = *a3;
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__find_equal<std::string *>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (_QWORD *)v4[4];
        if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, v8))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

google::protobuf::Arena **google::protobuf::Map<std::string,std::string>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(google::protobuf::Arena *a1)
{
  if (a1)
    return google::protobuf::Arena::AllocateAligned(a1, MEMORY[0x1E0DE4EE8], 40);
  else
    return (google::protobuf::Arena **)operator new(0x28uLL);
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[3] = (uint64_t *)((char *)a1[3] + 1);
  return result;
}

BOOL google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

void std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy(a1, *a2);
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy(a1, a2[1]);
    if (!*(_QWORD *)(a1 + 16))
      operator delete(a2);
  }
}

uint64_t *google::protobuf::Map<std::string,std::string>::InnerMap::CopyListToTree(uint64_t *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;

  v3 = (_QWORD *)result[a2];
  if (v3)
  {
    do
    {
      v6 = v3;
      result = std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(a3, v3, (uint64_t *)&v6);
      v5 = (_QWORD *)v3[4];
      v3[4] = 0;
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

void google::protobuf::Map<std::string,std::string>::InnerMap::Resize(uint64_t a1, uint64_t a2, size_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  google::protobuf::Arena **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18[3];

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2;
  v6 = *(_QWORD **)(a1 + 32);
  v7 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(*(google::protobuf::Arena **)(a1 + 40), a2, a3);
  bzero(v7, 8 * a2);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 32) = v7;
  while (v8 < v5)
  {
    v9 = v6[v8];
    if (v9)
    {
      if (v9 == v6[v8 ^ 1])
      {
        v12 = *(_QWORD **)v9;
        do
        {
          v13 = (_BYTE *)v12[4];
          v14 = google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(a1, v13);
          google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v18, a1, v14, v13);
          v15 = (_QWORD *)v12[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v12[2];
              v17 = *v16 == (_QWORD)v12;
              v12 = v16;
            }
            while (!v17);
          }
          v12 = v16;
        }
        while (v16 != (_QWORD *)(v9 + 8));
        ++v8;
        google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(*(_QWORD *)(a1 + 40), (_QWORD **)v9);
      }
      else
      {
        do
        {
          v10 = *(_QWORD *)(v9 + 32);
          v11 = google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(a1, (_BYTE *)v9);
          google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v18, a1, v11, (_QWORD *)v9);
          v9 = v10;
        }
        while (v10);
      }
    }
    ++v8;
  }
  if (!*(_QWORD *)(a1 + 40))
    operator delete(v6);
}

google::protobuf::Arena **google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(google::protobuf::Arena *a1, uint64_t a2, size_t __sz)
{
  if (a1)
    return google::protobuf::Arena::AllocateAligned(a1, MEMORY[0x1E0DE4EE8], 8 * a2);
  else
    return (google::protobuf::Arena **)operator new(8 * a2);
}

void google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(uint64_t a1, _QWORD **a2)
{
  std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy((uint64_t)a2, a2[1]);
  if (!a1)
    operator delete(a2);
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(_QWORD **)(v3 + 32), a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2
    || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, *(_QWORD **)(v5 + 32)))
  {
    return v2;
  }
  return v5;
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureDescription>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void CoreML::addMemoryLayoutToProgram(uint64_t a1, _QWORD *a2, uint64_t a3, void *a4, void *a5)
{
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _BOOL4 v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t EnumeratedShapes;
  unsigned __int8 *i;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  unsigned __int8 **v29;
  unsigned __int8 *j;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  unsigned __int8 *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  unsigned __int8 **v41;
  unsigned __int8 *k;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  __int128 v46;
  float v47;
  float v48;
  _BOOL8 v49;
  unint64_t v50;
  unint64_t v51;
  size_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  float v56;
  unint64_t v57;
  unint64_t v58;
  _BOOL8 v59;
  unint64_t v60;
  unint64_t v61;
  size_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t m;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  std::__shared_weak_count *v75;
  MIL::Builder::FunctionBuilder *v76;
  unint64_t *v77;
  unint64_t v78;
  id v79;
  id v80;
  MIL::Builder::Variable *Input;
  uint64_t Type;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  int v86;
  uint64_t OperationsByInput;
  MIL::IROpset *Opset;
  uint64_t v89;
  MIL::Builder::OperationBuilder *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t Operator;
  unsigned __int8 *v95;
  std::string *v96;
  MIL::Builder::Variable *Output;
  MIL::IRValueType *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *size;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t n;
  void *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  MIL::Builder::FunctionBuilder *v130;
  unint64_t *v131;
  unint64_t v132;
  id v133;
  id v134;
  MIL::IROpset *v135;
  MIL::Builder::Variable *Variable;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  int v141;
  void *v142;
  uint64_t v143;
  unsigned __int8 *v144;
  std::string *v145;
  uint64_t v146;
  _QWORD *ii;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint8x8_t v153;
  _QWORD *v154;
  _QWORD *jj;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  float v161;
  _BOOL8 v162;
  unint64_t v163;
  unint64_t v164;
  size_t v165;
  uint64_t v166;
  _QWORD *v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  MIL::Builder::Variable *ArgumentForParameter;
  uint64_t Name;
  __int128 v176;
  MIL::Builder::OperationBuilder *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  std::string::size_type kk;
  std::string::size_type v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  int v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  NSObject *v239;
  MIL::Attributes::FlexibleShapeInfo *v240;
  void *v241;
  std::runtime_error *v242;
  void *exception;
  std::runtime_error *v244;
  std::string *v245;
  __int128 v246;
  uint64_t Location;
  std::string *v248;
  std::string::size_type v249;
  std::string *v250;
  __int128 v251;
  void *v252;
  _QWORD *v253;
  uint64_t v254;
  id v256;
  id v257;
  unint64_t v258;
  unint64_t v259;
  void *v260;
  unsigned __int8 *v261;
  id v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *obj;
  id obja;
  uint8_t buf[16];
  __int128 v272;
  float v273;
  MIL::Builder::FunctionBuilder *v274;
  std::__shared_weak_count *v275;
  MIL::Builder::FunctionBuilder *v276[2];
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  MIL::Builder::FunctionBuilder *v281;
  std::__shared_weak_count *v282;
  MIL::Builder::FunctionBuilder *v283[2];
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  _QWORD v288[3];
  MIL::Builder::BlockBuilder *v289;
  std::__shared_weak_count *v290;
  MIL::Builder::FunctionBuilder *v291;
  MIL::Builder::FunctionBuilder *v292;
  MIL::Builder::ProgramBuilder *v293;
  std::__shared_weak_count *v294;
  char v295[8];
  uint64_t v296;
  std::__shared_weak_count *v297;
  MIL::Attributes::FlexibleShapeInfo *v298;
  uint64_t v299;
  std::__shared_weak_count *v300;
  std::string v301;
  std::string v302;
  std::__shared_weak_count *v303;
  MIL::Builder::OperationBuilder *v304;
  std::__shared_weak_count *v305;
  MIL::Builder::OperationBuilder *v306;
  std::__shared_weak_count *v307;
  MIL::Builder::OperationBuilder *v308;
  std::__shared_weak_count *v309;
  std::string v310;
  MIL::Builder::OperationBuilder *v311;
  std::__shared_weak_count *v312;
  MIL::Builder::OperationBuilder *v313;
  std::__shared_weak_count *v314;
  std::string __p;
  std::string v316;
  _BYTE v317[128];
  _BYTE v318[128];
  uint64_t v319;

  v319 = *MEMORY[0x1E0C80C00];
  v257 = a4;
  v256 = a5;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, a3);
  v10 = v9;
  if (!v9)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19C486000, v18, OS_LOG_TYPE_INFO, "Not adding memory layout to program because it doesn't have the specified entry point function.", buf, 2u);
    }
LABEL_17:

    *(_OWORD *)a1 = *(_OWORD *)a2;
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_411;
  }
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 128))(v9);
  v254 = v10;
  v12 = v11 + 1;
  v13 = (_QWORD *)*v11;
  if ((_QWORD *)*v11 != v11 + 1)
  {
    while (!MIL::IRValueType::TryCastAsStateType((MIL::IRValueType *)v13[7]))
    {
      v14 = (_QWORD *)v13[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v13[2];
          v16 = *v15 == (_QWORD)v13;
          v13 = v15;
        }
        while (!v16);
      }
      v13 = v15;
      if (v15 == v12)
        goto LABEL_10;
    }
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19C486000, v18, OS_LOG_TYPE_INFO, "Not adding memory layout to program due to the inputs containing one or more states.", buf, 2u);
    }
    goto LABEL_17;
  }
LABEL_10:
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  MIL::Attributes::FlexibleShapeInfo::Make();
  MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes(v298);
  if (*(_QWORD *)buf)
    v17 = *(_QWORD *)(*(_QWORD *)buf + 24) != 0;
  else
    v17 = 0;
  if (*(_QWORD *)&buf[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 16))(*(_QWORD *)&buf[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
      if (v17)
        goto LABEL_24;
      goto LABEL_28;
    }
  }
  if (!v17)
  {
LABEL_28:
    EnumeratedShapes = MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v298);
    v253 = a2;
    *(_OWORD *)buf = 0u;
    v272 = 0u;
    v273 = *(float *)(EnumeratedShapes + 32);
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)buf, *(_QWORD *)(EnumeratedShapes + 8));
    for (i = *(unsigned __int8 **)(EnumeratedShapes + 16); i; i = *(unsigned __int8 **)i)
    {
      v24 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(i + 16));
      v25 = v24;
      v26 = *(_QWORD *)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&buf[8]);
        v27.i16[0] = vaddlv_u8(v27);
        v28 = v27.u32[0];
        if (v27.u32[0] > 1uLL)
        {
          v5 = v24;
          if (v24 >= *(_QWORD *)&buf[8])
            v5 = v24 % *(_QWORD *)&buf[8];
        }
        else
        {
          v5 = (*(_QWORD *)&buf[8] - 1) & v24;
        }
        v29 = *(unsigned __int8 ***)(*(_QWORD *)buf + 8 * v5);
        if (v29)
        {
          for (j = *v29; j; j = *(unsigned __int8 **)j)
          {
            v31 = *((_QWORD *)j + 1);
            if (v31 == v25)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](j + 16, i + 16))
                goto LABEL_114;
            }
            else
            {
              if (v28 > 1)
              {
                if (v31 >= v26)
                  v31 %= v26;
              }
              else
              {
                v31 &= v26 - 1;
              }
              if (v31 != v5)
                break;
            }
          }
        }
      }
      v32 = (char *)operator new(0x50uLL);
      v33 = v32;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v272;
      __p.__r_.__value_.__s.__data_[16] = 0;
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = v25;
      if ((char)i[39] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v32 + 16), *((const std::string::value_type **)i + 2), *((_QWORD *)i + 3));
      }
      else
      {
        v34 = *((_OWORD *)i + 1);
        *((_QWORD *)v32 + 4) = *((_QWORD *)i + 4);
        *((_OWORD *)v32 + 1) = v34;
      }
      v263 = v5;
      v266 = v26;
      v259 = v25;
      *(_OWORD *)(v33 + 40) = 0u;
      v5 = (unint64_t)(v33 + 40);
      *(_OWORD *)(v33 + 56) = 0u;
      *((_DWORD *)v33 + 18) = *((_DWORD *)i + 18);
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)(v33 + 40), *((_QWORD *)i + 6));
      v261 = i;
      v35 = (unsigned __int8 *)*((_QWORD *)i + 7);
      if (v35)
      {
        obj = v33 + 56;
        do
        {
          v36 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v35 + 16));
          v37 = v36;
          v38 = *((_QWORD *)v33 + 6);
          if (v38)
          {
            v39 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
            v39.i16[0] = vaddlv_u8(v39);
            v40 = v39.u32[0];
            if (v39.u32[0] > 1uLL)
            {
              v26 = v36;
              if (v36 >= v38)
                v26 = v36 % v38;
            }
            else
            {
              v26 = (v38 - 1) & v36;
            }
            v41 = *(unsigned __int8 ***)(*(_QWORD *)v5 + 8 * v26);
            if (v41)
            {
              for (k = *v41; k; k = *(unsigned __int8 **)k)
              {
                v43 = *((_QWORD *)k + 1);
                if (v43 == v37)
                {
                  if (std::equal_to<std::string>::operator()[abi:ne180100](k + 16, v35 + 16))
                    goto LABEL_91;
                }
                else
                {
                  if (v40 > 1)
                  {
                    if (v43 >= v38)
                      v43 %= v38;
                  }
                  else
                  {
                    v43 &= v38 - 1;
                  }
                  if (v43 != v26)
                    break;
                }
              }
            }
          }
          v44 = (char *)operator new(0x40uLL);
          v45 = v44;
          v316.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
          v316.__r_.__value_.__l.__size_ = (std::string::size_type)(v33 + 56);
          v316.__r_.__value_.__s.__data_[16] = 0;
          *(_QWORD *)v44 = 0;
          *((_QWORD *)v44 + 1) = v37;
          if ((char)v35[39] < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v44 + 16), *((const std::string::value_type **)v35 + 2), *((_QWORD *)v35 + 3));
          }
          else
          {
            v46 = *((_OWORD *)v35 + 1);
            *((_QWORD *)v44 + 4) = *((_QWORD *)v35 + 4);
            *((_OWORD *)v44 + 1) = v46;
          }
          v45[5] = 0;
          v45[6] = 0;
          v45[7] = 0;
          std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v45 + 5, *((const void **)v35 + 5), *((_QWORD *)v35 + 6), (uint64_t)(*((_QWORD *)v35 + 6) - *((_QWORD *)v35 + 5)) >> 3);
          v316.__r_.__value_.__s.__data_[16] = 1;
          v47 = (float)(unint64_t)(*((_QWORD *)v33 + 8) + 1);
          v48 = *((float *)v33 + 18);
          if (!v38 || (float)(v48 * (float)v38) < v47)
          {
            v49 = (v38 & (v38 - 1)) != 0;
            if (v38 < 3)
              v49 = 1;
            v50 = v49 | (2 * v38);
            v51 = vcvtps_u32_f32(v47 / v48);
            if (v50 <= v51)
              v52 = v51;
            else
              v52 = v50;
            std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)(v33 + 40), v52);
            v38 = *((_QWORD *)v33 + 6);
            if ((v38 & (v38 - 1)) != 0)
            {
              if (v37 >= v38)
                v26 = v37 % v38;
              else
                v26 = v37;
            }
            else
            {
              v26 = (v38 - 1) & v37;
            }
          }
          v53 = *(_QWORD *)v5;
          v54 = *(_QWORD **)(*(_QWORD *)v5 + 8 * v26);
          if (v54)
          {
            *v45 = *v54;
          }
          else
          {
            *v45 = *obj;
            *obj = v45;
            *(_QWORD *)(v53 + 8 * v26) = obj;
            if (!*v45)
              goto LABEL_90;
            v55 = *(_QWORD *)(*v45 + 8);
            if ((v38 & (v38 - 1)) != 0)
            {
              if (v55 >= v38)
                v55 %= v38;
            }
            else
            {
              v55 &= v38 - 1;
            }
            v54 = (_QWORD *)(*(_QWORD *)v5 + 8 * v55);
          }
          *v54 = v45;
LABEL_90:
          v316.__r_.__value_.__r.__words[0] = 0;
          ++*((_QWORD *)v33 + 8);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v316);
LABEL_91:
          v35 = *(unsigned __int8 **)v35;
        }
        while (v35);
      }
      __p.__r_.__value_.__s.__data_[16] = 1;
      v56 = (float)(unint64_t)(*((_QWORD *)&v272 + 1) + 1);
      i = v261;
      v57 = v263;
      v58 = v266;
      if (!v266 || (float)(v273 * (float)v266) < v56)
      {
        v59 = (v266 & (v266 - 1)) != 0;
        if (v266 < 3)
          v59 = 1;
        v60 = v59 | (2 * v266);
        v61 = vcvtps_u32_f32(v56 / v273);
        if (v60 <= v61)
          v62 = v61;
        else
          v62 = v60;
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)buf, v62);
        v58 = *(_QWORD *)&buf[8];
        if ((*(_QWORD *)&buf[8] & (*(_QWORD *)&buf[8] - 1)) != 0)
        {
          if (v259 >= *(_QWORD *)&buf[8])
            v57 = v259 % *(_QWORD *)&buf[8];
          else
            v57 = v259;
        }
        else
        {
          v57 = (*(_QWORD *)&buf[8] - 1) & v259;
        }
      }
      v63 = *(_QWORD *)buf;
      v64 = *(_QWORD **)(*(_QWORD *)buf + 8 * v57);
      if (v64)
      {
        *(_QWORD *)v33 = *v64;
      }
      else
      {
        *(_QWORD *)v33 = v272;
        *(_QWORD *)&v272 = v33;
        *(_QWORD *)(v63 + 8 * v57) = &v272;
        if (!*(_QWORD *)v33)
          goto LABEL_113;
        v65 = *(_QWORD *)(*(_QWORD *)v33 + 8);
        if ((v58 & (v58 - 1)) != 0)
        {
          if (v65 >= v58)
            v65 %= v58;
        }
        else
        {
          v65 &= v58 - 1;
        }
        v64 = (_QWORD *)(*(_QWORD *)buf + 8 * v65);
      }
      *v64 = v33;
LABEL_113:
      __p.__r_.__value_.__r.__words[0] = 0;
      ++*((_QWORD *)&v272 + 1);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
LABEL_114:
      ;
    }
    v66 = *((_QWORD *)&v272 + 1);
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table((uint64_t)buf);
    if (v66 <= 1)
    {
      v210 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v254 + 128))(v254);
      v211 = v210 + 1;
      v212 = (_QWORD *)*v210;
      if ((_QWORD *)*v210 != v210 + 1)
      {
        do
        {
          v213 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v212[7] + 24))(v212[7]);
          if (!v213)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1A1AD5E28](exception, "Some IO of the program is not tensor type.");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v214 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v213 + 96))(v213);
          v215 = *(_QWORD **)v214;
          v216 = *(_QWORD **)(v214 + 8);
          while (v215 != v216)
          {
            if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v215 + 24))(*v215))
              goto LABEL_406;
            ++v215;
          }
          v217 = (_QWORD *)v212[1];
          if (v217)
          {
            do
            {
              v218 = v217;
              v217 = (_QWORD *)*v217;
            }
            while (v217);
          }
          else
          {
            do
            {
              v218 = (_QWORD *)v212[2];
              v16 = *v218 == (_QWORD)v212;
              v212 = v218;
            }
            while (!v16);
          }
          v212 = v218;
        }
        while (v218 != v211);
      }
      (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v254 + 160))(buf);
      v219 = *(_QWORD **)buf;
      v220 = *(_QWORD **)&buf[8];
      if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
      {
        v225 = 0;
      }
      else
      {
        while (2)
        {
          v221 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v219 + 24))(*v219);
          if (!v221)
          {
            v252 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1A1AD5E28](v252, "Some IO of the program is not tensor type.");
            __cxa_throw(v252, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v222 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v221 + 96))(v221);
          v223 = *(_QWORD **)v222;
          v224 = *(_QWORD **)(v222 + 8);
          while (v223 != v224)
          {
            if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v223 + 24))(*v223))
            {
              v225 = 1;
              goto LABEL_401;
            }
            ++v223;
          }
          if (++v219 != v220)
            continue;
          break;
        }
        v225 = 0;
LABEL_401:
        v219 = *(_QWORD **)buf;
      }
      if (v219)
      {
        *(_QWORD *)&buf[8] = v219;
        operator delete(v219);
      }
      if (v225)
      {
LABEL_406:
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v239 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v239, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19C486000, v239, OS_LOG_TYPE_INFO, "Not adding memory layout to program due to it being data dependent.", buf, 2u);
        }

        *(_OWORD *)a1 = *(_OWORD *)v253;
        *v253 = 0;
        v253[1] = 0;
        goto LABEL_409;
      }
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v253 + 48))(&v296);
    MEMORY[0x1A1AD5798](v295, *v253);
    MIL::Transform::ProgramTransformer::GetProgramBuilder((MIL::Transform::ProgramTransformer *)v295);
    MIL::Builder::ProgramBuilder::GetFunction();
    MIL::Builder::FunctionBuilder::SelectedSpecialization(v291);
    MIL::Builder::FunctionBuilder::GetBlock();
    MIL::Builder::BlockBuilder::GetOutputNames(v289);
    v286 = 0u;
    v287 = 0u;
    v284 = 0u;
    v285 = 0u;
    obja = v257;
    v67 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v284, v318, 16);
    if (!v67)
      goto LABEL_201;
    v264 = *(_QWORD *)v285;
    while (1)
    {
      v267 = v67;
      for (m = 0; m != v267; ++m)
      {
        if (*(_QWORD *)v285 != v264)
          objc_enumerationMutation(obja);
        objc_msgSend(obja, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v284 + 1) + 8 * m));
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v69, "type") == 5)
        {
          v70 = (std::__shared_weak_count *)v292;
          v283[0] = v291;
          v283[1] = v292;
          if (v292)
          {
            v71 = (unint64_t *)((char *)v292 + 8);
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
          if (v70)
          {
            p_shared_owners = (unint64_t *)&v70->__shared_owners_;
            do
              v74 = __ldaxr(p_shared_owners);
            while (__stlxr(v74 - 1, p_shared_owners));
            goto LABEL_197;
          }
          goto LABEL_199;
        }
        if (objc_msgSend(v69, "type") != 4)
          goto LABEL_199;
        v76 = v291;
        v75 = (std::__shared_weak_count *)v292;
        v281 = v291;
        v282 = (std::__shared_weak_count *)v292;
        if (v292)
        {
          v77 = (unint64_t *)((char *)v292 + 8);
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
        v79 = v69;
        objc_msgSend(v79, "name");
        v80 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::string::basic_string[abi:ne180100]<0>(buf, (char *)objc_msgSend(v80, "UTF8String"));

        Input = (MIL::Builder::Variable *)MIL::Builder::FunctionBuilder::TryGetInput();
        Type = MIL::Builder::Variable::TryGetType(Input);
        v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 24))(Type);
        if (!v83)
        {
          v241 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD5E28](v241, "Converting image input -> tensor buffer requires input to be a tensor");
          __cxa_throw(v241, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        objc_msgSend(v79, "imageConstraint");
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 96))(v83);
        v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 88))(v83);
        MIL::Builder::FunctionBuilder::SelectedSpecialization(v76);
        MIL::Builder::FunctionBuilder::GetBlock();
        OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
        if (*(_QWORD *)(OperationsByInput + 24) == 1)
        {
          MIL::Builder::FunctionBuilder::SelectedSpecialization(v76);
          Opset = (MIL::IROpset *)MIL::MILContext::GetOpset();
          v89 = *(_QWORD *)(OperationsByInput + 16);
          v90 = *(MIL::Builder::OperationBuilder **)(v89 + 16);
          v91 = *(std::__shared_weak_count **)(v89 + 24);
          v313 = v90;
          v314 = v91;
          if (v91)
          {
            v92 = (unint64_t *)&v91->__shared_owners_;
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
          }
          Operator = MIL::Builder::OperationBuilder::GetOperator(v90);
          v95 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
          if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
          {
            v96 = (std::string *)v316.__r_.__value_.__r.__words[0];
            if (v316.__r_.__value_.__l.__size_ == 4)
            {
LABEL_142:
              if (LODWORD(v96->__r_.__value_.__l.__data_) == 1953718627)
              {
                Output = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v90);
                MIL::Builder::Variable::GetName(Output);
                v98 = (MIL::IRValueType *)MIL::Builder::Variable::TryGetType(Output);
                v99 = MIL::IRValueType::AsTensorType(v98);
                (*(void (**)(uint64_t))(*(_QWORD *)v99 + 88))(v99);
                v311 = v90;
                v312 = v91;
                if (v91)
                {
                  v100 = (unint64_t *)&v91->__shared_owners_;
                  do
                    v101 = __ldxr(v100);
                  while (__stxr(v101 + 1, v100));
                }
                MIL::Builder::BlockBuilder::RemoveOperation();
                v102 = v312;
                if (v312)
                {
                  v103 = (unint64_t *)&v312->__shared_owners_;
                  do
                    v104 = __ldaxr(v103);
                  while (__stlxr(v104 - 1, v103));
                  if (!v104)
                  {
                    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                    std::__shared_weak_count::__release_weak(v102);
                  }
                }
                v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 96))(v83);
                memset(&__p, 0, sizeof(__p));
                std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v105, *(_QWORD *)(v105 + 8), (uint64_t)(*(_QWORD *)(v105 + 8) - *(_QWORD *)v105) >> 3);
                MIL::IRTensorValueType::MakeWithShape();
                MIL::Builder::FunctionBuilder::RemoveInput();
                if (SBYTE7(v272) < 0)
                {
                  std::string::__init_copy_ctor_external(&v310, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
                }
                else
                {
                  *(_OWORD *)&v310.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
                  v310.__r_.__value_.__r.__words[2] = v272;
                }
                MIL::Builder::FunctionBuilder::AddInput();
                if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v310.__r_.__value_.__l.__data_);
                if (SBYTE7(v272) < 0)
                {
                  std::string::__init_copy_ctor_external(&v302, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
                }
                else
                {
                  *(_OWORD *)&v302.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
                  v302.__r_.__value_.__r.__words[2] = v272;
                }
                v309 = 0;
                v308 = 0;
                MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
                v106 = v309;
                if (v309)
                {
                  v107 = (unint64_t *)&v309->__shared_owners_;
                  do
                    v108 = __ldaxr(v107);
                  while (__stlxr(v108 - 1, v107));
                  if (!v108)
                  {
                    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                    std::__shared_weak_count::__release_weak(v106);
                  }
                }
                if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v302.__r_.__value_.__l.__data_);
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if ((*((_BYTE *)&v316.__r_.__value_.__s + 23) & 0x80) == 0)
                  goto LABEL_173;
              }
              else if ((*((_BYTE *)&v316.__r_.__value_.__s + 23) & 0x80) == 0)
              {
                goto LABEL_173;
              }
              v96 = (std::string *)v316.__r_.__value_.__r.__words[0];
            }
            operator delete(v96);
          }
          else if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) == 4)
          {
            v96 = &v316;
            goto LABEL_142;
          }
LABEL_173:
          v109 = v314;
          if (v314)
          {
            v110 = (unint64_t *)&v314->__shared_owners_;
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
          v76 = v281;
          v75 = v282;
        }
        v316.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
        v316.__r_.__value_.__l.__size_ = (std::string::size_type)v75;
        if (v75)
        {
          v112 = (unint64_t *)&v75->__shared_owners_;
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
        }
        if (v75)
        {
          v114 = (unint64_t *)&v75->__shared_owners_;
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        size = (std::__shared_weak_count *)v301.__r_.__value_.__l.__size_;
        if (v301.__r_.__value_.__l.__size_)
        {
          v117 = (unint64_t *)(v301.__r_.__value_.__l.__size_ + 8);
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }

        if (SBYTE7(v272) < 0)
          operator delete(*(void **)buf);

        v70 = v282;
        if (v282)
        {
          v119 = (unint64_t *)&v282->__shared_owners_;
          do
            v74 = __ldaxr(v119);
          while (__stlxr(v74 - 1, v119));
LABEL_197:
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
LABEL_199:

      }
      v67 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v284, v318, 16);
      if (!v67)
      {
LABEL_201:

        v279 = 0u;
        v280 = 0u;
        v277 = 0u;
        v278 = 0u;
        v120 = (unint64_t)v256;
        v121 = objc_msgSend((id)v120, "countByEnumeratingWithState:objects:count:", &v277, v317, 16);
        if (!v121)
          goto LABEL_348;
        v265 = *(_QWORD *)v278;
        v258 = v120;
        while (1)
        {
          v268 = v121;
          for (n = 0; n != v268; ++n)
          {
            if (*(_QWORD *)v278 != v265)
              objc_enumerationMutation((id)v120);
            objc_msgSend((id)v120, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v277 + 1) + 8 * n));
            v123 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v123, "type") == 5)
            {
              v124 = (std::__shared_weak_count *)v292;
              v276[0] = v291;
              v276[1] = v292;
              if (v292)
              {
                v125 = (unint64_t *)((char *)v292 + 8);
                do
                  v126 = __ldxr(v125);
                while (__stxr(v126 + 1, v125));
              }
              if (v124)
              {
                v127 = (unint64_t *)&v124->__shared_owners_;
                do
                  v128 = __ldaxr(v127);
                while (__stlxr(v128 - 1, v127));
                goto LABEL_344;
              }
              goto LABEL_346;
            }
            if (objc_msgSend(v123, "type") != 4)
              goto LABEL_346;
            v130 = v291;
            v129 = (std::__shared_weak_count *)v292;
            v274 = v291;
            v275 = (std::__shared_weak_count *)v292;
            if (v292)
            {
              v131 = (unint64_t *)((char *)v292 + 8);
              do
                v132 = __ldxr(v131);
              while (__stxr(v132 + 1, v131));
            }
            v133 = v123;
            objc_msgSend(v133, "name");
            v134 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v134, "UTF8String"));

            MIL::Builder::FunctionBuilder::SelectedSpecialization(v130);
            MIL::Builder::FunctionBuilder::GetBlock();
            MIL::Builder::FunctionBuilder::SelectedSpecialization(v130);
            v135 = (MIL::IROpset *)MIL::MILContext::GetOpset();
            Variable = (MIL::Builder::Variable *)MIL::Builder::BlockBuilder::GetVariable();
            v137 = MIL::Builder::Variable::TryGetType(Variable);
            v138 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v137 + 24))(v137);
            if (!v138)
            {
              v242 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              std::runtime_error::runtime_error(v242, (const std::string *)buf);
              __cxa_throw(v242, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v262 = v133;
            objc_msgSend(v133, "imageConstraint");
            v139 = (void *)objc_claimAutoreleasedReturnValue();
            v140 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 96))(v138);
            v141 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 88))(v138);
            MIL::Builder::BlockBuilder::GetOperation();
            v142 = v262;
            v143 = MIL::Builder::OperationBuilder::GetOperator(v311);
            v144 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 16))(v143);
            if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v310.__r_.__value_.__l.__size_ != 4)
                goto LABEL_319;
              v145 = (std::string *)v310.__r_.__value_.__r.__words[0];
            }
            else
            {
              if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) != 4)
                goto LABEL_319;
              v145 = &v310;
            }
            if (LODWORD(v145->__r_.__value_.__l.__data_) == 1953718627)
            {
              v146 = MIL::Builder::BlockBuilder::GetOperationsByInput();
              v260 = v139;
              *(_OWORD *)buf = 0u;
              v272 = 0u;
              v273 = *(float *)(v146 + 32);
              std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)buf, *(_QWORD *)(v146 + 8));
              for (ii = *(_QWORD **)(v146 + 16); ii; ii = (_QWORD *)*ii)
              {
                v148 = ii[2];
                v149 = 0x9DDFEA08EB382D69 * (((8 * v148) + 8) ^ HIDWORD(v148));
                v150 = 0x9DDFEA08EB382D69 * (HIDWORD(v148) ^ (v149 >> 47) ^ v149);
                v151 = 0x9DDFEA08EB382D69 * (v150 ^ (v150 >> 47));
                v152 = *(_QWORD *)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
                  v153 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&buf[8]);
                  v153.i16[0] = vaddlv_u8(v153);
                  if (v153.u32[0] > 1uLL)
                  {
                    v120 = 0x9DDFEA08EB382D69 * (v150 ^ (v150 >> 47));
                    if (v151 >= *(_QWORD *)&buf[8])
                      v120 = v151 % *(_QWORD *)&buf[8];
                  }
                  else
                  {
                    v120 = v151 & (*(_QWORD *)&buf[8] - 1);
                  }
                  v154 = *(_QWORD **)(*(_QWORD *)buf + 8 * v120);
                  if (v154)
                  {
                    for (jj = (_QWORD *)*v154; jj; jj = (_QWORD *)*jj)
                    {
                      v156 = jj[1];
                      if (v156 == v151)
                      {
                        if (jj[2] == v148)
                          goto LABEL_267;
                      }
                      else
                      {
                        if (v153.u32[0] > 1uLL)
                        {
                          if (v156 >= *(_QWORD *)&buf[8])
                            v156 %= *(_QWORD *)&buf[8];
                        }
                        else
                        {
                          v156 &= *(_QWORD *)&buf[8] - 1;
                        }
                        if (v156 != v120)
                          break;
                      }
                    }
                  }
                }
                v157 = operator new(0x20uLL);
                v316.__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
                v316.__r_.__value_.__l.__size_ = (std::string::size_type)&v272;
                *v157 = 0;
                v157[1] = v151;
                v157[2] = ii[2];
                v158 = ii[3];
                v157[3] = v158;
                if (v158)
                {
                  v159 = (unint64_t *)(v158 + 8);
                  do
                    v160 = __ldxr(v159);
                  while (__stxr(v160 + 1, v159));
                }
                v316.__r_.__value_.__s.__data_[16] = 1;
                v161 = (float)(unint64_t)(*((_QWORD *)&v272 + 1) + 1);
                if (!v152 || (float)(v273 * (float)v152) < v161)
                {
                  v162 = (v152 & (v152 - 1)) != 0;
                  if (v152 < 3)
                    v162 = 1;
                  v163 = v162 | (2 * v152);
                  v164 = vcvtps_u32_f32(v161 / v273);
                  if (v163 <= v164)
                    v165 = v164;
                  else
                    v165 = v163;
                  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)buf, v165);
                  v152 = *(_QWORD *)&buf[8];
                  if ((*(_QWORD *)&buf[8] & (*(_QWORD *)&buf[8] - 1)) != 0)
                  {
                    if (v151 >= *(_QWORD *)&buf[8])
                      v120 = v151 % *(_QWORD *)&buf[8];
                    else
                      v120 = v151;
                  }
                  else
                  {
                    v120 = (*(_QWORD *)&buf[8] - 1) & v151;
                  }
                }
                v166 = *(_QWORD *)buf;
                v167 = *(_QWORD **)(*(_QWORD *)buf + 8 * v120);
                if (v167)
                {
                  *v157 = *v167;
                }
                else
                {
                  *v157 = v272;
                  *(_QWORD *)&v272 = v157;
                  *(_QWORD *)(v166 + 8 * v120) = &v272;
                  if (!*v157)
                    goto LABEL_266;
                  v168 = *(_QWORD *)(*v157 + 8);
                  if ((v152 & (v152 - 1)) != 0)
                  {
                    if (v168 >= v152)
                      v168 %= v152;
                  }
                  else
                  {
                    v168 &= v152 - 1;
                  }
                  v167 = (_QWORD *)(*(_QWORD *)buf + 8 * v168);
                }
                *v167 = v157;
LABEL_266:
                v316.__r_.__value_.__r.__words[0] = 0;
                ++*((_QWORD *)&v272 + 1);
                std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)&v316);
LABEL_267:
                ;
              }
              v120 = v258;
              v139 = v260;
              v142 = v262;
              if (!*((_QWORD *)&v272 + 1))
              {
                v308 = v311;
                v309 = v312;
                if (v312)
                {
                  v169 = (unint64_t *)&v312->__shared_owners_;
                  do
                    v170 = __ldxr(v169);
                  while (__stxr(v170 + 1, v169));
                }
                MIL::Builder::BlockBuilder::RemoveOperation();
                v171 = v309;
                if (v309)
                {
                  v172 = (unint64_t *)&v309->__shared_owners_;
                  do
                    v173 = __ldaxr(v172);
                  while (__stlxr(v173 - 1, v172));
                  if (!v173)
                  {
                    ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                    std::__shared_weak_count::__release_weak(v171);
                  }
                }
                std::string::basic_string[abi:ne180100]<0>(&v316, "x");
                ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
                if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v316.__r_.__value_.__l.__data_);
                Name = MIL::Builder::Variable::GetName(ArgumentForParameter);
                if (*(char *)(Name + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
                }
                else
                {
                  v176 = *(_OWORD *)Name;
                  v316.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
                  *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v176;
                }
                MIL::Builder::BlockBuilder::GetOperation();
                v177 = v306;
                v178 = v307;
                v304 = v306;
                v305 = v307;
                if (v307)
                {
                  v179 = (unint64_t *)&v307->__shared_owners_;
                  do
                    v180 = __ldxr(v179);
                  while (__stxr(v180 + 1, v179));
                }
                if (v178)
                {
                  v181 = (unint64_t *)&v178->__shared_owners_;
                  do
                    v182 = __ldaxr(v181);
                  while (__stlxr(v182 - 1, v181));
                  if (!v182)
                  {
                    ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                    std::__shared_weak_count::__release_weak(v178);
                  }
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v302, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                else
                  v302 = __p;
                MIL::Builder::OperationBuilder::RenameOutput();
                v183 = v303;
                if (v303)
                {
                  v184 = (unint64_t *)&v303->__shared_owners_;
                  do
                    v185 = __ldaxr(v184);
                  while (__stlxr(v185 - 1, v184));
                  if (!v185)
                  {
                    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                    std::__shared_weak_count::__release_weak(v183);
                  }
                }
                if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v302.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v301, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                else
                  v301 = __p;
                v299 = 0;
                v300 = 0;
                MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
                v186 = v300;
                if (v300)
                {
                  v187 = (unint64_t *)&v300->__shared_owners_;
                  do
                    v188 = __ldaxr(v187);
                  while (__stlxr(v188 - 1, v187));
                  if (!v188)
                  {
                    ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                    std::__shared_weak_count::__release_weak(v186);
                  }
                }
                if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v301.__r_.__value_.__l.__data_);
                v189 = v307;
                if (v307)
                {
                  v190 = (unint64_t *)&v307->__shared_owners_;
                  do
                    v191 = __ldaxr(v190);
                  while (__stlxr(v191 - 1, v190));
                  if (!v191)
                  {
                    ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                    std::__shared_weak_count::__release_weak(v189);
                  }
                }
                if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v316.__r_.__value_.__l.__data_);
                v130 = v274;
                v129 = v275;
              }
              std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)buf);
            }
LABEL_319:
            *(_QWORD *)buf = v130;
            *(_QWORD *)&buf[8] = v129;
            if (v129)
            {
              v192 = (unint64_t *)&v129->__shared_owners_;
              do
                v193 = __ldxr(v192);
              while (__stxr(v193 + 1, v192));
            }
            if (v129)
            {
              v194 = (unint64_t *)&v129->__shared_owners_;
              do
                v195 = __ldaxr(v194);
              while (__stlxr(v195 - 1, v194));
              if (!v195)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v310.__r_.__value_.__l.__data_);
            v196 = v312;
            if (v312)
            {
              v197 = (unint64_t *)&v312->__shared_owners_;
              do
                v198 = __ldaxr(v197);
              while (__stlxr(v198 - 1, v197));
              if (!v198)
              {
                ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                std::__shared_weak_count::__release_weak(v196);
              }
            }

            v199 = v314;
            if (v314)
            {
              v200 = (unint64_t *)&v314->__shared_owners_;
              do
                v201 = __ldaxr(v200);
              while (__stlxr(v201 - 1, v200));
              if (!v201)
              {
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
              }
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);

            v124 = v275;
            if (v275)
            {
              v202 = (unint64_t *)&v275->__shared_owners_;
              do
                v128 = __ldaxr(v202);
              while (__stlxr(v128 - 1, v202));
LABEL_344:
              if (!v128)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
LABEL_346:

          }
          v121 = objc_msgSend((id)v120, "countByEnumeratingWithState:objects:count:", &v277, v317, 16);
          if (!v121)
          {
LABEL_348:

            MIL::Builder::BlockBuilder::GetOutputNames(v289);
            v204 = v316.__r_.__value_.__l.__size_;
            for (kk = v316.__r_.__value_.__r.__words[0]; kk != v204; kk += 24)
              MIL::Builder::BlockBuilder::RemoveOutput();
            v205 = v288[0];
            v206 = v288[1];
            while (v205 != v206)
            {
              MIL::Builder::BlockBuilder::AddOutput();
              v205 += 24;
            }
            MIL::Transform::ProgramTransformer::EliminateDeadNodes((MIL::Transform::ProgramTransformer *)v295);
            MIL::Builder::ProgramBuilder::CreateProgram(v293);
            if (((*(uint64_t (**)(uint8_t *))(*(_QWORD *)&buf[8] + 16))(&buf[8]) & 1) == 0)
            {
              v244 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              MIL::MILResult::GetMessage((MIL::MILResult *)&buf[8]);
              std::operator+<char>();
              v245 = std::string::append(&v302, " location");
              v246 = *(_OWORD *)&v245->__r_.__value_.__l.__data_;
              v310.__r_.__value_.__r.__words[2] = v245->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v310.__r_.__value_.__l.__data_ = v246;
              v245->__r_.__value_.__l.__size_ = 0;
              v245->__r_.__value_.__r.__words[2] = 0;
              v245->__r_.__value_.__r.__words[0] = 0;
              Location = MIL::MILResult::GetLocation((MIL::MILResult *)&buf[8]);
              (*(void (**)(std::string *__return_ptr))(*(_QWORD *)Location + 24))(&v301);
              if ((v301.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v248 = &v301;
              else
                v248 = (std::string *)v301.__r_.__value_.__r.__words[0];
              if ((v301.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v249 = HIBYTE(v301.__r_.__value_.__r.__words[2]);
              else
                v249 = v301.__r_.__value_.__l.__size_;
              v250 = std::string::append(&v310, (const std::string::value_type *)v248, v249);
              v251 = *(_OWORD *)&v250->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v250->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v251;
              v250->__r_.__value_.__l.__size_ = 0;
              v250->__r_.__value_.__r.__words[2] = 0;
              v250->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v244, &__p);
              __cxa_throw(v244, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v207 = *(_QWORD *)buf;
            *(_QWORD *)a1 = *(_QWORD *)buf;
            if (v207)
            {
              v208 = (_QWORD *)operator new();
              v209 = *(_QWORD *)buf;
              *v208 = &off_1E3D5C4F0;
              v208[1] = 0;
              v208[2] = 0;
              v208[3] = v209;
            }
            else
            {
              v208 = 0;
            }
            *(_QWORD *)(a1 + 8) = v208;
            *(_QWORD *)buf = 0;
            MEMORY[0x1A1AD5408](&buf[8]);
            v226 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v226)
              (*(void (**)(uint64_t))(*(_QWORD *)v226 + 8))(v226);
            *(_QWORD *)buf = &v316;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            *(_QWORD *)buf = v288;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            v227 = v290;
            if (v290)
            {
              v228 = (unint64_t *)&v290->__shared_owners_;
              do
                v229 = __ldaxr(v228);
              while (__stlxr(v229 - 1, v228));
              if (!v229)
              {
                ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                std::__shared_weak_count::__release_weak(v227);
              }
            }
            v230 = (std::__shared_weak_count *)v292;
            if (v292)
            {
              v231 = (unint64_t *)((char *)v292 + 8);
              do
                v232 = __ldaxr(v231);
              while (__stlxr(v232 - 1, v231));
              if (!v232)
              {
                ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                std::__shared_weak_count::__release_weak(v230);
              }
            }
            v233 = v294;
            if (v294)
            {
              v234 = (unint64_t *)&v294->__shared_owners_;
              do
                v235 = __ldaxr(v234);
              while (__stlxr(v235 - 1, v234));
              if (!v235)
              {
                ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                std::__shared_weak_count::__release_weak(v233);
              }
            }
            MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v295);
            v236 = v297;
            if (v297)
            {
              v237 = (unint64_t *)&v297->__shared_owners_;
              do
                v238 = __ldaxr(v237);
              while (__stlxr(v238 - 1, v237));
              if (!v238)
              {
                ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                std::__shared_weak_count::__release_weak(v236);
              }
            }
            goto LABEL_409;
          }
        }
      }
    }
  }
LABEL_24:
  +[MLLogging coreChannel](MLLogging, "coreChannel");
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19C486000, v21, OS_LOG_TYPE_INFO, "Not adding memory layout to program due to the inputs having range flexibility.", buf, 2u);
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
LABEL_409:
  v240 = v298;
  v298 = 0;
  if (v240)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v240);
    MEMORY[0x1A1AD6260]();
  }
LABEL_411:

}

void sub_19C7E82DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  char a65;
  __int16 a67;
  MIL::Attributes::FlexibleShapeInfo *a69;
  void *a72;
  uint64_t v72;
  void *v73;
  int v74;
  void *v76;

  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a72);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (SLOBYTE(STACK[0x227]) < 0)
  {
    operator delete((void *)STACK[0x210]);
    if ((v74 & 1) == 0)
    {
LABEL_12:
      MEMORY[0x1A1AD5408](v72);
      v76 = a23;
      a23 = 0;
      if (v76)
        (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
      a23 = &STACK[0x2D0];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      STACK[0x2B0] = (unint64_t)&a56;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2B0]);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
      MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&a65);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
      std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::reset[abi:ne180100](&a69);

      _Unwind_Resume(a1);
    }
  }
  else if (!v74)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v73);
  goto LABEL_12;
}

uint64_t `anonymous namespace'::confirmImageTensorAssumptions(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  BOOL v10;
  int v11;
  uint64_t v12;
  void *v13;
  std::runtime_error *exception;
  std::string *v15;
  __int128 v16;
  unint64_t v17;
  std::runtime_error *v18;
  std::string *v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  std::runtime_error *v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;

  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 != 32)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v45, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
    v15 = std::string::insert(&v45, 0, "Converting tensor to pixel buffer requires rank 4 (NCHW) tensor, but got tensor of rank ");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v46);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  if (v7 != 1)
  {
    v17 = v7;
    v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v45, v17);
    v19 = std::string::insert(&v45, 0, "Expected 1 for batch dimension of tensor corresponding to image, but got ");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v18, &v46);
    __cxa_throw(v18, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*(_QWORD *)a1 + 8));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  v10 = a3 == 1111970369 || a3 == 32;
  v11 = v10;
  v12 = 3;
  if (!v10)
    v12 = 1;
  if (result != v12)
  {
    v21 = result;
    if (v11)
      v22 = "color";
    else
      v22 = "grayscale";
    v23 = v12;
    std::string::basic_string[abi:ne180100]<0>(&v46, v22);
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v40, v23);
    v25 = std::string::insert(&v40, 0, "Expected ");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v41, " for channel dimension of tensor corresponding to ");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v46;
    else
      v29 = (std::string *)v46.__r_.__value_.__r.__words[0];
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    else
      size = v46.__r_.__value_.__l.__size_;
    v31 = std::string::append(&v42, (const std::string::value_type *)v29, size);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v33 = std::string::append(&v43, " image, but got ");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, v21);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v39;
    else
      v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      v36 = v39.__r_.__value_.__l.__size_;
    v37 = std::string::append(&v44, (const std::string::value_type *)v35, v36);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v24, &v45);
    __cxa_throw(v24, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (a3 == 1278226488)
  {
    if (a2 == 5 || a2 == 14)
      return result;
    v13 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v13, "Expected tensor corresponding to Grayscale image to be FP32 or U8 dtype.");
LABEL_40:
    __cxa_throw(v13, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (a3 != 1278226536)
  {
    if (a2 == 5)
      return result;
    v13 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v13, "Expected tensor corresponding to non-Grayscale16 image type to be FP32 dtype.");
    goto LABEL_40;
  }
  if (a2 != 4)
  {
    v13 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v13, "Expected tensor corresponding to Grayscale16 image to be FP16 dtype.");
    goto LABEL_40;
  }
  return result;
}

void sub_19C7E8C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  int v41;
  uint64_t v42;

  if (*(char *)(v42 - 73) < 0)
    operator delete(*(void **)(v42 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v42 - 105) < 0)
    operator delete(*(void **)(v42 - 128));
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v41 & 1) == 0)
    {
LABEL_18:
      if (*(char *)(v42 - 41) < 0)
        operator delete(*(void **)(v42 - 64));
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_18;
  }
  __cxa_free_exception(v40);
  goto LABEL_18;
}

uint64_t `anonymous namespace'::getOperatorType(std::string *a1, unsigned __int8 *a2, MIL::IROpset *this)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v15;
  int8x8_t v16;

  MIL::IROpset::GetReversedOperatorNamesMap(this);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  if (!*(_QWORD *)&v16)
    goto LABEL_17;
  v6 = v5;
  v7 = (uint8x8_t)vcnt_s8(v16);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v5;
    if (v5 >= *(_QWORD *)&v16)
      v9 = v5 % *(_QWORD *)&v16;
  }
  else
  {
    v9 = (*(_QWORD *)&v16 - 1) & v5;
  }
  v10 = *(uint64_t ***)(v15 + 8 * v9);
  if (!v10 || (v11 = *v10) == 0)
LABEL_17:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  while (1)
  {
    v12 = v11[1];
    if (v12 == v6)
      break;
    if (v8 > 1)
    {
      if (v12 >= *(_QWORD *)&v16)
        v12 %= *(_QWORD *)&v16;
    }
    else
    {
      v12 &= *(_QWORD *)&v16 - 1;
    }
    if (v12 != v9)
      goto LABEL_17;
LABEL_16:
    v11 = (uint64_t *)*v11;
    if (!v11)
      goto LABEL_17;
  }
  if (!std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v11 + 16, a2))
    goto LABEL_16;
  if (*((char *)v11 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v11[5], v11[6]);
  }
  else
  {
    v13 = *(_OWORD *)(v11 + 5);
    a1->__r_.__value_.__r.__words[2] = v11[7];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v13;
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v15);
}

void sub_19C7E8EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_19C7E8F50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

MIL::Attributes::FlexibleShapeInfo *std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::reset[abi:ne180100](MIL::Attributes::FlexibleShapeInfo **a1)
{
  MIL::Attributes::FlexibleShapeInfo *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t `anonymous namespace'::isEligibleForNeuralEngineOptimizedIOBufferAttribute(_anonymous_namespace_ *this, const IRValueType *a2)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v6;
  uint64_t v7;

  result = (*(uint64_t (**)(_anonymous_namespace_ *, const IRValueType *))(*(_QWORD *)this + 24))(this, a2);
  if (result)
  {
    v3 = result;
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
    if (v4 > 0xB || ((1 << v4) & 0x830) == 0)
      return 0;
    v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
    if (v6[1] - *v6 < 0x10uLL)
    {
      return 0;
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6[1] - 8) + 16))(*(_QWORD *)(v6[1] - 8));
      if (result)
      {
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
        return v7 == 8 || (unint64_t)(v7 - 1) < 4;
      }
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_impl<std::unique_ptr<MIL::IRTensorValue const>,std::unique_ptr<MIL::IRTensorValue const>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;

  v6 = (uint64_t *)operator new(0x30uLL);
  *v6 = 0;
  v6[1] = 0;
  std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<std::unique_ptr<MIL::IRTensorValue const>,std::unique_ptr<MIL::IRTensorValue const>,0>(v6 + 2, a2, a3);
  v6[1] = MIL::IRValueMapHasher::operator()();
  v7 = MIL::IRValueMapHasher::operator()();
  v6[1] = v7;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = v7;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v8 <= v7)
        v12 = v7 % v8;
    }
    else
    {
      v12 = (v8 - 1) & v7;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (MIL::IRValueMapEq::operator()())
            {
              std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>::operator()[abi:ne180100](1, v6);
              return;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v15 >= v8)
                v15 %= v8;
            }
            else
            {
              v15 &= v8 - 1;
            }
            if (v15 != v12)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v21);
  }
  v22 = *(int8x8_t *)(a1 + 8);
  v23 = v6[1];
  v24 = (uint8x8_t)vcnt_s8(v22);
  v24.i16[0] = vaddlv_u8(v24);
  if (v24.u32[0] > 1uLL)
  {
    if (v23 >= *(_QWORD *)&v22)
      v23 %= *(_QWORD *)&v22;
  }
  else
  {
    v23 &= *(_QWORD *)&v22 - 1;
  }
  v25 = *(_QWORD *)a1;
  v26 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v23);
  if (v26)
  {
    *v6 = *v26;
LABEL_37:
    *v26 = (uint64_t)v6;
    goto LABEL_38;
  }
  *v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(v25 + 8 * v23) = a1 + 16;
  if (*v6)
  {
    v27 = *(_QWORD *)(*v6 + 8);
    if (v24.u32[0] > 1uLL)
    {
      if (v27 >= *(_QWORD *)&v22)
        v27 %= *(_QWORD *)&v22;
    }
    else
    {
      v27 &= *(_QWORD *)&v22 - 1;
    }
    v26 = (uint64_t *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_37;
  }
LABEL_38:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19C7E95C8(_Unwind_Exception *a1)
{
  void *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

MIL::IRDictionaryValue *std::unique_ptr<MIL::IRDictionaryValue const>::reset[abi:ne180100](MIL::IRDictionaryValue **a1)
{
  MIL::IRDictionaryValue *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    MIL::IRDictionaryValue::~IRDictionaryValue(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 4));
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__shared_ptr_pointer<MIL::IRDictionaryValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

MIL::IRDictionaryValue *std::__shared_ptr_pointer<MIL::IRDictionaryValue const *>::__on_zero_shared(uint64_t a1)
{
  MIL::IRDictionaryValue *result;

  result = *(MIL::IRDictionaryValue **)(a1 + 24);
  if (result)
  {
    MIL::IRDictionaryValue::~IRDictionaryValue(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRDictionaryValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB3198BLL))
    return a1 + 24;
  else
    return 0;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)__p + 32);
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)__p + 16);
  }
  if (__p)
    operator delete(__p);
}

uint64_t *std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<std::unique_ptr<MIL::IRTensorValue const>,std::unique_ptr<MIL::IRTensorValue const>,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;

  v5 = std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(a1, a2);
  std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(v5 + 2, a3);
  return a1;
}

void sub_19C7E97B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_1E3D5C2C0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = (uint64_t)v5;
  *a2 = 0;
  return a1;
}

void std::__shared_ptr_pointer<MIL::IRTensorValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<MIL::IRTensorValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRTensorValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB318F2))
    return a1 + 24;
  else
    return 0;
}

void sub_19C7E99F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7E9C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 buf,int a22,__int16 a23,__int16 a24,void *a25,__int128 a26)
{
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  uint64_t v43;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  MEMORY[0x1A1AD6260](v30, 0x10A0C4077B4ED97);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a2 == 1)
  {
    v33 = __cxa_begin_catch(a1);
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v26, "componentsJoinedByString:", CFSTR(","));
      v40 = (id)objc_claimAutoreleasedReturnValue();
      +[MLMultiArrayUtils stringForDataType:](MLMultiArrayUtils, "stringForDataType:", v29);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "componentsJoinedByString:", CFSTR(","));
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
      LODWORD(buf) = 138413058;
      *(_QWORD *)((char *)&buf + 4) = v40;
      WORD6(buf) = 2112;
      *(_QWORD *)((char *)&buf + 14) = v41;
      a24 = 2112;
      a25 = v42;
      LOWORD(a26) = 2080;
      *(_QWORD *)((char *)&a26 + 2) = v43;
      _os_log_error_impl(&dword_19C486000, v34, OS_LOG_TYPE_ERROR, "Failed to allocate MLMultiArray with shape [%@], dataType %@, and strides [%@] due to an error: %s.", (uint8_t *)&buf, 0x2Au);

    }
    v35 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(v26, "componentsJoinedByString:", CFSTR(","));
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    +[MLMultiArrayUtils stringForDataType:](MLMultiArrayUtils, "stringForDataType:", v29);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "componentsJoinedByString:", CFSTR(","));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = *MEMORY[0x1E0C99778];
    (*(void (**)(void *))(*(_QWORD *)v33 + 16))(v33);
    objc_msgSend(v35, "raise:format:", v39, CFSTR("Failed to allocate MLMultiArray with shape [%@], dataType %@, and strides [%@] due to an error: %s."));

    __cxa_end_catch();
    JUMPOUT(0x19C7E9BBCLL);
  }

  _Unwind_Resume(a1);
}

void sub_19C7E9F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C7EA084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v5;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x1A1AD6260](v5, 0x10A0C4077B4ED97);

  _Unwind_Resume(a1);
}

void sub_19C7EA4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  uint64_t v28;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v28 - 144), 8);

  _Unwind_Resume(a1);
}

void sub_19C7EA7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;
  void *v20;

  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (v20)
  {
    a13 = (uint64_t)v20;
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

void sub_19C7EA92C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7EAA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C7EAAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C7EAF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C7EB130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void std::default_delete<StorageManager>::operator()[abi:ne180100](uint64_t a1)
{

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 8);
  JUMPOUT(0x1A1AD6260);
}

void sub_19C7EB228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C7EB304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::atomic_load[abi:ne180100]<CoreML::MultiArrayBuffer>(_QWORD *a1, _QWORD *a2)
{
  std::__sp_mut *sp_mut;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  sp_mut = std::__get_sp_mut(a2);
  std::__sp_mut::lock(sp_mut);
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::__sp_mut::unlock(sp_mut);
}

_QWORD *std::shared_ptr<unsigned char>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<CoreML::MultiArrayBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BD48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::MultiArrayBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BD48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t __Block_byref_object_copy__2378(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2379(uint64_t a1)
{

}

void sub_19C7EB4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t StorageManager::StorageManager(uint64_t a1, _QWORD *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v5 = a3;
  v6 = v5;
  *(_BYTE *)a1 = v5 != 0;
  *(_DWORD *)(a1 + 4) = 0;
  v7 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 24) = _Block_copy(v5);
  *(_QWORD *)(a1 + 32) = objc_claimAutoreleasedReturnValue();

  return a1;
}

void sub_19C7EB56C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void sub_19C7EB6E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7EBAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C7EBEE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C7EC338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19C7EC4AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7EC624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7EC7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C7EC874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7EC918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7ECB48(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf)
{
  void *v15;
  void *v16;
  uint64_t v17;
  void *v20;
  NSObject *v21;
  uint64_t v22;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  MEMORY[0x1A1AD6260](v17, 0x10A0C4077B4ED97);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
  if (a2 == 1)
  {
    v20 = __cxa_begin_catch(a1);
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v22;
      _os_log_error_impl(&dword_19C486000, v21, OS_LOG_TYPE_ERROR, "Failed to allocate MLMultiArray. error: %s", (uint8_t *)&buf, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x19C7ECB04);
  }

  _Unwind_Resume(a1);
}

void sub_19C7ECF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_19C7ED448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27)
{
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_19C7EDA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, char a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

void CoreML::numericVectorFromObjC<unsigned long>(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  std::vector<unsigned long>::reserve((void **)a1, objc_msgSend(v3, "count"));
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v23 != v6)
          objc_enumerationMutation(v4);
        v8 = *(id *)(*((_QWORD *)&v22 + 1) + 8 * i);
        v9 = objc_msgSend(v8, "unsignedLongValue");
        v10 = v9;
        v12 = *(uint64_t **)(a1 + 8);
        v11 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v12 >= v11)
        {
          v14 = *(uint64_t **)a1;
          v15 = ((uint64_t)v12 - *(_QWORD *)a1) >> 3;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          v17 = v11 - (_QWORD)v14;
          if (v17 >> 2 > v16)
            v16 = v17 >> 2;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 16, v18);
            v14 = *(uint64_t **)a1;
            v12 = *(uint64_t **)(a1 + 8);
          }
          else
          {
            v19 = 0;
          }
          v20 = (uint64_t *)&v19[8 * v15];
          *v20 = v10;
          v13 = v20 + 1;
          while (v12 != v14)
          {
            v21 = *--v12;
            *--v20 = v21;
          }
          *(_QWORD *)a1 = v20;
          *(_QWORD *)(a1 + 8) = v13;
          *(_QWORD *)(a1 + 16) = &v19[8 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v12 = v9;
          v13 = v12 + 1;
        }
        *(_QWORD *)(a1 + 8) = v13;

      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v5);
  }

}

void sub_19C7EDCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  void *v11;
  void *v13;

  v13 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<CoreML::MultiArrayBuffer,std::allocator<CoreML::MultiArrayBuffer>,std::vector<unsigned long> &,CoreML::ScalarType &,CoreML::StorageOrder &,int,void>(uint64_t *a1, unint64_t **a2, int a3, int a4, int a5)
{
  _QWORD *v10;
  uint64_t result;

  v10 = operator new(0x88uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E3D5BD48;
  result = CoreML::MultiArrayBuffer::MultiArrayBuffer((uint64_t)(v10 + 3), a2, a3, a4, a5);
  *a1 = result;
  a1[1] = (uint64_t)v10;
  return result;
}

void sub_19C7EDDA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_19C7EDE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c53_ZTSNSt3__110shared_ptrIN6CoreML16MultiArrayBufferEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c53_ZTSNSt3__110shared_ptrIN6CoreML16MultiArrayBufferEEE(uint64_t a1)
{
  return std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 48);
}

id CoreML::numericArrayToObjC<std::vector<unsigned long>,unsigned long>(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", (uint64_t)(a1[1] - *a1) >> 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (_QWORD *)*a1;
  v4 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v4)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v5);

      ++v3;
    }
    while (v3 != v4);
  }
  return v2;
}

void sub_19C7EDF20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::flattenNestedArrayIntoBuffer(_anonymous_namespace_ *this, NSArray *a2, uint64_t a3, void *a4, MLMultiArrayBufferLayout *a5, MLMultiArrayDataType a6)
{
  _anonymous_namespace_ *v10;
  id v11;
  void *v12;
  void *v13;
  void (*v14)(_QWORD *, void *);
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v10 = this;
  v11 = a4;
  v12 = v11;
  v13 = 0;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2020000000;
  v20[3] = 0;
  if ((uint64_t)a5 > 65599)
  {
    if (a5 == (MLMultiArrayBufferLayout *)131104)
    {
      v16 = MEMORY[0x1E0C809B0];
      v14 = ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke_4;
      v15 = &v16;
      goto LABEL_10;
    }
    if (a5 == (MLMultiArrayBufferLayout *)65600)
    {
      v19 = MEMORY[0x1E0C809B0];
      v14 = ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke;
      v15 = &v19;
      goto LABEL_10;
    }
  }
  else
  {
    if (a5 == (MLMultiArrayBufferLayout *)65552)
    {
      v17 = MEMORY[0x1E0C809B0];
      v14 = ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke_3;
      v15 = &v17;
      goto LABEL_10;
    }
    if (a5 == (MLMultiArrayBufferLayout *)65568)
    {
      v18 = MEMORY[0x1E0C809B0];
      v14 = ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke_2;
      v15 = &v18;
LABEL_10:
      v15[1] = 3221225472;
      v15[2] = (uint64_t)v14;
      v15[3] = (uint64_t)&unk_1E3D65130;
      v15[6] = (uint64_t)a2;
      v15[7] = a3;
      v15[4] = (uint64_t)v11;
      v15[5] = (uint64_t)v20;
      v13 = _Block_copy(v15);

    }
  }
  _Block_object_dispose(v20, 8);

}

void sub_19C7EE0CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  _Block_object_dispose((const void *)(v4 - 96), 8);

  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  char isKindOfClass;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1[6];
  v5 = a1[7];
  v6 = (void *)a1[4];
  v7 = *(_QWORD *)(a1[5] + 8);
  v8 = v3;
  v9 = v6;
  v22 = v8;
  objc_msgSend(v8, "firstObject");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v12 = *(_QWORD *)(v7 + 24);
    v27 = 0;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v13 = v8;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    v21 = v7;
    if (v14)
    {
      v15 = 0;
      v16 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v24 != v16)
            objc_enumerationMutation(v13);
          v18 = *(id *)(*((_QWORD *)&v23 + 1) + 8 * i);
          if (!v27)
          {
            v15 = objc_msgSend(v9, "offsetOfScalarAtIndex:contiguousScalars:", v12 + i, &v27);
            if (v5 < 8 * (v27 + v15))
            {
              objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("Out of bound buffer write in copying NSArray<NSNumber> to MLMultiArray."), 0);
              v20 = (id)objc_claimAutoreleasedReturnValue();
              objc_exception_throw(v20);
            }
          }
          objc_msgSend(v18, "doubleValue", v21);
          *(_QWORD *)(v4 + 8 * v15) = v19;
          --v27;

          ++v15;
        }
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
        v12 += i;
      }
      while (v14);
    }

    *(_QWORD *)(v21 + 24) = v12;
  }

}

void sub_19C7EE2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke_3(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  char isKindOfClass;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  id v18;
  id v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1[6];
  v5 = a1[7];
  v6 = (void *)a1[4];
  v7 = *(_QWORD *)(a1[5] + 8);
  v8 = v3;
  v9 = v6;
  v26 = v8;
  objc_msgSend(v8, "firstObject");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v12 = *(_QWORD *)(v7 + 24);
    v31 = 0;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v13 = v8;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    v25 = v7;
    if (v14)
    {
      v15 = 0;
      v16 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v28 != v16)
            objc_enumerationMutation(v13);
          v18 = *(id *)(*((_QWORD *)&v27 + 1) + 8 * i);
          if (!v31)
          {
            v15 = objc_msgSend(v9, "offsetOfScalarAtIndex:contiguousScalars:", v12 + i, &v31);
            if (v5 < 2 * (v31 + v15))
            {
              objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("Out of bound buffer write in copying NSArray<NSNumber> to MLMultiArray."), 0);
              v24 = (id)objc_claimAutoreleasedReturnValue();
              objc_exception_throw(v24);
            }
          }
          objc_msgSend(v18, "floatValue", v25);
          __asm { FCVT            H0, S0 }
          *(_WORD *)(v4 + 2 * v15) = _S0;
          --v31;

          ++v15;
        }
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
        v12 += i;
      }
      while (v14);
    }

    *(_QWORD *)(v25 + 24) = v12;
  }

}

void sub_19C7EE55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke_4(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  char isKindOfClass;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1[6];
  v5 = a1[7];
  v6 = (void *)a1[4];
  v7 = *(_QWORD *)(a1[5] + 8);
  v8 = v3;
  v9 = v6;
  v21 = v8;
  objc_msgSend(v8, "firstObject");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v12 = *(_QWORD *)(v7 + 24);
    v26 = 0;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v13 = v8;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    v20 = v7;
    if (v14)
    {
      v15 = 0;
      v16 = *(_QWORD *)v23;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v23 != v16)
            objc_enumerationMutation(v13);
          v18 = *(id *)(*((_QWORD *)&v22 + 1) + 8 * i);
          if (!v26)
          {
            v15 = objc_msgSend(v9, "offsetOfScalarAtIndex:contiguousScalars:", v12 + i, &v26);
            if (v5 < 4 * (v26 + v15))
            {
              objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("Out of bound buffer write in copying NSArray<NSNumber> to MLMultiArray."), 0);
              v19 = (id)objc_claimAutoreleasedReturnValue();
              objc_exception_throw(v19);
            }
          }
          *(_DWORD *)(v4 + 4 * v15) = objc_msgSend(v18, "integerValue", v20);
          --v26;

          ++v15;
        }
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
        v12 += i;
      }
      while (v14);
    }

    *(_QWORD *)(v20 + 24) = v12;
  }

}

void sub_19C7EE7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke_2(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  char isKindOfClass;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  id v18;
  int v19;
  id v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1[6];
  v5 = a1[7];
  v6 = (void *)a1[4];
  v7 = *(_QWORD *)(a1[5] + 8);
  v8 = v3;
  v9 = v6;
  v22 = v8;
  objc_msgSend(v8, "firstObject");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v12 = *(_QWORD *)(v7 + 24);
    v27 = 0;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v13 = v8;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    v21 = v7;
    if (v14)
    {
      v15 = 0;
      v16 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v24 != v16)
            objc_enumerationMutation(v13);
          v18 = *(id *)(*((_QWORD *)&v23 + 1) + 8 * i);
          if (!v27)
          {
            v15 = objc_msgSend(v9, "offsetOfScalarAtIndex:contiguousScalars:", v12 + i, &v27);
            if (v5 < 4 * (v27 + v15))
            {
              objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("Out of bound buffer write in copying NSArray<NSNumber> to MLMultiArray."), 0);
              v20 = (id)objc_claimAutoreleasedReturnValue();
              objc_exception_throw(v20);
            }
          }
          objc_msgSend(v18, "floatValue", v21);
          *(_DWORD *)(v4 + 4 * v15) = v19;
          --v27;

          ++v15;
        }
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
        v12 += i;
      }
      while (v14);
    }

    *(_QWORD *)(v21 + 24) = v12;
  }

}

void sub_19C7EEA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::traverseNestedArrayInPreOrder(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, id, _QWORD, id *);
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  char isKindOfClass;
  id v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v3 = a1;
  v4 = a2;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  v5 = v3;
  v18 = v5;
  v19 = 0;
  std::deque<std::pair<NSArray * {__strong},unsigned long>>::push_back(&v20, (uint64_t *)&v18);

  v6 = *((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    while (1)
    {
      v7 = v6 - 1;
      v8 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + (((unint64_t)(v6 - 1 + v22) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (v6 - 1 + v22);
      v9 = *(id *)v8;
      v12 = *(_QWORD *)(v8 + 8);
      v11 = (_QWORD *)(v8 + 8);
      v10 = v12;
      if (!v12)
      {
        LOBYTE(v18) = 0;
        v4[2](v4, v9, v7, &v18);
        if ((_BYTE)v18)
          break;
      }
      v13 = objc_msgSend(v9, "count");
      v14 = v13;
      if (v10 == v13)
      {
        objc_release(*(id *)(*(_QWORD *)(*((_QWORD *)&v20 + 1)
                                       + (((unint64_t)(*((_QWORD *)&v22 + 1) + v22 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (BYTE8(v22) + v22 - 1)));
        if ((_QWORD)v21 == *((_QWORD *)&v20 + 1))
          v15 = 0;
        else
          v15 = 32 * (v21 - *((_QWORD *)&v20 + 1)) - 1;
        if ((unint64_t)(v15 - (--*((_QWORD *)&v22 + 1) + v22)) >= 0x200)
        {
          operator delete(*(void **)(v21 - 8));
          *(_QWORD *)&v21 = v21 - 8;
        }
      }
      else if (v10 < v13)
      {
        while (1)
        {
          ++*v11;
          objc_msgSend(v9, "objectAtIndexedSubscript:", v10);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();

          if ((isKindOfClass & 1) != 0)
            break;
          if (v14 == ++v10)
            goto LABEL_15;
        }
        objc_msgSend(v9, "objectAtIndexedSubscript:", v10);
        v18 = (id)objc_claimAutoreleasedReturnValue();
        v19 = 0;
        std::deque<std::pair<NSArray * {__strong},unsigned long>>::push_back(&v20, (uint64_t *)&v18);

      }
LABEL_15:

      v6 = *((_QWORD *)&v22 + 1);
      if (!*((_QWORD *)&v22 + 1))
        goto LABEL_18;
    }

  }
LABEL_18:
  std::deque<std::pair<NSArray * {__strong},unsigned long>>::~deque[abi:ne180100]((uint64_t)&v20);

}

void sub_19C7EEC84(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  std::deque<std::pair<NSArray * {__strong},unsigned long>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<NSArray * {__strong},unsigned long>>::push_back(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t i;
  _QWORD *v78;
  char *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = 32 * (v4 - v5) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x100)
    {
      a1[4] = v8 - 256;
      v12 = *(_QWORD *)v5;
      v10 = v5 + 8;
      v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v4[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v4 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }
          v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    v23 = v6 >> 3;
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5)
            v51 = 1;
          else
            v51 = v26 >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v51);
          v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v5;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v5;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v99 = 1;
            else
              v99 = (uint64_t)&v63[-*a1] >> 2;
            v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v99);
            v102 = &v100[8 * (v99 >> 2)];
            v103 = (uint64_t *)a1[1];
            v63 = v102;
            v104 = a1[2] - (_QWORD)v103;
            if (v104)
            {
              v63 = &v102[v104 & 0xFFFFFFFFFFFFFFF8];
              v105 = 8 * (v104 >> 3);
              v106 = &v100[8 * (v99 >> 2)];
              do
              {
                v107 = *v103++;
                *(_QWORD *)v106 = v107;
                v106 += 8;
                v105 -= 8;
              }
              while (v105);
            }
            v108 = (char *)*a1;
            *a1 = v100;
            a1[1] = v102;
            a1[2] = v63;
            a1[3] = &v100[8 * v101];
            if (v108)
            {
              operator delete(v108);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25)
      v29 = 1;
    else
      v29 = v26 >> 2;
    v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v29);
    v32 = v31;
    v33 = &v30[8 * v23];
    *(_QWORD *)&v34 = v30;
    *((_QWORD *)&v34 + 1) = v33;
    v112 = v34;
    v35 = operator new(0x1000uLL);
    *(_QWORD *)&v36 = v33;
    *((_QWORD *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      v37 = 8 * v23;
      *(_QWORD *)&v38 = v112;
      if (v6 >= 1)
      {
        v39 = v37 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v33 -= 8 * (v40 >> 1);
        *(_QWORD *)&v36 = v33;
        *((_QWORD *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      v73 = v37 >> 2;
      if (v4 == v5)
        v74 = 1;
      else
        v74 = v73;
      v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v74);
      v33 = &v75[8 * (v74 >> 2)];
      *(_QWORD *)&v38 = v75;
      *((_QWORD *)&v38 + 1) = v33;
      *(_QWORD *)&v36 = v33;
      *((_QWORD *)&v36 + 1) = &v75[8 * v76];
      if (!v30)
        goto LABEL_56;
      v109 = v36;
      v112 = v38;
      operator delete(v30);
      v36 = v109;
    }
    v38 = v112;
LABEL_56:
    *(_QWORD *)v33 = v35;
    *(_QWORD *)&v36 = v36 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v78 = (_QWORD *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      {
        v80 = (_BYTE *)v36;
        if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
        {
          if (*((_QWORD *)&v36 + 1) == *((_QWORD *)&v38 + 1))
            v85 = 1;
          else
            v85 = (uint64_t)(*((_QWORD *)&v36 + 1) - *((_QWORD *)&v38 + 1)) >> 2;
          v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v85);
          v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          v89 = v80 - (_BYTE *)v78;
          if (v80 != (_BYTE *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = 8 * (v89 >> 3);
            v91 = v79;
            v92 = v78;
            do
            {
              v93 = *v92++;
              *(_QWORD *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(_QWORD *)&v38 = v86;
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = v88;
          *((_QWORD *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            v110 = v36;
            v114 = v38;
            operator delete(v78);
            v36 = v110;
            v38 = v114;
          }
        }
        else
        {
          v81 = (uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1)
            v82 = v81 + 1;
          else
            v82 = v81 + 2;
          v83 = v82 >> 1;
          v84 = v36 + 8 * (v82 >> 1);
          v79 = (char *)(v84 - (v36 - *((_QWORD *)&v38 + 1)));
          if ((_QWORD)v36 == *((_QWORD *)&v38 + 1))
          {
            v80 = (_BYTE *)*((_QWORD *)&v38 + 1);
          }
          else
          {
            v111 = *((_QWORD *)&v36 + 1);
            v113 = v38;
            memmove((void *)(v84 - (v36 - *((_QWORD *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((_QWORD *)&v38 + 1));
            *((_QWORD *)&v36 + 1) = v111;
            *(_QWORD *)&v38 = v113;
          }
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = &v80[8 * v83];
        }
      }
      else
      {
        v79 = (char *)*((_QWORD *)&v38 + 1);
      }
      v94 = *(_QWORD *)(i - 8);
      *((_QWORD *)v79 - 1) = v94;
      *((_QWORD *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95)
      operator delete(v95);
    goto LABEL_83;
  }
LABEL_84:
  v96 = (_QWORD *)(*(_QWORD *)&v5[(v9 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v9);
  v97 = *a2;
  v98 = a2[1];
  *a2 = 0;
  *v96 = v97;
  v96[1] = v98;
  ++a1[5];
}

void sub_19C7EF234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<NSArray * {__strong},unsigned long>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 8];
    v7 = (void **)((char *)*v6 + 16 * v5);
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v5);
    if (v7 != (void **)v8)
    {
      do
      {
        v9 = *v7;
        v7 += 2;

        if ((char *)v7 - (_BYTE *)*v6 == 4096)
        {
          v10 = (void **)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (void **)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 128;
    goto LABEL_14;
  }
  if (v12 == 2)
  {
    v13 = 256;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C7EF430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C7EF4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19C7EF788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)va);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v10 - 96);

  _Unwind_Resume(a1);
}

void sub_19C7EFA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_19C7EFC00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7EFD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C7EFDF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7F0558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  uint64_t v38;
  void *v40;
  void *v41;

  _Block_object_dispose(&a37, 8);
  v40 = *(void **)(v38 - 96);
  if (v40)
  {
    *(_QWORD *)(v38 - 88) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(v38 - 72);
  if (v41)
  {
    *(_QWORD *)(v38 - 64) = v41;
    operator delete(v41);
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);

  _Unwind_Resume(a1);
}

void sub_19C7F071C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C7F07DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C7F0898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7F09E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_19C7F0CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_19C7F0D80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7F0E10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7F0FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C7F1174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, id);
  _Block_object_dispose(va, 8);

  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_19C7F1420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C7F1700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C7F1824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_19C7F18CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C7F1C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  void *v34;
  void *v35;

  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_19C7F1D10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7F26C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void **a12, void *a13, std::__shared_weak_count *a14, uint64_t a15, void **a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  int v50;
  void *v51;
  uint64_t v52;
  std::__shared_weak_count *v55;
  void *v56;
  void **v57;
  uint64_t v58;
  void **v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  id v66;
  void *v67;
  NSObject *v68;
  uint64_t v69;

  if (*(char *)(v52 - 105) < 0)
  {
    operator delete(*(void **)(v52 - 128));
    v56 = a13;
    v55 = a14;
    v58 = a11;
    v57 = a12;
    v59 = a16;
    if ((v50 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a50);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
      if (__p)
      {
        a37 = (uint64_t)__p;
        operator delete(__p);
      }
      if (a39)
      {
        a40 = (uint64_t)a39;
        operator delete(a39);
      }
      v60 = *v59;
      if (*v59)
      {
        v55[3].__shared_owners_ = (uint64_t)v60;
        operator delete(v60);
      }
      v61 = *v57;
      if (*v57)
      {
        v55[2].__shared_owners_ = (uint64_t)v61;
        operator delete(v61);
      }
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v58);
      std::__shared_weak_count::~__shared_weak_count(v55);
      operator delete(v62);
      *(_QWORD *)(v52 - 128) = &a29;
      std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 128));
      if (a2 == 2)
      {
        v63 = __cxa_begin_catch(a1);
        v64 = (void *)MEMORY[0x1E0C99DA0];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v63 + 16))(v63));
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v64, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v65, 0);
        v66 = (id)objc_claimAutoreleasedReturnValue();

        objc_exception_throw(v66);
      }
      if (a2 == 1)
      {
        v67 = __cxa_begin_catch(a1);
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v68 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          v69 = (*(uint64_t (**)(void *))(*(_QWORD *)v67 + 16))(v67);
          *(_DWORD *)(v52 - 128) = 136315138;
          *(_QWORD *)(v52 - 124) = v69;
          _os_log_error_impl(&dword_19C486000, v68, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)(v52 - 128), 0xCu);
        }

        __cxa_rethrow();
      }

      _Unwind_Resume(a1);
    }
  }
  else
  {
    v56 = a13;
    v55 = a14;
    v58 = a11;
    v57 = a12;
    v59 = a16;
    if (!v50)
      goto LABEL_6;
  }
  __cxa_free_exception(v51);
  goto LABEL_6;
}

void sub_19C7F2A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  __cxa_end_catch();

  JUMPOUT(0x19C7F2AF0);
}

void sub_19C7F2AB4()
{
  void *v0;

  __cxa_end_catch();
  JUMPOUT(0x19C7F2ACCLL);
}

void std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer<std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>>(std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>,std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>,unsigned long,CoreML::ScalarType,CoreML::StorageOrder)::{lambda(unsigned char *)#1},std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer<std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>>(std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>,std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>,unsigned long,CoreML::ScalarType,CoreML::StorageOrder)::{lambda(unsigned char *)#1},std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1A1AD6248);
  return result;
}

uint64_t std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer<std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>>(std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>,std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>,unsigned long,CoreML::ScalarType,CoreML::StorageOrder)::{lambda(unsigned char *)#1},std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6CoreML16MultiArrayBufferC1INSt3__111__wrap_iterIPNS2_10shared_ptrIKS0_EEEEEET_S9_mNS_10ScalarTypeENS_12StorageOrderEEUlPhE_"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t CoreML::shapeToString(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[11];
  char v10;
  uint64_t v11;
  char v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  v12 = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v12, 1);
  if (*a2 != a2[1])
  {
    std::ostream::operator<<();
    v3 = *a2;
    v4 = a2[1];
    if (*a2 != v4)
    {
      v5 = 1;
      do
      {
        if ((v5 & 1) == 0)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
          std::ostream::operator<<();
        }
        v5 = 0;
        v3 += 8;
      }
      while (v3 != v4);
    }
  }
  v12 = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v12, 1);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v9[0] = v6;
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AD61C4](&v11);
}

void sub_19C7F2D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C7F2FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_19C7F3274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C7F3348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend::WriteMetadata(CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend *this, OArchive *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  char v25;
  void *v26[2];
  std::__shared_weak_count *v27;
  char *v28[3];

  v3 = (*(uint64_t (**)(CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend *))(*(_QWORD *)this + 24))(this);
  v4 = std::map<std::string,std::string>::at(v3 + 80, (_QWORD *)(v3 + 32));
  v5 = *(unsigned __int8 *)(v4 + 313);
  v6 = *(unsigned __int8 *)(v4 + 312);
  v7 = *(unsigned __int8 *)(v4 + 316);
  std::string::basic_string[abi:ne180100]<0>(__p, "neural_network_optionals");
  v8 = OArchive::nestedArchive((char *)a2, (uint64_t)__p);
  LOBYTE(v26[0]) = *v8;
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 2);
  v26[1] = *((void **)v8 + 1);
  v27 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  std::map<std::string,OArchive>::map[abi:ne180100]((uint64_t)v28, (_QWORD *)v8 + 3);
  if (v25 < 0)
    operator delete(__p[0]);
  operator<<((uint64_t)v26, v5);
  operator<<<std::string>((uint64_t)v26, (uint64_t *)(v4 + 184));
  operator<<((uint64_t)v26, v6);
  operator<<((uint64_t)v26, v7);
  operator<<<std::string,float>((uint64_t)v26, (_QWORD *)(v4 + 248));
  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(v28[1]);
  v12 = v27;
  if (v27)
  {
    v13 = (unint64_t *)&v27->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(_QWORD **)(v4 + 232);
  std::string::basic_string[abi:ne180100]<0>(v26, "model");
  v16 = OArchive::nestedArchive((char *)a2, (uint64_t)v26);
  v17 = operator<<<std::string,float>((uint64_t)v16, v15);
  v18 = operator<<<std::string,float>(v17, v15 + 3);
  v19 = operator<<<std::string,float>(v18, v15 + 6);
  v20 = operator<<<std::string,float>(v19, v15 + 9);
  v21 = operator<<<std::string,float>(v20, v15 + 12);
  v22 = operator<<<std::string,float>(v21, v15 + 15);
  v23 = operator<<<std::string,float>(v22, v15 + 18);
  operator<<<std::string,float>(v23, v15 + 21);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
}

void sub_19C7F3524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20)
{
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v17;

  v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v17, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x88uLL);
    v8 = (std::string *)(v6 + 32);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *((_DWORD *)v6 + 14) = 1065353216;
    *(_QWORD *)(v6 + 76) = 0;
    *(_QWORD *)(v6 + 68) = 0;
    *((_DWORD *)v6 + 21) = 0;
    *(_QWORD *)(v6 + 60) = 0x100000000;
    *((_DWORD *)v6 + 32) = 0;
    *((_QWORD *)v6 + 14) = 0;
    *((_QWORD *)v6 + 15) = 0;
    *((_QWORD *)v6 + 11) = 0;
    *((_QWORD *)v6 + 12) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *((_QWORD *)v6 + 13) = _D0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v17, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_19C7F36B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_19C7F372C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::auto_optimize_options::~auto_optimize_options(void **this)
{
  void **v2;

  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  v2 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_19C7F388C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::allocator<std::string> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_19C7F3998(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 *v16;
  uint64_t v17;

  v6 = (__int128 *)__str;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < a4)
  {
    if (v10)
    {
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a1);
      operator delete(*(void **)a1);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    if (v11 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v12;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v13);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(v9, v6, a3, *(std::string **)(a1 + 8));
LABEL_17:
    *(_QWORD *)(a1 + 8) = v14;
    return;
  }
  v15 = *(std::string **)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v10) >> 3) < a4)
  {
    v16 = (__int128 *)(&__str->__r_.__value_.__l.__data_ + (((char *)v15 - (char *)v10) >> 3));
    if (v15 != v10)
    {
      v17 = 8 * (((char *)v15 - (char *)v10) >> 3);
      do
      {
        std::string::operator=(v10, (const std::string *)v6);
        v6 = (__int128 *)((char *)v6 + 24);
        ++v10;
        v17 -= 24;
      }
      while (v17);
      v10 = *(std::string **)(a1 + 8);
    }
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(v9, v16, a3, v10);
    goto LABEL_17;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(v10, (const std::string *)v6);
      v6 = (__int128 *)((char *)v6 + 24);
      ++v10;
    }
    while (v6 != a3);
    v15 = *(std::string **)(a1 + 8);
  }
  while (v15 != v10)
  {
    if (SHIBYTE(v15[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15[-1].__r_.__value_.__l.__data_);
    --v15;
  }
  *(_QWORD *)(a1 + 8) = v10;
}

void sub_19C7F3B54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    v24 = (uint64_t *)a1;
    v25 = v9;
    v26 = v9;
    if (v9)
    {
      v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 4));
          v11 = *(_OWORD *)(v10 + 7);
          v12 = *(_OWORD *)(v10 + 9);
          v9[11] = v10[11];
          *(_OWORD *)(v9 + 9) = v12;
          *(_OWORD *)(v9 + 7) = v11;
          if (v9 != v10)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v9 + 96, (char *)v10[12], v10[13], (v10[13] - v10[12]) >> 2);
          v13 = *v8;
          v14 = (uint64_t **)(a1 + 8);
          v15 = (uint64_t **)(a1 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                v14 = (uint64_t **)v13;
                if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v26 + 4, v13 + 4))
                  break;
                v13 = *v14;
                v15 = v14;
                if (!*v14)
                  goto LABEL_16;
              }
              v13 = v14[1];
            }
            while (v13);
            v15 = v14 + 1;
          }
LABEL_16:
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v14, v15, v26);
          v9 = v25;
          v26 = v25;
          if (v25)
            v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v25);
          v16 = (uint64_t *)v10[1];
          if (v16)
          {
            do
            {
              a2 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v10[2];
              v17 = *a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v17);
          }
          if (!v9)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v24);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__construct_node<std::pair<std::string const,Espresso::layer_shape> const&>((uint64_t)&v24, a1, (uint64_t)(a2 + 4));
      v18 = v24;
      v19 = *(uint64_t **)(a1 + 8);
      v20 = (uint64_t **)(a1 + 8);
      v21 = (uint64_t **)(a1 + 8);
      if (v19)
      {
        do
        {
          while (1)
          {
            v20 = (uint64_t **)v19;
            if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v18 + 4, v19 + 4))
              break;
            v19 = *v20;
            v21 = v20;
            if (!*v20)
              goto LABEL_33;
          }
          v19 = v20[1];
        }
        while (v19);
        v21 = v20 + 1;
      }
LABEL_33:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v20, v21, v18);
      v24 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)&v24);
      v22 = (uint64_t *)a2[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (uint64_t *)a2[2];
          v17 = *v23 == (_QWORD)a2;
          a2 = v23;
        }
        while (!v17);
      }
      a2 = v23;
    }
    while (v23 != a3);
  }
}

void sub_19C7F3DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v2);
  }
  return a1;
}

_QWORD *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__construct_node<std::pair<std::string const,Espresso::layer_shape> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  const void *v8;
  _QWORD *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x78uLL);
  v7 = v6;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 32), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  *((_QWORD *)v7 + 12) = 0;
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v7 + 72) = *(_OWORD *)(a3 + 40);
  v8 = *(const void **)(a3 + 64);
  *((_QWORD *)v7 + 11) = *(_QWORD *)(a3 + 56);
  *((_QWORD *)v7 + 13) = 0;
  *((_QWORD *)v7 + 14) = 0;
  result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)v7 + 12, v8, *(_QWORD *)(a3 + 72), (uint64_t)(*(_QWORD *)(a3 + 72) - (_QWORD)v8) >> 2);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_19C7F3F00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C7F4010(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

char *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::net_configuration>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::net_configuration>,0>(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = (void **)(a1 + 24);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(_QWORD **)(a1 + 56));
  v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::map<std::string,Espresso::layer_shape>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v15[3];
  _QWORD *v16;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = (_QWORD *)v3;
      if (*(_QWORD *)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD **)(a1 + 8);
      v9 = (_QWORD *)v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          v16 = (_QWORD *)v3;
          v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__construct_node<std::pair<std::string const,Espresso::layer_shape> const&>((uint64_t)v15, a1, (uint64_t)(v5 + 4));
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15[0]);
          v15[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
          goto LABEL_15;
        }
        v16 = v7;
        v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        v11 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v16, v5 + 4);
      }
      if (!*v11)
        goto LABEL_14;
LABEL_15:
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v10 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v10);
      }
      v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_19C7F43A0(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::net_configuration>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend::WriteModelOutputs(uint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  void **v18;
  void *i;
  unint64_t v20;
  _QWORD *v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  int8x8_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  void *v43;
  void *__p[2];
  uint64_t v45;
  unint64_t v46;

  v46 = 0;
  v3 = *a1;
  if (*(_QWORD *)(*a1 + 40) != *(_QWORD *)(*a1 + 32))
  {
    v6 = 0;
    while (1)
    {
      v7 = 0;
      v8 = -1;
      do
      {
        v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v3 + 96), v6, &v46);
        if (++v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[4] - v9[3]) >> 3))
          goto LABEL_80;
        v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(*a1 + 96), v6, &v46);
        v11 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2, (unsigned __int8 *)(v10[3] + v7));
        v3 = *a1;
        v7 += 24;
      }
      while (!v11);
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 16 * v6) + 64);
      std::string::basic_string[abi:ne180100]<0>(__p, "is_output");
      v13 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
      v14 = v13;
      v15 = *(_QWORD *)(v12 + 248);
      if (v15)
      {
        v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
        v16.i16[0] = vaddlv_u8(v16);
        v17 = v16.u32[0];
        if (v16.u32[0] > 1uLL)
        {
          v2 = v13;
          if (v13 >= v15)
            v2 = v13 % v15;
        }
        else
        {
          v2 = (v15 - 1) & v13;
        }
        v18 = *(void ***)(*(_QWORD *)(v12 + 240) + 8 * v2);
        if (v18)
        {
          for (i = *v18; i; i = *(void **)i)
          {
            v20 = *((_QWORD *)i + 1);
            if (v20 == v14)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)__p))
              {
                goto LABEL_78;
              }
            }
            else
            {
              if (v17 > 1)
              {
                if (v20 >= v15)
                  v20 %= v15;
              }
              else
              {
                v20 &= v15 - 1;
              }
              if (v20 != v2)
                break;
            }
          }
        }
      }
      i = operator new(0x30uLL);
      v21 = (_QWORD *)(v12 + 256);
      *(_QWORD *)i = 0;
      *((_QWORD *)i + 1) = v14;
      *((_QWORD *)i + 4) = v45;
      *((_OWORD *)i + 1) = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v45 = 0;
      *((_DWORD *)i + 10) = 0;
      v22 = (float)(unint64_t)(*(_QWORD *)(v12 + 264) + 1);
      v23 = *(float *)(v12 + 272);
      if (!v15 || (float)(v23 * (float)v15) < v22)
        break;
LABEL_68:
      v40 = *(_QWORD *)(v12 + 240);
      v41 = *(_QWORD **)(v40 + 8 * v2);
      if (v41)
      {
        *(_QWORD *)i = *v41;
LABEL_76:
        *v41 = i;
        goto LABEL_77;
      }
      *(_QWORD *)i = *v21;
      *v21 = i;
      *(_QWORD *)(v40 + 8 * v2) = v21;
      if (*(_QWORD *)i)
      {
        v42 = *(_QWORD *)(*(_QWORD *)i + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v42 >= v15)
            v42 %= v15;
        }
        else
        {
          v42 &= v15 - 1;
        }
        v41 = (_QWORD *)(*(_QWORD *)(v12 + 240) + 8 * v42);
        goto LABEL_76;
      }
LABEL_77:
      ++*(_QWORD *)(v12 + 264);
LABEL_78:
      *((_DWORD *)i + 10) = 1;
      if (SHIBYTE(v45) < 0)
        operator delete(__p[0]);
LABEL_80:
      v46 = ++v6;
      v3 = *a1;
      if (v6 >= (uint64_t)(*(_QWORD *)(*a1 + 40) - *(_QWORD *)(*a1 + 32)) >> 4)
        return;
    }
    v24 = (v15 & (v15 - 1)) != 0;
    if (v15 < 3)
      v24 = 1;
    v25 = v24 | (2 * v15);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = (int8x8_t)v26;
    else
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v15 = *(_QWORD *)(v12 + 248);
    if (*(_QWORD *)&prime > v15)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v15)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(v12 + 264) / *(float *)(v12 + 272));
      if (v15 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (*(_QWORD *)&prime <= v34)
        prime = (int8x8_t)v34;
      if (*(_QWORD *)&prime >= v15)
      {
        v15 = *(_QWORD *)(v12 + 248);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v28 = operator new(8 * *(_QWORD *)&prime);
          v29 = *(void **)(v12 + 240);
          *(_QWORD *)(v12 + 240) = v28;
          if (v29)
            operator delete(v29);
          v30 = 0;
          *(int8x8_t *)(v12 + 248) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(v12 + 240) + 8 * v30++) = 0;
          while (*(_QWORD *)&prime != v30);
          v31 = (_QWORD *)*v21;
          if (*v21)
          {
            v32 = v31[1];
            v33 = (uint8x8_t)vcnt_s8(prime);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] > 1uLL)
            {
              if (v32 >= *(_QWORD *)&prime)
                v32 %= *(_QWORD *)&prime;
            }
            else
            {
              v32 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(v12 + 240) + 8 * v32) = v21;
            v37 = (_QWORD *)*v31;
            if (*v31)
            {
              do
              {
                v38 = v37[1];
                if (v33.u32[0] > 1uLL)
                {
                  if (v38 >= *(_QWORD *)&prime)
                    v38 %= *(_QWORD *)&prime;
                }
                else
                {
                  v38 &= *(_QWORD *)&prime - 1;
                }
                if (v38 != v32)
                {
                  v39 = *(_QWORD *)(v12 + 240);
                  if (!*(_QWORD *)(v39 + 8 * v38))
                  {
                    *(_QWORD *)(v39 + 8 * v38) = v31;
                    goto LABEL_59;
                  }
                  *v31 = *v37;
                  *v37 = **(_QWORD **)(*(_QWORD *)(v12 + 240) + 8 * v38);
                  **(_QWORD **)(*(_QWORD *)(v12 + 240) + 8 * v38) = v37;
                  v37 = v31;
                }
                v38 = v32;
LABEL_59:
                v31 = v37;
                v37 = (_QWORD *)*v37;
                v32 = v38;
              }
              while (v37);
            }
          }
          v15 = (unint64_t)prime;
          goto LABEL_63;
        }
        v43 = *(void **)(v12 + 240);
        *(_QWORD *)(v12 + 240) = 0;
        if (v43)
          operator delete(v43);
        v15 = 0;
        *(_QWORD *)(v12 + 248) = 0;
      }
    }
LABEL_63:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v2 = v14 % v15;
      else
        v2 = v14;
    }
    else
    {
      v2 = (v15 - 1) & v14;
    }
    goto LABEL_68;
  }
}

void sub_19C7F48DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void **v16;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:ne180100](1, v16);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = a1 + 2;
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = a1[1];
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = (void *)*a1;
      *a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*v12;
  if (*v12)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v23) = v12;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*a1 + 8 * v29))
          {
            *(_QWORD *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*a1 + 8 * v29);
          **(_QWORD **)(*a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v5);
  if (v31)
  {
    *i = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *i = *v12;
  *v12 = i;
  *(_QWORD *)(v30 + 8 * v5) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_19C7F4CEC(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  void **v3;

  if (a1)
  {
    v3 = __p + 3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

void CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend::WriteNetwork(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t **v6;
  _OWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::string v31;
  std::string v32;
  std::string v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *__p;
  std::__shared_weak_count *v37;
  char v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::string v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::string v44;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a3 + 8) + 48))(*(_QWORD *)(a3 + 8)) == 1)
  {
    v6 = (uint64_t **)(*a2 + 472);
    std::string::basic_string[abi:ne180100]<0>(&v44, "in_memory_model");
    v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, &v44, &v41);
    MEMORY[0x1A1AD5EAC]((char *)v7 + 56, "1");
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    v8 = (std::__shared_weak_count *)a2[1];
    v42 = *a2;
    v43 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    +[MLCompilerNeuralNetworkOutput outputWithEspressoNetwork:](MLCompilerNeuralNetworkOutput, "outputWithEspressoNetwork:", &v42);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v43;
    if (v43)
    {
      v13 = (unint64_t *)&v43->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    setCompiledObject((std::string *)a1, (objc_object *)a3, v11);

  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v44, "model.espresso.net");
    OArchive::blob(&v41, *(_QWORD *)(a3 + 8), (uint64_t)&v44);
    if (*(char *)(v41.__r_.__value_.__r.__words[0] + 623) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a1, *(const std::string::value_type **)(v41.__r_.__value_.__r.__words[0] + 600), *(_QWORD *)(v41.__r_.__value_.__r.__words[0] + 608));
    }
    else
    {
      v15 = *(_OWORD *)(v41.__r_.__value_.__r.__words[0] + 600);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(v41.__r_.__value_.__r.__words[0] + 616);
      *(_OWORD *)a1 = v15;
    }
    size = (std::__shared_weak_count *)v41.__r_.__value_.__l.__size_;
    if (v41.__r_.__value_.__l.__size_)
    {
      v17 = (unint64_t *)(v41.__r_.__value_.__l.__size_ + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v41, "model.espresso.shape");
    OArchive::blob(&__p, *(_QWORD *)(a3 + 8), (uint64_t)&v41);
    if (*((char *)__p + 623) < 0)
      std::string::__init_copy_ctor_external(&v44, *((const std::string::value_type **)__p + 75), *((_QWORD *)__p + 76));
    else
      v44 = *(std::string *)((_BYTE *)__p + 25);
    v19 = v37;
    if (v37)
    {
      v20 = (unint64_t *)&v37->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "model.espresso.weights");
    OArchive::blob(&v39, *(_QWORD *)(a3 + 8), (uint64_t)&__p);
    if (*(char *)(v39 + 623) < 0)
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(v39 + 600), *(_QWORD *)(v39 + 608));
    else
      v41 = *(std::string *)(v39 + 600);
    v22 = v40;
    if (v40)
    {
      v23 = (unint64_t *)&v40->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v38 < 0)
      operator delete(__p);
    v25 = (std::__shared_weak_count *)a2[1];
    v34 = *a2;
    v35 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v33 = *(std::string *)a1;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v32, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
    else
      v32 = v44;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v31, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
    else
      v31 = v41;
    Espresso::dump_network();
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    v28 = v35;
    if (v35)
    {
      v29 = (unint64_t *)&v35->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
  }
}

void sub_19C7F52C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if (*(char *)(v38 - 105) < 0)
    operator delete(*(void **)(v38 - 128));
  if (*(char *)(v38 - 57) < 0)
    operator delete(*(void **)(v38 - 80));
  if (*(char *)(v37 + 23) < 0)
    operator delete(*(void **)v37);
  _Unwind_Resume(a1);
}

void OArchive::blob(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(&v10, a2, a3);
  v4 = v11;
  *a1 = v10;
  a1[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v11;
    if (v11)
    {
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_19C7F5B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7F5F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C7F63F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  CoreML::Specification::Kernel::~Kernel((CoreML::Specification::Kernel *)va);

  _Unwind_Resume(a1);
}

void sub_19C7F6640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_19C7F681C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C7F69C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C7F6EE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t getGrayImageDimensionsFromMultiArrayShape(void *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v7 = a1;
  v8 = objc_msgSend(v7, "count");
  v9 = 0;
  while (v9 + 2 < (unint64_t)objc_msgSend(v7, "count"))
  {
    objc_msgSend(v7, "objectAtIndexedSubscript:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "intValue");

    ++v9;
    if (v11 != 1)
      goto LABEL_6;
  }
  if (v8 <= 1)
  {
LABEL_6:
    if (a4)
    {
      objc_msgSend(v7, "componentsJoinedByString:", CFSTR(", "));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("Invalid array shape [%@] for converting to gray image. %@"), v12, CFSTR("Shape must have at least 2 dimensions, and if more, the first dimensions should have a size of 1."));
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
    v13 = 0;
    goto LABEL_14;
  }
  objc_msgSend(v7, "objectAtIndexedSubscript:", objc_msgSend(v7, "count") - 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "unsignedIntegerValue");

  objc_msgSend(v7, "objectAtIndexedSubscript:", objc_msgSend(v7, "count") - 2);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "unsignedIntegerValue");

  if (a2)
    *a2 = v15;
  if (a3)
    *a3 = v17;
  v13 = 1;
LABEL_14:

  return v13;
}

void sub_19C7F71F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7F749C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C7F75F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C7F7868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C7F80F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C7F8408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a17);
  _Unwind_Resume(a1);
}

void sub_19C7FAEA8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, _QWORD *a18, uint64_t a19, uint64_t a20,_Unwind_Exception *exception_objecta,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  id *v54;
  void *v55;
  void *v56;

  if (a2)
  {
    if (SLOBYTE(STACK[0x277]) < 0)
      operator delete((void *)STACK[0x260]);
    if (a53)
      std::default_delete<CoreML::NNCompiler::MLModelInfo const>::operator()[abi:ne180100](a53);
    if (a52)
      (*(void (**)(uint64_t))(*(_QWORD *)a52 + 8))(a52);
    if (a41 < 0)
      operator delete(a36);
    if (a42)
      (*(void (**)(uint64_t))(*(_QWORD *)a42 + 8))(a42);

    if (a2 == 3)
    {
      v54 = (id *)__cxa_begin_catch(a1);
      if (a18)
        *a18 = objc_retainAutorelease(v54[1]);
    }
    else
    {
      v55 = __cxa_begin_catch(a1);
      if (a2 != 2)
      {
        if (a18)
        {
          +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("Encountered an unexpected error while compiling a neural network model."));
          *a18 = (id)objc_claimAutoreleasedReturnValue();
        }
        __cxa_end_catch();
        JUMPOUT(0x19C7FAB54);
      }
      if (a18)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (*(uint64_t (**)(void *))(*(_QWORD *)v55 + 16))(v55));
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("Encountered an error while compiling a neural network model: %@"));
        *a18 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
    __cxa_end_catch();
    JUMPOUT(0x19C7FAB50);
  }
  _Unwind_Resume(a1);
}

void sub_19C7FBE0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const char *MLModelType_Name(int a1)
{
  const char *result;

  if (a1 > 559)
  {
    if (a1 > 899)
    {
      switch(a1)
      {
        case 2000:
          result = "MLModelType_textClassifier";
          break;
        case 2001:
          result = "MLModelType_wordTagger";
          break;
        case 2002:
          result = "MLModelType_visionFeaturePrint";
          break;
        case 2003:
          result = "MLModelType_soundAnalysisPreprocessing";
          break;
        case 2004:
          result = "MLModelType_gazetteer";
          break;
        case 2005:
          result = "MLModelType_wordEmbedding";
          break;
        case 2006:
          result = "MLModelType_audioFeaturePrint";
          break;
        default:
          if (a1 == 900)
          {
            result = "MLModelType_identity";
          }
          else
          {
            if (a1 != 3000)
              return "INVALID";
            result = "MLModelType_serializedModel";
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 600:
          result = "MLModelType_oneHotEncoder";
          break;
        case 601:
          result = "MLModelType_imputer";
          break;
        case 602:
          result = "MLModelType_featureVectorizer";
          break;
        case 603:
          result = "MLModelType_dictVectorizer";
          break;
        case 604:
          result = "MLModelType_scaler";
          break;
        case 605:
        case 608:
          return "INVALID";
        case 606:
          result = "MLModelType_categoricalMapping";
          break;
        case 607:
          result = "MLModelType_normalizer";
          break;
        case 609:
          result = "MLModelType_arrayFeatureExtractor";
          break;
        case 610:
          result = "MLModelType_nonMaximumSuppression";
          break;
        default:
          if (a1 != 560)
            return "INVALID";
          result = "MLModelType_classConfidenceThresholding";
          break;
      }
    }
  }
  else
  {
    if (a1 > 399)
    {
      if (a1 <= 499)
      {
        switch(a1)
        {
          case 400:
            result = "MLModelType_glmClassifier";
            break;
          case 401:
            result = "MLModelType_supportVectorClassifier";
            break;
          case 402:
            result = "MLModelType_treeEnsembleClassifier";
            break;
          case 403:
            result = "MLModelType_neuralNetworkClassifier";
            break;
          case 404:
            result = "MLModelType_kNearestNeighborsClassifier";
            break;
          default:
            return "INVALID";
        }
        return result;
      }
      if (a1 <= 501)
      {
        if (a1 == 500)
          return "MLModelType_neuralNetwork";
        else
          return "MLModelType_itemSimilarityRecommender";
      }
      switch(a1)
      {
        case 502:
          return "MLModelType_mlProgram";
        case 555:
          return "MLModelType_customModel";
        case 556:
          return "MLModelType_linkedModel";
      }
      return "INVALID";
    }
    if (a1 <= 201)
    {
      if (a1)
      {
        if (a1 == 200)
          return "MLModelType_pipelineClassifier";
        if (a1 == 201)
          return "MLModelType_pipelineRegressor";
      }
      return "INVALID";
    }
    switch(a1)
    {
      case 300:
        result = "MLModelType_glmRegressor";
        break;
      case 301:
        result = "MLModelType_supportVectorRegressor";
        break;
      case 302:
        result = "MLModelType_treeEnsembleRegressor";
        break;
      case 303:
        result = "MLModelType_neuralNetworkRegressor";
        break;
      case 304:
        result = "MLModelType_bayesianProbitRegressor";
        break;
      default:
        if (a1 != 202)
          return "INVALID";
        result = "MLModelType_pipeline";
        break;
    }
  }
  return result;
}

{
  const char *result;

  if (a1 > 559)
  {
    if (a1 > 899)
    {
      switch(a1)
      {
        case 2000:
          result = "MLModelType_textClassifier";
          break;
        case 2001:
          result = "MLModelType_wordTagger";
          break;
        case 2002:
          result = "MLModelType_visionFeaturePrint";
          break;
        case 2003:
          result = "MLModelType_soundAnalysisPreprocessing";
          break;
        case 2004:
          result = "MLModelType_gazetteer";
          break;
        case 2005:
          result = "MLModelType_wordEmbedding";
          break;
        case 2006:
          result = "MLModelType_audioFeaturePrint";
          break;
        default:
          if (a1 == 900)
          {
            result = "MLModelType_identity";
          }
          else
          {
            if (a1 != 3000)
              return "INVALID";
            result = "MLModelType_serializedModel";
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 600:
          result = "MLModelType_oneHotEncoder";
          break;
        case 601:
          result = "MLModelType_imputer";
          break;
        case 602:
          result = "MLModelType_featureVectorizer";
          break;
        case 603:
          result = "MLModelType_dictVectorizer";
          break;
        case 604:
          result = "MLModelType_scaler";
          break;
        case 605:
        case 608:
          return "INVALID";
        case 606:
          result = "MLModelType_categoricalMapping";
          break;
        case 607:
          result = "MLModelType_normalizer";
          break;
        case 609:
          result = "MLModelType_arrayFeatureExtractor";
          break;
        case 610:
          result = "MLModelType_nonMaximumSuppression";
          break;
        default:
          if (a1 != 560)
            return "INVALID";
          result = "MLModelType_classConfidenceThresholding";
          break;
      }
    }
  }
  else
  {
    if (a1 > 399)
    {
      if (a1 <= 499)
      {
        switch(a1)
        {
          case 400:
            result = "MLModelType_glmClassifier";
            break;
          case 401:
            result = "MLModelType_supportVectorClassifier";
            break;
          case 402:
            result = "MLModelType_treeEnsembleClassifier";
            break;
          case 403:
            result = "MLModelType_neuralNetworkClassifier";
            break;
          case 404:
            result = "MLModelType_kNearestNeighborsClassifier";
            break;
          default:
            return "INVALID";
        }
        return result;
      }
      if (a1 <= 501)
      {
        if (a1 == 500)
          return "MLModelType_neuralNetwork";
        else
          return "MLModelType_itemSimilarityRecommender";
      }
      switch(a1)
      {
        case 502:
          return "MLModelType_mlProgram";
        case 555:
          return "MLModelType_customModel";
        case 556:
          return "MLModelType_linkedModel";
      }
      return "INVALID";
    }
    if (a1 <= 201)
    {
      if (a1)
      {
        if (a1 == 200)
          return "MLModelType_pipelineClassifier";
        if (a1 == 201)
          return "MLModelType_pipelineRegressor";
      }
      return "INVALID";
    }
    switch(a1)
    {
      case 300:
        result = "MLModelType_glmRegressor";
        break;
      case 301:
        result = "MLModelType_supportVectorRegressor";
        break;
      case 302:
        result = "MLModelType_treeEnsembleRegressor";
        break;
      case 303:
        result = "MLModelType_neuralNetworkRegressor";
        break;
      case 304:
        result = "MLModelType_bayesianProbitRegressor";
        break;
      default:
        if (a1 != 202)
          return "INVALID";
        result = "MLModelType_pipeline";
        break;
    }
  }
  return result;
}

{
  const char *result;

  if (a1 > 559)
  {
    if (a1 > 899)
    {
      switch(a1)
      {
        case 2000:
          result = "MLModelType_textClassifier";
          break;
        case 2001:
          result = "MLModelType_wordTagger";
          break;
        case 2002:
          result = "MLModelType_visionFeaturePrint";
          break;
        case 2003:
          result = "MLModelType_soundAnalysisPreprocessing";
          break;
        case 2004:
          result = "MLModelType_gazetteer";
          break;
        case 2005:
          result = "MLModelType_wordEmbedding";
          break;
        case 2006:
          result = "MLModelType_audioFeaturePrint";
          break;
        default:
          if (a1 == 900)
          {
            result = "MLModelType_identity";
          }
          else
          {
            if (a1 != 3000)
              return "INVALID";
            result = "MLModelType_serializedModel";
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 600:
          result = "MLModelType_oneHotEncoder";
          break;
        case 601:
          result = "MLModelType_imputer";
          break;
        case 602:
          result = "MLModelType_featureVectorizer";
          break;
        case 603:
          result = "MLModelType_dictVectorizer";
          break;
        case 604:
          result = "MLModelType_scaler";
          break;
        case 605:
        case 608:
          return "INVALID";
        case 606:
          result = "MLModelType_categoricalMapping";
          break;
        case 607:
          result = "MLModelType_normalizer";
          break;
        case 609:
          result = "MLModelType_arrayFeatureExtractor";
          break;
        case 610:
          result = "MLModelType_nonMaximumSuppression";
          break;
        default:
          if (a1 != 560)
            return "INVALID";
          result = "MLModelType_classConfidenceThresholding";
          break;
      }
    }
  }
  else
  {
    if (a1 > 399)
    {
      if (a1 <= 499)
      {
        switch(a1)
        {
          case 400:
            result = "MLModelType_glmClassifier";
            break;
          case 401:
            result = "MLModelType_supportVectorClassifier";
            break;
          case 402:
            result = "MLModelType_treeEnsembleClassifier";
            break;
          case 403:
            result = "MLModelType_neuralNetworkClassifier";
            break;
          case 404:
            result = "MLModelType_kNearestNeighborsClassifier";
            break;
          default:
            return "INVALID";
        }
        return result;
      }
      if (a1 <= 501)
      {
        if (a1 == 500)
          return "MLModelType_neuralNetwork";
        else
          return "MLModelType_itemSimilarityRecommender";
      }
      switch(a1)
      {
        case 502:
          return "MLModelType_mlProgram";
        case 555:
          return "MLModelType_customModel";
        case 556:
          return "MLModelType_linkedModel";
      }
      return "INVALID";
    }
    if (a1 <= 201)
    {
      if (a1)
      {
        if (a1 == 200)
          return "MLModelType_pipelineClassifier";
        if (a1 == 201)
          return "MLModelType_pipelineRegressor";
      }
      return "INVALID";
    }
    switch(a1)
    {
      case 300:
        result = "MLModelType_glmRegressor";
        break;
      case 301:
        result = "MLModelType_supportVectorRegressor";
        break;
      case 302:
        result = "MLModelType_treeEnsembleRegressor";
        break;
      case 303:
        result = "MLModelType_neuralNetworkRegressor";
        break;
      case 304:
        result = "MLModelType_bayesianProbitRegressor";
        break;
      default:
        if (a1 != 202)
          return "INVALID";
        result = "MLModelType_pipeline";
        break;
    }
  }
  return result;
}

uint64_t std::default_delete<CoreML::NNCompiler::MLModelInfo const>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  void **v2;

  if (result)
  {
    v1 = result;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(result + 136));

    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>>>::destroy(*(_QWORD **)(v1 + 88));
    if (*(char *)(v1 + 79) < 0)
      operator delete(*(void **)(v1 + 56));
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    v2 = (void **)(v1 + 8);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    return MEMORY[0x1A1AD6260](v1, 0x10F2C40548D0382);
  }
  return result;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

uint64_t std::pair<std::string,std::optional<std::string>>::~pair(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

MIL::Attributes::BuildInfo *std::unique_ptr<MIL::Attributes::BuildInfo>::reset[abi:ne180100](MIL::Attributes::BuildInfo **a1)
{
  MIL::Attributes::BuildInfo *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    MIL::Attributes::BuildInfo::~BuildInfo(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a1)
  {
    v3 = a1;
    v4 = 1;
    do
    {
      if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, v3 + 4))
      {
        if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v3 + 4, a2))
          return v4;
        ++v3;
      }
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  return 0;
}

__n128 std::make_unique[abi:ne180100]<CoreML::NNCompiler::Backend::MIL::Ios15::Ios15Backend,std::unique_ptr<MIL::IRProgram const>,std::unique_ptr<CoreML::NNCompiler::MLModelInfo const>>(uint64_t *a1, _QWORD *a2, unint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __n128 result;
  __int128 v13;

  v6 = operator new();
  *(_QWORD *)&v13 = *a2;
  if (*a2)
  {
    v7 = (_QWORD *)operator new();
    v8 = *a2;
    *v7 = &off_1E3D5C368;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v8;
  }
  else
  {
    v7 = 0;
  }
  *((_QWORD *)&v13 + 1) = v7;
  *a2 = 0;
  v9 = *a3;
  if (*a3)
  {
    v10 = (_QWORD *)operator new();
    v11 = *a3;
    *v10 = &off_1E3D5C3A0;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = v11;
  }
  else
  {
    v10 = 0;
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v10;
  *a3 = 0;
  *(_QWORD *)v6 = &off_1E3D4CA88;
  *(_OWORD *)(v6 + 8) = v13;
  *(__n128 *)(v6 + 24) = result;
  *a1 = v6;
  return result;
}

void sub_19C7FC4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1A1AD6260](v9, 0xE1C40C9F98117);
  _Unwind_Resume(a1);
}

__n128 std::make_unique[abi:ne180100]<CoreML::NNCompiler::Backend::MIL::Ios16::Ios16Backend,std::unique_ptr<MIL::IRProgram const>,std::unique_ptr<CoreML::NNCompiler::MLModelInfo const>>(uint64_t *a1, _QWORD *a2, unint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __n128 result;
  __int128 v13;

  v6 = operator new();
  *(_QWORD *)&v13 = *a2;
  if (*a2)
  {
    v7 = (_QWORD *)operator new();
    v8 = *a2;
    *v7 = &off_1E3D5C368;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v8;
  }
  else
  {
    v7 = 0;
  }
  *((_QWORD *)&v13 + 1) = v7;
  *a2 = 0;
  v9 = *a3;
  if (*a3)
  {
    v10 = (_QWORD *)operator new();
    v11 = *a3;
    *v10 = &off_1E3D5C3A0;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = v11;
  }
  else
  {
    v10 = 0;
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v10;
  *a3 = 0;
  *(_QWORD *)v6 = &off_1E3D4CAD0;
  *(_OWORD *)(v6 + 8) = v13;
  *(__n128 *)(v6 + 24) = result;
  *a1 = v6;
  return result;
}

void sub_19C7FC5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1A1AD6260](v9, 0xE1C40C9F98117);
  _Unwind_Resume(a1);
}

__n128 std::make_unique[abi:ne180100]<CoreML::NNCompiler::Backend::MIL::Ios16Train::Ios16TrainBackend,std::unique_ptr<MIL::IRProgram const>,std::unique_ptr<CoreML::NNCompiler::MLModelInfo const>>(uint64_t *a1, _QWORD *a2, unint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __n128 result;
  __int128 v13;

  v6 = operator new();
  *(_QWORD *)&v13 = *a2;
  if (*a2)
  {
    v7 = (_QWORD *)operator new();
    v8 = *a2;
    *v7 = &off_1E3D5C368;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v8;
  }
  else
  {
    v7 = 0;
  }
  *((_QWORD *)&v13 + 1) = v7;
  *a2 = 0;
  v9 = *a3;
  if (*a3)
  {
    v10 = (_QWORD *)operator new();
    v11 = *a3;
    *v10 = &off_1E3D5C3A0;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = v11;
  }
  else
  {
    v10 = 0;
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v10;
  *a3 = 0;
  *(_QWORD *)v6 = &off_1E3D4CA20;
  *(_OWORD *)(v6 + 8) = v13;
  *(__n128 *)(v6 + 24) = result;
  *a1 = v6;
  return result;
}

void sub_19C7FC710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1A1AD6260](v9, 0xE1C40C9F98117);
  _Unwind_Resume(a1);
}

__n128 std::make_unique[abi:ne180100]<CoreML::NNCompiler::Backend::MIL::Ios17::Ios17Backend,std::unique_ptr<MIL::IRProgram const>,std::unique_ptr<CoreML::NNCompiler::MLModelInfo const>>(uint64_t *a1, _QWORD *a2, unint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __n128 result;
  __int128 v13;

  v6 = operator new();
  *(_QWORD *)&v13 = *a2;
  if (*a2)
  {
    v7 = (_QWORD *)operator new();
    v8 = *a2;
    *v7 = &off_1E3D5C368;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v8;
  }
  else
  {
    v7 = 0;
  }
  *((_QWORD *)&v13 + 1) = v7;
  *a2 = 0;
  v9 = *a3;
  if (*a3)
  {
    v10 = (_QWORD *)operator new();
    v11 = *a3;
    *v10 = &off_1E3D5C3A0;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = v11;
  }
  else
  {
    v10 = 0;
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v10;
  *a3 = 0;
  *(_QWORD *)v6 = &off_1E3D4CB18;
  *(_OWORD *)(v6 + 8) = v13;
  *(__n128 *)(v6 + 24) = result;
  *a1 = v6;
  return result;
}

void sub_19C7FC844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1A1AD6260](v9, 0xE1C40C9F98117);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<MIL::IRProgram const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB2ED48))
    return a1 + 24;
  else
    return 0;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::Blob::StorageData const>>,0>(uint64_t a1)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__shared_ptr_pointer<MIL::Blob::StorageData const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<MIL::Blob::StorageData const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Blob::StorageData const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB2ECB5))
    return a1 + 24;
  else
    return 0;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::Blob::StorageData const>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t std::__function::__func<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1A1AD6260);
}

_QWORD *std::__function::__func<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E3D5B7D8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E3D5B7D8;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::destroy(uint64_t a1)
{

}

void std::__function::__func<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::operator()(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN12_GLOBAL__N_125milStorageDataByFilePathsEP12NSDictionaryIP5NSURLP6NSDataEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<`anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::target_type()
{
}

void std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLFunctionInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLFunctionInfo>,0>(uint64_t a1)
{
  CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo(CoreML::NNCompiler::MLFunctionInfo *this)
{
  void **v2;

  if (*((char *)this + 311) < 0)
    operator delete(*((void **)this + 36));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*((char **)this + 32));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  v2 = (void **)((char *)this + 208);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 168);
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*((_QWORD **)this + 19));
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*((_QWORD **)this + 16));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*((_QWORD **)this + 10));
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*((_QWORD **)this + 7));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*((_QWORD **)this + 4));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLRangeShape>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLShapeInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLShapeInfo>,0>(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3D65458[v2])(&v4, a1);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML10NNCompiler21MLMultiArrayShapeInfoENS9_16MLImageShapeInfoEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor(a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML10NNCompiler21MLMultiArrayShapeInfoENS9_16MLImageShapeInfoEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor(a2);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3D65410[v2])(&v4, a1);
  *(_DWORD *)(a1 + 48) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v4 = (void **)(a2 + 24);
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLRangeShape>,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__shared_ptr_pointer<CoreML::NNCompiler::MLModelInfo const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<CoreML::NNCompiler::MLModelInfo const *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<CoreML::NNCompiler::MLModelInfo const>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<CoreML::NNCompiler::MLModelInfo const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIKN6CoreML10NNCompiler11MLModelInfoEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_19C7FD078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C7FD2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_19C7FD4A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C7FD54C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19C7FD63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C7FE208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_19C7FE498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C7FE7D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19C7FEA98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C7FEC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C7FECAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7FED58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7FEF98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7FF184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C7FF3BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7FF444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C7FF4CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C7FF840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C8006D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  void *v31;
  void *v32;

  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19C800954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C800A28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C800D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19C801138(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8012D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8014E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8018B8(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD);

  v1[2](v1);

  _Unwind_Resume(a1);
}

void sub_19C801B54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C801FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;

  if (v16)
    MEMORY[0x1A1AD6260](v16, 0x1000C40C46099A0);

  _Unwind_Resume(a1);
}

void sub_19C8022AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_19C802AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  void *v24;
  void *v25;
  void *v26;

  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);

  _Unwind_Resume(a1);
}

void sub_19C802F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  void *v20;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C8032C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_19C8034A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  va_list va;

  va_start(va, a9);
  v12 = v10;

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);

  _Unwind_Resume(a1);
}

void sub_19C80387C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C803AE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C803FD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19C8045D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19C8048F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLNeuralNetworkEngine;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19C805088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19C805744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C8059E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C805E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;
  void *v32;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);

  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19C80642C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);

  _Unwind_Resume(a1);
}

void sub_19C806604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C80677C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C806A50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C807298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

void sub_19C80767C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::map<std::string,espresso_buffer_t *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char **v2;
  char **v4;
  void *v5;
  char **v6;

  v1 = *a1;
  v2 = (char **)**a1;
  if (v2)
  {
    v4 = (char **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t __Block_byref_object_copy__2979(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2980(uint64_t a1)
{

}

void sub_19C80823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C80874C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19C808B04(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,_BlobShape>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v15;
  _QWORD *v16;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = (_QWORD *)v3;
      if (*(_QWORD *)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD **)(a1 + 8);
      v9 = (_QWORD *)v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          v16 = (_QWORD *)v3;
          v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::__construct_node<std::pair<std::string const,_BlobShape> const&>((uint64_t)&v15, a1, (uint64_t)(v5 + 4));
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15);
          goto LABEL_15;
        }
        v16 = v7;
        v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        v11 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v16, v5 + 4);
      }
      if (!*v11)
        goto LABEL_14;
LABEL_15:
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v10 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v10);
      }
      v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_19C808CB8(_Unwind_Exception *a1)
{
  char **v1;

  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::map<std::string,_BlobShape>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(v2 + 8));
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,_BlobShape>,std::__tree_node<std::__value_type<std::string,_BlobShape>,void *> *,long>>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  _QWORD *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;

  v5 = (uint64_t)result;
  if (result[2])
  {
    v6 = *result;
    v8 = (uint64_t **)(result + 1);
    v7 = result[1];
    *result = result + 1;
    *(_QWORD *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(_QWORD *)(v6 + 8))
      v9 = *(uint64_t **)(v6 + 8);
    else
      v9 = (uint64_t *)v6;
    v23 = result;
    v24 = v9;
    v25 = v9;
    if (v9)
    {
      v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 4));
          v11 = *(_OWORD *)(v10 + 7);
          v9[9] = v10[9];
          *(_OWORD *)(v9 + 7) = v11;
          v12 = *v8;
          v13 = (uint64_t **)(v5 + 8);
          v14 = (uint64_t **)(v5 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                v13 = (uint64_t **)v12;
                if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v25 + 4, v12 + 4))
                  break;
                v12 = *v13;
                v14 = v13;
                if (!*v13)
                  goto LABEL_14;
              }
              v12 = v13[1];
            }
            while (v12);
            v14 = v13 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v13, v14, v25);
          v9 = v24;
          v25 = v24;
          if (v24)
            v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v24);
          v15 = (_QWORD *)v10[1];
          if (v15)
          {
            do
            {
              a2 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v10[2];
              v16 = *a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v16);
          }
          if (!v9)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (_QWORD *)std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v23);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::__construct_node<std::pair<std::string const,_BlobShape> const&>((uint64_t)&v23, v5, (uint64_t)(a2 + 4));
      v17 = v23;
      v18 = *(uint64_t **)(v5 + 8);
      v19 = (uint64_t **)(v5 + 8);
      v20 = (uint64_t **)(v5 + 8);
      if (v18)
      {
        do
        {
          while (1)
          {
            v19 = (uint64_t **)v18;
            if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v17 + 4, v18 + 4))
              break;
            v18 = *v19;
            v20 = v19;
            if (!*v19)
              goto LABEL_31;
          }
          v18 = v19[1];
        }
        while (v18);
        v20 = v19 + 1;
      }
LABEL_31:
      result = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v19, v20, v17);
      v21 = (_QWORD *)a2[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)a2[2];
          v16 = *v22 == (_QWORD)a2;
          a2 = v22;
        }
        while (!v16);
      }
      a2 = v22;
    }
    while (v22 != a3);
  }
  return result;
}

void sub_19C808F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v2);
  }
  return a1;
}

__n128 std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::__construct_node<std::pair<std::string const,_BlobShape> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __n128 result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v6 + 56) = result;
  *((_QWORD *)v6 + 9) = *(_QWORD *)(a3 + 40);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_19C80900C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_19C8090F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C8091D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_19C809248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;

  result = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  if (!*result)
  {
    v6 = (uint64_t **)result;
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)&v7, (uint64_t)a1, a3);
    return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v8, v6, v7);
  }
  return result;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_19C809400(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_BYTE *)v6 + 56) = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

_OWORD *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_DWORD *)v6 + 14) = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t `anonymous namespace'::espressoPlanPriorityFromPredictionOptions(_anonymous_namespace_ *this, MLPredictionOptions *a2)
{
  _anonymous_namespace_ *v2;
  __CFString *v3;
  __CFString *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t buf[4];
  __CFString *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = this;
  -[_anonymous_namespace_ reconcileExecutionPriorityWithCurrentQoS:](v2, "reconcileExecutionPriorityWithCurrentQoS:", 0);
  v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3 == CFSTR("MLANEExecutionPriority_2"))
  {
    v5 = 1;
  }
  else if (v3 == CFSTR("MLANEExecutionPriority_3"))
  {
    v5 = 0x2000;
  }
  else if (v3 == CFSTR("MLANEExecutionPriority_4"))
  {
    v5 = 0x3FFFLL;
  }
  else if (v3 == CFSTR("MLANEExecutionPriority_5"))
  {
    v5 = 24574;
  }
  else
  {
    v5 = 0x7FFFLL;
    if (v3 != CFSTR("MLANEExecutionPriority_6") && v3 != CFSTR("MLANEExecutionPriority_7"))
    {
      if (v3 != CFSTR("MLANEExecutionPriority_Unspecified"))
      {
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v9 = v4;
          _os_log_error_impl(&dword_19C486000, v6, OS_LOG_TYPE_ERROR, "Unrecognized ANE execution priority %@", buf, 0xCu);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Unrecognized ANE execution priority %@"), v4);
      }
      v5 = 0;
    }
  }

  return v5;
}

void sub_19C8096C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLNeuralNetworkEngine convertPredictionToClassifierResult:withOptions:error:]::$_0 &,std::__wrap_iter<unsigned long *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;

  v4 = *a2;
  v5 = *a1;
  v6 = *(double *)(a4 + (*a2 << 32 >> 29));
  v7 = *(double *)(a4 + (*a1 << 32 >> 29));
  v8 = *a3;
  v9 = *(double *)(a4 + (*a3 << 32 >> 29));
  if (v6 > v7)
  {
    if (v9 > v6)
    {
      *a1 = v8;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    if (*(double *)(a4 + (*a3 << 32 >> 29)) <= v7)
      return 1;
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  if (v9 > v6)
  {
    *a2 = v8;
    *a3 = v4;
    v10 = *a1;
    if (*(double *)(a4 + (*a2 << 32 >> 29)) <= *(double *)(a4 + (*a1 << 32 >> 29)))
      return 1;
    *a1 = *a2;
    *a2 = v10;
    return 2;
  }
  return 0;
}

void sub_19C809980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C809A00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C809AE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C809F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C80A084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19C80A20C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C80A630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;

  google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~MapPair((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_19C80A93C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C80AC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~MapPair(uint64_t a1)
{
  CoreML::Specification::CustomModel_CustomModelParamValue::~CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t `anonymous namespace'::FindBlobFileReference(_anonymous_namespace_ *this, const MIL::IRValue *a2)
{
  MIL::IRListValue *v3;
  uint64_t Values;
  const MIL::IRValue *v5;
  _anonymous_namespace_ **v6;
  uint64_t v7;
  uint64_t result;
  MIL::IRTupleValue *v9;
  uint64_t v10;
  const MIL::IRValue *v11;
  _anonymous_namespace_ **v12;
  uint64_t v13;
  MIL::IRDictionaryValue *v14;
  uint64_t v15;
  uint64_t v16;
  const MIL::IRValue *v17;
  uint64_t v18;
  uint64_t v19;

  if ((*(uint64_t (**)(_anonymous_namespace_ *, const MIL::IRValue *))(*(_QWORD *)this + 48))(this, a2))
  {
    v3 = (MIL::IRListValue *)MIL::IRValue::AsList(this);
    Values = MIL::IRListValue::GetValues(v3);
    if (v5)
    {
      v6 = (_anonymous_namespace_ **)Values;
      v7 = 16 * (_QWORD)v5;
      while (1)
      {
        if (result)
          break;
        v6 += 2;
        v7 -= 16;
        if (!v7)
          return 0;
      }
      return result;
    }
    return 0;
  }
  if (!(*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 56))(this))
  {
    if ((*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 64))(this))
    {
      v14 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(this);
      v15 = MIL::IRDictionaryValue::begin(v14);
      v16 = MIL::IRDictionaryValue::end(v14);
      if (v15 != v16)
      {
        v18 = v16;
        do
        {
          if (result)
            break;
          v15 = *(_QWORD *)v15;
        }
        while (v15 != v18);
        return result;
      }
    }
    else
    {
      result = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 40))(this);
      if (!result)
        return result;
      v19 = MIL::IRValue::AsTensor(this);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 80))(v19))
        return (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 40))(this);
    }
    return 0;
  }
  v9 = (MIL::IRTupleValue *)MIL::IRValue::AsTuple(this);
  v10 = MIL::IRTupleValue::GetValues(v9);
  if (!v11)
    return 0;
  v12 = (_anonymous_namespace_ **)v10;
  v13 = 16 * (_QWORD)v11;
  while (1)
  {
    if (result)
      break;
    v12 += 2;
    v13 -= 16;
    if (!v13)
      return 0;
  }
  return result;
}

uint64_t `anonymous namespace'::IRValueHasBlobFileReference(_anonymous_namespace_ *this, const MIL::IRValue *a2)
{
  MIL::IRListValue *v3;
  uint64_t Values;
  const MIL::IRValue *v5;
  _anonymous_namespace_ **v6;
  uint64_t v7;
  _anonymous_namespace_ *v8;
  uint64_t result;
  uint64_t v10;
  MIL::IRTupleValue *v11;
  uint64_t v12;
  const MIL::IRValue *v13;
  _anonymous_namespace_ **v14;
  uint64_t v15;
  _anonymous_namespace_ *v16;
  uint64_t v17;
  MIL::IRDictionaryValue *v18;
  uint64_t v19;
  uint64_t v20;
  const MIL::IRValue *v21;
  uint64_t v22;
  uint64_t v23;

  if ((*(uint64_t (**)(_anonymous_namespace_ *, const MIL::IRValue *))(*(_QWORD *)this + 48))(this, a2))
  {
    v3 = (MIL::IRListValue *)MIL::IRValue::AsList(this);
    Values = MIL::IRListValue::GetValues(v3);
    if (v5)
    {
      v6 = (_anonymous_namespace_ **)Values;
      v7 = 16 * (_QWORD)v5 - 16;
      do
      {
        v8 = *v6;
        v6 += 2;
        if ((result & 1) != 0)
          break;
        v10 = v7;
        v7 -= 16;
      }
      while (v10);
      return result;
    }
    return 0;
  }
  if ((*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 56))(this))
  {
    v11 = (MIL::IRTupleValue *)MIL::IRValue::AsTuple(this);
    v12 = MIL::IRTupleValue::GetValues(v11);
    if (!v13)
      return 0;
    v14 = (_anonymous_namespace_ **)v12;
    v15 = 16 * (_QWORD)v13 - 16;
    do
    {
      v16 = *v14;
      v14 += 2;
      if ((result & 1) != 0)
        break;
      v17 = v15;
      v15 -= 16;
    }
    while (v17);
  }
  else if ((*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 64))(this))
  {
    v18 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(this);
    v19 = MIL::IRDictionaryValue::begin(v18);
    v20 = MIL::IRDictionaryValue::end(v18);
    if (v19 == v20)
      return 0;
    v22 = v20;
    do
    {
      if ((result & 1) != 0)
        break;
      v19 = *(_QWORD *)v19;
    }
    while (v19 != v22);
  }
  else
  {
    result = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 40))(this);
    if (result)
    {
      v23 = MIL::IRValue::AsTensor(this);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 80))(v23);
    }
  }
  return result;
}

void `anonymous namespace'::GetIRValueByResolvingBlobFileReference(_QWORD *a1, MIL::IRValue *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v8;
  MIL::IRListValue *v9;
  uint64_t Values;
  const MIL::IRValue *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  __int128 v38;
  int64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t (**v44)();
  MIL::IRTupleValue *v45;
  uint64_t v46;
  const MIL::IRValue *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  __int128 v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  __int128 v74;
  int64x2_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const MIL::IRValue *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint8x8_t v84;
  unint64_t v85;
  unint64_t v86;
  uint8x8_t v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  float v100;
  _BOOL8 v101;
  unint64_t v102;
  unint64_t v103;
  size_t v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  int64x2_t *v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  float v112;
  _BOOL8 v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  int64x2_t v130;
  _QWORD v131[2];
  _OWORD v132[2];
  float v133[4];

  if ((*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)a2 + 48))(a2))
  {
    v8 = a1;
    v9 = (MIL::IRListValue *)MIL::IRValue::AsList(a2);
    v130 = 0uLL;
    v131[0] = 0;
    Values = MIL::IRListValue::GetValues(v9);
    if (v11)
    {
      v12 = (_QWORD *)Values;
      v13 = (_QWORD *)(Values + 16 * (_QWORD)v11);
      {
        v14 = v130.i64[1];
        if (v130.i64[1] >= v131[0])
        {
          v34 = (v130.i64[1] - v130.i64[0]) >> 4;
          if ((unint64_t)(v34 + 1) >> 60)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          v35 = (v131[0] - v130.i64[0]) >> 3;
          if (v35 <= v34 + 1)
            v35 = v34 + 1;
          if (v131[0] - v130.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
            v36 = 0xFFFFFFFFFFFFFFFLL;
          else
            v36 = v35;
          *(_QWORD *)v133 = v131;
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v36);
          v26 = &v24[16 * v34];
          *(_OWORD *)v26 = v129;
          v30 = (_QWORD *)v130.i64[1];
          v37 = (_QWORD *)v130.i64[0];
          if (v130.i64[1] != v130.i64[0])
          {
            v32 = &v24[16 * v34];
            do
            {
              v38 = *((_OWORD *)v30 - 1);
              v30 -= 2;
              *((_OWORD *)v32 - 1) = v38;
              v32 -= 16;
              *v30 = 0;
              v30[1] = 0;
            }
            while (v30 != v37);
            goto LABEL_34;
          }
LABEL_35:
          v39 = vdupq_n_s64((unint64_t)v30);
          v32 = v26;
          goto LABEL_36;
        }
        *(_OWORD *)v130.i64[1] = v129;
        v15 = (_OWORD *)(v14 + 16);
LABEL_37:
        v130.i64[1] = (uint64_t)v15;
        v12 += 2;
        if (v12 == v13)
          goto LABEL_38;
      }
      v16 = v130.i64[1];
      if (v130.i64[1] < v131[0])
      {
        *(_QWORD *)v130.i64[1] = *v12;
        v17 = v12[1];
        *(_QWORD *)(v16 + 8) = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v15 = (_OWORD *)(v16 + 16);
        goto LABEL_37;
      }
      v20 = (v130.i64[1] - v130.i64[0]) >> 4;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 60)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v22 = v131[0] - v130.i64[0];
      if ((v131[0] - v130.i64[0]) >> 3 > v21)
        v21 = v22 >> 3;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
        v23 = 0xFFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      *(_QWORD *)v133 = v131;
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v23);
      v26 = &v24[16 * v20];
      v27 = *(_OWORD *)v12;
      *(_OWORD *)v26 = *(_OWORD *)v12;
      if (*((_QWORD *)&v27 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = (_QWORD *)v130.i64[1];
      v31 = (_QWORD *)v130.i64[0];
      if (v130.i64[1] == v130.i64[0])
        goto LABEL_35;
      v32 = &v24[16 * v20];
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v30 -= 2;
        *((_OWORD *)v32 - 1) = v33;
        v32 -= 16;
        *v30 = 0;
        v30[1] = 0;
      }
      while (v30 != v31);
LABEL_34:
      v39 = v130;
LABEL_36:
      v15 = v26 + 16;
      v130.i64[0] = (uint64_t)v32;
      v130.i64[1] = (uint64_t)(v26 + 16);
      *(int64x2_t *)((char *)v132 + 8) = v39;
      v40 = v131[0];
      v131[0] = &v24[16 * v25];
      *((_QWORD *)&v132[1] + 1) = v40;
      *(_QWORD *)&v132[0] = v39.i64[0];
      std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer((uint64_t)v132);
      goto LABEL_37;
    }
LABEL_38:
    MIL::IRListValue::GetType(v9);
    MIL::IRListValueType::MakeValue();
    v41 = *(_QWORD *)&v132[0];
    if (*(_QWORD *)&v132[0])
    {
      v42 = (_QWORD *)operator new();
      v43 = *(_QWORD *)&v132[0];
      v44 = &off_1E3D5C250;
LABEL_79:
      *v42 = v44;
      v42[1] = 0;
      v42[2] = 0;
      v42[3] = v43;
LABEL_81:
      *(_QWORD *)&v132[0] = &v130;
      std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v132);
      *v8 = v41;
      v8[1] = v42;
      return;
    }
    goto LABEL_80;
  }
  if ((*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)a2 + 56))(a2))
  {
    v8 = a1;
    v45 = (MIL::IRTupleValue *)MIL::IRValue::AsTuple(a2);
    v130 = 0uLL;
    v131[0] = 0;
    v46 = MIL::IRTupleValue::GetValues(v45);
    if (!v47)
    {
LABEL_77:
      MIL::IRTupleValue::GetType(v45);
      MIL::IRTupleValueType::MakeValue();
      v41 = *(_QWORD *)&v132[0];
      if (*(_QWORD *)&v132[0])
      {
        v42 = (_QWORD *)operator new();
        v43 = *(_QWORD *)&v132[0];
        v44 = &off_1E3D5C288;
        goto LABEL_79;
      }
LABEL_80:
      v42 = 0;
      goto LABEL_81;
    }
    v48 = (_QWORD *)v46;
    v49 = (_QWORD *)(v46 + 16 * (_QWORD)v47);
    {
      v50 = v130.i64[1];
      if (v130.i64[1] >= v131[0])
      {
        v70 = (v130.i64[1] - v130.i64[0]) >> 4;
        if ((unint64_t)(v70 + 1) >> 60)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v71 = (v131[0] - v130.i64[0]) >> 3;
        if (v71 <= v70 + 1)
          v71 = v70 + 1;
        if (v131[0] - v130.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
          v72 = 0xFFFFFFFFFFFFFFFLL;
        else
          v72 = v71;
        *(_QWORD *)v133 = v131;
        v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v72);
        v62 = &v60[16 * v70];
        *(_OWORD *)v62 = v129;
        v66 = (_QWORD *)v130.i64[1];
        v73 = (_QWORD *)v130.i64[0];
        if (v130.i64[1] != v130.i64[0])
        {
          v68 = &v60[16 * v70];
          do
          {
            v74 = *((_OWORD *)v66 - 1);
            v66 -= 2;
            *((_OWORD *)v68 - 1) = v74;
            v68 -= 16;
            *v66 = 0;
            v66[1] = 0;
          }
          while (v66 != v73);
          goto LABEL_73;
        }
LABEL_74:
        v75 = vdupq_n_s64((unint64_t)v66);
        v68 = v62;
        goto LABEL_75;
      }
      *(_OWORD *)v130.i64[1] = v129;
      v51 = (_OWORD *)(v50 + 16);
LABEL_76:
      v130.i64[1] = (uint64_t)v51;
      v48 += 2;
      if (v48 == v49)
        goto LABEL_77;
    }
    v52 = v130.i64[1];
    if (v130.i64[1] < v131[0])
    {
      *(_QWORD *)v130.i64[1] = *v48;
      v53 = v48[1];
      *(_QWORD *)(v52 + 8) = v53;
      if (v53)
      {
        v54 = (unint64_t *)(v53 + 8);
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      v51 = (_OWORD *)(v52 + 16);
      goto LABEL_76;
    }
    v56 = (v130.i64[1] - v130.i64[0]) >> 4;
    v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v58 = v131[0] - v130.i64[0];
    if ((v131[0] - v130.i64[0]) >> 3 > v57)
      v57 = v58 >> 3;
    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0)
      v59 = 0xFFFFFFFFFFFFFFFLL;
    else
      v59 = v57;
    *(_QWORD *)v133 = v131;
    v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v59);
    v62 = &v60[16 * v56];
    v63 = *(_OWORD *)v48;
    *(_OWORD *)v62 = *(_OWORD *)v48;
    if (*((_QWORD *)&v63 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    v66 = (_QWORD *)v130.i64[1];
    v67 = (_QWORD *)v130.i64[0];
    if (v130.i64[1] == v130.i64[0])
      goto LABEL_74;
    v68 = &v60[16 * v56];
    do
    {
      v69 = *((_OWORD *)v66 - 1);
      v66 -= 2;
      *((_OWORD *)v68 - 1) = v69;
      v68 -= 16;
      *v66 = 0;
      v66[1] = 0;
    }
    while (v66 != v67);
LABEL_73:
    v75 = v130;
LABEL_75:
    v51 = v62 + 16;
    v130.i64[0] = (uint64_t)v68;
    v130.i64[1] = (uint64_t)(v62 + 16);
    *(int64x2_t *)((char *)v132 + 8) = v75;
    v76 = v131[0];
    v131[0] = &v60[16 * v61];
    *((_QWORD *)&v132[1] + 1) = v76;
    *(_QWORD *)&v132[0] = v75.i64[0];
    std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer((uint64_t)v132);
    goto LABEL_76;
  }
  if (!(*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)a2 + 64))(a2))
  {
    if ((*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)a2 + 40))(a2))
    {
      v125 = MIL::IRValue::AsTensor(a2);
      *(_OWORD *)a1 = v132[0];
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
    return;
  }
  v126 = a1;
  v77 = MIL::IRValue::AsDictionary(a2);
  memset(v132, 0, sizeof(v132));
  v133[0] = 1.0;
  v78 = MIL::IRDictionaryValue::begin((MIL::IRDictionaryValue *)v77);
  v79 = MIL::IRDictionaryValue::end((MIL::IRDictionaryValue *)v77);
  if (v78 == v79)
    goto LABEL_163;
  v127 = v79;
  v128 = v77;
  do
  {
    {
      v86 = MIL::IRValueMapHasher::operator()();
      v82 = v86;
      v83 = *((_QWORD *)&v132[0] + 1);
      if (*((_QWORD *)&v132[0] + 1))
      {
        v87 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v132 + 8));
        v87.i16[0] = vaddlv_u8(v87);
        v88 = v87.u32[0];
        if (v87.u32[0] > 1uLL)
        {
          v77 = v86;
          if (v86 >= *((_QWORD *)&v132[0] + 1))
            v77 = v86 % *((_QWORD *)&v132[0] + 1);
        }
        else
        {
          v77 = (*((_QWORD *)&v132[0] + 1) - 1) & v86;
        }
        v89 = *(_QWORD **)(*(_QWORD *)&v132[0] + 8 * v77);
        if (v89)
        {
          v90 = (_QWORD *)*v89;
          if (*v89)
          {
            do
            {
              v91 = v90[1];
              if (v91 == v82)
              {
                if (MIL::IRValueMapEq::operator()())
                  goto LABEL_156;
              }
              else
              {
                if (v88 > 1)
                {
                  if (v91 >= v83)
                    v91 %= v83;
                }
                else
                {
                  v91 &= v83 - 1;
                }
                if (v91 != v77)
                  break;
              }
              v90 = (_QWORD *)*v90;
            }
            while (v90);
          }
        }
      }
      v92 = (uint64_t *)operator new(0x30uLL);
      v93 = v92;
      *v92 = 0;
      v92[1] = v82;
      v92[2] = *(_QWORD *)(v78 + 16);
      v94 = *(_QWORD *)(v78 + 24);
      v92[3] = v94;
      if (v94)
      {
        v95 = (unint64_t *)(v94 + 8);
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
      }
      v92[4] = *(_QWORD *)(v78 + 32);
      v97 = *(_QWORD *)(v78 + 40);
      v92[5] = v97;
      if (v97)
      {
        v98 = (unint64_t *)(v97 + 8);
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
      }
      v100 = (float)(unint64_t)(*((_QWORD *)&v132[1] + 1) + 1);
      if (!v83 || (float)(v133[0] * (float)v83) < v100)
      {
        v101 = (v83 & (v83 - 1)) != 0;
        if (v83 < 3)
          v101 = 1;
        v102 = v101 | (2 * v83);
        v103 = vcvtps_u32_f32(v100 / v133[0]);
        if (v102 <= v103)
          v104 = v103;
        else
          v104 = v102;
        goto LABEL_141;
      }
LABEL_146:
      v116 = *(_QWORD *)&v132[0];
      v117 = *(uint64_t **)(*(_QWORD *)&v132[0] + 8 * v77);
      if (v117)
      {
        *v93 = *v117;
      }
      else
      {
        *v93 = *(_QWORD *)&v132[1];
        *(_QWORD *)&v132[1] = v93;
        *(_QWORD *)(v116 + 8 * v77) = &v132[1];
        if (!*v93)
        {
LABEL_155:
          ++*((_QWORD *)&v132[1] + 1);
          goto LABEL_156;
        }
        v118 = *(_QWORD *)(*v93 + 8);
        if ((v83 & (v83 - 1)) != 0)
        {
          if (v118 >= v83)
            v118 %= v83;
        }
        else
        {
          v118 &= v83 - 1;
        }
        v117 = (uint64_t *)(*(_QWORD *)&v132[0] + 8 * v118);
      }
      *v117 = (uint64_t)v93;
      goto LABEL_155;
    }
    v81 = MIL::IRValueMapHasher::operator()();
    v82 = v81;
    v83 = *((_QWORD *)&v132[0] + 1);
    if (!*((_QWORD *)&v132[0] + 1))
      goto LABEL_131;
    v84 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v132 + 8));
    v84.i16[0] = vaddlv_u8(v84);
    v85 = v84.u32[0];
    if (v84.u32[0] > 1uLL)
    {
      v77 = v81;
      if (v81 >= *((_QWORD *)&v132[0] + 1))
        v77 = v81 % *((_QWORD *)&v132[0] + 1);
    }
    else
    {
      v77 = (*((_QWORD *)&v132[0] + 1) - 1) & v81;
    }
    v105 = *(_QWORD **)(*(_QWORD *)&v132[0] + 8 * v77);
    if (!v105 || (v106 = (_QWORD *)*v105) == 0)
    {
LABEL_131:
      v108 = (int64x2_t *)operator new(0x30uLL);
      v93 = (uint64_t *)v108;
      v108->i64[0] = 0;
      v108->i64[1] = v82;
      v108[1].i64[0] = *(_QWORD *)(v78 + 16);
      v109 = *(_QWORD *)(v78 + 24);
      v108[1].i64[1] = v109;
      if (v109)
      {
        v110 = (unint64_t *)(v109 + 8);
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
      }
      v108[2] = v130;
      v130 = 0uLL;
      v112 = (float)(unint64_t)(*((_QWORD *)&v132[1] + 1) + 1);
      if (!v83 || (float)(v133[0] * (float)v83) < v112)
      {
        v113 = (v83 & (v83 - 1)) != 0;
        if (v83 < 3)
          v113 = 1;
        v114 = v113 | (2 * v83);
        v115 = vcvtps_u32_f32(v112 / v133[0]);
        if (v114 <= v115)
          v104 = v115;
        else
          v104 = v114;
LABEL_141:
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)v132, v104);
        v83 = *((_QWORD *)&v132[0] + 1);
        if ((*((_QWORD *)&v132[0] + 1) & (*((_QWORD *)&v132[0] + 1) - 1)) != 0)
        {
          if (v82 >= *((_QWORD *)&v132[0] + 1))
            v77 = v82 % *((_QWORD *)&v132[0] + 1);
          else
            v77 = v82;
        }
        else
        {
          v77 = (*((_QWORD *)&v132[0] + 1) - 1) & v82;
        }
        goto LABEL_146;
      }
      goto LABEL_146;
    }
    while (1)
    {
      v107 = v106[1];
      if (v107 == v82)
        break;
      if (v85 > 1)
      {
        if (v107 >= v83)
          v107 %= v83;
      }
      else
      {
        v107 &= v83 - 1;
      }
      if (v107 != v77)
        goto LABEL_131;
LABEL_130:
      v106 = (_QWORD *)*v106;
      if (!v106)
        goto LABEL_131;
    }
    if (!MIL::IRValueMapEq::operator()())
      goto LABEL_130;
    v119 = (std::__shared_weak_count *)v130.i64[1];
    if (v130.i64[1])
    {
      v120 = (unint64_t *)(v130.i64[1] + 8);
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
LABEL_156:
    v78 = *(_QWORD *)v78;
    v77 = v128;
  }
  while (v78 != v127);
LABEL_163:
  MIL::IRDictionaryValue::GetType((MIL::IRDictionaryValue *)v77);
  MIL::IRDictionaryValueType::MakeValue();
  v122 = v130.i64[0];
  if (v130.i64[0])
  {
    v123 = (_QWORD *)operator new();
    v124 = v130.i64[0];
    *v123 = &off_1E3D5C2F8;
    v123[1] = 0;
    v123[2] = 0;
    v123[3] = v124;
  }
  else
  {
    v123 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v132);
  *v126 = v122;
  v126[1] = (uint64_t)v123;
}

void sub_19C80B9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  MIL::IRDictionaryValue *v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, MIL::IRDictionaryValue *);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::unique_ptr<MIL::IRDictionaryValue const>::reset[abi:ne180100]((MIL::IRDictionaryValue **)va);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ResolveBlobFileReferences(MIL::Builder::BlockBuilder *a1, _QWORD *a2, uint64_t a3)
{
  const MIL::IRValue *v4;
  uint64_t *i;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  MIL::Builder::OperationBuilder **v12;
  MIL::Builder::OperationBuilder **v13;
  MIL::Builder::OperationBuilder *v14;
  const MIL::IRValue *v15;
  uint64_t *j;
  std::string::size_type v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  _OWORD *v30;
  unint64_t NumArguments;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t ArgumentForParameter;
  MIL::Builder::Variable *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  MIL::Builder::Variable **v44;
  uint64_t *v45;
  MIL::Builder::Variable *v46;
  _anonymous_namespace_ *Value;
  const MIL::IRValue *v48;
  MIL::IRValue *v49;
  _QWORD *v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint8x8_t v60;
  unint64_t v61;
  uint64_t **v62;
  uint64_t *k;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string *v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *m;
  _QWORD *v77;
  void *v78;
  MIL::Builder::OperationBuilder **v79;
  MIL::Builder::OperationBuilder **v80;
  MIL::Builder::OperationBuilder **v83;
  MIL::Builder::OperationBuilder **v84;
  _OWORD v85[2];
  __int128 v86;
  std::string v87;
  std::__shared_weak_count *v88;
  std::string v89;
  std::__shared_weak_count *v90;
  __int128 v91;
  __int128 v92;
  float v93;
  std::string v94;
  void **v95[3];

  for (i = *(uint64_t **)(MIL::Builder::BlockBuilder::GetAttributes(a1) + 16); i; i = (uint64_t *)*i)
  {
    {
      v6 = v91;
      if ((_QWORD)v91)
      {
        if (*((char *)i + 39) < 0)
          std::string::__init_copy_ctor_external(&v94, (const std::string::value_type *)i[2], i[3]);
        else
          v94 = *(std::string *)(i + 2);
        v89.__r_.__value_.__r.__words[0] = v6;
        v89.__r_.__value_.__l.__size_ = *((_QWORD *)&v91 + 1);
        v91 = 0uLL;
        MIL::Builder::BlockBuilder::SetAttribute();
        if (v89.__r_.__value_.__l.__size_)
        {
          v7 = (unint64_t *)(v89.__r_.__value_.__l.__size_ + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
          {
            (*(void (**)(std::string::size_type))(*(_QWORD *)v89.__r_.__value_.__l.__size_ + 16))(v89.__r_.__value_.__l.__size_);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v89.__r_.__value_.__l.__size_);
          }
        }
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
      }
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
      if (*((_QWORD *)&v91 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  MIL::Builder::BlockBuilder::GetOperations(a1);
  v13 = v83;
  v12 = v84;
  v79 = v84;
  while (v13 != v12)
  {
    v14 = *v13;
    for (j = *(uint64_t **)(MIL::Builder::OperationBuilder::GetAttributes(*v13) + 16); j; j = (uint64_t *)*j)
    {
      {
        v17 = v91;
        if ((_QWORD)v91)
        {
          if (*((char *)j + 39) < 0)
            std::string::__init_copy_ctor_external(&v94, (const std::string::value_type *)j[2], j[3]);
          else
            v94 = *(std::string *)(j + 2);
          v87.__r_.__value_.__r.__words[0] = v17;
          v87.__r_.__value_.__l.__size_ = *((_QWORD *)&v91 + 1);
          v91 = 0uLL;
          MIL::Builder::OperationBuilder::SetAttribute();
          size = (std::__shared_weak_count *)v89.__r_.__value_.__l.__size_;
          if (v89.__r_.__value_.__l.__size_)
          {
            v19 = (unint64_t *)(v89.__r_.__value_.__l.__size_ + 8);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          v21 = (std::__shared_weak_count *)v87.__r_.__value_.__l.__size_;
          if (v87.__r_.__value_.__l.__size_)
          {
            v22 = (unint64_t *)(v87.__r_.__value_.__l.__size_ + 8);
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v94.__r_.__value_.__l.__data_);
        }
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
        if (*((_QWORD *)&v91 + 1))
        {
          v25 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
    }
    MIL::Builder::OperationBuilder::GetParameterNames(v14);
    v80 = v13;
    v91 = 0u;
    v92 = 0u;
    v93 = 1.0;
    v27 = (uint64_t *)v94.__r_.__value_.__r.__words[2];
    if (v94.__r_.__value_.__r.__words[2])
    {
      v28 = 0;
      v29 = 0;
      while (1)
      {
        v30 = v27 + 2;
        NumArguments = MIL::Builder::OperationBuilder::GetNumArguments();
        if (*((_QWORD *)&v92 + 1))
        {
          std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>>>::__deallocate_node((_QWORD *)v92);
          *(_QWORD *)&v92 = 0;
          v32 = *((_QWORD *)&v91 + 1);
          if (*((_QWORD *)&v91 + 1))
          {
            v33 = 0;
            do
              *(_QWORD *)(v91 + 8 * v33++) = 0;
            while (v32 != v33);
          }
          *((_QWORD *)&v92 + 1) = 0;
        }
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)&v91, vcvtps_u32_f32((float)NumArguments / v93));
        if (NumArguments <= v29 - v28)
        {
          LODWORD(v95[0]) = 0;
          v37 = v28;
          if (!NumArguments)
            goto LABEL_91;
        }
        else
        {
          if (NumArguments >> 61)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          v34 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(NumArguments);
          v36 = v35;
          if (v28)
            operator delete(v28);
          v29 = &v34[v36];
          LODWORD(v95[0]) = 0;
          v28 = v34;
        }
        v37 = v28;
        do
        {
          ArgumentForParameter = MIL::Builder::OperationBuilder::GetArgumentForParameter();
          v39 = (MIL::Builder::Variable *)ArgumentForParameter;
          if (v37 >= v29)
          {
            v40 = v37 - v28;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 61)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            if (((char *)v29 - (char *)v28) >> 2 > v41)
              v41 = ((char *)v29 - (char *)v28) >> 2;
            if ((unint64_t)((char *)v29 - (char *)v28) >= 0x7FFFFFFFFFFFFFF8)
              v42 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v42 = v41;
            if (v42)
              v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v42);
            else
              v43 = 0;
            v44 = (MIL::Builder::Variable **)(v42 + 8 * v40);
            *v44 = v39;
            v45 = (uint64_t *)(v44 + 1);
            while (v37 != v28)
            {
              v46 = (MIL::Builder::Variable *)*--v37;
              *--v44 = v46;
            }
            v29 = (uint64_t *)(v42 + 8 * v43);
            if (v28)
              operator delete(v28);
            v28 = (uint64_t *)v44;
            v37 = v45;
          }
          else
          {
            *v37++ = ArgumentForParameter;
          }
          Value = (_anonymous_namespace_ *)MIL::Builder::Variable::TryGetValue(v39);
          v49 = Value;
          {
            if (*(_QWORD *)&v85[0])
            {
              v50 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&v91, v95[0], v95);
              v51 = v85[0];
              v85[0] = 0uLL;
              v52 = (std::__shared_weak_count *)v50[4];
              *(_OWORD *)(v50 + 3) = v51;
              if (v52)
              {
                p_shared_owners = (unint64_t *)&v52->__shared_owners_;
                do
                  v54 = __ldaxr(p_shared_owners);
                while (__stlxr(v54 - 1, p_shared_owners));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
            }
            v55 = (std::__shared_weak_count *)*((_QWORD *)&v85[0] + 1);
            if (*((_QWORD *)&v85[0] + 1))
            {
              v56 = (unint64_t *)(*((_QWORD *)&v85[0] + 1) + 8);
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
          }
          ++LODWORD(v95[0]);
        }
        while (NumArguments > LODWORD(v95[0]));
LABEL_91:
        if (*((_QWORD *)&v92 + 1))
        {
          MIL::Builder::OperationBuilder::RemoveInputs();
          LODWORD(v85[0]) = 0;
          if (v37 != v28)
          {
            v58 = 0;
            do
            {
              v59 = v58;
              if (*((_QWORD *)&v91 + 1))
              {
                v60 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v91 + 8));
                v60.i16[0] = vaddlv_u8(v60);
                if (v60.u32[0] > 1uLL)
                {
                  v61 = v58;
                  if (*((_QWORD *)&v91 + 1) <= (unint64_t)v58)
                    v61 = (unint64_t)v58 % *((_QWORD *)&v91 + 1);
                }
                else
                {
                  v61 = (DWORD2(v91) - 1) & v58;
                }
                v62 = *(uint64_t ***)(v91 + 8 * v61);
                if (v62)
                {
                  for (k = *v62; k; k = (uint64_t *)*k)
                  {
                    v64 = k[1];
                    if (v64 == v58)
                    {
                      if (*((_DWORD *)k + 4) == v58)
                      {
                        if (*((char *)v27 + 39) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v87, (const std::string::value_type *)v27[2], v27[3]);
                        }
                        else
                        {
                          *(_OWORD *)&v87.__r_.__value_.__l.__data_ = *v30;
                          v87.__r_.__value_.__r.__words[2] = v27[4];
                        }
                        v69 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&v91, v59, v85);
                        v86 = *(_OWORD *)(v69 + 3);
                        v69[3] = 0;
                        v69[4] = 0;
                        MIL::Builder::OperationBuilder::AddInput();
                        v70 = v88;
                        if (v88)
                        {
                          v71 = (unint64_t *)&v88->__shared_owners_;
                          do
                            v72 = __ldaxr(v71);
                          while (__stlxr(v72 - 1, v71));
                          if (!v72)
                          {
                            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                            std::__shared_weak_count::__release_weak(v70);
                          }
                        }
                        v73 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
                        if (*((_QWORD *)&v86 + 1))
                        {
                          v74 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
                          do
                            v75 = __ldaxr(v74);
                          while (__stlxr(v75 - 1, v74));
                          if (!v75)
                          {
                            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                            std::__shared_weak_count::__release_weak(v73);
                          }
                        }
                        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                        {
                          v68 = &v87;
LABEL_120:
                          operator delete(v68->__r_.__value_.__l.__data_);
                        }
                        goto LABEL_121;
                      }
                    }
                    else
                    {
                      if (v60.u32[0] > 1uLL)
                      {
                        if (v64 >= *((_QWORD *)&v91 + 1))
                          v64 %= *((_QWORD *)&v91 + 1);
                      }
                      else
                      {
                        v64 &= *((_QWORD *)&v91 + 1) - 1;
                      }
                      if (v64 != v61)
                        break;
                    }
                  }
                }
              }
              if (*((char *)v27 + 39) < 0)
              {
                std::string::__init_copy_ctor_external(&v89, (const std::string::value_type *)v27[2], v27[3]);
              }
              else
              {
                *(_OWORD *)&v89.__r_.__value_.__l.__data_ = *v30;
                v89.__r_.__value_.__r.__words[2] = v27[4];
              }
              MIL::Builder::OperationBuilder::AddInput();
              v65 = v90;
              if (v90)
              {
                v66 = (unint64_t *)&v90->__shared_owners_;
                do
                  v67 = __ldaxr(v66);
                while (__stlxr(v67 - 1, v66));
                if (!v67)
                {
                  ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                  std::__shared_weak_count::__release_weak(v65);
                }
              }
              if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
              {
                v68 = &v89;
                goto LABEL_120;
              }
LABEL_121:
              v58 = ++LODWORD(v85[0]);
            }
            while (v37 - v28 > (unint64_t)LODWORD(v85[0]));
          }
          v27 = (uint64_t *)*v27;
          if (v27)
            continue;
        }
        goto LABEL_141;
      }
    }
    v28 = 0;
LABEL_141:
    MIL::Builder::OperationBuilder::GetBlocks(v14);
    v77 = (_QWORD *)*((_QWORD *)&v85[0] + 1);
    for (m = *(_QWORD **)&v85[0]; m != v77; m += 2)
    v95[0] = (void **)v85;
    std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100](v95);
    if (v28)
      operator delete(v28);
    std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>>>::__deallocate_node((_QWORD *)v92);
    v78 = (void *)v91;
    *(_QWORD *)&v91 = 0;
    if (v78)
      operator delete(v78);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v94);
    v12 = v79;
    v13 = v80 + 2;
  }
  v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
  std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
}

void sub_19C80C280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v37 - 192);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[2];
  char v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x28uLL);
  v23[0] = v10;
  v23[1] = a1 + 16;
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v24 = 1;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v19 + 8 * v3) = v12;
  if (*v10)
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v23);
  return v10;
}

void sub_19C80C5DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 3));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

MIL::IRListValue *std::unique_ptr<MIL::IRListValue const>::reset[abi:ne180100](MIL::IRListValue **a1)
{
  MIL::IRListValue *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    MIL::IRListValue::~IRListValue(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

MIL::IRTupleValue *std::unique_ptr<MIL::IRTupleValue const>::reset[abi:ne180100](MIL::IRTupleValue **a1)
{
  MIL::IRTupleValue *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    MIL::IRTupleValue::~IRTupleValue(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

void `anonymous namespace'::GetIRTensorValueByResolvingBlobFileReference(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v8;
  int64_t v9;
  std::string *v10;
  char v11;
  std::string *v12;
  int64_t size;
  _QWORD *v14;
  char *v15;
  int v16;
  std::string *v17;
  int64_t v18;
  char *v19;
  char *v20;
  std::string::size_type v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string::size_type v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string::size_type v52;
  std::string::size_type v53;
  std::string::size_type v54;
  _QWORD *v55;
  std::string::size_type v56;
  unint64_t *v57;
  unint64_t v58;
  std::logic_error *exception;
  _QWORD *v60;
  std::string *v61;
  std::string::size_type v62;
  _QWORD *v63;
  std::logic_error *v64;
  _QWORD *v65;
  _QWORD *v66;
  std::string v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::string v72;
  std::__fs::filesystem::path v73;
  std::string __p[12];

  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "path");
  v66 = v8;
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v8, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>();
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(__p, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    __p[0] = v72;
  std::string::basic_string[abi:ne180100]<0>(&v67, "@model_path");
  v9 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = __p;
  else
    v10 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  v11 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v67;
  else
    v12 = (std::string *)v67.__r_.__value_.__r.__words[0];
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  else
    size = v67.__r_.__value_.__l.__size_;
  if (!size)
  {
    v21 = 0;
    goto LABEL_28;
  }
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = __p[0].__r_.__value_.__l.__size_;
  if (v9 >= size)
  {
    v65 = a3;
    v14 = a1;
    v15 = (char *)v10 + v9;
    v16 = v12->__r_.__value_.__s.__data_[0];
    v17 = v10;
    do
    {
      v18 = v9 - size;
      if (v18 == -1)
        break;
      v19 = (char *)memchr(v17, v16, v18 + 1);
      if (!v19)
        break;
      v20 = v19;
      if (!memcmp(v19, v12, size))
      {
        a1 = v14;
        if (v20 != v15)
        {
          v21 = v20 - (char *)v10;
          a3 = v65;
          if (v20 - (char *)v10 == -1)
            goto LABEL_35;
LABEL_28:
          v22 = *(char *)(a4 + 23);
          if (v22 >= 0)
            v23 = (const std::string::value_type *)a4;
          else
            v23 = *(const std::string::value_type **)a4;
          if (v22 >= 0)
            v24 = *(unsigned __int8 *)(a4 + 23);
          else
            v24 = *(_QWORD *)(a4 + 8);
          std::string::replace(__p, v21, size, v23, v24);
          v11 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
          goto LABEL_35;
        }
LABEL_26:
        a3 = v65;
        goto LABEL_35;
      }
      v17 = (std::string *)(v20 + 1);
      v9 = v15 - (v20 + 1);
    }
    while (v9 >= size);
    a1 = v14;
    goto LABEL_26;
  }
LABEL_35:
  v73 = (std::__fs::filesystem::path)__p[0];
  memset(__p, 0, 24);
  if (v11 < 0)
  {
    operator delete(v67.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v73.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(__p, v73.__pn_.__r_.__value_.__l.__data_, v73.__pn_.__r_.__value_.__l.__size_);
  else
    __p[0] = v73.__pn_;
  v25 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v26 = v25;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v26)
      goto LABEL_56;
  }
  else if (v25)
  {
    goto LABEL_56;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v67, (char *)a4);
  std::__fs::filesystem::relative[abi:ne180100]((std::__fs::filesystem::path *)__p, &v73, (const std::__fs::filesystem::path *)&v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p[0].__r_.__value_.__l.__size_)
    {
      v26 = 0;
      goto LABEL_64;
    }
    std::string::__init_copy_ctor_external(&v67, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
  }
  else
  {
    if (!*((_BYTE *)&__p[0].__r_.__value_.__s + 23))
      goto LABEL_65;
    v67 = __p[0];
  }
  v26 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3, (unsigned __int8 *)&v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v26)
      goto LABEL_56;
LABEL_65:
    v27 = 0;
    v28 = 0;
    v70 = 0;
    v71 = 0;
    goto LABEL_66;
  }
LABEL_64:
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (!v26)
    goto LABEL_65;
LABEL_56:
  v28 = *((_QWORD *)v26 + 5);
  v27 = (std::__shared_weak_count *)*((_QWORD *)v26 + 6);
  v70 = v28;
  v71 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
LABEL_66:
  if (SHIBYTE(v73.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v73.__pn_.__r_.__value_.__l.__data_);
    if (v28)
    {
LABEL_68:
      std::string::basic_string[abi:ne180100]<0>(__p, "offset");
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v66, (unsigned __int8 *)__p))
      {
        MIL::IRValue::GetScalar<unsigned long long>();
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        v68 = v28;
        v69 = v27;
        v70 = 0;
        v71 = 0;
        MIL::Blob::StorageReader::StorageReader();
        v31 = v69;
        if (v69)
        {
          v32 = (unint64_t *)&v69->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        MIL::Blob::StorageReader::GetRawDataView((MIL::Blob::StorageReader *)&v73);
        v36 = v35;
        switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 88))(v34))
        {
          case 2u:
            MIL::IRTensorValueType::MakeBoolValueWithUnownedMemory();
            v37 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v37)
              goto LABEL_120;
            goto LABEL_121;
          case 4u:
            MIL::IRTensorValueType::MakeFloat16ValueWithUnownedMemory();
            v53 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v53)
              goto LABEL_120;
            goto LABEL_121;
          case 5u:
            MIL::IRTensorValueType::MakeFloat32ValueWithUnownedMemory();
            v50 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v50)
              goto LABEL_120;
            goto LABEL_121;
          case 6u:
            MIL::IRTensorValueType::MakeFloat64ValueWithUnownedMemory();
            v52 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v52)
              goto LABEL_120;
            goto LABEL_121;
          case 7u:
            MIL::IRTensorValueType::MakeBFloat16ValueWithUnownedMemory();
            v47 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v47)
              goto LABEL_120;
            goto LABEL_121;
          case 9u:
            MIL::IRTensorValueType::MakeInt8ValueWithUnownedMemory();
            v49 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v49)
              goto LABEL_120;
            goto LABEL_121;
          case 0xAu:
            MIL::IRTensorValueType::MakeInt16ValueWithUnownedMemory();
            v54 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v54)
              goto LABEL_120;
            goto LABEL_121;
          case 0xBu:
            MIL::IRTensorValueType::MakeInt32ValueWithUnownedMemory();
            v51 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v51)
              goto LABEL_120;
            goto LABEL_121;
          case 0xCu:
            MIL::IRTensorValueType::MakeInt64ValueWithUnownedMemory();
            v42 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v42)
              goto LABEL_120;
            goto LABEL_121;
          case 0xDu:
            if (v36 != 2)
              goto LABEL_132;
            MIL::IRTensorValueType::MakeInt4ValueWithUnownedMemory();
            v39 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v39)
              goto LABEL_120;
            goto LABEL_121;
          case 0xEu:
            MIL::IRTensorValueType::MakeUInt8ValueWithUnownedMemory();
            v41 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v41)
              goto LABEL_120;
            goto LABEL_121;
          case 0xFu:
            MIL::IRTensorValueType::MakeUInt16ValueWithUnownedMemory();
            v38 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v38)
              goto LABEL_120;
            goto LABEL_121;
          case 0x10u:
            MIL::IRTensorValueType::MakeUInt32ValueWithUnownedMemory();
            v40 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v40)
              goto LABEL_120;
            goto LABEL_121;
          case 0x11u:
            MIL::IRTensorValueType::MakeUInt64ValueWithUnownedMemory();
            v43 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v43)
              goto LABEL_120;
            goto LABEL_121;
          case 0x13u:
            if (v36 != 1)
              goto LABEL_132;
            MIL::IRTensorValueType::MakeUInt2ValueWithUnownedMemory();
            v45 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v45)
              goto LABEL_120;
            goto LABEL_121;
          case 0x14u:
            if (v36 != 2)
              goto LABEL_132;
            MIL::IRTensorValueType::MakeUInt4ValueWithUnownedMemory();
            v48 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v48)
              goto LABEL_120;
            goto LABEL_121;
          case 0x16u:
            if (v36 != 2)
              goto LABEL_132;
            MIL::IRTensorValueType::MakeUInt3ValueWithUnownedMemory();
            v46 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v46)
              goto LABEL_120;
            goto LABEL_121;
          case 0x17u:
            if (v36 != 5)
            {
LABEL_132:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "BitSpanCast to sub-byte type span has invalid number of elements. Sub-byte span with NumElements requires exactly Span<uint8_t>.Size() bytes.");
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
              __cxa_throw(exception, (struct type_info *)off_1E3D427E8, MEMORY[0x1E0DE4360]);
            }
            MIL::IRTensorValueType::MakeUInt6ValueWithUnownedMemory();
            v44 = __p[0].__r_.__value_.__r.__words[0];
            *a1 = __p[0].__r_.__value_.__r.__words[0];
            if (v44)
            {
LABEL_120:
              v55 = (_QWORD *)operator new();
              v56 = __p[0].__r_.__value_.__r.__words[0];
              *v55 = &off_1E3D5C2C0;
              v55[1] = 0;
              v55[2] = 0;
              v55[3] = v56;
            }
            else
            {
LABEL_121:
              v55 = 0;
            }
            a1[1] = v55;
            MIL::Blob::StorageReader::~StorageReader((MIL::Blob::StorageReader *)&v73);
            v27 = v71;
            if (v71)
              goto LABEL_123;
            goto LABEL_127;
          default:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__r.__words[2], (uint64_t)"Failed to create an in-memory value with DataType=", 50);
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 88))(v34);
            MIL::IRDataTypeToString();
            if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v61 = &v67;
            else
              v61 = (std::string *)v67.__r_.__value_.__r.__words[0];
            if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v62 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
            else
              v62 = v67.__r_.__value_.__l.__size_;
            v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)".", 1);
            if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v67.__r_.__value_.__l.__data_);
            v64 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::stringbuf::str();
            std::logic_error::logic_error(v64, &v67);
            __cxa_throw(v64, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  else if (v28)
  {
    goto LABEL_68;
  }
  *a1 = 0;
  a1[1] = 0;
  if (v27)
  {
LABEL_123:
    v57 = (unint64_t *)&v27->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
LABEL_127:
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
}

void sub_19C80D1C0(void *a1, int a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, uint64_t a9, uint64_t a10, void *__pa, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,std::string *a51,uint64_t a52,void **a53,uint64_t a54,int a55,__int16 a56,char a57,unsigned __int8 a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *v63;
  int v64;
  void *v67;
  void *v68;
  _QWORD *v69;
  void **v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  const char *v75;
  size_t v76;
  std::runtime_error *exception;
  _QWORD *v78;
  void **v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  std::runtime_error *v83;

  if (SHIBYTE(a13) < 0)
  {
    operator delete(__pa);
    if ((v64 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a63);
      MIL::Blob::StorageReader::~StorageReader((MIL::Blob::StorageReader *)&a59);
      v67 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v68 = v67;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__pa);
        v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a13, (uint64_t)"Failed to read data from blob file: path= ", 42);
        if ((a58 & 0x80u) == 0)
          v70 = (void **)&a53;
        else
          v70 = a53;
        if ((a58 & 0x80u) == 0)
          v71 = a58;
        else
          v71 = a54;
        v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)", offset= ", 10);
        v73 = (_QWORD *)std::ostream::operator<<();
        v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)", error= ", 9);
        v75 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v68 + 16))(v68);
        v76 = strlen(v75);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, (const std::string *)&a59);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__pa);
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a13, (uint64_t)"Failed to read blob data from file: path= ", 42);
      if ((a58 & 0x80u) == 0)
        v79 = (void **)&a53;
      else
        v79 = a53;
      if ((a58 & 0x80u) == 0)
        v80 = a58;
      else
        v80 = a54;
      v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)", offset= ", 10);
      v82 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)".", 1);
      v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v83, (const std::string *)&a59);
      __cxa_throw(v83, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else if (!v64)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v63);
  goto LABEL_6;
}

void sub_19C80D538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  void *v58;
  int v59;

  if (a58 < 0)
  {
    operator delete(__p);
    if ((v59 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a11);
      __cxa_end_catch();
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
      if (SHIBYTE(a52) < 0)
        operator delete(a50);
      _Unwind_Resume(a1);
    }
  }
  else if (!v59)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v58);
  goto LABEL_6;
}

void std::__fs::filesystem::relative[abi:ne180100](std::__fs::filesystem::path *a1, std::__fs::filesystem::path *__p, const std::__fs::filesystem::path *a3)
{
  std::__fs::filesystem::path __pa;
  std::__fs::filesystem::path v6;

  std::__fs::filesystem::__weakly_canonical(&v6, __p, 0);
  std::__fs::filesystem::__weakly_canonical(&__pa, a3, 0);
  std::__fs::filesystem::path::lexically_relative(a1, &v6, &__pa);
  if (SHIBYTE(__pa.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__pa.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__pn_.__r_.__value_.__l.__data_);
}

void sub_19C80D670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
  return result;
}

void std::__shared_ptr_pointer<MIL::IRTupleValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

MIL::IRTupleValue *std::__shared_ptr_pointer<MIL::IRTupleValue const *>::__on_zero_shared(uint64_t a1)
{
  MIL::IRTupleValue *result;

  result = *(MIL::IRTupleValue **)(a1 + 24);
  if (result)
  {
    MIL::IRTupleValue::~IRTupleValue(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRTupleValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB2EE68))
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<MIL::IRListValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

MIL::IRListValue *std::__shared_ptr_pointer<MIL::IRListValue const *>::__on_zero_shared(uint64_t a1)
{
  MIL::IRListValue *result;

  result = *(MIL::IRListValue **)(a1 + 24);
  if (result)
  {
    MIL::IRListValue::~IRListValue(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRListValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB2EDD6))
    return a1 + 24;
  else
    return 0;
}

void sub_19C80EFF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C80F0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_19C80F208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C80F294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C80F478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C80F4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3540(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3541(uint64_t a1)
{

}

void sub_19C80F5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios16::Ios16Backend::~Ios16Backend(CoreML::NNCompiler::Backend::MIL::Ios16::Ios16Backend *this)
{
  char *v1;

  *(_QWORD *)this = &off_1E3D4CAD0;
  v1 = (char *)this + 8;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_1E3D4CAD0;
  v1 = (char *)this + 8;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t CoreML::NNCompiler::Backend::MIL::Ios16::Ios16Backend::Compile(CoreML::NNCompiler::Backend::MIL::Ios16::Ios16Backend *this, objc_object *a2)
{
  _QWORD *v4;
  MIL::Opsets::Common::ios16::ios16Opset *v5;
  uint64_t OpsetName;
  unint64_t v7;
  size_t v8;
  const void *v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const IRProgram *v17;
  MIL::Util *v18;
  MIL::Util *v19;
  uint64_t result;
  MIL::Util *v21;
  void *v22[3];
  _QWORD v23[2];
  int v24;
  uint64_t v25;
  _BYTE v26[15];
  char v27;
  __int128 v28;
  unint64_t v29;
  MIL::Util *v30;
  uint64_t v31;
  __int128 __dst;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD v39[2];
  void **v40[2];
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  CoreML::NNCompiler::Backend::MIL::OptimizeProgram((CoreML::NNCompiler::Backend::MIL *)&v31, *((const IRProgram **)this + 1));
  std::string::basic_string[abi:ne180100]<0>(v40, "classify");
  v4 = v42;
  v42[0] = &off_1E3D5B620;
  v42[1] = CoreML::NNCompiler::Backend::MIL::Ios15::Translations::TranslateClassify;
  v43 = v42;
  v5 = (MIL::Opsets::Common::ios16::ios16Opset *)std::unordered_map<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>::unordered_map((uint64_t)&v34, (uint64_t)v40, 1);
  OpsetName = MIL::Opsets::Common::ios16::ios16Opset::GetOpsetName(v5);
  v8 = v7;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = (const void *)OpsetName;
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v33 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v33) = v7;
  p_dst = &__dst;
  if (v7)
LABEL_8:
    memmove(p_dst, v9, v8);
  *((_BYTE *)p_dst + v8) = 0;
  v13 = v34;
  v14 = v35;
  v34 = 0;
  v35 = 0;
  v22[0] = &off_1E3D4CA68;
  v22[1] = v13;
  v22[2] = (void *)v14;
  v23[0] = v36;
  v23[1] = v37;
  v24 = v38;
  if (v37)
  {
    v15 = *(_QWORD *)(v36 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14)
        v15 %= v14;
    }
    else
    {
      v15 &= v14 - 1;
    }
    *((_QWORD *)v13 + v15) = v23;
    v36 = 0;
    v37 = 0;
  }
  v25 = 0x364C4D65726F43;
  *(_QWORD *)v26 = v39[0];
  *(_QWORD *)&v26[7] = *(_QWORD *)((char *)v39 + 7);
  v27 = 7;
  v28 = __dst;
  v29 = v33;
  __dst = 0uLL;
  v33 = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)&v34);
  if (v43 == v42)
  {
    v16 = 4;
  }
  else
  {
    if (!v43)
      goto LABEL_20;
    v16 = 5;
    v4 = v43;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v16))(v4);
LABEL_20:
  if (v41 < 0)
    operator delete(v40[0]);
  v22[0] = &off_1E3D4CAF8;
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::Translate(&v30, (const IRProgram *)v22, v31);
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(v22);
  CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetAttributesForFunctions((uint64_t)v30, *((_QWORD *)this + 3));
  MIL::Util::FindBlobFilePaths(v30, v17);
  v18 = v30;
  v30 = 0;
  v21 = v18;
  CoreML::NNCompiler::Backend::MIL::WriteProgram((uint64_t *)&v21, *(unsigned int *)(*((_QWORD *)this + 3) + 120), a2, *((_QWORD *)this + 3) + 56);
  if (v21)
    (*(void (**)(MIL::Util *))(*(_QWORD *)v21 + 8))(v21);
  CoreML::NNCompiler::Backend::MetadataUtils::WriteMetadataIos15(*((_QWORD *)this + 3), (uint64_t)a2);
  CoreML::NNCompiler::Backend::MIL::CopyWeights((uint64_t *)(*((_QWORD *)this + 3) + 56), (uint64_t **)v22, (uint64_t)a2);
  v40[0] = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
  v19 = v30;
  v30 = 0;
  if (v19)
    (*(void (**)(MIL::Util *))(*(_QWORD *)v19 + 8))(v19);
  result = v31;
  v31 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19C80F9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  *(_QWORD *)(v24 - 128) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 128));
  v26 = a23;
  a23 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = a24;
  a24 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  _Unwind_Resume(a1);
}

BOOL ModelKeyServerAPIRawKeyReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 8;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19C810130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8102D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C810478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8105A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void Archiver::_IDataBlobMemoryImpl::~_IDataBlobMemoryImpl(id *this)
{

  Archiver::_IDataBlobImpl::~_IDataBlobImpl(this);
}

{

  Archiver::_IDataBlobImpl::~_IDataBlobImpl(this);
  JUMPOUT(0x1A1AD6260);
}

void Archiver::_IDataBlobMemoryImpl::asMMappedFile(Archiver::_IDataBlobMemoryImpl *this)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Error: asMMappedFile is not supported by _IDataBlobMemoryImpl");
  __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
}

void sub_19C81070C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id Archiver::_IDataBlobMemoryImpl::asData(id *this)
{
  return this[8];
}

void sub_19C811184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_19C811430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C8117E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  if (v13)
    operator delete(v13);

  _Unwind_Resume(a1);
}

void sub_19C811A1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C811DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C8120AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_19C812108()
{
  JUMPOUT(0x19C8120ECLL);
}

void sub_19C8126A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  void *v26;
  void (**v27)(_QWORD);
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;

  v27[2](v27);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)(v32 - 184));

  _Unwind_Resume(a1);
}

void sub_19C8128DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C813150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  void *v22;
  void *v23;
  void *v24;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C8136F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(a23);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);

  _Unwind_Resume(a1);
}

void sub_19C81384C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C813A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C813F34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t OArchive::OArchive(uint64_t a1, uint64_t a2, char a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  void *__p[2];
  char v12;

  v6 = (std::__shared_weak_count *)operator new(0x340uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BED0;
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  Archiver::_OArchiveDiskImpl::_OArchiveDiskImpl((uint64_t)&v6[1], (__int128 *)__p, a2, a3);
  if (v12 < 0)
    operator delete(__p[0]);
  *(_BYTE *)a1 = a3;
  *(_QWORD *)(a1 + 8) = v6 + 1;
  *(_QWORD *)(a1 + 16) = v6;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_19C81435C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(*((_QWORD *)a1 + 1));
    std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(*((_QWORD *)a1 + 11));
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 64));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<Archiver::_OArchiveDiskImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BED0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Archiver::_OArchiveDiskImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BED0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<Archiver::_OArchiveDiskImpl>::__on_zero_shared(uint64_t a1)
{
  Archiver::_OArchiveDiskImpl::~_OArchiveDiskImpl((Archiver::_OArchiveDiskImpl *)(a1 + 24));
}

void Archiver::_OArchiveDiskImpl::~_OArchiveDiskImpl(Archiver::_OArchiveDiskImpl *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *((_QWORD *)this + 30) = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 240) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1A1AD5F48]((char *)this + 248);
  std::ostream::~ostream();
  MEMORY[0x1A1AD61C4]((char *)this + 656);
  Archiver::_OArchiveImpl::~_OArchiveImpl((void **)this);
}

{
  Archiver::_OArchiveDiskImpl::~_OArchiveDiskImpl(this);
  JUMPOUT(0x1A1AD6260);
}

void Archiver::_OArchiveImpl::~_OArchiveImpl(void **this)
{
  *this = off_1E3D5B030;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 24));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 19));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 14));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 9));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

_QWORD *Archiver::_OArchiveImpl::rawOutputStream(Archiver::_OArchiveImpl *this)
{
  _QWORD *v1;
  _QWORD *result;

  v1 = (_QWORD *)*((_QWORD *)this + 7);
  if (*(_BYTE *)v1)
    return v1 + 1;
  result = (_QWORD *)v1[78];
  if (!result)
  {
    Archiver::_ODataBlobImpl::_openAsStream(v1);
    return (_QWORD *)v1[78];
  }
  return result;
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    v7 = &v4[4 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<float>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[4 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    v19 = &v4[4 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 1;
  if (v8 >> 1 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[4 * v5];
  v16 = &v11[4 * v15];
  bzero(v14, 4 * v6);
  v17 = &v14[4 * v6];
  while (v13 != v12)
  {
    v18 = *((_DWORD *)v13 - 1);
    v13 -= 4;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C814754(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C814E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;

  if (a21 < 0)
    operator delete(__p);
  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)&a22);

  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }

  _Unwind_Resume(a1);
}

void sub_19C815AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t *v46;
  uint64_t v47;

  MEMORY[0x1A1AD6260](v47, 0x1081C40622C3295);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v46);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C815D40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,OArchive>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = (_QWORD *)v3;
      if (*(_QWORD *)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD **)(a1 + 8);
      v9 = (_QWORD *)v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          v21 = (_QWORD *)v3;
          v11 = (uint64_t **)v3;
LABEL_14:
          v12 = (char *)operator new(0x68uLL);
          v13 = v12;
          if (*((char *)v5 + 55) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v12 + 32), (const std::string::value_type *)v5[4], v5[5]);
          }
          else
          {
            v14 = *((_OWORD *)v5 + 2);
            *((_QWORD *)v12 + 6) = v5[6];
            *((_OWORD *)v12 + 2) = v14;
          }
          v13[56] = *((_BYTE *)v5 + 56);
          v15 = v5[9];
          *((_QWORD *)v13 + 8) = v5[8];
          *((_QWORD *)v13 + 9) = v15;
          if (v15)
          {
            v16 = (unint64_t *)(v15 + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          std::map<std::string,OArchive>::map[abi:ne180100](v13 + 80, v5 + 10);
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v21, v11, (uint64_t *)v13);
          goto LABEL_21;
        }
        v21 = v7;
        v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        v11 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v21, v5 + 4);
      }
      if (!*v11)
        goto LABEL_14;
LABEL_21:
      v18 = (_QWORD *)v5[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v5[2];
          v10 = *v19 == (_QWORD)v5;
          v5 = v19;
        }
        while (!v10);
      }
      v5 = v19;
    }
    while (v19 != v4);
  }
  return a1;
}

void sub_19C815F00(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,OArchive>,void *>>>::operator()[abi:ne180100](0, v1);
  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,OArchive>,void *>>>::operator()[abi:ne180100](char a1, uint64_t a2)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(*(char **)(a2 + 88));
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a2 + 64);
    if (*(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void sub_19C81620C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void sub_19C816458(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C816A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  uint64_t v30;
  void *v32;
  void *v33;

  if (__p)
    operator delete(__p);
  v32 = *(void **)(v30 - 136);
  if (v32)
  {
    *(_QWORD *)(v30 - 128) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(v30 - 112);
  if (v33)
  {
    *(_QWORD *)(v30 - 104) = v33;
    operator delete(v33);
  }
  if (a11)
    operator delete(a11);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<MIL::IROperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<MIL::IROperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IROperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB2EFF6))
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<MIL::IRBlock  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<MIL::IRBlock  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRBlock  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB2EF6CLL))
    return a1 + 24;
  else
    return 0;
}

void sub_19C8173E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,uint64_t a35,uint64_t a36,void *a37,void *a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  _Unwind_Resume(a1);
}

void sub_19C817A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,uint64_t a29,uint64_t a30,void *a31,void *a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

void sub_19C817CB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C817F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;

  _Unwind_Resume(a1);
}

void sub_19C8181A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C8182B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C818528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29)
{
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;

  v32 = *(void **)(v31 - 120);

  _Unwind_Resume(a1);
}

void sub_19C8185F0()
{
  JUMPOUT(0x19C818598);
}

void sub_19C818600()
{
  JUMPOUT(0x19C8185A0);
}

void sub_19C818610()
{
  JUMPOUT(0x19C8185A4);
}

void sub_19C818620()
{
  JUMPOUT(0x19C8185A8);
}

void sub_19C818630()
{
  JUMPOUT(0x19C8185ACLL);
}

void sub_19C81863C()
{
  JUMPOUT(0x19C8185B8);
}

void sub_19C818644()
{
  JUMPOUT(0x19C8185C0);
}

void sub_19C81864C()
{
  JUMPOUT(0x19C8185C8);
}

void sub_19C818654()
{
  JUMPOUT(0x19C8185D0);
}

void sub_19C81865C()
{
  JUMPOUT(0x19C8185D8);
}

void sub_19C818664()
{
  JUMPOUT(0x19C8185B0);
}

void sub_19C81866C()
{
  JUMPOUT(0x19C8185E0);
}

void sub_19C818DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_19C819038(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8190C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8192F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C81980C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

void sub_19C819BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29)
{
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;

  v33 = *(void **)(v31 - 120);
  v32 = *(void **)(v31 - 112);

  _Unwind_Resume(a1);
}

void sub_19C819C70()
{
  JUMPOUT(0x19C819C1CLL);
}

void sub_19C819C80()
{
  JUMPOUT(0x19C819C24);
}

void sub_19C819C90()
{
  JUMPOUT(0x19C819C28);
}

void sub_19C819CA0()
{
  JUMPOUT(0x19C819C2CLL);
}

void sub_19C819CAC()
{
  JUMPOUT(0x19C819C30);
}

void sub_19C819CB8()
{
  JUMPOUT(0x19C819C34);
}

void sub_19C819CC0()
{
  JUMPOUT(0x19C819C38);
}

void sub_19C819CC8()
{
  JUMPOUT(0x19C819C40);
}

void sub_19C819CD0()
{
  JUMPOUT(0x19C819C48);
}

void sub_19C819CD8()
{
  JUMPOUT(0x19C819C50);
}

void sub_19C819CE0()
{
  JUMPOUT(0x19C819C58);
}

void sub_19C819CE8()
{
  JUMPOUT(0x19C819C60);
}

void sub_19C819E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C819E68()
{
  JUMPOUT(0x19C819E50);
}

void sub_19C819E70()
{
  JUMPOUT(0x19C819E58);
}

void sub_19C819EE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C819F64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id conformedStateDescriptions(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (!v6)
  {

LABEL_15:
    v7 = v4;
    goto LABEL_16;
  }
  v7 = 0;
  v8 = *(_QWORD *)v14;
  do
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)v14 != v8)
        objc_enumerationMutation(v5);
      v10 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
      objc_msgSend(v5, "objectForKeyedSubscript:", v10, (_QWORD)v13);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v11, "type") == 8)
      {
        if (!v7)
          v7 = (id)objc_msgSend(v4, "mutableCopy");
        objc_msgSend(v7, "setObject:forKeyedSubscript:", v11, v10);
      }

    }
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  }
  while (v6);

  if (!v7)
    goto LABEL_15;
LABEL_16:

  return v7;
}

void sub_19C81A324(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C81A410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C81A4E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C81A5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C81A998(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C81AC40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C81B038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C81B1E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C81B308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C81B43C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C81B56C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v6;

  _Unwind_Resume(a1);
}

void sub_19C81B6C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

void sub_19C81B910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose(va, 8);
  std::unique_ptr<ElapsedTimeRecorder>::reset[abi:ne180100]((id **)(v16 + 48));

  _Unwind_Resume(a1);
}

void sub_19C81B9D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C81BA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C81BA68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4714(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

id *__Block_byref_object_dispose__4715(uint64_t a1)
{
  return std::unique_ptr<ElapsedTimeRecorder>::reset[abi:ne180100]((id **)(a1 + 48));
}

void sub_19C81BB7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id *std::unique_ptr<ElapsedTimeRecorder>::reset[abi:ne180100](id **a1)
{
  id *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    ElapsedTimeRecorder::~ElapsedTimeRecorder(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

uint64_t **CoreML::MLNeuralNetworkUtilities::getInputShapeInfosFromSpec(uint64_t **this, const CoreML::Specification::ModelDescription *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  const CoreML::Specification::ArrayFeatureType *v12;
  uint64_t *v13;
  _BYTE v14[56];
  int v15;
  __int128 *v16;
  _BYTE v17[56];
  int v18;
  int v19;
  _QWORD v20[11];

  v20[9] = *MEMORY[0x1E0C80C00];
  this[1] = 0;
  this[2] = 0;
  *this = (uint64_t *)(this + 1);
  if (a3)
    v3 = (uint64_t *)(a3 + 8);
  else
    v3 = 0;
  if ((_DWORD)a2)
  {
    v4 = this;
    v5 = 8 * (int)a2;
    while (1)
    {
      v6 = *v3;
      v7 = *(uint64_t **)(*v3 + 32);
      if (!v7)
        v7 = &CoreML::Specification::_FeatureType_default_instance_;
      v8 = *((_DWORD *)v7 + 9);
      if (v8 == 4)
        break;
      if (v8 == 8)
      {
        v11 = v7[3];
        if (*(_DWORD *)(v11 + 28) == 1)
        {
          v12 = *(const CoreML::Specification::ArrayFeatureType **)(v11 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)this);
          v12 = (const CoreML::Specification::ArrayFeatureType *)&CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v17, (uint64_t)v14);
        v18 = v15;
        v19 = 0;
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v20, (uint64_t)v17);
        v16 = *(__int128 **)(v6 + 16);
        v13 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v16, &v16);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v13 + 8), (uint64_t)v20);
        goto LABEL_17;
      }
      if (v8 == 5)
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v17, (uint64_t)v14);
        v18 = v15;
        v19 = 0;
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v20, (uint64_t)v17);
        v16 = *(__int128 **)(v6 + 16);
        v9 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v16, &v16);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v9 + 8), (uint64_t)v20);
LABEL_17:
        std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v17);
        this = (uint64_t **)std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v14);
      }
      ++v3;
      v5 -= 8;
      if (!v5)
        return this;
    }
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v17, (uint64_t)v14);
    v18 = v15;
    v19 = 1;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v20, (uint64_t)v17);
    v16 = *(__int128 **)(v6 + 16);
    v10 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v16, &v16);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v10 + 8), (uint64_t)v20);
    goto LABEL_17;
  }
  return this;
}

void sub_19C81BDF0(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::MultiArrayShapeInfoFromSpec(_anonymous_namespace_ *this, const CoreML::Specification::ArrayFeatureType *a2)
{
  const CoreML::Specification::ArrayFeatureType *v2;
  int v4;
  uint64_t v5;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  const CoreML::Specification::ArrayFeatureType *v40;
  _anonymous_namespace_ *v41;
  __n128 v42;
  unint64_t v43;
  void *__p;
  _QWORD *v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  _QWORD v53[6];
  int v54;

  v2 = a2;
  memset(v53, 0, 24);
  v54 = 0;
  v4 = *((_DWORD *)v2 + 15);
  if (v4 != 31)
  {
    if (v4 == 21)
    {
      v5 = *((_QWORD *)v2 + 5);
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v6 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)std::vector<std::vector<long long>>::reserve(&v48, *(int *)(v5 + 24));
      if (*((_DWORD *)v2 + 15) == 21)
      {
        v7 = (uint64_t *)*((_QWORD *)v2 + 5);
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v6);
        v7 = &CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_;
      }
      v26 = v7[4];
      if (v26)
        v27 = v26 + 8;
      else
        v27 = 0;
      v28 = *((int *)v7 + 6);
      if ((_DWORD)v28)
      {
        v29 = 8 * v28;
        do
        {
          v30 = v49;
          if ((unint64_t)v49 >= v50)
          {
            v32 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v48) >> 3);
            v33 = v32 + 1;
            if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v50 - (_QWORD)v48) >> 3) > v33)
              v33 = 0x5555555555555556 * ((uint64_t)(v50 - (_QWORD)v48) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (_QWORD)v48) >> 3) >= 0x555555555555555)
              v34 = 0xAAAAAAAAAAAAAAALL;
            else
              v34 = v33;
            v45 = &v50;
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<long long>>>(v34);
            v36 = (unint64_t)&v35[24 * v32];
            v42.n128_u64[0] = (unint64_t)v35;
            v42.n128_u64[1] = v36;
            __p = &v35[24 * v37];
            *(_OWORD *)v36 = v46;
            *(_QWORD *)(v36 + 16) = v47;
            v43 = v36 + 24;
            std::vector<std::vector<long long>>::__swap_out_circular_buffer(&v48, &v42);
            v31 = v49;
            std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)&v42);
          }
          else
          {
            *(_OWORD *)v49 = v46;
            *((_QWORD *)v30 + 2) = v47;
            v31 = v30 + 24;
          }
          v49 = v31;
          v27 += 8;
          v29 -= 8;
        }
        while (v29);
      }
      CoreML::NNCompiler::MLEnumeratedShape::MLEnumeratedShape(&v42, (uint64_t)&v51, (uint64_t *)&v48);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<2ul,CoreML::NNCompiler::MLEnumeratedShape,CoreML::NNCompiler::MLEnumeratedShape>((uint64_t)v53, (uint64_t)v53, (uint64_t)&v42);
      *(_QWORD *)&v46 = &__p;
      std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
      if (v42.n128_u64[0])
      {
        v42.n128_u64[1] = v42.n128_u64[0];
        operator delete((void *)v42.n128_u64[0]);
      }
      v42.n128_u64[0] = (unint64_t)&v48;
      std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
      goto LABEL_58;
    }
    v42 = 0uLL;
    v43 = 0;
    std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v42, v51, v52, (v52 - (uint64_t)v51) >> 3);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<0ul,CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLFixedShape>((uint64_t)v53, (uint64_t)v53, &v42);
    v25 = (char *)v42.n128_u64[0];
    if (!v42.n128_u64[0])
      goto LABEL_58;
LABEL_38:
    operator delete(v25);
    goto LABEL_58;
  }
  v8 = *((_QWORD *)v2 + 5);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  std::vector<CoreML::NNCompiler::MLRangeShape::Range>::reserve((void **)&v48, *(int *)(v8 + 24));
  v9 = *(_QWORD *)(v8 + 32);
  if (v9)
    v10 = v9 + 8;
  else
    v10 = 0;
  v11 = *(int *)(v8 + 24);
  if ((_DWORD)v11)
  {
    v40 = v2;
    v41 = this;
    v12 = v10 + 8 * v11;
    v13 = v49;
    v14 = v50;
    v15 = v48;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)v10 + 16);
      v17 = *(_QWORD *)(*(_QWORD *)v10 + 24);
      if ((unint64_t)v13 >= v14)
      {
        v18 = (v13 - v15) >> 4;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60)
        {
          v48 = v15;
          v49 = v13;
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v14 - (_QWORD)v15) >> 3 > v19)
          v19 = (uint64_t)(v14 - (_QWORD)v15) >> 3;
        if (v14 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v20);
        else
          v21 = 0;
        v22 = (_QWORD *)(v20 + 16 * v18);
        *v22 = v16;
        v22[1] = v17;
        if (v13 == v15)
        {
          v24 = (char *)(v20 + 16 * v18);
        }
        else
        {
          v23 = v20 + 16 * v18;
          do
          {
            v24 = (char *)(v23 - 16);
            *(_OWORD *)(v23 - 16) = *((_OWORD *)v13 - 1);
            v13 -= 16;
            v23 -= 16;
          }
          while (v13 != v15);
        }
        v14 = v20 + 16 * v21;
        v13 = (char *)(v22 + 2);
        if (v15)
          operator delete(v15);
        v15 = v24;
      }
      else
      {
        *(_QWORD *)v13 = v16;
        *((_QWORD *)v13 + 1) = v17;
        v13 += 16;
      }
      v10 += 8;
    }
    while (v10 != v12);
    v49 = v13;
    v50 = v14;
    v48 = v15;
    v2 = v40;
    this = v41;
  }
  CoreML::NNCompiler::MLRangeShape::MLRangeShape(&v42, (uint64_t)&v51, (uint64_t)&v48);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<1ul,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLRangeShape>((uint64_t)v53, (uint64_t)v53, (uint64_t)&v42);
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  if (v42.n128_u64[0])
  {
    v42.n128_u64[1] = v42.n128_u64[0];
    operator delete((void *)v42.n128_u64[0]);
  }
  v25 = v48;
  if (v48)
    goto LABEL_38;
LABEL_58:
  v38 = *((_DWORD *)v2 + 9);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)this, (uint64_t)v53);
  *((_DWORD *)this + 14) = v38;
  if (v51)
    operator delete(v51);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v53);
}

void sub_19C81C234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27)
{
  a17 = &a21;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (__p)
    operator delete(__p);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 48) = -1;
  v3 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E3D65440[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 48) = v3;
  }
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 64) = -1;
  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E3D65468[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 64) = v3;
  }
  return a1;
}

void sub_19C81C39C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x88uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    CoreML::NNCompiler::MLShapeInfo::MLShapeInfo((CoreML::NNCompiler::MLShapeInfo *)(v6 + 7));
    v13 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_19C81C478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 64);
  v4 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E3D65458[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 64) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E3D65490[v4])(&v5, result, a2);
}

void `anonymous namespace'::ImageShapeInfoFromSpec(_anonymous_namespace_ *this, const CoreML::Specification::ImageFeatureType *a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  int64x2_t *v23;
  int64x2_t v24;
  int64x2_t *v25;
  int64x2_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  _OWORD v30[2];
  _BYTE v31[56];
  int v32;
  char *v33;
  char *v34;
  char *v35;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 14) = 0;
  v4 = *((_QWORD *)a2 + 2);
  v5 = *((_QWORD *)a2 + 3);
  v6 = *((_DWORD *)a2 + 13);
  if (v6 == 31)
  {
    v22 = (uint64_t *)*((_QWORD *)a2 + 5);
    if (v22 == &CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_)
      goto LABEL_34;
    v23 = (int64x2_t *)v22[2];
    if (v23)
    {
      v24 = v23[1];
      v25 = (int64x2_t *)v22[3];
      if (!v25)
      {
        v26 = vdupq_n_s64(v5);
LABEL_33:
        v30[0] = v24;
        v30[1] = v26;
        CoreML::NNCompiler::MLImageShapeInfo::MLImageShapeInfo((uint64_t)v31, v4, v5, (uint64_t *)v30, *((_DWORD *)a2 + 8));
        std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>>((uint64_t)this, (uint64_t)v31);
LABEL_35:
        *((_DWORD *)this + 14) = v32;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v31);
        return;
      }
    }
    else
    {
      v25 = (int64x2_t *)v22[3];
      if (!v25)
        goto LABEL_34;
      v24 = vdupq_n_s64(v4);
    }
    v26 = v25[1];
    goto LABEL_33;
  }
  if (v6 != 21)
  {
LABEL_34:
    CoreML::NNCompiler::MLImageShapeInfo::MLImageShapeInfo((uint64_t)v31, *((_QWORD *)a2 + 2), v5, *((_DWORD *)a2 + 8));
    std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>>((uint64_t)this, (uint64_t)v31);
    goto LABEL_35;
  }
  v7 = *((_QWORD *)a2 + 5);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  std::vector<std::pair<unsigned long,unsigned long>>::reserve((void **)&v33, *(int *)(v7 + 24));
  v8 = *(_QWORD *)(v7 + 32);
  if (v8)
    v9 = v8 + 8;
  else
    v9 = 0;
  v10 = *(int *)(v7 + 24);
  if ((_DWORD)v10)
  {
    v27 = v5;
    v28 = v4;
    v11 = v9 + 8 * v10;
    v13 = v34;
    v12 = v35;
    v14 = v33;
    do
    {
      if (v13 >= v12)
      {
        v29 = *(_OWORD *)(*(_QWORD *)v9 + 16);
        v15 = (v13 - v14) >> 4;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60)
        {
          v33 = v14;
          v34 = v13;
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if ((v12 - v14) >> 3 > v16)
          v16 = (v12 - v14) >> 3;
        if ((unint64_t)(v12 - v14) >= 0x7FFFFFFFFFFFFFF0)
          v17 = 0xFFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v17);
        v20 = &v18[16 * v15];
        *(_OWORD *)v20 = v29;
        v21 = v20 + 16;
        if (v13 != v14)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v13 - 1);
            v20 -= 16;
            v13 -= 16;
          }
          while (v13 != v14);
          v13 = v14;
        }
        v14 = v20;
        v12 = &v18[16 * v19];
        if (v13)
          operator delete(v13);
        v13 = v21;
      }
      else
      {
        *(_OWORD *)v13 = *(_OWORD *)(*(_QWORD *)v9 + 16);
        v13 += 16;
      }
      v9 += 8;
    }
    while (v9 != v11);
    v33 = v14;
    v34 = v13;
    v35 = v12;
    v5 = v27;
    v4 = v28;
  }
  CoreML::NNCompiler::MLImageShapeInfo::MLImageShapeInfo((uint64_t)v31, v4, v5, (uint64_t **)&v33, *((_DWORD *)a2 + 8));
  std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>>((uint64_t)this, (uint64_t)v31);
  *((_DWORD *)this + 14) = v32;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v31);
  if (v33)
    operator delete(v33);
}

void sub_19C81C774(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned long,unsigned long>>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF0];
    v7 = &v4[16 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
        v10 -= 16;
        v8 -= 16;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 48);
  v4 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E3D65410[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 48) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E3D65428[v4])(&v5, result, a2);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  double result;

  *(_QWORD *)&result = std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<0ul,CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLFixedShape>(*a1, a2, a3).n128_u64[0];
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<1ul,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLRangeShape>(*a1, a2, a3).n128_u64[0];
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<2ul,CoreML::NNCompiler::MLEnumeratedShape,CoreML::NNCompiler::MLEnumeratedShape>(*a1, a2, a3).n128_u64[0];
  return result;
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<2ul,CoreML::NNCompiler::MLEnumeratedShape,CoreML::NNCompiler::MLEnumeratedShape>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v7;
  void **v8;
  __n128 result;
  char v10;

  v5 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_1E3D65410[v5])(&v10, a1);
LABEL_9:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    result = *(__n128 *)(a3 + 24);
    *(__n128 *)(a1 + 24) = result;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 2;
    return result;
  }
  v7 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v7;
    operator delete(v7);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = (void **)(a2 + 24);
  if (*(_QWORD *)(a2 + 24))
  {
    std::vector<std::vector<long long>>::__clear[abi:ne180100]((uint64_t *)(a2 + 24));
    operator delete(*v8);
    *v8 = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  result = *(__n128 *)(a3 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  return result;
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<1ul,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLRangeShape>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v7;
  void *v8;
  __n128 result;
  char v10;

  v5 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_1E3D65410[v5])(&v10, a1);
LABEL_9:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    result = *(__n128 *)(a3 + 24);
    *(__n128 *)(a1 + 24) = result;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 1;
    return result;
  }
  v7 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v7;
    operator delete(v7);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = *(void **)(a2 + 24);
  if (v8)
  {
    *(_QWORD *)(a2 + 32) = v8;
    operator delete(v8);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  result = *(__n128 *)(a3 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  return result;
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<0ul,CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLFixedShape>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5;
  void *v7;
  __n128 result;
  char v9;

  v5 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_1E3D65410[v5])(&v9, a1);
LABEL_7:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a3;
    *(__n128 *)a1 = *a3;
    *(_QWORD *)(a1 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(_DWORD *)(a1 + 48) = 0;
    return result;
  }
  v7 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v7;
    operator delete(v7);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML10NNCompiler21MLMultiArrayShapeInfoENS9_16MLImageShapeInfoEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSQ_EEEDcSI_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v8;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>>(a2, a3);
      *(_DWORD *)(a2 + 56) = *(_DWORD *)(a3 + 56);
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E3D65458[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 64) = -1;
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor(v4, a3);
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a3 + 56);
  *(_DWORD *)(v4 + 64) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML10NNCompiler21MLMultiArrayShapeInfoENS9_16MLImageShapeInfoEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSQ_EEEDcSI_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v8;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>>(a2, a3);
      *(_DWORD *)(a2 + 56) = *(_DWORD *)(a3 + 56);
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E3D65458[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 64) = -1;
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor(v4, a3);
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a3 + 56);
  *(_DWORD *)(v4 + 64) = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLShapeInfo>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

CoreML::NNCompiler::MLShapeInfo *CoreML::NNCompiler::MLShapeInfo::MLShapeInfo(CoreML::NNCompiler::MLShapeInfo *this)
{
  _QWORD v3[6];
  int v4;
  int v5;

  memset(v3, 0, 24);
  v4 = 0;
  v5 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)this + 8, (uint64_t)v3);
  *((_DWORD *)this + 16) = v5;
  *((_DWORD *)this + 18) = 0;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v3);
  return this;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler21MLMultiArrayShapeInfoENS9_16MLImageShapeInfoEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__copy_constructor(a2, a3);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a3 + 56);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler21MLMultiArrayShapeInfoENS9_16MLImageShapeInfoEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__copy_constructor(a2, a3);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a3 + 56);
  return result;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 48) = -1;
  v3 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E3D65478[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 48) = v3;
  }
  return a1;
}

void sub_19C81CE94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__init_with_size[abi:ne180100]<CoreML::NNCompiler::MLRangeShape::Range*,CoreML::NNCompiler::MLRangeShape::Range*>(a2 + 3, *(const void **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 4);
}

void sub_19C81CF1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<std::vector<long long>>::__init_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>((uint64_t)(a2 + 3), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3));
}

void sub_19C81CF9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __n128 result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  result = *(__n128 *)(a3 + 24);
  *(__n128 *)(a2 + 3) = result;
  a2[5] = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __n128 result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  result = *(__n128 *)(a3 + 24);
  *(__n128 *)(a2 + 3) = result;
  a2[5] = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  return result;
}

void `anonymous namespace'::ShapeFromRepeatedField(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<long long>::reserve((void **)a1, *a2);
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
    v5 = (uint64_t *)(v4 + 8);
  else
    v5 = 0;
  if (v4)
    v6 = v4 + 8 + 8 * *a2;
  else
    v6 = 0;
  if (v5 != (uint64_t *)v6)
  {
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    do
    {
      v9 = *v5;
      if ((unint64_t)v7 >= v8)
      {
        v11 = *(_QWORD **)a1;
        v12 = ((uint64_t)v7 - *(_QWORD *)a1) >> 3;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v8 - (_QWORD)v11) >> 2 > v13)
          v13 = (uint64_t)(v8 - (_QWORD)v11) >> 2;
        if (v8 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v14);
        else
          v15 = 0;
        v16 = (_QWORD *)(v14 + 8 * v12);
        *v16 = v9;
        v10 = v16 + 1;
        while (v7 != v11)
        {
          v17 = *--v7;
          *--v16 = v17;
        }
        v8 = v14 + 8 * v15;
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v10;
        *(_QWORD *)(a1 + 16) = v8;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v7 = v9;
        v10 = v7 + 1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      ++v5;
      v7 = v10;
    }
    while (v5 != (uint64_t *)v6);
  }
}

void sub_19C81D190(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **CoreML::MLNeuralNetworkUtilities::getStateShapeInfosFromSpec(uint64_t **this, const CoreML::Specification::ModelDescription *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  const CoreML::Specification::ArrayFeatureType *v9;
  uint64_t *v10;
  _BYTE v11[56];
  int v12;
  __int128 *v13;
  _DWORD v14[18];
  _QWORD v15[11];

  v15[9] = *MEMORY[0x1E0C80C00];
  this[1] = 0;
  this[2] = 0;
  *this = (uint64_t *)(this + 1);
  if (a3)
    v3 = (uint64_t *)(a3 + 8);
  else
    v3 = 0;
  if ((_DWORD)a2)
  {
    v4 = this;
    v5 = 8 * (int)a2;
    do
    {
      v6 = *v3;
      v7 = *(uint64_t **)(*v3 + 32);
      if (!v7)
        v7 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v7 + 9) == 8)
      {
        v8 = (uint64_t *)v7[3];
      }
      else
      {
        this = (uint64_t **)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)this);
        v8 = &CoreML::Specification::_StateFeatureType_default_instance_;
      }
      if (*((_DWORD *)v8 + 7) == 1)
      {
        v9 = (const CoreML::Specification::ArrayFeatureType *)v8[2];
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)this);
        v9 = (const CoreML::Specification::ArrayFeatureType *)&CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v14, (uint64_t)v11);
      v14[14] = v12;
      v14[16] = 0;
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v15, (uint64_t)v14);
      v13 = *(__int128 **)(v6 + 16);
      v10 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v13, &v13);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v10 + 8), (uint64_t)v15);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v15);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v14);
      this = (uint64_t **)std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v11);
      ++v3;
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

void sub_19C81D334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void CoreML::MLNeuralNetworkUtilities::getOutputNamesFromSpec(CoreML::MLNeuralNetworkUtilities *this, const CoreML::Specification::ModelDescription *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  __int128 *v7;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a3)
    v3 = a3 + 8;
  else
    v3 = 0;
  if ((_DWORD)a2)
  {
    v5 = 0;
    v6 = 8 * (int)a2;
    do
    {
      v7 = *(__int128 **)(*(_QWORD *)v3 + 16);
      if (v5 >= *((_QWORD *)this + 2))
      {
        v5 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)this, v7);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)this, v7);
        v5 += 24;
      }
      *((_QWORD *)this + 1) = v5;
      v3 += 8;
      v6 -= 8;
    }
    while (v6);
  }
}

void sub_19C81D414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_19C81D538(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void CoreML::MLNeuralNetworkUtilities::getEspressoConfigurationsFromShapeInfos(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, int a5, int a6, void *a7)
{
  id v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  uint64_t *v21;
  uint64_t Shape;
  int v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t *v29;
  std::string *v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  std::string::size_type *p_size;
  std::string::size_type *v39;
  std::string::size_type size;
  _QWORD *v41;
  uint64_t *v42;
  std::string *v43;
  __int128 v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  BOOL v48;
  __int128 *v49;
  uint64_t v50;
  _QWORD *v51;
  __int128 *v52;
  uint64_t v53;
  _QWORD *v54;
  std::runtime_error *exception;
  id v56;
  int v57;
  char *v58;
  char *v59;
  char *v60;
  void *v61;
  std::runtime_error *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _OWORD *v68;
  uint64_t *v69;
  int v70;
  int8x8_t v71;
  unsigned int v72;
  int8x8_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  BOOL v79;
  _QWORD *v80;
  __int128 v81;
  unint64_t v82;
  std::string::size_type v83;
  int32x4_t **v84;
  std::string::size_type v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int8x16_t v90;
  int8x16_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  __int128 *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  int v110;
  int v111;
  id v112;
  void *v113;
  int v114;
  uint64_t i;
  uint64_t v116;
  uint64_t *v117;
  uint64_t **v118;
  uint64_t **v119;
  _QWORD *v120;
  _QWORD *v121;
  std::string *v122;
  __int128 v123;
  uint64_t *v124;
  void **v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t **v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t **v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  char *v140;
  unint64_t v141;
  uint64_t *v142;
  char *v143;
  uint64_t *v144;
  __int128 v145;
  __int128 v146;
  uint64_t *v147;
  uint64_t **v148;
  uint64_t **v149;
  uint64_t **v150;
  char *v151;
  __int128 v152;
  _QWORD *v153;
  uint64_t v154;
  char *v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  std::runtime_error *v166;
  _QWORD *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  std::runtime_error *v172;
  id v173;
  id v175;
  int v177;
  int8x16_t v178;
  __int128 v179;
  uint64_t v180;
  uint64_t **v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t *v184;
  _QWORD *v185[2];
  __int128 v186;
  __int128 v187;
  _QWORD *v188;
  __int128 v189;
  uint64_t v190;
  std::string v191;
  std::string *v192;
  char v193;
  _QWORD *v194;
  _QWORD *v195;
  __int128 v196;
  _QWORD v197[2];
  __int128 v198;
  __int128 v199;
  _QWORD *v200;
  uint64_t v201;

  v201 = *MEMORY[0x1E0C80C00];
  v11 = a7;
  std::map<std::string,CoreML::NNCompiler::MLShapeInfo>::map[abi:ne180100]((uint64_t)&v184, a2);
  v14 = (_QWORD *)*a3;
  v13 = a3 + 1;
  v12 = v14;
  if (v14 != v13)
  {
    v15 = (uint64_t *)v185;
    do
    {
      v16 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,CoreML::NNCompiler::MLShapeInfo> const&>(&v184, v15, v12 + 4, (uint64_t)(v12 + 4));
      v17 = (uint64_t *)v16[1];
      if (v17)
      {
        do
        {
          v15 = v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v15 = (uint64_t *)v16[2];
          v48 = *v15 == (_QWORD)v16;
          v16 = v15;
        }
        while (!v48);
      }
      v18 = (_QWORD *)v12[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v12[2];
          v48 = *v19 == (_QWORD)v12;
          v12 = v19;
        }
        while (!v48);
      }
      v12 = v19;
    }
    while (v19 != v13);
  }
  if (!v185[1])
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)a1 = a1 + 8;
    goto LABEL_235;
  }
  v177 = a5;
  v173 = v11;
  v175 = v11;
  v20 = (char *)&v196 + 8;
  *((_QWORD *)&v196 + 1) = 0;
  v197[0] = 0;
  *(_QWORD *)&v196 = (char *)&v196 + 8;
  v21 = v184;
  if (v184 == (uint64_t *)v185)
  {
    *(_OWORD *)&v191.__r_.__value_.__r.__words[1] = 0uLL;
    v191.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191.__r_.__value_.__l.__size_;
  }
  else
  {
    do
    {
      Shape = CoreML::NNCompiler::MLShapeInfo::getShape((CoreML::NNCompiler::MLShapeInfo *)(v21 + 7));
      v23 = *(_DWORD *)(Shape + 48);
      if (v23 == 2)
        v24 = Shape;
      else
        v24 = 0;
      if (v23 == 2)
      {
        v25 = (uint64_t **)&v196 + 1;
        v26 = (uint64_t **)&v196 + 1;
        if (*((_QWORD *)&v196 + 1))
        {
          v27 = (uint64_t *)*((_QWORD *)&v196 + 1);
          while (1)
          {
            while (1)
            {
              v25 = (uint64_t **)v27;
              v28 = v27 + 4;
              if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v21 + 4, v27 + 4))
                break;
              v27 = *v25;
              v26 = v25;
              if (!*v25)
                goto LABEL_27;
            }
            if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v28, v21 + 4))
              break;
            v26 = v25 + 1;
            v27 = v25[1];
            if (!v27)
              goto LABEL_27;
          }
        }
        else
        {
LABEL_27:
          v29 = (uint64_t *)operator new(0x40uLL);
          v30 = (std::string *)(v29 + 4);
          if (*((char *)v21 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v30, (const std::string::value_type *)v21[4], v21[5]);
          }
          else
          {
            v31 = *((_OWORD *)v21 + 2);
            v29[6] = v21[6];
            *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
          }
          v29[7] = v24;
          *v29 = 0;
          v29[1] = 0;
          v29[2] = (uint64_t)v25;
          *v26 = v29;
          if (*(_QWORD *)v196)
          {
            *(_QWORD *)&v196 = *(_QWORD *)v196;
            v29 = *v26;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v196 + 1), v29);
          ++v197[0];
        }
      }
      v32 = (uint64_t *)v21[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (uint64_t *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (uint64_t *)v21[2];
          v48 = *v33 == (_QWORD)v21;
          v21 = v33;
        }
        while (!v48);
      }
      v21 = v33;
    }
    while (v33 != (uint64_t *)v185);
    v34 = v184;
    *(_OWORD *)&v191.__r_.__value_.__r.__words[1] = 0uLL;
    v191.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191.__r_.__value_.__l.__size_;
    if (v184 != (uint64_t *)v185)
    {
      do
      {
        v35 = CoreML::NNCompiler::MLShapeInfo::getShape((CoreML::NNCompiler::MLShapeInfo *)(v34 + 7));
        v36 = *(_DWORD *)(v35 + 48);
        if (v36 == 1)
          v37 = v35;
        else
          v37 = 0;
        if (v36 == 1)
        {
          p_size = &v191.__r_.__value_.__l.__size_;
          v39 = &v191.__r_.__value_.__l.__size_;
          if (v191.__r_.__value_.__l.__size_)
          {
            size = v191.__r_.__value_.__l.__size_;
            while (1)
            {
              while (1)
              {
                p_size = (std::string::size_type *)size;
                v41 = (_QWORD *)(size + 32);
                if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v34 + 4, (_QWORD *)(size + 32)))break;
                size = *p_size;
                v39 = p_size;
                if (!*p_size)
                  goto LABEL_51;
              }
              if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v41, v34 + 4))
                break;
              v39 = p_size + 1;
              size = p_size[1];
              if (!size)
                goto LABEL_51;
            }
          }
          else
          {
LABEL_51:
            v42 = (uint64_t *)operator new(0x40uLL);
            v43 = (std::string *)(v42 + 4);
            if (*((char *)v34 + 55) < 0)
            {
              std::string::__init_copy_ctor_external(v43, (const std::string::value_type *)v34[4], v34[5]);
            }
            else
            {
              v44 = *((_OWORD *)v34 + 2);
              v42[6] = v34[6];
              *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v44;
            }
            v42[7] = v37;
            *v42 = 0;
            v42[1] = 0;
            v42[2] = (uint64_t)p_size;
            *v39 = (std::string::size_type)v42;
            if (*(_QWORD *)v191.__r_.__value_.__l.__data_)
            {
              v191.__r_.__value_.__r.__words[0] = *(_QWORD *)v191.__r_.__value_.__l.__data_;
              v42 = (uint64_t *)*v39;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v191.__r_.__value_.__l.__size_, v42);
            ++v191.__r_.__value_.__r.__words[2];
          }
        }
        v45 = (uint64_t *)v34[1];
        if (v45)
        {
          do
          {
            v46 = v45;
            v45 = (uint64_t *)*v45;
          }
          while (v45);
        }
        else
        {
          do
          {
            v46 = (uint64_t *)v34[2];
            v48 = *v46 == (_QWORD)v34;
            v34 = v46;
          }
          while (!v48);
        }
        v34 = v46;
      }
      while (v46 != (uint64_t *)v185);
      v47 = v197[0];
      if (v197[0])
        v48 = v191.__r_.__value_.__r.__words[2] == 0;
      else
        v48 = 1;
      if (!v48)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v186);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)"A model doesn't allow a mixture of enumerated and range shape flexibility, but feature ", 87);
        std::operator+<char>();
        if ((SBYTE7(v199) & 0x80u) == 0)
          v49 = &v198;
        else
          v49 = (__int128 *)v198;
        if ((SBYTE7(v199) & 0x80u) == 0)
          v50 = BYTE7(v199);
        else
          v50 = *((_QWORD *)&v198 + 1);
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)v49, v50);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)")", 1);
        if (SBYTE7(v199) < 0)
          operator delete((void *)v198);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)" uses the enumerated shape and feature ", 39);
        std::operator+<char>();
        if ((SBYTE7(v199) & 0x80u) == 0)
          v52 = &v198;
        else
          v52 = (__int128 *)v198;
        if ((SBYTE7(v199) & 0x80u) == 0)
          v53 = BYTE7(v199);
        else
          v53 = *((_QWORD *)&v198 + 1);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)v52, v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)")", 1);
        if (SBYTE7(v199) < 0)
          operator delete((void *)v198);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)" uses the range shape.", 22);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, (const std::string *)&v198);
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E3D596B8;
      }
      goto LABEL_87;
    }
  }
  v47 = v197[0];
LABEL_87:
  v56 = v175;
  v57 = v177;
  if (v47)
  {
    v58 = (char *)v196;
    if ((__int128 *)v196 != (__int128 *)((char *)&v196 + 8))
    {
      v20 = (char *)v196;
      while (1)
      {
        v59 = (char *)*((_QWORD *)v58 + 1);
        v60 = v58;
        if (v59)
        {
          do
          {
            v58 = v59;
            v59 = *(char **)v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            v58 = (char *)*((_QWORD *)v60 + 2);
            v48 = *(_QWORD *)v58 == (_QWORD)v60;
            v60 = v58;
          }
          while (!v48);
        }
        if (v58 == (char *)&v196 + 8)
          break;
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v20 + 7) + 32) - *(_QWORD *)(*((_QWORD *)v20 + 7) + 24)) >> 3) < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v58 + 7) + 32) - *(_QWORD *)(*((_QWORD *)v58 + 7) + 24)) >> 3))
          v20 = v58;
      }
    }
    if (0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v20 + 7) + 32) - *(_QWORD *)(*((_QWORD *)v20 + 7) + 24)) >> 3) >= 0x81)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v186);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)"A model supports up to ", 23);
      std::ostream::operator<<();
      v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)" enumerated shapes, but it configures the input feature ", 56);
      v168 = v20[55];
      if (v168 >= 0)
        v169 = (uint64_t)(v20 + 32);
      else
        v169 = *((_QWORD *)v20 + 4);
      if (v168 >= 0)
        v170 = v20[55];
      else
        v170 = *((_QWORD *)v20 + 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, v169, v170);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)" with ", 6);
      v171 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)" enumerated shapes.", 19);
      v172 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v172, (const std::string *)&v198);
      v172->__vftable = (std::runtime_error_vtbl *)&off_1E3D59668;
    }
    +[MLNeuralNetworkCompiler iOS18CompilerVersionInfo](MLNeuralNetworkCompiler, "iOS18CompilerVersionInfo");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v175, "olderThan:", v61))
    {
      if (v197[0] >= 2uLL)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v186);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)"A model supports up to one input feature with enumerated shapes, ", 65);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)"but it configures these input features to use the enumerated shape flexibility: ", 80);
        writeNames(&v196, &v186);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)".", 1);
        v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v62, (const std::string *)&v198);
        v62->__vftable = (std::runtime_error_vtbl *)&off_1E3D59690;
      }
    }
    else
    {
      v63 = v196;
      v64 = *(_QWORD **)(v196 + 8);
      if (v64)
      {
        do
        {
          v65 = v64;
          v64 = (_QWORD *)*v64;
        }
        while (v64);
      }
      else
      {
        v66 = (_QWORD *)v196;
        do
        {
          v65 = (_QWORD *)v66[2];
          v48 = *v65 == (_QWORD)v66;
          v66 = v65;
        }
        while (!v48);
      }
      if (v65 != (_QWORD *)((char *)&v196 + 8))
      {
        do
        {
          if (*(_QWORD *)(v65[7] + 32) - *(_QWORD *)(v65[7] + 24) != *(_QWORD *)(*(_QWORD *)(v196 + 56) + 32)
                                                                        - *(_QWORD *)(*(_QWORD *)(v196 + 56) + 24))
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v186);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)"A model doesn't allow input features with enumerated flexibility to have unequal number of enumerated shapes, but input feature ", 128);
            v156 = *(char *)(v63 + 55);
            if (v156 >= 0)
              v157 = v63 + 32;
            else
              v157 = *(_QWORD *)(v63 + 32);
            if (v156 >= 0)
              v158 = *(unsigned __int8 *)(v63 + 55);
            else
              v158 = *(_QWORD *)(v63 + 40);
            v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, v157, v158);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)" has ", 5);
            v160 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)" enumerated shapes and input feature ", 37);
            v161 = *((char *)v65 + 55);
            if (v161 >= 0)
              v162 = (uint64_t)(v65 + 4);
            else
              v162 = v65[4];
            if (v161 >= 0)
              v163 = *((unsigned __int8 *)v65 + 55);
            else
              v163 = v65[5];
            v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, v162, v163);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)" has ", 5);
            v165 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)" enumerated shapes.", 19);
            v166 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::stringbuf::str();
            std::runtime_error::runtime_error(v166, (const std::string *)&v198);
            v166->__vftable = (std::runtime_error_vtbl *)&off_1E3D596E0;
          }
          v67 = (_QWORD *)v65[1];
          if (v67)
          {
            do
            {
              v68 = v67;
              v67 = (_QWORD *)*v67;
            }
            while (v67);
          }
          else
          {
            do
            {
              v68 = (_OWORD *)v65[2];
              v48 = *(_QWORD *)v68 == (_QWORD)v65;
              v65 = v68;
            }
            while (!v48);
          }
          v65 = v68;
        }
        while (v68 != (__int128 *)((char *)&v196 + 8));
      }
    }

  }
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v191.__r_.__value_.__l.__size_);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*((char **)&v196 + 1));

  v182 = 0;
  v183 = 0;
  v181 = &v182;
  v69 = v184;
  if (v184 == (uint64_t *)v185)
  {
    v129 = &v182;
    goto LABEL_206;
  }
  if (a6)
    v70 = 5;
  else
    v70 = 4;
  v71.i32[0] = 1;
  v71.i32[1] = v70;
  if (v177)
    v72 = -1;
  else
    v72 = 0;
  v73 = vbsl_s8((int8x8_t)vdup_n_s32(v72), v71, (int8x8_t)0xFFFFFFFF00000001);
  do
  {
    v196 = 0uLL;
    v197[0] = 0;
    v74 = CoreML::NNCompiler::MLShapeInfo::getShape((CoreML::NNCompiler::MLShapeInfo *)(v69 + 7));
    v75 = *(_DWORD *)(v74 + 48);
    if (v75)
      v76 = 0;
    else
      v76 = v74;
    v77 = CoreML::NNCompiler::MLShapeInfo::getShape((CoreML::NNCompiler::MLShapeInfo *)(v69 + 7));
    v78 = *(_DWORD *)(v77 + 48);
    if (v75)
      v79 = v78 == 2;
    else
      v79 = 1;
    if (!v79)
    {
      v179 = 0uLL;
      v180 = 0;
      goto LABEL_164;
    }
    if (v78 == 2)
    {
      memset(&v191, 0, sizeof(v191));
      std::vector<std::vector<long long>>::__init_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>((uint64_t)&v191, *(_QWORD *)(v77 + 24), *(_QWORD *)(v77 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v77 + 32) - *(_QWORD *)(v77 + 24)) >> 3));
    }
    else
    {
      v198 = 0uLL;
      *(_QWORD *)&v199 = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v198, *(const void **)v76, *(_QWORD *)(v76 + 8), (uint64_t)(*(_QWORD *)(v76 + 8) - *(_QWORD *)v76) >> 3);
      memset(&v191, 0, sizeof(v191));
      v192 = &v191;
      v193 = 0;
      v80 = operator new(0x18uLL);
      v191.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
      v191.__r_.__value_.__l.__size_ = (std::string::size_type)v80;
      v191.__r_.__value_.__r.__words[2] = (std::string::size_type)(v80 + 3);
      v194 = v80;
      v195 = v80;
      *(_QWORD *)&v186 = (char *)&v191.__r_.__value_.__l + 16;
      *((_QWORD *)&v186 + 1) = &v194;
      *(_QWORD *)&v187 = &v195;
      BYTE8(v187) = 0;
      v80[1] = 0;
      v80[2] = 0;
      v81 = v198;
      v82 = (uint64_t)(*((_QWORD *)&v198 + 1) - v198) >> 3;
      *v80 = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v80, (const void *)v81, *((uint64_t *)&v81 + 1), v82);
      v195 += 3;
      v83 = (std::string::size_type)v195;
      BYTE8(v187) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::vector<long long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v186);
      v191.__r_.__value_.__l.__size_ = v83;
      if ((_QWORD)v198)
      {
        *((_QWORD *)&v198 + 1) = v198;
        operator delete((void *)v198);
      }
    }
    v85 = v191.__r_.__value_.__l.__size_;
    v84 = (int32x4_t **)v191.__r_.__value_.__r.__words[0];
    v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v191.__r_.__value_.__l.__size_ - v191.__r_.__value_.__r.__words[0]) >> 3);
    v87 = v196;
    if (v86 > (uint64_t)(v197[0] - v196) >> 6)
    {
      if (v86 >> 58)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v88 = *((_QWORD *)&v196 + 1);
      v188 = v197;
      *(_QWORD *)&v186 = std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v86);
      *((_QWORD *)&v186 + 1) = v186 + v88 - v87;
      *(_QWORD *)&v187 = *((_QWORD *)&v186 + 1);
      *((_QWORD *)&v187 + 1) = v186 + (v89 << 6);
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v196, &v186);
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v186);
      v85 = v191.__r_.__value_.__l.__size_;
      v84 = (int32x4_t **)v191.__r_.__value_.__r.__words[0];
    }
    while (v84 != (int32x4_t **)v85)
    {
      if (*((_DWORD *)v69 + 32))
      {
        v90 = (int8x16_t)vrev64q_s32(vuzp1q_s32(**v84, (*v84)[1]));
        v91 = vextq_s8(v90, v90, 8uLL);
        v92 = *((_QWORD *)&v196 + 1);
        if (*((_QWORD *)&v196 + 1) < v197[0])
        {
          **((_OWORD **)&v196 + 1) = v91;
          *(int8x8_t *)(v92 + 16) = v73;
          v93 = v92 + 64;
          *(_OWORD *)(v92 + 24) = 0u;
          *(_OWORD *)(v92 + 40) = 0u;
          *(_QWORD *)(v92 + 56) = 0;
          goto LABEL_161;
        }
        v178 = v91;
        v95 = (uint64_t)(*((_QWORD *)&v196 + 1) - v196) >> 6;
        v96 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 58)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v97 = v197[0] - v196;
        if ((uint64_t)(v197[0] - v196) >> 5 > v96)
          v96 = v97 >> 5;
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFC0)
          v98 = 0x3FFFFFFFFFFFFFFLL;
        else
          v98 = v96;
        v188 = v197;
        v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v98);
        v100 = &v99[64 * v95];
        *(_QWORD *)&v186 = v99;
        *((_QWORD *)&v186 + 1) = v100;
        *((_QWORD *)&v187 + 1) = &v99[64 * v101];
        *(int8x16_t *)v100 = v178;
        *((int8x8_t *)v100 + 2) = v73;
        *(_OWORD *)(v100 + 24) = 0u;
        *(_OWORD *)(v100 + 40) = 0u;
        *((_QWORD *)v100 + 7) = 0;
        *(_QWORD *)&v187 = v100 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v196, &v186);
        v93 = *((_QWORD *)&v196 + 1);
        v102 = &v186;
      }
      else
      {
        v94 = *((_QWORD *)&v196 + 1);
        if (*((_QWORD *)&v196 + 1) < v197[0])
        {
          **((_OWORD **)&v196 + 1) = v186;
          *(_OWORD *)(v94 + 16) = v187;
          *(_QWORD *)(v94 + 32) = v188;
          *(_OWORD *)(v94 + 40) = v189;
          *(_QWORD *)(v94 + 56) = v190;
          v93 = v94 + 64;
          goto LABEL_161;
        }
        v103 = (uint64_t)(*((_QWORD *)&v196 + 1) - v196) >> 6;
        v104 = v103 + 1;
        if ((unint64_t)(v103 + 1) >> 58)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v105 = v197[0] - v196;
        if ((uint64_t)(v197[0] - v196) >> 5 > v104)
          v104 = v105 >> 5;
        if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFC0)
          v106 = 0x3FFFFFFFFFFFFFFLL;
        else
          v106 = v104;
        v200 = v197;
        v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v106);
        v108 = &v107[64 * v103];
        *(_QWORD *)&v198 = v107;
        *((_QWORD *)&v198 + 1) = v108;
        *((_QWORD *)&v199 + 1) = &v107[64 * v109];
        *(_OWORD *)v108 = v186;
        *((_OWORD *)v108 + 1) = v187;
        *((_QWORD *)v108 + 4) = v188;
        *(_OWORD *)(v108 + 40) = v189;
        *((_QWORD *)v108 + 7) = v190;
        *(_QWORD *)&v199 = v108 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v196, &v198);
        v93 = *((_QWORD *)&v196 + 1);
        v102 = &v198;
      }
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v102);
LABEL_161:
      *((_QWORD *)&v196 + 1) = v93;
      v84 += 3;
    }
    v179 = v196;
    v180 = v197[0];
    v197[0] = 0;
    v196 = 0uLL;
    *(_QWORD *)&v186 = &v191;
    std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
LABEL_164:
    *(_QWORD *)&v186 = &v196;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
    v110 = *((_DWORD *)v69 + 32);
    if (v110)
    {
      if (v110 != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v111 = *((_DWORD *)v69 + 30);
      v112 = v175;
      +[MLNeuralNetworkCompiler iOS17CompilerVersionInfo](MLNeuralNetworkCompiler, "iOS17CompilerVersionInfo");
      v113 = (void *)objc_claimAutoreleasedReturnValue();
      v114 = objc_msgSend(v112, "olderThan:", v113) ^ 1;
      if (v111 != 40)
        LOBYTE(v114) = 1;
      if ((v114 & 1) == 0)
      {
        v116 = *((_QWORD *)&v179 + 1);
        for (i = v179; i != v116; i += 64)
          *(_DWORD *)(i + 8) = 3;
      }

    }
    v117 = v182;
    v118 = &v182;
    v119 = &v182;
    if (v182)
    {
      while (1)
      {
        while (1)
        {
          v118 = (uint64_t **)v117;
          v120 = v117 + 4;
          if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v69 + 4, v117 + 4))
            break;
          v117 = *v118;
          v119 = v118;
          if (!*v118)
            goto LABEL_179;
        }
        if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v120, v69 + 4))
          break;
        v119 = v118 + 1;
        v117 = v118[1];
        if (!v117)
          goto LABEL_179;
      }
      v121 = v118;
    }
    else
    {
LABEL_179:
      v121 = operator new(0x50uLL);
      *(_QWORD *)&v186 = v121;
      *((_QWORD *)&v186 + 1) = &v182;
      LOBYTE(v187) = 0;
      v122 = (std::string *)(v121 + 4);
      if (*((char *)v69 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v122, (const std::string::value_type *)v69[4], v69[5]);
      }
      else
      {
        v123 = *((_OWORD *)v69 + 2);
        v121[6] = v69[6];
        *(_OWORD *)&v122->__r_.__value_.__l.__data_ = v123;
      }
      v121[8] = 0;
      v121[9] = 0;
      v121[7] = 0;
      LOBYTE(v187) = 1;
      *v121 = 0;
      v121[1] = 0;
      v121[2] = v118;
      *v119 = v121;
      v124 = v121;
      if (*v181)
      {
        v181 = (uint64_t **)*v181;
        v124 = *v119;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v182, v124);
      ++v183;
      *(_QWORD *)&v186 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v186);
    }
    v57 = v177;
    v125 = (void **)(v121 + 7);
    if (v121[7])
    {
      std::vector<Espresso::layer_shape>::__clear[abi:ne180100](v121 + 7);
      operator delete(*v125);
      *v125 = 0;
      v121[8] = 0;
      v121[9] = 0;
    }
    *(_OWORD *)(v121 + 7) = v179;
    v121[9] = v180;
    v180 = 0;
    v179 = 0uLL;
    *(_QWORD *)&v186 = &v179;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
    v126 = (uint64_t *)v69[1];
    if (v126)
    {
      do
      {
        v127 = v126;
        v126 = (uint64_t *)*v126;
      }
      while (v126);
    }
    else
    {
      do
      {
        v127 = (uint64_t *)v69[2];
        v48 = *v127 == (_QWORD)v69;
        v69 = v127;
      }
      while (!v48);
    }
    v69 = v127;
  }
  while (v127 != (uint64_t *)v185);
  v128 = v181;
  v129 = &v182;
  if (v181 != &v182)
  {
    v129 = v181;
    while (1)
    {
      v130 = v128[1];
      v131 = v128;
      if (v130)
      {
        do
        {
          v128 = (uint64_t **)v130;
          v130 = (uint64_t *)*v130;
        }
        while (v130);
      }
      else
      {
        do
        {
          v128 = (uint64_t **)v131[2];
          v48 = *v128 == (uint64_t *)v131;
          v131 = v128;
        }
        while (!v48);
      }
      if (v128 == &v182)
        break;
      if ((char *)v129[8] - (char *)v129[7] < (unint64_t)((char *)v128[8] - (char *)v128[7]))
        v129 = v128;
    }
  }
LABEL_206:
  v133 = v129[7];
  v132 = v129[8];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if ((char *)v132 - (char *)v133 != 64)
  {
    v198 = 0u;
    v199 = 0u;
    LODWORD(v200) = 1065353216;
    if (v132 != v133)
    {
      v134 = 0;
      if ((unint64_t)(((char *)v132 - (char *)v133) >> 6) <= 1)
        v135 = 1;
      else
        v135 = ((char *)v132 - (char *)v133) >> 6;
      do
      {
        v186 = 0uLL;
        v188 = 0;
        *(_QWORD *)&v189 = 0;
        *(_QWORD *)&v187 = 0;
        *((_QWORD *)&v187 + 1) = &v188;
        v136 = v181;
        if (v181 != &v182)
        {
          do
          {
            if (v136[7] != v136[8])
            {
              *(_QWORD *)&v196 = v136 + 4;
              v137 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v198, (unsigned __int8 *)v136 + 32, (__int128 **)&v196)+ 5);
              v139 = v136[7];
              v138 = v136[8];
              *(_QWORD *)&v196 = v136 + 4;
              v140 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v198, (unsigned __int8 *)v136 + 32, (__int128 **)&v196);
              v141 = (((char *)v138 - (char *)v139) >> 6) - 1;
              if (v141 >= v137 + 1)
                v141 = v137 + 1;
              *((_QWORD *)v140 + 5) = v141;
              v142 = v136[7];
              *(_QWORD *)&v196 = v136 + 4;
              v143 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v187 + 1, v136 + 4, (__int128 **)&v196);
              v144 = &v142[8 * v137];
              v145 = *(_OWORD *)v144;
              v146 = *((_OWORD *)v144 + 1);
              *((_QWORD *)v143 + 11) = v144[4];
              *(_OWORD *)(v143 + 72) = v146;
              *(_OWORD *)(v143 + 56) = v145;
              if (v143 + 56 != (char *)v144)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v143 + 96, (char *)v144[5], v144[6], (v144[6] - v144[5]) >> 2);
            }
            v147 = v136[1];
            if (v147)
            {
              do
              {
                v148 = (uint64_t **)v147;
                v147 = (uint64_t *)*v147;
              }
              while (v147);
            }
            else
            {
              do
              {
                v148 = (uint64_t **)v136[2];
                v48 = *v148 == (uint64_t *)v136;
                v136 = v148;
              }
              while (!v48);
            }
            v136 = v148;
          }
          while (v148 != &v182);
        }
        if (&v186 != (__int128 *)a4)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v186, *(std::string **)a4, *(__int128 **)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3));
        CoreML::MLNeuralNetworkUtilities::hashConfigShapesToConfigurationName(&v191, (const Espresso::net_configuration *)&v186);
        v149 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v179, &v191);
        if (!*v149)
        {
          v150 = v149;
          v151 = (char *)operator new(0x68uLL);
          *((_QWORD *)&v196 + 1) = a1 + 8;
          *(std::string *)(v151 + 32) = v191;
          memset(&v191, 0, sizeof(v191));
          *(_OWORD *)(v151 + 56) = v186;
          v186 = 0uLL;
          v152 = v187;
          *(_QWORD *)&v187 = 0;
          *(_OWORD *)(v151 + 72) = v152;
          v153 = v188;
          v154 = v189;
          *((_QWORD *)v151 + 11) = v188;
          *((_QWORD *)v151 + 12) = v154;
          v155 = v151 + 88;
          if (v154)
          {
            v153[2] = v155;
            *((_QWORD *)&v187 + 1) = &v188;
            v188 = 0;
            *(_QWORD *)&v189 = 0;
          }
          else
          {
            *((_QWORD *)v151 + 10) = v155;
          }
          LOBYTE(v197[0]) = 1;
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, v179, v150, (uint64_t *)v151);
          *(_QWORD *)&v196 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100]((uint64_t)&v196);
        }
        if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v191.__r_.__value_.__l.__data_);
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v188);
        *(_QWORD *)&v196 = &v186;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
        ++v134;
      }
      while (v134 != v135);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v198);
  }
  std::__tree<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::layer_shape>>>>::destroy(v182);
  v11 = v173;
LABEL_235:
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(v185[0]);

}

void sub_19C81E80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_QWORD *a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p)
{
  int v34;
  void *v35;
  uint64_t v36;

  if (*(char *)(v36 - 137) < 0)
  {
    operator delete(*(void **)(v36 - 160));
    if ((v34 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a29);
      std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(v36 - 240));
      std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(v36 - 184));

      std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v35);
  goto LABEL_6;
}

uint64_t std::map<std::string,CoreML::NNCompiler::MLShapeInfo>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,CoreML::NNCompiler::MLShapeInfo> const&>((uint64_t **)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_19C81EB80(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_19C81EC58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AD61C4](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD61C4](a1 + 112);
  return a1;
}

_QWORD *writeNames(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
  v6 = (_QWORD *)*a1;
  v4 = a1 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      v7 = *((char *)v5 + 55);
      if (v7 >= 0)
        v8 = (uint64_t)(v5 + 4);
      else
        v8 = v5[4];
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)v5 + 55);
      else
        v9 = v5[5];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v8, v9);
      v10 = (_QWORD *)v5[1];
      v11 = v10;
      v12 = v5;
      if (v10)
      {
        do
        {
          v13 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v12[2];
          v14 = *v13 == (_QWORD)v12;
          v12 = v13;
        }
        while (!v14);
      }
      if (v13 != v4)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ", 2);
        v10 = (_QWORD *)v5[1];
      }
      if (v10)
      {
        do
        {
          v15 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v5[2];
          v14 = *v15 == (_QWORD)v5;
          v5 = v15;
        }
        while (!v14);
      }
      v5 = v15;
    }
    while (v15 != v4);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
}

uint64_t `anonymous namespace'::CreateLayerShapeFromMultiArrayShape(uint64_t result, int32x4_t **a2, int a3, int a4)
{
  int32x4_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x4_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int8x16_t v22;
  std::runtime_error *exception;
  char *v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *p_p;
  std::string::size_type size;
  std::string *v33;
  __int128 v34;
  std::runtime_error *v35;
  std::string __p;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;

  *(_QWORD *)(result + 56) = 0;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)result = xmmword_19CB39920;
  *(_QWORD *)(result + 16) = 0xFFFFFFFF00000001;
  if (a3)
  {
    v5 = *a2;
    v6 = (char *)a2[1] - (char *)*a2;
    v7 = v6 >> 3;
    if ((int)(v6 >> 3) <= 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v40, "Input rank is less than 1");
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &v40);
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E3D59640;
    }
    v8 = 0;
    v9 = 1;
    *(_QWORD *)&v10 = 0x100000001;
    *((_QWORD *)&v10 + 1) = 0x100000001;
    *(_OWORD *)result = v10;
    *(_DWORD *)(result + 16) = 1;
    *(_DWORD *)(result + 20) = v7;
    v11 = (v7 - 1);
    v12 = (v7 - 2);
    v13 = (v7 - 3);
    v14 = (v7 - 4);
    v15 = (uint64_t)((v6 << 29) - 0x500000000) >> 32;
    do
    {
      if (!v8)
        *(_DWORD *)result = v5->i64[v11];
      if (!(v11 - v12 + v8))
        *(_DWORD *)(result + 4) = v5->i64[v12];
      if (!(v11 - v13 + v8))
        *(_DWORD *)(result + 8) = v5->i64[v13];
      if (!(v11 - v14 + v8))
        *(_DWORD *)(result + 12) = v5->i64[v14];
      if (v11 + v8 <= v15)
      {
        v9 *= v5->i64[v11 + v8];
        *(_DWORD *)(result + 16) = v9;
      }
      --v8;
    }
    while (v11 + v8 + 1 > 0);
  }
  else
  {
    *(_QWORD *)(result + 12) = 0x100000001;
    v16 = *a2;
    v17 = (char *)a2[1] - (char *)*a2;
    if (v17 >> 3 == 3)
    {
      v20 = v16->i64[0];
      *(_DWORD *)(result + 4) = v16->i64[1];
      *(_DWORD *)(result + 8) = v20;
      v19 = v16[1].i32[0];
    }
    else if (v17 >> 3 == 1)
    {
      v18 = v16->i64[0];
      v19 = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_DWORD *)(result + 8) = v18;
    }
    else
    {
      if (v17 != 40 || a4 == 0)
      {
        if (a4)
          v24 = ", 5";
        else
          v24 = (char *)&unk_19CB39696;
        std::string::basic_string[abi:ne180100]<0>(&v38, v24);
        v25 = std::string::insert(&v38, 0, "(1, 3");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v27 = std::string::append(&v39, ")");
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v40.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        std::operator+<char>();
        v29 = std::string::append(&v37, " but got: ");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&__p, ((char *)a2[1] - (char *)*a2) >> 3);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v33 = std::string::append(&v38, (const std::string::value_type *)p_p, size);
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v35, &v39);
        v35->__vftable = (std::runtime_error_vtbl *)&off_1E3D59640;
      }
      v22 = (int8x16_t)vrev64q_s32(vuzp1q_s32(*v16, v16[1]));
      *(int8x16_t *)(result + 4) = vextq_s8(v22, v22, 8uLL);
      v19 = v16[2].i32[0];
    }
    *(_DWORD *)result = v19;
  }
  return result;
}

void sub_19C81F180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  _Unwind_Resume(exception_object);
}

void std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Espresso::layer_shape>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

char *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  __int128 *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = (std::string *)(v13 + 16);
  v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  *((_QWORD *)v13 + 5) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v13 = *v25;
LABEL_41:
    *v25 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_19C81F4D0(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x78uLL);
    v9[0] = v6;
    v9[1] = a1 + 1;
    v10 = 0;
    std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a3);
    v10 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  }
  return v6;
}

void sub_19C81F594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CoreML::MLNeuralNetworkUtilities::hashConfigShapesToConfigurationName(std::string *this, const Espresso::net_configuration *a2)
{
  _QWORD *v3;
  char *v4;
  char *v5;
  int *v6;
  void **v7;
  char *v8;
  void *v9;
  uint64_t **v10;
  std::string *v11;
  char *v12;
  BOOL v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t *v17;
  _QWORD *v18[2];
  std::string v19;
  void *v20;
  void *v21;
  uint64_t v22;
  std::string __p[2];
  std::string v24;
  uint64_t v25;
  uint64_t v26;

  v18[0] = 0;
  v18[1] = 0;
  v17 = (uint64_t *)v18;
  v3 = (_QWORD *)*((_QWORD *)a2 + 3);
  v4 = (char *)a2 + 32;
  if (v3 != (_QWORD *)((char *)a2 + 32))
  {
    v5 = (char *)v18;
    do
    {
      if (*((char *)v3 + 55) < 0)
        std::string::__init_copy_ctor_external(&v19, (const std::string::value_type *)v3[4], v3[5]);
      else
        v19 = *(std::string *)(v3 + 4);
      v6 = (int *)v24.__r_.__value_.__r.__words[2];
      __p[0] = v19;
      memset(&v19, 0, sizeof(v19));
      v16 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
      __p[1] = v24;
      v21 = 0;
      v22 = 0;
      v20 = 0;
      v7 = (void **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_equal<std::string>(&v17, v5, &v26, &v25, __p);
      v8 = (char *)*v7;
      if (*v7)
      {
        v9 = (void *)v16;
      }
      else
      {
        v10 = (uint64_t **)v7;
        v8 = (char *)operator new(0x50uLL);
        v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
        v24.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
        v24.__r_.__value_.__s.__data_[16] = 0;
        v11 = (std::string *)(v8 + 32);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v11, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
          *((_QWORD *)v8 + 6) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
        }
        *(_OWORD *)(v8 + 56) = v16;
        *((_QWORD *)v8 + 9) = v6;
        memset(&__p[1], 0, sizeof(std::string));
        v24.__r_.__value_.__s.__data_[16] = 1;
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(&v17, v26, v10, (uint64_t *)v8);
        v24.__r_.__value_.__r.__words[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v24);
        v9 = 0;
      }
      v12 = (char *)*((_QWORD *)v8 + 1);
      if (v12)
      {
        do
        {
          v5 = v12;
          v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v8 + 2);
          v13 = *(_QWORD *)v5 == (_QWORD)v8;
          v8 = v5;
        }
        while (!v13);
      }
      if (v9)
        operator delete(v9);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (v20)
      {
        v21 = v20;
        operator delete(v20);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      v14 = (char *)v3[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(char **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (char *)v3[2];
          v13 = *(_QWORD *)v15 == (_QWORD)v3;
          v3 = v15;
        }
        while (!v13);
      }
      v3 = v15;
    }
    while (v15 != v4);
  }
  CoreML::MLNeuralNetworkUtilities::hashVectorShapesToConfigurationName(this, &v17);
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(v18[0]);
}

void sub_19C81F7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(a13);
  _Unwind_Resume(a1);
}

void Espresso::net_configuration::~net_configuration(Espresso::net_configuration *this)
{
  void **v2;

  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*((_QWORD **)this + 4));
  v2 = (void **)this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__tree<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::layer_shape>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::layer_shape>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::layer_shape>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::layer_shape>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::layer_shape>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void `anonymous namespace'::ToVector<int,int>(std::vector<int> *a1, int *a2)
{
  int v4;
  int *value;
  std::vector<int>::pointer end;
  std::vector<int>::pointer v7;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  std::vector<int>::pointer v16;
  std::vector<int>::pointer v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  std::vector<int>::pointer v25;
  std::vector<int>::pointer v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  int v33;
  int *v34;
  std::vector<int>::pointer v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  int v42;
  int *v43;
  std::vector<int>::pointer v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int *v49;
  int v50;

  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  std::vector<int>::reserve(a1, 5uLL);
  v4 = a2[4];
  end = a1->__end_;
  value = a1->__end_cap_.__value_;
  if (end >= value)
  {
    begin = a1->__begin_;
    v9 = end - a1->__begin_;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    if (((char *)value - (char *)begin) >> 1 > v10)
      v10 = ((char *)value - (char *)begin) >> 1;
    if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v11);
    else
      v12 = 0;
    v13 = (int *)(v11 + 4 * v9);
    value = (int *)(v11 + 4 * v12);
    *v13 = v4;
    v7 = v13 + 1;
    while (end != begin)
    {
      v14 = *--end;
      *--v13 = v14;
    }
    a1->__begin_ = v13;
    a1->__end_ = v7;
    a1->__end_cap_.__value_ = value;
    if (begin)
      operator delete(begin);
  }
  else
  {
    *end = v4;
    v7 = end + 1;
  }
  a1->__end_ = v7;
  v15 = a2[3];
  if (v7 >= value)
  {
    v17 = a1->__begin_;
    v18 = v7 - a1->__begin_;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    if (((char *)value - (char *)v17) >> 1 > v19)
      v19 = ((char *)value - (char *)v17) >> 1;
    if ((unint64_t)((char *)value - (char *)v17) >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
      v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v20);
    else
      v21 = 0;
    v22 = (int *)(v20 + 4 * v18);
    value = (int *)(v20 + 4 * v21);
    *v22 = v15;
    v16 = v22 + 1;
    while (v7 != v17)
    {
      v23 = *--v7;
      *--v22 = v23;
    }
    a1->__begin_ = v22;
    a1->__end_ = v16;
    a1->__end_cap_.__value_ = value;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v15;
    v16 = v7 + 1;
  }
  a1->__end_ = v16;
  v24 = a2[2];
  if (v16 >= value)
  {
    v26 = a1->__begin_;
    v27 = v16 - a1->__begin_;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    if (((char *)value - (char *)v26) >> 1 > v28)
      v28 = ((char *)value - (char *)v26) >> 1;
    if ((unint64_t)((char *)value - (char *)v26) >= 0x7FFFFFFFFFFFFFFCLL)
      v29 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
      v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v29);
    else
      v30 = 0;
    v31 = (int *)(v29 + 4 * v27);
    value = (int *)(v29 + 4 * v30);
    *v31 = v24;
    v25 = v31 + 1;
    while (v16 != v26)
    {
      v32 = *--v16;
      *--v31 = v32;
    }
    a1->__begin_ = v31;
    a1->__end_ = v25;
    a1->__end_cap_.__value_ = value;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v16 = v24;
    v25 = v16 + 1;
  }
  a1->__end_ = v25;
  v33 = a2[1];
  if (v25 >= value)
  {
    v35 = a1->__begin_;
    v36 = v25 - a1->__begin_;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    if (((char *)value - (char *)v35) >> 1 > v37)
      v37 = ((char *)value - (char *)v35) >> 1;
    if ((unint64_t)((char *)value - (char *)v35) >= 0x7FFFFFFFFFFFFFFCLL)
      v38 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v38 = v37;
    if (v38)
      v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v38);
    else
      v39 = 0;
    v40 = (int *)(v38 + 4 * v36);
    value = (int *)(v38 + 4 * v39);
    *v40 = v33;
    v34 = v40 + 1;
    while (v25 != v35)
    {
      v41 = *--v25;
      *--v40 = v41;
    }
    a1->__begin_ = v40;
    a1->__end_ = v34;
    a1->__end_cap_.__value_ = value;
    if (v35)
      operator delete(v35);
  }
  else
  {
    *v25 = v33;
    v34 = v25 + 1;
  }
  a1->__end_ = v34;
  v42 = *a2;
  if (v34 >= value)
  {
    v44 = a1->__begin_;
    v45 = v34 - a1->__begin_;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    if (((char *)value - (char *)v44) >> 1 > v46)
      v46 = ((char *)value - (char *)v44) >> 1;
    if ((unint64_t)((char *)value - (char *)v44) >= 0x7FFFFFFFFFFFFFFCLL)
      v47 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v47 = v46;
    if (v47)
      v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v47);
    else
      v48 = 0;
    v49 = (int *)(v47 + 4 * v45);
    *v49 = v42;
    v43 = v49 + 1;
    while (v34 != v44)
    {
      v50 = *--v34;
      *--v49 = v50;
    }
    a1->__begin_ = v49;
    a1->__end_ = v43;
    a1->__end_cap_.__value_ = (int *)(v47 + 4 * v48);
    if (v44)
      operator delete(v44);
  }
  else
  {
    *v34 = v42;
    v43 = v34 + 1;
  }
  a1->__end_ = v43;
}

void sub_19C81FC88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C81FCB4()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x19C81FCACLL);
  JUMPOUT(0x19C81FCA0);
}

uint64_t std::pair<std::string const,std::vector<int>>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void CoreML::MLNeuralNetworkUtilities::hashVectorShapesToConfigurationName(std::string *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  void **v8;
  const void *v9;
  void **v10;
  std::string::size_type v11;
  int *v12;
  int *v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  std::string v21;
  void *__p[2];
  int64_t v23;

  std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19CB39696);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      if (*((char *)v5 + 55) >= 0)
        v7 = *((unsigned __int8 *)v5 + 55);
      else
        v7 = v5[5];
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v7 + 1);
      if (v23 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if (v7)
      {
        if (*((char *)v5 + 55) >= 0)
          v9 = v5 + 4;
        else
          v9 = (const void *)v5[4];
        memmove(v8, v9, v7);
      }
      *(_WORD *)((char *)v8 + v7) = 95;
      if (v23 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      if (v23 >= 0)
        v11 = HIBYTE(v23);
      else
        v11 = (std::string::size_type)__p[1];
      std::string::append(a1, (const std::string::value_type *)v10, v11);
      if (SHIBYTE(v23) < 0)
        operator delete(__p[0]);
      v12 = (int *)v5[7];
      v13 = (int *)v5[8];
      while (v12 != v13)
      {
        std::to_string(&v21, *v12);
        v14 = std::string::append(&v21, "_");
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v23 = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        if (v23 >= 0)
          v16 = __p;
        else
          v16 = (void **)__p[0];
        if (v23 >= 0)
          v17 = HIBYTE(v23);
        else
          v17 = (std::string::size_type)__p[1];
        std::string::append(a1, (const std::string::value_type *)v16, v17);
        if (SHIBYTE(v23) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
        ++v12;
      }
      v18 = (_QWORD *)v5[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v5[2];
          v20 = *v19 == (_QWORD)v5;
          v5 = v19;
        }
        while (!v20);
      }
      v5 = v19;
    }
    while (v19 != v4);
  }
}

void sub_19C81FEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  int64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  int *v7;
  std::vector<int>::pointer begin;
  int *end;
  int *v10;
  int v11;

  if (__n > this->__end_cap_.__value_ - this->__begin_)
  {
    if (__n >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v3 = (char *)this->__end_ - (char *)this->__begin_;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(__n);
    v5 = (int *)&v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    v7 = (int *)&v4[4 * v6];
    begin = this->__begin_;
    end = this->__end_;
    v10 = v5;
    if (end != this->__begin_)
    {
      v10 = v5;
      do
      {
        v11 = *--end;
        *--v10 = v11;
      }
      while (end != begin);
    }
    this->__begin_ = v10;
    this->__end_ = v5;
    this->__end_cap_.__value_ = v7;
    if (begin)
      operator delete(begin);
  }
}

std::string *std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[3].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = xmmword_19CB39920;
  this[1].__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
  return this;
}

void std::vector<Espresso::layer_shape>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 64)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::layer_shape>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(unint64_t a1)
{
  if (a1 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a1 << 6);
}

uint64_t *std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 64;
      v6 = *(_OWORD *)(v3 - 48);
      v7 = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(_OWORD *)(v4 - 48) = v6;
      *(_QWORD *)(v4 - 32) = v7;
      *(_QWORD *)(v4 - 24) = 0;
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v4 -= 64;
      v3 -= 64;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<Espresso::layer_shape>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 64;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void CoreML::MLNeuralNetworkUtilities::InvalidInputShapeException::~InvalidInputShapeException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1A1AD6260);
}

void CoreML::MLNeuralNetworkUtilities::AsymmetricalEnumeratedShapesException::~AsymmetricalEnumeratedShapesException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1A1AD6260);
}

void CoreML::MLNeuralNetworkUtilities::MultipleEnumeratedInputsException::~MultipleEnumeratedInputsException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1A1AD6260);
}

void CoreML::MLNeuralNetworkUtilities::MaximumEnumeratedShapesException::~MaximumEnumeratedShapesException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1A1AD6260);
}

void CoreML::MLNeuralNetworkUtilities::EnumeratedWithRangeInputsException::~EnumeratedWithRangeInputsException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1A1AD6260);
}

uint64_t *std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,CoreML::NNCompiler::MLShapeInfo> const&>(uint64_t **a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  char *v18;
  _QWORD v20[2];
  char v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a2;
  v8 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2
    && !google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, a2 + 4))
  {
    if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6 + 4, a3))
    {
      v22 = v6;
      v23 = v6;
      v14 = &v22;
      if (v6)
        return v6;
      goto LABEL_31;
    }
    v12 = v6[1];
    if (v12)
    {
      v13 = (uint64_t *)v6[1];
      do
      {
        v14 = (uint64_t **)v13;
        v13 = (uint64_t *)*v13;
      }
      while (v13);
    }
    else
    {
      v17 = v6;
      do
      {
        v14 = (uint64_t **)v17[2];
        v16 = *v14 == v17;
        v17 = (uint64_t *)v14;
      }
      while (!v16);
    }
    if (v14 == v8 || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, v14 + 4))
    {
      if (v12)
      {
        v23 = (uint64_t *)v14;
      }
      else
      {
        v23 = v6;
        v14 = (uint64_t **)(v6 + 1);
      }
LABEL_30:
      v6 = *v14;
      if (*v14)
        return v6;
      goto LABEL_31;
    }
LABEL_29:
    v14 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v23, a3);
    goto LABEL_30;
  }
  v9 = *v6;
  if (*a1 == v6)
  {
    v11 = v6;
    goto LABEL_17;
  }
  if (v9)
  {
    v10 = (uint64_t *)*v6;
    do
    {
      v11 = v10;
      v10 = (uint64_t *)v10[1];
    }
    while (v10);
  }
  else
  {
    v15 = v6;
    do
    {
      v11 = (uint64_t *)v15[2];
      v16 = *v11 == (_QWORD)v15;
      v15 = v11;
    }
    while (v16);
  }
  if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v11 + 4, a3))
    goto LABEL_29;
LABEL_17:
  if (v9)
  {
    v23 = v11;
    v14 = (uint64_t **)(v11 + 1);
    goto LABEL_30;
  }
  v23 = v6;
  v14 = (uint64_t **)v6;
LABEL_31:
  v18 = (char *)operator new(0x88uLL);
  v6 = (uint64_t *)v18;
  v20[0] = v18;
  v20[1] = v8;
  v21 = 0;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v18 + 32), *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *((_OWORD *)v18 + 2) = *(_OWORD *)a4;
    *((_QWORD *)v18 + 6) = *(_QWORD *)(a4 + 16);
  }
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v6 + 8), a4 + 32);
  v21 = 1;
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v23, v14, v6);
  v20[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v20);
  return v6;
}

void sub_19C8204C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x88uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    CoreML::NNCompiler::MLShapeInfo::MLShapeInfo((CoreML::NNCompiler::MLShapeInfo *)((char *)v6 + 56));
    v12 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void CoreML::numericVectorFromObjC<long long>(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  std::vector<long long>::reserve((void **)a1, objc_msgSend(v3, "count"));
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v23 != v6)
          objc_enumerationMutation(v4);
        v8 = *(id *)(*((_QWORD *)&v22 + 1) + 8 * i);
        v9 = objc_msgSend(v8, "longLongValue");
        v10 = v9;
        v12 = *(uint64_t **)(a1 + 8);
        v11 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v12 >= v11)
        {
          v14 = *(uint64_t **)a1;
          v15 = ((uint64_t)v12 - *(_QWORD *)a1) >> 3;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          v17 = v11 - (_QWORD)v14;
          if (v17 >> 2 > v16)
            v16 = v17 >> 2;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v18);
          else
            v19 = 0;
          v20 = (uint64_t *)(v18 + 8 * v15);
          *v20 = v10;
          v13 = v20 + 1;
          while (v12 != v14)
          {
            v21 = *--v12;
            *--v20 = v21;
          }
          *(_QWORD *)a1 = v20;
          *(_QWORD *)(a1 + 8) = v13;
          *(_QWORD *)(a1 + 16) = v18 + 8 * v19;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v12 = v9;
          v13 = v12 + 1;
        }
        *(_QWORD *)(a1 + 8) = v13;

      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v5);
  }

}

void sub_19C82077C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  void *v11;
  void *v13;

  v13 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

void `anonymous namespace'::MultiArrayShapeInfoFromStateConstraint(_anonymous_namespace_ *this, MLStateConstraint *a2)
{
  MLStateConstraint *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a2;
  -[MLStateConstraint bufferShape](v3, "bufferShape");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  CoreML::numericVectorFromObjC<long long>((uint64_t)&v9, v4);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v5 = v9;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v13, v9, v10, (v10 - (uint64_t)v9) >> 3);
  if (v5)
    operator delete(v5);

  v9 = 0;
  v10 = 0;
  v11 = 0;
  v6 = v13;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v9, v13, v14, (v14 - (uint64_t)v13) >> 3);
  v12 = 0;
  v7 = -[MLStateConstraint dataType](v3, "dataType");
  v8 = 65552;
  if (v7 != 65552)
  {
    if (v7 == 131104)
    {
      v8 = 131104;
    }
    else if (v7 == 65568)
    {
      v8 = 65568;
    }
    else
    {
      v8 = 65600;
    }
  }
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)this, (uint64_t)&v9);
  *((_DWORD *)this + 14) = v8;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v9);
  if (v6)
    operator delete(v6);

}

void sub_19C8208E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  if (v2)
    operator delete(v2);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__4849(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  __n128 result;

  v2 = *(_OWORD *)(a2 + 64);
  v3 = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 80) = v3;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  return result;
}

void __Block_byref_object_dispose__4850(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
}

void ___ZN6CoreML24MLNeuralNetworkUtilities28extractFeatureProviderShapesEPU28objcproto17MLFeatureProvider11objc_objectbP13MLVersionInfo_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  __int128 v4;
  void *v5;
  id v6;
  void *__p[3];
  _OWORD v8[2];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  objc_msgSend(a2, "shape");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  CoreML::numericVectorFromObjC<long long>((uint64_t)__p, v6);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = v8[1];
  *(_OWORD *)(v3 + 48) = v8[0];
  *(_OWORD *)(v3 + 64) = v4;
  *(_QWORD *)(v3 + 80) = v9;
  v5 = *(void **)(v3 + 88);
  if (v5)
  {
    *(_QWORD *)(v3 + 96) = v5;
    operator delete(v5);
    *(_QWORD *)(v3 + 88) = 0;
    *(_QWORD *)(v3 + 96) = 0;
    *(_QWORD *)(v3 + 104) = 0;
  }
  *(_OWORD *)(v3 + 88) = v10;
  *(_QWORD *)(v3 + 104) = v11;
  if (__p[0])
    operator delete(__p[0]);

}

void sub_19C820A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 9) = 0;
    *((_QWORD *)v6 + 7) = 0;
    v12 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void CoreML::MLNeuralNetworkUtilities::hashFeatureProviderToConfigurationName(std::string *a1, void *a2, int a3, void *a4)
{
  id v5;
  void *v6;
  int v7;
  uint64_t i;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  int8x16_t *v15;
  int8x16_t v16;
  void *v17;
  __CVBuffer *v18;
  OSType PixelFormatType;
  size_t Width;
  size_t Height;
  id v22;
  void *v23;
  id v24;
  uint64_t v26;
  int32x4_t *v27;
  int8x16_t *v28;
  int8x16_t v29;
  void *v30;
  uint64_t *v31;
  _QWORD *v32;
  void *v33;
  void *exception;
  std::string *v35;
  int v36;
  id v38;
  id obj;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43[2];
  _QWORD v44[5];
  void *__p[2];
  char v46;
  int8x16_t v47;
  int8x16_t v48;
  uint64_t v49;
  int8x16_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t *v53;
  uint64_t v54;
  __n128 (*v55)(uint64_t, uint64_t);
  void (*v56)(uint64_t);
  const char *v57;
  __int128 v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void **v67;
  _BYTE v68[128];
  uint64_t v69;

  v35 = a1;
  v69 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v38 = a4;
  v43[0] = 0;
  v43[1] = 0;
  v42 = (uint64_t *)v43;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  objc_msgSend(v5, "featureNames");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  obj = v6;
  v41 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v63, v68, 16);
  if (v41)
  {
    v40 = *(_QWORD *)v64;
    if (a3)
      v7 = 4;
    else
      v7 = -1;
    v36 = v7;
    do
    {
      for (i = 0; i != v41; ++i)
      {
        if (*(_QWORD *)v64 != v40)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * i);
        objc_msgSend(v5, "featureValueForName:", v9, v35);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v52 = 0;
        v53 = (int8x16_t *)&v52;
        v54 = 0x7012000000;
        v55 = __Block_byref_object_copy__4849;
        v56 = __Block_byref_object_dispose__4850;
        v57 = "";
        v60 = 0u;
        v61 = 0u;
        v62 = 0;
        v58 = xmmword_19CB39920;
        v59 = 0xFFFFFFFF00000001;
        v11 = objc_msgSend(v10, "type");
        switch(v11)
        {
          case 4:
            v18 = (__CVBuffer *)objc_msgSend(v10, "imageBufferValue");
            PixelFormatType = CVPixelBufferGetPixelFormatType(v18);
            Width = CVPixelBufferGetWidth(v18);
            Height = CVPixelBufferGetHeight(v18);
            v22 = v38;
            +[MLNeuralNetworkCompiler iOS17CompilerVersionInfo](MLNeuralNetworkCompiler, "iOS17CompilerVersionInfo");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            v24 = v5;
            if (PixelFormatType == 1278226536 || PixelFormatType == 1278226488)
              v26 = 1;
            else
              v26 = 3;
            if (PixelFormatType == 1278226536)
            {
              if (objc_msgSend(v22, "olderThan:", v23))
                v26 = 3;
              else
                v26 = 1;
            }
            v27 = (int32x4_t *)operator new(0x20uLL);
            v27->i64[0] = 1;
            v27->i64[1] = v26;
            v27[1].i64[0] = Height;
            v27[1].i64[1] = Width;

            v5 = v24;
            v28 = v53;
            v29 = (int8x16_t)vrev64q_s32(vuzp1q_s32(*v27, v27[1]));
            v53[3] = vextq_s8(v29, v29, 8uLL);
            v28[4].i32[0] = 1;
            v28[4].i32[1] = v36;
            v28[4].i64[1] = 0;
            v28[5].i64[0] = 0;
            v31 = &v28[5].i64[1];
            v30 = (void *)v28[5].i64[1];
            if (v30)
            {
              v28[6].i64[0] = (uint64_t)v30;
              operator delete(v30);
            }
            *v31 = 0;
            v31[1] = 0;
            v31[2] = 0;
            operator delete(v27);
            break;
          case 5:
            objc_msgSend(v10, "multiArrayValue");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "shape");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            CoreML::numericVectorFromObjC<long long>((uint64_t)__p, v14);
            v15 = v53;
            v16 = v48;
            v53[3] = v47;
            v15[4] = v16;
            v15[5].i64[0] = v49;
            v17 = (void *)v15[5].i64[1];
            if (v17)
            {
              v15[6].i64[0] = (uint64_t)v17;
              operator delete(v17);
              v15[5].i64[1] = 0;
              v15[6].i64[0] = 0;
              v15[6].i64[1] = 0;
            }
            *(int8x16_t *)((char *)v15 + 88) = v50;
            v15[6].i64[1] = v51;
            if (__p[0])
              operator delete(__p[0]);

            break;
          case 8:
            objc_msgSend(v10, "internalStateValue");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v44[0] = MEMORY[0x1E0C809B0];
            v44[1] = 3221225472;
            v44[2] = ___ZN6CoreML24MLNeuralNetworkUtilities28extractFeatureProviderShapesEPU28objcproto17MLFeatureProvider11objc_objectbP13MLVersionInfo_block_invoke;
            v44[3] = &unk_1E3D653F0;
            v44[4] = &v52;
            objc_msgSend(v12, "internalGetMultiArrayWithHandler:", v44);

            break;
          default:
            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1A1AD5E28](exception, "Attempting to extract shape from non-image or multi-array feature");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String"));
        v67 = __p;
        v32 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v42, __p, (_OWORD **)&v67);
        v33 = (void *)v32[7];
        if (v33)
        {
          v32[8] = v33;
          operator delete(v33);
          v32[7] = 0;
          v32[8] = 0;
          v32[9] = 0;
        }
        *(int8x16_t *)(v32 + 7) = v47;
        v32[9] = v48.i64[0];
        if (v46 < 0)
          operator delete(__p[0]);
        _Block_object_dispose(&v52, 8);
        if ((_QWORD)v61)
        {
          *((_QWORD *)&v61 + 1) = v61;
          operator delete((void *)v61);
        }

      }
      v6 = obj;
      v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, v68, 16);
    }
    while (v41);
  }

  CoreML::MLNeuralNetworkUtilities::hashVectorShapesToConfigurationName(v35, &v42);
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(v43[0]);
}

void sub_19C820FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52)
{
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(a19);
  _Unwind_Resume(a1);
}

void CoreML::MLNeuralNetworkUtilities::hashE5ModelDefaultShapesToConfigurationName(std::string *this, MLModelDescription *a2, MLVersionInfo *a3)
{
  MLModelDescription *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int v18;
  MLVersionInfo *v19;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  int32x4_t *v24;
  int8x16_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *exception;
  std::string *v40;
  MLModelDescription *v41;
  MLVersionInfo *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  id obj;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *__p[2];
  char v52;
  void *v53[2];
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  int8x16_t v58;
  _BYTE v59[24];
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t *v66;
  _QWORD *v67[2];
  void **v68;
  _BYTE v69[128];
  _BYTE v70[128];
  uint64_t v71;

  v40 = this;
  v71 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v42 = a3;
  v67[0] = 0;
  v67[1] = 0;
  v66 = (uint64_t *)v67;
  v41 = v4;
  -[MLModelDescription inputDescriptionsByName](v4, "inputDescriptionsByName");
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v70, 16);
  if (v5)
  {
    v45 = *(_QWORD *)v63;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v63 != v45)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * v6);
        objc_msgSend(obj, "objectForKeyedSubscript:", v7, v40);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v58.i32[0] = 0;
        *(_OWORD *)&v59[8] = 0u;
        v60 = 0u;
        v61 = 0;
        v9 = objc_msgSend(v8, "type");
        if (v9 == 4)
        {
          objc_msgSend(v8, "imageConstraint");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "pixelsWide");

          objc_msgSend(v8, "imageConstraint");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v15, "pixelsHigh");

          objc_msgSend(v8, "imageConstraint");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = objc_msgSend(v17, "pixelFormatType");
          v19 = v42;
          +[MLNeuralNetworkCompiler iOS17CompilerVersionInfo](MLNeuralNetworkCompiler, "iOS17CompilerVersionInfo");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v44 = v8;
          v21 = v5;
          if (v18 == 1278226536 || v18 == 1278226488)
            v23 = 1;
          else
            v23 = 3;
          if (v18 == 1278226536)
          {
            if (-[MLVersionInfo olderThan:](v19, "olderThan:", v20))
              v23 = 3;
            else
              v23 = 1;
          }
          v24 = (int32x4_t *)operator new(0x20uLL);
          v24->i64[0] = 1;
          v24->i64[1] = v23;
          v24[1].i64[0] = v16;
          v24[1].i64[1] = v14;

          v5 = v21;
          v8 = v44;

          *(_QWORD *)&v59[16] = 0;
          v25 = (int8x16_t)vrev64q_s32(vuzp1q_s32(*v24, v24[1]));
          v58 = vextq_s8(v25, v25, 8uLL);
          *(_OWORD *)v59 = 0x400000001uLL;
          v61 = 0;
          v60 = 0uLL;
          operator delete(v24);
          v12 = 0;
        }
        else
        {
          if (v9 != 5)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1A1AD5E28](exception, "Attempting to extract shape from non-image or multi-array feature");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          objc_msgSend(v8, "multiArrayConstraint");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "shape");
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          CoreML::numericVectorFromObjC<long long>((uint64_t)__p, v11);
          v58 = *(int8x16_t *)v53;
          *(_OWORD *)v59 = v54;
          v43 = (void *)v56;
          v60 = v56;
          *(_QWORD *)&v59[16] = v55;
          v61 = v57;
          if (__p[0])
            operator delete(__p[0]);

          v12 = v43;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String"));
        v68 = __p;
        v26 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v66, __p, (_OWORD **)&v68);
        v27 = (void *)v26[7];
        if (v27)
        {
          v26[8] = v27;
          operator delete(v27);
          v26[7] = 0;
          v26[8] = 0;
          v26[9] = 0;
        }
        *(_OWORD *)(v26 + 7) = *(_OWORD *)v53;
        v26[9] = v54;
        if ((v52 & 0x80000000) == 0)
        {
          if (!v12)
            goto LABEL_27;
LABEL_26:
          operator delete(v12);
          goto LABEL_27;
        }
        operator delete(__p[0]);
        if (v12)
          goto LABEL_26;
LABEL_27:

        ++v6;
      }
      while (v5 != v6);
      v28 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v70, 16);
      v5 = v28;
    }
    while (v28);
  }

  -[MLModelDescription stateDescriptionsByName](v41, "stateDescriptionsByName");
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v29 = (id)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v47, v69, 16);
  if (v30)
  {
    v31 = *(_QWORD *)v48;
    do
    {
      for (i = 0; i != v30; ++i)
      {
        if (*(_QWORD *)v48 != v31)
          objc_enumerationMutation(v29);
        v33 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
        objc_msgSend(v29, "objectForKeyedSubscript:", v33, v40);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "stateConstraint");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "bufferShape");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        CoreML::numericVectorFromObjC<long long>((uint64_t)v53, v36);
        if (v53[0])
          operator delete(v53[0]);

        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v33), "UTF8String"));
        v68 = __p;
        v37 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v66, __p, (_OWORD **)&v68);
        v38 = (void *)v37[7];
        if (v38)
        {
          v37[8] = v38;
          operator delete(v38);
          v37[7] = 0;
          v37[8] = 0;
          v37[9] = 0;
        }
        *(_OWORD *)(v37 + 7) = *(_OWORD *)v53;
        v37[9] = v54;
        if (v52 < 0)
          operator delete(__p[0]);
        if ((_QWORD)v60)
          operator delete((void *)v60);

      }
      v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v47, v69, 16);
    }
    while (v30);
  }

  CoreML::MLNeuralNetworkUtilities::hashVectorShapesToConfigurationName(v40, &v66);
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(v67[0]);

}

void sub_19C8216B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,_QWORD *a60)
{
  void *v60;

  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(a60);
  _Unwind_Resume(a1);
}

unsigned __int8 *CoreML::MLNeuralNetworkUtilities::encodeConfigurationName(char *a1, const void **a2)
{
  int v3;
  const void *v4;
  CC_LONG v5;
  unsigned __int8 *result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unsigned __int8 md[32];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = a2;
  else
    v4 = *a2;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = *((_DWORD *)a2 + 2);
  result = CC_SHA256(v4, v5, md);
  v7 = 0;
  v8 = 0;
  a1[23] = 8;
  strcpy(a1, "        ");
  do
  {
    if (a1[23] >= 0)
      v9 = a1;
    else
      v9 = *(char **)a1;
    v9[v7] = CoreML::MLNeuralNetworkUtilities::encodeConfigurationName(std::string const&)::hexSymbols[(unint64_t)md[v8] >> 4];
    if (a1[23] >= 0)
      v10 = a1;
    else
      v10 = *(char **)a1;
    v10[v7 + 1] = CoreML::MLNeuralNetworkUtilities::encodeConfigurationName(std::string const&)::hexSymbols[md[v8++] & 0xF];
    v7 += 2;
  }
  while (v8 != 4);
  return result;
}

void CoreML::MLNeuralNetworkUtilities::encodeConfigurationNameIfNeeded(std::string *a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v6 = a3;
  +[MLNeuralNetworkCompiler iOS18CompilerVersionInfo](MLNeuralNetworkCompiler, "iOS18CompilerVersionInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "olderThan:", v5))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    CoreML::MLNeuralNetworkUtilities::encodeConfigurationName((char *)a1, (const void **)a2);
  }

}

void sub_19C821A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C821C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19C821ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, id);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_19C822220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_19C822440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C822550(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8226D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19C822888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4932(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4933(uint64_t a1)
{

}

id `anonymous namespace'::computeE5ProgramFunctionName(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  std::string::size_type size;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  std::string *p_s1;
  void *v18;
  std::string __s1;

  v7 = a1;
  v8 = a2;
  v9 = a4;
  v10 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "containsObject:", v10))
  {
    v10 = v10;
    v11 = v10;
    goto LABEL_25;
  }
  CoreML::MLNeuralNetworkUtilities::encodeConfigurationNameIfNeeded(&__s1, a3, v9);
  v12 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  v14 = *(unsigned __int8 *)(a3 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a3 + 8);
  if (size != v14)
    goto LABEL_19;
  if (v15 >= 0)
    v16 = (unsigned __int8 *)a3;
  else
    v16 = *(unsigned __int8 **)a3;
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      while (p_s1->__r_.__value_.__s.__data_[0] == *v16)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v16;
        if (!--v12)
          goto LABEL_22;
      }
      goto LABEL_19;
    }
LABEL_22:
    v11 = 0;
    goto LABEL_23;
  }
  if (!memcmp(__s1.__r_.__value_.__l.__data_, v16, __s1.__r_.__value_.__l.__size_))
    goto LABEL_22;
LABEL_19:
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v8, "containsObject:", v18))
  {
    v10 = v18;
    v11 = v10;
  }
  else
  {
    v11 = 0;
    v10 = v18;
  }
LABEL_23:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_25:

  return v11;
}

void sub_19C822B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::computeE5ProgramFunctionName(void *a1, uint64_t *a2)
{
  uint64_t *v2;

  if (*((char *)a2 + 23) >= 0)
    v2 = a2;
  else
    v2 = (uint64_t *)*a2;
  objc_msgSend(a1, "stringByAppendingFormat:", CFSTR("_%s"), v2);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_19C822CF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *MLE5MultiArrayShapeForTensor()
{
  uint64_t shape;
  NSObject *v1;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  shape = e5rt_tensor_desc_get_shape();
  if ((_DWORD)shape)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v5 = 1024;
      v6 = shape;
      _os_log_error_impl(&dword_19C486000, v1, OS_LOG_TYPE_ERROR, "Failed to get shape from the tensor description. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get shape from the tensor description. E5RT: %s (%d)"), e5rt_get_last_error_message(), shape);
  }
  return &unk_1E3DA28E8;
}

void sub_19C822E78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *MLE5MultiArrayStridesForTensor()
{
  uint64_t strides;
  _QWORD *v1;
  NSObject *v2;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  strides = e5rt_tensor_desc_get_strides();
  v1 = (_QWORD *)MEMORY[0x1E0C99750];
  if ((_DWORD)strides)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v6 = 1024;
      v7 = strides;
      _os_log_error_impl(&dword_19C486000, v2, OS_LOG_TYPE_ERROR, "Failed to get strides from the tensor description. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v1, CFSTR("Failed to get strides from the tensor description. E5RT: %s (%d)"), e5rt_get_last_error_message(), strides);
  }
  return &unk_1E3DA2900;
}

void sub_19C823174(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5MultiArrayDataTypeForTensor()
{
  uint64_t v0;
  _QWORD *v1;
  NSObject *v2;
  uint64_t component_size;
  NSObject *v4;
  uint64_t component_dtype;
  NSObject *v6;
  NSObject *v7;
  uint64_t last_error_message;
  uint64_t v10;
  uint8_t buf[4];
  _BYTE v12[10];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v0 = e5rt_tensor_desc_retain_dtype();
  v1 = (_QWORD *)MEMORY[0x1E0C99750];
  if ((_DWORD)v0)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v12 = e5rt_get_last_error_message();
      *(_WORD *)&v12[8] = 1024;
      v13 = v0;
      _os_log_error_impl(&dword_19C486000, v2, OS_LOG_TYPE_ERROR, "Failed to get data type of the tensor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v1, CFSTR("Failed to get data type of the tensor. E5RT: %s (%d)"), e5rt_get_last_error_message(), v0);
  }
  component_size = e5rt_tensor_desc_dtype_get_component_size();
  if ((_DWORD)component_size)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v12 = last_error_message;
      *(_WORD *)&v12[8] = 1024;
      v13 = component_size;
      _os_log_error_impl(&dword_19C486000, v4, OS_LOG_TYPE_ERROR, "Failed to get component size. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v1, CFSTR("Failed to get component size. E5RT: %s (%d)"), e5rt_get_last_error_message(), component_size);
  }
  component_dtype = e5rt_tensor_desc_dtype_get_component_dtype();
  if ((_DWORD)component_dtype)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v10 = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v12 = v10;
      *(_WORD *)&v12[8] = 1024;
      v13 = component_dtype;
      _os_log_error_impl(&dword_19C486000, v6, OS_LOG_TYPE_ERROR, "Failed to get component data type. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v1, CFSTR("Failed to get component data type. E5RT: %s (%d)"), e5rt_get_last_error_message(), component_dtype);
  }
  e5rt_tensor_desc_dtype_release();
  +[MLLogging coreChannel](MLLogging, "coreChannel");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v12 = 0;
    *(_WORD *)&v12[4] = 1024;
    *(_DWORD *)&v12[6] = 0;
    _os_log_error_impl(&dword_19C486000, v7, OS_LOG_TYPE_ERROR, "E5 tensor with componentSize = %d and componentDataType = %d is not supported.", buf, 0xEu);
  }

  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v1, CFSTR("E5 tensor with componentSize = %d and componentDataType = %d is not supported."), 0, 0);
  return 65568;
}

void sub_19C8234F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5CreateTensorDescriptor(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t last_error_message;
  id v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *__p;
  char *v41;
  char *v42;
  uint64_t v43;
  uint8_t v44[128];
  uint8_t buf[4];
  uint64_t v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v34 = a1;
  objc_msgSend(v34, "count");
  __p = 0;
  v41 = 0;
  v42 = 0;
  std::vector<unsigned long>::reserve(&__p, objc_msgSend(v34, "count"));
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v3 = v34;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v37;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v37 != v5)
          objc_enumerationMutation(v3);
        v7 = objc_msgSend(*(id *)(*((_QWORD *)&v36 + 1) + 8 * i), "intValue");
        v8 = v7;
        v9 = v41;
        if (v41 >= v42)
        {
          v11 = (char *)__p;
          v12 = (v41 - (_BYTE *)__p) >> 3;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          v14 = v42 - (_BYTE *)__p;
          if ((v42 - (_BYTE *)__p) >> 2 > v13)
            v13 = v14 >> 2;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v42, v15);
            v11 = (char *)__p;
            v9 = v41;
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[8 * v12];
          *(_QWORD *)v17 = v8;
          v10 = v17 + 8;
          while (v9 != v11)
          {
            v18 = *((_QWORD *)v9 - 1);
            v9 -= 8;
            *((_QWORD *)v17 - 1) = v18;
            v17 -= 8;
          }
          __p = v17;
          v41 = v10;
          v42 = &v16[8 * v15];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *(_QWORD *)v41 = v7;
          v10 = v9 + 8;
        }
        v41 = v10;
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
    }
    while (v4);
  }

  v43 = 0;
  v19 = (_QWORD *)MEMORY[0x1E0C99750];
  if (a2 <= 65599)
  {
    if (a2 != 65552 && a2 != 65568)
      goto LABEL_37;
    goto LABEL_33;
  }
  if (a2 == 131104)
  {
LABEL_33:
    v21 = e5rt_tensor_desc_dtype_create();
    if ((_DWORD)v21)
    {
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        last_error_message = e5rt_get_last_error_message();
        *(_DWORD *)buf = 136315394;
        v46 = last_error_message;
        v47 = 1024;
        v48 = v21;
        _os_log_error_impl(&dword_19C486000, v22, OS_LOG_TYPE_ERROR, "Failed to create tensor descriptor dtype. E5RT: %s (%d)", buf, 0x12u);
      }

      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v19, CFSTR("Failed to create tensor descriptor dtype. E5RT: %s (%d)"), e5rt_get_last_error_message(), v21);
    }
    goto LABEL_37;
  }
  if (a2 == 65600)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19C486000, v20, OS_LOG_TYPE_ERROR, "MLPrograms do not support double type inputs.", buf, 2u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("MLPrograms do not support double type inputs."));
  }
LABEL_37:
  v35 = v43;
  v43 = 0;
  v23 = e5rt_tensor_desc_create();
  if ((_DWORD)v23)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v30 = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      v46 = v30;
      v47 = 1024;
      v48 = v23;
      _os_log_error_impl(&dword_19C486000, v24, OS_LOG_TYPE_ERROR, "Failed to create e5 tensor descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v19, CFSTR("Failed to create e5 tensor descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), v23);
  }
  v25 = e5rt_operand_desc_retain_from_tensor_desc();
  if ((_DWORD)v25)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v31 = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      v46 = v31;
      v47 = 1024;
      v48 = v25;
      _os_log_error_impl(&dword_19C486000, v26, OS_LOG_TYPE_ERROR, "Failed to transfer tensor descriptor to operand descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v19, CFSTR("Failed to transfer tensor descriptor to operand descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), v25);
  }
  v27 = e5rt_tensor_desc_release();
  if ((_DWORD)v27)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v32 = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      v46 = v32;
      v47 = 1024;
      v48 = v27;
      _os_log_error_impl(&dword_19C486000, v28, OS_LOG_TYPE_ERROR, "Failed to release tensor descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v19, CFSTR("Failed to release tensor descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), v27);
  }
  std::unique_ptr<e5rt_tensor_desc_dtype,MLE5ObjectDeleter<e5rt_tensor_desc_dtype>>::reset[abi:ne180100](&v35);
  if (__p)
  {
    v41 = (char *)__p;
    operator delete(__p);
  }

  return 0;
}

void sub_19C823AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  void *v24;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_tensor_desc_dtype,MLE5ObjectDeleter<e5rt_tensor_desc_dtype>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
    return (uint64_t *)e5rt_tensor_desc_dtype_release();
  return result;
}

uint64_t __Block_byref_object_copy__5124(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5125(uint64_t a1)
{

}

void sub_19C824134(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C824224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C824874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C825FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  void *v34;
  void *v35;
  void *v36;

  ElapsedTimeRecorder::~ElapsedTimeRecorder(&a34);
  _Unwind_Resume(a1);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<double>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[8 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v19 = &v4[8 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[8 * v5];
  v16 = &v11[8 * v15];
  bzero(v14, 8 * v6);
  v17 = &v14[8 * v6];
  while (v13 != v12)
  {
    v18 = *((_QWORD *)v13 - 1);
    v13 -= 8;
    *((_QWORD *)v14 - 1) = v18;
    v14 -= 8;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::__wrap_iter<std::pair<unsigned long long,double> *>>(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v3 = a2[1];
  v4 = a1[1];
  v5 = a3[1];
  if (v3 > v4)
  {
    v6 = *a1;
    if (v5 > v3)
    {
      *a1 = *a3;
      *a3 = v6;
      a1[1] = v5;
      a3[1] = v4;
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    a1[1] = v3;
    a2[1] = v4;
    v11 = a3[1];
    if (v11 <= v4)
      return 1;
    *a2 = *a3;
    *a3 = v6;
    a2[1] = v11;
    a3[1] = v4;
    return 2;
  }
  if (v5 > v3)
  {
    v7 = *a2;
    *a2 = *a3;
    *a3 = v7;
    a2[1] = v5;
    a3[1] = v3;
    v8 = a2[1];
    v9 = a1[1];
    if (v8 <= v9)
      return 1;
    v10 = *a1;
    *a1 = *a2;
    *a2 = v10;
    a1[1] = v8;
    a2[1] = v9;
    return 2;
  }
  return 0;
}

double *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(double *result, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v3 = a2[1];
  v4 = result[1];
  v5 = a3[1];
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v5;
      a3[1] = v3;
      v8 = a2[1];
      v9 = result[1];
      if (v8 > v9)
      {
        v10 = *result;
        *result = *a2;
        *a2 = v10;
        result[1] = v8;
        a2[1] = v9;
      }
    }
  }
  else
  {
    v6 = *result;
    if (v5 <= v3)
    {
      *result = *a2;
      *a2 = v6;
      result[1] = v3;
      a2[1] = v4;
      v11 = a3[1];
      if (v11 <= v4)
        return result;
      *a2 = *a3;
      *a3 = v6;
      a2[1] = v11;
    }
    else
    {
      *result = *a3;
      *a3 = v6;
      result[1] = v5;
    }
    a3[1] = v4;
  }
  return result;
}

double *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(double *a1, double *a2, double *a3, double *a4)
{
  double *result;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(a1, a2, a3);
  v9 = a4[1];
  v10 = a3[1];
  if (v9 > v10)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    a3[1] = v9;
    a4[1] = v10;
    v12 = a3[1];
    v13 = a2[1];
    if (v12 > v13)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      v15 = a2[1];
      v16 = a1[1];
      if (v15 > v16)
      {
        v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(double *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  double v8;
  double *v9;
  double *v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      v18 = *(a2 - 1);
      v19 = a1[7];
      if (v18 > v19)
      {
        v20 = *((_QWORD *)a1 + 6);
        a1[6] = *(a2 - 2);
        *((_QWORD *)a2 - 2) = v20;
        a1[7] = v18;
        *(a2 - 1) = v19;
        v21 = a1[7];
        v22 = a1[5];
        if (v21 > v22)
        {
          v23 = *((_QWORD *)a1 + 4);
          v24 = *((_QWORD *)a1 + 6);
          *((_QWORD *)a1 + 4) = v24;
          *((_QWORD *)a1 + 6) = v23;
          a1[5] = v21;
          a1[7] = v22;
          v25 = a1[3];
          if (v21 > v25)
          {
            v26 = *((_QWORD *)a1 + 2);
            *((_QWORD *)a1 + 2) = v24;
            *((_QWORD *)a1 + 4) = v26;
            a1[3] = v21;
            a1[5] = v25;
            v27 = a1[1];
            if (v21 > v27)
            {
              v28 = *a1;
              *(_QWORD *)a1 = v24;
              a1[2] = v28;
              a1[1] = v21;
              a1[3] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[1];
    if (v13 > v9[1])
    {
      v14 = *(_QWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = (double *)((char *)a1 + v15);
        v16[6] = *(double *)((char *)a1 + v15 + 32);
        v16[7] = *(double *)((char *)a1 + v15 + 40);
        if (v15 == -32)
          break;
        v15 -= 16;
        if (v13 <= v16[3])
        {
          v17 = (uint64_t)a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      v17 = (uint64_t)a1;
LABEL_13:
      *(_QWORD *)v17 = v14;
      *(double *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

void sub_19C827ECC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, _QWORD *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,_QWORD *a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,__int128 buf)
{
  void *v61;
  void *v64;
  void *v65;
  NSObject *v66;
  uint64_t v67;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a36);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  if (a2 == 1)
  {
    v64 = __cxa_begin_catch(a1);
    v65 = v64;
    if (a14)
    {
      (*(void (**)(void *))(*(_QWORD *)v64 + 16))(v64);
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("Could not construct item similarity recommender: %s"));
      *a14 = (id)objc_claimAutoreleasedReturnValue();
    }
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v66 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      v67 = (*(uint64_t (**)(void *))(*(_QWORD *)v65 + 16))(v65);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v67;
      _os_log_error_impl(&dword_19C486000, v66, OS_LOG_TYPE_ERROR, "%s thrown on construction", (uint8_t *)&buf, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x19C827E78);
  }

  _Unwind_Resume(a1);
}

void sub_19C8288F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6, __int16 a7, char a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30,uint64_t a31,std::__split_buffer<std::string> **__pa,char a33,uint64_t a34,std::__split_buffer<std::string> *a35,uint64_t a36,uint64_t a37,char a38)
{
  void *v38;

  if (__pa)
    operator delete(__pa);
  __pa = &a35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a38);

  _Unwind_Resume(a1);
}

void sub_19C828FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void **__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;

  if (__p)
    operator delete(__p);
  __p = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&__p);

  _Unwind_Resume(a1);
}

uint64_t operator>><unsigned char>(uint64_t a1, _QWORD *a2)
{
  operator>>(a1);
  if (a2[1] != *a2)
    a2[1] = *a2;
  return a1;
}

void sub_19C8292F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t operator>><long long>(uint64_t a1, char **a2)
{
  operator>>(a1);
  std::vector<long long>::resize(a2, 0);
  return a1;
}

void std::vector<long long>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[8 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v19 = &v4[8 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[8 * v5];
  v16 = &v11[8 * v15];
  bzero(v14, 8 * v6);
  v17 = &v14[8 * v6];
  while (v13 != v12)
  {
    v18 = *((_QWORD *)v13 - 1);
    v13 -= 8;
    *((_QWORD *)v14 - 1) = v18;
    v14 -= 8;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

uint64_t operator<<<unsigned char>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  std::ios_base::failure *exception;
  std::error_code __ec;
  char v10;

  operator<<(a1, a2[1] - *a2);
  v4 = *a2;
  if (a2[1] != *a2)
  {
    v5 = 0;
    do
    {
      v10 = *(_BYTE *)(v4 + v5);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      std::ostream::write();
      if (!*(_BYTE *)a1)
      {
        v6 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
        if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
        {
          exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
          *(_QWORD *)&__ec.__val_ = 1;
          __ec.__cat_ = std::iostream_category();
          std::ios_base::failure::failure(exception, "Error writing to archive.", &__ec);
          __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
        }
      }
      ++v5;
      v4 = *a2;
    }
    while (v5 < a2[1] - *a2);
  }
  return a1;
}

void sub_19C82958C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void OArchive::uniqueBlob(_QWORD *a1, _QWORD *a2, const void **a3)
{
  char *v5;
  size_t v6;
  std::string *v7;
  const void *v8;
  unsigned int v9;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  unsigned __int8 *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::string v27;
  std::string v28;
  std::string v29;
  void *__p[2];
  std::string::size_type v31;

  __p[0] = a3;
  v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a2 + 19), (unsigned __int8 *)a3, (__int128 **)__p);
  do
  {
    while (1)
    {
      if (*((char *)a3 + 23) >= 0)
        v6 = *((unsigned __int8 *)a3 + 23);
      else
        v6 = (size_t)a3[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v28, v6 + 2);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v28;
      else
        v7 = (std::string *)v28.__r_.__value_.__r.__words[0];
      if (v6)
      {
        if (*((char *)a3 + 23) >= 0)
          v8 = a3;
        else
          v8 = *a3;
        memmove(v7, v8, v6);
      }
      strcpy((char *)v7 + v6, "_B");
      std::to_string(&v27, *((_QWORD *)v5 + 5));
      v9 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      {
        size = v27.__r_.__value_.__l.__size_;
        if (v27.__r_.__value_.__l.__size_ >= 4)
          goto LABEL_18;
      }
      else
      {
        if (HIBYTE(v27.__r_.__value_.__r.__words[2]) > 3u)
          goto LABEL_18;
        size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      }
      std::string::insert(&v27, 0, 4 - size, 48);
      v9 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
LABEL_18:
      if ((v9 & 0x80u) == 0)
        v11 = &v27;
      else
        v11 = (std::string *)v27.__r_.__value_.__r.__words[0];
      if ((v9 & 0x80u) == 0)
        v12 = v9;
      else
        v12 = v27.__r_.__value_.__l.__size_;
      v13 = std::string::append(&v28, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v15 = std::string::append(&v29, ".DAT");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v31 = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      v17 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2 + 14, (unsigned __int8 *)__p);
      if (v17)
        ++*((_QWORD *)v5 + 5);
      else
        (*(void (**)(uint64_t *__return_ptr, _QWORD *, void **))(*a2 + 16))(&v25, a2, __p);
      if (SHIBYTE(v31) < 0)
        break;
      if (!v17)
        goto LABEL_37;
    }
    operator delete(__p[0]);
  }
  while (v17);
LABEL_37:
  v18 = v26;
  *a1 = v25;
  a1[1] = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v21 = v26;
    if (v26)
    {
      v22 = (unint64_t *)&v26->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_19C829808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operator<<<long long>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;

  result = operator<<(a1, (a2[1] - *a2) >> 3);
  v4 = *a2;
  if (a2[1] != *a2)
  {
    v5 = 0;
    do
    {
      result = operator<<(result, *(_QWORD *)(v4 + 8 * v5++));
      v4 = *a2;
    }
    while (v5 < (a2[1] - *a2) >> 3);
  }
  return result;
}

uint64_t operator<<<std::string>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  result = operator<<(a1, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  if (a2[1] != *a2)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      result = operator<<(result, (uint64_t *)(v4 + v5));
      ++v6;
      v4 = *a2;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return result;
}

void sub_19C829AF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C82A180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_19C82A3F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C82A528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C82A730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C82AABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C82AC44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C82B084(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a14);

  CoreML::Specification::NetworkUpdateParameters::~NetworkUpdateParameters((CoreML::Specification::NetworkUpdateParameters *)va);
  _Unwind_Resume(a1);
}

void sub_19C82B330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C82B3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C82B954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19C82BB48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C82BC84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C82BD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_19C82C4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  id a64;

  _Block_object_dispose(&a59, 8);

  _Unwind_Resume(a1);
}

void sub_19C82CB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id a42)
{

  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_19C82CD3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CoreML::Specification::LossLayer::~LossLayer((CoreML::Specification::LossLayer *)va);
  _Unwind_Resume(a1);
}

void sub_19C82CF00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C82D3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;

  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(*(char **)(v43 - 112));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v43 - 136);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if (a17 < 0)
    operator delete(__p);
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)&a18);
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(a27);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a24);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5634(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5635(uint64_t a1)
{

}

void sub_19C82D9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C82DB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C82DDA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C82DF84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C82E078(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C82E110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C82E9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34)
{
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

void Archiver::_OArchiveDiskImpl::getBlob(uint64_t a1@<X0>, __int128 *a2@<X1>, std::string **a3@<X8>)
{
  std::string *v6;
  void *__p[2];
  char v8;

  Archiver::_OArchiveImpl::insertBlobName((unsigned __int8 *)__p, a1, (uint64_t)a2);
  v6 = (std::string *)operator new(0x290uLL);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E3D5BE60;
  *a3 = Archiver::_ODataBlobImpl::_ODataBlobImpl(v6 + 1, a2, (__int128 *)__p, *(_BYTE *)(a1 + 232));
  a3[1] = v6;
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_19C82EC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Archiver::_OArchiveDiskImpl::getNestedArchive(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  _QWORD *v13;
  __int128 v14;
  std::string __p;
  std::string v16;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 112, (unsigned __int8 *)a2, a2);
  if (*(char *)(a1 + 55) >= 0)
    v6 = *(unsigned __int8 *)(a1 + 55);
  else
    v6 = *(_QWORD *)(a1 + 40);
  v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*(char *)(a1 + 55) >= 0)
      v8 = (const void *)(a1 + 32);
    else
      v8 = *(const void **)(a1 + 32);
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a2;
  else
    v10 = *(const std::string::value_type **)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::string::append(&v16, v10, v11);
  __p = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v13 = operator new(0x340uLL);
  v13[1] = 0;
  v13[2] = 0;
  *v13 = &off_1E3D5BED0;
  *(_QWORD *)&v14 = Archiver::_OArchiveDiskImpl::_OArchiveDiskImpl((uint64_t)(v13 + 3), (__int128 *)a2, (uint64_t)&__p, *(_BYTE *)(a1 + 232));
  *((_QWORD *)&v14 + 1) = v13;
  *a3 = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19C82ED90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Archiver::_OArchiveDiskImpl::setObject(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  std::logic_error *exception;

  v3 = a3;
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Error: setObject is not supported by _OArchiveDiskImpl");
  __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
}

void sub_19C82EE20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Archiver::_OArchiveDiskImpl::listFilesWritten(uint64_t a1, uint64_t a2)
{
  size_t v4;
  char *first;
  const void *v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string::size_type v22;
  _QWORD *v23;
  unint64_t v24;
  __int128 *v25;
  void *__p[2];
  unsigned __int8 v27;
  std::__split_buffer<std::string> v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "coremldata.bin");
  if (*(char *)(a1 + 55) >= 0)
    v4 = *(unsigned __int8 *)(a1 + 55);
  else
    v4 = *(_QWORD *)(a1 + 40);
  first = (char *)&v28;
  std::string::basic_string[abi:ne180100]((uint64_t)&v28, v4 + 1);
  if (SHIBYTE(v28.__end_) < 0)
    first = (char *)v28.__first_;
  if (v4)
  {
    if (*(char *)(a1 + 55) >= 0)
      v6 = (const void *)(a1 + 32);
    else
      v6 = *(const void **)(a1 + 32);
    memmove(first, v6, v4);
  }
  *(_WORD *)&first[v4] = 47;
  if ((v27 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v27 & 0x80u) == 0)
    v8 = v27;
  else
    v8 = (std::string::size_type)__p[1];
  v9 = std::string::append((std::string *)&v28, (const std::string::value_type *)v7, v8);
  v10 = v9->__r_.__value_.__r.__words[0];
  v29[0] = v9->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v29 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
  v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__end_) < 0)
    operator delete(v28.__first_);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 >= v12)
  {
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(_QWORD *)a2) >> 3);
    v17 = v16 + 1;
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(_QWORD *)a2) >> 3);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x555555555555555)
      v19 = 0xAAAAAAAAAAAAAAALL;
    else
      v19 = v17;
    v28.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v19)
      v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v19);
    else
      v20 = 0;
    v21 = v20 + v16;
    v28.__first_ = v20;
    v28.__begin_ = v21;
    v28.__end_cap_.__value_ = &v20[v19];
    v22 = v29[0];
    v21->__r_.__value_.__r.__words[0] = v10;
    v21->__r_.__value_.__l.__size_ = v22;
    *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v29 + 7);
    *((_BYTE *)&v21->__r_.__value_.__s + 23) = v11;
    v28.__end_ = v21 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &v28);
    v15 = *(_QWORD *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&v28);
  }
  else
  {
    v14 = v29[0];
    *(_QWORD *)v13 = v10;
    *(_QWORD *)(v13 + 8) = v14;
    *(_QWORD *)(v13 + 15) = *(_QWORD *)((char *)v29 + 7);
    *(_BYTE *)(v13 + 23) = v11;
    v15 = v13 + 24;
    *(_QWORD *)(a2 + 8) = v13 + 24;
  }
  *(_QWORD *)(a2 + 8) = v15;
  if ((char)v27 < 0)
    operator delete(__p[0]);
  v23 = *(_QWORD **)(a1 + 88);
  if (v23)
  {
    v24 = *(_QWORD *)(a2 + 8);
    do
    {
      v25 = (__int128 *)(v23 + 2);
      if (v24 >= *(_QWORD *)(a2 + 16))
      {
        v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, v25);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a2, v25);
        v24 += 24;
      }
      *(_QWORD *)(a2 + 8) = v24;
      v23 = (_QWORD *)*v23;
    }
    while (v23);
  }
}

void sub_19C82F0B0(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, std::__split_buffer<std::string> *a8, uint64_t a9, void *__pa, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a16);
  if (a15 < 0)
    operator delete(__pa);
  _Unwind_Resume(a1);
}

uint64_t Archiver::_OArchiveDiskImpl::storageType(Archiver::_OArchiveDiskImpl *this)
{
  return 0;
}

_QWORD *Archiver::_OArchiveDiskImpl::rawOutputStream(Archiver::_OArchiveDiskImpl *this)
{
  _QWORD *result;
  _QWORD *v2;

  if (*((_BYTE *)this + 232))
    return (_QWORD *)((char *)this + 240);
  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (*(_BYTE *)v2)
    return v2 + 1;
  result = (_QWORD *)v2[78];
  if (!result)
  {
    Archiver::_ODataBlobImpl::_openAsStream(v2);
    return (_QWORD *)v2[78];
  }
  return result;
}

_QWORD *Archiver::_ODataBlobImpl::_openAsStream(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[78])
  {
    v1 = this;
    if (!*(_BYTE *)this)
    {
      v2 = (_QWORD *)operator new();
      std::ofstream::basic_ofstream(v2);
      this = (_QWORD *)v1[78];
      v1[78] = v2;
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
  }
  return this;
}

void sub_19C82F1E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10F1C4067547207);
  _Unwind_Resume(a1);
}

uint64_t Archiver::_OArchiveDiskImpl::_OArchiveDiskImpl(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  char v17;
  std::ios_base::failure *v18;
  const std::error_category *v19;
  void *v20;
  void *v21;
  std::string *v22;
  size_t v23;
  std::string *v24;
  const void *v25;
  void **v26;
  std::string::size_type v27;
  std::string *v28;
  _QWORD *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::ios_base::failure *exception;
  const std::error_category *v36;
  std::ios_base::failure *v37;
  const char *v38;
  const std::error_category *v39;
  void *v40[2];
  unsigned __int8 v41;
  std::string __p;
  void *v43[2];
  char v44;
  std::string v45;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v45 = *(std::string *)a3;
  Archiver::_OArchiveImpl::_OArchiveImpl(a1, a2, (__int128 *)&v45);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E3D5B2B0;
  v7 = MEMORY[0x1E0DE4F48];
  *(_BYTE *)(a1 + 232) = a4;
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(a1 + 240) = v8;
  v10 = MEMORY[0x1E0DE4FB0];
  v11 = MEMORY[0x1E0DE4FB0] + 64;
  *(_QWORD *)(a1 + 656) = MEMORY[0x1E0DE4FB0] + 64;
  *(_QWORD *)(a1 + 240 + *(_QWORD *)(v8 - 24)) = v9;
  v12 = (std::ios_base *)(a1 + 240 + *(_QWORD *)(*(_QWORD *)(a1 + 240) - 24));
  std::ios_base::init(v12, (void *)(a1 + 248));
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  *(_QWORD *)(a1 + 240) = v10 + 24;
  *(_QWORD *)(a1 + 656) = v11;
  MEMORY[0x1A1AD5F3C](a1 + 248);
  if (!*(_BYTE *)(a1 + 232))
  {
    if (*(char *)(a1 + 55) >= 0)
      v13 = a1 + 32;
    else
      v13 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    __p.__r_.__value_.__s.__data_[0] = 0;
    v16 = objc_msgSend(v15, "fileExistsAtPath:isDirectory:", v14, &__p);
    v17 = objc_msgSend(v15, "isWritableFileAtPath:", v14);
    if (v16)
    {
      if (!__p.__r_.__value_.__s.__data_[0])
      {
        NSLog(CFSTR("non-directory file already exists at archive path"));
        exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
        v36 = std::iostream_category();
        v45.__r_.__value_.__r.__words[0] = 1;
        v45.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
        std::ios_base::failure::failure(exception, "non-directory file already exists at archive path", (const std::error_code *)&v45);
        __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
      }
      if ((v17 & 1) == 0)
      {
        NSLog(CFSTR("existing archive path is not a writable directory"));
        v18 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
        v19 = std::iostream_category();
        v45.__r_.__value_.__r.__words[0] = 1;
        v45.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
        std::ios_base::failure::failure(v18, "existing archive path is not a writable directory", (const std::error_code *)&v45);
        __cxa_throw(v18, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v43[0] = 0;
      objc_msgSend(v20, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v14, 1, 0, v43);
      v21 = v43[0];

      if (v21)
      {
        NSLog(CFSTR("error creating directory: %@"), v21);
        v37 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
        objc_msgSend(v21, "localizedDescription");
        v38 = (const char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
        v39 = std::iostream_category();
        v45.__r_.__value_.__r.__words[0] = 1;
        v45.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
        std::ios_base::failure::failure(v37, v38, (const std::error_code *)&v45);
        __cxa_throw(v37, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
      }
    }

    v22 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v43, "coremldata.bin");
    std::string::basic_string[abi:ne180100]<0>(v40, "coremldata.bin");
    if (*(char *)(a1 + 55) >= 0)
      v23 = *(unsigned __int8 *)(a1 + 55);
    else
      v23 = *(_QWORD *)(a1 + 40);
    v24 = &v45;
    std::string::basic_string[abi:ne180100]((uint64_t)&v45, v23 + 1);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v45.__r_.__value_.__r.__words[0];
    if (v23)
    {
      if (*(char *)(a1 + 55) >= 0)
        v25 = (const void *)(a1 + 32);
      else
        v25 = *(const void **)(a1 + 32);
      memmove(v24, v25, v23);
    }
    *(_WORD *)((char *)&v24->__r_.__value_.__l.__data_ + v23) = 47;
    if ((v41 & 0x80u) == 0)
      v26 = v40;
    else
      v26 = (void **)v40[0];
    if ((v41 & 0x80u) == 0)
      v27 = v41;
    else
      v27 = (std::string::size_type)v40[1];
    v28 = std::string::append(&v45, (const std::string::value_type *)v26, v27);
    __p = *v28;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    Archiver::_ODataBlobImpl::_ODataBlobImpl(v22, (__int128 *)v43, (__int128 *)&__p, *(_BYTE *)(a1 + 232));
    v29 = (_QWORD *)operator new();
    *v29 = &off_1E3D5C678;
    v29[1] = 0;
    v29[2] = 0;
    v29[3] = v22;
    *(_QWORD *)&v30 = v22;
    *((_QWORD *)&v30 + 1) = v29;
    v31 = *(std::__shared_weak_count **)(a1 + 64);
    *(_OWORD *)(a1 + 56) = v30;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((char)v41 < 0)
      operator delete(v40[0]);
    if (v44 < 0)
      operator delete(v43[0]);
  }
  return a1;
}

void sub_19C82F680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void **v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  std::ofstream::~ofstream(v34);
  Archiver::_OArchiveImpl::~_OArchiveImpl(v33);
  _Unwind_Resume(a1);
}

void sub_19C82F7F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  JUMPOUT(0x19C82F7ECLL);
}

uint64_t Archiver::_OArchiveImpl::_OArchiveImpl(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *(_QWORD *)a1 = off_1E3D5B030;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  v6 = (std::string *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  return a1;
}

void sub_19C82F8D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *Archiver::_ODataBlobImpl::_ODataBlobImpl(std::string *a1, __int128 *a2, __int128 *a3, std::string::value_type a4)
{
  uint64_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type *p_size;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  std::string::value_type *v14;
  std::ios_base *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;

  v7 = MEMORY[0x1E0DE4F48];
  a1->__r_.__value_.__s.__data_[0] = a4;
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(_QWORD *)(v7 + 16);
  a1->__r_.__value_.__l.__size_ = v8;
  p_size = &a1->__r_.__value_.__l.__size_;
  v11 = (uint64_t *)&a1[17].__r_.__value_.__r.__words[2];
  v12 = MEMORY[0x1E0DE4FB0];
  v13 = MEMORY[0x1E0DE4FB0] + 64;
  a1[17].__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB0] + 64;
  v14 = &a1->__r_.__value_.__s.__data_[16];
  *(std::string::size_type *)((char *)&a1->__r_.__value_.__r.__words[1] + *(_QWORD *)(v8 - 24)) = v9;
  v15 = (std::ios_base *)((char *)&a1->__r_.__value_.__r.__words[1] + *(_QWORD *)(a1->__r_.__value_.__l.__size_ - 24));
  std::ios_base::init(v15, &a1->__r_.__value_.__r.__words[2]);
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  *p_size = v12 + 24;
  *v11 = v13;
  MEMORY[0x1A1AD5F3C](v14);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 24, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v16 = *a2;
    a1[24].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&a1[24].__r_.__value_.__l.__data_ = v16;
  }
  v17 = a1 + 25;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v18 = *a3;
    a1[25].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
  }
  a1[26].__r_.__value_.__r.__words[0] = 0;
  return a1;
}

void sub_19C82F9FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 599) < 0)
    operator delete(*v3);
  std::ofstream::~ofstream(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *a1 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1A1AD5F48](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1A1AD61C4](a1 + 52);
  return a1;
}

uint64_t std::default_delete<Archiver::_ODataBlobImpl>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 624);
    *(_QWORD *)(v1 + 624) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    if (*(char *)(v1 + 623) < 0)
      operator delete(*(void **)(v1 + 600));
    if (*(char *)(v1 + 599) < 0)
      operator delete(*(void **)(v1 + 576));
    v3 = MEMORY[0x1E0DE4F48];
    v4 = *MEMORY[0x1E0DE4F48];
    *(_QWORD *)(v1 + 8) = *MEMORY[0x1E0DE4F48];
    *(_QWORD *)(v1 + 8 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
    MEMORY[0x1A1AD5F48](v1 + 16);
    std::ostream::~ostream();
    MEMORY[0x1A1AD61C4](v1 + 424);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

void std::__shared_ptr_pointer<Archiver::_ODataBlobImpl *,std::shared_ptr<Archiver::_ODataBlobImpl>::__shared_ptr_default_delete<Archiver::_ODataBlobImpl,Archiver::_ODataBlobImpl>,std::allocator<Archiver::_ODataBlobImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<Archiver::_ODataBlobImpl *,std::shared_ptr<Archiver::_ODataBlobImpl>::__shared_ptr_default_delete<Archiver::_ODataBlobImpl,Archiver::_ODataBlobImpl>,std::allocator<Archiver::_ODataBlobImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<Archiver::_ODataBlobImpl>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<Archiver::_ODataBlobImpl *,std::shared_ptr<Archiver::_ODataBlobImpl>::__shared_ptr_default_delete<Archiver::_ODataBlobImpl,Archiver::_ODataBlobImpl>,std::allocator<Archiver::_ODataBlobImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN8Archiver14_ODataBlobImplEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t Archiver::_OArchiveImpl::insertBlobName(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  std::string *p_msg;
  const void *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  std::ios_base::failure *exception;
  std::error_code __ec;
  std::string __msg;

  v6 = a2 + 112;
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(a2 + 112), (unsigned __int8 *)a3))
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    *(_QWORD *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, &__msg, &__ec);
    __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v6, (unsigned __int8 *)a3, a3);
  if (*(char *)(a2 + 55) >= 0)
    v7 = *(unsigned __int8 *)(a2 + 55);
  else
    v7 = *(_QWORD *)(a2 + 40);
  p_msg = &__msg;
  std::string::basic_string[abi:ne180100]((uint64_t)&__msg, v7 + 1);
  if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_msg = (std::string *)__msg.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*(char *)(a2 + 55) >= 0)
      v9 = (const void *)(a2 + 32);
    else
      v9 = *(const void **)(a2 + 32);
    memmove(p_msg, v9, v7);
  }
  *(_WORD *)((char *)&p_msg->__r_.__value_.__l.__data_ + v7) = 47;
  v10 = *(char *)(a3 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a3;
  else
    v11 = *(const std::string::value_type **)a3;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a3 + 23);
  else
    v12 = *(_QWORD *)(a3 + 8);
  v13 = std::string::append(&__msg, v11, v12);
  *(std::string *)a1 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__msg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__msg.__r_.__value_.__l.__data_);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 72, a1, (uint64_t)a1);
}

void sub_19C82FD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void std::__shared_ptr_emplace<Archiver::_ODataBlobImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BE60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Archiver::_ODataBlobImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BE60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<Archiver::_ODataBlobImpl>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 648) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 647) < 0)
    operator delete(*(void **)(a1 + 624));
  if (*(char *)(a1 + 623) < 0)
    operator delete(*(void **)(a1 + 600));
  v3 = MEMORY[0x1E0DE4F48];
  v4 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)(a1 + 32) = *MEMORY[0x1E0DE4F48];
  v5 = a1 + 32;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  MEMORY[0x1A1AD5F48](v5 + 8);
  std::ostream::~ostream();
  JUMPOUT(0x1A1AD61C4);
}

void Archiver::_OArchiveMemoryImpl::~_OArchiveMemoryImpl(id *this)
{

  Archiver::_OArchiveImpl::~_OArchiveImpl(this);
}

{

  Archiver::_OArchiveImpl::~_OArchiveImpl(this);
  JUMPOUT(0x1A1AD6260);
}

void Archiver::_OArchiveMemoryImpl::getBlob(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *__p[2];
  char v7;

  Archiver::_OArchiveImpl::insertBlobName((unsigned __int8 *)__p, a1, a2);
  Archiver::_OArchiveMemoryImpl::createBlob(a3, a1, a2, (uint64_t *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_19C82FF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Archiver::_OArchiveMemoryImpl::getNestedArchive(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  _QWORD *v13;
  __int128 v14;
  std::string __p;
  std::string v16;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 112, (unsigned __int8 *)a2, a2);
  if (*(char *)(a1 + 55) >= 0)
    v6 = *(unsigned __int8 *)(a1 + 55);
  else
    v6 = *(_QWORD *)(a1 + 40);
  v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*(char *)(a1 + 55) >= 0)
      v8 = (const void *)(a1 + 32);
    else
      v8 = *(const void **)(a1 + 32);
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a2;
  else
    v10 = *(const std::string::value_type **)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::string::append(&v16, v10, v11);
  __p = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v13 = operator new(0x108uLL);
  v13[1] = 0;
  v13[2] = 0;
  *v13 = &off_1E3D5BF78;
  *(_QWORD *)&v14 = Archiver::_OArchiveMemoryImpl::_OArchiveMemoryImpl((uint64_t)(v13 + 3), (__int128 *)a2, (uint64_t)&__p, *(void **)(a1 + 232));
  *((_QWORD *)&v14 + 1) = v13;
  *a3 = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19C830088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Archiver::_OArchiveMemoryImpl::setObject(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  std::ios_base::failure *exception;
  id v12;
  id v13;
  std::error_code __ec;
  std::string __msg;

  v12 = a3;
  v5 = a1 + 32;
  if (*(char *)(a1 + 55) < 0)
    v5 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5, v12);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "pathComponents");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  Archiver::createArchive(v7, *(void **)(a1 + 232));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    *(_QWORD *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, &__msg, &__ec);
    __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  if (*((char *)a2 + 23) >= 0)
    v9 = a2;
  else
    v9 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v13, v10);

}

void sub_19C8301F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  int v20;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:

      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

uint64_t Archiver::_OArchiveMemoryImpl::storageType(Archiver::_OArchiveMemoryImpl *this)
{
  return 1;
}

id Archiver::createArchive(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "count"))
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v15;
      while (2)
      {
        v8 = 0;
        v9 = v4;
        do
        {
          if (*(_QWORD *)v15 != v7)
            objc_enumerationMutation(v5);
          v10 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v8);
          objc_msgSend(v9, "objectForKeyedSubscript:", v10, (_QWORD)v14);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          if (v11)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {

              v12 = 0;
              v4 = v9;
              goto LABEL_16;
            }
            v4 = v11;
          }
          else
          {
            v4 = (id)objc_opt_new();
            objc_msgSend(v9, "setObject:forKeyedSubscript:", v4, v10);
          }

          ++v8;
          v9 = v4;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v6)
          continue;
        break;
      }
    }

    v4 = v4;
    v12 = v4;
  }
  else
  {
    v12 = 0;
  }
LABEL_16:

  return v12;
}

void sub_19C830428(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t Archiver::_OArchiveMemoryImpl::_OArchiveMemoryImpl(uint64_t a1, __int128 *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v24[2];
  unsigned __int8 v25;
  void *__p[2];
  std::string::size_type v27;
  void *v28[2];
  char v29;
  __int128 v30;
  std::string v31;

  v7 = a4;
  Archiver::_OArchiveImpl::_OArchiveImpl(a1, a2, (__int128 *)a3);
  *(_QWORD *)a1 = &off_1E3D5B390;
  v8 = v7;
  *(_QWORD *)(a1 + 232) = v8;
  std::string::basic_string[abi:ne180100]<0>(v28, "coremldata.bin");
  std::string::basic_string[abi:ne180100]<0>(v24, "coremldata.bin");
  if (*(char *)(a3 + 23) >= 0)
    v9 = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  v10 = &v31;
  std::string::basic_string[abi:ne180100]((uint64_t)&v31, v9 + 1);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if (v9)
  {
    if (*(char *)(a3 + 23) >= 0)
      v11 = (const void *)a3;
    else
      v11 = *(const void **)a3;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 47;
  if ((v25 & 0x80u) == 0)
    v12 = v24;
  else
    v12 = (void **)v24[0];
  if ((v25 & 0x80u) == 0)
    v13 = v25;
  else
    v13 = (std::string::size_type)v24[1];
  v14 = std::string::append(&v31, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v27 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  Archiver::_OArchiveMemoryImpl::createBlob(&v30, a1, (uint64_t)v28, (uint64_t *)__p);
  v16 = v30;
  v30 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v16;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  if ((char)v25 < 0)
    operator delete(v24[0]);
  if (v29 < 0)
    operator delete(v28[0]);

  return a1;
}

void sub_19C830688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void **v27;
  void *v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);

  Archiver::_OArchiveImpl::~_OArchiveImpl(v27);
  _Unwind_Resume(a1);
}

void sub_19C830704()
{
  JUMPOUT(0x19C8306F8);
}

void Archiver::_OArchiveMemoryImpl::createBlob(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  std::ios_base::failure *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  uint64_t v24;
  uint64_t v25;
  std::ios_base *v26;
  std::string *v27;
  std::ios_base::failure *exception;
  std::ios_base::failure *v29;
  const std::string::value_type **v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  id v34;
  std::error_code __ec;
  std::string __msg;

  if (*((char *)a4 + 23) >= 0)
    v8 = a4;
  else
    v8 = (uint64_t *)*a4;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "pathComponents");
  v34 = (id)objc_claimAutoreleasedReturnValue();

  v32 = a3;
  if ((unint64_t)objc_msgSend(v34, "count") <= 1)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    *(_QWORD *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, &__msg, &__ec);
    __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  objc_msgSend(v34, "subarrayWithRange:", 0, objc_msgSend(v34, "count") - 1);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  Archiver::createArchive(v33, *(void **)(a2 + 232));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10)
  {
    v29 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    *(_QWORD *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(v29, &__msg, &__ec);
    __cxa_throw(v29, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  objc_msgSend(v34, "lastObject");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKeyedSubscript:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v13 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      *(_QWORD *)&__ec.__val_ = 1;
      __ec.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(v13, &__msg, &__ec);
      __cxa_throw(v13, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DF0], "data");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v12, v11);
  }
  v14 = operator new();
  v15 = v12;
  *(_QWORD *)(v14 + 88) = &unk_1E3D490A8;
  *(_QWORD *)v14 = &unk_1E3D49080;
  std::ios_base::init((std::ios_base *)(v14 + 88), 0);
  v31 = a1;
  *(_QWORD *)(v14 + 224) = 0;
  *(_DWORD *)(v14 + 232) = -1;
  *(_QWORD *)v14 = &off_1E3D5B110;
  *(_QWORD *)(v14 + 88) = off_1E3D5B138;
  v16 = v15;
  std::streambuf::basic_streambuf();
  *(_DWORD *)(v14 + 72) = 52;
  *(_QWORD *)(v14 + 8) = &off_1E3D5B230;
  v17 = v16;
  *(_QWORD *)(v14 + 80) = v17;
  v18 = objc_msgSend(v17, "bytes");
  v19 = objc_msgSend(v17, "length");
  *(_QWORD *)(v14 + 48) = v18;
  *(_QWORD *)(v14 + 56) = v18;
  *(_QWORD *)(v14 + 64) = v18 + v19;

  *(_QWORD *)(v14 + 128) = v14 + 8;
  std::ios_base::clear((std::ios_base *)(v14 + 88), 0);
  v30 = (const std::string::value_type **)a4;

  v20 = (std::string *)operator new(0x290uLL);
  v20->__r_.__value_.__r.__words[2] = 0;
  v20[1].__r_.__value_.__s.__data_[0] = 0;
  v21 = MEMORY[0x1E0DE4F48];
  v20->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E3D5BE60;
  v20->__r_.__value_.__l.__size_ = 0;
  v22 = *(_QWORD *)(v21 + 8);
  v23 = *(_QWORD *)(v21 + 16);
  v20[1].__r_.__value_.__l.__size_ = v22;
  v24 = MEMORY[0x1E0DE4FB0];
  v25 = MEMORY[0x1E0DE4FB0] + 64;
  v20[18].__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB0] + 64;
  *(std::string::size_type *)((char *)&v20[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(v22 - 24)) = v23;
  v26 = (std::ios_base *)((char *)&v20[1].__r_.__value_.__r.__words[1]
                        + *(_QWORD *)(v20[1].__r_.__value_.__l.__size_ - 24));
  std::ios_base::init(v26, &v20[1].__r_.__value_.__r.__words[2]);
  v26[1].__vftable = 0;
  v26[1].__fmtflags_ = -1;
  v20[1].__r_.__value_.__l.__size_ = v24 + 24;
  v20[18].__r_.__value_.__r.__words[2] = v25;
  MEMORY[0x1A1AD5F3C](&v20[1].__r_.__value_.__r.__words[2]);
  if (*(char *)(v32 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20 + 25, *(const std::string::value_type **)v32, *(_QWORD *)(v32 + 8));
  }
  else
  {
    *(_OWORD *)&v20[25].__r_.__value_.__l.__data_ = *(_OWORD *)v32;
    v20[25].__r_.__value_.__r.__words[2] = *(_QWORD *)(v32 + 16);
  }
  v27 = v20 + 26;
  if (*((char *)v30 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *v30, (std::string::size_type)v30[1]);
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)v30;
    v20[26].__r_.__value_.__r.__words[2] = (std::string::size_type)v30[2];
  }
  v20[27].__r_.__value_.__r.__words[0] = v14;
  *v31 = v20 + 1;
  v31[1] = v20;

}

void sub_19C830B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, id a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;
  void *v25;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:

      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void std::default_delete<Archiver::_MemoryOStream>::operator()[abi:ne180100](id *a1)
{
  uint64_t v1;

  Archiver::_MemoryOStream::~_MemoryOStream(a1);
  MEMORY[0x1A1AD61C4](v1 + 88);
  JUMPOUT(0x1A1AD6260);
}

void Archiver::_MemoryOStream::~_MemoryOStream(id *this)
{

  std::streambuf::~streambuf();
  std::ostream::~ostream();
}

{
  uint64_t v1;

  Archiver::_MemoryOStream::~_MemoryOStream(this);
  MEMORY[0x1A1AD61C4](v1 + 88);
}

{
  uint64_t v1;

  Archiver::_MemoryOStream::~_MemoryOStream(this);
  MEMORY[0x1A1AD61C4](v1 + 88);
  JUMPOUT(0x1A1AD6260);
}

void `virtual thunk to'Archiver::_MemoryOStream::~_MemoryOStream(Archiver::_MemoryOStream *this)
{
  Archiver::_MemoryOStream::~_MemoryOStream((id *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1A1AD61C4);
}

{
  Archiver::_MemoryOStream::~_MemoryOStream((id *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void std::__shared_ptr_emplace<Archiver::_OArchiveMemoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BF78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Archiver::_OArchiveMemoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BF78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<Archiver::_OArchiveMemoryImpl>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);

  Archiver::_OArchiveImpl::~_OArchiveImpl(v1);
}

void sub_19C831274(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8313CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a8);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__6043(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__6044(uint64_t a1)
{
  return std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 48);
}

void std::__shared_ptr_pointer<Archiver::MMappedFile *,std::shared_ptr<Archiver::MMappedFile>::__shared_ptr_default_delete<Archiver::MMappedFile,Archiver::MMappedFile>,std::allocator<Archiver::MMappedFile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<Archiver::MMappedFile *,std::shared_ptr<Archiver::MMappedFile>::__shared_ptr_default_delete<Archiver::MMappedFile,Archiver::MMappedFile>,std::allocator<Archiver::MMappedFile>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN8Archiver11MMappedFileEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *Archiver::_IDataBlobImpl::_IDataBlobImpl(_QWORD *a1, __int128 *a2, _QWORD *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = &off_1E3D5B080;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = a3[1];
  a1[4] = *a3;
  a1[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void std::__shared_ptr_pointer<std::ifstream *,std::shared_ptr<std::istream>::__shared_ptr_default_delete<std::istream,std::ifstream>,std::allocator<std::ifstream>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<std::ifstream *,std::shared_ptr<std::istream>::__shared_ptr_default_delete<std::istream,std::ifstream>,std::allocator<std::ifstream>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB2F3DCLL))
    return a1 + 24;
  else
    return 0;
}

void CoreML::TreeEnsembles::Internal::buildTreeEnsembleModelFromSpec(uint64_t a1, CoreML::Archiver::PackedIntegerVector *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  std::__shared_weak_count *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t i;
  uint64_t v18;
  char *v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD **v45;
  unint64_t v46;
  int v47;
  unsigned __int8 *v48;
  int v49;
  _BOOL4 v50;
  uint64_t v51;
  const std::string *v52;
  unsigned int v53;
  CoreML::Archiver::PackedIntegerVector *v54;
  uint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t *j;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  char v80;
  uint64_t *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t *k;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  unint64_t *v106;
  unint64_t *v107;
  unint64_t v108;
  std::string::pointer data;
  _BYTE *size;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  std::string *v114;
  unint64_t *v115;
  unint64_t *v116;
  unint64_t v117;
  std::string::pointer v118;
  _BYTE *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t *v123;
  std::string *v124;
  unint64_t *v125;
  unint64_t v126;
  std::string::pointer v127;
  _BYTE *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  std::string *v133;
  unint64_t *v134;
  unint64_t v135;
  std::string::pointer v136;
  _BYTE *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::string *v142;
  unint64_t *v143;
  unint64_t *v144;
  unint64_t v145;
  std::string::pointer v146;
  _BYTE *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  std::string *v152;
  unint64_t *v153;
  unint64_t v154;
  std::string::pointer v155;
  _BYTE *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  std::string *v162;
  unint64_t *v163;
  unint64_t v164;
  std::string::pointer v165;
  _BYTE *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t *v170;
  std::string *v171;
  unint64_t *v172;
  unint64_t v173;
  std::string::pointer v174;
  _BYTE *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  std::string *v179;
  unint64_t *v180;
  unint64_t *v181;
  unint64_t v182;
  std::string::pointer v183;
  _BYTE *v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  std::string *v189;
  unint64_t *v190;
  unint64_t v191;
  std::string::pointer v192;
  _BYTE *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  std::string *v198;
  unint64_t *v199;
  unint64_t *v200;
  unint64_t v201;
  std::string::pointer v202;
  _BYTE *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  std::string *v207;
  unint64_t *v208;
  unint64_t *v209;
  unint64_t v210;
  std::string::pointer v211;
  _BYTE *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t *v216;
  std::string *v217;
  unint64_t *v218;
  unint64_t v219;
  std::string::pointer v220;
  _BYTE *v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t *v225;
  std::string *v226;
  unint64_t *v227;
  unint64_t v228;
  std::string::pointer v229;
  _BYTE *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t *v234;
  std::string *v235;
  unint64_t *v236;
  unint64_t v237;
  std::string::pointer v238;
  _BYTE *v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  std::string *v244;
  unint64_t *v245;
  unint64_t v246;
  std::string::pointer v247;
  _BYTE *v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  _QWORD **v254;
  int v255;
  std::string::size_type v256;
  int v257;
  _QWORD *v258;
  _QWORD **v259;
  uint64_t v260;
  _QWORD **v261;
  int v262;
  std::string::size_type v263;
  int v264;
  _QWORD *v265;
  _QWORD **v266;
  char v267;
  unint64_t v268;
  _QWORD **v269;
  int v270;
  std::string::size_type v271;
  int v272;
  _QWORD *v273;
  _QWORD **v274;
  int v275;
  uint64_t v276;
  _QWORD **v277;
  int v278;
  std::string::size_type v279;
  int v280;
  _QWORD *v281;
  _QWORD **v282;
  char v283;
  unint64_t v284;
  _QWORD **v285;
  int v286;
  std::string::size_type v287;
  int v288;
  _QWORD *v289;
  _QWORD **v290;
  int v291;
  uint64_t v292;
  _QWORD **v293;
  int v294;
  std::string::size_type v295;
  int v296;
  _QWORD *v297;
  _QWORD **v298;
  char v299;
  unint64_t v300;
  _QWORD **v301;
  int v302;
  std::string::size_type v303;
  int v304;
  _QWORD *v305;
  _QWORD **v306;
  int v307;
  uint64_t v308;
  _QWORD **v309;
  int v310;
  std::string::size_type v311;
  int v312;
  _QWORD *v313;
  _QWORD **v314;
  char v315;
  unint64_t v316;
  _QWORD **v317;
  int v318;
  std::string::size_type v319;
  int v320;
  _QWORD *v321;
  _QWORD **v322;
  int v323;
  uint64_t v324;
  _QWORD **v325;
  int v326;
  std::string::size_type v327;
  int v328;
  _QWORD *v329;
  _QWORD **v330;
  char v331;
  unint64_t v332;
  _QWORD **v333;
  int v334;
  std::string::size_type v335;
  int v336;
  _QWORD *v337;
  _QWORD **v338;
  int v339;
  uint64_t v340;
  _QWORD **v341;
  int v342;
  std::string::size_type v343;
  int v344;
  _QWORD *v345;
  _QWORD **v346;
  char v347;
  unint64_t v348;
  _QWORD **v349;
  int v350;
  std::string::size_type v351;
  int v352;
  _QWORD *v353;
  _QWORD **v354;
  int v355;
  uint64_t v356;
  _QWORD **v357;
  int v358;
  std::string::size_type v359;
  int v360;
  _QWORD *v361;
  _QWORD **v362;
  char v363;
  unint64_t v364;
  _QWORD **v365;
  int v366;
  std::string::size_type v367;
  int v368;
  _QWORD *v369;
  _QWORD **v370;
  int v371;
  uint64_t v372;
  _QWORD **v373;
  int v374;
  std::string::size_type v375;
  int v376;
  _QWORD *v377;
  _QWORD **v378;
  char v379;
  unint64_t v380;
  uint64_t v381;
  int v382;
  unint64_t v383;
  int v384;
  unsigned __int16 v385;
  int v386;
  char v387;
  unint64_t v388;
  double v389;
  unsigned __int16 v390;
  unsigned int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  uint64_t *v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  char *v409;
  char *v410;
  char *v411;
  unint64_t *v412;
  unint64_t v413;
  int v414;
  unint64_t v415;
  unsigned __int16 v416;
  int v417;
  unsigned __int8 v418;
  char *v419;
  unsigned int v420;
  int v421;
  int v422;
  int v423;
  uint64_t *v424;
  uint64_t *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  char *v436;
  char *v437;
  char *v438;
  unint64_t *v439;
  unint64_t v440;
  int v441;
  unint64_t v442;
  unsigned __int16 v443;
  int v444;
  unsigned __int8 v445;
  char *v446;
  unsigned int v447;
  int v448;
  int v449;
  int v450;
  uint64_t *v451;
  uint64_t *v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  unsigned int v459;
  unint64_t *v460;
  unint64_t v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  char *v465;
  char *v466;
  char *v467;
  unint64_t *v468;
  unint64_t v469;
  uint64_t v470;
  int v471;
  unint64_t v472;
  int v473;
  unsigned __int16 v474;
  int v475;
  unint64_t v476;
  unsigned int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  uint64_t *v482;
  uint64_t *v483;
  unint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  unsigned int v490;
  std::__shared_weak_count *v491;
  unint64_t *v492;
  unint64_t v493;
  std::__shared_weak_count *v494;
  unint64_t *v495;
  unint64_t v496;
  char *v497;
  char *v498;
  char *v499;
  unint64_t *v500;
  unint64_t v501;
  int v502;
  unint64_t v503;
  unsigned __int16 v504;
  int v505;
  unsigned __int8 v506;
  char *v507;
  unsigned int v508;
  int v509;
  int v510;
  int v511;
  uint64_t *v512;
  uint64_t *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t *v519;
  unint64_t v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  char *v524;
  char *v525;
  char *v526;
  unint64_t *v527;
  unint64_t v528;
  int v529;
  unint64_t v530;
  unsigned __int16 v531;
  int v532;
  unsigned __int8 v533;
  char *v534;
  unsigned int v535;
  int v536;
  int v537;
  int v538;
  uint64_t *v539;
  uint64_t *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t *v546;
  unint64_t v547;
  std::__shared_weak_count *v548;
  unint64_t *v549;
  unint64_t v550;
  char *v551;
  char *v552;
  char *v553;
  unint64_t *v554;
  unint64_t v555;
  int v556;
  unint64_t v557;
  unsigned __int16 v558;
  int v559;
  unsigned __int8 v560;
  char *v561;
  unsigned int v562;
  int v563;
  int v564;
  int v565;
  uint64_t *v566;
  uint64_t *v567;
  unint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  unsigned int v574;
  unint64_t *v575;
  unint64_t v576;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  unint64_t v579;
  char *v580;
  char *v581;
  char *v582;
  unint64_t *v583;
  unint64_t v584;
  int v585;
  unint64_t v586;
  unsigned __int16 v587;
  int v588;
  unsigned __int8 v589;
  char *v590;
  unsigned int v591;
  int v592;
  int v593;
  int v594;
  uint64_t *v595;
  uint64_t *v596;
  unint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unint64_t v602;
  unsigned int v603;
  unint64_t *v604;
  unint64_t v605;
  std::__shared_weak_count *v606;
  unint64_t *v607;
  unint64_t v608;
  char *v609;
  char *v610;
  char *v611;
  unint64_t *v612;
  unint64_t v613;
  _QWORD **v614;
  int v615;
  std::string::size_type v616;
  int v617;
  _QWORD *v618;
  _QWORD **v619;
  int v620;
  uint64_t v621;
  _QWORD **v622;
  int v623;
  std::string::size_type v624;
  int v625;
  _QWORD *v626;
  _QWORD **v627;
  char v628;
  unint64_t v629;
  _QWORD **v630;
  int v631;
  std::string::size_type v632;
  int v633;
  _QWORD *v634;
  _QWORD **v635;
  int v636;
  uint64_t v637;
  _QWORD **v638;
  int v639;
  std::string::size_type v640;
  int v641;
  _QWORD *v642;
  _QWORD **v643;
  char v644;
  unint64_t v645;
  _QWORD **v646;
  int v647;
  std::string::size_type v648;
  int v649;
  _QWORD *v650;
  _QWORD **v651;
  int v652;
  uint64_t v653;
  _QWORD **v654;
  int v655;
  std::string::size_type v656;
  int v657;
  _QWORD *v658;
  _QWORD **v659;
  char v660;
  unint64_t v661;
  _QWORD **v662;
  int v663;
  std::string::size_type v664;
  int v665;
  _QWORD *v666;
  _QWORD **v667;
  int v668;
  uint64_t v669;
  _QWORD **v670;
  int v671;
  std::string::size_type v672;
  int v673;
  _QWORD *v674;
  _QWORD **v675;
  char v676;
  unint64_t v677;
  _QWORD **v678;
  int v679;
  std::string::size_type v680;
  int v681;
  _QWORD *v682;
  _QWORD **v683;
  int v684;
  char v685;
  uint64_t v686;
  _QWORD **v687;
  int v688;
  std::string::size_type v689;
  int v690;
  _QWORD *v691;
  _QWORD **v692;
  unint64_t v693;
  _QWORD **v694;
  int v695;
  std::string::size_type v696;
  int v697;
  _QWORD *v698;
  _QWORD **v699;
  int v700;
  uint64_t v701;
  _QWORD **v702;
  int v703;
  std::string::size_type v704;
  int v705;
  _QWORD *v706;
  _QWORD **v707;
  char v708;
  unint64_t v709;
  _QWORD **v710;
  int v711;
  std::string::size_type v712;
  int v713;
  _QWORD *v714;
  _QWORD **v715;
  uint64_t v716;
  _QWORD **v717;
  int v718;
  std::string::size_type v719;
  int v720;
  _QWORD *v721;
  _QWORD **v722;
  char v723;
  unint64_t v724;
  _QWORD **v725;
  int v726;
  std::string::size_type v727;
  int v728;
  _QWORD *v729;
  _QWORD **v730;
  int v731;
  uint64_t v732;
  _QWORD **v733;
  int v734;
  std::string::size_type v735;
  int v736;
  _QWORD *v737;
  _QWORD **v738;
  char v739;
  unint64_t v740;
  uint64_t v741;
  int v742;
  unint64_t v743;
  int v744;
  unsigned __int16 v745;
  int v746;
  unint64_t v747;
  unsigned int v748;
  int v749;
  int v750;
  int v751;
  int v752;
  uint64_t *v753;
  uint64_t *v754;
  unint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  unint64_t v760;
  unsigned int v761;
  std::__shared_weak_count *v762;
  unint64_t *v763;
  unint64_t v764;
  std::__shared_weak_count *v765;
  unint64_t *v766;
  unint64_t v767;
  char *v768;
  char *v769;
  char *v770;
  unint64_t *v771;
  unint64_t v772;
  int v773;
  unint64_t v774;
  unsigned __int16 v775;
  int v776;
  unsigned __int8 v777;
  char *v778;
  unsigned int v779;
  int v780;
  int v781;
  int v782;
  uint64_t *v783;
  uint64_t *v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t *v790;
  unint64_t v791;
  std::__shared_weak_count *v792;
  unint64_t *v793;
  unint64_t v794;
  char *v795;
  char *v796;
  char *v797;
  unint64_t *v798;
  unint64_t v799;
  int v800;
  unint64_t v801;
  unsigned __int16 v802;
  int v803;
  unsigned __int8 v804;
  char *v805;
  unsigned int v806;
  int v807;
  int v808;
  int v809;
  uint64_t *v810;
  uint64_t *v811;
  unint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  unint64_t v817;
  unsigned int v818;
  unint64_t *v819;
  unint64_t v820;
  std::__shared_weak_count *v821;
  unint64_t *v822;
  unint64_t v823;
  char *v824;
  char *v825;
  char *v826;
  unint64_t *v827;
  unint64_t v828;
  int v829;
  unint64_t v830;
  unsigned __int16 v831;
  int v832;
  unsigned __int8 v833;
  char *v834;
  unsigned int v835;
  int v836;
  int v837;
  int v838;
  uint64_t *v839;
  uint64_t *v840;
  unint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  unint64_t v846;
  unsigned int v847;
  unint64_t *v848;
  unint64_t v849;
  std::__shared_weak_count *v850;
  unint64_t *v851;
  unint64_t v852;
  char *v853;
  char *v854;
  char *v855;
  unint64_t *v856;
  unint64_t v857;
  int v858;
  unint64_t v859;
  unsigned __int16 v860;
  int v861;
  unsigned __int8 v862;
  char *v863;
  unsigned int v864;
  int v865;
  int v866;
  int v867;
  uint64_t *v868;
  uint64_t *v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  unint64_t *v875;
  unint64_t v876;
  std::__shared_weak_count *v877;
  unint64_t *v878;
  unint64_t v879;
  char *v880;
  char *v881;
  char *v882;
  unint64_t *v883;
  unint64_t v884;
  int v885;
  unint64_t v886;
  unsigned __int16 v887;
  int v888;
  unsigned __int8 v889;
  char *v890;
  unsigned int v891;
  int v892;
  int v893;
  int v894;
  uint64_t *v895;
  uint64_t *v896;
  unint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  unint64_t v902;
  unsigned int v903;
  unint64_t *v904;
  unint64_t v905;
  std::__shared_weak_count *v906;
  unint64_t *v907;
  unint64_t v908;
  char *v909;
  char *v910;
  char *v911;
  unint64_t *v912;
  unint64_t v913;
  uint64_t v914;
  int v915;
  unint64_t v916;
  int v917;
  unsigned __int16 v918;
  int v919;
  char v920;
  unint64_t v921;
  double v922;
  unsigned __int16 v923;
  unsigned int v924;
  int v925;
  int v926;
  int v927;
  int v928;
  uint64_t *v929;
  uint64_t *v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  std::__shared_weak_count *v936;
  unint64_t *v937;
  unint64_t v938;
  std::__shared_weak_count *v939;
  unint64_t *v940;
  unint64_t v941;
  char *v942;
  char *v943;
  char *v944;
  unint64_t *v945;
  unint64_t v946;
  int v947;
  unint64_t v948;
  unsigned __int16 v949;
  int v950;
  unsigned __int8 v951;
  char *v952;
  unsigned int v953;
  int v954;
  int v955;
  int v956;
  uint64_t *v957;
  uint64_t *v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  unint64_t *v964;
  unint64_t v965;
  std::__shared_weak_count *v966;
  unint64_t *v967;
  unint64_t v968;
  char *v969;
  char *v970;
  char *v971;
  unint64_t *v972;
  std::runtime_error *exception;
  std::string *v974;
  __int128 v975;
  int v976;
  int v977;
  char v978;
  CoreML::Archiver::PackedIntegerVector *v979;
  CoreML::Archiver::PackedIntegerVector *v980;
  CoreML::Archiver::PackedIntegerVector *v981;
  CoreML::Archiver::PackedIntegerVector *v982;
  CoreML::Archiver::PackedIntegerVector *v983;
  CoreML::Archiver::PackedIntegerVector *v984;
  CoreML::Archiver::PackedIntegerVector *v985;
  char v986;
  CoreML::Archiver::PackedIntegerVector *v987;
  int v988;
  CoreML::Archiver::PackedIntegerVector *v989;
  CoreML::Archiver::PackedIntegerVector *v990;
  CoreML::Archiver::PackedIntegerVector *v991;
  CoreML::Archiver::PackedIntegerVector *v992;
  CoreML::Archiver::PackedIntegerVector *v993;
  CoreML::Archiver::PackedIntegerVector *v994;
  char v995;
  char v996;
  char v997;
  CoreML::Archiver::PackedIntegerVector *v998;
  char v999;
  CoreML::Archiver::PackedIntegerVector *v1000;
  CoreML::Archiver::PackedIntegerVector *v1001;
  CoreML::Archiver::PackedIntegerVector *v1002;
  CoreML::Archiver::PackedIntegerVector *v1003;
  CoreML::Archiver::PackedIntegerVector *v1004;
  CoreML::Archiver::PackedIntegerVector *v1005;
  char v1006;
  char v1007;
  char v1008;
  CoreML::Archiver::PackedIntegerVector *v1009;
  int v1010;
  char v1011;
  char v1012;
  char v1013;
  char v1014;
  char v1015;
  char v1016;
  char v1017;
  std::string *v1018;
  std::string *v1019;
  std::string *v1020;
  std::string *v1021;
  std::string *v1022;
  std::string *v1023;
  std::string *v1024;
  uint64_t v1025;
  std::string *v1026;
  std::__shared_weak_count *v1027;
  std::string *v1028;
  std::__shared_weak_count *v1029;
  std::string *v1030;
  std::__shared_weak_count *v1031;
  std::string *v1032;
  std::__shared_weak_count *v1033;
  std::string *v1034;
  std::__shared_weak_count *v1035;
  std::string *v1036;
  std::__shared_weak_count *v1037;
  std::string *v1038;
  std::__shared_weak_count *v1039;
  std::string *v1040;
  std::__shared_weak_count *v1041;
  std::string *v1042;
  std::__shared_weak_count *v1043;
  std::string *v1044;
  std::__shared_weak_count *v1045;
  std::string *v1046;
  std::__shared_weak_count *v1047;
  std::string *v1048;
  std::__shared_weak_count *v1049;
  std::string *v1050;
  std::__shared_weak_count *v1051;
  std::string *v1052;
  std::__shared_weak_count *v1053;
  std::string *v1054;
  std::__shared_weak_count *v1055;
  std::string *v1056;
  std::__shared_weak_count *v1057;
  uint64_t *v1058;
  std::__shared_weak_count *v1059;
  uint64_t *v1060;
  std::__shared_weak_count *v1061;
  void *__p[2];
  __int128 v1063;
  __int128 v1064;
  unint64_t v1065;
  _QWORD **v1066;
  _QWORD *v1067;
  uint64_t v1068;
  unint64_t v1069;
  unint64_t v1070;
  _QWORD **v1071;
  _QWORD *v1072[2];
  char v1073;
  __int16 v1074;
  unint64_t v1075;
  std::__shared_weak_count *v1076;
  std::string *v1077;
  std::__shared_weak_count *v1078;
  unint64_t __src;
  uint64_t v1080;
  uint64_t v1081;
  unint64_t v1082;
  std::__shared_weak_count *v1083;
  std::string v1084;
  int v1085;
  int v1086;
  uint64_t v1087;
  int v1088;
  _BYTE v1089[88];
  __int128 v1090;
  uint64_t v1091;
  CoreML::Archiver::MMappedContentManager *v1092;
  uint64_t v1093;
  uint64_t v1094;
  __int128 v1095;
  __int128 v1096;
  CoreML::Archiver::MMappedContentManager *v1097;
  uint64_t v1098;
  uint64_t v1099;
  __int128 v1100;
  __int128 v1101;
  CoreML::Archiver::MMappedContentManager *v1102;
  uint64_t v1103;
  uint64_t v1104;
  unint64_t v1105;
  char *v1106;
  int v1107;
  char v1108[4];
  uint64_t v1109;
  int v1110[6];

  *(_QWORD *)v1110 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v1089, "profile_number");
  if (std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*(_QWORD **)(a3 + 8), v1089))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "profile_number");
    v6 = std::map<std::string,std::string>::at(a3, __p);
    v7 = *(char *)(v6 + 23);
    if (v7 < 0)
    {
      if (*(_QWORD *)(v6 + 8) != 13)
      {
LABEL_14:
        v8 = 0;
        goto LABEL_15;
      }
      v6 = *(_QWORD *)v6;
    }
    else if (v7 != 13)
    {
      goto LABEL_14;
    }
    v9 = *(_QWORD *)v6 == 0x61665F6775626564 && *(_QWORD *)(v6 + 5) == 0x6B6361707461665FLL;
    v8 = v9;
LABEL_15:
    if (SBYTE7(v1063) < 0)
      operator delete(__p[0]);
    goto LABEL_17;
  }
  v8 = 0;
LABEL_17:
  if ((v1089[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v1089);
    if (v8)
      goto LABEL_19;
  }
  else if (v8)
  {
LABEL_19:
    v11 = *(_QWORD *)a2;
    v10 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    v1075 = *(_QWORD *)a2;
    v1076 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::map<std::string,std::string>::map[abi:ne180100](v1089, (_QWORD *)a3);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    __src = 0;
    v1080 = 99999;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, 0, (char *)&__src, (char *)&v1081, 16);
    __p[0] = *(void **)(v11 + 16);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)__p, (char *)&__p[1], 8);
    __p[0] = 0;
    v14 = *(_QWORD *)a1;
    v15 = *(char **)(a1 + 8);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, v15, (char *)__p, (char *)&__p[1], 8);
    v16 = &v15[-v14];
    for (i = 2; i != 19; ++i)
    {
      __p[0] = (void *)i;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)__p, (char *)&__p[1], 8);
      __p[0] = 0;
      v18 = *(_QWORD *)a1;
      v19 = *(char **)(a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, v19, (char *)__p, (char *)&__p[1], 8);
      v20 = &v19[-v18];
      std::to_string((std::string *)__p, i);
      std::string::basic_string[abi:ne180100]<0>(&v1084, "profile_number");
      v1077 = &v1084;
      v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v1089, &v1084, (_OWORD **)&v1077);
      v22 = (char *)v21 + 56;
      if (*((char *)v21 + 79) < 0)
        operator delete(*(void **)v22);
      *(_OWORD *)v22 = *(_OWORD *)__p;
      *((_QWORD *)v22 + 2) = v1063;
      BYTE7(v1063) = 0;
      LOBYTE(__p[0]) = 0;
      if (SHIBYTE(v1084.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v1084.__r_.__value_.__l.__data_);
        if (SBYTE7(v1063) < 0)
          operator delete(__p[0]);
      }
      v1082 = v1075;
      v1083 = v1076;
      if (v1076)
      {
        v23 = (unint64_t *)&v1076->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      CoreML::TreeEnsembles::Internal::buildTreeEnsembleModelFromSpec(__p, &v1082, v1089);
      v25 = v1083;
      if (v1083)
      {
        v26 = (unint64_t *)&v1083->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(a1, *(char **)(a1 + 8), (char *)__p[0], (char *)__p[1], (char *)__p[1] - (char *)__p[0]);
      v28 = *(char **)(a1 + 8);
      v29 = (*(_DWORD *)a1 - (int)v28) & 7;
      v1084.__r_.__value_.__s.__data_[0] = 0;
      std::vector<unsigned char>::insert((char **)a1, v28, v29, (char *)&v1084);
      *(_QWORD *)&v20[*(_QWORD *)a1] = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    *(_QWORD *)&v16[*(_QWORD *)a1] = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)&v1089[8]);
    v30 = v1076;
    if (v1076)
    {
      v31 = (unint64_t *)&v1076->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    return;
  }
  v1067 = 0;
  v1068 = 0;
  v1063 = 0u;
  v1064 = 0u;
  *(_OWORD *)__p = 0u;
  v1065 = 0;
  v1066 = &v1067;
  v1072[0] = 0;
  v1072[1] = 0;
  v1069 = 0;
  v1070 = 0;
  __p[1] = *(void **)(*(_QWORD *)a2 + 16);
  v1063 = 0uLL;
  v1071 = v1072;
  v1074 = 1;
  v1073 = 1;
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(0);
  v1067 = 0;
  v1068 = 0;
  v1066 = &v1067;
  v1064 = 0uLL;
  HIBYTE(v1074) = 1;
  v1084.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v998 = a2;
  v33 = *(uint64_t **)(*(_QWORD *)a2 + 48);
  v34 = *(uint64_t **)(*(_QWORD *)a2 + 56);
  v1025 = a1;
  if (v33 == v34)
  {
    v42 = 0;
    v1069 = 0;
    v1070 = 0;
    goto LABEL_71;
  }
  do
  {
    __src = 0;
    v1082 = 0;
    *(_QWORD *)&v1089[24] = 0;
    v35 = (uint64_t *)operator new(0x38uLL);
    *v35 = (uint64_t)&off_1E3D5B8E0;
    v35[1] = (uint64_t)&v1082;
    v35[2] = (uint64_t)__p;
    v35[3] = (uint64_t)&v1084;
    v35[4] = (uint64_t)&__src;
    v35[5] = (uint64_t)&v1077;
    v35[6] = (uint64_t)v1089;
    *(_QWORD *)&v1089[24] = v35;
    std::__function::__func<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2,std::allocator<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2>,void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::operator()(v35, v33);
    v36 = v1063;
    if ((unint64_t)v1063 <= __src)
      v36 = __src;
    *(_QWORD *)&v1063 = v36;
    *((_QWORD *)&v1063 + 1) += __src;
    v37 = v1064;
    if ((unint64_t)v1064 <= v1082)
      v37 = v1082;
    *(_QWORD *)&v1064 = v37;
    *((_QWORD *)&v1064 + 1) += v1082;
    v38 = *(_QWORD **)&v1089[24];
    if (*(_BYTE **)&v1089[24] == v1089)
    {
      v38 = v1089;
      v39 = 4;
    }
    else
    {
      if (!*(_QWORD *)&v1089[24])
        goto LABEL_55;
      v39 = 5;
    }
    (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_55:
    v33 += 2;
  }
  while (v33 != v34);
  v40 = v1066;
  v1069 = 0;
  v1070 = 0;
  if (v1066 == &v1067)
  {
    v42 = 0;
  }
  else
  {
    v41 = 0;
    v42 = 0;
    do
    {
      v43 = v40[5];
      if (v43)
      {
        if (v40[4] > v41)
          v41 = v40[4];
        v1070 = v41;
      }
      v42 += v40[4] * v43;
      v1069 = v42;
      v44 = (_QWORD *)v40[1];
      if (v44)
      {
        do
        {
          v45 = (_QWORD **)v44;
          v44 = (_QWORD *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          v45 = (_QWORD **)v40[2];
          v9 = *v45 == v40;
          v40 = v45;
        }
        while (!v9);
      }
      v40 = v45;
    }
    while (v45 != &v1067);
  }
LABEL_71:
  v46 = 8 * (*((_QWORD *)&v1064 + 1) + 6 * *((_QWORD *)&v1063 + 1) + (unint64_t)__p[1] * v42);
  v1065 = v46;
  v47 = HIBYTE(v1074);
  std::string::basic_string[abi:ne180100]<0>(v1089, "engine_version");
  if (std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*(_QWORD **)(a3 + 8), v1089))
  {
    std::string::basic_string[abi:ne180100]<0>(&v1084, "engine_version");
    v48 = (unsigned __int8 *)std::map<std::string,std::string>::at(a3, &v1084);
    v49 = (char)v48[23];
    if (v49 < 0)
    {
      if (*((_QWORD *)v48 + 1) != 1)
        goto LABEL_79;
      v48 = *(unsigned __int8 **)v48;
    }
    else if (v49 != 1)
    {
LABEL_79:
      v50 = 0;
      goto LABEL_80;
    }
    v50 = *v48 == 49;
LABEL_80:
    if (SHIBYTE(v1084.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1084.__r_.__value_.__l.__data_);
  }
  else
  {
    v50 = 0;
  }
  if ((v1089[23] & 0x80000000) != 0)
    operator delete(*(void **)v1089);
  std::string::basic_string[abi:ne180100]<0>(v1089, "profile_number");
  v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*(_QWORD **)(a3 + 8), v1089);
  if ((v1089[23] & 0x80000000) != 0)
    operator delete(*(void **)v1089);
  if (!v51)
  {
    if (!v50)
    {
      if (__p[1] == (void *)1)
      {
        v80 = 0;
      }
      else if (v1070 == 1)
      {
        v80 = 1;
      }
      else if (v1069 < (unint64_t)(3 * (uint64_t)__p[1] * *((_QWORD *)&v1064 + 1)) >> 2)
      {
        v80 = 2;
      }
      else
      {
        v80 = 3;
      }
      v104 = HIDWORD(v46);
      if (v47)
      {
        if (!v104)
          __asm { BR              X10 }
        __asm { BR              X10 }
      }
      if (!v104)
        __asm { BR              X10 }
      __asm { BR              X10 }
    }
    v54 = a2;
    if (__p[1] == (void *)1)
    {
LABEL_92:
      v55 = *(uint64_t **)v54;
      v56 = (std::__shared_weak_count *)*((_QWORD *)v54 + 1);
      v1060 = *(uint64_t **)v54;
      v1061 = v56;
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      memset(v1089, 0, 80);
      *(_DWORD *)&v1089[8] = 1;
      *(_OWORD *)&v1084.__r_.__value_.__r.__words[1] = 0uLL;
      v1084.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1084.__r_.__value_.__l.__size_;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&v1084, (uint64_t *)&v1089[16], (void **)&v1089[24], v55[2]);
      v59 = (_BYTE *)v55[3];
      v60 = (_BYTE *)v55[4];
      if (v60 != v59)
        memmove(*(void **)&v1089[24], v59, v60 - v59);
      __src = (unint64_t)v55;
      v1080 = (uint64_t)v56;
      if (v56)
      {
        v61 = (unint64_t *)&v56->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      v64 = (uint64_t *)v55[6];
      for (j = (uint64_t *)v55[7]; v64 != j; v64 += 2)
      {
        v65 = *v64;
        if (*(_BYTE *)*v64)
        {
          v66 = *(_QWORD *)(v65 + 80);
          v67 = *(_QWORD *)(v65 + 88);
          if (v66 != v67)
          {
            v68 = *(_QWORD *)&v1089[24];
            do
            {
              *(double *)(v68 + 8 * *(_QWORD *)v66) = *(double *)(v66 + 8) + *(double *)(v68 + 8 * *(_QWORD *)v66);
              v66 += 16;
            }
            while (v66 != v67);
          }
        }
        else
        {
          v69 = CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultSingleDimensionProfile,0>((uint64_t)&v1084, (uint64_t *)&v1089[32], v64);
          v70 = CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&v1084, (uint64_t *)&v1089[48], (void **)&v1089[56], 1);
          *(_QWORD *)(*(_QWORD *)&v1089[56] + 8 * v70) = v69;
        }
      }
      if (v56)
      {
        v71 = (unint64_t *)&v56->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      *(_DWORD *)&v1089[80] = *((_DWORD *)v1060 + 32);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, 0, v1089, &v1089[16], 16);
      v73 = *(char **)&v1089[24];
      v1082 = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)a1, *(_QWORD *)&v1089[16] + *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1082, (char *)&v1083, 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v73, &v73[8 * v1082], 8 * v1082);
      v74 = *(char **)&v1089[40];
      v1082 = *(_QWORD *)&v1089[32];
      std::vector<unsigned char>::reserve((unint64_t *)a1, *(_QWORD *)&v1089[32] + *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1082, (char *)&v1083, 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v74, &v74[40 * v1082], 40 * v1082);
      v75 = *(char **)&v1089[56];
      v1082 = *(_QWORD *)&v1089[48];
      std::vector<unsigned char>::reserve((unint64_t *)a1, *(_QWORD *)&v1089[48] + *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1082, (char *)&v1083, 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v75, &v75[8 * v1082], 8 * v1082);
      v76 = *(char **)&v1089[72];
      v1082 = *(_QWORD *)&v1089[64];
      std::vector<unsigned char>::reserve((unint64_t *)a1, *(_QWORD *)&v1089[64] + *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1082, (char *)&v1083, 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v76, &v76[8 * v1082], 8 * v1082);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), &v1089[80], &v1089[84], 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&v1084);
      v77 = v1061;
      if (!v1061)
        goto LABEL_1653;
      v78 = (unint64_t *)&v1061->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
    }
    else
    {
LABEL_119:
      v81 = *(uint64_t **)v54;
      v82 = (std::__shared_weak_count *)*((_QWORD *)v54 + 1);
      v1058 = *(uint64_t **)v54;
      v1059 = v82;
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      memset(v1089, 0, 80);
      *(_DWORD *)&v1089[8] = 2;
      *(_OWORD *)&v1084.__r_.__value_.__r.__words[1] = 0uLL;
      v1084.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1084.__r_.__value_.__l.__size_;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&v1084, (uint64_t *)&v1089[16], (void **)&v1089[24], v81[2]);
      v85 = (_BYTE *)v81[3];
      v86 = (_BYTE *)v81[4];
      if (v86 != v85)
        memmove(*(void **)&v1089[24], v85, v86 - v85);
      __src = (unint64_t)v81;
      v1080 = (uint64_t)v82;
      if (v82)
      {
        v87 = (unint64_t *)&v82->__shared_owners_;
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      v90 = (uint64_t *)v81[6];
      for (k = (uint64_t *)v81[7]; v90 != k; v90 += 2)
      {
        v91 = *v90;
        if (*(_BYTE *)*v90)
        {
          v92 = *(_QWORD *)(v91 + 80);
          v93 = *(_QWORD *)(v91 + 88);
          if (v92 != v93)
          {
            v94 = *(_QWORD *)&v1089[24];
            do
            {
              *(double *)(v94 + 8 * *(_QWORD *)v92) = *(double *)(v92 + 8) + *(double *)(v94 + 8 * *(_QWORD *)v92);
              v92 += 16;
            }
            while (v92 != v93);
          }
        }
        else
        {
          v95 = CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultMultiDimensionProfile,0>((uint64_t)&v1084, (uint64_t *)&v1089[32], v90);
          v96 = CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&v1084, (uint64_t *)&v1089[48], (void **)&v1089[56], 1);
          *(_QWORD *)(*(_QWORD *)&v1089[56] + 8 * v96) = v95;
        }
      }
      if (v82)
      {
        v97 = (unint64_t *)&v82->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      *(_DWORD *)&v1089[80] = *((_DWORD *)v1058 + 32);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, 0, v1089, &v1089[16], 16);
      v99 = *(char **)&v1089[24];
      v1082 = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)a1, *(_QWORD *)&v1089[16] + *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1082, (char *)&v1083, 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v99, &v99[8 * v1082], 8 * v1082);
      v100 = *(char **)&v1089[40];
      v1082 = *(_QWORD *)&v1089[32];
      std::vector<unsigned char>::reserve((unint64_t *)a1, *(_QWORD *)&v1089[32] + *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1082, (char *)&v1083, 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v100, &v100[40 * v1082], 40 * v1082);
      v101 = *(char **)&v1089[56];
      v1082 = *(_QWORD *)&v1089[48];
      std::vector<unsigned char>::reserve((unint64_t *)a1, *(_QWORD *)&v1089[48] + *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1082, (char *)&v1083, 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v101, &v101[8 * v1082], 8 * v1082);
      v102 = *(char **)&v1089[72];
      v1082 = *(_QWORD *)&v1089[64];
      std::vector<unsigned char>::reserve((unint64_t *)a1, *(_QWORD *)&v1089[64] + *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1082, (char *)&v1083, 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v102, &v102[8 * v1082], 8 * v1082);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), &v1089[80], &v1089[84], 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&v1084);
      v77 = v1059;
      if (!v1059)
        goto LABEL_1653;
      v103 = (unint64_t *)&v1059->__shared_owners_;
      do
        v79 = __ldaxr(v103);
      while (__stlxr(v79 - 1, v103));
    }
LABEL_1651:
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
    goto LABEL_1653;
  }
  std::string::basic_string[abi:ne180100]<0>(v1089, "profile_number");
  v52 = (const std::string *)std::map<std::string,std::string>::at(a3, v1089);
  v53 = std::stoul(v52, 0, 10);
  v54 = v998;
  if ((v1089[23] & 0x80000000) != 0)
    operator delete(*(void **)v1089);
  switch(v53)
  {
    case 1u:
      goto LABEL_92;
    case 2u:
      goto LABEL_119;
    case 3u:
      v105 = *(std::string **)v998;
      v106 = (unint64_t *)*((_QWORD *)v998 + 1);
      v1056 = *(std::string **)v998;
      v1057 = (std::__shared_weak_count *)v106;
      if (v106)
      {
        v107 = v106 + 1;
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 3;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v105->__r_.__value_.__r.__words[2]);
      data = v105[1].__r_.__value_.__l.__data_;
      size = (_BYTE *)v105[1].__r_.__value_.__l.__size_;
      if (size != data)
        memmove(*(void **)&v1089[24], data, size - data);
      v1077 = v105;
      v1078 = (std::__shared_weak_count *)v106;
      if (v106)
      {
        v111 = v106 + 1;
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
        v1082 = (unint64_t)v105;
        v1083 = (std::__shared_weak_count *)v106;
        do
          v113 = __ldxr(v111);
        while (__stxr(v113 + 1, v111));
      }
      else
      {
        v1082 = (unint64_t)v105;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v364) = 0;
      else
        v364 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v365 = v1071;
      if (v1071 == v1072)
        goto LABEL_624;
      while (!v365[5])
      {
LABEL_618:
        v369 = v365[1];
        if (v369)
        {
          do
          {
            v370 = (_QWORD **)v369;
            v369 = (_QWORD *)*v369;
          }
          while (v369);
        }
        else
        {
          do
          {
            v370 = (_QWORD **)v365[2];
            v9 = *v370 == v365;
            v365 = v370;
          }
          while (!v9);
        }
        v365 = v370;
        if (v370 == v1072)
        {
LABEL_624:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
          v371 = 4;
          v1017 = v1074;
          v372 = 4;
          goto LABEL_952;
        }
      }
      if (v1084.__r_.__value_.__l.__size_)
      {
        v366 = *((_DWORD *)v365 + 8);
        v367 = v1084.__r_.__value_.__l.__size_;
        do
        {
          v368 = *(_DWORD *)(v367 + 28);
          if (v366 >= v368)
          {
            if (v368 >= v366)
              goto LABEL_618;
            v367 += 8;
          }
          v367 = *(_QWORD *)v367;
        }
        while (v367);
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      }
      v1109 = 0x200000001;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v373 = v1071;
      if (v1071 == v1072)
      {
LABEL_640:
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        if ((_BYTE)v1074)
          v379 = 3;
        else
          v379 = 2;
        v1017 = v379;
        v372 = 4;
      }
      else
      {
        while (!v373[5])
        {
LABEL_634:
          v377 = v373[1];
          if (v377)
          {
            do
            {
              v378 = (_QWORD **)v377;
              v377 = (_QWORD *)*v377;
            }
            while (v377);
          }
          else
          {
            do
            {
              v378 = (_QWORD **)v373[2];
              v9 = *v378 == v373;
              v373 = v378;
            }
            while (!v9);
          }
          v373 = v378;
          if (v378 == v1072)
            goto LABEL_640;
        }
        if (v1084.__r_.__value_.__l.__size_)
        {
          v374 = *((_DWORD *)v373 + 8);
          v375 = v1084.__r_.__value_.__l.__size_;
          do
          {
            v376 = *(_DWORD *)(v375 + 28);
            if (v374 >= v376)
            {
              if (v376 >= v374)
                goto LABEL_634;
              v375 += 8;
            }
            v375 = *(_QWORD *)v375;
          }
          while (v375);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        }
        v372 = 6;
        v1017 = 4;
      }
      v371 = v372;
LABEL_952:
      v584 = v1063 - 1;
      if ((uint64_t)v1063 - 1 <= (unint64_t)v1064)
        v584 = v1064;
      v1005 = (CoreML::Archiver::PackedIntegerVector *)v105;
      if (v584)
        v585 = vcvtpd_u64_f64(log2((double)v584)) + 1;
      else
        LOBYTE(v585) = 0;
      v586 = (v364 + (unint64_t)v585 + v372 + 7) >> 3;
      v587 = v586 + 4;
      v985 = (CoreML::Archiver::PackedIntegerVector *)v106;
      if (*((_QWORD *)&v1063 + 1))
        v588 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
      else
        v588 = 0;
      v589 = __p[1];
      v590 = (char *)__p[1] - 1;
      if (__p[1] != (void *)1)
        LODWORD(v590) = vcvtpd_u64_f64(log2((double)(unint64_t)v590)) + 1;
      *(_DWORD *)&v1089[32] = 0;
      *(_WORD *)&v1089[36] = v586 + 4;
      v1089[38] = v364;
      v1089[39] = v371;
      *(_WORD *)&v1089[40] = v585;
      v1089[42] = v588;
      *(_WORD *)&v1089[43] = v590;
      v1089[45] = v1017;
      *(_DWORD *)&v1089[46] = 0;
      *(_QWORD *)&v1089[56] = v589;
      LODWORD(v1084.__r_.__value_.__l.__data_) = ~(-1 << v364);
      HIDWORD(v1084.__r_.__value_.__r.__words[0]) = v364 >> 3;
      LODWORD(v1084.__r_.__value_.__r.__words[1]) = v364 & 7;
      HIDWORD(v1084.__r_.__value_.__r.__words[1]) = ~(-1 << v371);
      v591 = ((-(char)v585 - ((_BYTE)v371 + (_BYTE)v364)) & 7) + v371 + v364;
      LODWORD(v1084.__r_.__value_.__r.__words[2]) = v591 >> 3;
      HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v591 & 7;
      v1085 = ~(-1 << v585);
      v1086 = v586;
      if (v588 - 25 >= 0x27)
        v592 = 0;
      else
        v592 = -v588 & 7;
      v593 = v592 + v588;
      if (v590 - 25 >= 0x27)
        v594 = 0;
      else
        v594 = -(int)v590 & 7;
      *(_DWORD *)&v1089[84] = v593;
      DWORD1(v1095) = v594 + v590;
      DWORD1(v1100) = 0;
      v595 = (uint64_t *)*((_QWORD *)v1005 + 6);
      v596 = (uint64_t *)*((_QWORD *)v1005 + 7);
      if (v595 != v596)
      {
        v597 = 0;
        do
        {
          v598 = *v595;
          if (*(_BYTE *)*v595)
          {
            v599 = *(_QWORD *)(v598 + 80);
            v600 = *(_QWORD *)(v598 + 88);
            if (v599 != v600)
            {
              v601 = *(_QWORD *)&v1089[24];
              do
              {
                *(double *)(v601 + 8 * *(_QWORD *)v599) = *(double *)(v599 + 8)
                                                          + *(double *)(v601 + 8 * *(_QWORD *)v599);
                v599 += 16;
              }
              while (v599 != v600);
            }
          }
          else
          {
            v602 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v602);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v597);
            v603 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v597);
            CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>((uint64_t)&__src, (uint64_t)&v1089[32], &v1084, v603, v595);
            ++v597;
          }
          v595 += 2;
        }
        while (v595 != v596);
        v587 = *(_WORD *)&v1089[36];
      }
      v1109 = *(_QWORD *)&v1089[64] * v587;
      CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v587);
      ++*(_QWORD *)&v1089[64];
      if (v985)
      {
        v604 = (unint64_t *)((char *)v985 + 8);
        do
          v605 = __ldaxr(v604);
        while (__stlxr(v605 - 1, v604));
        if (!v605)
        {
          (*(void (**)(CoreML::Archiver::PackedIntegerVector *))(*(_QWORD *)v985 + 16))(v985);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v985);
        }
      }
      v606 = v1078;
      if (v1078)
      {
        v607 = (unint64_t *)&v1078->__shared_owners_;
        do
          v608 = __ldaxr(v607);
        while (__stlxr(v608 - 1, v607));
        if (!v608)
        {
          ((void (*)(std::__shared_weak_count *))v606->__on_zero_shared)(v606);
          std::__shared_weak_count::__release_weak(v606);
        }
      }
      v1107 = v1056[5].__r_.__value_.__r.__words[1];
      *(_QWORD *)(v1025 + 8) = 0;
      *(_QWORD *)(v1025 + 16) = 0;
      *(_QWORD *)v1025 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, 0, v1089, &v1089[16], 16);
      v609 = *(char **)&v1089[24];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, *(_QWORD *)&v1089[16] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v609, &v609[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), &v1089[32], &v1089[64], 32);
      v610 = *(char **)&v1089[72];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v610, &v610[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)v1025, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)v1025, 1);
      v611 = v1106;
      v1084.__r_.__value_.__r.__words[0] = v1105;
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1105 + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v611, &v611[4 * v1084.__r_.__value_.__r.__words[0]], 4 * v1084.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)v1025, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1107, v1108, 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
      v77 = v1057;
      if (!v1057)
        goto LABEL_1653;
      v612 = (unint64_t *)&v1057->__shared_owners_;
      do
        v79 = __ldaxr(v612);
      while (__stlxr(v79 - 1, v612));
      goto LABEL_1651;
    case 4u:
      v142 = *(std::string **)v998;
      v143 = (unint64_t *)*((_QWORD *)v998 + 1);
      v1054 = *(std::string **)v998;
      v1055 = (std::__shared_weak_count *)v143;
      if (v143)
      {
        v144 = v143 + 1;
        do
          v145 = __ldxr(v144);
        while (__stxr(v145 + 1, v144));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 4;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v142->__r_.__value_.__r.__words[2]);
      v146 = v142[1].__r_.__value_.__l.__data_;
      v147 = (_BYTE *)v142[1].__r_.__value_.__l.__size_;
      if (v147 != v146)
        memmove(*(void **)&v1089[24], v146, v147 - v146);
      v1077 = v142;
      v1078 = (std::__shared_weak_count *)v143;
      if (v143)
      {
        v148 = v143 + 1;
        do
          v149 = __ldxr(v148);
        while (__stxr(v149 + 1, v148));
        v1082 = (unint64_t)v142;
        v1083 = (std::__shared_weak_count *)v143;
        do
          v150 = __ldxr(v148);
        while (__stxr(v150 + 1, v148));
      }
      else
      {
        v1082 = (unint64_t)v142;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v284) = 0;
      else
        v284 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v285 = v1071;
      if (v1071 == v1072)
        goto LABEL_429;
      while (!v285[5])
      {
LABEL_423:
        v289 = v285[1];
        if (v289)
        {
          do
          {
            v290 = (_QWORD **)v289;
            v289 = (_QWORD *)*v289;
          }
          while (v289);
        }
        else
        {
          do
          {
            v290 = (_QWORD **)v285[2];
            v9 = *v290 == v285;
            v285 = v290;
          }
          while (!v9);
        }
        v285 = v290;
        if (v290 == v1072)
        {
LABEL_429:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
          v291 = 4;
          v1012 = v1074;
          v292 = 4;
          goto LABEL_736;
        }
      }
      if (v1084.__r_.__value_.__l.__size_)
      {
        v286 = *((_DWORD *)v285 + 8);
        v287 = v1084.__r_.__value_.__l.__size_;
        do
        {
          v288 = *(_DWORD *)(v287 + 28);
          if (v286 >= v288)
          {
            if (v288 >= v286)
              goto LABEL_423;
            v287 += 8;
          }
          v287 = *(_QWORD *)v287;
        }
        while (v287);
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      }
      v1109 = 0x200000001;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v293 = v1071;
      if (v1071 == v1072)
      {
LABEL_445:
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        if ((_BYTE)v1074)
          v299 = 3;
        else
          v299 = 2;
        v1012 = v299;
        v292 = 4;
      }
      else
      {
        while (!v293[5])
        {
LABEL_439:
          v297 = v293[1];
          if (v297)
          {
            do
            {
              v298 = (_QWORD **)v297;
              v297 = (_QWORD *)*v297;
            }
            while (v297);
          }
          else
          {
            do
            {
              v298 = (_QWORD **)v293[2];
              v9 = *v298 == v293;
              v293 = v298;
            }
            while (!v9);
          }
          v293 = v298;
          if (v298 == v1072)
            goto LABEL_445;
        }
        if (v1084.__r_.__value_.__l.__size_)
        {
          v294 = *((_DWORD *)v293 + 8);
          v295 = v1084.__r_.__value_.__l.__size_;
          do
          {
            v296 = *(_DWORD *)(v295 + 28);
            if (v294 >= v296)
            {
              if (v296 >= v294)
                goto LABEL_439;
              v295 += 8;
            }
            v295 = *(_QWORD *)v295;
          }
          while (v295);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        }
        v292 = 6;
        v1012 = 4;
      }
      v291 = v292;
LABEL_736:
      v440 = v1063 - 1;
      if ((uint64_t)v1063 - 1 <= (unint64_t)v1064)
        v440 = v1064;
      v1001 = (CoreML::Archiver::PackedIntegerVector *)v142;
      if (v440)
        v441 = vcvtpd_u64_f64(log2((double)v440)) + 1;
      else
        LOBYTE(v441) = 0;
      v442 = (v284 + (unint64_t)v441 + v292 + 7) >> 3;
      v443 = v442 + 4;
      v983 = (CoreML::Archiver::PackedIntegerVector *)v143;
      if (*((_QWORD *)&v1063 + 1))
        v444 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
      else
        v444 = 0;
      v445 = __p[1];
      v446 = (char *)__p[1] - 1;
      if (__p[1] != (void *)1)
        LODWORD(v446) = vcvtpd_u64_f64(log2((double)(unint64_t)v446)) + 1;
      *(_DWORD *)&v1089[32] = 0;
      *(_WORD *)&v1089[36] = v442 + 4;
      v1089[38] = v284;
      v1089[39] = v291;
      *(_WORD *)&v1089[40] = v441;
      v1089[42] = v444;
      *(_WORD *)&v1089[43] = v446;
      v1089[45] = v1012;
      *(_DWORD *)&v1089[46] = 0;
      *(_QWORD *)&v1089[56] = v445;
      LODWORD(v1084.__r_.__value_.__l.__data_) = ~(-1 << v284);
      HIDWORD(v1084.__r_.__value_.__r.__words[0]) = v284 >> 3;
      LODWORD(v1084.__r_.__value_.__r.__words[1]) = v284 & 7;
      HIDWORD(v1084.__r_.__value_.__r.__words[1]) = ~(-1 << v291);
      v447 = ((-(char)v441 - ((_BYTE)v291 + (_BYTE)v284)) & 7) + v291 + v284;
      LODWORD(v1084.__r_.__value_.__r.__words[2]) = v447 >> 3;
      HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v447 & 7;
      v1085 = ~(-1 << v441);
      v1086 = v442;
      if (v444 - 25 >= 0x27)
        v448 = 0;
      else
        v448 = -v444 & 7;
      v449 = v448 + v444;
      if (v446 - 25 >= 0x27)
        v450 = 0;
      else
        v450 = -(int)v446 & 7;
      *(_DWORD *)&v1089[84] = v449;
      DWORD1(v1095) = v450 + v446;
      DWORD1(v1100) = 0;
      v451 = (uint64_t *)*((_QWORD *)v1001 + 6);
      v452 = (uint64_t *)*((_QWORD *)v1001 + 7);
      if (v451 != v452)
      {
        v453 = 0;
        do
        {
          v454 = *v451;
          if (*(_BYTE *)*v451)
          {
            v455 = *(_QWORD *)(v454 + 80);
            v456 = *(_QWORD *)(v454 + 88);
            if (v455 != v456)
            {
              v457 = *(_QWORD *)&v1089[24];
              do
              {
                *(double *)(v457 + 8 * *(_QWORD *)v455) = *(double *)(v455 + 8)
                                                          + *(double *)(v457 + 8 * *(_QWORD *)v455);
                v455 += 16;
              }
              while (v455 != v456);
            }
          }
          else
          {
            v458 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v458);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v453);
            v459 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v453);
            CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>((uint64_t)&__src, (uint64_t)&v1089[32], &v1084, v459, v451);
            ++v453;
          }
          v451 += 2;
        }
        while (v451 != v452);
        v443 = *(_WORD *)&v1089[36];
      }
      v1109 = *(_QWORD *)&v1089[64] * v443;
      CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v443);
      ++*(_QWORD *)&v1089[64];
      if (v983)
      {
        v460 = (unint64_t *)((char *)v983 + 8);
        do
          v461 = __ldaxr(v460);
        while (__stlxr(v461 - 1, v460));
        if (!v461)
        {
          (*(void (**)(CoreML::Archiver::PackedIntegerVector *))(*(_QWORD *)v983 + 16))(v983);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v983);
        }
      }
      v462 = v1078;
      if (v1078)
      {
        v463 = (unint64_t *)&v1078->__shared_owners_;
        do
          v464 = __ldaxr(v463);
        while (__stlxr(v464 - 1, v463));
        if (!v464)
        {
          ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
          std::__shared_weak_count::__release_weak(v462);
        }
      }
      v1107 = v1054[5].__r_.__value_.__r.__words[1];
      *(_QWORD *)(v1025 + 8) = 0;
      *(_QWORD *)(v1025 + 16) = 0;
      *(_QWORD *)v1025 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, 0, v1089, &v1089[16], 16);
      v465 = *(char **)&v1089[24];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, *(_QWORD *)&v1089[16] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v465, &v465[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), &v1089[32], &v1089[64], 32);
      v466 = *(char **)&v1089[72];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v466, &v466[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)v1025, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)v1025, 1);
      v467 = v1106;
      v1084.__r_.__value_.__r.__words[0] = v1105;
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1105 + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v467, &v467[4 * v1084.__r_.__value_.__r.__words[0]], 4 * v1084.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)v1025, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1107, v1108, 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
      v77 = v1055;
      if (!v1055)
        goto LABEL_1653;
      v468 = (unint64_t *)&v1055->__shared_owners_;
      do
        v79 = __ldaxr(v468);
      while (__stlxr(v79 - 1, v468));
      goto LABEL_1651;
    case 5u:
      v152 = *(std::string **)v998;
      v151 = (std::__shared_weak_count *)*((_QWORD *)v998 + 1);
      v1052 = *(std::string **)v998;
      v1053 = v151;
      if (v151)
      {
        v153 = (unint64_t *)&v151->__shared_owners_;
        do
          v154 = __ldxr(v153);
        while (__stxr(v154 + 1, v153));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 5;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v152->__r_.__value_.__r.__words[2]);
      v155 = v152[1].__r_.__value_.__l.__data_;
      v156 = (_BYTE *)v152[1].__r_.__value_.__l.__size_;
      if (v156 != v155)
        memmove(*(void **)&v1089[24], v155, v156 - v155);
      v1077 = v152;
      v1078 = v151;
      if (v151)
      {
        v157 = (unint64_t *)&v151->__shared_owners_;
        do
          v158 = __ldxr(v157);
        while (__stxr(v158 + 1, v157));
        v1082 = (unint64_t)v152;
        v1083 = v151;
        v159 = (unint64_t *)&v151->__shared_owners_;
        do
          v160 = __ldxr(v159);
        while (__stxr(v160 + 1, v159));
      }
      else
      {
        v1082 = (unint64_t)v152;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v300) = 0;
      else
        v300 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v301 = v1071;
      if (v1071 == v1072)
        goto LABEL_468;
      while (!v301[5])
      {
LABEL_462:
        v305 = v301[1];
        if (v305)
        {
          do
          {
            v306 = (_QWORD **)v305;
            v305 = (_QWORD *)*v305;
          }
          while (v305);
        }
        else
        {
          do
          {
            v306 = (_QWORD **)v301[2];
            v9 = *v306 == v301;
            v301 = v306;
          }
          while (!v9);
        }
        v301 = v306;
        if (v306 == v1072)
        {
LABEL_468:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
          v307 = 4;
          v1013 = v1074;
          v308 = 4;
          goto LABEL_778;
        }
      }
      if (v1084.__r_.__value_.__l.__size_)
      {
        v302 = *((_DWORD *)v301 + 8);
        v303 = v1084.__r_.__value_.__l.__size_;
        do
        {
          v304 = *(_DWORD *)(v303 + 28);
          if (v302 >= v304)
          {
            if (v304 >= v302)
              goto LABEL_462;
            v303 += 8;
          }
          v303 = *(_QWORD *)v303;
        }
        while (v303);
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      }
      v1109 = 0x200000001;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v309 = v1071;
      if (v1071 == v1072)
      {
LABEL_484:
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        if ((_BYTE)v1074)
          v315 = 3;
        else
          v315 = 2;
        v1013 = v315;
        v308 = 4;
      }
      else
      {
        while (!v309[5])
        {
LABEL_478:
          v313 = v309[1];
          if (v313)
          {
            do
            {
              v314 = (_QWORD **)v313;
              v313 = (_QWORD *)*v313;
            }
            while (v313);
          }
          else
          {
            do
            {
              v314 = (_QWORD **)v309[2];
              v9 = *v314 == v309;
              v309 = v314;
            }
            while (!v9);
          }
          v309 = v314;
          if (v314 == v1072)
            goto LABEL_484;
        }
        if (v1084.__r_.__value_.__l.__size_)
        {
          v310 = *((_DWORD *)v309 + 8);
          v311 = v1084.__r_.__value_.__l.__size_;
          do
          {
            v312 = *(_DWORD *)(v311 + 28);
            if (v310 >= v312)
            {
              if (v312 >= v310)
                goto LABEL_478;
              v311 += 8;
            }
            v311 = *(_QWORD *)v311;
          }
          while (v311);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        }
        v308 = 6;
        v1013 = 4;
      }
      v307 = v308;
LABEL_778:
      v994 = (CoreML::Archiver::PackedIntegerVector *)v152;
      v469 = (unint64_t)__p[1];
      v470 = v1063 - 1;
      if ((unint64_t)(v1063 - 1) <= (uint64_t)__p[1] * (uint64_t)v1064)
        v470 = (uint64_t)__p[1] * v1064;
      if (v470)
        v471 = vcvtpd_u64_f64(log2((double)(unint64_t)v470)) + 1;
      else
        LOBYTE(v471) = 0;
      v472 = (v300 + (unint64_t)v471 + v308 + 7) >> 3;
      if (*((_QWORD *)&v1063 + 1))
        v473 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
      else
        v473 = 0;
      v474 = v472 + 4;
      if (v469 == 1)
        v475 = 1;
      else
        v475 = vcvtpd_u64_f64(log2((double)(v469 - 1))) + 2;
      v476 = *((_QWORD *)&v1064 + 1) * v469;
      if (*((_QWORD *)&v1064 + 1) * v469)
        LODWORD(v476) = vcvtpd_u64_f64(log2((double)v476)) + 1;
      *(_DWORD *)&v1089[32] = 0;
      *(_WORD *)&v1089[36] = v472 + 4;
      v1089[38] = v300;
      v1089[39] = v307;
      *(_WORD *)&v1089[40] = v471;
      v1089[42] = v473;
      v1089[43] = v475;
      v1089[44] = v476;
      v1089[45] = v1013;
      *(_DWORD *)&v1089[46] = 0;
      *(_QWORD *)&v1089[56] = v469;
      LODWORD(v1084.__r_.__value_.__l.__data_) = ~(-1 << v300);
      HIDWORD(v1084.__r_.__value_.__r.__words[0]) = v300 >> 3;
      LODWORD(v1084.__r_.__value_.__r.__words[1]) = v300 & 7;
      HIDWORD(v1084.__r_.__value_.__r.__words[1]) = ~(-1 << v307);
      v477 = ((-(char)v471 - ((_BYTE)v307 + (_BYTE)v300)) & 7) + v307 + v300;
      LODWORD(v1084.__r_.__value_.__r.__words[2]) = v477 >> 3;
      HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v477 & 7;
      v1085 = ~(-1 << v471);
      v1086 = v472;
      if (v473 - 25 >= 0x27)
        v478 = 0;
      else
        v478 = -v473 & 7;
      v479 = v478 + v473;
      if (v475 - 25 >= 0x27)
        v480 = 0;
      else
        v480 = -v475 & 7;
      *(_DWORD *)&v1089[84] = v479;
      DWORD1(v1095) = v480 + v475;
      if (v476 - 25 >= 0x27)
        v481 = 0;
      else
        v481 = -(int)v476 & 7;
      DWORD1(v1100) = v481 + v476;
      v482 = (uint64_t *)*((_QWORD *)v994 + 6);
      v483 = (uint64_t *)*((_QWORD *)v994 + 7);
      if (v482 != v483)
      {
        v484 = 0;
        do
        {
          v485 = *v482;
          if (*(_BYTE *)*v482)
          {
            v486 = *(_QWORD *)(v485 + 80);
            v487 = *(_QWORD *)(v485 + 88);
            if (v486 != v487)
            {
              v488 = *(_QWORD *)&v1089[24];
              do
              {
                *(double *)(v488 + 8 * *(_QWORD *)v486) = *(double *)(v486 + 8)
                                                          + *(double *)(v488 + 8 * *(_QWORD *)v486);
                v486 += 16;
              }
              while (v486 != v487);
            }
          }
          else
          {
            v489 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v489);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v484);
            CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1100, v1105);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v1105);
            v490 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v484);
            CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>((uint64_t)&__src, (uint64_t)&v1089[32], &v1084, v490, v482);
            ++v484;
          }
          v482 += 2;
        }
        while (v482 != v483);
        v474 = *(_WORD *)&v1089[36];
      }
      v1109 = *(_QWORD *)&v1089[64] * v474;
      CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v474);
      ++*(_QWORD *)&v1089[64];
      v491 = v1083;
      if (v1083)
      {
        v492 = (unint64_t *)&v1083->__shared_owners_;
        do
          v493 = __ldaxr(v492);
        while (__stlxr(v493 - 1, v492));
        if (!v493)
        {
          ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
          std::__shared_weak_count::__release_weak(v491);
        }
      }
      v494 = v1078;
      if (v1078)
      {
        v495 = (unint64_t *)&v1078->__shared_owners_;
        do
          v496 = __ldaxr(v495);
        while (__stlxr(v496 - 1, v495));
        if (!v496)
        {
          ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
          std::__shared_weak_count::__release_weak(v494);
        }
      }
      v1107 = v1052[5].__r_.__value_.__r.__words[1];
      *(_QWORD *)(v1025 + 8) = 0;
      *(_QWORD *)(v1025 + 16) = 0;
      *(_QWORD *)v1025 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, 0, v1089, &v1089[16], 16);
      v497 = *(char **)&v1089[24];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, *(_QWORD *)&v1089[16] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v497, &v497[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), &v1089[32], &v1089[64], 32);
      v498 = *(char **)&v1089[72];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v498, &v498[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)v1025, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)v1025, 1);
      v499 = v1106;
      v1084.__r_.__value_.__r.__words[0] = v1105;
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1105 + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v499, &v499[4 * v1084.__r_.__value_.__r.__words[0]], 4 * v1084.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)v1025, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1107, v1108, 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
      v77 = v1053;
      if (!v1053)
        goto LABEL_1653;
      v500 = (unint64_t *)&v1053->__shared_owners_;
      do
        v79 = __ldaxr(v500);
      while (__stlxr(v79 - 1, v500));
      goto LABEL_1651;
    case 6u:
      v179 = *(std::string **)v998;
      v180 = (unint64_t *)*((_QWORD *)v998 + 1);
      v1050 = *(std::string **)v998;
      v1051 = (std::__shared_weak_count *)v180;
      if (v180)
      {
        v181 = v180 + 1;
        do
          v182 = __ldxr(v181);
        while (__stxr(v182 + 1, v181));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 6;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v179->__r_.__value_.__r.__words[2]);
      v183 = v179[1].__r_.__value_.__l.__data_;
      v184 = (_BYTE *)v179[1].__r_.__value_.__l.__size_;
      if (v184 != v183)
        memmove(*(void **)&v1089[24], v183, v184 - v183);
      v1077 = v179;
      v1078 = (std::__shared_weak_count *)v180;
      if (v180)
      {
        v185 = v180 + 1;
        do
          v186 = __ldxr(v185);
        while (__stxr(v186 + 1, v185));
        v1082 = (unint64_t)v179;
        v1083 = (std::__shared_weak_count *)v180;
        do
          v187 = __ldxr(v185);
        while (__stxr(v187 + 1, v185));
      }
      else
      {
        v1082 = (unint64_t)v179;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v348) = 0;
      else
        v348 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v349 = v1071;
      if (v1071 == v1072)
        goto LABEL_585;
      while (!v349[5])
      {
LABEL_579:
        v353 = v349[1];
        if (v353)
        {
          do
          {
            v354 = (_QWORD **)v353;
            v353 = (_QWORD *)*v353;
          }
          while (v353);
        }
        else
        {
          do
          {
            v354 = (_QWORD **)v349[2];
            v9 = *v354 == v349;
            v349 = v354;
          }
          while (!v9);
        }
        v349 = v354;
        if (v354 == v1072)
        {
LABEL_585:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
          v355 = 4;
          v1016 = v1074;
          v356 = 4;
          goto LABEL_910;
        }
      }
      if (v1084.__r_.__value_.__l.__size_)
      {
        v350 = *((_DWORD *)v349 + 8);
        v351 = v1084.__r_.__value_.__l.__size_;
        do
        {
          v352 = *(_DWORD *)(v351 + 28);
          if (v350 >= v352)
          {
            if (v352 >= v350)
              goto LABEL_579;
            v351 += 8;
          }
          v351 = *(_QWORD *)v351;
        }
        while (v351);
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      }
      v1109 = 0x200000001;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v357 = v1071;
      if (v1071 == v1072)
      {
LABEL_601:
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        if ((_BYTE)v1074)
          v363 = 3;
        else
          v363 = 2;
        v1016 = v363;
        v356 = 4;
      }
      else
      {
        while (!v357[5])
        {
LABEL_595:
          v361 = v357[1];
          if (v361)
          {
            do
            {
              v362 = (_QWORD **)v361;
              v361 = (_QWORD *)*v361;
            }
            while (v361);
          }
          else
          {
            do
            {
              v362 = (_QWORD **)v357[2];
              v9 = *v362 == v357;
              v357 = v362;
            }
            while (!v9);
          }
          v357 = v362;
          if (v362 == v1072)
            goto LABEL_601;
        }
        if (v1084.__r_.__value_.__l.__size_)
        {
          v358 = *((_DWORD *)v357 + 8);
          v359 = v1084.__r_.__value_.__l.__size_;
          do
          {
            v360 = *(_DWORD *)(v359 + 28);
            if (v358 >= v360)
            {
              if (v360 >= v358)
                goto LABEL_595;
              v359 += 8;
            }
            v359 = *(_QWORD *)v359;
          }
          while (v359);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        }
        v356 = 6;
        v1016 = 4;
      }
      v355 = v356;
LABEL_910:
      v555 = v1063 - 1;
      if ((uint64_t)v1063 - 1 <= (unint64_t)v1064)
        v555 = v1064;
      v1004 = (CoreML::Archiver::PackedIntegerVector *)v179;
      if (v555)
        v556 = vcvtpd_u64_f64(log2((double)v555)) + 1;
      else
        LOBYTE(v556) = 0;
      v557 = (v348 + (unint64_t)v556 + v356 + 7) >> 3;
      v558 = v557 + 4;
      v984 = (CoreML::Archiver::PackedIntegerVector *)v180;
      if (*((_QWORD *)&v1063 + 1))
        v559 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
      else
        v559 = 0;
      v560 = __p[1];
      v561 = (char *)__p[1] - 1;
      if (__p[1] != (void *)1)
        LODWORD(v561) = vcvtpd_u64_f64(log2((double)(unint64_t)v561)) + 1;
      *(_DWORD *)&v1089[32] = 0;
      *(_WORD *)&v1089[36] = v557 + 4;
      v1089[38] = v348;
      v1089[39] = v355;
      *(_WORD *)&v1089[40] = v556;
      v1089[42] = v559;
      *(_WORD *)&v1089[43] = v561;
      v1089[45] = v1016;
      *(_DWORD *)&v1089[46] = 0;
      *(_QWORD *)&v1089[56] = v560;
      LODWORD(v1084.__r_.__value_.__l.__data_) = ~(-1 << v348);
      HIDWORD(v1084.__r_.__value_.__r.__words[0]) = v348 >> 3;
      LODWORD(v1084.__r_.__value_.__r.__words[1]) = v348 & 7;
      HIDWORD(v1084.__r_.__value_.__r.__words[1]) = ~(-1 << v355);
      v562 = ((-(char)v556 - ((_BYTE)v355 + (_BYTE)v348)) & 7) + v355 + v348;
      LODWORD(v1084.__r_.__value_.__r.__words[2]) = v562 >> 3;
      HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v562 & 7;
      v1085 = ~(-1 << v556);
      v1086 = v557;
      if (v559 - 25 >= 0x27)
        v563 = 0;
      else
        v563 = -v559 & 7;
      v564 = v563 + v559;
      if (v561 - 25 >= 0x27)
        v565 = 0;
      else
        v565 = -(int)v561 & 7;
      *(_DWORD *)&v1089[84] = v564;
      DWORD1(v1095) = v565 + v561;
      DWORD1(v1100) = 0;
      v566 = (uint64_t *)*((_QWORD *)v1004 + 6);
      v567 = (uint64_t *)*((_QWORD *)v1004 + 7);
      if (v566 != v567)
      {
        v568 = 0;
        do
        {
          v569 = *v566;
          if (*(_BYTE *)*v566)
          {
            v570 = *(_QWORD *)(v569 + 80);
            v571 = *(_QWORD *)(v569 + 88);
            if (v570 != v571)
            {
              v572 = *(_QWORD *)&v1089[24];
              do
              {
                *(double *)(v572 + 8 * *(_QWORD *)v570) = *(double *)(v570 + 8)
                                                          + *(double *)(v572 + 8 * *(_QWORD *)v570);
                v570 += 16;
              }
              while (v570 != v571);
            }
          }
          else
          {
            v573 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v573);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v568);
            v574 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v568);
            CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>((uint64_t)&__src, (uint64_t)&v1089[32], &v1084, v574, v566);
            ++v568;
          }
          v566 += 2;
        }
        while (v566 != v567);
        v558 = *(_WORD *)&v1089[36];
      }
      v1109 = *(_QWORD *)&v1089[64] * v558;
      CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v558);
      ++*(_QWORD *)&v1089[64];
      if (v984)
      {
        v575 = (unint64_t *)((char *)v984 + 8);
        do
          v576 = __ldaxr(v575);
        while (__stlxr(v576 - 1, v575));
        if (!v576)
        {
          (*(void (**)(CoreML::Archiver::PackedIntegerVector *))(*(_QWORD *)v984 + 16))(v984);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v984);
        }
      }
      v577 = v1078;
      if (v1078)
      {
        v578 = (unint64_t *)&v1078->__shared_owners_;
        do
          v579 = __ldaxr(v578);
        while (__stlxr(v579 - 1, v578));
        if (!v579)
        {
          ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
          std::__shared_weak_count::__release_weak(v577);
        }
      }
      v1107 = v1050[5].__r_.__value_.__r.__words[1];
      *(_QWORD *)(v1025 + 8) = 0;
      *(_QWORD *)(v1025 + 16) = 0;
      *(_QWORD *)v1025 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, 0, v1089, &v1089[16], 16);
      v580 = *(char **)&v1089[24];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, *(_QWORD *)&v1089[16] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v580, &v580[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), &v1089[32], &v1089[64], 32);
      v581 = *(char **)&v1089[72];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v581, &v581[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)v1025, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)v1025, 1);
      v582 = v1106;
      v1084.__r_.__value_.__r.__words[0] = v1105;
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1105 + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v582, &v582[4 * v1084.__r_.__value_.__r.__words[0]], 4 * v1084.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)v1025, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1107, v1108, 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
      v77 = v1051;
      if (!v1051)
        goto LABEL_1653;
      v583 = (unint64_t *)&v1051->__shared_owners_;
      do
        v79 = __ldaxr(v583);
      while (__stlxr(v79 - 1, v583));
      goto LABEL_1651;
    case 7u:
      v124 = *(std::string **)v998;
      v123 = (unint64_t *)*((_QWORD *)v998 + 1);
      v1048 = *(std::string **)v998;
      v1049 = (std::__shared_weak_count *)v123;
      if (v123)
      {
        v125 = v123 + 1;
        do
          v126 = __ldxr(v125);
        while (__stxr(v126 + 1, v125));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 7;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v124->__r_.__value_.__r.__words[2]);
      v127 = v124[1].__r_.__value_.__l.__data_;
      v128 = (_BYTE *)v124[1].__r_.__value_.__l.__size_;
      if (v128 != v127)
        memmove(*(void **)&v1089[24], v127, v128 - v127);
      v1077 = v124;
      v1078 = (std::__shared_weak_count *)v123;
      if (v123)
      {
        v129 = v123 + 1;
        do
          v130 = __ldxr(v129);
        while (__stxr(v130 + 1, v129));
        v1082 = (unint64_t)v124;
        v1083 = (std::__shared_weak_count *)v123;
        do
          v131 = __ldxr(v129);
        while (__stxr(v131 + 1, v129));
      }
      else
      {
        v1082 = (unint64_t)v124;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v268) = 0;
      else
        v268 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v269 = v1071;
      v980 = (CoreML::Archiver::PackedIntegerVector *)v123;
      if (v1071 == v1072)
        goto LABEL_390;
      while (!v269[5])
      {
LABEL_384:
        v273 = v269[1];
        if (v273)
        {
          do
          {
            v274 = (_QWORD **)v273;
            v273 = (_QWORD *)*v273;
          }
          while (v273);
        }
        else
        {
          do
          {
            v274 = (_QWORD **)v269[2];
            v9 = *v274 == v269;
            v269 = v274;
          }
          while (!v9);
        }
        v269 = v274;
        if (v274 == v1072)
        {
LABEL_390:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
          v275 = 4;
          v1011 = v1074;
          v276 = 4;
          goto LABEL_694;
        }
      }
      if (v1084.__r_.__value_.__l.__size_)
      {
        v270 = *((_DWORD *)v269 + 8);
        v271 = v1084.__r_.__value_.__l.__size_;
        do
        {
          v272 = *(_DWORD *)(v271 + 28);
          if (v270 >= v272)
          {
            if (v272 >= v270)
              goto LABEL_384;
            v271 += 8;
          }
          v271 = *(_QWORD *)v271;
        }
        while (v271);
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      }
      v1109 = 0x200000001;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v277 = v1071;
      if (v1071 == v1072)
      {
LABEL_406:
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        if ((_BYTE)v1074)
          v283 = 3;
        else
          v283 = 2;
        v1011 = v283;
        v276 = 4;
      }
      else
      {
        while (!v277[5])
        {
LABEL_400:
          v281 = v277[1];
          if (v281)
          {
            do
            {
              v282 = (_QWORD **)v281;
              v281 = (_QWORD *)*v281;
            }
            while (v281);
          }
          else
          {
            do
            {
              v282 = (_QWORD **)v277[2];
              v9 = *v282 == v277;
              v277 = v282;
            }
            while (!v9);
          }
          v277 = v282;
          if (v282 == v1072)
            goto LABEL_406;
        }
        if (v1084.__r_.__value_.__l.__size_)
        {
          v278 = *((_DWORD *)v277 + 8);
          v279 = v1084.__r_.__value_.__l.__size_;
          do
          {
            v280 = *(_DWORD *)(v279 + 28);
            if (v278 >= v280)
            {
              if (v280 >= v278)
                goto LABEL_400;
              v279 += 8;
            }
            v279 = *(_QWORD *)v279;
          }
          while (v279);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        }
        v276 = 6;
        v1011 = 4;
      }
      v275 = v276;
LABEL_694:
      v413 = v1063 - 1;
      if ((uint64_t)v1063 - 1 <= (unint64_t)v1064)
        v413 = v1064;
      v1000 = (CoreML::Archiver::PackedIntegerVector *)v124;
      if (v413)
        v414 = vcvtpd_u64_f64(log2((double)v413)) + 1;
      else
        LOBYTE(v414) = 0;
      v415 = (v268 + (unint64_t)v414 + v276 + 7) >> 3;
      v416 = v415 + 4;
      if (*((_QWORD *)&v1063 + 1))
        v417 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
      else
        v417 = 0;
      v418 = __p[1];
      v419 = (char *)__p[1] - 1;
      if (__p[1] != (void *)1)
        LODWORD(v419) = vcvtpd_u64_f64(log2((double)(unint64_t)v419)) + 1;
      *(_DWORD *)&v1089[32] = 0;
      *(_WORD *)&v1089[36] = v415 + 4;
      v1089[38] = v268;
      v1089[39] = v275;
      *(_WORD *)&v1089[40] = v414;
      v1089[42] = v417;
      *(_WORD *)&v1089[43] = v419;
      v1089[45] = v1011;
      *(_DWORD *)&v1089[46] = 0;
      *(_QWORD *)&v1089[56] = v418;
      v1084.__r_.__value_.__r.__words[0] = ~(-1 << v268);
      LODWORD(v1084.__r_.__value_.__r.__words[1]) = v268 >> 3;
      HIDWORD(v1084.__r_.__value_.__r.__words[1]) = v268 & 7;
      v420 = ((-(char)v414 - ((_BYTE)v275 + (_BYTE)v268)) & 7) + v275 + v268;
      LODWORD(v1084.__r_.__value_.__r.__words[2]) = ~(-1 << v275);
      HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v420 >> 3;
      v1085 = v420 & 7;
      v1087 = ~(-1 << v414);
      v1088 = v415;
      if (v417 - 25 >= 0x27)
        v421 = 0;
      else
        v421 = -v417 & 7;
      v422 = v421 + v417;
      if (v419 - 25 >= 0x27)
        v423 = 0;
      else
        v423 = -(int)v419 & 7;
      *(_DWORD *)&v1089[84] = v422;
      DWORD1(v1095) = v423 + v419;
      DWORD1(v1100) = 0;
      v425 = (uint64_t *)*((_QWORD *)v1000 + 6);
      v424 = (uint64_t *)*((_QWORD *)v1000 + 7);
      if (v425 != v424)
      {
        v426 = 0;
        do
        {
          v427 = *v425;
          if (*(_BYTE *)*v425)
          {
            v428 = *(_QWORD *)(v427 + 80);
            v429 = *(_QWORD *)(v427 + 88);
            if (v428 != v429)
            {
              v430 = *(_QWORD *)&v1089[24];
              do
              {
                *(double *)(v430 + 8 * *(_QWORD *)v428) = *(double *)(v428 + 8)
                                                          + *(double *)(v430 + 8 * *(_QWORD *)v428);
                v428 += 16;
              }
              while (v428 != v429);
            }
          }
          else
          {
            CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>((uint64_t)&__src, (uint64_t)&v1089[32], (uint64_t)&v1084, v426++, v425);
          }
          v425 += 2;
        }
        while (v425 != v424);
        v416 = *(_WORD *)&v1089[36];
      }
      v1109 = *(_QWORD *)&v1089[64] * v416;
      CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v416);
      ++*(_QWORD *)&v1089[64];
      if (v980)
      {
        v431 = (unint64_t *)((char *)v980 + 8);
        do
          v432 = __ldaxr(v431);
        while (__stlxr(v432 - 1, v431));
        if (!v432)
        {
          (*(void (**)(CoreML::Archiver::PackedIntegerVector *))(*(_QWORD *)v980 + 16))(v980);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v980);
        }
      }
      v433 = v1078;
      if (v1078)
      {
        v434 = (unint64_t *)&v1078->__shared_owners_;
        do
          v435 = __ldaxr(v434);
        while (__stlxr(v435 - 1, v434));
        if (!v435)
        {
          ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
          std::__shared_weak_count::__release_weak(v433);
        }
      }
      v1107 = v1048[5].__r_.__value_.__r.__words[1];
      *(_QWORD *)(v1025 + 8) = 0;
      *(_QWORD *)(v1025 + 16) = 0;
      *(_QWORD *)v1025 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, 0, v1089, &v1089[16], 16);
      v436 = *(char **)&v1089[24];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, *(_QWORD *)&v1089[16] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v436, &v436[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), &v1089[32], &v1089[64], 32);
      v437 = *(char **)&v1089[72];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v437, &v437[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)v1025, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)v1025, 1);
      v438 = v1106;
      v1084.__r_.__value_.__r.__words[0] = v1105;
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1105 + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v438, &v438[4 * v1084.__r_.__value_.__r.__words[0]], 4 * v1084.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)v1025, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1107, v1108, 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
      v77 = v1049;
      if (!v1049)
        goto LABEL_1653;
      v439 = (unint64_t *)&v1049->__shared_owners_;
      do
        v79 = __ldaxr(v439);
      while (__stlxr(v79 - 1, v439));
      goto LABEL_1651;
    case 8u:
      v162 = *(std::string **)v998;
      v161 = (unint64_t *)*((_QWORD *)v998 + 1);
      v1046 = *(std::string **)v998;
      v1047 = (std::__shared_weak_count *)v161;
      if (v161)
      {
        v163 = v161 + 1;
        do
          v164 = __ldxr(v163);
        while (__stxr(v164 + 1, v163));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 8;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v162->__r_.__value_.__r.__words[2]);
      v165 = v162[1].__r_.__value_.__l.__data_;
      v166 = (_BYTE *)v162[1].__r_.__value_.__l.__size_;
      if (v166 != v165)
        memmove(*(void **)&v1089[24], v165, v166 - v165);
      v1077 = v162;
      v1078 = (std::__shared_weak_count *)v161;
      if (v161)
      {
        v167 = v161 + 1;
        do
          v168 = __ldxr(v167);
        while (__stxr(v168 + 1, v167));
        v1082 = (unint64_t)v162;
        v1083 = (std::__shared_weak_count *)v161;
        do
          v169 = __ldxr(v167);
        while (__stxr(v169 + 1, v167));
      }
      else
      {
        v1082 = (unint64_t)v162;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v316) = 0;
      else
        v316 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v317 = v1071;
      v981 = (CoreML::Archiver::PackedIntegerVector *)v161;
      if (v1071 == v1072)
        goto LABEL_507;
      while (!v317[5])
      {
LABEL_501:
        v321 = v317[1];
        if (v321)
        {
          do
          {
            v322 = (_QWORD **)v321;
            v321 = (_QWORD *)*v321;
          }
          while (v321);
        }
        else
        {
          do
          {
            v322 = (_QWORD **)v317[2];
            v9 = *v322 == v317;
            v317 = v322;
          }
          while (!v9);
        }
        v317 = v322;
        if (v322 == v1072)
        {
LABEL_507:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
          v323 = 4;
          v1014 = v1074;
          v324 = 4;
          goto LABEL_826;
        }
      }
      if (v1084.__r_.__value_.__l.__size_)
      {
        v318 = *((_DWORD *)v317 + 8);
        v319 = v1084.__r_.__value_.__l.__size_;
        do
        {
          v320 = *(_DWORD *)(v319 + 28);
          if (v318 >= v320)
          {
            if (v320 >= v318)
              goto LABEL_501;
            v319 += 8;
          }
          v319 = *(_QWORD *)v319;
        }
        while (v319);
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      }
      v1109 = 0x200000001;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v325 = v1071;
      if (v1071 == v1072)
      {
LABEL_523:
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        if ((_BYTE)v1074)
          v331 = 3;
        else
          v331 = 2;
        v1014 = v331;
        v324 = 4;
      }
      else
      {
        while (!v325[5])
        {
LABEL_517:
          v329 = v325[1];
          if (v329)
          {
            do
            {
              v330 = (_QWORD **)v329;
              v329 = (_QWORD *)*v329;
            }
            while (v329);
          }
          else
          {
            do
            {
              v330 = (_QWORD **)v325[2];
              v9 = *v330 == v325;
              v325 = v330;
            }
            while (!v9);
          }
          v325 = v330;
          if (v330 == v1072)
            goto LABEL_523;
        }
        if (v1084.__r_.__value_.__l.__size_)
        {
          v326 = *((_DWORD *)v325 + 8);
          v327 = v1084.__r_.__value_.__l.__size_;
          do
          {
            v328 = *(_DWORD *)(v327 + 28);
            if (v326 >= v328)
            {
              if (v328 >= v326)
                goto LABEL_517;
              v327 += 8;
            }
            v327 = *(_QWORD *)v327;
          }
          while (v327);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        }
        v324 = 6;
        v1014 = 4;
      }
      v323 = v324;
LABEL_826:
      v501 = v1063 - 1;
      if ((uint64_t)v1063 - 1 <= (unint64_t)v1064)
        v501 = v1064;
      v1002 = (CoreML::Archiver::PackedIntegerVector *)v162;
      if (v501)
        v502 = vcvtpd_u64_f64(log2((double)v501)) + 1;
      else
        LOBYTE(v502) = 0;
      v503 = (v316 + (unint64_t)v502 + v324 + 7) >> 3;
      v504 = v503 + 4;
      if (*((_QWORD *)&v1063 + 1))
        v505 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
      else
        v505 = 0;
      v506 = __p[1];
      v507 = (char *)__p[1] - 1;
      if (__p[1] != (void *)1)
        LODWORD(v507) = vcvtpd_u64_f64(log2((double)(unint64_t)v507)) + 1;
      *(_DWORD *)&v1089[32] = 0;
      *(_WORD *)&v1089[36] = v503 + 4;
      v1089[38] = v316;
      v1089[39] = v323;
      *(_WORD *)&v1089[40] = v502;
      v1089[42] = v505;
      *(_WORD *)&v1089[43] = v507;
      v1089[45] = v1014;
      *(_DWORD *)&v1089[46] = 0;
      *(_QWORD *)&v1089[56] = v506;
      v1084.__r_.__value_.__r.__words[0] = ~(-1 << v316);
      LODWORD(v1084.__r_.__value_.__r.__words[1]) = v316 >> 3;
      HIDWORD(v1084.__r_.__value_.__r.__words[1]) = v316 & 7;
      v508 = ((-(char)v502 - ((_BYTE)v323 + (_BYTE)v316)) & 7) + v323 + v316;
      LODWORD(v1084.__r_.__value_.__r.__words[2]) = ~(-1 << v323);
      HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v508 >> 3;
      v1085 = v508 & 7;
      v1087 = ~(-1 << v502);
      v1088 = v503;
      if (v505 - 25 >= 0x27)
        v509 = 0;
      else
        v509 = -v505 & 7;
      v510 = v509 + v505;
      if (v507 - 25 >= 0x27)
        v511 = 0;
      else
        v511 = -(int)v507 & 7;
      *(_DWORD *)&v1089[84] = v510;
      DWORD1(v1095) = v511 + v507;
      DWORD1(v1100) = 0;
      v513 = (uint64_t *)*((_QWORD *)v1002 + 6);
      v512 = (uint64_t *)*((_QWORD *)v1002 + 7);
      if (v513 != v512)
      {
        v514 = 0;
        do
        {
          v515 = *v513;
          if (*(_BYTE *)*v513)
          {
            v516 = *(_QWORD *)(v515 + 80);
            v517 = *(_QWORD *)(v515 + 88);
            if (v516 != v517)
            {
              v518 = *(_QWORD *)&v1089[24];
              do
              {
                *(double *)(v518 + 8 * *(_QWORD *)v516) = *(double *)(v516 + 8)
                                                          + *(double *)(v518 + 8 * *(_QWORD *)v516);
                v516 += 16;
              }
              while (v516 != v517);
            }
          }
          else
          {
            CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>((uint64_t)&__src, (uint64_t)&v1089[32], (uint64_t)&v1084, v514++, v513);
          }
          v513 += 2;
        }
        while (v513 != v512);
        v504 = *(_WORD *)&v1089[36];
      }
      v1109 = *(_QWORD *)&v1089[64] * v504;
      CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v504);
      ++*(_QWORD *)&v1089[64];
      if (v981)
      {
        v519 = (unint64_t *)((char *)v981 + 8);
        do
          v520 = __ldaxr(v519);
        while (__stlxr(v520 - 1, v519));
        if (!v520)
        {
          (*(void (**)(CoreML::Archiver::PackedIntegerVector *))(*(_QWORD *)v981 + 16))(v981);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v981);
        }
      }
      v521 = v1078;
      if (v1078)
      {
        v522 = (unint64_t *)&v1078->__shared_owners_;
        do
          v523 = __ldaxr(v522);
        while (__stlxr(v523 - 1, v522));
        if (!v523)
        {
          ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
          std::__shared_weak_count::__release_weak(v521);
        }
      }
      v1107 = v1046[5].__r_.__value_.__r.__words[1];
      *(_QWORD *)(v1025 + 8) = 0;
      *(_QWORD *)(v1025 + 16) = 0;
      *(_QWORD *)v1025 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, 0, v1089, &v1089[16], 16);
      v524 = *(char **)&v1089[24];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, *(_QWORD *)&v1089[16] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v524, &v524[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), &v1089[32], &v1089[64], 32);
      v525 = *(char **)&v1089[72];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v525, &v525[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)v1025, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)v1025, 1);
      v526 = v1106;
      v1084.__r_.__value_.__r.__words[0] = v1105;
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1105 + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v526, &v526[4 * v1084.__r_.__value_.__r.__words[0]], 4 * v1084.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)v1025, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1107, v1108, 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
      v77 = v1047;
      if (!v1047)
        goto LABEL_1653;
      v527 = (unint64_t *)&v1047->__shared_owners_;
      do
        v79 = __ldaxr(v527);
      while (__stlxr(v79 - 1, v527));
      goto LABEL_1651;
    case 9u:
      v133 = *(std::string **)v998;
      v132 = (std::__shared_weak_count *)*((_QWORD *)v998 + 1);
      v1044 = *(std::string **)v998;
      v1045 = v132;
      if (v132)
      {
        v134 = (unint64_t *)&v132->__shared_owners_;
        do
          v135 = __ldxr(v134);
        while (__stxr(v135 + 1, v134));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 9;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v133->__r_.__value_.__r.__words[2]);
      v136 = v133[1].__r_.__value_.__l.__data_;
      v137 = (_BYTE *)v133[1].__r_.__value_.__l.__size_;
      if (v137 != v136)
        memmove(*(void **)&v1089[24], v136, v137 - v136);
      v1077 = v133;
      v1078 = v132;
      if (v132)
      {
        v138 = (unint64_t *)&v132->__shared_owners_;
        do
          v139 = __ldxr(v138);
        while (__stxr(v139 + 1, v138));
        v1082 = (unint64_t)v133;
        v1083 = v132;
        v140 = (unint64_t *)&v132->__shared_owners_;
        do
          v141 = __ldxr(v140);
        while (__stxr(v141 + 1, v140));
      }
      else
      {
        v1082 = (unint64_t)v133;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v253) = 0;
      else
        v253 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v254 = v1071;
      if (v1071 == v1072)
        goto LABEL_351;
      while (!v254[5])
      {
LABEL_345:
        v258 = v254[1];
        if (v258)
        {
          do
          {
            v259 = (_QWORD **)v258;
            v258 = (_QWORD *)*v258;
          }
          while (v258);
        }
        else
        {
          do
          {
            v259 = (_QWORD **)v254[2];
            v9 = *v259 == v254;
            v254 = v259;
          }
          while (!v9);
        }
        v254 = v259;
        if (v259 == v1072)
        {
LABEL_351:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
          v1010 = 4;
          v999 = v1074;
          v260 = 4;
          goto LABEL_646;
        }
      }
      if (v1084.__r_.__value_.__l.__size_)
      {
        v255 = *((_DWORD *)v254 + 8);
        v256 = v1084.__r_.__value_.__l.__size_;
        do
        {
          v257 = *(_DWORD *)(v256 + 28);
          if (v255 >= v257)
          {
            if (v257 >= v255)
              goto LABEL_345;
            v256 += 8;
          }
          v256 = *(_QWORD *)v256;
        }
        while (v256);
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      }
      v1109 = 0x200000001;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v261 = v1071;
      if (v1071 == v1072)
      {
LABEL_367:
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        if ((_BYTE)v1074)
          v267 = 3;
        else
          v267 = 2;
        v999 = v267;
        v260 = 4;
      }
      else
      {
        while (!v261[5])
        {
LABEL_361:
          v265 = v261[1];
          if (v265)
          {
            do
            {
              v266 = (_QWORD **)v265;
              v265 = (_QWORD *)*v265;
            }
            while (v265);
          }
          else
          {
            do
            {
              v266 = (_QWORD **)v261[2];
              v9 = *v266 == v261;
              v261 = v266;
            }
            while (!v9);
          }
          v261 = v266;
          if (v266 == v1072)
            goto LABEL_367;
        }
        if (v1084.__r_.__value_.__l.__size_)
        {
          v262 = *((_DWORD *)v261 + 8);
          v263 = v1084.__r_.__value_.__l.__size_;
          do
          {
            v264 = *(_DWORD *)(v263 + 28);
            if (v262 >= v264)
            {
              if (v264 >= v262)
                goto LABEL_361;
              v263 += 8;
            }
            v263 = *(_QWORD *)v263;
          }
          while (v263);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        }
        v260 = 6;
        v999 = 4;
      }
      v1010 = v260;
LABEL_646:
      v380 = (unint64_t)__p[1];
      v381 = v1063 - 1;
      if ((unint64_t)(v1063 - 1) <= (uint64_t)__p[1] * (uint64_t)v1064)
        v381 = (uint64_t)__p[1] * v1064;
      v993 = (CoreML::Archiver::PackedIntegerVector *)v133;
      if (v381)
        v382 = vcvtpd_u64_f64(log2((double)(unint64_t)v381)) + 1;
      else
        LOBYTE(v382) = 0;
      v383 = (v253 + (unint64_t)v382 + v260 + 7) >> 3;
      if (*((_QWORD *)&v1063 + 1))
        v384 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
      else
        v384 = 0;
      v976 = v383;
      v385 = v383 + 4;
      if (v380 == 1)
        v386 = 1;
      else
        v386 = vcvtpd_u64_f64(log2((double)(v380 - 1))) + 2;
      v387 = v382;
      v388 = *((_QWORD *)&v1064 + 1) * v380;
      if (*((_QWORD *)&v1064 + 1) * v380)
      {
        v389 = log2((double)v388);
        v387 = v382;
        LODWORD(v388) = vcvtpd_u64_f64(v389) + 1;
      }
      *(_DWORD *)&v1089[32] = 0;
      v390 = v385;
      *(_WORD *)&v1089[36] = v385;
      v1089[38] = v253;
      v1089[39] = v1010;
      *(_WORD *)&v1089[40] = v382;
      v1089[42] = v384;
      v1089[43] = v386;
      v1089[44] = v388;
      v1089[45] = v999;
      *(_DWORD *)&v1089[46] = 0;
      *(_QWORD *)&v1089[56] = v380;
      v1084.__r_.__value_.__r.__words[0] = ~(-1 << v253);
      LODWORD(v1084.__r_.__value_.__r.__words[1]) = v253 >> 3;
      HIDWORD(v1084.__r_.__value_.__r.__words[1]) = v253 & 7;
      v391 = ((-(char)v382 - ((_BYTE)v1010 + (_BYTE)v253)) & 7) + v1010 + v253;
      LODWORD(v1084.__r_.__value_.__r.__words[2]) = ~(-1 << v1010);
      HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v391 >> 3;
      v1085 = v391 & 7;
      v1087 = ~(-1 << v387);
      v1088 = v976;
      if (v384 - 25 >= 0x27)
        v392 = 0;
      else
        v392 = -v384 & 7;
      v393 = v392 + v384;
      if (v386 - 25 >= 0x27)
        v394 = 0;
      else
        v394 = -v386 & 7;
      *(_DWORD *)&v1089[84] = v393;
      DWORD1(v1095) = v394 + v386;
      if (v388 - 25 >= 0x27)
        v395 = 0;
      else
        v395 = -(int)v388 & 7;
      DWORD1(v1100) = v395 + v388;
      v397 = (uint64_t *)*((_QWORD *)v993 + 6);
      v396 = (uint64_t *)*((_QWORD *)v993 + 7);
      if (v397 != v396)
      {
        v398 = 0;
        do
        {
          v399 = *v397;
          if (*(_BYTE *)*v397)
          {
            v400 = *(_QWORD *)(v399 + 80);
            v401 = *(_QWORD *)(v399 + 88);
            if (v400 != v401)
            {
              v402 = *(_QWORD *)&v1089[24];
              do
              {
                *(double *)(v402 + 8 * *(_QWORD *)v400) = *(double *)(v400 + 8)
                                                          + *(double *)(v402 + 8 * *(_QWORD *)v400);
                v400 += 16;
              }
              while (v400 != v401);
            }
          }
          else
          {
            CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
            CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1100, v1105);
            CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>((uint64_t)&__src, (uint64_t)&v1089[32], (uint64_t)&v1084, v398++, v397);
          }
          v397 += 2;
        }
        while (v397 != v396);
        v390 = *(_WORD *)&v1089[36];
      }
      v1109 = *(_QWORD *)&v1089[64] * v390;
      CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v390);
      ++*(_QWORD *)&v1089[64];
      v403 = v1083;
      if (v1083)
      {
        v404 = (unint64_t *)&v1083->__shared_owners_;
        do
          v405 = __ldaxr(v404);
        while (__stlxr(v405 - 1, v404));
        if (!v405)
        {
          ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
          std::__shared_weak_count::__release_weak(v403);
        }
      }
      v406 = v1078;
      if (v1078)
      {
        v407 = (unint64_t *)&v1078->__shared_owners_;
        do
          v408 = __ldaxr(v407);
        while (__stlxr(v408 - 1, v407));
        if (!v408)
        {
          ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
          std::__shared_weak_count::__release_weak(v406);
        }
      }
      v1107 = v1044[5].__r_.__value_.__r.__words[1];
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, 0, v1089, &v1089[16], 16);
      v409 = *(char **)&v1089[24];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)a1, *(_QWORD *)&v1089[16] + *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v409, &v409[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), &v1089[32], &v1089[64], 32);
      v410 = *(char **)&v1089[72];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
      std::vector<unsigned char>::reserve((unint64_t *)a1, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v410, &v410[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)a1, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)a1, 1);
      v411 = v1106;
      v1084.__r_.__value_.__r.__words[0] = v1105;
      std::vector<unsigned char>::reserve((unint64_t *)a1, v1105 + *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v411, &v411[4 * v1084.__r_.__value_.__r.__words[0]], 4 * v1084.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)a1, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1107, v1108, 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
      v77 = v1045;
      if (!v1045)
        goto LABEL_1653;
      v412 = (unint64_t *)&v1045->__shared_owners_;
      do
        v79 = __ldaxr(v412);
      while (__stlxr(v79 - 1, v412));
      goto LABEL_1651;
    case 0xAu:
      v171 = *(std::string **)v998;
      v170 = (unint64_t *)*((_QWORD *)v998 + 1);
      v1042 = *(std::string **)v998;
      v1043 = (std::__shared_weak_count *)v170;
      if (v170)
      {
        v172 = v170 + 1;
        do
          v173 = __ldxr(v172);
        while (__stxr(v173 + 1, v172));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 10;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v171->__r_.__value_.__r.__words[2]);
      v174 = v171[1].__r_.__value_.__l.__data_;
      v175 = (_BYTE *)v171[1].__r_.__value_.__l.__size_;
      if (v175 != v174)
        memmove(*(void **)&v1089[24], v174, v175 - v174);
      v1077 = v171;
      v1078 = (std::__shared_weak_count *)v170;
      if (v170)
      {
        v176 = v170 + 1;
        do
          v177 = __ldxr(v176);
        while (__stxr(v177 + 1, v176));
        v1082 = (unint64_t)v171;
        v1083 = (std::__shared_weak_count *)v170;
        do
          v178 = __ldxr(v176);
        while (__stxr(v178 + 1, v176));
      }
      else
      {
        v1082 = (unint64_t)v171;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v332) = 0;
      else
        v332 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v333 = v1071;
      v982 = (CoreML::Archiver::PackedIntegerVector *)v170;
      if (v1071 == v1072)
        goto LABEL_546;
      while (!v333[5])
      {
LABEL_540:
        v337 = v333[1];
        if (v337)
        {
          do
          {
            v338 = (_QWORD **)v337;
            v337 = (_QWORD *)*v337;
          }
          while (v337);
        }
        else
        {
          do
          {
            v338 = (_QWORD **)v333[2];
            v9 = *v338 == v333;
            v333 = v338;
          }
          while (!v9);
        }
        v333 = v338;
        if (v338 == v1072)
        {
LABEL_546:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
          v339 = 4;
          v1015 = v1074;
          v340 = 4;
          goto LABEL_868;
        }
      }
      if (v1084.__r_.__value_.__l.__size_)
      {
        v334 = *((_DWORD *)v333 + 8);
        v335 = v1084.__r_.__value_.__l.__size_;
        do
        {
          v336 = *(_DWORD *)(v335 + 28);
          if (v334 >= v336)
          {
            if (v336 >= v334)
              goto LABEL_540;
            v335 += 8;
          }
          v335 = *(_QWORD *)v335;
        }
        while (v335);
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      }
      v1109 = 0x200000001;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v341 = v1071;
      if (v1071 == v1072)
      {
LABEL_562:
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        if ((_BYTE)v1074)
          v347 = 3;
        else
          v347 = 2;
        v1015 = v347;
        v340 = 4;
      }
      else
      {
        while (!v341[5])
        {
LABEL_556:
          v345 = v341[1];
          if (v345)
          {
            do
            {
              v346 = (_QWORD **)v345;
              v345 = (_QWORD *)*v345;
            }
            while (v345);
          }
          else
          {
            do
            {
              v346 = (_QWORD **)v341[2];
              v9 = *v346 == v341;
              v341 = v346;
            }
            while (!v9);
          }
          v341 = v346;
          if (v346 == v1072)
            goto LABEL_562;
        }
        if (v1084.__r_.__value_.__l.__size_)
        {
          v342 = *((_DWORD *)v341 + 8);
          v343 = v1084.__r_.__value_.__l.__size_;
          do
          {
            v344 = *(_DWORD *)(v343 + 28);
            if (v342 >= v344)
            {
              if (v344 >= v342)
                goto LABEL_556;
              v343 += 8;
            }
            v343 = *(_QWORD *)v343;
          }
          while (v343);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        }
        v340 = 6;
        v1015 = 4;
      }
      v339 = v340;
LABEL_868:
      v528 = v1063 - 1;
      if ((uint64_t)v1063 - 1 <= (unint64_t)v1064)
        v528 = v1064;
      v1003 = (CoreML::Archiver::PackedIntegerVector *)v171;
      if (v528)
        v529 = vcvtpd_u64_f64(log2((double)v528)) + 1;
      else
        LOBYTE(v529) = 0;
      v530 = (v332 + (unint64_t)v529 + v340 + 7) >> 3;
      v531 = v530 + 4;
      if (*((_QWORD *)&v1063 + 1))
        v532 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
      else
        v532 = 0;
      v533 = __p[1];
      v534 = (char *)__p[1] - 1;
      if (__p[1] != (void *)1)
        LODWORD(v534) = vcvtpd_u64_f64(log2((double)(unint64_t)v534)) + 1;
      *(_DWORD *)&v1089[32] = 0;
      *(_WORD *)&v1089[36] = v530 + 4;
      v1089[38] = v332;
      v1089[39] = v339;
      *(_WORD *)&v1089[40] = v529;
      v1089[42] = v532;
      *(_WORD *)&v1089[43] = v534;
      v1089[45] = v1015;
      *(_DWORD *)&v1089[46] = 0;
      *(_QWORD *)&v1089[56] = v533;
      v1084.__r_.__value_.__r.__words[0] = ~(-1 << v332);
      LODWORD(v1084.__r_.__value_.__r.__words[1]) = v332 >> 3;
      HIDWORD(v1084.__r_.__value_.__r.__words[1]) = v332 & 7;
      v535 = ((-(char)v529 - ((_BYTE)v339 + (_BYTE)v332)) & 7) + v339 + v332;
      LODWORD(v1084.__r_.__value_.__r.__words[2]) = ~(-1 << v339);
      HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v535 >> 3;
      v1085 = v535 & 7;
      v1087 = ~(-1 << v529);
      v1088 = v530;
      if (v532 - 25 >= 0x27)
        v536 = 0;
      else
        v536 = -v532 & 7;
      v537 = v536 + v532;
      if (v534 - 25 >= 0x27)
        v538 = 0;
      else
        v538 = -(int)v534 & 7;
      *(_DWORD *)&v1089[84] = v537;
      DWORD1(v1095) = v538 + v534;
      DWORD1(v1100) = 0;
      v540 = (uint64_t *)*((_QWORD *)v1003 + 6);
      v539 = (uint64_t *)*((_QWORD *)v1003 + 7);
      if (v540 != v539)
      {
        v541 = 0;
        do
        {
          v542 = *v540;
          if (*(_BYTE *)*v540)
          {
            v543 = *(_QWORD *)(v542 + 80);
            v544 = *(_QWORD *)(v542 + 88);
            if (v543 != v544)
            {
              v545 = *(_QWORD *)&v1089[24];
              do
              {
                *(double *)(v545 + 8 * *(_QWORD *)v543) = *(double *)(v543 + 8)
                                                          + *(double *)(v545 + 8 * *(_QWORD *)v543);
                v543 += 16;
              }
              while (v543 != v544);
            }
          }
          else
          {
            CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>((uint64_t)&__src, (uint64_t)&v1089[32], (uint64_t)&v1084, v541++, v540);
          }
          v540 += 2;
        }
        while (v540 != v539);
        v531 = *(_WORD *)&v1089[36];
      }
      v1109 = *(_QWORD *)&v1089[64] * v531;
      CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v531);
      ++*(_QWORD *)&v1089[64];
      if (v982)
      {
        v546 = (unint64_t *)((char *)v982 + 8);
        do
          v547 = __ldaxr(v546);
        while (__stlxr(v547 - 1, v546));
        if (!v547)
        {
          (*(void (**)(CoreML::Archiver::PackedIntegerVector *))(*(_QWORD *)v982 + 16))(v982);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v982);
        }
      }
      v548 = v1078;
      if (v1078)
      {
        v549 = (unint64_t *)&v1078->__shared_owners_;
        do
          v550 = __ldaxr(v549);
        while (__stlxr(v550 - 1, v549));
        if (!v550)
        {
          ((void (*)(std::__shared_weak_count *))v548->__on_zero_shared)(v548);
          std::__shared_weak_count::__release_weak(v548);
        }
      }
      v1107 = v1042[5].__r_.__value_.__r.__words[1];
      *(_QWORD *)(v1025 + 8) = 0;
      *(_QWORD *)(v1025 + 16) = 0;
      *(_QWORD *)v1025 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, 0, v1089, &v1089[16], 16);
      v551 = *(char **)&v1089[24];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, *(_QWORD *)&v1089[16] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v551, &v551[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), &v1089[32], &v1089[64], 32);
      v552 = *(char **)&v1089[72];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v552, &v552[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)v1025, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)v1025, 1);
      v553 = v1106;
      v1084.__r_.__value_.__r.__words[0] = v1105;
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1105 + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v553, &v553[4 * v1084.__r_.__value_.__r.__words[0]], 4 * v1084.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)v1025, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1107, v1108, 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
      v77 = v1043;
      if (!v1043)
        goto LABEL_1653;
      v554 = (unint64_t *)&v1043->__shared_owners_;
      do
        v79 = __ldaxr(v554);
      while (__stlxr(v79 - 1, v554));
      goto LABEL_1651;
    case 0xBu:
      v114 = *(std::string **)v998;
      v115 = (unint64_t *)*((_QWORD *)v998 + 1);
      v1040 = *(std::string **)v998;
      v1041 = (std::__shared_weak_count *)v115;
      if (v115)
      {
        v116 = v115 + 1;
        do
          v117 = __ldxr(v116);
        while (__stxr(v117 + 1, v116));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 11;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v114->__r_.__value_.__r.__words[2]);
      v118 = v114[1].__r_.__value_.__l.__data_;
      v119 = (_BYTE *)v114[1].__r_.__value_.__l.__size_;
      if (v119 != v118)
        memmove(*(void **)&v1089[24], v118, v119 - v118);
      v1077 = v114;
      v1078 = (std::__shared_weak_count *)v115;
      if (v115)
      {
        v120 = v115 + 1;
        do
          v121 = __ldxr(v120);
        while (__stxr(v121 + 1, v120));
        v1082 = (unint64_t)v114;
        v1083 = (std::__shared_weak_count *)v115;
        do
          v122 = __ldxr(v120);
        while (__stxr(v122 + 1, v120));
      }
      else
      {
        v1082 = (unint64_t)v114;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v645) = 0;
      else
        v645 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v646 = v1071;
      if (v1071 == v1072)
        goto LABEL_1089;
      while (!v646[5])
      {
LABEL_1083:
        v650 = v646[1];
        if (v650)
        {
          do
          {
            v651 = (_QWORD **)v650;
            v650 = (_QWORD *)*v650;
          }
          while (v650);
        }
        else
        {
          do
          {
            v651 = (_QWORD **)v646[2];
            v9 = *v651 == v646;
            v646 = v651;
          }
          while (!v9);
        }
        v646 = v651;
        if (v651 == v1072)
        {
LABEL_1089:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
          v652 = 4;
          v1006 = v1074;
          v653 = 4;
          goto LABEL_1396;
        }
      }
      if (v1084.__r_.__value_.__l.__size_)
      {
        v647 = *((_DWORD *)v646 + 8);
        v648 = v1084.__r_.__value_.__l.__size_;
        do
        {
          v649 = *(_DWORD *)(v648 + 28);
          if (v647 >= v649)
          {
            if (v649 >= v647)
              goto LABEL_1083;
            v648 += 8;
          }
          v648 = *(_QWORD *)v648;
        }
        while (v648);
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      }
      v1109 = 0x200000001;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v654 = v1071;
      if (v1071 == v1072)
      {
LABEL_1105:
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        if ((_BYTE)v1074)
          v660 = 3;
        else
          v660 = 2;
        v1006 = v660;
        v653 = 4;
      }
      else
      {
        while (!v654[5])
        {
LABEL_1099:
          v658 = v654[1];
          if (v658)
          {
            do
            {
              v659 = (_QWORD **)v658;
              v658 = (_QWORD *)*v658;
            }
            while (v658);
          }
          else
          {
            do
            {
              v659 = (_QWORD **)v654[2];
              v9 = *v659 == v654;
              v654 = v659;
            }
            while (!v9);
          }
          v654 = v659;
          if (v659 == v1072)
            goto LABEL_1105;
        }
        if (v1084.__r_.__value_.__l.__size_)
        {
          v655 = *((_DWORD *)v654 + 8);
          v656 = v1084.__r_.__value_.__l.__size_;
          do
          {
            v657 = *(_DWORD *)(v656 + 28);
            if (v655 >= v657)
            {
              if (v657 >= v655)
                goto LABEL_1099;
              v656 += 8;
            }
            v656 = *(_QWORD *)v656;
          }
          while (v656);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        }
        v653 = 6;
        v1006 = 4;
      }
      v652 = v653;
LABEL_1396:
      v799 = v1063 - 1;
      if ((uint64_t)v1063 - 1 <= (unint64_t)v1064)
        v799 = v1064;
      v1019 = v114;
      if (v799)
        v800 = vcvtpd_u64_f64(log2((double)v799)) + 1;
      else
        LOBYTE(v800) = 0;
      v801 = (v645 + (unint64_t)v800 + v653 + 7) >> 3;
      v802 = v801 + 8;
      v990 = (CoreML::Archiver::PackedIntegerVector *)v115;
      if (*((_QWORD *)&v1063 + 1))
        v803 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
      else
        v803 = 0;
      v804 = __p[1];
      v805 = (char *)__p[1] - 1;
      if (__p[1] != (void *)1)
        LODWORD(v805) = vcvtpd_u64_f64(log2((double)(unint64_t)v805)) + 1;
      *(_DWORD *)&v1089[32] = 0;
      *(_WORD *)&v1089[36] = v801 + 8;
      v1089[38] = v645;
      v1089[39] = v652;
      *(_WORD *)&v1089[40] = v800;
      v1089[42] = v803;
      *(_WORD *)&v1089[43] = v805;
      v1089[45] = v1006;
      *(_DWORD *)&v1089[46] = 0;
      *(_QWORD *)&v1089[56] = v804;
      LODWORD(v1084.__r_.__value_.__l.__data_) = ~(-1 << v645);
      HIDWORD(v1084.__r_.__value_.__r.__words[0]) = v645 >> 3;
      LODWORD(v1084.__r_.__value_.__r.__words[1]) = v645 & 7;
      HIDWORD(v1084.__r_.__value_.__r.__words[1]) = ~(-1 << v652);
      v806 = ((-(char)v800 - ((_BYTE)v652 + (_BYTE)v645)) & 7) + v652 + v645;
      LODWORD(v1084.__r_.__value_.__r.__words[2]) = v806 >> 3;
      HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v806 & 7;
      v1085 = ~(-1 << v800);
      v1086 = v801;
      if (v803 - 25 >= 0x27)
        v807 = 0;
      else
        v807 = -v803 & 7;
      v808 = v807 + v803;
      if (v805 - 25 >= 0x27)
        v809 = 0;
      else
        v809 = -(int)v805 & 7;
      *(_DWORD *)&v1089[84] = v808;
      DWORD1(v1095) = v809 + v805;
      DWORD1(v1100) = 0;
      v810 = (uint64_t *)v1019[2].__r_.__value_.__l.__data_;
      v811 = (uint64_t *)v1019[2].__r_.__value_.__l.__size_;
      if (v810 != v811)
      {
        v812 = 0;
        do
        {
          v813 = *v810;
          if (*(_BYTE *)*v810)
          {
            v814 = *(_QWORD *)(v813 + 80);
            v815 = *(_QWORD *)(v813 + 88);
            if (v814 != v815)
            {
              v816 = *(_QWORD *)&v1089[24];
              do
              {
                *(double *)(v816 + 8 * *(_QWORD *)v814) = *(double *)(v814 + 8)
                                                          + *(double *)(v816 + 8 * *(_QWORD *)v814);
                v814 += 16;
              }
              while (v814 != v815);
            }
          }
          else
          {
            v817 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v817);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v812);
            v818 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v812);
            CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>((uint64_t)&__src, (uint64_t)&v1089[32], &v1084, v818, v810);
            ++v812;
          }
          v810 += 2;
        }
        while (v810 != v811);
        v802 = *(_WORD *)&v1089[36];
      }
      v1109 = *(_QWORD *)&v1089[64] * v802;
      CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v802);
      ++*(_QWORD *)&v1089[64];
      if (v990)
      {
        v819 = (unint64_t *)((char *)v990 + 8);
        do
          v820 = __ldaxr(v819);
        while (__stlxr(v820 - 1, v819));
        if (!v820)
        {
          (*(void (**)(CoreML::Archiver::PackedIntegerVector *))(*(_QWORD *)v990 + 16))(v990);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v990);
        }
      }
      v821 = v1078;
      if (v1078)
      {
        v822 = (unint64_t *)&v1078->__shared_owners_;
        do
          v823 = __ldaxr(v822);
        while (__stlxr(v823 - 1, v822));
        if (!v823)
        {
          ((void (*)(std::__shared_weak_count *))v821->__on_zero_shared)(v821);
          std::__shared_weak_count::__release_weak(v821);
        }
      }
      v1107 = v1040[5].__r_.__value_.__r.__words[1];
      *(_QWORD *)(v1025 + 8) = 0;
      *(_QWORD *)(v1025 + 16) = 0;
      *(_QWORD *)v1025 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, 0, v1089, &v1089[16], 16);
      v824 = *(char **)&v1089[24];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, *(_QWORD *)&v1089[16] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v824, &v824[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), &v1089[32], &v1089[64], 32);
      v825 = *(char **)&v1089[72];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v825, &v825[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)v1025, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)v1025, 1);
      v826 = v1106;
      v1084.__r_.__value_.__r.__words[0] = v1105;
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1105 + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v826, &v826[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)v1025, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1107, v1108, 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
      v77 = v1041;
      if (!v1041)
        goto LABEL_1653;
      v827 = (unint64_t *)&v1041->__shared_owners_;
      do
        v79 = __ldaxr(v827);
      while (__stlxr(v79 - 1, v827));
      goto LABEL_1651;
    case 0xCu:
      v198 = *(std::string **)v998;
      v199 = (unint64_t *)*((_QWORD *)v998 + 1);
      v1038 = *(std::string **)v998;
      v1039 = (std::__shared_weak_count *)v199;
      if (v199)
      {
        v200 = v199 + 1;
        do
          v201 = __ldxr(v200);
        while (__stxr(v201 + 1, v200));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 12;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v198->__r_.__value_.__r.__words[2]);
      v202 = v198[1].__r_.__value_.__l.__data_;
      v203 = (_BYTE *)v198[1].__r_.__value_.__l.__size_;
      if (v203 != v202)
        memmove(*(void **)&v1089[24], v202, v203 - v202);
      v1077 = v198;
      v1078 = (std::__shared_weak_count *)v199;
      if (v199)
      {
        v204 = v199 + 1;
        do
          v205 = __ldxr(v204);
        while (__stxr(v205 + 1, v204));
        v1082 = (unint64_t)v198;
        v1083 = (std::__shared_weak_count *)v199;
        do
          v206 = __ldxr(v204);
        while (__stxr(v206 + 1, v204));
      }
      else
      {
        v1082 = (unint64_t)v198;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v661) = 0;
      else
        v661 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v662 = v1071;
      if (v1071 == v1072)
        goto LABEL_1128;
      while (!v662[5])
      {
LABEL_1122:
        v666 = v662[1];
        if (v666)
        {
          do
          {
            v667 = (_QWORD **)v666;
            v666 = (_QWORD *)*v666;
          }
          while (v666);
        }
        else
        {
          do
          {
            v667 = (_QWORD **)v662[2];
            v9 = *v667 == v662;
            v662 = v667;
          }
          while (!v9);
        }
        v662 = v667;
        if (v667 == v1072)
        {
LABEL_1128:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
          v668 = 4;
          v1007 = v1074;
          v669 = 4;
          goto LABEL_1438;
        }
      }
      if (v1084.__r_.__value_.__l.__size_)
      {
        v663 = *((_DWORD *)v662 + 8);
        v664 = v1084.__r_.__value_.__l.__size_;
        do
        {
          v665 = *(_DWORD *)(v664 + 28);
          if (v663 >= v665)
          {
            if (v665 >= v663)
              goto LABEL_1122;
            v664 += 8;
          }
          v664 = *(_QWORD *)v664;
        }
        while (v664);
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      }
      v1109 = 0x200000001;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v670 = v1071;
      if (v1071 == v1072)
      {
LABEL_1144:
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        if ((_BYTE)v1074)
          v676 = 3;
        else
          v676 = 2;
        v1007 = v676;
        v669 = 4;
      }
      else
      {
        while (!v670[5])
        {
LABEL_1138:
          v674 = v670[1];
          if (v674)
          {
            do
            {
              v675 = (_QWORD **)v674;
              v674 = (_QWORD *)*v674;
            }
            while (v674);
          }
          else
          {
            do
            {
              v675 = (_QWORD **)v670[2];
              v9 = *v675 == v670;
              v670 = v675;
            }
            while (!v9);
          }
          v670 = v675;
          if (v675 == v1072)
            goto LABEL_1144;
        }
        if (v1084.__r_.__value_.__l.__size_)
        {
          v671 = *((_DWORD *)v670 + 8);
          v672 = v1084.__r_.__value_.__l.__size_;
          do
          {
            v673 = *(_DWORD *)(v672 + 28);
            if (v671 >= v673)
            {
              if (v673 >= v671)
                goto LABEL_1138;
              v672 += 8;
            }
            v672 = *(_QWORD *)v672;
          }
          while (v672);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        }
        v669 = 6;
        v1007 = 4;
      }
      v668 = v669;
LABEL_1438:
      v828 = v1063 - 1;
      if ((uint64_t)v1063 - 1 <= (unint64_t)v1064)
        v828 = v1064;
      v1020 = v198;
      if (v828)
        v829 = vcvtpd_u64_f64(log2((double)v828)) + 1;
      else
        LOBYTE(v829) = 0;
      v830 = (v661 + (unint64_t)v829 + v669 + 7) >> 3;
      v831 = v830 + 8;
      v991 = (CoreML::Archiver::PackedIntegerVector *)v199;
      if (*((_QWORD *)&v1063 + 1))
        v832 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
      else
        v832 = 0;
      v833 = __p[1];
      v834 = (char *)__p[1] - 1;
      if (__p[1] != (void *)1)
        LODWORD(v834) = vcvtpd_u64_f64(log2((double)(unint64_t)v834)) + 1;
      *(_DWORD *)&v1089[32] = 0;
      *(_WORD *)&v1089[36] = v830 + 8;
      v1089[38] = v661;
      v1089[39] = v668;
      *(_WORD *)&v1089[40] = v829;
      v1089[42] = v832;
      *(_WORD *)&v1089[43] = v834;
      v1089[45] = v1007;
      *(_DWORD *)&v1089[46] = 0;
      *(_QWORD *)&v1089[56] = v833;
      LODWORD(v1084.__r_.__value_.__l.__data_) = ~(-1 << v661);
      HIDWORD(v1084.__r_.__value_.__r.__words[0]) = v661 >> 3;
      LODWORD(v1084.__r_.__value_.__r.__words[1]) = v661 & 7;
      HIDWORD(v1084.__r_.__value_.__r.__words[1]) = ~(-1 << v668);
      v835 = ((-(char)v829 - ((_BYTE)v668 + (_BYTE)v661)) & 7) + v668 + v661;
      LODWORD(v1084.__r_.__value_.__r.__words[2]) = v835 >> 3;
      HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v835 & 7;
      v1085 = ~(-1 << v829);
      v1086 = v830;
      if (v832 - 25 >= 0x27)
        v836 = 0;
      else
        v836 = -v832 & 7;
      v837 = v836 + v832;
      if (v834 - 25 >= 0x27)
        v838 = 0;
      else
        v838 = -(int)v834 & 7;
      *(_DWORD *)&v1089[84] = v837;
      DWORD1(v1095) = v838 + v834;
      DWORD1(v1100) = 0;
      v839 = (uint64_t *)v1020[2].__r_.__value_.__l.__data_;
      v840 = (uint64_t *)v1020[2].__r_.__value_.__l.__size_;
      if (v839 != v840)
      {
        v841 = 0;
        do
        {
          v842 = *v839;
          if (*(_BYTE *)*v839)
          {
            v843 = *(_QWORD *)(v842 + 80);
            v844 = *(_QWORD *)(v842 + 88);
            if (v843 != v844)
            {
              v845 = *(_QWORD *)&v1089[24];
              do
              {
                *(double *)(v845 + 8 * *(_QWORD *)v843) = *(double *)(v843 + 8)
                                                          + *(double *)(v845 + 8 * *(_QWORD *)v843);
                v843 += 16;
              }
              while (v843 != v844);
            }
          }
          else
          {
            v846 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v846);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v841);
            v847 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v841);
            CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>((uint64_t)&__src, (uint64_t)&v1089[32], &v1084, v847, v839);
            ++v841;
          }
          v839 += 2;
        }
        while (v839 != v840);
        v831 = *(_WORD *)&v1089[36];
      }
      v1109 = *(_QWORD *)&v1089[64] * v831;
      CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v831);
      ++*(_QWORD *)&v1089[64];
      if (v991)
      {
        v848 = (unint64_t *)((char *)v991 + 8);
        do
          v849 = __ldaxr(v848);
        while (__stlxr(v849 - 1, v848));
        if (!v849)
        {
          (*(void (**)(CoreML::Archiver::PackedIntegerVector *))(*(_QWORD *)v991 + 16))(v991);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v991);
        }
      }
      v850 = v1078;
      if (v1078)
      {
        v851 = (unint64_t *)&v1078->__shared_owners_;
        do
          v852 = __ldaxr(v851);
        while (__stlxr(v852 - 1, v851));
        if (!v852)
        {
          ((void (*)(std::__shared_weak_count *))v850->__on_zero_shared)(v850);
          std::__shared_weak_count::__release_weak(v850);
        }
      }
      v1107 = v1038[5].__r_.__value_.__r.__words[1];
      *(_QWORD *)(v1025 + 8) = 0;
      *(_QWORD *)(v1025 + 16) = 0;
      *(_QWORD *)v1025 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, 0, v1089, &v1089[16], 16);
      v853 = *(char **)&v1089[24];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, *(_QWORD *)&v1089[16] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v853, &v853[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), &v1089[32], &v1089[64], 32);
      v854 = *(char **)&v1089[72];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v854, &v854[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)v1025, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)v1025, 1);
      v855 = v1106;
      v1084.__r_.__value_.__r.__words[0] = v1105;
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1105 + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v855, &v855[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)v1025, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1107, v1108, 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
      v77 = v1039;
      if (!v1039)
        goto LABEL_1653;
      v856 = (unint64_t *)&v1039->__shared_owners_;
      do
        v79 = __ldaxr(v856);
      while (__stlxr(v79 - 1, v856));
      goto LABEL_1651;
    case 0xDu:
      v189 = *(std::string **)v998;
      v188 = (std::__shared_weak_count *)*((_QWORD *)v998 + 1);
      v1036 = *(std::string **)v998;
      v1037 = v188;
      if (v188)
      {
        v190 = (unint64_t *)&v188->__shared_owners_;
        do
          v191 = __ldxr(v190);
        while (__stxr(v191 + 1, v190));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 13;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v189->__r_.__value_.__r.__words[2]);
      v192 = v189[1].__r_.__value_.__l.__data_;
      v193 = (_BYTE *)v189[1].__r_.__value_.__l.__size_;
      if (v193 != v192)
        memmove(*(void **)&v1089[24], v192, v193 - v192);
      v1077 = v189;
      v1078 = v188;
      if (v188)
      {
        v194 = (unint64_t *)&v188->__shared_owners_;
        do
          v195 = __ldxr(v194);
        while (__stxr(v195 + 1, v194));
        v1082 = (unint64_t)v189;
        v1083 = v188;
        v196 = (unint64_t *)&v188->__shared_owners_;
        do
          v197 = __ldxr(v196);
        while (__stxr(v197 + 1, v196));
      }
      else
      {
        v1082 = (unint64_t)v189;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v613) = 0;
      else
        v613 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v614 = v1071;
      if (v1071 == v1072)
        goto LABEL_1011;
      while (!v614[5])
      {
LABEL_1005:
        v618 = v614[1];
        if (v618)
        {
          do
          {
            v619 = (_QWORD **)v618;
            v618 = (_QWORD *)*v618;
          }
          while (v618);
        }
        else
        {
          do
          {
            v619 = (_QWORD **)v614[2];
            v9 = *v619 == v614;
            v614 = v619;
          }
          while (!v9);
        }
        v614 = v619;
        if (v619 == v1072)
        {
LABEL_1011:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
          v620 = 4;
          v986 = v1074;
          v621 = 4;
          goto LABEL_1306;
        }
      }
      if (v1084.__r_.__value_.__l.__size_)
      {
        v615 = *((_DWORD *)v614 + 8);
        v616 = v1084.__r_.__value_.__l.__size_;
        do
        {
          v617 = *(_DWORD *)(v616 + 28);
          if (v615 >= v617)
          {
            if (v617 >= v615)
              goto LABEL_1005;
            v616 += 8;
          }
          v616 = *(_QWORD *)v616;
        }
        while (v616);
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      }
      v1109 = 0x200000001;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v622 = v1071;
      if (v1071 == v1072)
      {
LABEL_1027:
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        if ((_BYTE)v1074)
          v628 = 3;
        else
          v628 = 2;
        v986 = v628;
        v621 = 4;
      }
      else
      {
        while (!v622[5])
        {
LABEL_1021:
          v626 = v622[1];
          if (v626)
          {
            do
            {
              v627 = (_QWORD **)v626;
              v626 = (_QWORD *)*v626;
            }
            while (v626);
          }
          else
          {
            do
            {
              v627 = (_QWORD **)v622[2];
              v9 = *v627 == v622;
              v622 = v627;
            }
            while (!v9);
          }
          v622 = v627;
          if (v627 == v1072)
            goto LABEL_1027;
        }
        if (v1084.__r_.__value_.__l.__size_)
        {
          v623 = *((_DWORD *)v622 + 8);
          v624 = v1084.__r_.__value_.__l.__size_;
          do
          {
            v625 = *(_DWORD *)(v624 + 28);
            if (v623 >= v625)
            {
              if (v625 >= v623)
                goto LABEL_1021;
              v624 += 8;
            }
            v624 = *(_QWORD *)v624;
          }
          while (v624);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        }
        v621 = 6;
        v986 = 4;
      }
      v620 = v621;
LABEL_1306:
      v1009 = (CoreML::Archiver::PackedIntegerVector *)v189;
      v740 = (unint64_t)__p[1];
      v741 = v1063 - 1;
      if ((unint64_t)(v1063 - 1) <= (uint64_t)__p[1] * (uint64_t)v1064)
        v741 = (uint64_t)__p[1] * v1064;
      if (v741)
        v742 = vcvtpd_u64_f64(log2((double)(unint64_t)v741)) + 1;
      else
        LOBYTE(v742) = 0;
      v743 = (v613 + (unint64_t)v742 + v621 + 7) >> 3;
      if (*((_QWORD *)&v1063 + 1))
        v744 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
      else
        v744 = 0;
      v745 = v743 + 8;
      if (v740 == 1)
        v746 = 1;
      else
        v746 = vcvtpd_u64_f64(log2((double)(v740 - 1))) + 2;
      v747 = *((_QWORD *)&v1064 + 1) * v740;
      if (*((_QWORD *)&v1064 + 1) * v740)
        LODWORD(v747) = vcvtpd_u64_f64(log2((double)v747)) + 1;
      *(_DWORD *)&v1089[32] = 0;
      *(_WORD *)&v1089[36] = v743 + 8;
      v1089[38] = v613;
      v1089[39] = v620;
      *(_WORD *)&v1089[40] = v742;
      v1089[42] = v744;
      v1089[43] = v746;
      v1089[44] = v747;
      v1089[45] = v986;
      *(_DWORD *)&v1089[46] = 0;
      *(_QWORD *)&v1089[56] = v740;
      LODWORD(v1084.__r_.__value_.__l.__data_) = ~(-1 << v613);
      HIDWORD(v1084.__r_.__value_.__r.__words[0]) = v613 >> 3;
      LODWORD(v1084.__r_.__value_.__r.__words[1]) = v613 & 7;
      HIDWORD(v1084.__r_.__value_.__r.__words[1]) = ~(-1 << v620);
      v748 = ((-(char)v742 - ((_BYTE)v620 + (_BYTE)v613)) & 7) + v620 + v613;
      LODWORD(v1084.__r_.__value_.__r.__words[2]) = v748 >> 3;
      HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v748 & 7;
      v1085 = ~(-1 << v742);
      v1086 = v743;
      if (v744 - 25 >= 0x27)
        v749 = 0;
      else
        v749 = -v744 & 7;
      v750 = v749 + v744;
      if (v746 - 25 >= 0x27)
        v751 = 0;
      else
        v751 = -v746 & 7;
      *(_DWORD *)&v1089[84] = v750;
      DWORD1(v1095) = v751 + v746;
      if (v747 - 25 >= 0x27)
        v752 = 0;
      else
        v752 = -(int)v747 & 7;
      DWORD1(v1100) = v752 + v747;
      v753 = (uint64_t *)*((_QWORD *)v1009 + 6);
      v754 = (uint64_t *)*((_QWORD *)v1009 + 7);
      if (v753 != v754)
      {
        v755 = 0;
        do
        {
          v756 = *v753;
          if (*(_BYTE *)*v753)
          {
            v757 = *(_QWORD *)(v756 + 80);
            v758 = *(_QWORD *)(v756 + 88);
            if (v757 != v758)
            {
              v759 = *(_QWORD *)&v1089[24];
              do
              {
                *(double *)(v759 + 8 * *(_QWORD *)v757) = *(double *)(v757 + 8)
                                                          + *(double *)(v759 + 8 * *(_QWORD *)v757);
                v757 += 16;
              }
              while (v757 != v758);
            }
          }
          else
          {
            v760 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v760);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v755);
            CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1100, v1105);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v1105);
            v761 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v755);
            CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>((uint64_t)&__src, (uint64_t)&v1089[32], &v1084, v761, v753);
            ++v755;
          }
          v753 += 2;
        }
        while (v753 != v754);
        v745 = *(_WORD *)&v1089[36];
      }
      v1109 = *(_QWORD *)&v1089[64] * v745;
      CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v745);
      ++*(_QWORD *)&v1089[64];
      v762 = v1083;
      if (v1083)
      {
        v763 = (unint64_t *)&v1083->__shared_owners_;
        do
          v764 = __ldaxr(v763);
        while (__stlxr(v764 - 1, v763));
        if (!v764)
        {
          ((void (*)(std::__shared_weak_count *))v762->__on_zero_shared)(v762);
          std::__shared_weak_count::__release_weak(v762);
        }
      }
      v765 = v1078;
      if (v1078)
      {
        v766 = (unint64_t *)&v1078->__shared_owners_;
        do
          v767 = __ldaxr(v766);
        while (__stlxr(v767 - 1, v766));
        if (!v767)
        {
          ((void (*)(std::__shared_weak_count *))v765->__on_zero_shared)(v765);
          std::__shared_weak_count::__release_weak(v765);
        }
      }
      v1107 = v1036[5].__r_.__value_.__r.__words[1];
      *(_QWORD *)(v1025 + 8) = 0;
      *(_QWORD *)(v1025 + 16) = 0;
      *(_QWORD *)v1025 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, 0, v1089, &v1089[16], 16);
      v768 = *(char **)&v1089[24];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, *(_QWORD *)&v1089[16] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v768, &v768[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), &v1089[32], &v1089[64], 32);
      v769 = *(char **)&v1089[72];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v769, &v769[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)v1025, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)v1025, 1);
      v770 = v1106;
      v1084.__r_.__value_.__r.__words[0] = v1105;
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1105 + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v770, &v770[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)v1025, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1107, v1108, 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
      v77 = v1037;
      if (!v1037)
        goto LABEL_1653;
      v771 = (unint64_t *)&v1037->__shared_owners_;
      do
        v79 = __ldaxr(v771);
      while (__stlxr(v79 - 1, v771));
      goto LABEL_1651;
    case 0xEu:
      v207 = *(std::string **)v998;
      v208 = (unint64_t *)*((_QWORD *)v998 + 1);
      v1034 = *(std::string **)v998;
      v1035 = (std::__shared_weak_count *)v208;
      if (v208)
      {
        v209 = v208 + 1;
        do
          v210 = __ldxr(v209);
        while (__stxr(v210 + 1, v209));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 14;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v207->__r_.__value_.__r.__words[2]);
      v211 = v207[1].__r_.__value_.__l.__data_;
      v212 = (_BYTE *)v207[1].__r_.__value_.__l.__size_;
      if (v212 != v211)
        memmove(*(void **)&v1089[24], v211, v212 - v211);
      v1077 = v207;
      v1078 = (std::__shared_weak_count *)v208;
      if (v208)
      {
        v213 = v208 + 1;
        do
          v214 = __ldxr(v213);
        while (__stxr(v214 + 1, v213));
        v1082 = (unint64_t)v207;
        v1083 = (std::__shared_weak_count *)v208;
        do
          v215 = __ldxr(v213);
        while (__stxr(v215 + 1, v213));
      }
      else
      {
        v1082 = (unint64_t)v207;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v693) = 0;
      else
        v693 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v694 = v1071;
      if (v1071 == v1072)
        goto LABEL_1206;
      while (!v694[5])
      {
LABEL_1200:
        v698 = v694[1];
        if (v698)
        {
          do
          {
            v699 = (_QWORD **)v698;
            v698 = (_QWORD *)*v698;
          }
          while (v698);
        }
        else
        {
          do
          {
            v699 = (_QWORD **)v694[2];
            v9 = *v699 == v694;
            v694 = v699;
          }
          while (!v9);
        }
        v694 = v699;
        if (v699 == v1072)
        {
LABEL_1206:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
          v700 = 4;
          v1008 = v1074;
          v701 = 4;
          goto LABEL_1522;
        }
      }
      if (v1084.__r_.__value_.__l.__size_)
      {
        v695 = *((_DWORD *)v694 + 8);
        v696 = v1084.__r_.__value_.__l.__size_;
        do
        {
          v697 = *(_DWORD *)(v696 + 28);
          if (v695 >= v697)
          {
            if (v697 >= v695)
              goto LABEL_1200;
            v696 += 8;
          }
          v696 = *(_QWORD *)v696;
        }
        while (v696);
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      }
      v1109 = 0x200000001;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v702 = v1071;
      if (v1071 == v1072)
      {
LABEL_1222:
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        if ((_BYTE)v1074)
          v708 = 3;
        else
          v708 = 2;
        v1008 = v708;
        v701 = 4;
      }
      else
      {
        while (!v702[5])
        {
LABEL_1216:
          v706 = v702[1];
          if (v706)
          {
            do
            {
              v707 = (_QWORD **)v706;
              v706 = (_QWORD *)*v706;
            }
            while (v706);
          }
          else
          {
            do
            {
              v707 = (_QWORD **)v702[2];
              v9 = *v707 == v702;
              v702 = v707;
            }
            while (!v9);
          }
          v702 = v707;
          if (v707 == v1072)
            goto LABEL_1222;
        }
        if (v1084.__r_.__value_.__l.__size_)
        {
          v703 = *((_DWORD *)v702 + 8);
          v704 = v1084.__r_.__value_.__l.__size_;
          do
          {
            v705 = *(_DWORD *)(v704 + 28);
            if (v703 >= v705)
            {
              if (v705 >= v703)
                goto LABEL_1216;
              v704 += 8;
            }
            v704 = *(_QWORD *)v704;
          }
          while (v704);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        }
        v701 = 6;
        v1008 = 4;
      }
      v700 = v701;
LABEL_1522:
      v884 = v1063 - 1;
      if ((uint64_t)v1063 - 1 <= (unint64_t)v1064)
        v884 = v1064;
      v1022 = v207;
      if (v884)
        v885 = vcvtpd_u64_f64(log2((double)v884)) + 1;
      else
        LOBYTE(v885) = 0;
      v886 = (v693 + (unint64_t)v885 + v701 + 7) >> 3;
      v887 = v886 + 8;
      v992 = (CoreML::Archiver::PackedIntegerVector *)v208;
      if (*((_QWORD *)&v1063 + 1))
        v888 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
      else
        v888 = 0;
      v889 = __p[1];
      v890 = (char *)__p[1] - 1;
      if (__p[1] != (void *)1)
        LODWORD(v890) = vcvtpd_u64_f64(log2((double)(unint64_t)v890)) + 1;
      *(_DWORD *)&v1089[32] = 0;
      *(_WORD *)&v1089[36] = v886 + 8;
      v1089[38] = v693;
      v1089[39] = v700;
      *(_WORD *)&v1089[40] = v885;
      v1089[42] = v888;
      *(_WORD *)&v1089[43] = v890;
      v1089[45] = v1008;
      *(_DWORD *)&v1089[46] = 0;
      *(_QWORD *)&v1089[56] = v889;
      LODWORD(v1084.__r_.__value_.__l.__data_) = ~(-1 << v693);
      HIDWORD(v1084.__r_.__value_.__r.__words[0]) = v693 >> 3;
      LODWORD(v1084.__r_.__value_.__r.__words[1]) = v693 & 7;
      HIDWORD(v1084.__r_.__value_.__r.__words[1]) = ~(-1 << v700);
      v891 = ((-(char)v885 - ((_BYTE)v700 + (_BYTE)v693)) & 7) + v700 + v693;
      LODWORD(v1084.__r_.__value_.__r.__words[2]) = v891 >> 3;
      HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v891 & 7;
      v1085 = ~(-1 << v885);
      v1086 = v886;
      if (v888 - 25 >= 0x27)
        v892 = 0;
      else
        v892 = -v888 & 7;
      v893 = v892 + v888;
      if (v890 - 25 >= 0x27)
        v894 = 0;
      else
        v894 = -(int)v890 & 7;
      *(_DWORD *)&v1089[84] = v893;
      DWORD1(v1095) = v894 + v890;
      DWORD1(v1100) = 0;
      v895 = (uint64_t *)v1022[2].__r_.__value_.__l.__data_;
      v896 = (uint64_t *)v1022[2].__r_.__value_.__l.__size_;
      if (v895 != v896)
      {
        v897 = 0;
        do
        {
          v898 = *v895;
          if (*(_BYTE *)*v895)
          {
            v899 = *(_QWORD *)(v898 + 80);
            v900 = *(_QWORD *)(v898 + 88);
            if (v899 != v900)
            {
              v901 = *(_QWORD *)&v1089[24];
              do
              {
                *(double *)(v901 + 8 * *(_QWORD *)v899) = *(double *)(v899 + 8)
                                                          + *(double *)(v901 + 8 * *(_QWORD *)v899);
                v899 += 16;
              }
              while (v899 != v900);
            }
          }
          else
          {
            v902 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v902);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v897);
            v903 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v897);
            CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>((uint64_t)&__src, (uint64_t)&v1089[32], &v1084, v903, v895);
            ++v897;
          }
          v895 += 2;
        }
        while (v895 != v896);
        v887 = *(_WORD *)&v1089[36];
      }
      v1109 = *(_QWORD *)&v1089[64] * v887;
      CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v887);
      ++*(_QWORD *)&v1089[64];
      if (v992)
      {
        v904 = (unint64_t *)((char *)v992 + 8);
        do
          v905 = __ldaxr(v904);
        while (__stlxr(v905 - 1, v904));
        if (!v905)
        {
          (*(void (**)(CoreML::Archiver::PackedIntegerVector *))(*(_QWORD *)v992 + 16))(v992);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v992);
        }
      }
      v906 = v1078;
      if (v1078)
      {
        v907 = (unint64_t *)&v1078->__shared_owners_;
        do
          v908 = __ldaxr(v907);
        while (__stlxr(v908 - 1, v907));
        if (!v908)
        {
          ((void (*)(std::__shared_weak_count *))v906->__on_zero_shared)(v906);
          std::__shared_weak_count::__release_weak(v906);
        }
      }
      v1107 = v1034[5].__r_.__value_.__r.__words[1];
      *(_QWORD *)(v1025 + 8) = 0;
      *(_QWORD *)(v1025 + 16) = 0;
      *(_QWORD *)v1025 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, 0, v1089, &v1089[16], 16);
      v909 = *(char **)&v1089[24];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, *(_QWORD *)&v1089[16] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v909, &v909[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), &v1089[32], &v1089[64], 32);
      v910 = *(char **)&v1089[72];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v910, &v910[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)v1025, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)v1025, 1);
      v911 = v1106;
      v1084.__r_.__value_.__r.__words[0] = v1105;
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1105 + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v911, &v911[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)v1025, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1107, v1108, 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
      v77 = v1035;
      if (!v1035)
        goto LABEL_1653;
      v912 = (unint64_t *)&v1035->__shared_owners_;
      do
        v79 = __ldaxr(v912);
      while (__stlxr(v79 - 1, v912));
      goto LABEL_1651;
    case 0xFu:
      v217 = *(std::string **)v998;
      v216 = (unint64_t *)*((_QWORD *)v998 + 1);
      v1032 = *(std::string **)v998;
      v1033 = (std::__shared_weak_count *)v216;
      if (v216)
      {
        v218 = v216 + 1;
        do
          v219 = __ldxr(v218);
        while (__stxr(v219 + 1, v218));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 15;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v217->__r_.__value_.__r.__words[2]);
      v220 = v217[1].__r_.__value_.__l.__data_;
      v221 = (_BYTE *)v217[1].__r_.__value_.__l.__size_;
      if (v221 != v220)
        memmove(*(void **)&v1089[24], v220, v221 - v220);
      v1077 = v217;
      v1078 = (std::__shared_weak_count *)v216;
      if (v216)
      {
        v222 = v216 + 1;
        do
          v223 = __ldxr(v222);
        while (__stxr(v223 + 1, v222));
        v1082 = (unint64_t)v217;
        v1083 = (std::__shared_weak_count *)v216;
        do
          v224 = __ldxr(v222);
        while (__stxr(v224 + 1, v222));
      }
      else
      {
        v1082 = (unint64_t)v217;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v724) = 0;
      else
        v724 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v725 = v1071;
      v989 = (CoreML::Archiver::PackedIntegerVector *)v216;
      if (v1071 == v1072)
        goto LABEL_1284;
      while (!v725[5])
      {
LABEL_1278:
        v729 = v725[1];
        if (v729)
        {
          do
          {
            v730 = (_QWORD **)v729;
            v729 = (_QWORD *)*v729;
          }
          while (v729);
        }
        else
        {
          do
          {
            v730 = (_QWORD **)v725[2];
            v9 = *v730 == v725;
            v725 = v730;
          }
          while (!v9);
        }
        v725 = v730;
        if (v730 == v1072)
        {
LABEL_1284:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
          v731 = 4;
          v996 = v1074;
          v732 = 4;
          goto LABEL_1612;
        }
      }
      if (v1084.__r_.__value_.__l.__size_)
      {
        v726 = *((_DWORD *)v725 + 8);
        v727 = v1084.__r_.__value_.__l.__size_;
        do
        {
          v728 = *(_DWORD *)(v727 + 28);
          if (v726 >= v728)
          {
            if (v728 >= v726)
              goto LABEL_1278;
            v727 += 8;
          }
          v727 = *(_QWORD *)v727;
        }
        while (v727);
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      }
      v1109 = 0x200000001;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v733 = v1071;
      if (v1071 == v1072)
      {
LABEL_1300:
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        if ((_BYTE)v1074)
          v739 = 3;
        else
          v739 = 2;
        v996 = v739;
        v732 = 4;
      }
      else
      {
        while (!v733[5])
        {
LABEL_1294:
          v737 = v733[1];
          if (v737)
          {
            do
            {
              v738 = (_QWORD **)v737;
              v737 = (_QWORD *)*v737;
            }
            while (v737);
          }
          else
          {
            do
            {
              v738 = (_QWORD **)v733[2];
              v9 = *v738 == v733;
              v733 = v738;
            }
            while (!v9);
          }
          v733 = v738;
          if (v738 == v1072)
            goto LABEL_1300;
        }
        if (v1084.__r_.__value_.__l.__size_)
        {
          v734 = *((_DWORD *)v733 + 8);
          v735 = v1084.__r_.__value_.__l.__size_;
          do
          {
            v736 = *(_DWORD *)(v735 + 28);
            if (v734 >= v736)
            {
              if (v736 >= v734)
                goto LABEL_1294;
              v735 += 8;
            }
            v735 = *(_QWORD *)v735;
          }
          while (v735);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        }
        v732 = 6;
        v996 = 4;
      }
      v731 = v732;
LABEL_1612:
      v946 = v1063 - 1;
      if ((uint64_t)v1063 - 1 <= (unint64_t)v1064)
        v946 = v1064;
      v1024 = v217;
      if (v946)
        v947 = vcvtpd_u64_f64(log2((double)v946)) + 1;
      else
        LOBYTE(v947) = 0;
      v948 = (v724 + (unint64_t)v947 + v732 + 7) >> 3;
      v949 = v948 + 8;
      if (*((_QWORD *)&v1063 + 1))
        v950 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
      else
        v950 = 0;
      v951 = __p[1];
      v952 = (char *)__p[1] - 1;
      if (__p[1] != (void *)1)
        LODWORD(v952) = vcvtpd_u64_f64(log2((double)(unint64_t)v952)) + 1;
      *(_DWORD *)&v1089[32] = 0;
      *(_WORD *)&v1089[36] = v948 + 8;
      v1089[38] = v724;
      v1089[39] = v731;
      *(_WORD *)&v1089[40] = v947;
      v1089[42] = v950;
      *(_WORD *)&v1089[43] = v952;
      v1089[45] = v996;
      *(_DWORD *)&v1089[46] = 0;
      *(_QWORD *)&v1089[56] = v951;
      v1084.__r_.__value_.__r.__words[0] = ~(-1 << v724);
      LODWORD(v1084.__r_.__value_.__r.__words[1]) = v724 >> 3;
      HIDWORD(v1084.__r_.__value_.__r.__words[1]) = v724 & 7;
      v953 = ((-(char)v947 - ((_BYTE)v731 + (_BYTE)v724)) & 7) + v731 + v724;
      LODWORD(v1084.__r_.__value_.__r.__words[2]) = ~(-1 << v731);
      HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v953 >> 3;
      v1085 = v953 & 7;
      v1087 = ~(-1 << v947);
      v1088 = v948;
      if (v950 - 25 >= 0x27)
        v954 = 0;
      else
        v954 = -v950 & 7;
      v955 = v954 + v950;
      if (v952 - 25 >= 0x27)
        v956 = 0;
      else
        v956 = -(int)v952 & 7;
      *(_DWORD *)&v1089[84] = v955;
      DWORD1(v1095) = v956 + v952;
      DWORD1(v1100) = 0;
      v958 = (uint64_t *)v1024[2].__r_.__value_.__l.__data_;
      v957 = (uint64_t *)v1024[2].__r_.__value_.__l.__size_;
      if (v958 != v957)
      {
        v959 = 0;
        do
        {
          v960 = *v958;
          if (*(_BYTE *)*v958)
          {
            v961 = *(_QWORD *)(v960 + 80);
            v962 = *(_QWORD *)(v960 + 88);
            if (v961 != v962)
            {
              v963 = *(_QWORD *)&v1089[24];
              do
              {
                *(double *)(v963 + 8 * *(_QWORD *)v961) = *(double *)(v961 + 8)
                                                          + *(double *)(v963 + 8 * *(_QWORD *)v961);
                v961 += 16;
              }
              while (v961 != v962);
            }
          }
          else
          {
            CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>((uint64_t)&__src, (uint64_t)&v1089[32], (uint64_t)&v1084, v959++, v958);
          }
          v958 += 2;
        }
        while (v958 != v957);
        v949 = *(_WORD *)&v1089[36];
      }
      v1109 = *(_QWORD *)&v1089[64] * v949;
      CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v949);
      ++*(_QWORD *)&v1089[64];
      if (v989)
      {
        v964 = (unint64_t *)((char *)v989 + 8);
        do
          v965 = __ldaxr(v964);
        while (__stlxr(v965 - 1, v964));
        if (!v965)
        {
          (*(void (**)(CoreML::Archiver::PackedIntegerVector *))(*(_QWORD *)v989 + 16))(v989);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v989);
        }
      }
      v966 = v1078;
      if (v1078)
      {
        v967 = (unint64_t *)&v1078->__shared_owners_;
        do
          v968 = __ldaxr(v967);
        while (__stlxr(v968 - 1, v967));
        if (!v968)
        {
          ((void (*)(std::__shared_weak_count *))v966->__on_zero_shared)(v966);
          std::__shared_weak_count::__release_weak(v966);
        }
      }
      v1107 = v1032[5].__r_.__value_.__r.__words[1];
      *(_QWORD *)(v1025 + 8) = 0;
      *(_QWORD *)(v1025 + 16) = 0;
      *(_QWORD *)v1025 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, 0, v1089, &v1089[16], 16);
      v969 = *(char **)&v1089[24];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, *(_QWORD *)&v1089[16] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v969, &v969[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), &v1089[32], &v1089[64], 32);
      v970 = *(char **)&v1089[72];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v970, &v970[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)v1025, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)v1025, 1);
      v971 = v1106;
      v1084.__r_.__value_.__r.__words[0] = v1105;
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1105 + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v971, &v971[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)v1025, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1107, v1108, 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
      v77 = v1033;
      if (!v1033)
        goto LABEL_1653;
      v972 = (unint64_t *)&v1033->__shared_owners_;
      do
        v79 = __ldaxr(v972);
      while (__stlxr(v79 - 1, v972));
      goto LABEL_1651;
    case 0x10u:
      v235 = *(std::string **)v998;
      v234 = (unint64_t *)*((_QWORD *)v998 + 1);
      v1030 = *(std::string **)v998;
      v1031 = (std::__shared_weak_count *)v234;
      if (v234)
      {
        v236 = v234 + 1;
        do
          v237 = __ldxr(v236);
        while (__stxr(v237 + 1, v236));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 16;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v235->__r_.__value_.__r.__words[2]);
      v238 = v235[1].__r_.__value_.__l.__data_;
      v239 = (_BYTE *)v235[1].__r_.__value_.__l.__size_;
      if (v239 != v238)
        memmove(*(void **)&v1089[24], v238, v239 - v238);
      v1077 = v235;
      v1078 = (std::__shared_weak_count *)v234;
      if (v234)
      {
        v240 = v234 + 1;
        do
          v241 = __ldxr(v240);
        while (__stxr(v241 + 1, v240));
        v1082 = (unint64_t)v235;
        v1083 = (std::__shared_weak_count *)v234;
        do
          v242 = __ldxr(v240);
        while (__stxr(v242 + 1, v240));
      }
      else
      {
        v1082 = (unint64_t)v235;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v677) = 0;
      else
        v677 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v678 = v1071;
      if (v1071 == v1072)
        goto LABEL_1167;
      while (!v678[5])
      {
LABEL_1161:
        v682 = v678[1];
        if (v682)
        {
          do
          {
            v683 = (_QWORD **)v682;
            v682 = (_QWORD *)*v682;
          }
          while (v682);
        }
        else
        {
          do
          {
            v683 = (_QWORD **)v678[2];
            v9 = *v683 == v678;
            v678 = v683;
          }
          while (!v9);
        }
        v678 = v683;
        if (v683 == v1072)
        {
LABEL_1167:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
          v684 = 4;
          v685 = v1074;
          v686 = 4;
          goto LABEL_1480;
        }
      }
      if (v1084.__r_.__value_.__l.__size_)
      {
        v679 = *((_DWORD *)v678 + 8);
        v680 = v1084.__r_.__value_.__l.__size_;
        do
        {
          v681 = *(_DWORD *)(v680 + 28);
          if (v679 >= v681)
          {
            if (v681 >= v679)
              goto LABEL_1161;
            v680 += 8;
          }
          v680 = *(_QWORD *)v680;
        }
        while (v680);
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      }
      v1109 = 0x200000001;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v687 = v1071;
      if (v1071 == v1072)
      {
LABEL_1183:
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        if ((_BYTE)v1074)
          v685 = 3;
        else
          v685 = 2;
        v686 = 4;
      }
      else
      {
        while (!v687[5])
        {
LABEL_1177:
          v691 = v687[1];
          if (v691)
          {
            do
            {
              v692 = (_QWORD **)v691;
              v691 = (_QWORD *)*v691;
            }
            while (v691);
          }
          else
          {
            do
            {
              v692 = (_QWORD **)v687[2];
              v9 = *v692 == v687;
              v687 = v692;
            }
            while (!v9);
          }
          v687 = v692;
          if (v692 == v1072)
            goto LABEL_1183;
        }
        if (v1084.__r_.__value_.__l.__size_)
        {
          v688 = *((_DWORD *)v687 + 8);
          v689 = v1084.__r_.__value_.__l.__size_;
          do
          {
            v690 = *(_DWORD *)(v689 + 28);
            if (v688 >= v690)
            {
              if (v690 >= v688)
                goto LABEL_1177;
              v689 += 8;
            }
            v689 = *(_QWORD *)v689;
          }
          while (v689);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        }
        v686 = 6;
        v685 = 4;
      }
      v684 = v686;
LABEL_1480:
      v857 = v1063 - 1;
      if ((uint64_t)v1063 - 1 <= (unint64_t)v1064)
        v857 = v1064;
      v979 = (CoreML::Archiver::PackedIntegerVector *)v234;
      v1021 = v235;
      v997 = v685;
      if (v857)
        v858 = vcvtpd_u64_f64(log2((double)v857)) + 1;
      else
        LOBYTE(v858) = 0;
      v859 = (v677 + (unint64_t)v858 + v686 + 7) >> 3;
      v860 = v859 + 8;
      if (*((_QWORD *)&v1063 + 1))
        v861 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
      else
        v861 = 0;
      v862 = __p[1];
      v863 = (char *)__p[1] - 1;
      if (__p[1] != (void *)1)
        LODWORD(v863) = vcvtpd_u64_f64(log2((double)(unint64_t)v863)) + 1;
      *(_DWORD *)&v1089[32] = 0;
      *(_WORD *)&v1089[36] = v859 + 8;
      v1089[38] = v677;
      v1089[39] = v684;
      *(_WORD *)&v1089[40] = v858;
      v1089[42] = v861;
      *(_WORD *)&v1089[43] = v863;
      v1089[45] = v997;
      *(_DWORD *)&v1089[46] = 0;
      *(_QWORD *)&v1089[56] = v862;
      v1084.__r_.__value_.__r.__words[0] = ~(-1 << v677);
      LODWORD(v1084.__r_.__value_.__r.__words[1]) = v677 >> 3;
      HIDWORD(v1084.__r_.__value_.__r.__words[1]) = v677 & 7;
      v864 = ((-(char)v858 - ((_BYTE)v684 + (_BYTE)v677)) & 7) + v684 + v677;
      LODWORD(v1084.__r_.__value_.__r.__words[2]) = ~(-1 << v684);
      HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v864 >> 3;
      v1085 = v864 & 7;
      v1087 = ~(-1 << v858);
      v1088 = v859;
      if (v861 - 25 >= 0x27)
        v865 = 0;
      else
        v865 = -v861 & 7;
      v866 = v865 + v861;
      if (v863 - 25 >= 0x27)
        v867 = 0;
      else
        v867 = -(int)v863 & 7;
      *(_DWORD *)&v1089[84] = v866;
      DWORD1(v1095) = v867 + v863;
      DWORD1(v1100) = 0;
      v869 = (uint64_t *)v1021[2].__r_.__value_.__l.__data_;
      v868 = (uint64_t *)v1021[2].__r_.__value_.__l.__size_;
      if (v869 != v868)
      {
        v870 = 0;
        do
        {
          v871 = *v869;
          if (*(_BYTE *)*v869)
          {
            v872 = *(_QWORD *)(v871 + 80);
            v873 = *(_QWORD *)(v871 + 88);
            if (v872 != v873)
            {
              v874 = *(_QWORD *)&v1089[24];
              do
              {
                *(double *)(v874 + 8 * *(_QWORD *)v872) = *(double *)(v872 + 8)
                                                          + *(double *)(v874 + 8 * *(_QWORD *)v872);
                v872 += 16;
              }
              while (v872 != v873);
            }
          }
          else
          {
            CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
            CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>((uint64_t)&__src, (uint64_t)&v1089[32], (uint64_t)&v1084, v870++, v869);
          }
          v869 += 2;
        }
        while (v869 != v868);
        v860 = *(_WORD *)&v1089[36];
      }
      v1109 = *(_QWORD *)&v1089[64] * v860;
      CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v860);
      ++*(_QWORD *)&v1089[64];
      if (v979)
      {
        v875 = (unint64_t *)((char *)v979 + 8);
        do
          v876 = __ldaxr(v875);
        while (__stlxr(v876 - 1, v875));
        if (!v876)
        {
          (*(void (**)(CoreML::Archiver::PackedIntegerVector *))(*(_QWORD *)v979 + 16))(v979);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v979);
        }
      }
      v877 = v1078;
      if (v1078)
      {
        v878 = (unint64_t *)&v1078->__shared_owners_;
        do
          v879 = __ldaxr(v878);
        while (__stlxr(v879 - 1, v878));
        if (!v879)
        {
          ((void (*)(std::__shared_weak_count *))v877->__on_zero_shared)(v877);
          std::__shared_weak_count::__release_weak(v877);
        }
      }
      v1107 = v1030[5].__r_.__value_.__r.__words[1];
      *(_QWORD *)(v1025 + 8) = 0;
      *(_QWORD *)(v1025 + 16) = 0;
      *(_QWORD *)v1025 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, 0, v1089, &v1089[16], 16);
      v880 = *(char **)&v1089[24];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, *(_QWORD *)&v1089[16] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v880, &v880[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), &v1089[32], &v1089[64], 32);
      v881 = *(char **)&v1089[72];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v881, &v881[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)v1025, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)v1025, 1);
      v882 = v1106;
      v1084.__r_.__value_.__r.__words[0] = v1105;
      std::vector<unsigned char>::reserve((unint64_t *)v1025, v1105 + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v882, &v882[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)v1025, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1107, v1108, 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
      v77 = v1031;
      if (!v1031)
        goto LABEL_1653;
      v883 = (unint64_t *)&v1031->__shared_owners_;
      do
        v79 = __ldaxr(v883);
      while (__stlxr(v79 - 1, v883));
      goto LABEL_1651;
    case 0x11u:
      v244 = *(std::string **)v998;
      v243 = (std::__shared_weak_count *)*((_QWORD *)v998 + 1);
      v1028 = *(std::string **)v998;
      v1029 = v243;
      if (v243)
      {
        v245 = (unint64_t *)&v243->__shared_owners_;
        do
          v246 = __ldxr(v245);
        while (__stxr(v246 + 1, v245));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 17;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v244->__r_.__value_.__r.__words[2]);
      v247 = v244[1].__r_.__value_.__l.__data_;
      v248 = (_BYTE *)v244[1].__r_.__value_.__l.__size_;
      if (v248 != v247)
        memmove(*(void **)&v1089[24], v247, v248 - v247);
      v1077 = v244;
      v1078 = v243;
      if (v243)
      {
        v249 = (unint64_t *)&v243->__shared_owners_;
        do
          v250 = __ldxr(v249);
        while (__stxr(v250 + 1, v249));
        v1082 = (unint64_t)v244;
        v1083 = v243;
        v251 = (unint64_t *)&v243->__shared_owners_;
        do
          v252 = __ldxr(v251);
        while (__stxr(v252 + 1, v251));
      }
      else
      {
        v1082 = (unint64_t)v244;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v709) = 0;
      else
        v709 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v710 = v1071;
      if (v1071 == v1072)
        goto LABEL_1245;
      while (!v710[5])
      {
LABEL_1239:
        v714 = v710[1];
        if (v714)
        {
          do
          {
            v715 = (_QWORD **)v714;
            v714 = (_QWORD *)*v714;
          }
          while (v714);
        }
        else
        {
          do
          {
            v715 = (_QWORD **)v710[2];
            v9 = *v715 == v710;
            v710 = v715;
          }
          while (!v9);
        }
        v710 = v715;
        if (v715 == v1072)
        {
LABEL_1245:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
          v988 = 4;
          v978 = v1074;
          v716 = 4;
          goto LABEL_1564;
        }
      }
      if (v1084.__r_.__value_.__l.__size_)
      {
        v711 = *((_DWORD *)v710 + 8);
        v712 = v1084.__r_.__value_.__l.__size_;
        do
        {
          v713 = *(_DWORD *)(v712 + 28);
          if (v711 >= v713)
          {
            if (v713 >= v711)
              goto LABEL_1239;
            v712 += 8;
          }
          v712 = *(_QWORD *)v712;
        }
        while (v712);
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      }
      v1109 = 0x200000001;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v717 = v1071;
      if (v1071 == v1072)
      {
LABEL_1261:
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        if ((_BYTE)v1074)
          v723 = 3;
        else
          v723 = 2;
        v978 = v723;
        v716 = 4;
      }
      else
      {
        while (!v717[5])
        {
LABEL_1255:
          v721 = v717[1];
          if (v721)
          {
            do
            {
              v722 = (_QWORD **)v721;
              v721 = (_QWORD *)*v721;
            }
            while (v721);
          }
          else
          {
            do
            {
              v722 = (_QWORD **)v717[2];
              v9 = *v722 == v717;
              v717 = v722;
            }
            while (!v9);
          }
          v717 = v722;
          if (v722 == v1072)
            goto LABEL_1261;
        }
        if (v1084.__r_.__value_.__l.__size_)
        {
          v718 = *((_DWORD *)v717 + 8);
          v719 = v1084.__r_.__value_.__l.__size_;
          do
          {
            v720 = *(_DWORD *)(v719 + 28);
            if (v718 >= v720)
            {
              if (v720 >= v718)
                goto LABEL_1255;
              v719 += 8;
            }
            v719 = *(_QWORD *)v719;
          }
          while (v719);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
        }
        v716 = 6;
        v978 = 4;
      }
      v988 = v716;
LABEL_1564:
      v913 = (unint64_t)__p[1];
      v914 = v1063 - 1;
      if ((unint64_t)(v1063 - 1) <= (uint64_t)__p[1] * (uint64_t)v1064)
        v914 = (uint64_t)__p[1] * v1064;
      v1023 = v244;
      if (v914)
        v915 = vcvtpd_u64_f64(log2((double)(unint64_t)v914)) + 1;
      else
        LOBYTE(v915) = 0;
      v916 = (v709 + (unint64_t)v915 + v716 + 7) >> 3;
      if (*((_QWORD *)&v1063 + 1))
        v917 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
      else
        v917 = 0;
      v977 = v916;
      v918 = v916 + 8;
      if (v913 == 1)
        v919 = 1;
      else
        v919 = vcvtpd_u64_f64(log2((double)(v913 - 1))) + 2;
      v920 = v915;
      v921 = *((_QWORD *)&v1064 + 1) * v913;
      if (*((_QWORD *)&v1064 + 1) * v913)
      {
        v922 = log2((double)v921);
        v920 = v915;
        LODWORD(v921) = vcvtpd_u64_f64(v922) + 1;
      }
      *(_DWORD *)&v1089[32] = 0;
      v923 = v918;
      *(_WORD *)&v1089[36] = v918;
      v1089[38] = v709;
      v1089[39] = v988;
      *(_WORD *)&v1089[40] = v915;
      v1089[42] = v917;
      v1089[43] = v919;
      v1089[44] = v921;
      v1089[45] = v978;
      *(_DWORD *)&v1089[46] = 0;
      *(_QWORD *)&v1089[56] = v913;
      v1084.__r_.__value_.__r.__words[0] = ~(-1 << v709);
      LODWORD(v1084.__r_.__value_.__r.__words[1]) = v709 >> 3;
      HIDWORD(v1084.__r_.__value_.__r.__words[1]) = v709 & 7;
      v924 = ((-(char)v915 - ((_BYTE)v988 + (_BYTE)v709)) & 7) + v988 + v709;
      LODWORD(v1084.__r_.__value_.__r.__words[2]) = ~(-1 << v988);
      HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v924 >> 3;
      v1085 = v924 & 7;
      v1087 = ~(-1 << v920);
      v1088 = v977;
      if (v917 - 25 >= 0x27)
        v925 = 0;
      else
        v925 = -v917 & 7;
      v926 = v925 + v917;
      if (v919 - 25 >= 0x27)
        v927 = 0;
      else
        v927 = -v919 & 7;
      *(_DWORD *)&v1089[84] = v926;
      DWORD1(v1095) = v927 + v919;
      if (v921 - 25 >= 0x27)
        v928 = 0;
      else
        v928 = -(int)v921 & 7;
      DWORD1(v1100) = v928 + v921;
      v930 = (uint64_t *)v1023[2].__r_.__value_.__l.__data_;
      v929 = (uint64_t *)v1023[2].__r_.__value_.__l.__size_;
      if (v930 != v929)
      {
        v931 = 0;
        do
        {
          v932 = *v930;
          if (*(_BYTE *)*v930)
          {
            v933 = *(_QWORD *)(v932 + 80);
            v934 = *(_QWORD *)(v932 + 88);
            if (v933 != v934)
            {
              v935 = *(_QWORD *)&v1089[24];
              do
              {
                *(double *)(v935 + 8 * *(_QWORD *)v933) = *(double *)(v933 + 8)
                                                          + *(double *)(v935 + 8 * *(_QWORD *)v933);
                v933 += 16;
              }
              while (v933 != v934);
            }
          }
          else
          {
            CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
            CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1100, v1105);
            CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>((uint64_t)&__src, (uint64_t)&v1089[32], (uint64_t)&v1084, v931++, v930);
          }
          v930 += 2;
        }
        while (v930 != v929);
        v923 = *(_WORD *)&v1089[36];
      }
      v1109 = *(_QWORD *)&v1089[64] * v923;
      CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v923);
      ++*(_QWORD *)&v1089[64];
      v936 = v1083;
      if (v1083)
      {
        v937 = (unint64_t *)&v1083->__shared_owners_;
        do
          v938 = __ldaxr(v937);
        while (__stlxr(v938 - 1, v937));
        if (!v938)
        {
          ((void (*)(std::__shared_weak_count *))v936->__on_zero_shared)(v936);
          std::__shared_weak_count::__release_weak(v936);
        }
      }
      v939 = v1078;
      if (v1078)
      {
        v940 = (unint64_t *)&v1078->__shared_owners_;
        do
          v941 = __ldaxr(v940);
        while (__stlxr(v941 - 1, v940));
        if (!v941)
        {
          ((void (*)(std::__shared_weak_count *))v939->__on_zero_shared)(v939);
          std::__shared_weak_count::__release_weak(v939);
        }
      }
      v1107 = v1028[5].__r_.__value_.__r.__words[1];
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, 0, v1089, &v1089[16], 16);
      v942 = *(char **)&v1089[24];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
      std::vector<unsigned char>::reserve((unint64_t *)a1, *(_QWORD *)&v1089[16] + *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v942, &v942[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), &v1089[32], &v1089[64], 32);
      v943 = *(char **)&v1089[72];
      v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
      std::vector<unsigned char>::reserve((unint64_t *)a1, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v943, &v943[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)a1, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)a1, 1);
      v944 = v1106;
      v1084.__r_.__value_.__r.__words[0] = v1105;
      std::vector<unsigned char>::reserve((unint64_t *)a1, v1105 + *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v944, &v944[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)a1, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v1107, v1108, 4);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
      CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
      v77 = v1029;
      if (!v1029)
        goto LABEL_1653;
      v945 = (unint64_t *)&v1029->__shared_owners_;
      do
        v79 = __ldaxr(v945);
      while (__stlxr(v79 - 1, v945));
      goto LABEL_1651;
    case 0x12u:
      v226 = *(std::string **)v998;
      v225 = (unint64_t *)*((_QWORD *)v998 + 1);
      v1026 = *(std::string **)v998;
      v1027 = (std::__shared_weak_count *)v225;
      if (v225)
      {
        v227 = v225 + 1;
        do
          v228 = __ldxr(v227);
        while (__stxr(v228 + 1, v227));
      }
      *(_DWORD *)&v1089[46] = 0;
      memset(&v1089[8], 0, 37);
      v1094 = 0;
      v1093 = 0;
      memset(&v1089[56], 0, 32);
      v1090 = 0u;
      v1091 = 0;
      v1092 = (CoreML::Archiver::MMappedContentManager *)&v1093;
      v1099 = 0;
      v1095 = 0u;
      v1096 = 0u;
      v1098 = 0;
      v1097 = (CoreML::Archiver::MMappedContentManager *)&v1098;
      DWORD1(v1095) = 64;
      v1100 = 0u;
      v1101 = 0u;
      v1103 = 0;
      v1102 = (CoreML::Archiver::MMappedContentManager *)&v1103;
      DWORD1(v1100) = 64;
      v1106 = 0;
      v1104 = 0;
      v1105 = 0;
      *(_QWORD *)v1089 = 0;
      *(_DWORD *)&v1089[84] = 64;
      *(_DWORD *)&v1089[8] = 18;
      v1081 = 0;
      v1080 = 0;
      __src = (unint64_t)&v1080;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v1089[16], (void **)&v1089[24], v226->__r_.__value_.__r.__words[2]);
      v229 = v226[1].__r_.__value_.__l.__data_;
      v230 = (_BYTE *)v226[1].__r_.__value_.__l.__size_;
      if (v230 != v229)
        memmove(*(void **)&v1089[24], v229, v230 - v229);
      v1077 = v226;
      v1078 = (std::__shared_weak_count *)v225;
      if (v225)
      {
        v231 = v225 + 1;
        do
          v232 = __ldxr(v231);
        while (__stxr(v232 + 1, v231));
        v1082 = (unint64_t)v226;
        v1083 = (std::__shared_weak_count *)v225;
        do
          v233 = __ldxr(v231);
        while (__stxr(v233 + 1, v231));
      }
      else
      {
        v1082 = (unint64_t)v226;
        v1083 = 0;
      }
      if (__p[0] == (void *)1)
        LOBYTE(v629) = 0;
      else
        v629 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
      v1109 = 0x300000000;
      std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
      v630 = v1071;
      v987 = (CoreML::Archiver::PackedIntegerVector *)v225;
      if (v1071 == v1072)
        goto LABEL_1050;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v1084, v53);
      v974 = std::string::insert(&v1084, 0, "Unrecognized profile number ");
      v975 = *(_OWORD *)&v974->__r_.__value_.__l.__data_;
      *(_QWORD *)&v1089[16] = *((_QWORD *)&v974->__r_.__value_.__l + 2);
      *(_OWORD *)v1089 = v975;
      v974->__r_.__value_.__l.__size_ = 0;
      v974->__r_.__value_.__r.__words[2] = 0;
      v974->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)v1089);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  while (!v630[5])
  {
LABEL_1044:
    v634 = v630[1];
    if (v634)
    {
      do
      {
        v635 = (_QWORD **)v634;
        v634 = (_QWORD *)*v634;
      }
      while (v634);
    }
    else
    {
      do
      {
        v635 = (_QWORD **)v630[2];
        v9 = *v635 == v630;
        v630 = v635;
      }
      while (!v9);
    }
    v630 = v635;
    if (v635 == v1072)
    {
LABEL_1050:
      std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
      v636 = 4;
      v995 = v1074;
      v637 = 4;
      goto LABEL_1354;
    }
  }
  if (v1084.__r_.__value_.__l.__size_)
  {
    v631 = *((_DWORD *)v630 + 8);
    v632 = v1084.__r_.__value_.__l.__size_;
    do
    {
      v633 = *(_DWORD *)(v632 + 28);
      if (v631 >= v633)
      {
        if (v633 >= v631)
          goto LABEL_1044;
        v632 += 8;
      }
      v632 = *(_QWORD *)v632;
    }
    while (v632);
    std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
  }
  v1109 = 0x200000001;
  std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v1084, (int *)&v1109, v1110);
  v638 = v1071;
  if (v1071 == v1072)
  {
LABEL_1066:
    std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
    if ((_BYTE)v1074)
      v644 = 3;
    else
      v644 = 2;
    v995 = v644;
    v637 = 4;
  }
  else
  {
    while (!v638[5])
    {
LABEL_1060:
      v642 = v638[1];
      if (v642)
      {
        do
        {
          v643 = (_QWORD **)v642;
          v642 = (_QWORD *)*v642;
        }
        while (v642);
      }
      else
      {
        do
        {
          v643 = (_QWORD **)v638[2];
          v9 = *v643 == v638;
          v638 = v643;
        }
        while (!v9);
      }
      v638 = v643;
      if (v643 == v1072)
        goto LABEL_1066;
    }
    if (v1084.__r_.__value_.__l.__size_)
    {
      v639 = *((_DWORD *)v638 + 8);
      v640 = v1084.__r_.__value_.__l.__size_;
      do
      {
        v641 = *(_DWORD *)(v640 + 28);
        if (v639 >= v641)
        {
          if (v641 >= v639)
            goto LABEL_1060;
          v640 += 8;
        }
        v640 = *(_QWORD *)v640;
      }
      while (v640);
      std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v1084.__r_.__value_.__l.__size_);
    }
    v637 = 6;
    v995 = 4;
  }
  v636 = v637;
LABEL_1354:
  v772 = v1063 - 1;
  if ((uint64_t)v1063 - 1 <= (unint64_t)v1064)
    v772 = v1064;
  v1018 = v226;
  if (v772)
    v773 = vcvtpd_u64_f64(log2((double)v772)) + 1;
  else
    LOBYTE(v773) = 0;
  v774 = (v629 + (unint64_t)v773 + v637 + 7) >> 3;
  v775 = v774 + 8;
  if (*((_QWORD *)&v1063 + 1))
    v776 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v1063 + 1))) + 1;
  else
    v776 = 0;
  v777 = __p[1];
  v778 = (char *)__p[1] - 1;
  if (__p[1] != (void *)1)
    LODWORD(v778) = vcvtpd_u64_f64(log2((double)(unint64_t)v778)) + 1;
  *(_DWORD *)&v1089[32] = 0;
  *(_WORD *)&v1089[36] = v774 + 8;
  v1089[38] = v629;
  v1089[39] = v636;
  *(_WORD *)&v1089[40] = v773;
  v1089[42] = v776;
  *(_WORD *)&v1089[43] = v778;
  v1089[45] = v995;
  *(_DWORD *)&v1089[46] = 0;
  *(_QWORD *)&v1089[56] = v777;
  v1084.__r_.__value_.__r.__words[0] = ~(-1 << v629);
  LODWORD(v1084.__r_.__value_.__r.__words[1]) = v629 >> 3;
  HIDWORD(v1084.__r_.__value_.__r.__words[1]) = v629 & 7;
  v779 = ((-(char)v773 - ((_BYTE)v636 + (_BYTE)v629)) & 7) + v636 + v629;
  LODWORD(v1084.__r_.__value_.__r.__words[2]) = ~(-1 << v636);
  HIDWORD(v1084.__r_.__value_.__r.__words[2]) = v779 >> 3;
  v1085 = v779 & 7;
  v1087 = ~(-1 << v773);
  v1088 = v774;
  if (v776 - 25 >= 0x27)
    v780 = 0;
  else
    v780 = -v776 & 7;
  v781 = v780 + v776;
  if (v778 - 25 >= 0x27)
    v782 = 0;
  else
    v782 = -(int)v778 & 7;
  *(_DWORD *)&v1089[84] = v781;
  DWORD1(v1095) = v782 + v778;
  DWORD1(v1100) = 0;
  v784 = (uint64_t *)v1018[2].__r_.__value_.__l.__data_;
  v783 = (uint64_t *)v1018[2].__r_.__value_.__l.__size_;
  if (v784 != v783)
  {
    v785 = 0;
    do
    {
      v786 = *v784;
      if (*(_BYTE *)*v784)
      {
        v787 = *(_QWORD *)(v786 + 80);
        v788 = *(_QWORD *)(v786 + 88);
        if (v787 != v788)
        {
          v789 = *(_QWORD *)&v1089[24];
          do
          {
            *(double *)(v789 + 8 * *(_QWORD *)v787) = *(double *)(v787 + 8)
                                                      + *(double *)(v789 + 8 * *(_QWORD *)v787);
            v787 += 16;
          }
          while (v787 != v788);
        }
      }
      else
      {
        CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v1089[80], *(uint64_t *)&v1089[64]);
        CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>((uint64_t)&__src, (uint64_t)&v1089[32], (uint64_t)&v1084, v785++, v784);
      }
      v784 += 2;
    }
    while (v784 != v783);
    v775 = *(_WORD *)&v1089[36];
  }
  v1109 = *(_QWORD *)&v1089[64] * v775;
  CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, &v1109, (void **)&v1089[72], v775);
  ++*(_QWORD *)&v1089[64];
  if (v987)
  {
    v790 = (unint64_t *)((char *)v987 + 8);
    do
      v791 = __ldaxr(v790);
    while (__stlxr(v791 - 1, v790));
    if (!v791)
    {
      (*(void (**)(CoreML::Archiver::PackedIntegerVector *))(*(_QWORD *)v987 + 16))(v987);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v987);
    }
  }
  v792 = v1078;
  if (v1078)
  {
    v793 = (unint64_t *)&v1078->__shared_owners_;
    do
      v794 = __ldaxr(v793);
    while (__stlxr(v794 - 1, v793));
    if (!v794)
    {
      ((void (*)(std::__shared_weak_count *))v792->__on_zero_shared)(v792);
      std::__shared_weak_count::__release_weak(v792);
    }
  }
  v1107 = v1026[5].__r_.__value_.__r.__words[1];
  *(_QWORD *)(v1025 + 8) = 0;
  *(_QWORD *)(v1025 + 16) = 0;
  *(_QWORD *)v1025 = 0;
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, 0, v1089, &v1089[16], 16);
  v795 = *(char **)&v1089[24];
  v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[16];
  std::vector<unsigned char>::reserve((unint64_t *)v1025, *(_QWORD *)&v1089[16] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v795, &v795[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), &v1089[32], &v1089[64], 32);
  v796 = *(char **)&v1089[72];
  v1084.__r_.__value_.__r.__words[0] = *(_QWORD *)&v1089[64] * *(unsigned __int16 *)&v1089[36];
  std::vector<unsigned char>::reserve((unint64_t *)v1025, v1084.__r_.__value_.__r.__words[0] + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v796, &v796[v1084.__r_.__value_.__r.__words[0]], (int64_t)v1084.__r_.__value_.__l.__data_);
  CoreML::Archiver::PackedIntegerVector::export_to_image(&v1089[80], (char **)v1025, 1);
  CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1095, (char **)v1025, 1);
  v797 = v1106;
  v1084.__r_.__value_.__r.__words[0] = v1105;
  std::vector<unsigned char>::reserve((unint64_t *)v1025, v1105 + *(_QWORD *)(v1025 + 8) - *(_QWORD *)v1025 + 8);
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1084, &v1084.__r_.__value_.__s.__data_[8], 8);
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), v797, &v797[8 * v1084.__r_.__value_.__r.__words[0]], 8 * v1084.__r_.__value_.__r.__words[0]);
  CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v1100, (char **)v1025, 1);
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v1025, *(char **)(v1025 + 8), (char *)&v1107, v1108, 4);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1102);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1097);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v1092);
  v77 = v1027;
  if (v1027)
  {
    v798 = (unint64_t *)&v1027->__shared_owners_;
    do
      v79 = __ldaxr(v798);
    while (__stlxr(v79 - 1, v798));
    goto LABEL_1651;
  }
LABEL_1653:
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v1072[0]);
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v1067);
}

void sub_19C83C598()
{
  JUMPOUT(0x19C83CC58);
}

_QWORD *std::map<std::string,std::string>::map[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t **v7;
  char *v8;
  uint64_t *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD v17[2];
  char v18;
  uint64_t v19;
  uint64_t v20;

  a1[1] = 0;
  v3 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_equal<std::string>(a1, v3, &v20, &v19, v5 + 4);
      if (!*v6)
      {
        v7 = v6;
        v8 = (char *)operator new(0x50uLL);
        v9 = (uint64_t *)v8;
        v17[0] = v8;
        v17[1] = v3;
        v18 = 0;
        if (*((char *)v5 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v8 + 32), (const std::string::value_type *)v5[4], v5[5]);
        }
        else
        {
          v10 = *((_OWORD *)v5 + 2);
          *((_QWORD *)v8 + 6) = v5[6];
          *((_OWORD *)v8 + 2) = v10;
        }
        v11 = (std::string *)(v9 + 7);
        if (*((char *)v5 + 79) < 0)
        {
          std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v5[7], v5[8]);
        }
        else
        {
          v12 = *(_OWORD *)(v5 + 7);
          v9[9] = v5[9];
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
        }
        v18 = 1;
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, v20, v7, v9);
        v17[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v17);
      }
      v13 = (_QWORD *)v5[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v5[2];
          v15 = *v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v15);
      }
      v5 = v14;
    }
    while (v14 != v4);
  }
  return a1;
}

void sub_19C83CDDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD **v2;
  uint64_t v3;
  void **v4;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v3 + 55) < 0)
    operator delete(*v4);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;

  if (a5 < 1)
    return;
  v10 = *(_BYTE **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = (char *)operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    memcpy(&v13[(_QWORD)v16], __src, a5);
    if (v11 == __dst)
    {
      v27 = &v13[(_QWORD)v16];
    }
    else
    {
      do
      {
        v13[(_QWORD)v16 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(_BYTE **)(a1 + 8);
      v27 = v16;
    }
    v28 = &v26[a5];
    v29 = &v16[v15];
    if (v10 != __dst)
      memmove(v28, __dst, v10 - __dst);
    v30 = *(char **)a1;
    *(_QWORD *)a1 = v27;
    *(_QWORD *)(a1 + 8) = &v28[v10 - __dst];
    *(_QWORD *)(a1 + 16) = v29;
    if (v30)
      operator delete(v30);
    return;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(_BYTE **)(a1 + 8);
LABEL_17:
    v21 = &__dst[a5];
    v22 = &v20[-a5];
    v23 = v20;
    if (&v20[-a5] < v10)
    {
      v24 = (char *)(&v10[a5] - v20);
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&__dst[a5], __dst, v20 - v21);
    if (v18 != __src)
      memmove(__dst, __src, v18 - __src);
    return;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_17;
}

void std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5;
  char *v6;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  char *v30;
  char *v31;
  char v32;
  char *v33;
  char *v34;

  if (a5 < 1)
    return;
  v5 = a5;
  v6 = __src;
  v10 = *(_BYTE **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    v27 = &v13[(_QWORD)v16 + v5];
    v28 = v26;
    do
    {
      v29 = *v6++;
      *v28++ = v29;
      --v5;
    }
    while (v5);
    v30 = *(char **)a1;
    if (*(char **)a1 != __dst)
    {
      v31 = __dst;
      do
      {
        v32 = *--v31;
        *--v26 = v32;
      }
      while (v31 != v30);
      v10 = *(_BYTE **)(a1 + 8);
    }
    v33 = (char *)v16 + v15;
    if (v10 != __dst)
      memmove(v27, __dst, v10 - __dst);
    v34 = *(char **)a1;
    *(_QWORD *)a1 = v26;
    *(_QWORD *)(a1 + 8) = &v27[v10 - __dst];
    *(_QWORD *)(a1 + 16) = v33;
    if (v34)
      operator delete(v34);
    return;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(_BYTE **)(a1 + 8);
LABEL_17:
    v21 = &__dst[v5];
    v22 = &v20[-v5];
    v23 = v20;
    if (&v20[-v5] < v10)
    {
      v24 = (char *)(&v10[v5] - v20);
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&__dst[v5], __dst, v20 - v21);
    if (v18 != v6)
      memmove(__dst, v6, v18 - v6);
    return;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_17;
}

void std::vector<unsigned char>::insert(char **a1, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  unint64_t v5;
  char *v6;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char v33;
  char *v34;
  char *v35;

  if (a3)
  {
    v4 = a4;
    v5 = a3;
    v6 = __src;
    v9 = a1[1];
    v8 = a1[2];
    if (v8 - v9 >= a3)
    {
      v16 = v9 - __src;
      v17 = a3 - (v9 - __src);
      if (a3 <= v9 - __src)
      {
        v18 = a1[1];
        v20 = a3;
      }
      else
      {
        v18 = &__src[a3];
        v19 = a1[1];
        do
        {
          *v19++ = *a4;
          --v17;
        }
        while (v17);
        a1[1] = v18;
        if (!v16)
          return;
        v20 = v9 - __src;
      }
      v21 = &__src[a3];
      v22 = v18;
      if (&v18[-a3] < v9)
      {
        if (a3 <= v16)
          v23 = v9 - __src;
        else
          v23 = a3;
        v24 = &__src[-a3];
        v25 = __src;
        v26 = __src;
        do
        {
          v25[v23] = v24[v23];
          ++v26;
          ++v24;
          ++v25;
        }
        while (&v26[v23 - (_QWORD)v9 - a3]);
        if (a3 > v16)
          v16 = a3;
        v22 = &v25[v16];
      }
      a1[1] = v22;
      if (v18 != v21)
        memmove(&__src[a3], __src, v18 - v21);
      if (v6 <= v4)
      {
        if (a1[1] <= v4)
          v27 = 0;
        else
          v27 = v5;
        v4 += v27;
      }
      do
      {
        *v6++ = *v4;
        --v20;
      }
      while (v20);
    }
    else
    {
      v10 = *a1;
      v11 = v9 - *a1 + a3;
      if (v11 < 0)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v12 = (char *)(__src - v10);
      v13 = v8 - v10;
      if (2 * v13 > v11)
        v11 = 2 * v13;
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v11;
      if (v14)
        v15 = operator new(v14);
      else
        v15 = 0;
      v28 = &v12[(_QWORD)v15];
      v29 = &v12[(_QWORD)v15 + v5];
      v30 = v28;
      do
      {
        *v30++ = *v4;
        --v5;
      }
      while (v5);
      v31 = *a1;
      if (*a1 != v6)
      {
        v32 = v6;
        do
        {
          v33 = *--v32;
          *--v28 = v33;
        }
        while (v32 != v31);
        v9 = a1[1];
      }
      v34 = (char *)v15 + v14;
      if (v9 != v6)
        memmove(v29, v6, v9 - v6);
      v35 = *a1;
      *a1 = v28;
      a1[1] = &v29[v9 - v6];
      a1[2] = v34;
      if (v35)
        operator delete(v35);
    }
  }
}

uint64_t CoreML::Archiver::MMappedContentManager::extend_data_block<double>(uint64_t a1, uint64_t *a2, void **a3, uint64_t a4)
{
  uint64_t v4;
  void *v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  void *v17;
  void *v18;
  uint64_t *v19;
  uint64_t result;
  std::bad_alloc *exception;
  std::bad_alloc *v22;
  __int128 v23;

  v4 = a4;
  v8 = *a3;
  if (*a3)
  {
    v9 = *(_QWORD **)(a1 + 8);
    if (!v9)
      goto LABEL_13;
    v10 = (uint64_t *)(a1 + 8);
    do
    {
      v11 = v9[4];
      v12 = v11 >= (unint64_t)v8;
      if (v11 >= (unint64_t)v8)
        v13 = v9;
      else
        v13 = v9 + 1;
      if (v12)
        v10 = v9;
      v9 = (_QWORD *)*v13;
    }
    while (*v13);
    if (v10 == (uint64_t *)(a1 + 8) || (unint64_t)v8 < v10[4])
LABEL_13:
      v10 = (uint64_t *)(a1 + 8);
    v14 = v10[5];
    if (*a2 + a4 <= v14)
      goto LABEL_21;
    v15 = (3 * (v14 + a4)) >> 1;
    v16 = (char *)malloc_type_realloc(v8, 8 * v15, 0x100004000313F17uLL);
    if (v16)
    {
      v17 = v16;
      bzero(&v16[8 * v10[5]], 8 * (v15 - v10[5]));
      if (v17 == *a3)
      {
        v10[5] = v15;
      }
      else
      {
        *a3 = v17;
        std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__remove_node_pointer((uint64_t **)a1, v10);
        operator delete(v10);
        *(_QWORD *)&v23 = *a3;
        *((_QWORD *)&v23 + 1) = v15;
        std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::pair<void * const,unsigned long>>((uint64_t *)a1, v23, &v23);
      }
LABEL_21:
      result = *a2;
      v4 += *a2;
      goto LABEL_22;
    }
LABEL_23:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v22 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v22, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
  }
  v18 = malloc_type_calloc(16 * a4, 8uLL, 0x100004000313F17uLL);
  *a3 = v18;
  if (!v18)
    goto LABEL_23;
  *(_QWORD *)&v23 = v18;
  v19 = std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)a1, (unint64_t)v18, (uint64_t *)&v23);
  result = 0;
  v19[5] = 16 * v4;
LABEL_22:
  *a2 = v4;
  return result;
}

CoreML::Archiver::MMappedContentManager **CoreML::TreeEnsembles::Internal::CTEnsemble<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>>::~CTEnsemble(CoreML::Archiver::MMappedContentManager **a1)
{
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(a1 + 28);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(a1 + 21);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(a1 + 14);
  return a1;
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

uint64_t CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(uint64_t a1, uint64_t *a2, void **a3, uint64_t a4)
{
  uint64_t v4;
  void *v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  void *v17;
  void *v18;
  uint64_t *v19;
  uint64_t result;
  std::bad_alloc *exception;
  std::bad_alloc *v22;
  __int128 v23;

  v4 = a4;
  v8 = *a3;
  if (*a3)
  {
    v9 = *(_QWORD **)(a1 + 8);
    if (!v9)
      goto LABEL_13;
    v10 = (uint64_t *)(a1 + 8);
    do
    {
      v11 = v9[4];
      v12 = v11 >= (unint64_t)v8;
      if (v11 >= (unint64_t)v8)
        v13 = v9;
      else
        v13 = v9 + 1;
      if (v12)
        v10 = v9;
      v9 = (_QWORD *)*v13;
    }
    while (*v13);
    if (v10 == (uint64_t *)(a1 + 8) || (unint64_t)v8 < v10[4])
LABEL_13:
      v10 = (uint64_t *)(a1 + 8);
    v14 = v10[5];
    if (*a2 + a4 <= v14)
      goto LABEL_21;
    v15 = (3 * (v14 + a4)) >> 1;
    v16 = (char *)malloc_type_realloc(v8, v15, 0x100004077774924uLL);
    if (v16)
    {
      v17 = v16;
      bzero(&v16[v10[5]], v15 - v10[5]);
      if (v17 == *a3)
      {
        v10[5] = v15;
      }
      else
      {
        *a3 = v17;
        std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__remove_node_pointer((uint64_t **)a1, v10);
        operator delete(v10);
        *(_QWORD *)&v23 = *a3;
        *((_QWORD *)&v23 + 1) = v15;
        std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::pair<void * const,unsigned long>>((uint64_t *)a1, v23, &v23);
      }
LABEL_21:
      result = *a2;
      v4 += *a2;
      goto LABEL_22;
    }
LABEL_23:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v22 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v22, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
  }
  v18 = malloc_type_calloc(16 * a4, 1uLL, 0x100004077774924uLL);
  *a3 = v18;
  if (!v18)
    goto LABEL_23;
  *(_QWORD *)&v23 = v18;
  v19 = std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)a1, (unint64_t)v18, (uint64_t *)&v23);
  result = 0;
  v19[5] = 16 * v4;
LABEL_22:
  *a2 = v4;
  return result;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  std::__shared_weak_count *v17;
  int v18;
  double *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  _BOOL4 v31;
  unsigned int v32;
  __int128 **v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *__p;
  void *v70;
  uint64_t v71;
  double *v72;
  std::__shared_weak_count *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;

  v10 = *(unsigned __int16 *)(a2 + 4);
  v74 = *(_QWORD *)(a2 + 32) * v10;
  v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v74, (void **)(a2 + 40), v10);
  ++*(_QWORD *)(a2 + 32);
  v12 = *(unsigned int *)(a2 + 52);
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + ((unint64_t)(v12 * a4) >> 3));
  v29 = (_DWORD)v12 == 64;
  v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (!v29)
    v13 = v14;
  v15 = *a5;
  v16 = *(double **)(*a5 + 120);
  v17 = *(std::__shared_weak_count **)(*a5 + 128);
  v18 = *(unsigned __int8 *)v16;
  v19 = *(double **)(*a5 + 136);
  v20 = *(unsigned __int8 *)v19;
  v21 = *(unsigned __int8 *)(*a5 + 64);
  v22 = *(_BYTE *)(*a5 + 64) == 0;
  v23 = *(_DWORD *)(*a5 + 4);
  v74 = (unint64_t)v16;
  v75 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v15 = *a5;
    v19 = *(double **)(*a5 + 136);
  }
  v26 = *(std::__shared_weak_count **)(v15 + 144);
  v72 = v19;
  v73 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v18)
    v29 = v20 == 0;
  else
    v29 = 0;
  v30 = v29;
  if ((v20 | v18 || v16[3] >= v19[3]) && (v31 = v21 != 0, !v30))
  {
    v17 = v26;
    v33 = (__int128 **)v19;
    v19 = v16;
    v34 = v18;
    v18 = v20;
    v22 = v31;
  }
  else
  {
    v32 = v23 - 1;
    if (v32 > 4)
      v23 = 3;
    else
      v23 = dword_19CB2F578[v32];
    v74 = (unint64_t)v19;
    v75 = v26;
    v33 = (__int128 **)v16;
    v34 = v20;
    v72 = v16;
    v73 = v17;
  }
  v35 = *(unsigned __int8 *)(a2 + 13);
  v36 = v11 / v10;
  if (v35 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1)
        goto LABEL_36;
      goto LABEL_31;
    }
LABEL_32:
    v37 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v40 = *(_DWORD *)(a3 + 16);
    v41 = (*v38 >> v37) & v40 | 8;
    goto LABEL_33;
  }
  if (v35 > 1)
  {
    v44 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v45 = *(_DWORD *)(a3 + 16);
    v42 = (v45 & (*v38 >> v44) & 0xFFFFFFC7 | (8 * v23)) << v44;
    v43 = v45 << v44;
    goto LABEL_35;
  }
  if (v23 == 3)
    goto LABEL_32;
  if (!v23)
  {
LABEL_31:
    v37 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v40 = *(_DWORD *)(a3 + 16);
    v41 = (*v38 >> v37) & v40 & 0xFFFFFFF7;
LABEL_33:
    v42 = v41 << v37;
    v43 = v40 << v37;
LABEL_35:
    *v38 = v42 | v39 & ~v43;
  }
LABEL_36:
  v46 = v13 + a4;
  if (v22)
    v48 = 4;
  else
    v48 = 0;
  v47 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v48) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v49 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v49 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v49 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v34) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v49 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v50 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v50 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v50 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v18 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v50 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v34 && v18)
  {
    __p = 0;
    v70 = 0;
    v71 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v19 + 10), *((__int128 **)v19 + 11), (uint64_t)(*((_QWORD *)v19 + 11) - *((_QWORD *)v19 + 10)) >> 4);
    v51 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, &__p);
    if (__p)
    {
      v70 = __p;
      operator delete(__p);
    }
    v66 = 0;
    v67 = 0;
    v68 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v66, v33[10], v33[11], v33[11] - v33[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, &v66);
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
    }
    v52 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v51 - v46) << *(_DWORD *)(a3 + 24));
  }
  else if (v34 || !v18)
  {
    if (!(v18 | v34))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, a4, &v74);
      v55 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, a4, &v72);
      v56 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
      *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v55 - v36) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    v63 = 0;
    v64 = 0;
    v65 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v63, v33[10], v33[11], v33[11] - v33[10]);
    v53 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, &v63);
    if (v63)
    {
      v64 = v63;
      operator delete(v63);
    }
    v54 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v53 - v46) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, a4, &v74);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4)) = *(_QWORD *)(*(_QWORD *)(a2 + 40)
                                                                                      + v36
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(_QWORD *)a3 | *(_QWORD *)(*a5 + 8);
  *(_QWORD *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 40)) = *(_QWORD *)(*a5 + 16);
  if (v17)
  {
    v57 = (unint64_t *)&v17->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v59 = v75;
  if (v75)
  {
    v60 = (unint64_t *)&v75->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  return v36;
}

void sub_19C83DDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_19C83DEA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  *((_QWORD *)&v22 + 1) = *MEMORY[0x1E0C80C00];
  if (*a3 == a3[1])
  {
    v21 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v21, &v22);
  }
  v6 = *(_QWORD *)(a1 + 24);
  v20 = 0;
  std::vector<double>::vector(&v21, v6, &v20);
  v7 = (uint64_t *)v21;
  v8 = a3[1] - *a3;
  if (v8)
  {
    v9 = v8 >> 4;
    if (v9 <= 1)
      v9 = 1;
    v10 = (uint64_t *)(*a3 + 8);
    do
    {
      v11 = *(v10 - 1);
      v12 = *v10;
      v10 += 2;
      v7[v11] = v12;
      --v9;
    }
    while (v9);
  }
  v13 = *v7;
  v14 = CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1);
  *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v14) = v13;
  v15 = (_QWORD *)v21;
  if (*((_QWORD *)&v21 + 1) - (_QWORD)v21 >= 9uLL)
  {
    v16 = 1;
    do
    {
      v17 = v15[v16];
      *(_QWORD *)(*(_QWORD *)(a1 + 224)
                + 8
                * CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1)) = v17;
      ++v16;
      v15 = (_QWORD *)v21;
    }
    while (v16 < (uint64_t)(*((_QWORD *)&v21 + 1) - v21) >> 3);
  }
  v18 = *(_QWORD *)(a1 + 24);
  if (v15)
  {
    *((_QWORD *)&v21 + 1) = v15;
    operator delete(v15);
  }
  return v14 / v18;
}

void sub_19C83E024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  char *result;
  char *v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  char *v15;
  __int128 v16;

  v4 = a2;
  result = (char *)a1[2];
  v7 = (char *)*a1;
  if (result == (char *)*a1)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    result = std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__vallocate[abi:ne180100](a1, 1uLL);
    v12 = (char *)a1[1];
    v9 = a1 + 1;
    v7 = v12;
    v11 = v12;
    if (v4 != a3)
    {
      v11 = v7;
      do
      {
        v13 = *v4++;
        *(_OWORD *)v11 = v13;
        v11 += 16;
      }
      while (v4 != a3);
    }
    goto LABEL_11;
  }
  v10 = (char *)a1[1];
  v9 = a1 + 1;
  v8 = v10;
  if (v10 != v7)
  {
    v11 = v7;
    while (v4 != a3)
    {
      *(_QWORD *)v11 = *(_QWORD *)v4;
      *((_QWORD *)v11 + 1) = *((_QWORD *)v4 + 1);
      v11 += 16;
      ++v4;
    }
LABEL_11:
    v14 = (char *)(v11 - v7);
    goto LABEL_18;
  }
  if (a2 == a3)
  {
    v15 = v8;
  }
  else
  {
    v15 = v7;
    do
    {
      v16 = *v4++;
      *(_OWORD *)v15 = v16;
      v15 += 16;
    }
    while (v4 != a3);
  }
  v14 = (char *)(v15 - v8);
LABEL_18:
  *v9 = &v14[(_QWORD)v7];
  return result;
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<_KDInterval>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_19C83E19C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x30uLL);
    v9[4] = *a3;
    v9[5] = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

uint64_t *std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
}

uint64_t *std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::pair<void * const,unsigned long>>(uint64_t *result, unint64_t a2, _OWORD *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v9 + 2) = *a3;
    return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t **std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>(uint64_t **a1, int *a2, int *a3)
{
  uint64_t *v4;
  int *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  _DWORD *v16;
  uint64_t *v17;
  int v18;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a2 != a3)
  {
    v6 = a2;
    v7 = 0;
    v8 = a1 + 1;
    while (1)
    {
      v9 = v4;
      if (v8 == (uint64_t **)v4)
        goto LABEL_9;
      v10 = v7;
      v11 = v4;
      if (v7)
      {
        do
        {
          v9 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      v13 = *v6;
      if (*((_DWORD *)v9 + 7) < *v6)
      {
LABEL_9:
        v14 = v7 ? v9 : v4;
        v15 = v7 ? v9 + 1 : v4;
      }
      else
      {
        v14 = v4;
        v15 = v4;
        if (v7)
        {
          v15 = v4;
          while (1)
          {
            while (1)
            {
              v14 = v7;
              v18 = *((_DWORD *)v7 + 7);
              if (v13 >= v18)
                break;
              v7 = (uint64_t *)*v14;
              v15 = v14;
              if (!*v14)
                goto LABEL_16;
            }
            if (v18 >= v13)
              break;
            v15 = v14 + 1;
            v7 = (uint64_t *)v14[1];
            if (!v7)
              goto LABEL_16;
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        v16 = operator new(0x20uLL);
        v16[7] = *v6;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v14;
        *v15 = (uint64_t)v16;
        v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          v16 = (_DWORD *)*v15;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      if (++v6 == a3)
        break;
      v8 = (uint64_t **)*a1;
      v7 = a1[1];
    }
  }
  return a1;
}

void sub_19C83E4AC(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  std::__shared_weak_count *v18;
  int v19;
  double *v20;
  int v21;
  int v22;
  _BOOL4 v23;
  int v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  BOOL v30;
  int v31;
  _BOOL4 v32;
  unsigned int v33;
  __int128 **v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  unsigned int *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *__p;
  void *v70;
  uint64_t v71;
  double *v72;
  std::__shared_weak_count *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;

  v10 = *(unsigned __int16 *)(a2 + 4);
  v74 = *(_QWORD *)(a2 + 32) * v10;
  v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v74, (void **)(a2 + 40), v10);
  ++*(_QWORD *)(a2 + 32);
  v12 = *(unsigned int *)(a2 + 164);
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 184) + ((unint64_t)(v12 * a4) >> 3));
  v30 = (_DWORD)v12 == 64;
  v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (v30)
    v15 = v13;
  else
    v15 = v14;
  v16 = *a5;
  v17 = *(double **)(*a5 + 120);
  v18 = *(std::__shared_weak_count **)(*a5 + 128);
  v19 = *(unsigned __int8 *)v17;
  v20 = *(double **)(*a5 + 136);
  v21 = *(unsigned __int8 *)v20;
  v22 = *(unsigned __int8 *)(*a5 + 64);
  v23 = *(_BYTE *)(*a5 + 64) == 0;
  v24 = *(_DWORD *)(*a5 + 4);
  v74 = (unint64_t)v17;
  v75 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    v16 = *a5;
    v20 = *(double **)(*a5 + 136);
  }
  v27 = *(std::__shared_weak_count **)(v16 + 144);
  v72 = v20;
  v73 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (v19)
    v30 = v21 == 0;
  else
    v30 = 0;
  v31 = v30;
  if ((v21 | v19 || v17[3] >= v20[3]) && (v32 = v22 != 0, !v31))
  {
    v18 = v27;
    v34 = (__int128 **)v20;
    v20 = v17;
    v35 = v19;
    v19 = v21;
    v23 = v32;
  }
  else
  {
    v33 = v24 - 1;
    if (v33 > 4)
      v24 = 3;
    else
      v24 = dword_19CB2F578[v33];
    v74 = (unint64_t)v20;
    v75 = v27;
    v34 = (__int128 **)v17;
    v35 = v21;
    v72 = v17;
    v73 = v18;
  }
  v36 = *(unsigned __int8 *)(a2 + 13);
  v37 = v11 / v10;
  if (v36 - 2 < 2)
  {
    if (v24 != 2)
    {
      if (v24 != 1)
        goto LABEL_37;
      goto LABEL_32;
    }
LABEL_33:
    v38 = *(_DWORD *)(a3 + 12);
    v39 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v40 = *v39;
    v41 = *(_DWORD *)(a3 + 16);
    v42 = (*v39 >> v38) & v41 | 8;
    goto LABEL_34;
  }
  if (v36 > 1)
  {
    v45 = *(_DWORD *)(a3 + 12);
    v39 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v40 = *v39;
    v46 = *(_DWORD *)(a3 + 16);
    v43 = (v46 & (*v39 >> v45) & 0xFFFFFFC7 | (8 * v24)) << v45;
    v44 = v46 << v45;
    goto LABEL_36;
  }
  if (v24 == 3)
    goto LABEL_33;
  if (!v24)
  {
LABEL_32:
    v38 = *(_DWORD *)(a3 + 12);
    v39 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v40 = *v39;
    v41 = *(_DWORD *)(a3 + 16);
    v42 = (*v39 >> v38) & v41 & 0xFFFFFFF7;
LABEL_34:
    v43 = v42 << v38;
    v44 = v41 << v38;
LABEL_36:
    *v39 = v43 | v40 & ~v44;
  }
LABEL_37:
  if (v23)
    v48 = 4;
  else
    v48 = 0;
  v47 = *(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v48) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v49 = *(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v49 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v49 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v35) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v49 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v50 = *(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v50 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v50 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v19 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v50 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v35 && v19)
  {
    __p = 0;
    v70 = 0;
    v71 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v20 + 10), *((__int128 **)v20 + 11), (uint64_t)(*((_QWORD *)v20 + 11) - *((_QWORD *)v20 + 10)) >> 4);
    v51 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)&__p);
    if (__p)
    {
      v70 = __p;
      operator delete(__p);
    }
    v66 = 0;
    v67 = 0;
    v68 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v66, v34[10], v34[11], v34[11] - v34[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)&v66);
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
    }
    v52 = *(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v51 - v15) << *(_DWORD *)(a3 + 24));
  }
  else if (v35 || !v19)
  {
    if (!(v19 | v35))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, a4, &v74);
      v55 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, a4, &v72);
      v56 = *(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4);
      *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v55 - v37) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    v63 = 0;
    v64 = 0;
    v65 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v63, v34[10], v34[11], v34[11] - v34[10]);
    v53 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)&v63);
    if (v63)
    {
      v64 = v63;
      operator delete(v63);
    }
    v54 = *(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v53 - v15) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, a4, &v74);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4)) = *(_QWORD *)(*(_QWORD *)(a2 + 40)
                                                                                      + v37
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(_QWORD *)a3 | *(_QWORD *)(*a5 + 8);
  *(_QWORD *)(*(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 40)) = *(_QWORD *)(*a5 + 16);
  if (v18)
  {
    v57 = (unint64_t *)&v18->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v59 = v75;
  if (v75)
  {
    v60 = (unint64_t *)&v75->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  return v37;
}

void sub_19C83EA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;

  *(_QWORD *)&v18 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = a3[1];
  if (*a3 == v7)
  {
    v17 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v17, &v18);
    v6 = *a3;
    v7 = a3[1];
  }
  v8 = v7 - v6;
  if (!v8)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = v8 >> 4;
  do
  {
    v13 = *(_QWORD *)(v6 + v9);
    if (v10 == v12 - 1)
      v13 |= 1 << (*(_BYTE *)(a1 + 11) - 1);
    v14 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), v13);
    v15 = *(_QWORD *)(*a3 + v9 + 8);
    *(_QWORD *)(*(_QWORD *)(a1 + 224)
              + 8
              * CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1)) = v15;
    if (!v10)
      v11 = v14;
    ++v10;
    v6 = *a3;
    v12 = (a3[1] - *a3) >> 4;
    v9 += 16;
  }
  while (v10 < v12);
  return v11;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  std::__shared_weak_count *v17;
  int v18;
  double *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  _BOOL4 v31;
  unsigned int v32;
  __int128 **v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *__p;
  void *v70;
  uint64_t v71;
  double *v72;
  std::__shared_weak_count *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;

  v10 = *(unsigned __int16 *)(a2 + 4);
  v74 = *(_QWORD *)(a2 + 32) * v10;
  v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v74, (void **)(a2 + 40), v10);
  ++*(_QWORD *)(a2 + 32);
  v12 = *(unsigned int *)(a2 + 52);
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + ((unint64_t)(v12 * a4) >> 3));
  v29 = (_DWORD)v12 == 64;
  v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (!v29)
    v13 = v14;
  v15 = *a5;
  v16 = *(double **)(*a5 + 120);
  v17 = *(std::__shared_weak_count **)(*a5 + 128);
  v18 = *(unsigned __int8 *)v16;
  v19 = *(double **)(*a5 + 136);
  v20 = *(unsigned __int8 *)v19;
  v21 = *(unsigned __int8 *)(*a5 + 64);
  v22 = *(_BYTE *)(*a5 + 64) == 0;
  v23 = *(_DWORD *)(*a5 + 4);
  v74 = (unint64_t)v16;
  v75 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v15 = *a5;
    v19 = *(double **)(*a5 + 136);
  }
  v26 = *(std::__shared_weak_count **)(v15 + 144);
  v72 = v19;
  v73 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v18)
    v29 = v20 == 0;
  else
    v29 = 0;
  v30 = v29;
  if ((v20 | v18 || v16[3] >= v19[3]) && (v31 = v21 != 0, !v30))
  {
    v17 = v26;
    v33 = (__int128 **)v19;
    v19 = v16;
    v34 = v18;
    v18 = v20;
    v22 = v31;
  }
  else
  {
    v32 = v23 - 1;
    if (v32 > 4)
      v23 = 3;
    else
      v23 = dword_19CB2F578[v32];
    v74 = (unint64_t)v19;
    v75 = v26;
    v33 = (__int128 **)v16;
    v34 = v20;
    v72 = v16;
    v73 = v17;
  }
  v35 = *(unsigned __int8 *)(a2 + 13);
  v36 = v11 / v10;
  if (v35 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1)
        goto LABEL_36;
      goto LABEL_31;
    }
LABEL_32:
    v37 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v40 = *(_DWORD *)(a3 + 16);
    v41 = (*v38 >> v37) & v40 | 8;
    goto LABEL_33;
  }
  if (v35 > 1)
  {
    v44 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v45 = *(_DWORD *)(a3 + 16);
    v42 = (v45 & (*v38 >> v44) & 0xFFFFFFC7 | (8 * v23)) << v44;
    v43 = v45 << v44;
    goto LABEL_35;
  }
  if (v23 == 3)
    goto LABEL_32;
  if (!v23)
  {
LABEL_31:
    v37 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v40 = *(_DWORD *)(a3 + 16);
    v41 = (*v38 >> v37) & v40 & 0xFFFFFFF7;
LABEL_33:
    v42 = v41 << v37;
    v43 = v40 << v37;
LABEL_35:
    *v38 = v42 | v39 & ~v43;
  }
LABEL_36:
  v46 = v13 + a4;
  if (v22)
    v48 = 4;
  else
    v48 = 0;
  v47 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v48) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v49 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v49 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v49 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v34) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v49 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v50 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v50 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v50 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v18 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v50 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v34 && v18)
  {
    __p = 0;
    v70 = 0;
    v71 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v19 + 10), *((__int128 **)v19 + 11), (uint64_t)(*((_QWORD *)v19 + 11) - *((_QWORD *)v19 + 10)) >> 4);
    v51 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)&__p);
    if (__p)
    {
      v70 = __p;
      operator delete(__p);
    }
    v66 = 0;
    v67 = 0;
    v68 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v66, v33[10], v33[11], v33[11] - v33[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)&v66);
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
    }
    v52 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v51 - v46) << *(_DWORD *)(a3 + 24));
  }
  else if (v34 || !v18)
  {
    if (!(v18 | v34))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, a4, &v74);
      v55 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, a4, &v72);
      v56 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
      *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v55 - v36) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    v63 = 0;
    v64 = 0;
    v65 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v63, v33[10], v33[11], v33[11] - v33[10]);
    v53 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)&v63);
    if (v63)
    {
      v64 = v63;
      operator delete(v63);
    }
    v54 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v53 - v46) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, a4, &v74);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4)) = *(_QWORD *)(*(_QWORD *)(a2 + 40)
                                                                                      + v36
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(_QWORD *)a3 | *(_QWORD *)(*a5 + 8);
  *(_QWORD *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 40)) = *(_QWORD *)(*a5 + 16);
  if (v17)
  {
    v57 = (unint64_t *)&v17->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v59 = v75;
  if (v75)
  {
    v60 = (unint64_t *)&v75->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  return v36;
}

void sub_19C83F1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *exception;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)&v13 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = a3[1];
  if (*a3 == v7)
  {
    v12 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v12, &v13);
    v6 = *a3;
    v7 = a3[1];
  }
  if ((char *)v7 - (char *)v6 != 16)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  v8 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), *v6);
  v9 = (*a3)[1];
  *(_QWORD *)(*(_QWORD *)(a1 + 224)
            + 8
            * CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1)) = v9;
  return v8;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  std::__shared_weak_count *v17;
  int v18;
  double *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  _BOOL4 v31;
  unsigned int v32;
  __int128 **v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *__p;
  void *v70;
  uint64_t v71;
  double *v72;
  std::__shared_weak_count *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;

  v10 = *(unsigned __int16 *)(a2 + 4);
  v74 = *(_QWORD *)(a2 + 32) * v10;
  v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v74, (void **)(a2 + 40), v10);
  ++*(_QWORD *)(a2 + 32);
  v12 = *(unsigned int *)(a2 + 52);
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + ((unint64_t)(v12 * a4) >> 3));
  v29 = (_DWORD)v12 == 64;
  v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (!v29)
    v13 = v14;
  v15 = *a5;
  v16 = *(double **)(*a5 + 120);
  v17 = *(std::__shared_weak_count **)(*a5 + 128);
  v18 = *(unsigned __int8 *)v16;
  v19 = *(double **)(*a5 + 136);
  v20 = *(unsigned __int8 *)v19;
  v21 = *(unsigned __int8 *)(*a5 + 64);
  v22 = *(_BYTE *)(*a5 + 64) == 0;
  v23 = *(_DWORD *)(*a5 + 4);
  v74 = (unint64_t)v16;
  v75 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v15 = *a5;
    v19 = *(double **)(*a5 + 136);
  }
  v26 = *(std::__shared_weak_count **)(v15 + 144);
  v72 = v19;
  v73 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v18)
    v29 = v20 == 0;
  else
    v29 = 0;
  v30 = v29;
  if ((v20 | v18 || v16[3] >= v19[3]) && (v31 = v21 != 0, !v30))
  {
    v17 = v26;
    v33 = (__int128 **)v19;
    v19 = v16;
    v34 = v18;
    v18 = v20;
    v22 = v31;
  }
  else
  {
    v32 = v23 - 1;
    if (v32 > 4)
      v23 = 3;
    else
      v23 = dword_19CB2F578[v32];
    v74 = (unint64_t)v19;
    v75 = v26;
    v33 = (__int128 **)v16;
    v34 = v20;
    v72 = v16;
    v73 = v17;
  }
  v35 = *(unsigned __int8 *)(a2 + 13);
  v36 = v11 / v10;
  if (v35 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1)
        goto LABEL_36;
      goto LABEL_31;
    }
LABEL_32:
    v37 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v40 = *(_DWORD *)(a3 + 16);
    v41 = (*v38 >> v37) & v40 | 8;
    goto LABEL_33;
  }
  if (v35 > 1)
  {
    v44 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v45 = *(_DWORD *)(a3 + 16);
    v42 = (v45 & (*v38 >> v44) & 0xFFFFFFC7 | (8 * v23)) << v44;
    v43 = v45 << v44;
    goto LABEL_35;
  }
  if (v23 == 3)
    goto LABEL_32;
  if (!v23)
  {
LABEL_31:
    v37 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v40 = *(_DWORD *)(a3 + 16);
    v41 = (*v38 >> v37) & v40 & 0xFFFFFFF7;
LABEL_33:
    v42 = v41 << v37;
    v43 = v40 << v37;
LABEL_35:
    *v38 = v42 | v39 & ~v43;
  }
LABEL_36:
  v46 = v13 + a4;
  if (v22)
    v48 = 4;
  else
    v48 = 0;
  v47 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v48) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v49 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v49 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v49 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v34) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v49 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v50 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v50 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v50 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v18 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v50 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v34 && v18)
  {
    __p = 0;
    v70 = 0;
    v71 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v19 + 10), *((__int128 **)v19 + 11), (uint64_t)(*((_QWORD *)v19 + 11) - *((_QWORD *)v19 + 10)) >> 4);
    v51 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, &__p);
    if (__p)
    {
      v70 = __p;
      operator delete(__p);
    }
    v66 = 0;
    v67 = 0;
    v68 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v66, v33[10], v33[11], v33[11] - v33[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, &v66);
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
    }
    v52 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v51 - v46) << *(_DWORD *)(a3 + 24));
  }
  else if (v34 || !v18)
  {
    if (!(v18 | v34))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, a4, &v74);
      v55 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, a4, &v72);
      v56 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
      *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v55 - v36) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    v63 = 0;
    v64 = 0;
    v65 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v63, v33[10], v33[11], v33[11] - v33[10]);
    v53 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, &v63);
    if (v63)
    {
      v64 = v63;
      operator delete(v63);
    }
    v54 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v53 - v46) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, a4, &v74);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4)) = *(_QWORD *)(*(_QWORD *)(a2 + 40)
                                                                                      + v36
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(_QWORD *)a3 | *(_QWORD *)(*a5 + 8);
  *(_QWORD *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 40)) = *(_QWORD *)(*a5 + 16);
  if (v17)
  {
    v57 = (unint64_t *)&v17->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v59 = v75;
  if (v75)
  {
    v60 = (unint64_t *)&v75->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  return v36;
}

void sub_19C83F8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t result;
  void *exception;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)&v12 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)*a3;
  v6 = a3[1];
  if (*a3 == v6)
  {
    v11 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v11, &v12);
    v5 = (_QWORD *)*a3;
    v6 = a3[1];
  }
  if (v6 - (_QWORD)v5 != 16 || *v5)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  v8 = v5[1];
  result = CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1);
  *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * result) = v8;
  return result;
}

unint64_t CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(unint64_t result)
{
  void *exception;

  if (HIDWORD(result))
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  return result;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  std::__shared_weak_count *v17;
  int v18;
  double *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  unint64_t v31;
  _BOOL4 v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v68;
  int v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  __int128 **v73;
  int v75;
  uint64_t *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  void *__p;
  void *v84;
  uint64_t v85;
  double *v86;
  std::__shared_weak_count *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;

  v9 = *(unsigned __int16 *)(a2 + 4);
  v88 = *(_QWORD *)(a2 + 32) * v9;
  v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v88, (void **)(a2 + 40), v9);
  ++*(_QWORD *)(a2 + 32);
  v72 = a4;
  v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  v12 = *(_DWORD *)(a2 + 52);
  v13 = v12 * (unint64_t)v11;
  v29 = v12 == 64;
  v14 = (*(_QWORD *)(*(_QWORD *)(a2 + 72) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v29)
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + (v13 >> 3));
  v75 = v14;
  v76 = a5;
  v15 = *a5;
  v16 = *(double **)(*a5 + 120);
  v17 = *(std::__shared_weak_count **)(*a5 + 128);
  v18 = *(unsigned __int8 *)v16;
  v19 = *(double **)(*a5 + 136);
  v20 = *(unsigned __int8 *)v19;
  v21 = *(unsigned __int8 *)(*a5 + 64);
  v22 = *(_BYTE *)(*a5 + 64) == 0;
  v23 = *(_DWORD *)(*a5 + 4);
  v88 = (unint64_t)v16;
  v89 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v15 = *a5;
    v19 = *(double **)(*a5 + 136);
  }
  v26 = *(std::__shared_weak_count **)(v15 + 144);
  v86 = v19;
  v87 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v18)
    v29 = v20 == 0;
  else
    v29 = 0;
  v30 = v29;
  v31 = v10 / v9;
  if ((v20 | v18 || v16[3] >= v19[3]) && (v32 = v21 != 0, !v30))
  {
    v17 = v26;
    v73 = (__int128 **)v19;
    v19 = v16;
    v33 = v18;
    v18 = v20;
  }
  else
  {
    v32 = v22;
    if ((v23 - 1) > 4)
      v23 = 3;
    else
      v23 = dword_19CB2F578[v23 - 1];
    v88 = (unint64_t)v19;
    v89 = v26;
    v73 = (__int128 **)v16;
    v33 = v20;
    v86 = v16;
    v87 = v17;
  }
  v34 = *(unsigned __int8 *)(a2 + 13);
  if (v34 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1)
        goto LABEL_35;
      goto LABEL_31;
    }
LABEL_33:
    v42 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v36 = a3[2];
    v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v42 * *(unsigned __int16 *)(a2 + 4));
    v38 = *v37;
    v39 = a3[3];
    v40 = (*v37 >> v36) & v39 | 8;
    goto LABEL_34;
  }
  if (v34 > 1)
  {
    v41 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v36 = a3[2];
    v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v41 * *(unsigned __int16 *)(a2 + 4));
    v38 = *v37;
    v39 = a3[3];
    v40 = v39 & (*v37 >> v36) & 0xFFFFFFC7 | (8 * v23);
    goto LABEL_34;
  }
  if (v23 == 3)
    goto LABEL_33;
  if (v23)
    goto LABEL_35;
LABEL_31:
  v35 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v36 = a3[2];
  v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v35 * *(unsigned __int16 *)(a2 + 4));
  v38 = *v37;
  v39 = a3[3];
  v40 = (*v37 >> v36) & v39 & 0xFFFFFFF7;
LABEL_34:
  *v37 = (v40 << v36) | v38 & ~(v39 << v36);
LABEL_35:
  v43 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  if (v32)
    v44 = 4;
  else
    v44 = 0;
  *(_DWORD *)(v43 + (int)a3[1]) = (((*(_DWORD *)(v43 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v44) << a3[2]) | *(_DWORD *)(v43 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v45 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v45 + (int)a3[1]) = (((*(_DWORD *)(v45 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v33) << a3[2]) | *(_DWORD *)(v45 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v46 = v11 + v75;
  v47 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + (int)a3[1]) = (((*(_DWORD *)(v47 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v47 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v33 && v18)
  {
    __p = 0;
    v84 = 0;
    v85 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v19 + 10), *((__int128 **)v19 + 11), (uint64_t)(*((_QWORD *)v19 + 11) - *((_QWORD *)v19 + 10)) >> 4);
    v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, &__p);
    if (__p)
    {
      v84 = __p;
      operator delete(__p);
    }
    v80 = 0;
    v81 = 0;
    v82 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v80, v73[10], v73[11], v73[11] - v73[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, &v80);
    if (v80)
    {
      v81 = v80;
      operator delete(v80);
    }
    v49 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v50 = *(_QWORD *)(a2 + 40);
    v51 = *(unsigned __int16 *)(a2 + 4);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v48 - v46);
    v53 = (v49 * v51);
LABEL_45:
    *(_DWORD *)(v50 + v53 + a3[4]) = *(_DWORD *)(v50 + v53 + a3[4]) & ~(a3[6] << a3[5]) | (v52 << a3[5]);
    goto LABEL_52;
  }
  if (v33 || !v18)
  {
    if (v18 | v33)
      goto LABEL_52;
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, v72, &v88);
    v68 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, v72, &v86);
    v69 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v70 = v68 - v31;
    v50 = *(_QWORD *)(a2 + 40);
    LODWORD(v68) = *(unsigned __int16 *)(a2 + 4);
    v71 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v70);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v71);
    v53 = (v69 * v68);
    goto LABEL_45;
  }
  v54 = v11 + v75;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v77, v73[10], v73[11], v73[11] - v73[10]);
  v55 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, &v77);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  v56 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v57 = *(_QWORD *)(a2 + 40);
  v58 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v57 + (v56 * v58) + a3[4]) = *(_DWORD *)(v57
                                                                                 + (v56 * v58)
                                                                                 + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v55 - v54) << a3[5]);
  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, v72, &v88);
LABEL_52:
  v59 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v60 = *(_QWORD *)(a2 + 40);
  v61 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v60 + (v59 * v61)) = *(_DWORD *)(v60 + (v59 * v61)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(_QWORD *)(*v76 + 8));
  *(_QWORD *)(*(_QWORD *)(a2 + 40)
            + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
            * *(unsigned __int16 *)(a2 + 4)
            + (int)a3[7]) = *(_QWORD *)(*v76 + 16);
  if (v17)
  {
    v62 = (unint64_t *)&v17->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v64 = v89;
  if (v89)
  {
    v65 = (unint64_t *)&v89->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  return v31;
}

void sub_19C8400F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v23 - 96);
  _Unwind_Resume(a1);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  *((_QWORD *)&v22 + 1) = *MEMORY[0x1E0C80C00];
  if (*a3 == a3[1])
  {
    v21 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v21, &v22);
  }
  v6 = *(_QWORD *)(a1 + 24);
  v20 = 0;
  std::vector<double>::vector(&v21, v6, &v20);
  v7 = (uint64_t *)v21;
  v8 = a3[1] - *a3;
  if (v8)
  {
    v9 = v8 >> 4;
    if (v9 <= 1)
      v9 = 1;
    v10 = (uint64_t *)(*a3 + 8);
    do
    {
      v11 = *(v10 - 1);
      v12 = *v10;
      v10 += 2;
      v7[v11] = v12;
      --v9;
    }
    while (v9);
  }
  v13 = *v7;
  v14 = CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1);
  *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v14) = v13;
  v15 = (_QWORD *)v21;
  if (*((_QWORD *)&v21 + 1) - (_QWORD)v21 >= 9uLL)
  {
    v16 = 1;
    do
    {
      v17 = v15[v16];
      *(_QWORD *)(*(_QWORD *)(a1 + 224)
                + 8
                * CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1)) = v17;
      ++v16;
      v15 = (_QWORD *)v21;
    }
    while (v16 < (uint64_t)(*((_QWORD *)&v21 + 1) - v21) >> 3);
  }
  v18 = *(_QWORD *)(a1 + 24);
  if (v15)
  {
    *((_QWORD *)&v21 + 1) = v15;
    operator delete(v15);
  }
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v14 / v18);
}

void sub_19C8402C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  std::__shared_weak_count *v17;
  int v18;
  double *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  unint64_t v31;
  _BOOL4 v32;
  __int128 **v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int v74;
  uint64_t *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *__p;
  void *v83;
  uint64_t v84;
  double *v85;
  std::__shared_weak_count *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;

  v9 = *(unsigned __int16 *)(a2 + 4);
  v87 = *(_QWORD *)(a2 + 32) * v9;
  v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v87, (void **)(a2 + 40), v9);
  ++*(_QWORD *)(a2 + 32);
  v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  v12 = *(_DWORD *)(a2 + 164);
  v13 = v12 * (unint64_t)v11;
  v29 = v12 == 64;
  v14 = (*(_QWORD *)(*(_QWORD *)(a2 + 184) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v29)
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 184) + (v13 >> 3));
  v74 = v14;
  v75 = a5;
  v15 = *a5;
  v16 = *(double **)(*a5 + 120);
  v17 = *(std::__shared_weak_count **)(*a5 + 128);
  v18 = *(unsigned __int8 *)v16;
  v19 = *(double **)(*a5 + 136);
  v20 = *(unsigned __int8 *)v19;
  v21 = *(unsigned __int8 *)(*a5 + 64);
  v22 = *(_BYTE *)(*a5 + 64) == 0;
  v23 = *(_DWORD *)(*a5 + 4);
  v87 = (unint64_t)v16;
  v88 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v15 = *v75;
    v19 = *(double **)(*v75 + 136);
  }
  v26 = *(std::__shared_weak_count **)(v15 + 144);
  v85 = v19;
  v86 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v18)
    v29 = v20 == 0;
  else
    v29 = 0;
  v30 = v29;
  v31 = v10 / v9;
  v72 = a4;
  if ((v20 | v18 || v16[3] >= v19[3]) && (v32 = v21 != 0, !v30))
  {
    v17 = v26;
    v33 = (__int128 **)v19;
    v19 = v16;
    v34 = v18;
    v18 = v20;
    v22 = v32;
  }
  else
  {
    if ((v23 - 1) > 4)
      v23 = 3;
    else
      v23 = dword_19CB2F578[v23 - 1];
    v87 = (unint64_t)v19;
    v88 = v26;
    v33 = (__int128 **)v16;
    v34 = v20;
    v85 = v16;
    v86 = v17;
  }
  v35 = *(unsigned __int8 *)(a2 + 13);
  if (v35 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1)
        goto LABEL_35;
      goto LABEL_31;
    }
LABEL_33:
    v43 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v37 = a3[2];
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v43 * *(unsigned __int16 *)(a2 + 4));
    v39 = *v38;
    v40 = a3[3];
    v41 = (*v38 >> v37) & v40 | 8;
    goto LABEL_34;
  }
  if (v35 > 1)
  {
    v42 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v37 = a3[2];
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v42 * *(unsigned __int16 *)(a2 + 4));
    v39 = *v38;
    v40 = a3[3];
    v41 = v40 & (*v38 >> v37) & 0xFFFFFFC7 | (8 * v23);
    goto LABEL_34;
  }
  if (v23 == 3)
    goto LABEL_33;
  if (v23)
    goto LABEL_35;
LABEL_31:
  v36 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v37 = a3[2];
  v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v36 * *(unsigned __int16 *)(a2 + 4));
  v39 = *v38;
  v40 = a3[3];
  v41 = (*v38 >> v37) & v40 & 0xFFFFFFF7;
LABEL_34:
  *v38 = (v41 << v37) | v39 & ~(v40 << v37);
LABEL_35:
  v44 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  if (v22)
    v45 = 4;
  else
    v45 = 0;
  *(_DWORD *)(v44 + (int)a3[1]) = (((*(_DWORD *)(v44 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v45) << a3[2]) | *(_DWORD *)(v44 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v46 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v46 + (int)a3[1]) = (((*(_DWORD *)(v46 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v34) << a3[2]) | *(_DWORD *)(v46 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v47 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + (int)a3[1]) = (((*(_DWORD *)(v47 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v47 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v34 && v18)
  {
    __p = 0;
    v83 = 0;
    v84 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v19 + 10), *((__int128 **)v19 + 11), (uint64_t)(*((_QWORD *)v19 + 11) - *((_QWORD *)v19 + 10)) >> 4);
    v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)&__p);
    if (__p)
    {
      v83 = __p;
      operator delete(__p);
    }
    v79 = 0;
    v80 = 0;
    v81 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v79, v33[10], v33[11], v33[11] - v33[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)&v79);
    if (v79)
    {
      v80 = v79;
      operator delete(v79);
    }
    v49 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v50 = *(_QWORD *)(a2 + 40);
    v51 = *(unsigned __int16 *)(a2 + 4);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v48 - (unint64_t)v74);
    v53 = v50 + (v49 * v51);
LABEL_45:
    *(_DWORD *)(v53 + a3[4]) = *(_DWORD *)(v53 + a3[4]) & ~(a3[6] << a3[5]) | (v52 << a3[5]);
    goto LABEL_52;
  }
  if (v34 || !v18)
  {
    if (v18 | v34)
      goto LABEL_52;
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, v72, &v87);
    v67 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, v72, &v85);
    v68 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v69 = v67 - v31;
    v70 = *(_QWORD *)(a2 + 40);
    LODWORD(v67) = *(unsigned __int16 *)(a2 + 4);
    v71 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v69);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v71);
    v53 = v70 + (v68 * v67);
    goto LABEL_45;
  }
  v76 = 0;
  v77 = 0;
  v78 = 0;
  std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v76, v33[10], v33[11], v33[11] - v33[10]);
  v54 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)&v76);
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  v55 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v56 = *(_QWORD *)(a2 + 40);
  v57 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v56 + (v55 * v57) + a3[4]) = *(_DWORD *)(v56
                                                                                 + (v55 * v57)
                                                                                 + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v54 - (unint64_t)v74) << a3[5]);
  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, v72, &v87);
LABEL_52:
  v58 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v59 = *(_QWORD *)(a2 + 40);
  v60 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v59 + (v58 * v60)) = *(_DWORD *)(v59 + (v58 * v60)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(_QWORD *)(*v75 + 8));
  *(_QWORD *)(*(_QWORD *)(a2 + 40)
            + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
            * *(unsigned __int16 *)(a2 + 4)
            + (int)a3[7]) = *(_QWORD *)(*v75 + 16);
  if (v17)
  {
    v61 = (unint64_t *)&v17->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v63 = v88;
  if (v88)
  {
    v64 = (unint64_t *)&v88->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  return v31;
}

void sub_19C840980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v23 - 96);
  _Unwind_Resume(a1);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;

  *(_QWORD *)&v18 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = a3[1];
  if (*a3 == v7)
  {
    v17 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v17, &v18);
    v6 = *a3;
    v7 = a3[1];
  }
  v8 = v7 - v6;
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = v8 >> 4;
    do
    {
      v13 = *(_QWORD *)(v6 + v9);
      if (v10 == v12 - 1)
        v13 |= 1 << (*(_BYTE *)(a1 + 11) - 1);
      v14 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), v13);
      v15 = *(_QWORD *)(*a3 + v9 + 8);
      *(_QWORD *)(*(_QWORD *)(a1 + 224)
                + 8
                * CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1)) = v15;
      if (!v10)
        v11 = v14;
      ++v10;
      v6 = *a3;
      v12 = (a3[1] - *a3) >> 4;
      v9 += 16;
    }
    while (v10 < v12);
  }
  else
  {
    v11 = 0;
  }
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v11);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  std::__shared_weak_count *v17;
  int v18;
  double *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  unint64_t v31;
  _BOOL4 v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v68;
  int v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  __int128 **v73;
  int v75;
  uint64_t *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  void *__p;
  void *v84;
  uint64_t v85;
  double *v86;
  std::__shared_weak_count *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;

  v9 = *(unsigned __int16 *)(a2 + 4);
  v88 = *(_QWORD *)(a2 + 32) * v9;
  v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v88, (void **)(a2 + 40), v9);
  ++*(_QWORD *)(a2 + 32);
  v72 = a4;
  v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  v12 = *(_DWORD *)(a2 + 52);
  v13 = v12 * (unint64_t)v11;
  v29 = v12 == 64;
  v14 = (*(_QWORD *)(*(_QWORD *)(a2 + 72) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v29)
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + (v13 >> 3));
  v75 = v14;
  v76 = a5;
  v15 = *a5;
  v16 = *(double **)(*a5 + 120);
  v17 = *(std::__shared_weak_count **)(*a5 + 128);
  v18 = *(unsigned __int8 *)v16;
  v19 = *(double **)(*a5 + 136);
  v20 = *(unsigned __int8 *)v19;
  v21 = *(unsigned __int8 *)(*a5 + 64);
  v22 = *(_BYTE *)(*a5 + 64) == 0;
  v23 = *(_DWORD *)(*a5 + 4);
  v88 = (unint64_t)v16;
  v89 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v15 = *a5;
    v19 = *(double **)(*a5 + 136);
  }
  v26 = *(std::__shared_weak_count **)(v15 + 144);
  v86 = v19;
  v87 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v18)
    v29 = v20 == 0;
  else
    v29 = 0;
  v30 = v29;
  v31 = v10 / v9;
  if ((v20 | v18 || v16[3] >= v19[3]) && (v32 = v21 != 0, !v30))
  {
    v17 = v26;
    v73 = (__int128 **)v19;
    v19 = v16;
    v33 = v18;
    v18 = v20;
  }
  else
  {
    v32 = v22;
    if ((v23 - 1) > 4)
      v23 = 3;
    else
      v23 = dword_19CB2F578[v23 - 1];
    v88 = (unint64_t)v19;
    v89 = v26;
    v73 = (__int128 **)v16;
    v33 = v20;
    v86 = v16;
    v87 = v17;
  }
  v34 = *(unsigned __int8 *)(a2 + 13);
  if (v34 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1)
        goto LABEL_35;
      goto LABEL_31;
    }
LABEL_33:
    v42 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v36 = a3[2];
    v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v42 * *(unsigned __int16 *)(a2 + 4));
    v38 = *v37;
    v39 = a3[3];
    v40 = (*v37 >> v36) & v39 | 8;
    goto LABEL_34;
  }
  if (v34 > 1)
  {
    v41 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v36 = a3[2];
    v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v41 * *(unsigned __int16 *)(a2 + 4));
    v38 = *v37;
    v39 = a3[3];
    v40 = v39 & (*v37 >> v36) & 0xFFFFFFC7 | (8 * v23);
    goto LABEL_34;
  }
  if (v23 == 3)
    goto LABEL_33;
  if (v23)
    goto LABEL_35;
LABEL_31:
  v35 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v36 = a3[2];
  v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v35 * *(unsigned __int16 *)(a2 + 4));
  v38 = *v37;
  v39 = a3[3];
  v40 = (*v37 >> v36) & v39 & 0xFFFFFFF7;
LABEL_34:
  *v37 = (v40 << v36) | v38 & ~(v39 << v36);
LABEL_35:
  v43 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  if (v32)
    v44 = 4;
  else
    v44 = 0;
  *(_DWORD *)(v43 + (int)a3[1]) = (((*(_DWORD *)(v43 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v44) << a3[2]) | *(_DWORD *)(v43 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v45 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v45 + (int)a3[1]) = (((*(_DWORD *)(v45 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v33) << a3[2]) | *(_DWORD *)(v45 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v46 = v11 + v75;
  v47 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + (int)a3[1]) = (((*(_DWORD *)(v47 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v47 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v33 && v18)
  {
    __p = 0;
    v84 = 0;
    v85 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v19 + 10), *((__int128 **)v19 + 11), (uint64_t)(*((_QWORD *)v19 + 11) - *((_QWORD *)v19 + 10)) >> 4);
    v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)&__p);
    if (__p)
    {
      v84 = __p;
      operator delete(__p);
    }
    v80 = 0;
    v81 = 0;
    v82 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v80, v73[10], v73[11], v73[11] - v73[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)&v80);
    if (v80)
    {
      v81 = v80;
      operator delete(v80);
    }
    v49 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v50 = *(_QWORD *)(a2 + 40);
    v51 = *(unsigned __int16 *)(a2 + 4);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v48 - v46);
    v53 = (v49 * v51);
LABEL_45:
    *(_DWORD *)(v50 + v53 + a3[4]) = *(_DWORD *)(v50 + v53 + a3[4]) & ~(a3[6] << a3[5]) | (v52 << a3[5]);
    goto LABEL_52;
  }
  if (v33 || !v18)
  {
    if (v18 | v33)
      goto LABEL_52;
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, v72, &v88);
    v68 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, v72, &v86);
    v69 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v70 = v68 - v31;
    v50 = *(_QWORD *)(a2 + 40);
    LODWORD(v68) = *(unsigned __int16 *)(a2 + 4);
    v71 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v70);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v71);
    v53 = (v69 * v68);
    goto LABEL_45;
  }
  v54 = v11 + v75;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v77, v73[10], v73[11], v73[11] - v73[10]);
  v55 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)&v77);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  v56 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v57 = *(_QWORD *)(a2 + 40);
  v58 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v57 + (v56 * v58) + a3[4]) = *(_DWORD *)(v57
                                                                                 + (v56 * v58)
                                                                                 + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v55 - v54) << a3[5]);
  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, v72, &v88);
LABEL_52:
  v59 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v60 = *(_QWORD *)(a2 + 40);
  v61 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v60 + (v59 * v61)) = *(_DWORD *)(v60 + (v59 * v61)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(_QWORD *)(*v76 + 8));
  *(_QWORD *)(*(_QWORD *)(a2 + 40)
            + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
            * *(unsigned __int16 *)(a2 + 4)
            + (int)a3[7]) = *(_QWORD *)(*v76 + 16);
  if (v17)
  {
    v62 = (unint64_t *)&v17->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v64 = v89;
  if (v89)
  {
    v65 = (unint64_t *)&v89->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  return v31;
}

void sub_19C8411E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v23 - 96);
  _Unwind_Resume(a1);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  void *exception;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)&v13 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = a3[1];
  if (*a3 == v7)
  {
    v12 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v12, &v13);
    v6 = *a3;
    v7 = a3[1];
  }
  if ((char *)v7 - (char *)v6 != 16)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  v8 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), *v6);
  v9 = (*a3)[1];
  *(_QWORD *)(*(_QWORD *)(a1 + 224)
            + 8
            * CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1)) = v9;
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v8);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  std::__shared_weak_count *v17;
  int v18;
  double *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  unint64_t v31;
  _BOOL4 v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v68;
  int v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  __int128 **v73;
  int v75;
  uint64_t *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  void *__p;
  void *v84;
  uint64_t v85;
  double *v86;
  std::__shared_weak_count *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;

  v9 = *(unsigned __int16 *)(a2 + 4);
  v88 = *(_QWORD *)(a2 + 32) * v9;
  v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v88, (void **)(a2 + 40), v9);
  ++*(_QWORD *)(a2 + 32);
  v72 = a4;
  v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  v12 = *(_DWORD *)(a2 + 52);
  v13 = v12 * (unint64_t)v11;
  v29 = v12 == 64;
  v14 = (*(_QWORD *)(*(_QWORD *)(a2 + 72) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v29)
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + (v13 >> 3));
  v75 = v14;
  v76 = a5;
  v15 = *a5;
  v16 = *(double **)(*a5 + 120);
  v17 = *(std::__shared_weak_count **)(*a5 + 128);
  v18 = *(unsigned __int8 *)v16;
  v19 = *(double **)(*a5 + 136);
  v20 = *(unsigned __int8 *)v19;
  v21 = *(unsigned __int8 *)(*a5 + 64);
  v22 = *(_BYTE *)(*a5 + 64) == 0;
  v23 = *(_DWORD *)(*a5 + 4);
  v88 = (unint64_t)v16;
  v89 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v15 = *a5;
    v19 = *(double **)(*a5 + 136);
  }
  v26 = *(std::__shared_weak_count **)(v15 + 144);
  v86 = v19;
  v87 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v18)
    v29 = v20 == 0;
  else
    v29 = 0;
  v30 = v29;
  v31 = v10 / v9;
  if ((v20 | v18 || v16[3] >= v19[3]) && (v32 = v21 != 0, !v30))
  {
    v17 = v26;
    v73 = (__int128 **)v19;
    v19 = v16;
    v33 = v18;
    v18 = v20;
  }
  else
  {
    v32 = v22;
    if ((v23 - 1) > 4)
      v23 = 3;
    else
      v23 = dword_19CB2F578[v23 - 1];
    v88 = (unint64_t)v19;
    v89 = v26;
    v73 = (__int128 **)v16;
    v33 = v20;
    v86 = v16;
    v87 = v17;
  }
  v34 = *(unsigned __int8 *)(a2 + 13);
  if (v34 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1)
        goto LABEL_35;
      goto LABEL_31;
    }
LABEL_33:
    v42 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v36 = a3[2];
    v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v42 * *(unsigned __int16 *)(a2 + 4));
    v38 = *v37;
    v39 = a3[3];
    v40 = (*v37 >> v36) & v39 | 8;
    goto LABEL_34;
  }
  if (v34 > 1)
  {
    v41 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v36 = a3[2];
    v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v41 * *(unsigned __int16 *)(a2 + 4));
    v38 = *v37;
    v39 = a3[3];
    v40 = v39 & (*v37 >> v36) & 0xFFFFFFC7 | (8 * v23);
    goto LABEL_34;
  }
  if (v23 == 3)
    goto LABEL_33;
  if (v23)
    goto LABEL_35;
LABEL_31:
  v35 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v36 = a3[2];
  v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v35 * *(unsigned __int16 *)(a2 + 4));
  v38 = *v37;
  v39 = a3[3];
  v40 = (*v37 >> v36) & v39 & 0xFFFFFFF7;
LABEL_34:
  *v37 = (v40 << v36) | v38 & ~(v39 << v36);
LABEL_35:
  v43 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  if (v32)
    v44 = 4;
  else
    v44 = 0;
  *(_DWORD *)(v43 + (int)a3[1]) = (((*(_DWORD *)(v43 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v44) << a3[2]) | *(_DWORD *)(v43 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v45 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v45 + (int)a3[1]) = (((*(_DWORD *)(v45 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v33) << a3[2]) | *(_DWORD *)(v45 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v46 = v11 + v75;
  v47 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + (int)a3[1]) = (((*(_DWORD *)(v47 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v47 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v33 && v18)
  {
    __p = 0;
    v84 = 0;
    v85 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v19 + 10), *((__int128 **)v19 + 11), (uint64_t)(*((_QWORD *)v19 + 11) - *((_QWORD *)v19 + 10)) >> 4);
    v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, &__p);
    if (__p)
    {
      v84 = __p;
      operator delete(__p);
    }
    v80 = 0;
    v81 = 0;
    v82 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v80, v73[10], v73[11], v73[11] - v73[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, &v80);
    if (v80)
    {
      v81 = v80;
      operator delete(v80);
    }
    v49 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v50 = *(_QWORD *)(a2 + 40);
    v51 = *(unsigned __int16 *)(a2 + 4);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v48 - v46);
    v53 = (v49 * v51);
LABEL_45:
    *(_DWORD *)(v50 + v53 + a3[4]) = *(_DWORD *)(v50 + v53 + a3[4]) & ~(a3[6] << a3[5]) | (v52 << a3[5]);
    goto LABEL_52;
  }
  if (v33 || !v18)
  {
    if (v18 | v33)
      goto LABEL_52;
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, v72, &v88);
    v68 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, v72, &v86);
    v69 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v70 = v68 - v31;
    v50 = *(_QWORD *)(a2 + 40);
    LODWORD(v68) = *(unsigned __int16 *)(a2 + 4);
    v71 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v70);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v71);
    v53 = (v69 * v68);
    goto LABEL_45;
  }
  v54 = v11 + v75;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v77, v73[10], v73[11], v73[11] - v73[10]);
  v55 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, &v77);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  v56 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v57 = *(_QWORD *)(a2 + 40);
  v58 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v57 + (v56 * v58) + a3[4]) = *(_DWORD *)(v57
                                                                                 + (v56 * v58)
                                                                                 + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v55 - v54) << a3[5]);
  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, v72, &v88);
LABEL_52:
  v59 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v60 = *(_QWORD *)(a2 + 40);
  v61 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v60 + (v59 * v61)) = *(_DWORD *)(v60 + (v59 * v61)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(_QWORD *)(*v76 + 8));
  *(_QWORD *)(*(_QWORD *)(a2 + 40)
            + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
            * *(unsigned __int16 *)(a2 + 4)
            + (int)a3[7]) = *(_QWORD *)(*v76 + 16);
  if (v17)
  {
    v62 = (unint64_t *)&v17->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v64 = v89;
  if (v89)
  {
    v65 = (unint64_t *)&v89->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  return v31;
}

void sub_19C8419D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v23 - 96);
  _Unwind_Resume(a1);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  void *exception;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)&v13 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)*a3;
  v6 = a3[1];
  if (*a3 == v6)
  {
    v12 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v12, &v13);
    v5 = (_QWORD *)*a3;
    v6 = a3[1];
  }
  if (v6 - (_QWORD)v5 != 16 || *v5)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  v8 = v5[1];
  v9 = CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1);
  *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v9) = v8;
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v9);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  std::__shared_weak_count *v17;
  int v18;
  double *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  _BOOL4 v31;
  unsigned int v32;
  __int128 **v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void *__p;
  void *v72;
  uint64_t v73;
  double *v74;
  std::__shared_weak_count *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;

  v10 = *(unsigned __int16 *)(a2 + 4);
  v76 = *(_QWORD *)(a2 + 32) * v10;
  v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v76, (void **)(a2 + 40), v10);
  ++*(_QWORD *)(a2 + 32);
  v12 = *(unsigned int *)(a2 + 52);
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + ((unint64_t)(v12 * a4) >> 3));
  v29 = (_DWORD)v12 == 64;
  v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (!v29)
    v13 = v14;
  v15 = *a5;
  v16 = *(double **)(*a5 + 120);
  v17 = *(std::__shared_weak_count **)(*a5 + 128);
  v18 = *(unsigned __int8 *)v16;
  v19 = *(double **)(*a5 + 136);
  v20 = *(unsigned __int8 *)v19;
  v21 = *(unsigned __int8 *)(*a5 + 64);
  v22 = *(_BYTE *)(*a5 + 64) == 0;
  v23 = *(_DWORD *)(*a5 + 4);
  v76 = (unint64_t)v16;
  v77 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v15 = *a5;
    v19 = *(double **)(*a5 + 136);
  }
  v26 = *(std::__shared_weak_count **)(v15 + 144);
  v74 = v19;
  v75 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v18)
    v29 = v20 == 0;
  else
    v29 = 0;
  v30 = v29;
  if ((v20 | v18 || v16[3] >= v19[3]) && (v31 = v21 != 0, !v30))
  {
    v17 = v26;
    v33 = (__int128 **)v19;
    v19 = v16;
    v34 = v18;
    v18 = v20;
    v22 = v31;
  }
  else
  {
    v32 = v23 - 1;
    if (v32 > 4)
      v23 = 3;
    else
      v23 = dword_19CB2F578[v32];
    v76 = (unint64_t)v19;
    v77 = v26;
    v33 = (__int128 **)v16;
    v34 = v20;
    v74 = v16;
    v75 = v17;
  }
  v35 = *(unsigned __int8 *)(a2 + 13);
  v36 = v11 / v10;
  if (v35 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1)
        goto LABEL_36;
      goto LABEL_31;
    }
LABEL_32:
    v37 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v40 = *(_DWORD *)(a3 + 16);
    v41 = (*v38 >> v37) & v40 | 8;
    goto LABEL_33;
  }
  if (v35 > 1)
  {
    v44 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v45 = *(_DWORD *)(a3 + 16);
    v42 = (v45 & (*v38 >> v44) & 0xFFFFFFC7 | (8 * v23)) << v44;
    v43 = v45 << v44;
    goto LABEL_35;
  }
  if (v23 == 3)
    goto LABEL_32;
  if (!v23)
  {
LABEL_31:
    v37 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v40 = *(_DWORD *)(a3 + 16);
    v41 = (*v38 >> v37) & v40 & 0xFFFFFFF7;
LABEL_33:
    v42 = v41 << v37;
    v43 = v40 << v37;
LABEL_35:
    *v38 = v42 | v39 & ~v43;
  }
LABEL_36:
  v46 = v13 + a4;
  if (v22)
    v48 = 4;
  else
    v48 = 0;
  v47 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v48) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v49 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v49 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v49 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v34) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v49 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v50 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v50 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v50 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v18 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v50 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v34 && v18)
  {
    __p = 0;
    v72 = 0;
    v73 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v19 + 10), *((__int128 **)v19 + 11), (uint64_t)(*((_QWORD *)v19 + 11) - *((_QWORD *)v19 + 10)) >> 4);
    v51 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, &__p);
    if (__p)
    {
      v72 = __p;
      operator delete(__p);
    }
    v68 = 0;
    v69 = 0;
    v70 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v68, v33[10], v33[11], v33[11] - v33[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, &v68);
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    v52 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v51 - v46) << *(_DWORD *)(a3 + 24));
  }
  else if (v34 || !v18)
  {
    if (!(v18 | v34))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, a4, &v76);
      v55 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, a4, &v74);
      v56 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
      *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v55 - v36) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    v65 = 0;
    v66 = 0;
    v67 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v65, v33[10], v33[11], v33[11] - v33[10]);
    v53 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, &v65);
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    v54 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v53 - v46) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, a4, &v76);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4)) = *(_QWORD *)(*(_QWORD *)(a2 + 40)
                                                                                      + v36
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(_QWORD *)a3 | *(_QWORD *)(*a5 + 8);
  v57 = *(_QWORD *)(a2 + 40);
  v58 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v57 + v36 * v58 + *(int *)(a3 + 40)) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*a5 + 16));
  if (v17)
  {
    v59 = (unint64_t *)&v17->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v61 = v77;
  if (v77)
  {
    v62 = (unint64_t *)&v77->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return v36;
}

void sub_19C8420E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  double *v7;
  uint64_t v8;
  unint64_t v9;
  double *v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  double *v15;
  unint64_t v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  *((_QWORD *)&v23 + 1) = *MEMORY[0x1E0C80C00];
  if (*a3 == a3[1])
  {
    v22 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v22, &v23);
  }
  v6 = *(_QWORD *)(a1 + 24);
  v21 = 0;
  std::vector<double>::vector(&v22, v6, &v21);
  v7 = (double *)v22;
  v8 = a3[1] - *a3;
  if (v8)
  {
    v9 = v8 >> 4;
    if (v9 <= 1)
      v9 = 1;
    v10 = (double *)(*a3 + 8);
    do
    {
      v11 = *((_QWORD *)v10 - 1);
      v12 = *v10;
      v10 += 2;
      v7[v11] = v12;
      --v9;
    }
    while (v9);
  }
  v13 = *v7;
  v14 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
  *(float *)(*(_QWORD *)(a1 + 224) + 4 * v14) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v13);
  v15 = (double *)v22;
  if (*((_QWORD *)&v22 + 1) - (_QWORD)v22 >= 9uLL)
  {
    v16 = 1;
    do
    {
      v17 = v15[v16];
      v18 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
      *(float *)(*(_QWORD *)(a1 + 224) + 4 * v18) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v17);
      ++v16;
      v15 = (double *)v22;
    }
    while (v16 < (uint64_t)(*((_QWORD *)&v22 + 1) - v22) >> 3);
  }
  v19 = *(_QWORD *)(a1 + 24);
  if (v15)
  {
    *((_QWORD *)&v22 + 1) = v15;
    operator delete(v15);
  }
  return v14 / v19;
}

void sub_19C8422C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  _Unwind_Resume(exception_object);
}

float CoreML::TreeEnsembles::Internal::check_cast<float,double>(double a1)
{
  float result;
  void *exception;

  result = a1;
  if (result != a1)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  return result;
}

uint64_t CoreML::Archiver::MMappedContentManager::extend_data_block<float>(uint64_t a1, uint64_t *a2, void **a3)
{
  void *v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v19;
  std::bad_alloc *exception;
  std::bad_alloc *v21;
  __int128 v22;

  v6 = *a3;
  if (*a3)
  {
    v7 = *(_QWORD **)(a1 + 8);
    if (!v7)
      goto LABEL_13;
    v8 = (uint64_t *)(a1 + 8);
    do
    {
      v9 = v7[4];
      v10 = v9 >= (unint64_t)v6;
      if (v9 >= (unint64_t)v6)
        v11 = v7;
      else
        v11 = v7 + 1;
      if (v10)
        v8 = v7;
      v7 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 == (uint64_t *)(a1 + 8) || (unint64_t)v6 < v8[4])
LABEL_13:
      v8 = (uint64_t *)(a1 + 8);
    v12 = v8[5];
    if (*a2 + 1 <= v12)
      goto LABEL_21;
    v13 = (3 * v12 + 3) >> 1;
    v14 = (char *)malloc_type_realloc(v6, 4 * v13, 0x100004052888210uLL);
    if (v14)
    {
      v15 = v14;
      bzero(&v14[4 * v8[5]], 4 * (v13 - v8[5]));
      if (v15 == *a3)
      {
        v8[5] = v13;
      }
      else
      {
        *a3 = v15;
        std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__remove_node_pointer((uint64_t **)a1, v8);
        operator delete(v8);
        *(_QWORD *)&v22 = *a3;
        *((_QWORD *)&v22 + 1) = v13;
        std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::pair<void * const,unsigned long>>((uint64_t *)a1, v22, &v22);
      }
LABEL_21:
      result = *a2;
      v19 = *a2 + 1;
      goto LABEL_22;
    }
LABEL_23:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v21 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v21, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
  }
  v16 = malloc_type_calloc(0x10uLL, 4uLL, 0x100004052888210uLL);
  *a3 = v16;
  if (!v16)
    goto LABEL_23;
  *(_QWORD *)&v22 = v16;
  v17 = std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)a1, (unint64_t)v16, (uint64_t *)&v22);
  result = 0;
  v17[5] = 16;
  v19 = 1;
LABEL_22:
  *a2 = v19;
  return result;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  std::__shared_weak_count *v18;
  int v19;
  double *v20;
  int v21;
  int v22;
  _BOOL4 v23;
  int v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  BOOL v30;
  int v31;
  _BOOL4 v32;
  unsigned int v33;
  __int128 **v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  unsigned int *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void *__p;
  void *v72;
  uint64_t v73;
  double *v74;
  std::__shared_weak_count *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;

  v10 = *(unsigned __int16 *)(a2 + 4);
  v76 = *(_QWORD *)(a2 + 32) * v10;
  v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v76, (void **)(a2 + 40), v10);
  ++*(_QWORD *)(a2 + 32);
  v12 = *(unsigned int *)(a2 + 164);
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 184) + ((unint64_t)(v12 * a4) >> 3));
  v30 = (_DWORD)v12 == 64;
  v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (v30)
    v15 = v13;
  else
    v15 = v14;
  v16 = *a5;
  v17 = *(double **)(*a5 + 120);
  v18 = *(std::__shared_weak_count **)(*a5 + 128);
  v19 = *(unsigned __int8 *)v17;
  v20 = *(double **)(*a5 + 136);
  v21 = *(unsigned __int8 *)v20;
  v22 = *(unsigned __int8 *)(*a5 + 64);
  v23 = *(_BYTE *)(*a5 + 64) == 0;
  v24 = *(_DWORD *)(*a5 + 4);
  v76 = (unint64_t)v17;
  v77 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    v16 = *a5;
    v20 = *(double **)(*a5 + 136);
  }
  v27 = *(std::__shared_weak_count **)(v16 + 144);
  v74 = v20;
  v75 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (v19)
    v30 = v21 == 0;
  else
    v30 = 0;
  v31 = v30;
  if ((v21 | v19 || v17[3] >= v20[3]) && (v32 = v22 != 0, !v31))
  {
    v18 = v27;
    v34 = (__int128 **)v20;
    v20 = v17;
    v35 = v19;
    v19 = v21;
    v23 = v32;
  }
  else
  {
    v33 = v24 - 1;
    if (v33 > 4)
      v24 = 3;
    else
      v24 = dword_19CB2F578[v33];
    v76 = (unint64_t)v20;
    v77 = v27;
    v34 = (__int128 **)v17;
    v35 = v21;
    v74 = v17;
    v75 = v18;
  }
  v36 = *(unsigned __int8 *)(a2 + 13);
  v37 = v11 / v10;
  if (v36 - 2 < 2)
  {
    if (v24 != 2)
    {
      if (v24 != 1)
        goto LABEL_37;
      goto LABEL_32;
    }
LABEL_33:
    v38 = *(_DWORD *)(a3 + 12);
    v39 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v40 = *v39;
    v41 = *(_DWORD *)(a3 + 16);
    v42 = (*v39 >> v38) & v41 | 8;
    goto LABEL_34;
  }
  if (v36 > 1)
  {
    v45 = *(_DWORD *)(a3 + 12);
    v39 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v40 = *v39;
    v46 = *(_DWORD *)(a3 + 16);
    v43 = (v46 & (*v39 >> v45) & 0xFFFFFFC7 | (8 * v24)) << v45;
    v44 = v46 << v45;
    goto LABEL_36;
  }
  if (v24 == 3)
    goto LABEL_33;
  if (!v24)
  {
LABEL_32:
    v38 = *(_DWORD *)(a3 + 12);
    v39 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v40 = *v39;
    v41 = *(_DWORD *)(a3 + 16);
    v42 = (*v39 >> v38) & v41 & 0xFFFFFFF7;
LABEL_34:
    v43 = v42 << v38;
    v44 = v41 << v38;
LABEL_36:
    *v39 = v43 | v40 & ~v44;
  }
LABEL_37:
  if (v23)
    v48 = 4;
  else
    v48 = 0;
  v47 = *(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v48) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v49 = *(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v49 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v49 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v35) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v49 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v50 = *(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v50 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v50 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v19 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v50 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v35 && v19)
  {
    __p = 0;
    v72 = 0;
    v73 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v20 + 10), *((__int128 **)v20 + 11), (uint64_t)(*((_QWORD *)v20 + 11) - *((_QWORD *)v20 + 10)) >> 4);
    v51 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)&__p);
    if (__p)
    {
      v72 = __p;
      operator delete(__p);
    }
    v68 = 0;
    v69 = 0;
    v70 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v68, v34[10], v34[11], v34[11] - v34[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)&v68);
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    v52 = *(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v51 - v15) << *(_DWORD *)(a3 + 24));
  }
  else if (v35 || !v19)
  {
    if (!(v19 | v35))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, a4, &v76);
      v55 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, a4, &v74);
      v56 = *(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4);
      *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v55 - v37) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    v65 = 0;
    v66 = 0;
    v67 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v65, v34[10], v34[11], v34[11] - v34[10]);
    v53 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)&v65);
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    v54 = *(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v53 - v15) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, a4, &v76);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 40) + v37 * *(unsigned __int16 *)(a2 + 4)) = *(_QWORD *)(*(_QWORD *)(a2 + 40)
                                                                                      + v37
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(_QWORD *)a3 | *(_QWORD *)(*a5 + 8);
  v57 = *(_QWORD *)(a2 + 40);
  v58 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v57 + v37 * v58 + *(int *)(a3 + 40)) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*a5 + 16));
  if (v18)
  {
    v59 = (unint64_t *)&v18->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v61 = v77;
  if (v77)
  {
    v62 = (unint64_t *)&v77->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return v37;
}

void sub_19C842A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v19;
  __int128 v20;

  *(_QWORD *)&v20 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v6 = a3[1];
  if (*a3 == v6)
  {
    v19 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v19, &v20);
    v5 = *a3;
    v6 = a3[1];
  }
  v7 = v6 - v5;
  if (!v7)
    return 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = v7 >> 4;
  v12 = (void **)(a1 + 224);
  do
  {
    v13 = *(_QWORD *)(v5 + v8);
    if (v9 == v11 - 1)
      v13 |= 1 << (*(_BYTE *)(a1 + 11) - 1);
    v14 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), v13);
    v15 = *(double *)(*a3 + v8 + 8);
    v16 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), v12);
    *((float *)*v12 + v16) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v15);
    if (!v9)
      v10 = v14;
    ++v9;
    v5 = *a3;
    v11 = (a3[1] - *a3) >> 4;
    v8 += 16;
  }
  while (v9 < v11);
  return v10;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  std::__shared_weak_count *v17;
  int v18;
  double *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  _BOOL4 v31;
  unsigned int v32;
  __int128 **v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void *__p;
  void *v72;
  uint64_t v73;
  double *v74;
  std::__shared_weak_count *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;

  v10 = *(unsigned __int16 *)(a2 + 4);
  v76 = *(_QWORD *)(a2 + 32) * v10;
  v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v76, (void **)(a2 + 40), v10);
  ++*(_QWORD *)(a2 + 32);
  v12 = *(unsigned int *)(a2 + 52);
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + ((unint64_t)(v12 * a4) >> 3));
  v29 = (_DWORD)v12 == 64;
  v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (!v29)
    v13 = v14;
  v15 = *a5;
  v16 = *(double **)(*a5 + 120);
  v17 = *(std::__shared_weak_count **)(*a5 + 128);
  v18 = *(unsigned __int8 *)v16;
  v19 = *(double **)(*a5 + 136);
  v20 = *(unsigned __int8 *)v19;
  v21 = *(unsigned __int8 *)(*a5 + 64);
  v22 = *(_BYTE *)(*a5 + 64) == 0;
  v23 = *(_DWORD *)(*a5 + 4);
  v76 = (unint64_t)v16;
  v77 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v15 = *a5;
    v19 = *(double **)(*a5 + 136);
  }
  v26 = *(std::__shared_weak_count **)(v15 + 144);
  v74 = v19;
  v75 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v18)
    v29 = v20 == 0;
  else
    v29 = 0;
  v30 = v29;
  if ((v20 | v18 || v16[3] >= v19[3]) && (v31 = v21 != 0, !v30))
  {
    v17 = v26;
    v33 = (__int128 **)v19;
    v19 = v16;
    v34 = v18;
    v18 = v20;
    v22 = v31;
  }
  else
  {
    v32 = v23 - 1;
    if (v32 > 4)
      v23 = 3;
    else
      v23 = dword_19CB2F578[v32];
    v76 = (unint64_t)v19;
    v77 = v26;
    v33 = (__int128 **)v16;
    v34 = v20;
    v74 = v16;
    v75 = v17;
  }
  v35 = *(unsigned __int8 *)(a2 + 13);
  v36 = v11 / v10;
  if (v35 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1)
        goto LABEL_36;
      goto LABEL_31;
    }
LABEL_32:
    v37 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v40 = *(_DWORD *)(a3 + 16);
    v41 = (*v38 >> v37) & v40 | 8;
    goto LABEL_33;
  }
  if (v35 > 1)
  {
    v44 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v45 = *(_DWORD *)(a3 + 16);
    v42 = (v45 & (*v38 >> v44) & 0xFFFFFFC7 | (8 * v23)) << v44;
    v43 = v45 << v44;
    goto LABEL_35;
  }
  if (v23 == 3)
    goto LABEL_32;
  if (!v23)
  {
LABEL_31:
    v37 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v40 = *(_DWORD *)(a3 + 16);
    v41 = (*v38 >> v37) & v40 & 0xFFFFFFF7;
LABEL_33:
    v42 = v41 << v37;
    v43 = v40 << v37;
LABEL_35:
    *v38 = v42 | v39 & ~v43;
  }
LABEL_36:
  v46 = v13 + a4;
  if (v22)
    v48 = 4;
  else
    v48 = 0;
  v47 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v48) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v49 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v49 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v49 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v34) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v49 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v50 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v50 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v50 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v18 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v50 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v34 && v18)
  {
    __p = 0;
    v72 = 0;
    v73 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v19 + 10), *((__int128 **)v19 + 11), (uint64_t)(*((_QWORD *)v19 + 11) - *((_QWORD *)v19 + 10)) >> 4);
    v51 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)&__p);
    if (__p)
    {
      v72 = __p;
      operator delete(__p);
    }
    v68 = 0;
    v69 = 0;
    v70 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v68, v33[10], v33[11], v33[11] - v33[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)&v68);
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    v52 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v51 - v46) << *(_DWORD *)(a3 + 24));
  }
  else if (v34 || !v18)
  {
    if (!(v18 | v34))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, a4, &v76);
      v55 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, a4, &v74);
      v56 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
      *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v55 - v36) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    v65 = 0;
    v66 = 0;
    v67 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v65, v33[10], v33[11], v33[11] - v33[10]);
    v53 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)&v65);
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    v54 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v53 - v46) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, a4, &v76);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4)) = *(_QWORD *)(*(_QWORD *)(a2 + 40)
                                                                                      + v36
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(_QWORD *)a3 | *(_QWORD *)(*a5 + 8);
  v57 = *(_QWORD *)(a2 + 40);
  v58 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v57 + v36 * v58 + *(int *)(a3 + 40)) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*a5 + 16));
  if (v17)
  {
    v59 = (unint64_t *)&v17->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v61 = v77;
  if (v77)
  {
    v62 = (unint64_t *)&v77->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return v36;
}

void sub_19C8431F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  void *exception;
  __int128 v13;
  __int128 v14;

  *(_QWORD *)&v14 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = a3[1];
  if (*a3 == v7)
  {
    v13 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v13, &v14);
    v6 = *a3;
    v7 = a3[1];
  }
  if ((char *)v7 - (char *)v6 != 16)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  v8 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), *v6);
  v9 = *((double *)*a3 + 1);
  v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
  *(float *)(*(_QWORD *)(a1 + 224) + 4 * v10) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v9);
  return v8;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  std::__shared_weak_count *v17;
  int v18;
  double *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  _BOOL4 v31;
  unsigned int v32;
  __int128 **v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void *__p;
  void *v72;
  uint64_t v73;
  double *v74;
  std::__shared_weak_count *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;

  v10 = *(unsigned __int16 *)(a2 + 4);
  v76 = *(_QWORD *)(a2 + 32) * v10;
  v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v76, (void **)(a2 + 40), v10);
  ++*(_QWORD *)(a2 + 32);
  v12 = *(unsigned int *)(a2 + 52);
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + ((unint64_t)(v12 * a4) >> 3));
  v29 = (_DWORD)v12 == 64;
  v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (!v29)
    v13 = v14;
  v15 = *a5;
  v16 = *(double **)(*a5 + 120);
  v17 = *(std::__shared_weak_count **)(*a5 + 128);
  v18 = *(unsigned __int8 *)v16;
  v19 = *(double **)(*a5 + 136);
  v20 = *(unsigned __int8 *)v19;
  v21 = *(unsigned __int8 *)(*a5 + 64);
  v22 = *(_BYTE *)(*a5 + 64) == 0;
  v23 = *(_DWORD *)(*a5 + 4);
  v76 = (unint64_t)v16;
  v77 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v15 = *a5;
    v19 = *(double **)(*a5 + 136);
  }
  v26 = *(std::__shared_weak_count **)(v15 + 144);
  v74 = v19;
  v75 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v18)
    v29 = v20 == 0;
  else
    v29 = 0;
  v30 = v29;
  if ((v20 | v18 || v16[3] >= v19[3]) && (v31 = v21 != 0, !v30))
  {
    v17 = v26;
    v33 = (__int128 **)v19;
    v19 = v16;
    v34 = v18;
    v18 = v20;
    v22 = v31;
  }
  else
  {
    v32 = v23 - 1;
    if (v32 > 4)
      v23 = 3;
    else
      v23 = dword_19CB2F578[v32];
    v76 = (unint64_t)v19;
    v77 = v26;
    v33 = (__int128 **)v16;
    v34 = v20;
    v74 = v16;
    v75 = v17;
  }
  v35 = *(unsigned __int8 *)(a2 + 13);
  v36 = v11 / v10;
  if (v35 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1)
        goto LABEL_36;
      goto LABEL_31;
    }
LABEL_32:
    v37 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v40 = *(_DWORD *)(a3 + 16);
    v41 = (*v38 >> v37) & v40 | 8;
    goto LABEL_33;
  }
  if (v35 > 1)
  {
    v44 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v45 = *(_DWORD *)(a3 + 16);
    v42 = (v45 & (*v38 >> v44) & 0xFFFFFFC7 | (8 * v23)) << v44;
    v43 = v45 << v44;
    goto LABEL_35;
  }
  if (v23 == 3)
    goto LABEL_32;
  if (!v23)
  {
LABEL_31:
    v37 = *(_DWORD *)(a3 + 12);
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    v39 = *v38;
    v40 = *(_DWORD *)(a3 + 16);
    v41 = (*v38 >> v37) & v40 & 0xFFFFFFF7;
LABEL_33:
    v42 = v41 << v37;
    v43 = v40 << v37;
LABEL_35:
    *v38 = v42 | v39 & ~v43;
  }
LABEL_36:
  v46 = v13 + a4;
  if (v22)
    v48 = 4;
  else
    v48 = 0;
  v47 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v48) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v49 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v49 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v49 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v34) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v49 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  v50 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v50 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v50 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v18 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v50 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v34 && v18)
  {
    __p = 0;
    v72 = 0;
    v73 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v19 + 10), *((__int128 **)v19 + 11), (uint64_t)(*((_QWORD *)v19 + 11) - *((_QWORD *)v19 + 10)) >> 4);
    v51 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, (double **)&__p);
    if (__p)
    {
      v72 = __p;
      operator delete(__p);
    }
    v68 = 0;
    v69 = 0;
    v70 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v68, v33[10], v33[11], v33[11] - v33[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, (double **)&v68);
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    v52 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v52 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v51 - v46) << *(_DWORD *)(a3 + 24));
  }
  else if (v34 || !v18)
  {
    if (!(v18 | v34))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, a4, &v76);
      v55 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, a4, &v74);
      v56 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
      *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v56 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v55 - v36) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    v65 = 0;
    v66 = 0;
    v67 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v65, v33[10], v33[11], v33[11] - v33[10]);
    v53 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, (double **)&v65);
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    v54 = *(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4);
    *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) = *(_QWORD *)(v54 + *(unsigned int *)(a3 + 20)) & ~(*(_QWORD *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v53 - v46) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, a4, &v76);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 40) + v36 * *(unsigned __int16 *)(a2 + 4)) = *(_QWORD *)(*(_QWORD *)(a2 + 40)
                                                                                      + v36
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(_QWORD *)a3 | *(_QWORD *)(*a5 + 8);
  v57 = *(_QWORD *)(a2 + 40);
  v58 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v57 + v36 * v58 + *(int *)(a3 + 40)) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*a5 + 16));
  if (v17)
  {
    v59 = (unint64_t *)&v17->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v61 = v77;
  if (v77)
  {
    v62 = (unint64_t *)&v77->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return v36;
}

void sub_19C843910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, double **a3)
{
  double *v5;
  double *v6;
  double v8;
  uint64_t v9;
  void *exception;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)&v13 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v6 = a3[1];
  if (*a3 == v6)
  {
    v12 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v12, &v13);
    v5 = *a3;
    v6 = a3[1];
  }
  if ((char *)v6 - (char *)v5 != 16 || *(_QWORD *)v5)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  v8 = v5[1];
  v9 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
  *(float *)(*(_QWORD *)(a1 + 224) + 4 * v9) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v8);
  return v9;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  std::__shared_weak_count *v17;
  int v18;
  double *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  unint64_t v31;
  _BOOL4 v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v71;
  int v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t v75;
  __int128 **v76;
  int v78;
  uint64_t *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  void *__p;
  void *v87;
  uint64_t v88;
  double *v89;
  std::__shared_weak_count *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;

  v9 = *(unsigned __int16 *)(a2 + 4);
  v91 = *(_QWORD *)(a2 + 32) * v9;
  v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v91, (void **)(a2 + 40), v9);
  ++*(_QWORD *)(a2 + 32);
  v75 = a4;
  v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  v12 = *(_DWORD *)(a2 + 52);
  v13 = v12 * (unint64_t)v11;
  v29 = v12 == 64;
  v14 = (*(_QWORD *)(*(_QWORD *)(a2 + 72) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v29)
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + (v13 >> 3));
  v78 = v14;
  v79 = a5;
  v15 = *a5;
  v16 = *(double **)(*a5 + 120);
  v17 = *(std::__shared_weak_count **)(*a5 + 128);
  v18 = *(unsigned __int8 *)v16;
  v19 = *(double **)(*a5 + 136);
  v20 = *(unsigned __int8 *)v19;
  v21 = *(unsigned __int8 *)(*a5 + 64);
  v22 = *(_BYTE *)(*a5 + 64) == 0;
  v23 = *(_DWORD *)(*a5 + 4);
  v91 = (unint64_t)v16;
  v92 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v15 = *a5;
    v19 = *(double **)(*a5 + 136);
  }
  v26 = *(std::__shared_weak_count **)(v15 + 144);
  v89 = v19;
  v90 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v18)
    v29 = v20 == 0;
  else
    v29 = 0;
  v30 = v29;
  v31 = v10 / v9;
  if ((v20 | v18 || v16[3] >= v19[3]) && (v32 = v21 != 0, !v30))
  {
    v17 = v26;
    v76 = (__int128 **)v19;
    v19 = v16;
    v33 = v18;
    v18 = v20;
  }
  else
  {
    v32 = v22;
    if ((v23 - 1) > 4)
      v23 = 3;
    else
      v23 = dword_19CB2F578[v23 - 1];
    v91 = (unint64_t)v19;
    v92 = v26;
    v76 = (__int128 **)v16;
    v33 = v20;
    v89 = v16;
    v90 = v17;
  }
  v34 = *(unsigned __int8 *)(a2 + 13);
  if (v34 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1)
        goto LABEL_35;
      goto LABEL_31;
    }
LABEL_33:
    v42 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v36 = a3[2];
    v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v42 * *(unsigned __int16 *)(a2 + 4));
    v38 = *v37;
    v39 = a3[3];
    v40 = (*v37 >> v36) & v39 | 8;
    goto LABEL_34;
  }
  if (v34 > 1)
  {
    v41 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v36 = a3[2];
    v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v41 * *(unsigned __int16 *)(a2 + 4));
    v38 = *v37;
    v39 = a3[3];
    v40 = v39 & (*v37 >> v36) & 0xFFFFFFC7 | (8 * v23);
    goto LABEL_34;
  }
  if (v23 == 3)
    goto LABEL_33;
  if (v23)
    goto LABEL_35;
LABEL_31:
  v35 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v36 = a3[2];
  v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v35 * *(unsigned __int16 *)(a2 + 4));
  v38 = *v37;
  v39 = a3[3];
  v40 = (*v37 >> v36) & v39 & 0xFFFFFFF7;
LABEL_34:
  *v37 = (v40 << v36) | v38 & ~(v39 << v36);
LABEL_35:
  v43 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  if (v32)
    v44 = 4;
  else
    v44 = 0;
  *(_DWORD *)(v43 + (int)a3[1]) = (((*(_DWORD *)(v43 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v44) << a3[2]) | *(_DWORD *)(v43 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v45 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v45 + (int)a3[1]) = (((*(_DWORD *)(v45 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v33) << a3[2]) | *(_DWORD *)(v45 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v46 = v11 + v78;
  v47 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + (int)a3[1]) = (((*(_DWORD *)(v47 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v47 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v33 && v18)
  {
    __p = 0;
    v87 = 0;
    v88 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v19 + 10), *((__int128 **)v19 + 11), (uint64_t)(*((_QWORD *)v19 + 11) - *((_QWORD *)v19 + 10)) >> 4);
    v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, &__p);
    if (__p)
    {
      v87 = __p;
      operator delete(__p);
    }
    v83 = 0;
    v84 = 0;
    v85 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v83, v76[10], v76[11], v76[11] - v76[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, &v83);
    if (v83)
    {
      v84 = v83;
      operator delete(v83);
    }
    v49 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v50 = *(_QWORD *)(a2 + 40);
    v51 = *(unsigned __int16 *)(a2 + 4);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v48 - v46);
    v53 = (v49 * v51);
LABEL_45:
    *(_DWORD *)(v50 + v53 + a3[4]) = *(_DWORD *)(v50 + v53 + a3[4]) & ~(a3[6] << a3[5]) | (v52 << a3[5]);
    goto LABEL_52;
  }
  if (v33 || !v18)
  {
    if (v18 | v33)
      goto LABEL_52;
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, v75, &v91);
    v71 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, v75, &v89);
    v72 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v73 = v71 - v31;
    v50 = *(_QWORD *)(a2 + 40);
    LODWORD(v71) = *(unsigned __int16 *)(a2 + 4);
    v74 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v73);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v74);
    v53 = (v72 * v71);
    goto LABEL_45;
  }
  v54 = v11 + v78;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v80, v76[10], v76[11], v76[11] - v76[10]);
  v55 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, &v80);
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
  v56 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v57 = *(_QWORD *)(a2 + 40);
  v58 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v57 + (v56 * v58) + a3[4]) = *(_DWORD *)(v57
                                                                                 + (v56 * v58)
                                                                                 + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v55 - v54) << a3[5]);
  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, v75, &v91);
LABEL_52:
  v59 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v60 = *(_QWORD *)(a2 + 40);
  v61 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v60 + (v59 * v61)) = *(_DWORD *)(v60 + (v59 * v61)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(_QWORD *)(*v79 + 8));
  v62 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v63 = *(_QWORD *)(a2 + 40);
  v64 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v63 + (v62 * v64) + (int)a3[7]) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*v79 + 16));
  if (v17)
  {
    v65 = (unint64_t *)&v17->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v67 = v92;
  if (v92)
  {
    v68 = (unint64_t *)&v92->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  return v31;
}

void sub_19C844104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v23 - 96);
  _Unwind_Resume(a1);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  double *v7;
  uint64_t v8;
  unint64_t v9;
  double *v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  double *v15;
  unint64_t v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  *((_QWORD *)&v23 + 1) = *MEMORY[0x1E0C80C00];
  if (*a3 == a3[1])
  {
    v22 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v22, &v23);
  }
  v6 = *(_QWORD *)(a1 + 24);
  v21 = 0;
  std::vector<double>::vector(&v22, v6, &v21);
  v7 = (double *)v22;
  v8 = a3[1] - *a3;
  if (v8)
  {
    v9 = v8 >> 4;
    if (v9 <= 1)
      v9 = 1;
    v10 = (double *)(*a3 + 8);
    do
    {
      v11 = *((_QWORD *)v10 - 1);
      v12 = *v10;
      v10 += 2;
      v7[v11] = v12;
      --v9;
    }
    while (v9);
  }
  v13 = *v7;
  v14 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
  *(float *)(*(_QWORD *)(a1 + 224) + 4 * v14) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v13);
  v15 = (double *)v22;
  if (*((_QWORD *)&v22 + 1) - (_QWORD)v22 >= 9uLL)
  {
    v16 = 1;
    do
    {
      v17 = v15[v16];
      v18 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
      *(float *)(*(_QWORD *)(a1 + 224) + 4 * v18) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v17);
      ++v16;
      v15 = (double *)v22;
    }
    while (v16 < (uint64_t)(*((_QWORD *)&v22 + 1) - v22) >> 3);
  }
  v19 = *(_QWORD *)(a1 + 24);
  if (v15)
  {
    *((_QWORD *)&v22 + 1) = v15;
    operator delete(v15);
  }
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v14 / v19);
}

void sub_19C8442EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  std::__shared_weak_count *v17;
  int v18;
  double *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  unint64_t v31;
  _BOOL4 v32;
  __int128 **v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v77;
  uint64_t *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  void *__p;
  void *v86;
  uint64_t v87;
  double *v88;
  std::__shared_weak_count *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;

  v9 = *(unsigned __int16 *)(a2 + 4);
  v90 = *(_QWORD *)(a2 + 32) * v9;
  v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v90, (void **)(a2 + 40), v9);
  ++*(_QWORD *)(a2 + 32);
  v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  v12 = *(_DWORD *)(a2 + 164);
  v13 = v12 * (unint64_t)v11;
  v29 = v12 == 64;
  v14 = (*(_QWORD *)(*(_QWORD *)(a2 + 184) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v29)
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 184) + (v13 >> 3));
  v77 = v14;
  v78 = a5;
  v15 = *a5;
  v16 = *(double **)(*a5 + 120);
  v17 = *(std::__shared_weak_count **)(*a5 + 128);
  v18 = *(unsigned __int8 *)v16;
  v19 = *(double **)(*a5 + 136);
  v20 = *(unsigned __int8 *)v19;
  v21 = *(unsigned __int8 *)(*a5 + 64);
  v22 = *(_BYTE *)(*a5 + 64) == 0;
  v23 = *(_DWORD *)(*a5 + 4);
  v90 = (unint64_t)v16;
  v91 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v15 = *v78;
    v19 = *(double **)(*v78 + 136);
  }
  v26 = *(std::__shared_weak_count **)(v15 + 144);
  v88 = v19;
  v89 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v18)
    v29 = v20 == 0;
  else
    v29 = 0;
  v30 = v29;
  v31 = v10 / v9;
  v75 = a4;
  if ((v20 | v18 || v16[3] >= v19[3]) && (v32 = v21 != 0, !v30))
  {
    v17 = v26;
    v33 = (__int128 **)v19;
    v19 = v16;
    v34 = v18;
    v18 = v20;
    v22 = v32;
  }
  else
  {
    if ((v23 - 1) > 4)
      v23 = 3;
    else
      v23 = dword_19CB2F578[v23 - 1];
    v90 = (unint64_t)v19;
    v91 = v26;
    v33 = (__int128 **)v16;
    v34 = v20;
    v88 = v16;
    v89 = v17;
  }
  v35 = *(unsigned __int8 *)(a2 + 13);
  if (v35 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1)
        goto LABEL_35;
      goto LABEL_31;
    }
LABEL_33:
    v43 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v37 = a3[2];
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v43 * *(unsigned __int16 *)(a2 + 4));
    v39 = *v38;
    v40 = a3[3];
    v41 = (*v38 >> v37) & v40 | 8;
    goto LABEL_34;
  }
  if (v35 > 1)
  {
    v42 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v37 = a3[2];
    v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v42 * *(unsigned __int16 *)(a2 + 4));
    v39 = *v38;
    v40 = a3[3];
    v41 = v40 & (*v38 >> v37) & 0xFFFFFFC7 | (8 * v23);
    goto LABEL_34;
  }
  if (v23 == 3)
    goto LABEL_33;
  if (v23)
    goto LABEL_35;
LABEL_31:
  v36 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v37 = a3[2];
  v38 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v36 * *(unsigned __int16 *)(a2 + 4));
  v39 = *v38;
  v40 = a3[3];
  v41 = (*v38 >> v37) & v40 & 0xFFFFFFF7;
LABEL_34:
  *v38 = (v41 << v37) | v39 & ~(v40 << v37);
LABEL_35:
  v44 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  if (v22)
    v45 = 4;
  else
    v45 = 0;
  *(_DWORD *)(v44 + (int)a3[1]) = (((*(_DWORD *)(v44 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v45) << a3[2]) | *(_DWORD *)(v44 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v46 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v46 + (int)a3[1]) = (((*(_DWORD *)(v46 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v34) << a3[2]) | *(_DWORD *)(v46 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v47 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + (int)a3[1]) = (((*(_DWORD *)(v47 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v47 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v34 && v18)
  {
    __p = 0;
    v86 = 0;
    v87 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v19 + 10), *((__int128 **)v19 + 11), (uint64_t)(*((_QWORD *)v19 + 11) - *((_QWORD *)v19 + 10)) >> 4);
    v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)&__p);
    if (__p)
    {
      v86 = __p;
      operator delete(__p);
    }
    v82 = 0;
    v83 = 0;
    v84 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v82, v33[10], v33[11], v33[11] - v33[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)&v82);
    if (v82)
    {
      v83 = v82;
      operator delete(v82);
    }
    v49 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v50 = *(_QWORD *)(a2 + 40);
    v51 = *(unsigned __int16 *)(a2 + 4);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v48 - (unint64_t)v77);
    v53 = v50 + (v49 * v51);
LABEL_45:
    *(_DWORD *)(v53 + a3[4]) = *(_DWORD *)(v53 + a3[4]) & ~(a3[6] << a3[5]) | (v52 << a3[5]);
    goto LABEL_52;
  }
  if (v34 || !v18)
  {
    if (v18 | v34)
      goto LABEL_52;
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, v75, &v90);
    v70 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, v75, &v88);
    v71 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v72 = v70 - v31;
    v73 = *(_QWORD *)(a2 + 40);
    LODWORD(v70) = *(unsigned __int16 *)(a2 + 4);
    v74 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v72);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v74);
    v53 = v73 + (v71 * v70);
    goto LABEL_45;
  }
  v79 = 0;
  v80 = 0;
  v81 = 0;
  std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v79, v33[10], v33[11], v33[11] - v33[10]);
  v54 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)&v79);
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  v55 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v56 = *(_QWORD *)(a2 + 40);
  v57 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v56 + (v55 * v57) + a3[4]) = *(_DWORD *)(v56
                                                                                 + (v55 * v57)
                                                                                 + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v54 - (unint64_t)v77) << a3[5]);
  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, v75, &v90);
LABEL_52:
  v58 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v59 = *(_QWORD *)(a2 + 40);
  v60 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v59 + (v58 * v60)) = *(_DWORD *)(v59 + (v58 * v60)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(_QWORD *)(*v78 + 8));
  v61 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v62 = *(_QWORD *)(a2 + 40);
  v63 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v62 + (v61 * v63) + (int)a3[7]) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*v78 + 16));
  if (v17)
  {
    v64 = (unint64_t *)&v17->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v66 = v91;
  if (v91)
  {
    v67 = (unint64_t *)&v91->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  return v31;
}

void sub_19C8449AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v23 - 96);
  _Unwind_Resume(a1);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v19;
  __int128 v20;

  *(_QWORD *)&v20 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v6 = a3[1];
  if (*a3 == v6)
  {
    v19 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v19, &v20);
    v5 = *a3;
    v6 = a3[1];
  }
  v7 = v6 - v5;
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = v7 >> 4;
    v12 = (void **)(a1 + 224);
    do
    {
      v13 = *(_QWORD *)(v5 + v8);
      if (v9 == v11 - 1)
        v13 |= 1 << (*(_BYTE *)(a1 + 11) - 1);
      v14 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), v13);
      v15 = *(double *)(*a3 + v8 + 8);
      v16 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), v12);
      *((float *)*v12 + v16) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v15);
      if (!v9)
        v10 = v14;
      ++v9;
      v5 = *a3;
      v11 = (a3[1] - *a3) >> 4;
      v8 += 16;
    }
    while (v9 < v11);
  }
  else
  {
    v10 = 0;
  }
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v10);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  std::__shared_weak_count *v17;
  int v18;
  double *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  unint64_t v31;
  _BOOL4 v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v71;
  int v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t v75;
  __int128 **v76;
  int v78;
  uint64_t *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  void *__p;
  void *v87;
  uint64_t v88;
  double *v89;
  std::__shared_weak_count *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;

  v9 = *(unsigned __int16 *)(a2 + 4);
  v91 = *(_QWORD *)(a2 + 32) * v9;
  v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v91, (void **)(a2 + 40), v9);
  ++*(_QWORD *)(a2 + 32);
  v75 = a4;
  v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  v12 = *(_DWORD *)(a2 + 52);
  v13 = v12 * (unint64_t)v11;
  v29 = v12 == 64;
  v14 = (*(_QWORD *)(*(_QWORD *)(a2 + 72) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v29)
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + (v13 >> 3));
  v78 = v14;
  v79 = a5;
  v15 = *a5;
  v16 = *(double **)(*a5 + 120);
  v17 = *(std::__shared_weak_count **)(*a5 + 128);
  v18 = *(unsigned __int8 *)v16;
  v19 = *(double **)(*a5 + 136);
  v20 = *(unsigned __int8 *)v19;
  v21 = *(unsigned __int8 *)(*a5 + 64);
  v22 = *(_BYTE *)(*a5 + 64) == 0;
  v23 = *(_DWORD *)(*a5 + 4);
  v91 = (unint64_t)v16;
  v92 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v15 = *a5;
    v19 = *(double **)(*a5 + 136);
  }
  v26 = *(std::__shared_weak_count **)(v15 + 144);
  v89 = v19;
  v90 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v18)
    v29 = v20 == 0;
  else
    v29 = 0;
  v30 = v29;
  v31 = v10 / v9;
  if ((v20 | v18 || v16[3] >= v19[3]) && (v32 = v21 != 0, !v30))
  {
    v17 = v26;
    v76 = (__int128 **)v19;
    v19 = v16;
    v33 = v18;
    v18 = v20;
  }
  else
  {
    v32 = v22;
    if ((v23 - 1) > 4)
      v23 = 3;
    else
      v23 = dword_19CB2F578[v23 - 1];
    v91 = (unint64_t)v19;
    v92 = v26;
    v76 = (__int128 **)v16;
    v33 = v20;
    v89 = v16;
    v90 = v17;
  }
  v34 = *(unsigned __int8 *)(a2 + 13);
  if (v34 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1)
        goto LABEL_35;
      goto LABEL_31;
    }
LABEL_33:
    v42 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v36 = a3[2];
    v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v42 * *(unsigned __int16 *)(a2 + 4));
    v38 = *v37;
    v39 = a3[3];
    v40 = (*v37 >> v36) & v39 | 8;
    goto LABEL_34;
  }
  if (v34 > 1)
  {
    v41 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v36 = a3[2];
    v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v41 * *(unsigned __int16 *)(a2 + 4));
    v38 = *v37;
    v39 = a3[3];
    v40 = v39 & (*v37 >> v36) & 0xFFFFFFC7 | (8 * v23);
    goto LABEL_34;
  }
  if (v23 == 3)
    goto LABEL_33;
  if (v23)
    goto LABEL_35;
LABEL_31:
  v35 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v36 = a3[2];
  v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v35 * *(unsigned __int16 *)(a2 + 4));
  v38 = *v37;
  v39 = a3[3];
  v40 = (*v37 >> v36) & v39 & 0xFFFFFFF7;
LABEL_34:
  *v37 = (v40 << v36) | v38 & ~(v39 << v36);
LABEL_35:
  v43 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  if (v32)
    v44 = 4;
  else
    v44 = 0;
  *(_DWORD *)(v43 + (int)a3[1]) = (((*(_DWORD *)(v43 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v44) << a3[2]) | *(_DWORD *)(v43 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v45 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v45 + (int)a3[1]) = (((*(_DWORD *)(v45 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v33) << a3[2]) | *(_DWORD *)(v45 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v46 = v11 + v78;
  v47 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + (int)a3[1]) = (((*(_DWORD *)(v47 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v47 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v33 && v18)
  {
    __p = 0;
    v87 = 0;
    v88 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v19 + 10), *((__int128 **)v19 + 11), (uint64_t)(*((_QWORD *)v19 + 11) - *((_QWORD *)v19 + 10)) >> 4);
    v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)&__p);
    if (__p)
    {
      v87 = __p;
      operator delete(__p);
    }
    v83 = 0;
    v84 = 0;
    v85 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v83, v76[10], v76[11], v76[11] - v76[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)&v83);
    if (v83)
    {
      v84 = v83;
      operator delete(v83);
    }
    v49 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v50 = *(_QWORD *)(a2 + 40);
    v51 = *(unsigned __int16 *)(a2 + 4);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v48 - v46);
    v53 = (v49 * v51);
LABEL_45:
    *(_DWORD *)(v50 + v53 + a3[4]) = *(_DWORD *)(v50 + v53 + a3[4]) & ~(a3[6] << a3[5]) | (v52 << a3[5]);
    goto LABEL_52;
  }
  if (v33 || !v18)
  {
    if (v18 | v33)
      goto LABEL_52;
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, v75, &v91);
    v71 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, v75, &v89);
    v72 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v73 = v71 - v31;
    v50 = *(_QWORD *)(a2 + 40);
    LODWORD(v71) = *(unsigned __int16 *)(a2 + 4);
    v74 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v73);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v74);
    v53 = (v72 * v71);
    goto LABEL_45;
  }
  v54 = v11 + v78;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v80, v76[10], v76[11], v76[11] - v76[10]);
  v55 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)&v80);
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
  v56 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v57 = *(_QWORD *)(a2 + 40);
  v58 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v57 + (v56 * v58) + a3[4]) = *(_DWORD *)(v57
                                                                                 + (v56 * v58)
                                                                                 + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v55 - v54) << a3[5]);
  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, v75, &v91);
LABEL_52:
  v59 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v60 = *(_QWORD *)(a2 + 40);
  v61 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v60 + (v59 * v61)) = *(_DWORD *)(v60 + (v59 * v61)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(_QWORD *)(*v79 + 8));
  v62 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v63 = *(_QWORD *)(a2 + 40);
  v64 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v63 + (v62 * v64) + (int)a3[7]) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*v79 + 16));
  if (v17)
  {
    v65 = (unint64_t *)&v17->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v67 = v92;
  if (v92)
  {
    v68 = (unint64_t *)&v92->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  return v31;
}

void sub_19C845224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v23 - 96);
  _Unwind_Resume(a1);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  void *exception;
  __int128 v13;
  __int128 v14;

  *(_QWORD *)&v14 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = a3[1];
  if (*a3 == v7)
  {
    v13 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v13, &v14);
    v6 = *a3;
    v7 = a3[1];
  }
  if ((char *)v7 - (char *)v6 != 16)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  v8 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), *v6);
  v9 = *((double *)*a3 + 1);
  v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
  *(float *)(*(_QWORD *)(a1 + 224) + 4 * v10) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v9);
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v8);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  std::__shared_weak_count *v17;
  int v18;
  double *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  unint64_t v31;
  _BOOL4 v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v71;
  int v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t v75;
  __int128 **v76;
  int v78;
  uint64_t *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  void *__p;
  void *v87;
  uint64_t v88;
  double *v89;
  std::__shared_weak_count *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;

  v9 = *(unsigned __int16 *)(a2 + 4);
  v91 = *(_QWORD *)(a2 + 32) * v9;
  v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v91, (void **)(a2 + 40), v9);
  ++*(_QWORD *)(a2 + 32);
  v75 = a4;
  v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  v12 = *(_DWORD *)(a2 + 52);
  v13 = v12 * (unint64_t)v11;
  v29 = v12 == 64;
  v14 = (*(_QWORD *)(*(_QWORD *)(a2 + 72) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v29)
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + (v13 >> 3));
  v78 = v14;
  v79 = a5;
  v15 = *a5;
  v16 = *(double **)(*a5 + 120);
  v17 = *(std::__shared_weak_count **)(*a5 + 128);
  v18 = *(unsigned __int8 *)v16;
  v19 = *(double **)(*a5 + 136);
  v20 = *(unsigned __int8 *)v19;
  v21 = *(unsigned __int8 *)(*a5 + 64);
  v22 = *(_BYTE *)(*a5 + 64) == 0;
  v23 = *(_DWORD *)(*a5 + 4);
  v91 = (unint64_t)v16;
  v92 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v15 = *a5;
    v19 = *(double **)(*a5 + 136);
  }
  v26 = *(std::__shared_weak_count **)(v15 + 144);
  v89 = v19;
  v90 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v18)
    v29 = v20 == 0;
  else
    v29 = 0;
  v30 = v29;
  v31 = v10 / v9;
  if ((v20 | v18 || v16[3] >= v19[3]) && (v32 = v21 != 0, !v30))
  {
    v17 = v26;
    v76 = (__int128 **)v19;
    v19 = v16;
    v33 = v18;
    v18 = v20;
  }
  else
  {
    v32 = v22;
    if ((v23 - 1) > 4)
      v23 = 3;
    else
      v23 = dword_19CB2F578[v23 - 1];
    v91 = (unint64_t)v19;
    v92 = v26;
    v76 = (__int128 **)v16;
    v33 = v20;
    v89 = v16;
    v90 = v17;
  }
  v34 = *(unsigned __int8 *)(a2 + 13);
  if (v34 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1)
        goto LABEL_35;
      goto LABEL_31;
    }
LABEL_33:
    v42 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v36 = a3[2];
    v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v42 * *(unsigned __int16 *)(a2 + 4));
    v38 = *v37;
    v39 = a3[3];
    v40 = (*v37 >> v36) & v39 | 8;
    goto LABEL_34;
  }
  if (v34 > 1)
  {
    v41 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v36 = a3[2];
    v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v41 * *(unsigned __int16 *)(a2 + 4));
    v38 = *v37;
    v39 = a3[3];
    v40 = v39 & (*v37 >> v36) & 0xFFFFFFC7 | (8 * v23);
    goto LABEL_34;
  }
  if (v23 == 3)
    goto LABEL_33;
  if (v23)
    goto LABEL_35;
LABEL_31:
  v35 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v36 = a3[2];
  v37 = (unsigned int *)(*(_QWORD *)(a2 + 40) + (int)a3[1] + v35 * *(unsigned __int16 *)(a2 + 4));
  v38 = *v37;
  v39 = a3[3];
  v40 = (*v37 >> v36) & v39 & 0xFFFFFFF7;
LABEL_34:
  *v37 = (v40 << v36) | v38 & ~(v39 << v36);
LABEL_35:
  v43 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  if (v32)
    v44 = 4;
  else
    v44 = 0;
  *(_DWORD *)(v43 + (int)a3[1]) = (((*(_DWORD *)(v43 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v44) << a3[2]) | *(_DWORD *)(v43 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v45 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v45 + (int)a3[1]) = (((*(_DWORD *)(v45 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v33) << a3[2]) | *(_DWORD *)(v45 + (int)a3[1]) & ~(a3[3] << a3[2]);
  v46 = v11 + v78;
  v47 = *(_QWORD *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + (int)a3[1]) = (((*(_DWORD *)(v47 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v47 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v33 && v18)
  {
    __p = 0;
    v87 = 0;
    v88 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&__p, *((__int128 **)v19 + 10), *((__int128 **)v19 + 11), (uint64_t)(*((_QWORD *)v19 + 11) - *((_QWORD *)v19 + 10)) >> 4);
    v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, (double **)&__p);
    if (__p)
    {
      v87 = __p;
      operator delete(__p);
    }
    v83 = 0;
    v84 = 0;
    v85 = 0;
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v83, v76[10], v76[11], v76[11] - v76[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, (double **)&v83);
    if (v83)
    {
      v84 = v83;
      operator delete(v83);
    }
    v49 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v50 = *(_QWORD *)(a2 + 40);
    v51 = *(unsigned __int16 *)(a2 + 4);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v48 - v46);
    v53 = (v49 * v51);
LABEL_45:
    *(_DWORD *)(v50 + v53 + a3[4]) = *(_DWORD *)(v50 + v53 + a3[4]) & ~(a3[6] << a3[5]) | (v52 << a3[5]);
    goto LABEL_52;
  }
  if (v33 || !v18)
  {
    if (v18 | v33)
      goto LABEL_52;
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, v75, &v91);
    v71 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, v75, &v89);
    v72 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
    v73 = v71 - v31;
    v50 = *(_QWORD *)(a2 + 40);
    LODWORD(v71) = *(unsigned __int16 *)(a2 + 4);
    v74 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v73);
    v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v74);
    v53 = (v72 * v71);
    goto LABEL_45;
  }
  v54 = v11 + v78;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)&v80, v76[10], v76[11], v76[11] - v76[10]);
  v55 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, (double **)&v80);
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
  v56 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v57 = *(_QWORD *)(a2 + 40);
  v58 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v57 + (v56 * v58) + a3[4]) = *(_DWORD *)(v57
                                                                                 + (v56 * v58)
                                                                                 + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v55 - v54) << a3[5]);
  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, v75, &v91);
LABEL_52:
  v59 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v60 = *(_QWORD *)(a2 + 40);
  v61 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v60 + (v59 * v61)) = *(_DWORD *)(v60 + (v59 * v61)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(_QWORD *)(*v79 + 8));
  v62 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v31);
  v63 = *(_QWORD *)(a2 + 40);
  v64 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v63 + (v62 * v64) + (int)a3[7]) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*v79 + 16));
  if (v17)
  {
    v65 = (unint64_t *)&v17->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v67 = v92;
  if (v92)
  {
    v68 = (unint64_t *)&v92->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  return v31;
}

void sub_19C845A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v23 - 96);
  _Unwind_Resume(a1);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, double **a3)
{
  double *v5;
  double *v6;
  double v8;
  unint64_t v9;
  void *exception;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)&v13 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v6 = a3[1];
  if (*a3 == v6)
  {
    v12 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v12, &v13);
    v5 = *a3;
    v6 = a3[1];
  }
  if ((char *)v6 - (char *)v5 != 16 || *(_QWORD *)v5)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  v8 = v5[1];
  v9 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
  *(float *)(*(_QWORD *)(a1 + 224) + 4 * v9) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v8);
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v9);
}

uint64_t CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultMultiDimensionProfile,0>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  void *v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::bad_alloc *exception;
  std::bad_alloc *v51;
  __int128 v52;

  v6 = (void *)a2[1];
  if (!v6)
  {
    v16 = malloc_type_calloc(0x10uLL, 0x28uLL, 0x1000040FA189D19uLL);
    a2[1] = (uint64_t)v16;
    if (v16)
    {
      *(_QWORD *)&v52 = v16;
      v17 = 0;
      std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)a1, (unint64_t)v16, (uint64_t *)&v52)[5] = 16;
      v18 = 1;
      goto LABEL_22;
    }
    goto LABEL_39;
  }
  v7 = *(_QWORD **)(a1 + 8);
  if (!v7)
    goto LABEL_13;
  v8 = (uint64_t *)(a1 + 8);
  do
  {
    v9 = v7[4];
    v10 = v9 >= (unint64_t)v6;
    if (v9 >= (unint64_t)v6)
      v11 = v7;
    else
      v11 = v7 + 1;
    if (v10)
      v8 = v7;
    v7 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 == (uint64_t *)(a1 + 8) || (unint64_t)v6 < v8[4])
LABEL_13:
    v8 = (uint64_t *)(a1 + 8);
  v12 = v8[5];
  if (*a2 + 1 <= v12)
    goto LABEL_21;
  v13 = (3 * v12 + 3) >> 1;
  v14 = (char *)malloc_type_realloc(v6, 40 * v13, 0x1000040FA189D19uLL);
  if (!v14)
  {
LABEL_39:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v51 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v51, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
  }
  v15 = v14;
  bzero(&v14[40 * v8[5]], 40 * (v13 - v8[5]));
  if (v15 == (char *)a2[1])
  {
    v8[5] = v13;
  }
  else
  {
    a2[1] = (uint64_t)v15;
    std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__remove_node_pointer((uint64_t **)a1, v8);
    operator delete(v8);
    *(_QWORD *)&v52 = a2[1];
    *((_QWORD *)&v52 + 1) = v13;
    std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::pair<void * const,unsigned long>>((uint64_t *)a1, v52, &v52);
  }
LABEL_21:
  v17 = *a2;
  v18 = *a2 + 1;
LABEL_22:
  *a2 = v18;
  v20 = *a3 + 120;
  v19 = *(_QWORD *)v20;
  v21 = a2[1];
  v22 = v21 + 40 * v17;
  *(_DWORD *)v22 = *(_DWORD *)(*a3 + 4);
  *(_QWORD *)(v22 + 8) = *(_QWORD *)(v20 - 112);
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v20 - 104);
  *(_BYTE *)(v22 + 6) = *(_BYTE *)(v20 - 56);
  if (*(_BYTE *)v19)
  {
    v23 = v21 + 40 * v17;
    *(_BYTE *)(v23 + 4) = 1;
    v25 = *(_QWORD *)(v19 + 80);
    v24 = *(_QWORD *)(v19 + 88);
    v26 = CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a1, a2 + 4, (void **)a2 + 5, ((unint64_t)(v24 - v25) >> 3) | 1);
    v27 = (v24 - v25) >> 4;
    *(_QWORD *)(v23 + 24) = v26;
    v28 = a2[5];
    *(_QWORD *)(v28 + 8 * v26) = v27;
    if (v24 != v25)
    {
      if (v27 <= 1)
        v27 = 1;
      v29 = (_QWORD *)(v28 + 8 * v26 + 16);
      v30 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v20 + 80) + 8);
      do
      {
        *(v29 - 1) = *(v30 - 1);
        v31 = *v30;
        v30 += 2;
        *v29 = v31;
        v29 += 2;
        --v27;
      }
      while (v27);
    }
  }
  else
  {
    v32 = CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultMultiDimensionProfile,0>(a1, a2, v20);
    v33 = a2[1] + 40 * v17;
    *(_BYTE *)(v33 + 4) = 0;
    *(_QWORD *)(v33 + 24) = v32 - v17;
  }
  v34 = *a3;
  v37 = *(_BYTE **)(v34 + 136);
  v36 = v34 + 136;
  v35 = v37;
  if (*v37)
  {
    v38 = a2[1] + 40 * v17;
    *(_BYTE *)(v38 + 5) = 1;
    v40 = *((_QWORD *)v35 + 10);
    v39 = *((_QWORD *)v35 + 11);
    v41 = CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a1, a2 + 4, (void **)a2 + 5, ((unint64_t)(v39 - v40) >> 3) | 1);
    v42 = (v39 - v40) >> 4;
    *(_QWORD *)(v38 + 32) = v41;
    v43 = a2[5];
    *(_QWORD *)(v43 + 8 * v41) = v42;
    if (v39 != v40)
    {
      if (v42 <= 1)
        v42 = 1;
      v44 = (_QWORD *)(v43 + 8 * v41 + 16);
      v45 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v36 + 80) + 8);
      do
      {
        *(v44 - 1) = *(v45 - 1);
        v46 = *v45;
        v45 += 2;
        *v44 = v46;
        v44 += 2;
        --v42;
      }
      while (v42);
    }
  }
  else
  {
    v47 = CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultMultiDimensionProfile,0>(a1, a2, v36);
    v48 = a2[1] + 40 * v17;
    *(_BYTE *)(v48 + 5) = 0;
    *(_QWORD *)(v48 + 32) = v47 - v17;
  }
  return v17;
}

uint64_t CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultSingleDimensionProfile,0>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  void *v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::bad_alloc *exception;
  std::bad_alloc *v34;
  __int128 v35;

  v6 = (void *)a2[1];
  if (!v6)
  {
    v16 = malloc_type_calloc(0x10uLL, 0x28uLL, 0x1000040FA189D19uLL);
    a2[1] = (uint64_t)v16;
    if (v16)
    {
      *(_QWORD *)&v35 = v16;
      v17 = 0;
      std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)a1, (unint64_t)v16, (uint64_t *)&v35)[5] = 16;
      v18 = 1;
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  v7 = *(_QWORD **)(a1 + 8);
  if (!v7)
    goto LABEL_13;
  v8 = (uint64_t *)(a1 + 8);
  do
  {
    v9 = v7[4];
    v10 = v9 >= (unint64_t)v6;
    if (v9 >= (unint64_t)v6)
      v11 = v7;
    else
      v11 = v7 + 1;
    if (v10)
      v8 = v7;
    v7 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 == (uint64_t *)(a1 + 8) || (unint64_t)v6 < v8[4])
LABEL_13:
    v8 = (uint64_t *)(a1 + 8);
  v12 = v8[5];
  if (*a2 + 1 <= v12)
    goto LABEL_21;
  v13 = (3 * v12 + 3) >> 1;
  v14 = (char *)malloc_type_realloc(v6, 40 * v13, 0x1000040FA189D19uLL);
  if (!v14)
  {
LABEL_29:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v34 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v34, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
  }
  v15 = v14;
  bzero(&v14[40 * v8[5]], 40 * (v13 - v8[5]));
  if (v15 == (char *)a2[1])
  {
    v8[5] = v13;
  }
  else
  {
    a2[1] = (uint64_t)v15;
    std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__remove_node_pointer((uint64_t **)a1, v8);
    operator delete(v8);
    *(_QWORD *)&v35 = a2[1];
    *((_QWORD *)&v35 + 1) = v13;
    std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::pair<void * const,unsigned long>>((uint64_t *)a1, v35, &v35);
  }
LABEL_21:
  v17 = *a2;
  v18 = *a2 + 1;
LABEL_22:
  *a2 = v18;
  v19 = *a3;
  v20 = a2[1];
  v21 = v20 + 40 * v17;
  *(_DWORD *)v21 = *(_DWORD *)(*a3 + 4);
  *(_QWORD *)(v21 + 8) = *(_QWORD *)(v19 + 8);
  *(_QWORD *)(v21 + 16) = *(_QWORD *)(v19 + 16);
  *(_BYTE *)(v21 + 6) = *(_BYTE *)(v19 + 64);
  v22 = *(_QWORD *)(v19 + 120);
  if (*(_BYTE *)v22)
  {
    v23 = v20 + 40 * v17;
    *(_BYTE *)(v23 + 4) = 1;
    *(_QWORD *)(v23 + 24) = *(_QWORD *)(*(_QWORD *)(v22 + 80) + 8);
  }
  else
  {
    v24 = CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultSingleDimensionProfile,0>(a1, a2, v19 + 120);
    v25 = a2[1] + 40 * v17;
    *(_BYTE *)(v25 + 4) = 0;
    *(_QWORD *)(v25 + 24) = v24 - v17;
    v19 = *a3;
  }
  v28 = *(_BYTE **)(v19 + 136);
  v26 = v19 + 136;
  v27 = v28;
  if (*v28)
  {
    v29 = a2[1] + 40 * v17;
    *(_BYTE *)(v29 + 5) = 1;
    *(_QWORD *)(v29 + 32) = *(_QWORD *)(*((_QWORD *)v27 + 10) + 8);
  }
  else
  {
    v30 = CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultSingleDimensionProfile,0>(a1, a2, v26);
    v31 = a2[1] + 40 * v17;
    *(_BYTE *)(v31 + 5) = 0;
    *(_QWORD *)(v31 + 32) = v30 - v17;
  }
  return v17;
}

void sub_19C846214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C846518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_19C8466DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C84677C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C846808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C846894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8468E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C846954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C846B18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C846BD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C846CF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C846F64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C84711C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8471D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C847504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C847678(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C848280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p)
{
  void *v35;
  void *v36;

  CoreML::Specification::Kernel::~Kernel((CoreML::Specification::Kernel *)&a16);
  CoreML::Specification::SupportVectorClassifier::~SupportVectorClassifier((CoreML::Specification::SupportVectorClassifier *)&a20);

  _Unwind_Resume(a1);
}

uint64_t MLE5PixelBufferAndTensorStrategyKey::componentDataTypeOf()
{
  uint64_t component_dtype;
  NSObject *v1;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  component_dtype = e5rt_tensor_desc_dtype_get_component_dtype();
  if ((_DWORD)component_dtype)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v5 = 1024;
      v6 = component_dtype;
      _os_log_error_impl(&dword_19C486000, v1, OS_LOG_TYPE_ERROR, "Failed to get the component data type for the tensor descriptor dtype. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get the component data type for the tensor descriptor dtype. E5RT: %s (%d)"), e5rt_get_last_error_message(), component_dtype);
  }
  return 0;
}

void sub_19C84855C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5PixelBufferAndTensorStrategyKey::componentPackOf()
{
  uint64_t component_pack;
  NSObject *v1;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  component_pack = e5rt_tensor_desc_dtype_get_component_pack();
  if ((_DWORD)component_pack)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v5 = 1024;
      v6 = component_pack;
      _os_log_error_impl(&dword_19C486000, v1, OS_LOG_TYPE_ERROR, "Failed to get the component pack for the tensor descriptor dtype. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get the component pack for the tensor descriptor dtype. E5RT: %s (%d)"), e5rt_get_last_error_message(), component_pack);
  }
  return 0;
}

void sub_19C848670(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5PixelBufferAndTensorStrategyKey::MLE5PixelBufferAndTensorStrategyKey(uint64_t a1, int a2, uint64_t a3)
{
  char v6;
  char v7;
  uint64_t v9;

  MLE5TensorDataTypeOf(&v9);
  v6 = MLE5PixelBufferAndTensorStrategyKey::componentDataTypeOf();
  v7 = MLE5PixelBufferAndTensorStrategyKey::componentPackOf();
  *(_DWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)a1 = v6 & 7 | (8 * (v7 & 0xF));
  std::unique_ptr<e5rt_tensor_desc_dtype,MLE5ObjectDeleter<e5rt_tensor_desc_dtype>>::reset[abi:ne180100](&v9);
  return a1;
}

void sub_19C848708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<e5rt_tensor_desc_dtype,MLE5ObjectDeleter<e5rt_tensor_desc_dtype>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MLE5PixelBufferAndTensorStrategyKey::MLE5PixelBufferAndTensorStrategyKey(uint64_t a1, int a2)
{
  char v4;
  char v5;
  uint64_t v7;

  MLE5TensorDataTypeOf(&v7);
  v4 = MLE5PixelBufferAndTensorStrategyKey::componentDataTypeOf();
  v5 = MLE5PixelBufferAndTensorStrategyKey::componentPackOf();
  *(_DWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4 & 7 | (8 * (v5 & 0xF));
  std::unique_ptr<e5rt_tensor_desc_dtype,MLE5ObjectDeleter<e5rt_tensor_desc_dtype>>::reset[abi:ne180100](&v7);
  return a1;
}

void sub_19C848794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<e5rt_tensor_desc_dtype,MLE5ObjectDeleter<e5rt_tensor_desc_dtype>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MLE5PixelBufferAndTensorStrategyKey::str(MLE5PixelBufferAndTensorStrategyKey *this, unsigned int *a2)
{
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  id v9;
  const char *v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  char v19;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  v3 = a2[4];
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"pixel_format_type: ", 19);
  v19 = HIBYTE(v3);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v19, 1);
  v19 = BYTE2(v3);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v19, 1);
  v19 = BYTE1(v3);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v19, 1);
  v19 = v3;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v19, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"image_pixel_type: ", 18);
  +[MLImageConstraint stringForImagePixelType:](MLImageConstraint, "stringForImagePixelType:", *((_QWORD *)a2 + 1));
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v10 = (const char *)objc_msgSend(v9, "UTF8String");
  v11 = strlen(v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, v11);

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"component_dtype: ", 17);
  if ((*a2 & 7) >= 5)
    std::ostream::operator<<();
  else
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)off_1E3D65580[*a2 & 7], qword_19CB2F590[*a2 & 7]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"component_pack: ", 16);
  v12 = ((unint64_t)*a2 >> 3) & 0xF;
  if (v12 > 8)
    std::ostream::operator<<();
  else
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)off_1E3D655A8[v12], qword_19CB2F5B8[v12]);
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E0DE4F50];
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v16[0] = v13;
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AD61C4](&v18);
}

void sub_19C8489F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C848F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

void sub_19C8494BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

void sub_19C849A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

void sub_19C849ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19C84A1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  _Unwind_Resume(a1);
}

_QWORD *MLCustomLayerException::MLCustomLayerException(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  void *v4;
  __int128 v5;

  *a1 = off_1E3D4C608;
  a1[1] = 0;
  v3 = (std::string *)(a1 + 2);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v4 = (void *)a1[1];
  }
  else
  {
    v4 = 0;
    v5 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v5;
  }
  a1[1] = 0;

  return a1;
}

void sub_19C84A390(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void MLCustomLayerException::MLCustomLayerException(MLCustomLayerException *this, id *a2)
{
  char *v4;

  *(_QWORD *)this = off_1E3D4C608;
  *((_QWORD *)this + 1) = a2[1];
  v4 = (char *)(*((uint64_t (**)(id *))*a2 + 2))(a2);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 2, v4);
}

void sub_19C84A410(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void MLCustomLayerException::~MLCustomLayerException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E3D4C608;
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[2].__vftable);

  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)off_1E3D4C608;
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[2].__vftable);

  std::exception::~exception(this);
  JUMPOUT(0x1A1AD6260);
}

uint64_t MLCustomLayerException::what(MLCustomLayerException *this)
{
  uint64_t result;

  result = (uint64_t)this + 16;
  if (*((char *)this + 39) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_19C84A940(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C84AB34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C84AE34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C84AF64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C84B11C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C84B240(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C84B33C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C84B444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C84B864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v29 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_19C84BA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6712(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6713(uint64_t a1)
{

}

void sub_19C84BC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C84BE18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C84BFBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C84C05C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C84C210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C84C380(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C84C920()
{
  void *v0;

  __cxa_end_catch();

  JUMPOUT(0x19C84C7B4);
}

void sub_19C84C930(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_19C84CB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C84CE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios15::Ios15Backend::~Ios15Backend(CoreML::NNCompiler::Backend::MIL::Ios15::Ios15Backend *this)
{
  char *v1;

  *(_QWORD *)this = &off_1E3D4CA88;
  v1 = (char *)this + 8;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_1E3D4CA88;
  v1 = (char *)this + 8;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t CoreML::NNCompiler::Backend::MIL::Ios15::Ios15Backend::Compile(CoreML::NNCompiler::Backend::MIL::Ios15::Ios15Backend *this, objc_object *a2)
{
  _QWORD *v4;
  MIL::Opsets::Common::ios15::ios15Opset *v5;
  uint64_t OpsetName;
  unint64_t v7;
  size_t v8;
  const void *v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const IRProgram *v17;
  MIL::Util *v18;
  MIL::Util *v19;
  uint64_t result;
  MIL::Util *v21;
  void *v22[3];
  _QWORD v23[2];
  int v24;
  uint64_t v25;
  _BYTE v26[15];
  char v27;
  __int128 v28;
  unint64_t v29;
  MIL::Util *v30;
  uint64_t v31;
  __int128 __dst;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD v39[2];
  void **v40[2];
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  CoreML::NNCompiler::Backend::MIL::OptimizeProgram((CoreML::NNCompiler::Backend::MIL *)&v31, *((const IRProgram **)this + 1));
  std::string::basic_string[abi:ne180100]<0>(v40, "classify");
  v4 = v42;
  v42[0] = &off_1E3D5B620;
  v42[1] = CoreML::NNCompiler::Backend::MIL::Ios15::Translations::TranslateClassify;
  v43 = v42;
  v5 = (MIL::Opsets::Common::ios15::ios15Opset *)std::unordered_map<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>::unordered_map((uint64_t)&v34, (uint64_t)v40, 1);
  OpsetName = MIL::Opsets::Common::ios15::ios15Opset::GetOpsetName(v5);
  v8 = v7;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = (const void *)OpsetName;
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v33 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v33) = v7;
  p_dst = &__dst;
  if (v7)
LABEL_8:
    memmove(p_dst, v9, v8);
  *((_BYTE *)p_dst + v8) = 0;
  v13 = v34;
  v14 = v35;
  v34 = 0;
  v35 = 0;
  v22[0] = &off_1E3D4CA68;
  v22[1] = v13;
  v22[2] = (void *)v14;
  v23[0] = v36;
  v23[1] = v37;
  v24 = v38;
  if (v37)
  {
    v15 = *(_QWORD *)(v36 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14)
        v15 %= v14;
    }
    else
    {
      v15 &= v14 - 1;
    }
    *((_QWORD *)v13 + v15) = v23;
    v36 = 0;
    v37 = 0;
  }
  v25 = 0x354C4D65726F43;
  *(_QWORD *)v26 = v39[0];
  *(_QWORD *)&v26[7] = *(_QWORD *)((char *)v39 + 7);
  v27 = 7;
  v28 = __dst;
  v29 = v33;
  __dst = 0uLL;
  v33 = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)&v34);
  if (v43 == v42)
  {
    v16 = 4;
  }
  else
  {
    if (!v43)
      goto LABEL_20;
    v16 = 5;
    v4 = v43;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v16))(v4);
LABEL_20:
  if (v41 < 0)
    operator delete(v40[0]);
  v22[0] = &off_1E3D4CAB0;
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::Translate(&v30, (const IRProgram *)v22, v31);
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(v22);
  CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetAttributesForFunctions((uint64_t)v30, *((_QWORD *)this + 3));
  MIL::Util::FindBlobFilePaths(v30, v17);
  v18 = v30;
  v30 = 0;
  v21 = v18;
  CoreML::NNCompiler::Backend::MIL::WriteProgram((uint64_t *)&v21, *(unsigned int *)(*((_QWORD *)this + 3) + 120), a2, *((_QWORD *)this + 3) + 56);
  if (v21)
    (*(void (**)(MIL::Util *))(*(_QWORD *)v21 + 8))(v21);
  CoreML::NNCompiler::Backend::MetadataUtils::WriteMetadataIos15(*((_QWORD *)this + 3), (uint64_t)a2);
  CoreML::NNCompiler::Backend::MIL::CopyWeights((uint64_t *)(*((_QWORD *)this + 3) + 56), (uint64_t **)v22, (uint64_t)a2);
  v40[0] = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
  v19 = v30;
  v30 = 0;
  if (v19)
    (*(void (**)(MIL::Util *))(*(_QWORD *)v19 + 8))(v19);
  result = v31;
  v31 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19C84D248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  *(_QWORD *)(v24 - 128) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 128));
  v26 = a23;
  a23 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = a24;
  a24 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  _Unwind_Resume(a1);
}

void sub_19C84D374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2,std::allocator<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2>,void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::~__func()
{
  JUMPOUT(0x1A1AD6260);
}

__n128 std::__function::__func<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2,std::allocator<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2>,void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E3D5B8E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2,std::allocator<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2>,void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3D5B8E0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2,std::allocator<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2>,void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::operator()(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  int v16;
  uint64_t **v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  double v23;
  float v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  float v31;
  uint64_t v32;
  uint64_t v33;

  v3 = result;
  v4 = *a2;
  if (*(_BYTE *)*a2)
  {
    v5 = result[2];
    ++*(_QWORD *)result[1];
    v6 = *(_QWORD *)(v4 + 80);
    v7 = *(_QWORD *)(v4 + 88);
    v8 = (v7 - v6) >> 4;
    v10 = (uint64_t **)(v5 + 64);
    v9 = *(uint64_t **)(v5 + 64);
    if (v9)
    {
      while (1)
      {
        while (1)
        {
          v11 = (uint64_t **)v9;
          v12 = v9[4];
          if (v8 >= v12)
            break;
          v9 = *v11;
          v10 = v11;
          if (!*v11)
            goto LABEL_18;
        }
        if (v12 >= v8)
          break;
        v9 = v11[1];
        if (!v9)
        {
          v10 = v11 + 1;
          goto LABEL_18;
        }
      }
    }
    else
    {
      v11 = (uint64_t **)(v5 + 64);
LABEL_18:
      v19 = (uint64_t *)v11;
      v11 = (uint64_t **)operator new(0x30uLL);
      v11[4] = (uint64_t *)v8;
      v11[5] = 0;
      *v11 = 0;
      v11[1] = 0;
      v11[2] = v19;
      *v10 = (uint64_t *)v11;
      v20 = **(_QWORD **)(v5 + 56);
      v21 = (uint64_t *)v11;
      if (v20)
      {
        *(_QWORD *)(v5 + 56) = v20;
        v21 = *v10;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 64), v21);
      ++*(_QWORD *)(v5 + 72);
      v6 = *(_QWORD *)(*a2 + 80);
      v7 = *(_QWORD *)(*a2 + 88);
    }
    v11[5] = (uint64_t *)((char *)v11[5] + 1);
    if (v6 != v7)
    {
      v22 = v3[3];
      do
      {
        v23 = *(double *)(v6 + 8);
        v24 = v23;
        if (v23 != v24)
          *(_BYTE *)(*(_QWORD *)v22 + 122) = 0;
        v6 += 16;
      }
      while (v6 != v7);
    }
  }
  else
  {
    v13 = result[2];
    v15 = (uint64_t **)(v13 + 104);
    v14 = *(uint64_t **)(v13 + 104);
    if (v14)
    {
      v16 = *(_DWORD *)(v4 + 4);
      while (1)
      {
        while (1)
        {
          v17 = (uint64_t **)v14;
          v18 = *((_DWORD *)v14 + 8);
          if (v16 >= v18)
            break;
          v14 = *v17;
          v15 = v17;
          if (!*v17)
            goto LABEL_28;
        }
        if (v18 >= v16)
          break;
        v14 = v17[1];
        if (!v14)
        {
          v15 = v17 + 1;
          goto LABEL_28;
        }
      }
    }
    else
    {
      v17 = (uint64_t **)(v13 + 104);
LABEL_28:
      v25 = (uint64_t *)v17;
      v17 = (uint64_t **)operator new(0x30uLL);
      *((_DWORD *)v17 + 8) = *(_DWORD *)(v4 + 4);
      v17[5] = 0;
      *v17 = 0;
      v17[1] = 0;
      v17[2] = v25;
      *v15 = (uint64_t *)v17;
      v26 = **(_QWORD **)(v13 + 96);
      v27 = (uint64_t *)v17;
      if (v26)
      {
        *(_QWORD *)(v13 + 96) = v26;
        v27 = *v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v13 + 104), v27);
      ++*(_QWORD *)(v13 + 112);
      v4 = *a2;
      v13 = v3[2];
    }
    v17[5] = (uint64_t *)((char *)v17[5] + 1);
    ++*(_QWORD *)v3[4];
    if (*(_BYTE *)(v4 + 64))
      *(_BYTE *)(v13 + 120) = 0;
    else
      *(_BYTE *)(v13 + 121) = 0;
    v28 = *(_QWORD *)(v4 + 8);
    if (*(_QWORD *)v13 <= (unint64_t)(v28 + 1))
      v29 = v28 + 1;
    else
      v29 = *(_QWORD *)v13;
    *(_QWORD *)v13 = v29;
    v30 = *(double *)(v4 + 16);
    v31 = v30;
    if (v30 != v31)
      *(_BYTE *)(*(_QWORD *)v3[3] + 122) = 0;
    v32 = *(_QWORD *)(v3[6] + 24);
    if (!v32
      || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 48))(v32, v4 + 120),
          (v33 = *(_QWORD *)(v3[6] + 24)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 48))(v33, *a2 + 136);
  }
  return result;
}

