uint64_t std::__function::__func<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2,std::allocator<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2>,void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6CoreML13TreeEnsembles8Internal16gatherPropertiesERKNSt3__110shared_ptrINS0_13_TreeEnsembleEEEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2,std::allocator<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2>,void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::target_type()
{
}

void sub_19C84D7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v12 = v10;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C84D8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C84E2E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C84E354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C84E4B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C84E54C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C84E5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C84E614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C84E69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C84E70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C84E8D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C84EAAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C84EC64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C84ECDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C84ED54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19C84EE28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C84EEA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C84F084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;

  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);

  _Unwind_Resume(a1);
}

void sub_19C84F17C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C84F200(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C84F5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  void *v34;

  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_19C84F944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C84FBDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C850588()
{
  void *v0;
  void *v1;
  uint64_t v2;

  __cxa_end_catch();
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v2 - 240);

  JUMPOUT(0x19C850614);
}

void sub_19C850594(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_19C8505A8()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v3 - 240);
  JUMPOUT(0x19C850614);
}

void sub_19C850608()
{
  JUMPOUT(0x19C8505FCLL);
}

void Archiver::_MemoryIStream::~_MemoryIStream(id *this)
{

  std::streambuf::~streambuf();
  std::istream::~istream();
}

{
  uint64_t v1;

  Archiver::_MemoryIStream::~_MemoryIStream(this);
  MEMORY[0x1A1AD61C4](v1 + 96);
}

{
  uint64_t v1;

  Archiver::_MemoryIStream::~_MemoryIStream(this);
  MEMORY[0x1A1AD61C4](v1 + 96);
  JUMPOUT(0x1A1AD6260);
}

uint64_t _MLModelOutputArchiver::_MLModelOutputArchiver(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::map<std::string,OArchive>::map[abi:ne180100](a1 + 24, (_QWORD *)(a2 + 24));
  return a1;
}

void sub_19C8506EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void `virtual thunk to'Archiver::_MemoryIStream::~_MemoryIStream(Archiver::_MemoryIStream *this)
{
  Archiver::_MemoryIStream::~_MemoryIStream((id *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1A1AD61C4);
}

{
  Archiver::_MemoryIStream::~_MemoryIStream((id *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t __Block_byref_object_copy__7237(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7238(uint64_t a1)
{

}

void CoreML::NNCompiler::Backend::MIL::Ios18::Ios18Backend::~Ios18Backend(CoreML::NNCompiler::Backend::MIL::Ios18::Ios18Backend *this)
{
  char *v1;

  *(_QWORD *)this = &off_1E3D4CB60;
  v1 = (char *)this + 8;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_1E3D4CB60;
  v1 = (char *)this + 8;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t CoreML::NNCompiler::Backend::MIL::Ios18::Ios18Backend::Compile(CoreML::NNCompiler::Backend::MIL::Ios18::Ios18Backend *this, objc_object *a2)
{
  _QWORD *v4;
  MIL::Opsets::Common::ios18::ios18Opset *v5;
  uint64_t OpsetName;
  unint64_t v7;
  size_t v8;
  const void *v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const IRProgram *v17;
  MIL::Util *v18;
  MIL::Util *v19;
  uint64_t result;
  MIL::Util *v21;
  void *v22[3];
  _QWORD v23[2];
  int v24;
  uint64_t v25;
  _BYTE v26[15];
  char v27;
  __int128 v28;
  unint64_t v29;
  MIL::Util *v30;
  uint64_t v31;
  __int128 __dst;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD v39[2];
  void **v40[2];
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  CoreML::NNCompiler::Backend::MIL::OptimizeProgram((CoreML::NNCompiler::Backend::MIL *)&v31, *((const IRProgram **)this + 1));
  std::string::basic_string[abi:ne180100]<0>(v40, "classify");
  v4 = v42;
  v42[0] = &off_1E3D5B620;
  v42[1] = CoreML::NNCompiler::Backend::MIL::Ios15::Translations::TranslateClassify;
  v43 = v42;
  v5 = (MIL::Opsets::Common::ios18::ios18Opset *)std::unordered_map<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>::unordered_map((uint64_t)&v34, (uint64_t)v40, 1);
  OpsetName = MIL::Opsets::Common::ios18::ios18Opset::GetOpsetName(v5);
  v8 = v7;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = (const void *)OpsetName;
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v33 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v33) = v7;
  p_dst = &__dst;
  if (v7)
LABEL_8:
    memmove(p_dst, v9, v8);
  *((_BYTE *)p_dst + v8) = 0;
  v13 = v34;
  v14 = v35;
  v34 = 0;
  v35 = 0;
  v22[0] = &off_1E3D4CA68;
  v22[1] = v13;
  v22[2] = (void *)v14;
  v23[0] = v36;
  v23[1] = v37;
  v24 = v38;
  if (v37)
  {
    v15 = *(_QWORD *)(v36 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14)
        v15 %= v14;
    }
    else
    {
      v15 &= v14 - 1;
    }
    *((_QWORD *)v13 + v15) = v23;
    v36 = 0;
    v37 = 0;
  }
  v25 = 0x384C4D65726F43;
  *(_QWORD *)v26 = v39[0];
  *(_QWORD *)&v26[7] = *(_QWORD *)((char *)v39 + 7);
  v27 = 7;
  v28 = __dst;
  v29 = v33;
  __dst = 0uLL;
  v33 = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)&v34);
  if (v43 == v42)
  {
    v16 = 4;
  }
  else
  {
    if (!v43)
      goto LABEL_20;
    v16 = 5;
    v4 = v43;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v16))(v4);
LABEL_20:
  if (v41 < 0)
    operator delete(v40[0]);
  v22[0] = &off_1E3D4CB88;
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::Translate(&v30, (const IRProgram *)v22, v31);
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(v22);
  CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetAttributesForFunctions((uint64_t)v30, *((_QWORD *)this + 3));
  MIL::Util::FindBlobFilePaths(v30, v17);
  v18 = v30;
  v30 = 0;
  v21 = v18;
  CoreML::NNCompiler::Backend::MIL::WriteProgram((uint64_t *)&v21, *(unsigned int *)(*((_QWORD *)this + 3) + 120), a2, *((_QWORD *)this + 3) + 56);
  if (v21)
    (*(void (**)(MIL::Util *))(*(_QWORD *)v21 + 8))(v21);
  CoreML::NNCompiler::Backend::MetadataUtils::WriteMetadataIos15(*((_QWORD *)this + 3), (uint64_t)a2);
  CoreML::NNCompiler::Backend::MIL::CopyWeights((uint64_t *)(*((_QWORD *)this + 3) + 56), (uint64_t **)v22, (uint64_t)a2);
  v40[0] = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
  v19 = v30;
  v30 = 0;
  if (v19)
    (*(void (**)(MIL::Util *))(*(_QWORD *)v19 + 8))(v19);
  result = v31;
  v31 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19C850B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  *(_QWORD *)(v24 - 128) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 128));
  v26 = a23;
  a23 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = a24;
  a24 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  _Unwind_Resume(a1);
}

void sub_19C850D90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C850EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C85127C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  void *v24;
  void *v25;
  void *v26;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C851430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void deallocator(int a1, void *a2)
{
  free(a2);
}

void sub_19C852B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v26;

  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  v26 = *(void **)(v24 - 72);
  if (v26)
  {
    *(_QWORD *)(v24 - 64) = v26;
    operator delete(v26);
  }

  _Unwind_Resume(a1);
}

void sub_19C852E04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C853514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50)
{
  void *v50;
  void *v51;
  void *v52;
  void *v53;

  if (__p)
    operator delete(__p);
  if (a37)
    operator delete(a37);
  if (a40)
    operator delete(a40);

  _Unwind_Resume(a1);
}

void sub_19C853A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_19C853CA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C853DD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C853F04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::executionScheduleForOperation(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string::size_type v11;
  int v12;
  __int128 v13;
  NSObject *v14;
  int v15;
  __int128 v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  int v22;
  MLModelStructurePath *v23;
  MLModelStructurePath *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  _BOOL4 v30;
  void *v31;
  void *v32;
  char v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  __int128 v44;
  int v45;
  __int128 v46;
  int v47;
  MLModelStructurePath *v48;
  MLModelStructurePath *v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  MLModelStructurePath *v55;
  MLModelStructurePath *v56;
  std::string::size_type i;
  id v58;
  char v59;
  MLModelStructurePath *v60;
  void *v61;
  id v63;
  id v64;
  id v65;
  id v66;
  std::string v67;
  int v68;
  std::string v69;
  std::string v70;
  _DWORD v71[2];
  std::string v72;
  _DWORD v73[2];
  std::string *v74;
  std::string v75;
  std::string v76;
  std::string v77;
  int v78;
  std::string v79;
  int v80;
  _QWORD v81[4];

  v81[1] = *MEMORY[0x1E0C80C00];
  v66 = a1;
  v64 = a2;
  v65 = a4;
  if (!objc_msgSend(v64, "hasRangeShapeInputs"))
    goto LABEL_41;
  objc_msgSend(v66, "path");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "cppPath");
    size = v76.__r_.__value_.__l.__size_;
    v9 = v76.__r_.__value_.__r.__words[0];
  }
  else
  {
    v9 = 0;
    size = 0;
    memset(&v76, 0, sizeof(v76));
  }
  while (size != v9)
  {
    v11 = size - 32;
    v12 = *(_DWORD *)(size - 8);
    size -= 32;
    if (v12 == 2)
    {
      if (*(char *)(v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
      }
      else
      {
        v13 = *(_OWORD *)v11;
        v79.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v13;
      }
      v15 = 1;
      LOBYTE(v80) = 1;
      goto LABEL_15;
    }
  }
  v79.__r_.__value_.__s.__data_[0] = 0;
  LOBYTE(v80) = 0;
  +[MLLogging coreChannel](MLLogging, "coreChannel");
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v77.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_error_impl(&dword_19C486000, v14, OS_LOG_TYPE_ERROR, "Encountered an unexpected internal state, missing function component in operation path = %@.", (uint8_t *)&v77, 0xCu);
  }

  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Encountered an unexpected internal state, missing function component in operation path = %@."), v8);
  v15 = v80;
  if (!(_BYTE)v80)
    std::__throw_bad_optional_access[abi:ne180100]();
LABEL_15:
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v75, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
    v15 = v80;
  }
  else
  {
    v75 = v79;
  }
  v16 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
  LODWORD(v74) = v75.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)&v74 + 3) = *(_DWORD *)((char *)&v75.__r_.__value_.__r.__words[2] + 3);
  v17 = SHIBYTE(v75.__r_.__value_.__r.__words[2]);
  memset(&v75, 0, sizeof(v75));
  if (!v15)
    std::__throw_bad_optional_access[abi:ne180100]();
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  else
    v18 = v79.__r_.__value_.__l.__size_;
  v19 = &v72;
  std::string::basic_string[abi:ne180100]((uint64_t)&v72, v18 + 17);
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v19 = (std::string *)v72.__r_.__value_.__r.__words[0];
  if (v18)
  {
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v79;
    else
      v20 = (std::string *)v79.__r_.__value_.__r.__words[0];
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, "_default_function");
  v21 = *(_OWORD *)&v72.__r_.__value_.__l.__data_;
  v73[0] = v72.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v73 + 3) = *(_DWORD *)((char *)&v72.__r_.__value_.__r.__words[2] + 3);
  v22 = SHIBYTE(v72.__r_.__value_.__r.__words[2]);
  memset(&v72, 0, sizeof(v72));
  if (v17 < 0)
  {
    std::string::__init_copy_ctor_external(&v77, (const std::string::value_type *)v16, *((std::string::size_type *)&v16 + 1));
  }
  else
  {
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v16;
    LODWORD(v77.__r_.__value_.__r.__words[2]) = (_DWORD)v74;
    *(_DWORD *)((char *)&v77.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v74 + 3);
    *((_BYTE *)&v77.__r_.__value_.__s + 23) = v17;
  }
  v78 = 2;
  if (v22 < 0)
  {
    std::string::__init_copy_ctor_external(&v67, (const std::string::value_type *)v21, *((std::string::size_type *)&v21 + 1));
  }
  else
  {
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v21;
    LODWORD(v67.__r_.__value_.__r.__words[2]) = v73[0];
    *(_DWORD *)((char *)&v67.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v73 + 3);
    *((_BYTE *)&v67.__r_.__value_.__s + 23) = v22;
  }
  v68 = 2;
  CoreML::ModelStructure::Path::replace((uint64_t)v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_, (uint64_t)&v77, (uint64_t)&v67);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v67);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v77);
  v23 = [MLModelStructurePath alloc];
  v70 = v76;
  memset(&v76, 0, sizeof(v76));
  v24 = -[MLModelStructurePath initWithCppPath:](v23, "initWithCppPath:", &v70);
  v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  if (v22 < 0)
  {
    operator delete((void *)v21);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_37;
LABEL_51:
    operator delete((void *)v16);
    goto LABEL_37;
  }
  if (v17 < 0)
    goto LABEL_51;
LABEL_37:
  if ((_BYTE)v80 && SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);

  objc_msgSend(v65, "objectForKeyedSubscript:", v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v25)
  {
LABEL_41:
    objc_msgSend(v66, "path");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v65, "objectForKeyedSubscript:", v26);
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    if (v25)
      goto LABEL_42;
    v40 = v66;
    v41 = v40;
    if (a3)
    {
      if (a3 != 1)
      {

        goto LABEL_81;
      }
      objc_msgSend(v40, "milId");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "stringValue");
      v43 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend(v40, "milTextLocation");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
    }

    if (v43)
    {
      objc_msgSend(v41, "path");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      v54 = v53;
      if (v53)
        objc_msgSend(v53, "cppPath");
      else
        memset(&v67, 0, sizeof(v67));

      for (i = v67.__r_.__value_.__l.__size_;
            i != v67.__r_.__value_.__r.__words[0] && (*(_DWORD *)(i - 8) - 1) <= 3;
            v67.__r_.__value_.__l.__size_ = i)
      {
        i = std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor(i - 32);
      }
      v80 = 5;
      CoreML::ModelStructure::Path::appendComponent((uint64_t)&v67, (uint64_t)&v79);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v79);
      v58 = objc_retainAutorelease(v43);
      std::string::basic_string[abi:ne180100]<0>(&v76, (char *)objc_msgSend(v58, "UTF8String"));
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
      *(std::string::size_type *)((char *)&v77.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 7);
      v59 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
      memset(&v76, 0, sizeof(v76));
      *((_BYTE *)&v77.__r_.__value_.__s + 23) = v59;
      v78 = 6;
      CoreML::ModelStructure::Path::appendComponent((uint64_t)&v67, (uint64_t)&v77);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v77);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      v60 = [MLModelStructurePath alloc];
      v75 = v67;
      memset(&v67, 0, sizeof(v67));
      v56 = -[MLModelStructurePath initWithCppPath:](v60, "initWithCppPath:", &v75);
      v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
      std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
      v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
      std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);

      goto LABEL_90;
    }
LABEL_81:
    v55 = [MLModelStructurePath alloc];
    v78 = 0;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v79, (uint64_t)&v77);
    memset(&v67, 0, sizeof(v67));
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    v76.__r_.__value_.__s.__data_[8] = 0;
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    v67.__r_.__value_.__l.__size_ = v67.__r_.__value_.__r.__words[0];
    v67.__r_.__value_.__r.__words[2] = v67.__r_.__value_.__r.__words[0] + 32;
    v67.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> const*,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> const*,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>*>((uint64_t)&v79, (uint64_t)v81, (uint64_t)v67.__r_.__value_.__l.__data_);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v79);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v77);
    v56 = -[MLModelStructurePath initWithCppPath:](v55, "initWithCppPath:", &v67);
    v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
LABEL_90:

    objc_msgSend(v65, "objectForKeyedSubscript:", v56);
    v61 = (void *)objc_claimAutoreleasedReturnValue();

    v34 = v61;
    v28 = v34;
    goto LABEL_91;
  }
LABEL_42:
  v27 = v66;
  v28 = v25;
  v63 = v65;
  objc_msgSend(v27, "outputs");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "count") == 0;

  if (v30)
  {
    v34 = v28;
  }
  else
  {
    objc_msgSend(v27, "operatorName");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "layerTypeName");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend(v31, "isEqualToString:", v32);

    v34 = v28;
    if ((v33 & 1) == 0)
    {
      objc_msgSend(v27, "outputs");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "objectAtIndexedSubscript:", 0);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "name");
      v37 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(&v67, (char *)objc_msgSend(v37, "UTF8String"));

      objc_msgSend(v27, "path");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = v38;
      if (v38)
        objc_msgSend(v38, "cppPath");
      else
        memset(&v75, 0, sizeof(v75));

      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v72, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
      else
        v72 = v67;
      v44 = *(_OWORD *)&v72.__r_.__value_.__l.__data_;
      v73[0] = v72.__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v73 + 3) = *(_DWORD *)((char *)&v72.__r_.__value_.__r.__words[2] + 3);
      v45 = SHIBYTE(v72.__r_.__value_.__r.__words[2]);
      memset(&v72, 0, sizeof(v72));
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v70, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
      else
        v70 = v76;
      v46 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
      v71[0] = v70.__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v71 + 3) = *(_DWORD *)((char *)&v70.__r_.__value_.__r.__words[2] + 3);
      v47 = SHIBYTE(v70.__r_.__value_.__r.__words[2]);
      memset(&v70, 0, sizeof(v70));
      if (v45 < 0)
      {
        std::string::__init_copy_ctor_external(&v79, (const std::string::value_type *)v44, *((std::string::size_type *)&v44 + 1));
      }
      else
      {
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v44;
        LODWORD(v79.__r_.__value_.__r.__words[2]) = v73[0];
        *(_DWORD *)((char *)&v79.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v73 + 3);
        *((_BYTE *)&v79.__r_.__value_.__s + 23) = v45;
      }
      v80 = 4;
      if (v47 < 0)
      {
        std::string::__init_copy_ctor_external(&v77, (const std::string::value_type *)v46, *((std::string::size_type *)&v46 + 1));
      }
      else
      {
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v46;
        LODWORD(v77.__r_.__value_.__r.__words[2]) = v71[0];
        *(_DWORD *)((char *)&v77.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v71 + 3);
        *((_BYTE *)&v77.__r_.__value_.__s + 23) = v47;
      }
      v78 = 4;
      CoreML::ModelStructure::Path::replace((uint64_t)v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_, (uint64_t)&v79, (uint64_t)&v77);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v77);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v79);
      v48 = [MLModelStructurePath alloc];
      v69 = v75;
      memset(&v75, 0, sizeof(v75));
      v49 = -[MLModelStructurePath initWithCppPath:](v48, "initWithCppPath:", &v69);
      v74 = &v69;
      std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      objc_msgSend(v63, "objectForKeyedSubscript:", v49);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = v50;
      if (v50)
      {
        v52 = v50;

        v34 = v52;
      }

      if (v47 < 0)
      {
        operator delete((void *)v46);
        if ((v45 & 0x80000000) == 0)
          goto LABEL_69;
      }
      else if ((v45 & 0x80000000) == 0)
      {
LABEL_69:
        v74 = &v75;
        std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v76.__r_.__value_.__l.__data_);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
        goto LABEL_73;
      }
      operator delete((void *)v44);
      goto LABEL_69;
    }
  }
LABEL_73:

LABEL_91:
  return v34;
}

void sub_19C85497C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;
  void *v37;
  void *v38;

  _Unwind_Resume(a1);
}

MLComputePlanDeviceUsage *`anonymous namespace'::toComputeDeviceUsage(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  MLComputePlanDeviceUsage *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  MLComputePlanDeviceUsageSupportInfo *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  int v25;
  NSObject *v26;
  char v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  MLComputePlanDeviceUsageSupportInfo *v39;
  uint64_t v40;
  MLComputePlanDeviceUsageSupportInfo *v41;
  MLComputePlanDeviceUsage *v43;
  id v44;
  void *v45;
  id v46;
  id obj;
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];
  uint8_t v58[128];
  _BYTE buf[24];
  void *v60;
  id v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v44 = a2;
  v48 = a3;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v5, "supportedComputeUnits"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "objectForKeyedSubscript:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v45 = v7;
  if (!objc_msgSend(v7, "count"))
    goto LABEL_6;
  v8 = objc_msgSend(v5, "preferredComputeUnit");
  if (v8 == 1)
  {
    objc_msgSend(v48, "objectForKeyedSubscript:", &unk_1E3DA2080);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "firstObject");
    v10 = objc_claimAutoreleasedReturnValue();
    goto LABEL_12;
  }
  if (v8 == 2)
  {
    objc_msgSend(v44, "preferredMetalDevice");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v12)
      v12 = MTLCreateSystemDefaultDevice();
    objc_msgSend(v48, "objectForKeyedSubscript:", &unk_1E3DA2098);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    v14 = v12;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZN12_GLOBAL__N_125preferredGPUComputeDeviceEP7NSArrayIPU34objcproto23MLComputeDeviceProtocol11objc_objectEPU19objcproto9MTLDevice11objc_object_block_invoke;
    v60 = &unk_1E3D656A8;
    v9 = v14;
    v61 = v9;
    v15 = objc_msgSend(v13, "indexOfObjectPassingTest:", buf);
    if (v15 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v11 = 0;
    }
    else
    {
      objc_msgSend(v13, "objectAtIndexedSubscript:", v15);
      v11 = (MLComputePlanDeviceUsage *)objc_claimAutoreleasedReturnValue();
    }

    goto LABEL_15;
  }
  if (v8 != 4)
  {
LABEL_6:
    v11 = 0;
    goto LABEL_44;
  }
  objc_msgSend(v48, "objectForKeyedSubscript:", &unk_1E3DA20B0);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "firstObject");
  v10 = objc_claimAutoreleasedReturnValue();
LABEL_12:
  v11 = (MLComputePlanDeviceUsage *)v10;
LABEL_15:

  if (v11)
  {
    v43 = v11;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    obj = v45;
    v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v58, 16);
    if (v17)
    {
      v18 = *(_QWORD *)v54;
      do
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v54 != v18)
            objc_enumerationMutation(obj);
          v20 = -[MLComputePlanDeviceUsageSupportInfo initWithComputeDevice:supportState:]([MLComputePlanDeviceUsageSupportInfo alloc], "initWithComputeDevice:supportState:", *(_QWORD *)(*((_QWORD *)&v53 + 1) + 8 * i), 0);
          objc_msgSend(v16, "addObject:", v20);

        }
        v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v58, 16);
      }
      while (v17);
    }

    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    objc_msgSend(v5, "supportMessagesPerComputeUnit");
    v46 = (id)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v49, v57, 16);
    if (v21)
    {
      v22 = *(_QWORD *)v50;
      do
      {
        for (j = 0; j != v21; ++j)
        {
          if (*(_QWORD *)v50 != v22)
            objc_enumerationMutation(v46);
          v24 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * j);
          v25 = objc_msgSend(v5, "supportedComputeUnits");
          if ((v25 & objc_msgSend(v24, "unsignedIntValue")) != 0)
          {
            +[MLLogging coreChannel](MLLogging, "coreChannel");
            v26 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              v27 = objc_msgSend(v24, "unsignedIntValue");
              objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 3);
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              v29 = v28;
              if ((v27 & 1) != 0)
                objc_msgSend(v28, "addObject:", CFSTR("CPU"));
              if ((v27 & 2) != 0)
                objc_msgSend(v29, "addObject:", CFSTR("GPU"));
              if ((v27 & 4) != 0)
                objc_msgSend(v29, "addObject:", CFSTR("NeuralEngine"));
              objc_msgSend(v29, "componentsJoinedByString:", CFSTR(","));
              v30 = (void *)objc_claimAutoreleasedReturnValue();

              v31 = v30;
              objc_msgSend(v5, "layerName");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412546;
              *(_QWORD *)&buf[4] = v31;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v32;
              _os_log_impl(&dword_19C486000, v26, OS_LOG_TYPE_INFO, "%@ is a supported compute unit for layer named %@ and therefore the validator shouldn't have reported a validation message. Core ML framework will report it anyway, but it may not be accurate.", buf, 0x16u);

            }
          }
          objc_msgSend(v48, "objectForKeyedSubscript:", v24);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "firstObject");
          v34 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v5, "supportMessagesPerComputeUnit");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "objectForKeyedSubscript:", v24);
          v36 = (void *)objc_claimAutoreleasedReturnValue();

          +[MLComputePlanDeviceUsageSupportStateMatcher sharedInstance](MLComputePlanDeviceUsageSupportStateMatcher, "sharedInstance");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v38 = objc_msgSend(v37, "matchingSupportStateForValidationMessage:", v36);

          v39 = [MLComputePlanDeviceUsageSupportInfo alloc];
          if (v38 == -1)
            v40 = 1;
          else
            v40 = v38;
          v41 = -[MLComputePlanDeviceUsageSupportInfo initWithComputeDevice:supportState:](v39, "initWithComputeDevice:supportState:", v34, v40);
          objc_msgSend(v16, "addObject:", v41);

        }
        v21 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v49, v57, 16);
      }
      while (v21);
    }

    v11 = -[MLComputePlanDeviceUsage initWithSupportedComputeDevices:preferredComputeDevice:deviceSupportInfoArray:]([MLComputePlanDeviceUsage alloc], "initWithSupportedComputeDevices:preferredComputeDevice:deviceSupportInfoArray:", obj, v43, v16);
  }
LABEL_44:

  return v11;
}

void sub_19C855214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  _Unwind_Resume(a1);
}

BOOL ___ZN12_GLOBAL__N_125preferredGPUComputeDeviceEP7NSArrayIPU34objcproto23MLComputeDeviceProtocol11objc_objectEPU19objcproto9MTLDevice11objc_object_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  _BOOL8 v5;

  objc_msgSend(a2, "metalDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "registryID");
  v5 = v4 == objc_msgSend(*(id *)(a1 + 32), "registryID");

  return v5;
}

void sub_19C8553CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::computeDevicesOfClass(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _QWORD v7[5];

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZN12_GLOBAL__N_121computeDevicesOfClassEP10objc_classP7NSArrayIPU34objcproto23MLComputeDeviceProtocol11objc_objectE_block_invoke;
  v7[3] = &__block_descriptor_40_e42_B32__0___MLComputeDeviceProtocol__8Q16_B24lu32l8;
  v7[4] = a1;
  objc_msgSend(v3, "indexesOfObjectsPassingTest:", v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectsAtIndexes:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_19C855470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZN12_GLOBAL__N_121computeDevicesOfClassEP10objc_classP7NSArrayIPU34objcproto23MLComputeDeviceProtocol11objc_objectE_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

void sub_19C8557D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_19C855918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C855A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_19C855AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::modelStructureContainsNeuralNetworkOrMLProgram(_anonymous_namespace_ *this, MLModelStructure *a2)
{
  _anonymous_namespace_ *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v7;
  void *v8;
  MLModelStructure *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = this;
  -[_anonymous_namespace_ neuralNetwork](v2, "neuralNetwork");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {

LABEL_4:
    v5 = 1;
    goto LABEL_5;
  }
  -[_anonymous_namespace_ program](v2, "program");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
    goto LABEL_4;
  -[_anonymous_namespace_ pipeline](v2, "pipeline");
  v5 = objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    -[_anonymous_namespace_ pipeline](v2, "pipeline", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "subModels");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v14;
      while (2)
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v14 != v11)
            objc_enumerationMutation(v8);
          {

            goto LABEL_4;
          }
          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (v10)
          continue;
        break;
      }
    }

    v5 = 0;
  }
LABEL_5:

  return v5;
}

void sub_19C855C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(void **this)
{
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(this);
  JUMPOUT(0x1A1AD6260);
}

{
  *this = &off_1E3D4CA68;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)(this + 1));
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::Translate(MIL::IRProgramValidator **this, const IRProgram *a2, uint64_t a3)
{
  unsigned __int8 *v4;
  uint64_t v5;
  MIL::IRObject *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::string::size_type v23;
  std::string::size_type size;
  std::string::size_type *p_size;
  std::string::size_type v26;
  std::string::size_type *v27;
  std::string::size_type *v28;
  std::string::size_type *v29;
  std::string::size_type *v30;
  _QWORD *v31;
  uint64_t *v32;
  std::string *v33;
  __int128 v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  std::string::size_type v38;
  MIL::IROpset *Opset;
  MIL::IRObject *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _OWORD *v44;
  std::string::size_type v45;
  std::string::size_type v46;
  _QWORD *LocationPtr;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint8x8_t v61;
  unint64_t v62;
  void **v63;
  char *v64;
  unint64_t v65;
  std::string *v66;
  __int128 v67;
  float v68;
  _BOOL8 v69;
  unint64_t v70;
  unint64_t v71;
  size_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  const IRProgram *v77;
  std::runtime_error *exception;
  std::string *v80;
  __int128 v81;
  std::runtime_error *v82;
  std::string *v83;
  __int128 v84;
  void *v85;
  const IRProgram *v87;
  unsigned __int8 *v89;
  std::string *v90;
  std::string::size_type v91;
  unsigned __int8 *v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  int data;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  float v101;
  __int128 v102;
  std::string v103;
  uint64_t v104;
  std::string v105;
  std::string v106;
  __int128 v107;
  uint64_t v108;
  std::string __p;
  std::string v110;
  _OWORD v111[2];
  int v112;
  std::string v113;
  std::string v114;
  __int128 v115;

  v99 = 0u;
  v100 = 0u;
  v101 = 1.0;
  v4 = *(unsigned __int8 **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 72))(a3) + 16);
  if (!v4)
    goto LABEL_140;
  v92 = (unsigned __int8 *)a2 + 48;
  v90 = (std::string *)((char *)a2 + 72);
  v87 = a2;
  do
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
    v6 = (MIL::IRObject *)*((_QWORD *)v4 + 5);
    if (*(_QWORD *)((*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v6 + 112))(v6) + 16) > 1uLL)
      goto LABEL_142;
    v7 = (unsigned __int8 *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v6 + 32))(v6);
    v8 = v7[23];
    if ((v8 & 0x80u) == 0)
      v9 = v7[23];
    else
      v9 = *((_QWORD *)v7 + 1);
    v10 = *((unsigned __int8 *)a2 + 71);
    v11 = (char)v10;
    if ((v10 & 0x80u) != 0)
      v10 = *((_QWORD *)a2 + 7);
    if (v9 != v10)
      goto LABEL_142;
    if (v11 >= 0)
      v12 = v92;
    else
      v12 = *(unsigned __int8 **)v92;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v7, v12, *((_QWORD *)v7 + 1)))
        goto LABEL_142;
    }
    else if (v7[23])
    {
      while (*v7 == *v12)
      {
        ++v7;
        ++v12;
        if (!--v8)
          goto LABEL_19;
      }
LABEL_142:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v80 = std::string::append(&v105, ">.");
      v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v106);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
LABEL_19:
    memset(v111, 0, sizeof(v111));
    v112 = 1065353216;
    v13 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *, unsigned __int8 *))(*(_QWORD *)v6 + 128))(v6, v12);
    v15 = (unint64_t)(v13 + 1);
    v14 = (_QWORD *)*v13;
    if ((_QWORD *)*v13 != v13 + 1)
    {
      do
      {
        if (*((char *)v14 + 55) < 0)
          std::string::__init_copy_ctor_external(&v110, (const std::string::value_type *)v14[4], v14[5]);
        else
          v110 = *(std::string *)(v14 + 4);
        CoreML::NNCompiler::Backend::MIL::NameStore::AddVarNameUsed((uint64_t)v111, (uint64_t)&v110);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        v16 = (_QWORD *)v14[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v14[2];
            v18 = *v17 == (_QWORD)v14;
            v14 = v17;
          }
          while (!v18);
        }
        v14 = v17;
      }
      while (v17 != (_QWORD *)v15);
    }
    v19 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v6 + 40))(v6);
    v91 = v5;
    v20 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v6 + 128))(v6);
    *(_OWORD *)&v105.__r_.__value_.__r.__words[1] = 0uLL;
    v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105.__r_.__value_.__l.__size_;
    v22 = v20 + 1;
    v21 = (_QWORD *)*v20;
    if ((_QWORD *)*v20 == v20 + 1)
    {
      v37 = 0;
      v106.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = (unint64_t)&v105.__r_.__value_.__l.__size_;
      goto LABEL_65;
    }
    v89 = v4;
    v23 = 0;
    do
    {
      v15 = (unint64_t)(v21 + 4);
      size = v105.__r_.__value_.__l.__size_;
      p_size = &v105.__r_.__value_.__l.__size_;
      if ((std::string::size_type *)v105.__r_.__value_.__l.__data_ == &v105.__r_.__value_.__r.__words[1])
        goto LABEL_39;
      v26 = v105.__r_.__value_.__l.__size_;
      v27 = &v105.__r_.__value_.__l.__size_;
      if (v105.__r_.__value_.__l.__size_)
      {
        do
        {
          p_size = (std::string::size_type *)v26;
          v26 = *(_QWORD *)(v26 + 8);
        }
        while (v26);
      }
      else
      {
        do
        {
          p_size = (std::string::size_type *)v27[2];
          v18 = *p_size == (_QWORD)v27;
          v27 = p_size;
        }
        while (v18);
      }
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(p_size + 4, v21 + 4))
      {
LABEL_39:
        v28 = &v105.__r_.__value_.__l.__size_;
        v29 = &v105.__r_.__value_.__l.__size_;
        if (size)
        {
          v29 = p_size + 1;
          if (p_size[1])
            goto LABEL_55;
          v28 = p_size;
        }
LABEL_49:
        v32 = (uint64_t *)operator new(0x40uLL);
        v33 = (std::string *)(v32 + 4);
        if (*((char *)v21 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v33, (const std::string::value_type *)v21[4], v21[5]);
        }
        else
        {
          v34 = *(_OWORD *)v15;
          v32[6] = v21[6];
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
        }
        v32[7] = v21[7];
        *v32 = 0;
        v32[1] = 0;
        v32[2] = (uint64_t)v28;
        *v29 = (std::string::size_type)v32;
        if (*(_QWORD *)v105.__r_.__value_.__l.__data_)
        {
          v105.__r_.__value_.__r.__words[0] = *(_QWORD *)v105.__r_.__value_.__l.__data_;
          v32 = (uint64_t *)*v29;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v105.__r_.__value_.__l.__size_, v32);
        v23 = ++v105.__r_.__value_.__r.__words[2];
        goto LABEL_55;
      }
      v28 = &v105.__r_.__value_.__l.__size_;
      v29 = &v105.__r_.__value_.__l.__size_;
      if (!size)
        goto LABEL_49;
      v30 = (std::string::size_type *)size;
      while (1)
      {
        while (1)
        {
          v28 = v30;
          v31 = v30 + 4;
          if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v21 + 4, v30 + 4))
            break;
          v30 = (std::string::size_type *)*v28;
          v29 = v28;
          if (!*v28)
            goto LABEL_49;
        }
        if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v31, v21 + 4))
          break;
        v29 = v28 + 1;
        v30 = (std::string::size_type *)v28[1];
        if (!v30)
          goto LABEL_49;
      }
LABEL_55:
      v35 = (_QWORD *)v21[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v21[2];
          v18 = *v36 == (_QWORD)v21;
          v21 = v36;
        }
        while (!v18);
      }
      v21 = v36;
    }
    while (v36 != v22);
    v37 = (char *)v105.__r_.__value_.__l.__size_;
    *(_OWORD *)&v106.__r_.__value_.__l.__data_ = *(_OWORD *)&v105.__r_.__value_.__l.__data_;
    v106.__r_.__value_.__r.__words[2] = v23;
    if (v23)
    {
      *(_QWORD *)(v105.__r_.__value_.__l.__size_ + 16) = &v106.__r_.__value_.__l.__size_;
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105.__r_.__value_.__l.__size_;
      *(_OWORD *)&v105.__r_.__value_.__r.__words[1] = 0uLL;
      v37 = 0;
      a2 = v87;
      v4 = v89;
      v38 = v91;
      goto LABEL_66;
    }
    a2 = v87;
    v4 = v89;
LABEL_65:
    v38 = v91;
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106.__r_.__value_.__l.__size_;
LABEL_66:
    *((_QWORD *)&v107 + 1) = 0;
    v108 = 0;
    *(_QWORD *)&v107 = (char *)&v107 + 8;
    memset(&__p, 0, sizeof(__p));
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v37);
    v105.__r_.__value_.__r.__words[0] = v38;
    v105.__r_.__value_.__l.__size_ = (std::string::size_type)v111;
    Opset = (MIL::IROpset *)MIL::MILContext::GetOpset();
    MIL::IROpset::GetReversedOperatorNamesMap(Opset);
    v40 = (MIL::IRObject *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v6 + 40))(v6);
    CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::TranslateBlock((uint64_t)&v104, (uint64_t)a2, (int8x8_t *)&v105, v40);
    if (*((char *)a2 + 95) < 0)
      std::string::__init_copy_ctor_external(&v103, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
    else
      v103 = *v90;
    v41 = v104;
    v104 = 0;
    v42 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)&v107, &v114, &v103);
    if (*v42)
    {
      v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v83 = std::string::append(&v113, " already exists.");
      v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      v114.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v84;
      v83->__r_.__value_.__l.__size_ = 0;
      v83->__r_.__value_.__r.__words[2] = 0;
      v83->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v82, &v114);
      __cxa_throw(v82, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v43 = v42;
    v44 = operator new(0x40uLL);
    v44[2] = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
    v45 = v103.__r_.__value_.__r.__words[2];
    memset(&v103, 0, sizeof(v103));
    *((_QWORD *)v44 + 6) = v45;
    *((_QWORD *)v44 + 7) = v41;
    v46 = v114.__r_.__value_.__r.__words[0];
    *(_QWORD *)v44 = 0;
    *((_QWORD *)v44 + 1) = 0;
    *((_QWORD *)v44 + 2) = v46;
    *v43 = v44;
    if (*(_QWORD *)v107)
    {
      *(_QWORD *)&v107 = *(_QWORD *)v107;
      v44 = (_OWORD *)*v43;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v107 + 1), (uint64_t *)v44);
    ++v108;
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    if (*((char *)a2 + 95) < 0)
      std::string::__init_copy_ctor_external(&v113, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
    else
      v113 = *v90;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v113;
    *((_BYTE *)&v113.__r_.__value_.__s + 23) = 0;
    v113.__r_.__value_.__s.__data_[0] = 0;
    LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(v6);
    v48 = LocationPtr[1];
    *(_QWORD *)&v102 = *LocationPtr;
    *((_QWORD *)&v102 + 1) = v48;
    if (v48)
    {
      v49 = (unint64_t *)(v48 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v115 = v102;
    v102 = 0uLL;
    v114 = __p;
    memset(&__p, 0, sizeof(__p));
    MIL::IRFunction::Make();
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v114.__r_.__value_.__l.__data_);
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
    if (*((_QWORD *)&v115 + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
    if (*((_QWORD *)&v102 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = v104;
    v104 = 0;
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v105.__r_.__value_.__r.__words[2]);
    CoreML::NNCompiler::Backend::MIL::MILFunctionBuilder::~MILFunctionBuilder((CoreML::NNCompiler::Backend::MIL::MILFunctionBuilder *)&v106);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v111);
    v58 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v4 + 16));
    v59 = v58;
    v60 = *((_QWORD *)&v99 + 1);
    if (*((_QWORD *)&v99 + 1))
    {
      v61 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v99 + 8));
      v61.i16[0] = vaddlv_u8(v61);
      v62 = v61.u32[0];
      if (v61.u32[0] > 1uLL)
      {
        v15 = v58;
        if (v58 >= *((_QWORD *)&v99 + 1))
          v15 = v58 % *((_QWORD *)&v99 + 1);
      }
      else
      {
        v15 = (*((_QWORD *)&v99 + 1) - 1) & v58;
      }
      v63 = *(void ***)(v99 + 8 * v15);
      if (v63)
      {
        v64 = (char *)*v63;
        if (*v63)
        {
          do
          {
            v65 = *((_QWORD *)v64 + 1);
            if (v65 == v59)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v64 + 16, v4 + 16))
                goto LABEL_137;
            }
            else
            {
              if (v62 > 1)
              {
                if (v65 >= v60)
                  v65 %= v60;
              }
              else
              {
                v65 &= v60 - 1;
              }
              if (v65 != v15)
                break;
            }
            v64 = *(char **)v64;
          }
          while (v64);
        }
      }
    }
    v64 = (char *)operator new(0x38uLL);
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
    v106.__r_.__value_.__l.__size_ = (std::string::size_type)&v100;
    v106.__r_.__value_.__s.__data_[16] = 0;
    *(_QWORD *)v64 = 0;
    *((_QWORD *)v64 + 1) = v59;
    v66 = (std::string *)(v64 + 16);
    if ((char)v4[39] < 0)
    {
      std::string::__init_copy_ctor_external(v66, *((const std::string::value_type **)v4 + 2), *((_QWORD *)v4 + 3));
    }
    else
    {
      v67 = *((_OWORD *)v4 + 1);
      *((_QWORD *)v64 + 4) = *((_QWORD *)v4 + 4);
      *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v67;
    }
    *((_QWORD *)v64 + 5) = 0;
    *((_QWORD *)v64 + 6) = 0;
    v106.__r_.__value_.__s.__data_[16] = 1;
    v68 = (float)(unint64_t)(*((_QWORD *)&v100 + 1) + 1);
    if (!v60 || (float)(v101 * (float)v60) < v68)
    {
      v69 = (v60 & (v60 - 1)) != 0;
      if (v60 < 3)
        v69 = 1;
      v70 = v69 | (2 * v60);
      v71 = vcvtps_u32_f32(v68 / v101);
      if (v70 <= v71)
        v72 = v71;
      else
        v72 = v70;
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)&v99, v72);
      v60 = *((_QWORD *)&v99 + 1);
      if ((*((_QWORD *)&v99 + 1) & (*((_QWORD *)&v99 + 1) - 1)) != 0)
      {
        if (v59 >= *((_QWORD *)&v99 + 1))
          v15 = v59 % *((_QWORD *)&v99 + 1);
        else
          v15 = v59;
      }
      else
      {
        v15 = (*((_QWORD *)&v99 + 1) - 1) & v59;
      }
    }
    v73 = v99;
    v74 = *(_QWORD **)(v99 + 8 * v15);
    if (v74)
    {
      *(_QWORD *)v64 = *v74;
      goto LABEL_135;
    }
    *(_QWORD *)v64 = v100;
    *(_QWORD *)&v100 = v64;
    *(_QWORD *)(v73 + 8 * v15) = &v100;
    if (*(_QWORD *)v64)
    {
      v75 = *(_QWORD *)(*(_QWORD *)v64 + 8);
      if ((v60 & (v60 - 1)) != 0)
      {
        if (v75 >= v60)
          v75 %= v60;
      }
      else
      {
        v75 &= v60 - 1;
      }
      v74 = (_QWORD *)(v99 + 8 * v75);
LABEL_135:
      *v74 = v64;
    }
    v106.__r_.__value_.__r.__words[0] = 0;
    ++*((_QWORD *)&v100 + 1);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v106);
LABEL_137:
    std::shared_ptr<MIL::IRFunction>::operator=[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>((_QWORD *)v64 + 5, &v98);
    v76 = v98;
    v98 = 0;
    if (v76)
      (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
    v4 = *(unsigned __int8 **)v4;
  }
  while (v4);
LABEL_140:
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a3 + 88))(a3, &v99);
  MIL::IRProgramValidator::Validate(*this, v77);
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v106) & 1) == 0)
  {
    v85 = __cxa_allocate_exception(0x48uLL);
    v94 = *(_OWORD *)&v106.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v106.__r_.__value_.__r.__words[1] = 0uLL;
    v95 = v107;
    v96 = v108;
    v107 = 0uLL;
    v108 = 0;
    v93 = MEMORY[0x1E0D45EF0] + 16;
    data = (int)__p.__r_.__value_.__l.__data_;
    MEMORY[0x1A1AD53D8](v85, &v93);
    __cxa_throw(v85, MEMORY[0x1E0D45E90], (void (*)(void *))MIL::ValidationError::~ValidationError);
  }
  MEMORY[0x1A1AD5408](&v106);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>>>::~__hash_table((uint64_t)&v99);
}

_QWORD *std::shared_ptr<MIL::IRFunction>::operator=[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_1E3D5C3D8;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void std::__shared_ptr_pointer<MIL::IRFunction  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<MIL::IRFunction  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRFunction  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x800000019CB3091ELL))
    return a1 + 24;
  else
    return 0;
}

uint64_t ***`anonymous namespace'::RegisterVarNames(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  MIL::IRNamedValueType **v5;
  MIL::IRNamedValueType **v6;
  uint64_t Name;
  __int128 v8;
  uint64_t ***result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  MIL::IRNamedValueType **v14;
  MIL::IRNamedValueType **v15;
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  std::string __p;
  std::string v22;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5 = *(MIL::IRNamedValueType ***)v4;
  v6 = *(MIL::IRNamedValueType ***)(v4 + 8);
  while (v5 != v6)
  {
    Name = MIL::IRNamedValueType::GetName(*v5);
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
    }
    else
    {
      v8 = *(_OWORD *)Name;
      v22.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
    }
    CoreML::NNCompiler::Backend::MIL::NameStore::AddVarNameUsed(a2, (uint64_t)&v22);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    v5 += 2;
  }
  result = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v10 = **result;
  v11 = (*result)[1];
  while (v10 != v11)
  {
    v12 = *v10;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v10 + 176))(*v10);
    v14 = *(MIL::IRNamedValueType ***)v13;
    v15 = *(MIL::IRNamedValueType ***)(v13 + 8);
    while (v14 != v15)
    {
      v16 = MIL::IRNamedValueType::GetName(*v14);
      if (*(char *)(v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
      }
      else
      {
        v17 = *(_OWORD *)v16;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
      }
      CoreML::NNCompiler::Backend::MIL::NameStore::AddVarNameUsed(a2, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v14 += 2;
    }
    result = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 208))(v12);
    v18 = **result;
    v19 = (*result)[1];
    while (v18 != v19)
    {
      v20 = *v18;
      v18 += 2;
    }
    v10 += 2;
  }
  return result;
}

void sub_19C858B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::TranslateBlock(uint64_t a1, uint64_t a2, int8x8_t *a3, MIL::IRObject *a4)
{
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 **v15;
  _QWORD ***v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 **v26;
  unsigned __int8 *i;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string::size_type v32;
  std::string::size_type size;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  __int128 v39;
  int64x2_t v40;
  std::string::size_type v41;
  std::string::size_type v42;
  _QWORD **v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string::size_type v46;
  _QWORD *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string::size_type v50;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  std::string::size_type *v57;
  _QWORD *v58;
  std::string::size_type v59;
  std::string::size_type v60;
  __int128 v61;
  int64x2_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unint64_t v67;
  int8x8_t v68;
  unint64_t v69;
  uint8x8_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned __int8 **v73;
  unsigned __int8 *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  __int128 v90;
  int64x2_t v91;
  uint64_t v92;
  void *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *LocationPtr;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string::size_type v105;
  std::string::size_type v106;
  std::string::size_type v107;
  std::string::size_type v108;
  uint64_t v109;
  uint64_t v110;
  std::runtime_error *exception;
  std::string *v112;
  __int128 v113;
  const std::string::value_type *v114;
  uint64_t v115;
  const std::string::value_type *v116;
  int v117;
  const std::string::value_type *v118;
  std::string::size_type v119;
  std::string *v120;
  __int128 v121;
  std::runtime_error *v122;
  std::string *v123;
  __int128 v124;
  char v125;
  const std::string::value_type *v126;
  std::string::size_type v127;
  std::string *v128;
  __int128 v129;
  MIL::IRObject *v130;
  _QWORD *v131;
  std::string::size_type v132;
  _QWORD *v133;
  __int128 v134;
  int64x2_t v135;
  char *v136;
  std::string v137;
  std::string v138;
  std::string::size_type v139;
  std::__shared_weak_count *v140;
  std::string v141;
  std::string v142;
  std::string v143;
  std::string::size_type v144;
  std::string::value_type *v145;

  v7 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a4 + 40))(a4);
  memset(&v143, 0, sizeof(v143));
  v8 = *(char **)v7;
  v9 = *(char **)(v7 + 8);
  v142.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
  v142.__r_.__value_.__s.__data_[8] = 0;
  v10 = v9 - v8;
  if (v9 != v8)
  {
    if (v10 < 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v11 = operator new(v9 - v8);
    v143.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    v143.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    v143.__r_.__value_.__r.__words[2] = (std::string::size_type)&v11[2 * (v10 >> 4)];
    do
    {
      *v11 = *(_QWORD *)v8;
      v12 = *((_QWORD *)v8 + 1);
      v11[1] = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v8 += 16;
      v11 += 2;
    }
    while (v8 != v9);
    v143.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
  }
  v15 = (__int128 **)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a4 + 88))(a4);
  memset(&v142, 0, sizeof(v142));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v142, *v15, v15[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v15[1] - (char *)*v15) >> 3));
  v135 = 0u;
  v136 = 0;
  v137 = v143;
  memset(&v143, 0, sizeof(v143));
  v138 = v142;
  memset(&v142, 0, sizeof(v142));
  v141.__r_.__value_.__r.__words[0] = (std::string::size_type)&v142;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
  v142.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
  std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
  v130 = a4;
  v16 = (_QWORD ***)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a4 + 56))(a4);
  v17 = **v16;
  v131 = (*v16)[1];
  if (v17 == v131)
    goto LABEL_110;
  do
  {
    v133 = v17;
    v18 = *v17;
    v19 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 56))(*v17);
    v20 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v19);
    v21 = *(int8x8_t *)(a2 + 16);
    if (v21)
    {
      v22 = v20;
      v23 = (uint8x8_t)vcnt_s8(v21);
      v23.i16[0] = vaddlv_u8(v23);
      v24 = v23.u32[0];
      if (v23.u32[0] > 1uLL)
      {
        v25 = v20;
        if (v20 >= *(_QWORD *)&v21)
          v25 = v20 % *(_QWORD *)&v21;
      }
      else
      {
        v25 = (*(_QWORD *)&v21 - 1) & v20;
      }
      v26 = *(unsigned __int8 ***)(*(_QWORD *)(a2 + 8) + 8 * v25);
      if (v26)
      {
        for (i = *v26; i; i = *(unsigned __int8 **)i)
        {
          v28 = *((_QWORD *)i + 1);
          if (v22 == v28)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v19))
            {
              v97 = *((_QWORD *)i + 8);
              if (!v97)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(uint64_t, uint64_t, int8x8_t *, uint64_t, int64x2_t *))(*(_QWORD *)v97 + 48))(v97, a2, a3, v18, &v135);
              goto LABEL_106;
            }
          }
          else
          {
            if (v24 > 1)
            {
              if (v28 >= *(_QWORD *)&v21)
                v28 %= *(_QWORD *)&v21;
            }
            else
            {
              v28 &= *(_QWORD *)&v21 - 1;
            }
            if (v28 != v25)
              break;
          }
        }
      }
    }
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 208))(v18);
    if (**(_QWORD **)v29 == *(_QWORD *)(*(_QWORD *)v29 + 8))
    {
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v18 + 32))(&v143, v18);
      v41 = v143.__r_.__value_.__r.__words[0];
    }
    else
    {
      memset(&v142, 0, sizeof(v142));
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 208))(v18);
      v31 = *(_QWORD *)(*(_QWORD *)v30 + 8) - **(_QWORD **)v30;
      v32 = v142.__r_.__value_.__r.__words[0];
      if (v31 >> 4 > (unint64_t)((uint64_t)(v142.__r_.__value_.__r.__words[2] - v142.__r_.__value_.__r.__words[0]) >> 4))
      {
        if (v31 < 0)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        size = v142.__r_.__value_.__l.__size_;
        v145 = &v142.__r_.__value_.__s.__data_[16];
        v34 = std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v31 >> 4);
        v36 = (_QWORD *)v142.__r_.__value_.__l.__size_;
        v37 = v142.__r_.__value_.__r.__words[0];
        if (v142.__r_.__value_.__l.__size_ == v142.__r_.__value_.__r.__words[0])
        {
          v40 = vdupq_n_s64(v142.__r_.__value_.__l.__size_);
          v38 = (std::string::size_type)v34 + size - v32;
        }
        else
        {
          v38 = (std::string::size_type)v34 + size - v32;
          do
          {
            v39 = *((_OWORD *)v36 - 1);
            v36 -= 2;
            *(_OWORD *)(v38 - 16) = v39;
            v38 -= 16;
            *v36 = 0;
            v36[1] = 0;
          }
          while (v36 != (_QWORD *)v37);
          v40 = *(int64x2_t *)&v142.__r_.__value_.__l.__data_;
        }
        v142.__r_.__value_.__r.__words[0] = v38;
        v142.__r_.__value_.__l.__size_ = (std::string::size_type)v34 + size - v32;
        *(int64x2_t *)&v143.__r_.__value_.__r.__words[1] = v40;
        v42 = v142.__r_.__value_.__r.__words[2];
        v142.__r_.__value_.__r.__words[2] = (std::string::size_type)v34 + 16 * v35;
        v144 = v42;
        v143.__r_.__value_.__r.__words[0] = v40.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer((uint64_t)&v143);
      }
      v43 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 208))(v18);
      v44 = (_QWORD *)**v43;
      v45 = (_QWORD *)(*v43)[1];
      while (v44 != v45)
      {
        CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::TranslateBlock(&v139, a2, a3, *v44);
        v46 = v139;
        v141.__r_.__value_.__r.__words[0] = v139;
        if (v139)
        {
          v47 = (_QWORD *)operator new();
          v48 = v139;
          *v47 = &off_1E3D5C4B8;
          v47[1] = 0;
          v47[2] = 0;
          v47[3] = v48;
        }
        else
        {
          v47 = 0;
        }
        v141.__r_.__value_.__l.__size_ = (std::string::size_type)v47;
        v139 = 0;
        v49 = v142.__r_.__value_.__l.__size_;
        if (v142.__r_.__value_.__l.__size_ >= v142.__r_.__value_.__r.__words[2])
        {
          v51 = (uint64_t)(v142.__r_.__value_.__l.__size_ - v142.__r_.__value_.__r.__words[0]) >> 4;
          v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 60)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          v53 = v142.__r_.__value_.__r.__words[2] - v142.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v142.__r_.__value_.__r.__words[2] - v142.__r_.__value_.__r.__words[0]) >> 3 > v52)
            v52 = v53 >> 3;
          if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
            v54 = 0xFFFFFFFFFFFFFFFLL;
          else
            v54 = v52;
          v145 = &v142.__r_.__value_.__s.__data_[16];
          v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v54);
          v57 = (std::string::size_type *)&v55[16 * v51];
          *v57 = v46;
          v57[1] = (std::string::size_type)v47;
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = 0uLL;
          v58 = (_QWORD *)v142.__r_.__value_.__l.__size_;
          v59 = v142.__r_.__value_.__r.__words[0];
          if (v142.__r_.__value_.__l.__size_ == v142.__r_.__value_.__r.__words[0])
          {
            v62 = vdupq_n_s64(v142.__r_.__value_.__l.__size_);
            v60 = (std::string::size_type)&v55[16 * v51];
          }
          else
          {
            v60 = (std::string::size_type)&v55[16 * v51];
            do
            {
              v61 = *((_OWORD *)v58 - 1);
              v58 -= 2;
              *(_OWORD *)(v60 - 16) = v61;
              v60 -= 16;
              *v58 = 0;
              v58[1] = 0;
            }
            while (v58 != (_QWORD *)v59);
            v62 = *(int64x2_t *)&v142.__r_.__value_.__l.__data_;
          }
          v50 = (std::string::size_type)(v57 + 2);
          v142.__r_.__value_.__r.__words[0] = v60;
          v142.__r_.__value_.__l.__size_ = (std::string::size_type)(v57 + 2);
          *(int64x2_t *)&v143.__r_.__value_.__r.__words[1] = v62;
          v63 = v142.__r_.__value_.__r.__words[2];
          v142.__r_.__value_.__r.__words[2] = (std::string::size_type)&v55[16 * v56];
          v144 = v63;
          v143.__r_.__value_.__r.__words[0] = v62.i64[0];
          std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer((uint64_t)&v143);
        }
        else
        {
          *(_QWORD *)v142.__r_.__value_.__l.__size_ = v46;
          *(_QWORD *)(v49 + 8) = v47;
          v50 = v49 + 16;
        }
        v142.__r_.__value_.__l.__size_ = v50;
        v64 = v139;
        v139 = 0;
        if (v64)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v64 + 8))(v64);
        v44 += 2;
      }
      (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v18 + 40))(&v143, v18, &v142);
      v41 = v143.__r_.__value_.__r.__words[0];
      v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v142;
      std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v143);
    }
    v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 64))(v18);
    v66 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
    v132 = v41;
    v67 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v66);
    v68 = a3[3];
    if (!*(_QWORD *)&v68)
      goto LABEL_130;
    v69 = v67;
    v70 = (uint8x8_t)vcnt_s8(v68);
    v70.i16[0] = vaddlv_u8(v70);
    v71 = v70.u32[0];
    if (v70.u32[0] > 1uLL)
    {
      v72 = v67;
      if (v67 >= *(_QWORD *)&v68)
        v72 = v67 % *(_QWORD *)&v68;
    }
    else
    {
      v72 = (*(_QWORD *)&v68 - 1) & v67;
    }
    v73 = *(unsigned __int8 ***)(*(_QWORD *)&a3[2] + 8 * v72);
    if (!v73 || (v74 = *v73) == 0)
    {
LABEL_130:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
      std::operator+<char>();
      v112 = std::string::append(&v141, " in source opset ");
      v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v142.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0;
      v112->__r_.__value_.__r.__words[2] = 0;
      v112->__r_.__value_.__r.__words[0] = 0;
      v116 = *(const std::string::value_type **)(a2 + 48);
      v115 = a2 + 48;
      v114 = v116;
      v117 = *(char *)(v115 + 23);
      if (v117 >= 0)
        v118 = (const std::string::value_type *)v115;
      else
        v118 = v114;
      if (v117 >= 0)
        v119 = *(unsigned __int8 *)(v115 + 23);
      else
        v119 = *(_QWORD *)(v115 + 8);
      v120 = std::string::append(&v142, v118, v119);
      v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      v143.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v121;
      v120->__r_.__value_.__l.__size_ = 0;
      v120->__r_.__value_.__r.__words[2] = 0;
      v120->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v143);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    while (1)
    {
      v75 = *((_QWORD *)v74 + 1);
      if (v69 == v75)
        break;
      if (v71 > 1)
      {
        if (v75 >= *(_QWORD *)&v68)
          v75 %= *(_QWORD *)&v68;
      }
      else
      {
        v75 &= *(_QWORD *)&v68 - 1;
      }
      if (v75 != v72)
        goto LABEL_130;
LABEL_74:
      v74 = *(unsigned __int8 **)v74;
      if (!v74)
        goto LABEL_130;
    }
    if (!std::equal_to<std::string>::operator()[abi:ne180100](v74 + 16, v66))
      goto LABEL_74;
    MIL::MILContext::GetOpset();
    MIL::IROpset::TryGetOperatorSharedPtr();
    if (!v139)
    {
      v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v123 = std::string::append(&v141, "\" in destination opset ");
      v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
      v142.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v124;
      v123->__r_.__value_.__l.__size_ = 0;
      v123->__r_.__value_.__r.__words[2] = 0;
      v123->__r_.__value_.__r.__words[0] = 0;
      v125 = *(_BYTE *)(a2 + 95);
      if (v125 >= 0)
        v126 = (const std::string::value_type *)(a2 + 72);
      else
        v126 = *(const std::string::value_type **)(a2 + 72);
      if (v125 >= 0)
        v127 = *(unsigned __int8 *)(a2 + 95);
      else
        v127 = *(_QWORD *)(a2 + 80);
      v128 = std::string::append(&v142, v126, v127);
      v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
      v143.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v129;
      v128->__r_.__value_.__l.__size_ = 0;
      v128->__r_.__value_.__r.__words[2] = 0;
      v128->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v122, &v143);
      __cxa_throw(v122, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    (*(void (**)(std::string::size_type, std::string::size_type *))(*(_QWORD *)v132 + 88))(v132, &v139);
    v76 = v140;
    if (v140)
    {
      p_shared_owners = (unint64_t *)&v140->__shared_owners_;
      do
        v78 = __ldaxr(p_shared_owners);
      while (__stlxr(v78 - 1, p_shared_owners));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v143.__r_.__value_.__r.__words[0] = v132;
    v79 = (_QWORD *)operator new();
    *v79 = &off_1E3D5C448;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v132;
    v143.__r_.__value_.__l.__size_ = (std::string::size_type)v79;
    v80 = (_QWORD *)v135.i64[1];
    if (v135.i64[1] < (unint64_t)v136)
    {
      *(_OWORD *)v135.i64[1] = *(_OWORD *)&v143.__r_.__value_.__l.__data_;
      v81 = v80 + 2;
      *(_OWORD *)&v143.__r_.__value_.__l.__data_ = 0uLL;
      goto LABEL_105;
    }
    v82 = (_QWORD *)v135.i64[0];
    v83 = (v135.i64[1] - v135.i64[0]) >> 4;
    v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v85 = (uint64_t)&v136[-v135.i64[0]];
    if ((uint64_t)&v136[-v135.i64[0]] >> 3 > v84)
      v84 = v85 >> 3;
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
      v86 = 0xFFFFFFFFFFFFFFFLL;
    else
      v86 = v84;
    if (v86 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v87 = (char *)operator new(16 * v86);
    v88 = &v87[16 * v83];
    *(_OWORD *)v88 = *(_OWORD *)&v143.__r_.__value_.__l.__data_;
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = 0uLL;
    if (v80 == v82)
    {
      v91 = vdupq_n_s64((unint64_t)v80);
      v89 = &v87[16 * v83];
    }
    else
    {
      v89 = &v87[16 * v83];
      do
      {
        v90 = *((_OWORD *)v80 - 1);
        v80 -= 2;
        *((_OWORD *)v89 - 1) = v90;
        v89 -= 16;
        *v80 = 0;
        v80[1] = 0;
      }
      while (v80 != v82);
      v91 = v135;
    }
    v81 = v88 + 16;
    v135.i64[0] = (uint64_t)v89;
    v135.i64[1] = (uint64_t)(v88 + 16);
    v136 = &v87[16 * v86];
    v92 = v91.i64[1];
    v93 = (void *)v91.i64[0];
    while ((void *)v92 != v93)
      v92 = std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v92 - 16);
    if (v93)
    {
      operator delete(v93);
      v94 = (std::__shared_weak_count *)v143.__r_.__value_.__l.__size_;
      v135.i64[1] = (uint64_t)v81;
      if (v143.__r_.__value_.__l.__size_)
      {
        v95 = (unint64_t *)(v143.__r_.__value_.__l.__size_ + 8);
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
    }
    else
    {
LABEL_105:
      v135.i64[1] = (uint64_t)v81;
    }
LABEL_106:
    v17 = v133 + 2;
  }
  while (v133 + 2 != v131);
LABEL_110:
  LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(v130);
  v99 = LocationPtr[1];
  *(_QWORD *)&v134 = *LocationPtr;
  *((_QWORD *)&v134 + 1) = v99;
  if (v99)
  {
    v100 = (unint64_t *)(v99 + 8);
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v134;
  MIL::IRBlock::Make();
  v102 = (std::__shared_weak_count *)v143.__r_.__value_.__l.__size_;
  if (v143.__r_.__value_.__l.__size_)
  {
    v103 = (unint64_t *)(v143.__r_.__value_.__l.__size_ + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v137.__r_.__value_.__l.__size_;
  v106 = v137.__r_.__value_.__r.__words[0];
  while (v105 != v106)
    v105 = std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v105 - 16);
  v137.__r_.__value_.__l.__size_ = v106;
  v108 = v138.__r_.__value_.__l.__size_;
  v107 = v138.__r_.__value_.__r.__words[0];
  while (v108 != v107)
  {
    if (*(char *)(v108 - 1) < 0)
      operator delete(*(void **)(v108 - 24));
    v108 -= 24;
  }
  v138.__r_.__value_.__l.__size_ = v107;
  v109 = v135.i64[1];
  v110 = v135.i64[0];
  while (v109 != v110)
    v109 = std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v109 - 16);
  v135.i64[1] = v110;
  CoreML::NNCompiler::Backend::MIL::MILBlockBuilder::~MILBlockBuilder((CoreML::NNCompiler::Backend::MIL::MILBlockBuilder *)&v135);
}

void sub_19C8595E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v35 - 144);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  CoreML::NNCompiler::Backend::MIL::MILBlockBuilder::~MILBlockBuilder((CoreML::NNCompiler::Backend::MIL::MILBlockBuilder *)&a19);
  _Unwind_Resume(a1);
}

void sub_19C859980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void sub_19C859BCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C85A224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  uint64_t v30;
  void *v32;
  void *v33;

  if (__p)
    operator delete(__p);
  v32 = *(void **)(v30 - 136);
  if (v32)
  {
    *(_QWORD *)(v30 - 128) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(v30 - 112);
  if (v33)
  {
    *(_QWORD *)(v30 - 104) = v33;
    operator delete(v33);
  }
  if (a11)
    operator delete(a11);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);

  _Unwind_Resume(a1);
}

void sub_19C85AB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8324(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8325(uint64_t a1)
{

}

void sub_19C85B1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void sub_19C85B420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C85B9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  void *v29;
  void *v30;
  uint64_t v31;
  void *v33;
  void *v34;

  if (__p)
    operator delete(__p);
  v33 = *(void **)(v31 - 144);
  if (v33)
  {
    *(_QWORD *)(v31 - 136) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(v31 - 120);
  if (v34)
  {
    *(_QWORD *)(v31 - 112) = v34;
    operator delete(v34);
  }
  if (a10)
    operator delete(a10);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::MILBlockBuilder::~MILBlockBuilder(CoreML::NNCompiler::Backend::MIL::MILBlockBuilder *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void **v5;

  v5 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 24);
  std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 1);
    v4 = *(void **)this;
    if (v3 != v2)
    {
      do
        v3 = std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v3 - 16);
      while (v3 != v2);
      v4 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v2;
    operator delete(v4);
  }
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

BOOL CoreML::NNCompiler::Backend::MIL::MILBlockBuilder::RemoveOutput(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 56);
  v4 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)(a1 + 48), v3, a2);
  v5 = v4;
  if (v4 != v3)
  {
    v6 = v4;
    if (v4 + 24 == v3)
    {
      v8 = v3;
    }
    else
    {
      do
      {
        if (*(char *)(v6 + 23) < 0)
          operator delete(*(void **)v6);
        *(_OWORD *)v6 = *(_OWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 16) = *(_QWORD *)(v6 + 40);
        *(_BYTE *)(v6 + 47) = 0;
        v7 = v6 + 48;
        *(_BYTE *)(v6 + 24) = 0;
        v6 += 24;
      }
      while (v7 != v3);
      v8 = *(_QWORD *)(a1 + 56);
    }
    while (v8 != v6)
    {
      if (*(char *)(v8 - 1) < 0)
        operator delete(*(void **)(v8 - 24));
      v8 -= 24;
    }
    *(_QWORD *)(a1 + 56) = v6;
  }
  return v5 != v3;
}

void sub_19C85BE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void Archiver::_IDataBlobENMLImpl::~_IDataBlobENMLImpl(Archiver::_IDataBlobENMLImpl *this)
{
  Archiver::_IDataBlobENMLImpl::~_IDataBlobENMLImpl(this);
  JUMPOUT(0x1A1AD6260);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E3D5B300;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  Archiver::_IDataBlobImpl::~_IDataBlobImpl((void **)this);
}

uint64_t Archiver::_IDataBlobENMLImpl::asStream(Archiver::_IDataBlobENMLImpl *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  result = *((_QWORD *)this + 4);
  if (!result)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8));
    v5 = operator new(0x58uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1E3D5C020;
    v6 = std::streambuf::basic_streambuf();
    v5[3] = &off_1E3D5B448;
    v5[5] = v3;
    v5[6] = v3;
    v5[7] = v3 + v4;
    *(_QWORD *)&v7 = v6;
    *((_QWORD *)&v7 + 1) = v5;
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    *((_OWORD *)this + 5) = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (void *)*((_QWORD *)this + 10);
    v12 = (char *)operator new(0xC0uLL);
    v13 = MEMORY[0x1E0DE4F98];
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
    *((_QWORD *)v12 + 3) = v13 + 24;
    *(_QWORD *)v12 = &off_1E3D5C138;
    *((_QWORD *)v12 + 5) = v13 + 64;
    *((_QWORD *)v12 + 4) = 0;
    std::ios_base::init((std::ios_base *)(v12 + 40), v11);
    *((_QWORD *)v12 + 22) = 0;
    *((_DWORD *)v12 + 46) = -1;
    *(_QWORD *)&v14 = v12 + 24;
    *((_QWORD *)&v14 + 1) = v12;
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    *((_OWORD *)this + 2) = v14;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    return *((_QWORD *)this + 4);
  }
  return result;
}

uint64_t Archiver::_IDataBlobENMLImpl::asMMappedFile@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 72);
  *a2 = *(_QWORD *)(this + 64);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void std::__shared_ptr_emplace<std::istream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::istream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_emplace<std::istream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Archiver::mmapbuf::~mmapbuf(Archiver::mmapbuf *this)
{
  std::streambuf::~streambuf();
  JUMPOUT(0x1A1AD6260);
}

double Archiver::mmapbuf::seekoff@<D0>(Archiver::mmapbuf *this@<X0>, int a2@<W2>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base::failure *exception;
  std::string *v9;
  __int128 v10;
  uint64_t v12;
  double result;
  std::ios_base::failure *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  std::error_code v24;
  std::string v25;
  std::string v26;
  std::string __ec;
  std::string v28;
  std::string __msg;

  v5 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  if (a2)
  {
    if (a2 == 1)
    {
      v7 = v6 - v5;
    }
    else
    {
      v7 = *((_QWORD *)this + 4) - v5;
      if (a2 != 2)
      {
        exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v28, a2);
        v9 = std::string::insert(&v28, 0, "unknown direction=");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        __msg.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        __ec.__r_.__value_.__r.__words[0] = 1;
        __ec.__r_.__value_.__l.__size_ = (std::string::size_type)std::iostream_category();
        std::ios_base::failure::failure(exception, &__msg, (const std::error_code *)&__ec);
        __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
      }
    }
  }
  else
  {
    v7 = 0;
  }
  if (*((_QWORD *)this + 4) - v5 - v7 <= a3 || -v7 > a3)
  {
    v15 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::to_string(&v26, a3);
    v16 = std::string::insert(&v26, 0, "invalid offset=");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __ec.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ec.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&__ec, ", dir=");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, a2);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v25;
    else
      v20 = (std::string *)v25.__r_.__value_.__r.__words[0];
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    else
      size = v25.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v28, (const std::string::value_type *)v20, size);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)&v24.__val_ = 1;
    v24.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(v15, &__msg, &v24);
    __cxa_throw(v15, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  v12 = v6 + (int)a3 - ((int)v6 - (int)v5) + (int)v7;
  *((_QWORD *)this + 3) = v12;
  result = 0.0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_QWORD *)(a4 + 128) = v12 - v5;
  return result;
}

void sub_19C85D184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  char v36;
  uint64_t v37;

  if (*(char *)(v37 - 41) < 0)
    operator delete(*(void **)(v37 - 64));
  if (a16 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if ((v36 & 1) != 0)
    __cxa_free_exception(v35);
  _Unwind_Resume(exception_object);
}

uint64_t Archiver::mmapbuf::seekpos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 128), 0, a3);
}

void std::__shared_ptr_emplace<Archiver::mmapbuf>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Archiver::mmapbuf>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_emplace<Archiver::mmapbuf>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C85D938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_19C85DC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(a14);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_19C85DE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  CoreML::Specification::LossLayer::~LossLayer((CoreML::Specification::LossLayer *)&a15);
  _Unwind_Resume(a1);
}

void sub_19C85E2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  CoreML::Specification::NetworkUpdateParameters::~NetworkUpdateParameters((CoreML::Specification::NetworkUpdateParameters *)&a28);
  _Unwind_Resume(a1);
}

void sub_19C85E4D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C85E570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C85E664(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C85E704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C85E944(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C85EC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19C85ECF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C85F228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_19C85F39C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C85F4D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C85F7F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C85F9AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_19C85FCF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C860088(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8603AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C860964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C860C04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,IArchive>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  char *v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = (_QWORD *)v3;
      if (*(_QWORD *)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD **)(a1 + 8);
      v9 = (_QWORD *)v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          v21 = (_QWORD *)v3;
          v11 = (uint64_t **)v3;
LABEL_14:
          v12 = (char *)operator new(0x60uLL);
          v13 = (uint64_t *)v12;
          if (*((char *)v5 + 55) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v12 + 32), (const std::string::value_type *)v5[4], v5[5]);
          }
          else
          {
            v14 = *((_OWORD *)v5 + 2);
            *((_QWORD *)v12 + 6) = v5[6];
            *((_OWORD *)v12 + 2) = v14;
          }
          v15 = v5[8];
          v13[7] = v5[7];
          v13[8] = v15;
          if (v15)
          {
            v16 = (unint64_t *)(v15 + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          std::map<std::string,IArchive>::map[abi:ne180100](v13 + 9, v5 + 9);
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v21, v11, v13);
          goto LABEL_21;
        }
        v21 = v7;
        v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        v11 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v21, v5 + 4);
      }
      if (!*v11)
        goto LABEL_14;
LABEL_21:
      v18 = (_QWORD *)v5[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v5[2];
          v10 = *v19 == (_QWORD)v5;
          v5 = v19;
        }
        while (!v10);
      }
      v5 = v19;
    }
    while (v19 != v4);
  }
  return a1;
}

void sub_19C860E14(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,IArchive>,void *>>>::operator()[abi:ne180100](0, v1);
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,IArchive>,void *>>>::operator()[abi:ne180100](char a1, uint64_t a2)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*(char **)(a2 + 80));
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a2 + 56);
    if (*(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

void sub_19C860F60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8610F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C862154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  void *v37;

  _Unwind_Resume(a1);
}

void sub_19C8624F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8626F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C862940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C862B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C863000(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_19C863144(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C8633D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_19C863770(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_19C863944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9164(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9165(uint64_t a1)
{

}

void sub_19C86486C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_19C8652FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C865DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_19C866164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8663DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  void *v18;
  void *v19;
  void *v20;
  void (**v21)(_QWORD);

  v21[2](v21);

  ElapsedTimeRecorder::~ElapsedTimeRecorder(&a18);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<_KDInterval>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_19C8665C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLTreeEnsembleClassifier _buildClassificationClasses:topk:error:]::$_1 &,std::__wrap_iter<unsigned long *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;

  v4 = *a2;
  v5 = *a1;
  v6 = *(double *)(a4 + 8 * *a2);
  v7 = *(double *)(a4 + 8 * *a1);
  v8 = *a3;
  v9 = *(double *)(a4 + 8 * *a3);
  if (v6 > v7)
  {
    if (v9 > v6)
    {
      *a1 = v8;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    if (*(double *)(a4 + 8 * *a3) <= v7)
      return 1;
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  if (v9 > v6)
  {
    *a2 = v8;
    *a3 = v4;
    v10 = *a1;
    if (*(double *)(a4 + 8 * *a2) <= *(double *)(a4 + 8 * *a1))
      return 1;
    *a1 = *a2;
    *a2 = v10;
    return 2;
  }
  return 0;
}

void std::vector<unsigned long>::resize(_QWORD *a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = (uint64_t)&v4[-*a1] >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v20 = &v3[8 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 3)
  {
    bzero(v4, 8 * v6);
    v20 = &v4[8 * v6];
LABEL_15:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v9 = v8 - (_QWORD)v3;
  v10 = v9 >> 2;
  if (v9 >> 2 <= a2)
    v10 = a2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v7, v11);
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  v15 = &v12[8 * v5];
  v17 = &v12[8 * v16];
  bzero(v15, 8 * v6);
  v18 = &v15[8 * v6];
  while (v14 != v13)
  {
    v19 = *((_QWORD *)v14 - 1);
    v14 -= 8;
    *((_QWORD *)v15 - 1) = v19;
    v15 -= 8;
  }
  *a1 = v15;
  a1[1] = v18;
  a1[2] = v17;
  if (v13)
    operator delete(v13);
}

void sub_19C866A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C866EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;

  _Unwind_Resume(a1);
}

void sub_19C8672C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C867860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

char *std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<_KDInterval>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void sub_19C867B58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C867C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19C867DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C868284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_19C868510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C868BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19C868E6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C868F14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C868F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C869324(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8695F8()
{
  void *v0;
  void *v1;

  __cxa_end_catch();
  JUMPOUT(0x19C869644);
}

void sub_19C86961C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_19C86962C()
{
  JUMPOUT(0x19C869634);
}

void sub_19C86963C()
{
  JUMPOUT(0x19C869644);
}

void sub_19C8698CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C869B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_19C86A030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_19C86A534()
{
  void *v0;
  void *v1;

  __cxa_end_catch();
  JUMPOUT(0x19C86A590);
}

void sub_19C86A564(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_19C86A608(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C86A734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C86AA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_19C86B158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{

  _Unwind_Resume(a1);
}

void sub_19C86B6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{

  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void Espresso::layer_data::shapes(Espresso::layer_data *this, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  void *__p[2];
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _QWORD v35[5];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a2 != a3)
  {
    v4 = a2;
    v6 = (char *)this + 16;
    do
    {
      v7 = *v4;
      v8 = (std::__shared_weak_count *)v4[1];
      v33 = *v4;
      v34 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      Espresso::abstract_blob_container::shape((char *)&v28, v7);
      v11 = *((_QWORD *)this + 1);
      v12 = *((_QWORD *)this + 2);
      if (v11 >= v12)
      {
        v15 = (uint64_t)(v11 - *(_QWORD *)this) >> 6;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 58)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v17 = v12 - *(_QWORD *)this;
        if (v17 >> 5 > v16)
          v16 = v17 >> 5;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFC0)
          v18 = 0x3FFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        v35[4] = v6;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v18);
        v20 = &v19[64 * v15];
        v35[0] = v19;
        v35[1] = v20;
        v35[3] = &v19[64 * v21];
        v22 = v29;
        v23 = v30;
        *(_OWORD *)v20 = v28;
        *((_OWORD *)v20 + 1) = v22;
        *((_QWORD *)v20 + 4) = v23;
        *((_QWORD *)v20 + 5) = 0;
        *((_QWORD *)v20 + 6) = 0;
        *((_QWORD *)v20 + 7) = 0;
        *(_OWORD *)(v20 + 40) = *(_OWORD *)__p;
        *((_QWORD *)v20 + 7) = v32;
        __p[0] = 0;
        __p[1] = 0;
        v32 = 0;
        v35[2] = v20 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)this, v35);
        v24 = *((_QWORD *)this + 1);
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v35);
        v25 = __p[0];
        *((_QWORD *)this + 1) = v24;
        if (v25)
        {
          __p[1] = v25;
          operator delete(v25);
        }
      }
      else
      {
        v13 = v29;
        v14 = v30;
        *(_OWORD *)v11 = v28;
        *(_OWORD *)(v11 + 16) = v13;
        *(_QWORD *)(v11 + 32) = v14;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 56) = 0;
        *(_OWORD *)(v11 + 40) = *(_OWORD *)__p;
        *(_QWORD *)(v11 + 56) = v32;
        __p[0] = 0;
        __p[1] = 0;
        v32 = 0;
        *((_QWORD *)this + 1) = v11 + 64;
      }
      if (v8)
      {
        v26 = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
}

void sub_19C86B948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unsigned __int8 **v34;
  unint64_t v35;
  void *v37;
  _QWORD v38[2];
  char v39;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x68uLL);
  v38[0] = v16;
  v38[1] = a1 + 16;
  v39 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<std::string const&>((std::string *)(v16 + 16), *a3);
  v39 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = *(void **)a1;
          *(_QWORD *)a1 = v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = (_QWORD *)*v15;
          if (*v15)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v15;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v26;
                    goto LABEL_55;
                  }
                  *v26 = *v32;
                  *v32 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_55:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v37 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v37)
          operator delete(v37);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v34 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  i = (unsigned __int8 *)v38[0];
  if (v34)
  {
    *(_QWORD *)v38[0] = *v34;
LABEL_72:
    *v34 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v38[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v35 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  v38[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v38);
  return i;
}

void sub_19C86BE4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

char *Espresso::abstract_blob_container::shape(char *this, uint64_t a2)
{
  __int128 v2;

  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v2 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)this = *(_OWORD *)(a2 + 8);
  *((_OWORD *)this + 1) = v2;
  *((_QWORD *)this + 4) = *(_QWORD *)(a2 + 40);
  if (this + 40 != (char *)(a2 + 48))
    return std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(this + 40, *(char **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2);
  return this;
}

void sub_19C86BF10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C86C060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios17::Ios17LayerTranslator::~Ios17LayerTranslator(void **this)
{
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(this);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::unordered_map<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>::unordered_map(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  _QWORD v42[2];
  char v43;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = a2;
    v6 = a2 + 56 * a3;
    v7 = (_QWORD *)(a1 + 16);
    do
    {
      v8 = std::__string_hash<char>::operator()[abi:ne180100](v5);
      v9 = v8;
      v10 = *(_QWORD *)(a1 + 8);
      if (v10)
      {
        v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v11.i16[0] = vaddlv_u8(v11);
        v12 = v11.u32[0];
        if (v11.u32[0] > 1uLL)
        {
          v3 = v8;
          if (v8 >= v10)
            v3 = v8 % v10;
        }
        else
        {
          v3 = (v10 - 1) & v8;
        }
        v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
        if (v13)
        {
          for (i = *v13; i; i = *(unsigned __int8 **)i)
          {
            v15 = *((_QWORD *)i + 1);
            if (v15 == v9)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)v5))
                goto LABEL_83;
            }
            else
            {
              if (v12 > 1)
              {
                if (v15 >= v10)
                  v15 %= v10;
              }
              else
              {
                v15 &= v10 - 1;
              }
              if (v15 != v3)
                break;
            }
          }
        }
      }
      v16 = (char *)operator new(0x48uLL);
      v17 = v16;
      v42[0] = v16;
      v42[1] = a1 + 16;
      v43 = 0;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = v9;
      if (*(char *)(v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v16 + 16), *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
      }
      else
      {
        v18 = *(_OWORD *)v5;
        *((_QWORD *)v16 + 4) = *(_QWORD *)(v5 + 16);
        *((_OWORD *)v16 + 1) = v18;
      }
      v19 = *(_QWORD *)(v5 + 48);
      if (v19)
      {
        if (v19 == v5 + 24)
        {
          *((_QWORD *)v17 + 8) = v17 + 40;
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
          goto LABEL_27;
        }
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      }
      *((_QWORD *)v17 + 8) = v19;
LABEL_27:
      v43 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (!v10 || (float)(v21 * (float)v10) < v20)
      {
        v22 = (v10 & (v10 - 1)) != 0;
        if (v10 < 3)
          v22 = 1;
        v23 = v22 | (2 * v10);
        v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24)
          prime = (int8x8_t)v24;
        else
          prime = (int8x8_t)v23;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        }
        v10 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)&prime <= v10)
        {
          if (*(_QWORD *)&prime < v10)
          {
            v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
            if (v10 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
            {
              v32 = std::__next_prime(v32);
            }
            else
            {
              v34 = 1 << -(char)__clz(v32 - 1);
              if (v32 >= 2)
                v32 = v34;
            }
            if (*(_QWORD *)&prime <= v32)
              prime = (int8x8_t)v32;
            if (*(_QWORD *)&prime >= v10)
            {
              v10 = *(_QWORD *)(a1 + 8);
            }
            else
            {
              if (prime)
                goto LABEL_39;
              v40 = *(void **)a1;
              *(_QWORD *)a1 = 0;
              if (v40)
                operator delete(v40);
              v10 = 0;
              *(_QWORD *)(a1 + 8) = 0;
            }
          }
        }
        else
        {
LABEL_39:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = *(void **)a1;
          *(_QWORD *)a1 = v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v7;
          if (*v7)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v7;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                    goto LABEL_64;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_64:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v10 = (unint64_t)prime;
        }
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10)
            v3 = v9 % v10;
          else
            v3 = v9;
        }
        else
        {
          v3 = (v10 - 1) & v9;
        }
      }
      v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      v38 = v42[0];
      if (v37)
      {
        *(_QWORD *)v42[0] = *v37;
      }
      else
      {
        *(_QWORD *)v42[0] = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v38;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v7;
        if (!*(_QWORD *)v38)
          goto LABEL_82;
        v39 = *(_QWORD *)(*(_QWORD *)v38 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v39 >= v10)
            v39 %= v10;
        }
        else
        {
          v39 &= v10 - 1;
        }
        v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
      }
      *v37 = v38;
LABEL_82:
      v42[0] = 0;
      ++*(_QWORD *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
LABEL_83:
      v5 += 56;
    }
    while (v5 != v6);
  }
  return a1;
}

void sub_19C86C558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__function::__func<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AD6260);
}

__n128 std::__function::__func<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D5B620;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D5B620;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5);
}

uint64_t std::__function::__func<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIPFvRKN6CoreML10NNCompiler7Backend3MIL22ProgramLayerTranslatorERKNS4_20LayerTranslationInfoERKN3MIL11IROperationERNS4_15MILBlockBuilderEEJRKNS_12placeholders4__phILi1EEERKNSK_ILi2EEERKNSK_ILi3EEERKNSK_ILi4EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::target_type()
{
}

void sub_19C86C790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C86CD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  uint64_t v16;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>>>::~__hash_table(v16 - 176);
  _Unwind_Resume(a1);
}

void sub_19C86D190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,InputNameToShapes>,std::__map_value_compare<std::string,std::__value_type<std::string,InputNameToShapes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,InputNameToShapes>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,InputNameToShapes>,std::__map_value_compare<std::string,std::__value_type<std::string,InputNameToShapes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,InputNameToShapes>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,InputNameToShapes>,std::__map_value_compare<std::string,std::__value_type<std::string,InputNameToShapes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,InputNameToShapes>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,InputNameToShapes>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,InputNameToShapes>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 152));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 128));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 104));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 80));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 56));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_OWORD *std::__tree<std::__value_type<std::string,InputNameToShapes>,std::__map_value_compare<std::string,std::__value_type<std::string,InputNameToShapes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,InputNameToShapes>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0xC8uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 7) = v6 + 4;
    *((_QWORD *)v6 + 11) = 0;
    *((_QWORD *)v6 + 9) = 0;
    *((_QWORD *)v6 + 10) = (char *)v6 + 88;
    *((_QWORD *)v6 + 14) = 0;
    *((_QWORD *)v6 + 12) = 0;
    *((_QWORD *)v6 + 13) = v6 + 7;
    *((_QWORD *)v6 + 17) = 0;
    *((_QWORD *)v6 + 20) = 0;
    *((_QWORD *)v6 + 15) = 0;
    *((_QWORD *)v6 + 16) = (char *)v6 + 136;
    *((_QWORD *)v6 + 18) = 0;
    *((_QWORD *)v6 + 19) = v6 + 10;
    *((_QWORD *)v6 + 23) = 0;
    *((_QWORD *)v6 + 24) = 0;
    *((_QWORD *)v6 + 21) = 0;
    *((_QWORD *)v6 + 22) = (char *)v6 + 184;
    v12 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,InputNameToShapes>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,InputNameToShapes>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,InputNameToShapes>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,InputNameToShapes>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,InputNameToShapes>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD v31[2];
  char v32;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 16));
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          v2 = v7;
          if (v7 >= v9)
            v2 = v7 % v9;
        }
        else
        {
          v2 = (v9 - 1) & v7;
        }
        v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v2);
        if (v12)
        {
          for (i = *v12; i; i = *(unsigned __int8 **)i)
          {
            v14 = *((_QWORD *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v5 + 16))
                goto LABEL_47;
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9)
                  v14 %= v9;
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2)
                break;
            }
          }
        }
      }
      v15 = operator new(0x38uLL);
      v31[0] = v15;
      v31[1] = a1 + 16;
      v32 = 0;
      *v15 = 0;
      v15[1] = v8;
      v16 = (std::string *)(v15 + 2);
      if ((char)v5[39] < 0)
      {
        std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)v5 + 2), *((_QWORD *)v5 + 3));
      }
      else
      {
        v17 = *((_OWORD *)v5 + 1);
        v15[4] = *((_QWORD *)v5 + 4);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      v15[5] = *((_QWORD *)v5 + 5);
      v18 = *((_QWORD *)v5 + 6);
      v15[6] = v18;
      if (v18)
      {
        v19 = (unint64_t *)(v18 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v32 = 1;
      v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v22 = *(float *)(a1 + 32);
      if (!v9 || (float)(v22 * (float)v9) < v21)
      {
        v23 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v23 = 1;
        v24 = v23 | (2 * v9);
        v25 = vcvtps_u32_f32(v21 / v22);
        if (v24 <= v25)
          v26 = v25;
        else
          v26 = v24;
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v26);
        v9 = *(_QWORD *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v9 - 1) & v8;
        }
      }
      v27 = *(_QWORD *)a1;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v28)
      {
        *v15 = *v28;
      }
      else
      {
        *v15 = *v6;
        *v6 = v15;
        *(_QWORD *)(v27 + 8 * v2) = v6;
        if (!*v15)
          goto LABEL_46;
        v29 = *(_QWORD *)(*v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v29 >= v9)
            v29 %= v9;
        }
        else
        {
          v29 &= v9 - 1;
        }
        v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
      }
      *v28 = v15;
LABEL_46:
      v31[0] = 0;
      ++*(_QWORD *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v31);
LABEL_47:
      v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_19C86D758(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void InputNameToShapes::~InputNameToShapes(char **this)
{
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(this[16]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(this[13]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(this[10]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(this[7]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(this[4]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(this[1]);
}

void sub_19C86D964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C86DA94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C86DB9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C86DC74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C86DD54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C86DDF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C86DE7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C86DF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C86DFE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C86E0B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C86E194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C86E258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C86E918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_19C86EC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v12;

  _Unwind_Resume(a1);
}

void sub_19C86EEC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_19C86EFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  void *v10;

  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19C86F430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_19C86F624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C86F6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19C86F778(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C86F91C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters::~ImagePreprocessingParameters(char **this)
{
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(this[22]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(this[19]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(this[16]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(this[13]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(this[10]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(this[7]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(this[4]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(this[1]);
}

char *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v12;

  v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x40uLL);
    v8 = (std::string *)(v6 + 32);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *((_DWORD *)v6 + 14) = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_19C86FA68(_Unwind_Exception *a1)
{
  void **v1;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

char *CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters::SetScaleBiasParams(uint64_t a1, __int128 *a2, float a3, float a4, float a5, float a6, float a7)
{
  _QWORD *v8;
  NSError *v15;
  CoreML::MLModelException *v16;
  char *result;
  NSError *v18;
  CoreML::MLModelException *exception;
  __int128 *v20;

  if (!*(_QWORD *)(a1 + 16))
  {
    +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("There are no inputs that are of type image, but still 'scale_image' op for preprocessing has been provided."));
    v18 = (NSError *)objc_claimAutoreleasedReturnValue();
    exception = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    CoreML::MLModelException::MLModelException(exception, v18);
  }
  v8 = *(_QWORD **)(a1 + 8);
  if (!v8)
  {
LABEL_7:
    +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("Unable to map image preprocessing feature name to any given image input name."));
    v15 = (NSError *)objc_claimAutoreleasedReturnValue();
    v16 = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    CoreML::MLModelException::MLModelException(v16, v15);
  }
  while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, v8 + 4))
  {
LABEL_6:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_7;
  }
  if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v8 + 4, a2))
  {
    ++v8;
    goto LABEL_6;
  }
  v20 = a2;
  *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 168), a2, &v20)+ 14) = a3;
  v20 = a2;
  *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 72), a2, &v20)+ 14) = a4;
  v20 = a2;
  *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 96), a2, &v20)+ 14) = a5;
  v20 = a2;
  *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 120), a2, &v20)+ 14) = a6;
  v20 = a2;
  result = std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 144), a2, &v20);
  *((float *)result + 14) = a7;
  return result;
}

void sub_19C86FC2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t operator<<<std::string,float>(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  result = operator<<(a1, a2[2]);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      v7 = operator<<(result, v5 + 4);
      result = operator<<(v7, *((float *)v5 + 14));
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != v4);
  }
  return result;
}

void sub_19C86FD90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C86FF64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  __cxa_free_exception(v4);

  _Unwind_Resume(a1);
}

void sub_19C870168(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void sub_19C87023C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C8703BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19C870520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C8711A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8712D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_19C871444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLFunctionInfo>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

std::string *CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo(std::string *this, const CoreML::NNCompiler::MLFunctionInfo *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;
  const CoreML::NNCompiler::MLFunctionInfo *v11;
  uint64_t **v12;
  uint64_t **v13;
  char *v14;
  std::string *v15;
  __int128 v16;
  const CoreML::NNCompiler::MLFunctionInfo *v17;
  const CoreML::NNCompiler::MLFunctionInfo *v18;
  BOOL v19;
  std::string::size_type v20;
  unint64_t *v21;
  unint64_t v22;
  std::string *v23;
  __int128 v24;
  int v25;
  uint64_t v27;
  uint64_t v28;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<std::string,CoreML::NNCompiler::MLShapeInfo>::map[abi:ne180100]((uint64_t)&this[1], (_QWORD *)a2 + 3);
  std::map<std::string,std::vector<int>>::map[abi:ne180100]((uint64_t)&this[2], (_QWORD *)a2 + 6);
  std::map<std::string,CoreML::NNCompiler::MLRangeShape>::map[abi:ne180100]((uint64_t)&this[3], (_QWORD *)a2 + 9);
  std::map<std::string,CoreML::NNCompiler::MLShapeInfo>::map[abi:ne180100]((uint64_t)&this[4], (_QWORD *)a2 + 12);
  std::map<std::string,std::vector<int>>::map[abi:ne180100]((uint64_t)&this[5], (_QWORD *)a2 + 15);
  std::map<std::string,CoreML::NNCompiler::MLRangeShape>::map[abi:ne180100]((uint64_t)&this[6], (_QWORD *)a2 + 18);
  this[7].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 21);
  v5 = *((_QWORD *)a2 + 22);
  this[7].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  this[7].__r_.__value_.__r.__words[2] = 0;
  this[8].__r_.__value_.__r.__words[0] = 0;
  this[8].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 184), *((__int128 **)a2 + 23), *((__int128 **)a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 3));
  this[8].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__r.__words[0] = 0;
  this[9].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 208), *((__int128 **)a2 + 26), *((__int128 **)a2 + 27), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 3));
  this[9].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 29);
  v8 = *((_QWORD *)a2 + 30);
  this[10].__r_.__value_.__r.__words[0] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  this[10].__r_.__value_.__l.__size_ = (std::string::size_type)&this[10].__r_.__value_.__r.__words[2];
  this[10].__r_.__value_.__r.__words[2] = 0;
  this[11].__r_.__value_.__r.__words[0] = 0;
  v11 = (const CoreML::NNCompiler::MLFunctionInfo *)*((_QWORD *)a2 + 31);
  if (v11 != (const CoreML::NNCompiler::MLFunctionInfo *)((char *)a2 + 256))
  {
    do
    {
      v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_equal<std::string>(&this[10].__r_.__value_.__l.__size_, &this[10].__r_.__value_.__r.__words[2], &v28, &v27, (_QWORD *)v11 + 4);
      if (!*v12)
      {
        v13 = v12;
        v14 = (char *)operator new(0x40uLL);
        v15 = (std::string *)(v14 + 32);
        if (*((char *)v11 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v15, *((const std::string::value_type **)v11 + 4), *((_QWORD *)v11 + 5));
        }
        else
        {
          v16 = *((_OWORD *)v11 + 2);
          *((_QWORD *)v14 + 6) = *((_QWORD *)v11 + 6);
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        }
        *((_DWORD *)v14 + 14) = *((_DWORD *)v11 + 14);
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)&this[10].__r_.__value_.__l.__size_, v28, v13, (uint64_t *)v14);
      }
      v17 = (const CoreML::NNCompiler::MLFunctionInfo *)*((_QWORD *)v11 + 1);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = *(const CoreML::NNCompiler::MLFunctionInfo **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (const CoreML::NNCompiler::MLFunctionInfo *)*((_QWORD *)v11 + 2);
          v19 = *(_QWORD *)v18 == (_QWORD)v11;
          v11 = v18;
        }
        while (!v19);
      }
      v11 = v18;
    }
    while (v18 != (const CoreML::NNCompiler::MLFunctionInfo *)((char *)a2 + 256));
  }
  this[11].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 34);
  v20 = *((_QWORD *)a2 + 35);
  this[11].__r_.__value_.__r.__words[2] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = this + 12;
  if (*((char *)a2 + 311) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *((const std::string::value_type **)a2 + 36), *((_QWORD *)a2 + 37));
  }
  else
  {
    v24 = *((_OWORD *)a2 + 18);
    this[12].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 38);
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
  }
  v25 = *((_DWORD *)a2 + 78);
  WORD2(this[13].__r_.__value_.__r.__words[0]) = *((_WORD *)a2 + 158);
  LODWORD(this[13].__r_.__value_.__l.__data_) = v25;
  return this;
}

void sub_19C871748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  char **v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*v14);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a11);
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*(_QWORD **)(v12 + 152));
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(_QWORD **)(v12 + 128));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*(_QWORD **)(v12 + 104));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*(_QWORD **)(v12 + 80));
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(_QWORD **)(v12 + 56));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*(_QWORD **)(v12 + 32));
  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,std::vector<int>>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<int>> const&>((uint64_t **)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_19C8718C0(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,CoreML::NNCompiler::MLRangeShape>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,CoreML::NNCompiler::MLRangeShape> const&>((uint64_t **)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_19C871968(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,CoreML::NNCompiler::MLRangeShape> const&>(uint64_t **a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  char *v18;
  _QWORD v20[2];
  char v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a2;
  v8 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2
    && !google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, a2 + 4))
  {
    if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6 + 4, a3))
    {
      v22 = v6;
      v23 = v6;
      v14 = &v22;
      if (v6)
        return v6;
      goto LABEL_31;
    }
    v12 = v6[1];
    if (v12)
    {
      v13 = (uint64_t *)v6[1];
      do
      {
        v14 = (uint64_t **)v13;
        v13 = (uint64_t *)*v13;
      }
      while (v13);
    }
    else
    {
      v17 = v6;
      do
      {
        v14 = (uint64_t **)v17[2];
        v16 = *v14 == v17;
        v17 = (uint64_t *)v14;
      }
      while (!v16);
    }
    if (v14 == v8 || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, v14 + 4))
    {
      if (v12)
      {
        v23 = (uint64_t *)v14;
      }
      else
      {
        v23 = v6;
        v14 = (uint64_t **)(v6 + 1);
      }
LABEL_30:
      v6 = *v14;
      if (*v14)
        return v6;
      goto LABEL_31;
    }
LABEL_29:
    v14 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v23, a3);
    goto LABEL_30;
  }
  v9 = *v6;
  if (*a1 == v6)
  {
    v11 = v6;
    goto LABEL_17;
  }
  if (v9)
  {
    v10 = (uint64_t *)*v6;
    do
    {
      v11 = v10;
      v10 = (uint64_t *)v10[1];
    }
    while (v10);
  }
  else
  {
    v15 = v6;
    do
    {
      v11 = (uint64_t *)v15[2];
      v16 = *v11 == (_QWORD)v15;
      v15 = v11;
    }
    while (v16);
  }
  if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v11 + 4, a3))
    goto LABEL_29;
LABEL_17:
  if (v9)
  {
    v23 = v11;
    v14 = (uint64_t **)(v11 + 1);
    goto LABEL_30;
  }
  v23 = v6;
  v14 = (uint64_t **)v6;
LABEL_31:
  v18 = (char *)operator new(0x68uLL);
  v6 = (uint64_t *)v18;
  v20[0] = v18;
  v20[1] = v8;
  v21 = 0;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v18 + 32), *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *((_OWORD *)v18 + 2) = *(_OWORD *)a4;
    *((_QWORD *)v18 + 6) = *(_QWORD *)(a4 + 16);
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v6 + 7, *(const void **)(a4 + 24), *(_QWORD *)(a4 + 32), (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  v6[10] = 0;
  v6[11] = 0;
  v6[12] = 0;
  std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__init_with_size[abi:ne180100]<CoreML::NNCompiler::MLRangeShape::Range*,CoreML::NNCompiler::MLRangeShape::Range*>(v6 + 10, *(const void **)(a4 + 48), *(_QWORD *)(a4 + 56), (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 4);
  v21 = 1;
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v23, v14, v6);
  v20[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>>>>::reset[abi:ne180100]((uint64_t)v20);
  return v6;
}

void sub_19C871BA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLRangeShape>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<int>> const&>(uint64_t **a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  char *v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_equal<std::string>(a1, a2, &v14, &v13, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v9 = (char *)operator new(0x50uLL);
    v7 = (uint64_t *)v9;
    v11[0] = v9;
    v11[1] = a1 + 1;
    v12 = 0;
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v9 + 32), *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *((_OWORD *)v9 + 2) = *(_OWORD *)a4;
      *((_QWORD *)v9 + 6) = *(_QWORD *)(a4 + 16);
    }
    v7[7] = 0;
    v7[8] = 0;
    v7[9] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v7 + 7, *(const void **)(a4 + 24), *(_QWORD *)(a4 + 32), (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 2);
    v12 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v14, v8, v7);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v7;
}

void sub_19C871D0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C871D94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 result;
  int v31;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  v3 = a2 + 2;
  v4 = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = a1 + 32;
  v6 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *((_QWORD *)a2 + 3) = v3;
    *v3 = 0;
    *((_QWORD *)a2 + 5) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = v5;
  }
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  v7 = (_QWORD *)a2 + 7;
  v8 = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = a1 + 56;
  v10 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 64) = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *((_QWORD *)a2 + 6) = v7;
    *v7 = 0;
    *((_QWORD *)a2 + 8) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v9;
  }
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  v11 = a2 + 5;
  v12 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 80) = v12;
  v13 = a1 + 80;
  v14 = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 88) = v14;
  if (v14)
  {
    *(_QWORD *)(v12 + 16) = v13;
    *((_QWORD *)a2 + 9) = v11;
    *v11 = 0;
    *((_QWORD *)a2 + 11) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 72) = v13;
  }
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  v15 = (_QWORD *)a2 + 13;
  v16 = *((_QWORD *)a2 + 13);
  *(_QWORD *)(a1 + 104) = v16;
  v17 = a1 + 104;
  v18 = *((_QWORD *)a2 + 14);
  *(_QWORD *)(a1 + 112) = v18;
  if (v18)
  {
    *(_QWORD *)(v16 + 16) = v17;
    *((_QWORD *)a2 + 12) = v15;
    *v15 = 0;
    *((_QWORD *)a2 + 14) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 96) = v17;
  }
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  v19 = a2 + 8;
  v20 = *((_QWORD *)a2 + 16);
  *(_QWORD *)(a1 + 128) = v20;
  v21 = a1 + 128;
  v22 = *((_QWORD *)a2 + 17);
  *(_QWORD *)(a1 + 136) = v22;
  if (v22)
  {
    *(_QWORD *)(v20 + 16) = v21;
    *((_QWORD *)a2 + 15) = v19;
    *v19 = 0;
    *((_QWORD *)a2 + 17) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 120) = v21;
  }
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  v23 = (_QWORD *)a2 + 19;
  v24 = *((_QWORD *)a2 + 19);
  *(_QWORD *)(a1 + 152) = v24;
  v25 = a1 + 152;
  v26 = *((_QWORD *)a2 + 20);
  *(_QWORD *)(a1 + 160) = v26;
  if (v26)
  {
    *(_QWORD *)(v24 + 16) = v25;
    *((_QWORD *)a2 + 18) = v23;
    *v23 = 0;
    *((_QWORD *)a2 + 20) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 144) = v25;
  }
  *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 168);
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = *(__int128 *)((char *)a2 + 184);
  *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 23) = 0;
  *((_QWORD *)a2 + 24) = 0;
  *((_QWORD *)a2 + 25) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = 0;
  *((_QWORD *)a2 + 28) = 0;
  *(_OWORD *)(a1 + 232) = *(__int128 *)((char *)a2 + 232);
  *((_QWORD *)a2 + 29) = 0;
  *((_QWORD *)a2 + 30) = 0;
  *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
  v27 = a1 + 256;
  v28 = *((_QWORD *)a2 + 32);
  *(_QWORD *)(a1 + 256) = v28;
  v29 = *((_QWORD *)a2 + 33);
  *(_QWORD *)(a1 + 264) = v29;
  if (v29)
  {
    *(_QWORD *)(v28 + 16) = v27;
    *((_QWORD *)a2 + 31) = a2 + 16;
    *((_QWORD *)a2 + 32) = 0;
    *((_QWORD *)a2 + 33) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 248) = v27;
  }
  *(_OWORD *)(a1 + 272) = a2[17];
  *((_QWORD *)a2 + 34) = 0;
  *((_QWORD *)a2 + 35) = 0;
  result = (__n128)a2[18];
  *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
  *(__n128 *)(a1 + 288) = result;
  *((_QWORD *)a2 + 37) = 0;
  *((_QWORD *)a2 + 38) = 0;
  *((_QWORD *)a2 + 36) = 0;
  v31 = *((_DWORD *)a2 + 78);
  *(_WORD *)(a1 + 316) = *((_WORD *)a2 + 158);
  *(_DWORD *)(a1 + 312) = v31;
  return result;
}

uint64_t CoreML::NNCompiler::MLModelInfo::MLModelInfo(uint64_t a1, int a2, __int128 *a3, uint64_t a4, void *a5, int a6, _QWORD *a7)
{
  id v13;
  std::string *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 v19;
  char *v20;
  char *v21;
  id v22;
  id v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  std::string v29;
  __int128 v30[20];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v13 = a5;
  *(_DWORD *)a1 = a2;
  v24 = v13;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v29 = *(std::string *)a4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v25 = (uint64_t *)(a1 + 8);
  LOBYTE(v26) = 0;
  v14 = (std::string *)operator new(0x18uLL);
  *(_QWORD *)(a1 + 24) = v14 + 1;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 16) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(a1 + 24, (__int128 *)&v29, v30, v14);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v15 = *(__int128 **)(a1 + 8);
  if (*((char *)v15 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
  }
  else
  {
    v16 = *v15;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)v15 + 2);
    *(_OWORD *)(a1 + 32) = v16;
  }
  v17 = *a3;
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 56) = v17;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v18 = *(__int128 **)(a1 + 8);
  if (*((char *)v18 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
  }
  else
  {
    v19 = *v18;
    v29.__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v19;
  }
  CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo((uint64_t)v30, (__int128 *)a4);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  v28 = a1 + 88;
  v20 = (char *)operator new(0x178uLL);
  v21 = v20;
  v25 = (uint64_t *)v20;
  v26 = a1 + 88;
  v27 = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v20 + 32), v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v20 + 32) = v29;
  CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo((std::string *)(v21 + 56), (const CoreML::NNCompiler::MLFunctionInfo *)v30);
  v27 = 1;
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)(a1 + 80), v28, (uint64_t **)(a1 + 88), v25);
  v25 = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&v25);
  CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)v30);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 104) = 0;
  v22 = v24;
  *(_QWORD *)(a1 + 112) = v22;
  *(_DWORD *)(a1 + 120) = a6;
  std::map<std::string,std::string>::map[abi:ne180100]((_QWORD *)(a1 + 128), a7);

  return a1;
}

void sub_19C87224C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void **v21;
  _QWORD **v22;
  CoreML::NNCompiler::MLFunctionInfo *v23;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&a11);
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>>>::destroy(*v22);
  CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo(v23);
  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 79) < 0)
    operator delete(*(void **)(v20 + 56));
  if (*(char *)(v20 + 55) < 0)
    operator delete(*v21);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_19C873068(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8735E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C8738A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C873B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19C873CC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;
  if (v5)
    operator delete(v5);
  if (v3)
    operator delete(v3);

  _Unwind_Resume(a1);
}

void std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(void **a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  void *v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  void *__p[5];

  if (a5 < 1)
    return;
  v6 = __src;
  v9 = a1 + 2;
  v10 = a1[2];
  v11 = (unint64_t)a1[1];
  if (a5 > (uint64_t)&v10[-v11] >> 2)
  {
    v12 = *a1;
    v13 = a5 + ((uint64_t)(v11 - (_QWORD)*a1) >> 2);
    if (v13 >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v14 = (__dst - v12) >> 2;
    v15 = v10 - v12;
    if (v15 >> 1 > v13)
      v13 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v13;
    __p[4] = v9;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v16);
    else
      v17 = 0;
    v27 = (_DWORD *)(v16 + 4 * v14);
    __p[0] = (void *)v16;
    __p[1] = v27;
    __p[3] = (void *)(v16 + 4 * v17);
    v28 = 4 * a5;
    v29 = &v27[a5];
    do
    {
      v30 = *(_DWORD *)v6;
      v6 += 4;
      *v27++ = v30;
      v28 -= 4;
    }
    while (v28);
    __p[2] = v29;
    std::vector<float>::__swap_out_circular_buffer(a1, (uint64_t)__p, __dst);
    if (__p[0])
      operator delete(__p[0]);
    return;
  }
  v18 = v11 - (_QWORD)__dst;
  v19 = (uint64_t)(v11 - (_QWORD)__dst) >> 2;
  if (v19 >= a5)
  {
    v20 = &__src[4 * a5];
    v22 = (char *)a1[1];
LABEL_17:
    v23 = &__dst[4 * a5];
    v24 = &v22[-4 * a5];
    v25 = v22;
    if ((unint64_t)v24 < v11)
    {
      v25 = v22;
      do
      {
        v26 = *(_DWORD *)v24;
        v24 += 4;
        *(_DWORD *)v25 = v26;
        v25 += 4;
      }
      while ((unint64_t)v24 < v11);
    }
    a1[1] = v25;
    if (v22 != v23)
      memmove(&v22[-4 * ((v22 - v23) >> 2)], __dst, v22 - v23);
    if (v20 != v6)
      memmove(__dst, v6, v20 - v6);
    return;
  }
  v20 = &__src[4 * v19];
  v21 = a4 - v20;
  if (a4 != v20)
    memmove(a1[1], &__src[4 * v19], a4 - v20);
  v22 = (char *)(v11 + v21);
  a1[1] = (void *)(v11 + v21);
  if (v18 >= 1)
    goto LABEL_17;
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C873FB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ***std::back_insert_iterator<std::vector<std::pair<unsigned long,float>>>::operator=[abi:ne180100](void ***a1, _OWORD *a2)
{
  void **v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  char *v15;
  char *v16;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = ((char *)v6 - (_BYTE *)*v4) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*v4;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v11);
    else
      v12 = 0;
    v13 = (_OWORD *)(v11 + 16 * v8);
    v14 = v11 + 16 * v12;
    *v13 = *a2;
    v7 = v13 + 1;
    v16 = (char *)*v4;
    v15 = (char *)v4[1];
    if (v15 != *v4)
    {
      do
      {
        *--v13 = *((_OWORD *)v15 - 1);
        v15 -= 16;
      }
      while (v15 != v16);
      v15 = (char *)*v4;
    }
    *v4 = v13;
    v4[1] = v7;
    v4[2] = (void *)v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  v4[1] = v7;
  return a1;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::__wrap_iter<std::pair<unsigned long,float> *>>(uint64_t result, uint64_t a2, float *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 >= 2)
  {
    v3 = (uint64_t)a3 - result;
    v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 4)
    {
      v5 = v3 >> 3;
      v6 = (v3 >> 3) | 1;
      v7 = (float *)(result + 16 * v6);
      v8 = v5 + 2;
      if (v8 < a2 && v7[2] < v7[6])
      {
        v7 += 4;
        v6 = v8;
      }
      v9 = a3[2];
      if (v7[2] >= v9)
      {
        v10 = *(_QWORD *)a3;
        do
        {
          v11 = a3;
          a3 = v7;
          *(_QWORD *)v11 = *(_QWORD *)v7;
          v11[2] = v7[2];
          if (v4 < v6)
            break;
          v12 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (float *)(result + 16 * v6);
          v13 = v12 + 2;
          if (v13 < a2 && v7[2] < v7[6])
          {
            v7 += 4;
            v6 = v13;
          }
        }
        while (v7[2] >= v9);
        *(_QWORD *)a3 = v10;
        a3[2] = v9;
      }
    }
  }
  return result;
}

void CoreML::NNCompiler::Backend::MIL::Ios15::Translations::TranslateClassify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned __int8 **Name;
  unsigned __int8 **v7;
  uint64_t ArgumentName;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  void *__p;
  char v23;
  std::string v24;
  std::__split_buffer<std::string> __v;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 176))(a3);
  Name = (unsigned __int8 **)MIL::IRNamedValueType::GetName(**(MIL::IRNamedValueType ***)v5);
  if (CoreML::NNCompiler::Backend::MIL::MILBlockBuilder::RemoveOutput(a4, Name)
    && *(_QWORD *)(v5 + 8) - *(_QWORD *)v5 == 32)
  {
    v7 = (unsigned __int8 **)MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)(*(_QWORD *)v5 + 16));
    CoreML::NNCompiler::Backend::MIL::MILBlockBuilder::RemoveOutput(a4, v7);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "probabilities");
  ArgumentName = MIL::IROperation::GetArgumentName();
  if (*(char *)(ArgumentName + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)ArgumentName, *(_QWORD *)(ArgumentName + 8));
  }
  else
  {
    v9 = *(_OWORD *)ArgumentName;
    v24.__r_.__value_.__r.__words[2] = *(_QWORD *)(ArgumentName + 16);
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v9;
  }
  v10 = *(_QWORD *)(a4 + 48);
  v11 = *(_QWORD *)(a4 + 56);
  if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v10, v11, (unsigned __int8 **)&v24) == v11)
  {
    v12 = *(_QWORD *)(a4 + 64);
    if (v11 >= v12)
    {
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
      v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v10) >> 3);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      if (v17 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v16;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 64);
      if (v18)
        v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4 + 64, v18);
      else
        v19 = 0;
      v20 = v19 + v15;
      __v.__first_ = v19;
      __v.__begin_ = v20;
      __v.__end_cap_.__value_ = &v19[v18];
      v21 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
      v20->__r_.__value_.__r.__words[2] = v24.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
      memset(&v24, 0, sizeof(v24));
      __v.__end_ = v20 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a4 + 48), &__v);
      v14 = *(_QWORD *)(a4 + 56);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      v13 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
      *(_QWORD *)(v11 + 16) = *((_QWORD *)&v24.__r_.__value_.__l + 2);
      *(_OWORD *)v11 = v13;
      memset(&v24, 0, sizeof(v24));
      v14 = v11 + 24;
      *(_QWORD *)(a4 + 56) = v11 + 24;
    }
    *(_QWORD *)(a4 + 56) = v14;
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(__p);
}

void sub_19C874390(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *__p, uint64_t a9, void *a10, std::__split_buffer<std::string> *a11, int a12, __int16 a13, char a14, char a15, void *__pa, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a22);
  if (a21 < 0)
    operator delete(__pa);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

uint64_t CoreML::ModelStructure::Path::appendComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a1;
  v2 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **))off_1E3D658E8[v2])(&v5);
}

uint64_t ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***result)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  std::runtime_error *exception;
  std::string v12;
  _QWORD v13[2];
  _QWORD v14[33];

  v1 = **result;
  v2 = *v1;
  if (*v1 != v1[1])
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Failed to append ", 17);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Root", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", components must be empty.", 27);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v12);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = v1[2];
  if (v2 >= v3)
  {
    v14[2] = v1 + 2;
    v5 = v3 - v2;
    v6 = v5 >> 4;
    if ((unint64_t)(v5 >> 4) <= 1)
      v6 = 1;
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0)
      v7 = 0x7FFFFFFFFFFFFFFLL;
    else
      v7 = v6;
    v13[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v7);
    v13[1] = v13[0];
    v14[0] = v13[0] + 32;
    v14[1] = v13[0] + 32 * v8;
    *(_DWORD *)(v13[0] + 24) = 0;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v1, v13);
    v4 = v1[1];
    result = (uint64_t ***)std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)v13);
  }
  else
  {
    *(_DWORD *)(v2 + 24) = 0;
    v4 = v2 + 32;
    v1[1] = v2 + 32;
  }
  v1[1] = v4;
  return result;
}

void sub_19C874A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;
  int v35;
  uint64_t v37;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      a15 = *MEMORY[0x1E0DE4F50];
      v37 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      a17 = v37;
      a18 = MEMORY[0x1E0DE4FB8] + 16;
      if (a31 < 0)
        operator delete(a26);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD61C4](&a34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

uint64_t ***std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***result)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::runtime_error *exception;
  std::string v24;
  _DWORD *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t *v29;

  v1 = **result;
  v2 = *v1;
  v3 = v1[1];
  v4 = v3 - *v1;
  if (v4 != 32 || *(_DWORD *)(v3 - 8))
  {
    if (v3 != v2 && *(_DWORD *)(v3 - 8) != 8)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v25);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Failed to append ", 17);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Program", 7);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" component, last component is not a ", 36);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"SubModel", 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)".", 1);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v24);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v5 = v1[2];
    if (v3 < v5)
      goto LABEL_6;
    v7 = v4 >> 5;
    v8 = (v4 >> 5) + 1;
    if (v8 >> 59)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v9 = v5 - v2;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    v29 = v1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v10);
    else
      v11 = 0;
    v18 = v10 + 32 * v7;
    v25 = (_DWORD *)v10;
    v26 = (char *)v18;
    v28 = (char *)(v10 + 32 * v11);
    *(_DWORD *)(v18 + 24) = 1;
    v27 = (char *)(v18 + 32);
LABEL_24:
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v1, &v25);
    v6 = v1[1];
    result = (uint64_t ***)std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)&v25);
    goto LABEL_25;
  }
  v12 = v1[2];
  if (v3 >= v12)
  {
    v13 = v12 - v2;
    v14 = v13 >> 4;
    if ((unint64_t)(v13 >> 4) <= 2)
      v14 = 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v29 = v1 + 2;
    v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v15);
    v25 = v16;
    v26 = (char *)(v16 + 8);
    v16[14] = 1;
    v27 = (char *)(v16 + 16);
    v28 = (char *)&v16[8 * v17];
    goto LABEL_24;
  }
LABEL_6:
  *(_DWORD *)(v3 + 24) = 1;
  v6 = v3 + 32;
  v1[1] = v3 + 32;
LABEL_25:
  v1[1] = v6;
  return result;
}

void sub_19C874CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;
  int v35;
  uint64_t v37;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      a15 = *MEMORY[0x1E0DE4F50];
      v37 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      a17 = v37;
      a18 = MEMORY[0x1E0DE4FB8] + 16;
      if (a31 < 0)
        operator delete(a26);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD61C4](&a34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v2;
  std::string::size_type v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::runtime_error *exception;
  std::string v22;
  std::string v23;
  _QWORD v24[2];
  _QWORD v25[33];
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v22 = *(std::string *)a2;
  v26[0] = v22.__r_.__value_.__l.__size_;
  v3 = v22.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v22.__r_.__value_.__r.__words[1] + 7);
  v4 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  memset(&v22, 0, sizeof(v22));
  v5 = v2[1];
  v6 = v5 - *v2;
  if (v5 != *v2 && *(_DWORD *)(v5 - 8) != 1)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Failed to append ", 17);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Function", 8);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" component, last component is not a ", 36);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Program", 7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)".", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = v2[2];
  if (v5 >= v7)
  {
    v10 = v6 >> 5;
    v11 = (v6 >> 5) + 1;
    if (v11 >> 59)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v12 = v7 - *v2;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v25[2] = v2 + 2;
    if (v13)
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v13);
    else
      v14 = 0;
    v15 = v13 + 32 * v10;
    v24[0] = v13;
    v24[1] = v15;
    v25[1] = v13 + 32 * v14;
    v16 = v26[0];
    *(_QWORD *)v15 = v3;
    *(_QWORD *)(v15 + 8) = v16;
    *(_QWORD *)(v15 + 15) = *(_QWORD *)((char *)v26 + 7);
    *(_BYTE *)(v15 + 23) = v4;
    *(_DWORD *)(v15 + 24) = 2;
    v25[0] = v15 + 32;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v2, v24);
    v9 = v2[1];
    std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)v24);
  }
  else
  {
    v8 = v26[0];
    *(_QWORD *)v5 = v3;
    *(_QWORD *)(v5 + 8) = v8;
    *(_QWORD *)(v5 + 15) = *(_QWORD *)((char *)v26 + 7);
    *(_BYTE *)(v5 + 23) = v4;
    *(_DWORD *)(v5 + 24) = 2;
    v9 = v5 + 32;
    v2[1] = v5 + 32;
  }
  v2[1] = v9;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_19C874FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  void *v43;
  void *v44;
  int v45;
  uint64_t v47;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v45 & 1) == 0)
    {
LABEL_6:
      a24 = *MEMORY[0x1E0DE4F50];
      v47 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(uint64_t *)((char *)&a24 + *(_QWORD *)(a24 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      a26 = v47;
      a27 = MEMORY[0x1E0DE4FB8] + 16;
      if (a40 < 0)
        operator delete(a35);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD61C4](&a43);
      if (a11 < 0)
        operator delete(v43);
      if (a17 < 0)
        operator delete(a12);
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v44);
  goto LABEL_6;
}

uint64_t ***std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::runtime_error *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::runtime_error *exception;
  std::string v23;
  _QWORD v24[2];
  _QWORD v25[33];

  v2 = **result;
  v3 = *a2;
  v4 = v2[1];
  v5 = (uint64_t)(v4 - *v2) >> 5;
  if (*a2 < 0)
  {
    if (v4 != *v2 && *(_DWORD *)(v4 - 8) != 2)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Failed to append ", 17);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Block", 5);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" component, last component is not a ", 36);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Function", 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)".", 1);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v23);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else if (v4 != *v2 && *(_DWORD *)(v4 - 8) != 4)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Failed to append ", 17);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Block", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" component, last component is not a ", 36);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Operation", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)".", 1);
    v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v10, &v23);
    __cxa_throw(v10, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = v2[2];
  if (v4 >= v11)
  {
    v13 = v5 + 1;
    if ((unint64_t)(v5 + 1) >> 59)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v14 = v11 - *v2;
    if (v14 >> 4 > v13)
      v13 = v14 >> 4;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v25[2] = v2 + 2;
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v15);
    else
      v16 = 0;
    v17 = v15 + 32 * v5;
    v24[0] = v15;
    v24[1] = v17;
    v25[1] = v15 + 32 * v16;
    *(_QWORD *)v17 = v3;
    *(_DWORD *)(v17 + 24) = 3;
    v25[0] = v17 + 32;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v2, v24);
    v12 = v2[1];
    result = (uint64_t ***)std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)v24);
  }
  else
  {
    *(_QWORD *)v4 = v3;
    *(_DWORD *)(v4 + 24) = 3;
    v12 = v4 + 32;
    v2[1] = v4 + 32;
  }
  v2[1] = v12;
  return result;
}

void sub_19C875304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;
  int v35;
  uint64_t v37;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      a15 = *MEMORY[0x1E0DE4F50];
      v37 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      a17 = v37;
      a18 = MEMORY[0x1E0DE4FB8] + 16;
      if (a31 < 0)
        operator delete(a26);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD61C4](&a34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v2;
  std::string::size_type v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::runtime_error *exception;
  std::string v22;
  std::string v23;
  _QWORD v24[2];
  _QWORD v25[33];
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v22 = *(std::string *)a2;
  v26[0] = v22.__r_.__value_.__l.__size_;
  v3 = v22.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v22.__r_.__value_.__r.__words[1] + 7);
  v4 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  memset(&v22, 0, sizeof(v22));
  v5 = v2[1];
  v6 = v5 - *v2;
  if (v5 != *v2 && *(_DWORD *)(v5 - 8) != 3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Failed to append ", 17);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Operation", 9);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" component, last component is not a ", 36);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Block", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)".", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = v2[2];
  if (v5 >= v7)
  {
    v10 = v6 >> 5;
    v11 = (v6 >> 5) + 1;
    if (v11 >> 59)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v12 = v7 - *v2;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v25[2] = v2 + 2;
    if (v13)
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v13);
    else
      v14 = 0;
    v15 = v13 + 32 * v10;
    v24[0] = v13;
    v24[1] = v15;
    v25[1] = v13 + 32 * v14;
    v16 = v26[0];
    *(_QWORD *)v15 = v3;
    *(_QWORD *)(v15 + 8) = v16;
    *(_QWORD *)(v15 + 15) = *(_QWORD *)((char *)v26 + 7);
    *(_BYTE *)(v15 + 23) = v4;
    *(_DWORD *)(v15 + 24) = 4;
    v25[0] = v15 + 32;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v2, v24);
    v9 = v2[1];
    std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)v24);
  }
  else
  {
    v8 = v26[0];
    *(_QWORD *)v5 = v3;
    *(_QWORD *)(v5 + 8) = v8;
    *(_QWORD *)(v5 + 15) = *(_QWORD *)((char *)v26 + 7);
    *(_BYTE *)(v5 + 23) = v4;
    *(_DWORD *)(v5 + 24) = 4;
    v9 = v5 + 32;
    v2[1] = v5 + 32;
  }
  v2[1] = v9;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_19C87560C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  void *v43;
  void *v44;
  int v45;
  uint64_t v47;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v45 & 1) == 0)
    {
LABEL_6:
      a24 = *MEMORY[0x1E0DE4F50];
      v47 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(uint64_t *)((char *)&a24 + *(_QWORD *)(a24 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      a26 = v47;
      a27 = MEMORY[0x1E0DE4FB8] + 16;
      if (a40 < 0)
        operator delete(a35);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD61C4](&a43);
      if (a11 < 0)
        operator delete(v43);
      if (a17 < 0)
        operator delete(a12);
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v44);
  goto LABEL_6;
}

uint64_t ***std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***result)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::runtime_error *exception;
  std::string v24;
  _DWORD *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t *v29;

  v1 = **result;
  v2 = *v1;
  v3 = v1[1];
  v4 = v3 - *v1;
  if (v4 != 32 || *(_DWORD *)(v3 - 8))
  {
    if (v3 != v2 && *(_DWORD *)(v3 - 8) != 8)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v25);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Failed to append ", 17);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"NeuralNetwork", 13);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" component, last component is not a ", 36);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"SubModel", 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)".", 1);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v24);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v5 = v1[2];
    if (v3 < v5)
      goto LABEL_6;
    v7 = v4 >> 5;
    v8 = (v4 >> 5) + 1;
    if (v8 >> 59)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v9 = v5 - v2;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    v29 = v1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v10);
    else
      v11 = 0;
    v18 = v10 + 32 * v7;
    v25 = (_DWORD *)v10;
    v26 = (char *)v18;
    v28 = (char *)(v10 + 32 * v11);
    *(_DWORD *)(v18 + 24) = 5;
    v27 = (char *)(v18 + 32);
LABEL_24:
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v1, &v25);
    v6 = v1[1];
    result = (uint64_t ***)std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)&v25);
    goto LABEL_25;
  }
  v12 = v1[2];
  if (v3 >= v12)
  {
    v13 = v12 - v2;
    v14 = v13 >> 4;
    if ((unint64_t)(v13 >> 4) <= 2)
      v14 = 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v29 = v1 + 2;
    v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v15);
    v25 = v16;
    v26 = (char *)(v16 + 8);
    v16[14] = 5;
    v27 = (char *)(v16 + 16);
    v28 = (char *)&v16[8 * v17];
    goto LABEL_24;
  }
LABEL_6:
  *(_DWORD *)(v3 + 24) = 5;
  v6 = v3 + 32;
  v1[1] = v3 + 32;
LABEL_25:
  v1[1] = v6;
  return result;
}

void sub_19C8758F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;
  int v35;
  uint64_t v37;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      a15 = *MEMORY[0x1E0DE4F50];
      v37 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      a17 = v37;
      a18 = MEMORY[0x1E0DE4FB8] + 16;
      if (a31 < 0)
        operator delete(a26);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD61C4](&a34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v2;
  std::string::size_type v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::runtime_error *exception;
  std::string v22;
  std::string v23;
  _QWORD v24[2];
  _QWORD v25[33];
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v22 = *(std::string *)a2;
  v26[0] = v22.__r_.__value_.__l.__size_;
  v3 = v22.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v22.__r_.__value_.__r.__words[1] + 7);
  v4 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  memset(&v22, 0, sizeof(v22));
  v5 = v2[1];
  v6 = v5 - *v2;
  if (v5 != *v2 && *(_DWORD *)(v5 - 8) != 5)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Failed to append ", 17);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Layer", 5);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" component, last component is not a ", 36);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"NeuralNetwork", 13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)".", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = v2[2];
  if (v5 >= v7)
  {
    v10 = v6 >> 5;
    v11 = (v6 >> 5) + 1;
    if (v11 >> 59)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v12 = v7 - *v2;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v25[2] = v2 + 2;
    if (v13)
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v13);
    else
      v14 = 0;
    v15 = v13 + 32 * v10;
    v24[0] = v13;
    v24[1] = v15;
    v25[1] = v13 + 32 * v14;
    v16 = v26[0];
    *(_QWORD *)v15 = v3;
    *(_QWORD *)(v15 + 8) = v16;
    *(_QWORD *)(v15 + 15) = *(_QWORD *)((char *)v26 + 7);
    *(_BYTE *)(v15 + 23) = v4;
    *(_DWORD *)(v15 + 24) = 6;
    v25[0] = v15 + 32;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v2, v24);
    v9 = v2[1];
    std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)v24);
  }
  else
  {
    v8 = v26[0];
    *(_QWORD *)v5 = v3;
    *(_QWORD *)(v5 + 8) = v8;
    *(_QWORD *)(v5 + 15) = *(_QWORD *)((char *)v26 + 7);
    *(_BYTE *)(v5 + 23) = v4;
    *(_DWORD *)(v5 + 24) = 6;
    v9 = v5 + 32;
    v2[1] = v5 + 32;
  }
  v2[1] = v9;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_19C875BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  void *v43;
  void *v44;
  int v45;
  uint64_t v47;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v45 & 1) == 0)
    {
LABEL_6:
      a24 = *MEMORY[0x1E0DE4F50];
      v47 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(uint64_t *)((char *)&a24 + *(_QWORD *)(a24 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      a26 = v47;
      a27 = MEMORY[0x1E0DE4FB8] + 16;
      if (a40 < 0)
        operator delete(a35);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD61C4](&a43);
      if (a11 < 0)
        operator delete(v43);
      if (a17 < 0)
        operator delete(a12);
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v44);
  goto LABEL_6;
}

uint64_t ***std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***result)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::runtime_error *exception;
  std::string v24;
  _DWORD *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t *v29;

  v1 = **result;
  v2 = *v1;
  v3 = v1[1];
  v4 = v3 - *v1;
  if (v4 != 32 || *(_DWORD *)(v3 - 8))
  {
    if (v3 != v2 && *(_DWORD *)(v3 - 8) != 8)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v25);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Failed to append ", 17);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Pipeline", 8);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" component, last component is not a ", 36);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"SubModel", 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)".", 1);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v24);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v5 = v1[2];
    if (v3 < v5)
      goto LABEL_6;
    v7 = v4 >> 5;
    v8 = (v4 >> 5) + 1;
    if (v8 >> 59)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v9 = v5 - v2;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    v29 = v1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v10);
    else
      v11 = 0;
    v18 = v10 + 32 * v7;
    v25 = (_DWORD *)v10;
    v26 = (char *)v18;
    v28 = (char *)(v10 + 32 * v11);
    *(_DWORD *)(v18 + 24) = 7;
    v27 = (char *)(v18 + 32);
LABEL_24:
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v1, &v25);
    v6 = v1[1];
    result = (uint64_t ***)std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)&v25);
    goto LABEL_25;
  }
  v12 = v1[2];
  if (v3 >= v12)
  {
    v13 = v12 - v2;
    v14 = v13 >> 4;
    if ((unint64_t)(v13 >> 4) <= 2)
      v14 = 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v29 = v1 + 2;
    v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v15);
    v25 = v16;
    v26 = (char *)(v16 + 8);
    v16[14] = 7;
    v27 = (char *)(v16 + 16);
    v28 = (char *)&v16[8 * v17];
    goto LABEL_24;
  }
LABEL_6:
  *(_DWORD *)(v3 + 24) = 7;
  v6 = v3 + 32;
  v1[1] = v3 + 32;
LABEL_25:
  v1[1] = v6;
  return result;
}

void sub_19C875ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;
  int v35;
  uint64_t v37;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      a15 = *MEMORY[0x1E0DE4F50];
      v37 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      a17 = v37;
      a18 = MEMORY[0x1E0DE4FB8] + 16;
      if (a31 < 0)
        operator delete(a26);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD61C4](&a34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v2;
  std::string::size_type v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::runtime_error *exception;
  std::string v22;
  std::string v23;
  _QWORD v24[2];
  _QWORD v25[33];
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v22 = *(std::string *)a2;
  v26[0] = v22.__r_.__value_.__l.__size_;
  v3 = v22.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v22.__r_.__value_.__r.__words[1] + 7);
  v4 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  memset(&v22, 0, sizeof(v22));
  v5 = v2[1];
  v6 = v5 - *v2;
  if (v5 != *v2 && *(_DWORD *)(v5 - 8) != 7)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Failed to append ", 17);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"SubModel", 8);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" component, last component is not a ", 36);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Pipeline", 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)".", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = v2[2];
  if (v5 >= v7)
  {
    v10 = v6 >> 5;
    v11 = (v6 >> 5) + 1;
    if (v11 >> 59)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v12 = v7 - *v2;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v25[2] = v2 + 2;
    if (v13)
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v13);
    else
      v14 = 0;
    v15 = v13 + 32 * v10;
    v24[0] = v13;
    v24[1] = v15;
    v25[1] = v13 + 32 * v14;
    v16 = v26[0];
    *(_QWORD *)v15 = v3;
    *(_QWORD *)(v15 + 8) = v16;
    *(_QWORD *)(v15 + 15) = *(_QWORD *)((char *)v26 + 7);
    *(_BYTE *)(v15 + 23) = v4;
    *(_DWORD *)(v15 + 24) = 8;
    v25[0] = v15 + 32;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v2, v24);
    v9 = v2[1];
    std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)v24);
  }
  else
  {
    v8 = v26[0];
    *(_QWORD *)v5 = v3;
    *(_QWORD *)(v5 + 8) = v8;
    *(_QWORD *)(v5 + 15) = *(_QWORD *)((char *)v26 + 7);
    *(_BYTE *)(v5 + 23) = v4;
    *(_DWORD *)(v5 + 24) = 8;
    v9 = v5 + 32;
    v2[1] = v5 + 32;
  }
  v2[1] = v9;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_19C8761D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  void *v43;
  void *v44;
  int v45;
  uint64_t v47;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v45 & 1) == 0)
    {
LABEL_6:
      a24 = *MEMORY[0x1E0DE4F50];
      v47 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(uint64_t *)((char *)&a24 + *(_QWORD *)(a24 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      a26 = v47;
      a27 = MEMORY[0x1E0DE4FB8] + 16;
      if (a40 < 0)
        operator delete(a35);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD61C4](&a43);
      if (a11 < 0)
        operator delete(v43);
      if (a17 < 0)
        operator delete(a12);
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v44);
  goto LABEL_6;
}

uint64_t std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::__move_constructor(result - 32, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor(i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t CoreML::ModelStructure::Path::replace(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  std::logic_error *exception;
  uint64_t v17;
  char v18;

  v4 = *(_DWORD *)(a3 + 24);
  v5 = *(_DWORD *)(a4 + 24);
  v6 = v5 == v4;
  v7 = v5 == -1;
  v8 = v5 == -1;
  if (v7)
    v6 = 0;
  if (v4 == -1)
    v9 = v8;
  else
    v9 = v6;
  if (!v9)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "The old value and the new value must be of the same type.");
    __cxa_throw(exception, (struct type_info *)off_1E3D427E8, MEMORY[0x1E0DE4360]);
  }
  for (i = result; i != a2; i += 32)
  {
    result = std::operator==[abi:ne180100]<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>(i, a3);
    if ((_DWORD)result)
    {
      v14 = *(unsigned int *)(i + 24);
      v15 = *(unsigned int *)(a4 + 24);
      if ((_DWORD)v14 == -1)
      {
        if ((_DWORD)v15 != -1)
        {
LABEL_13:
          v17 = i;
          result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E3D65930[v15])(&v17, i, a4);
        }
      }
      else
      {
        if ((_DWORD)v15 != -1)
          goto LABEL_13;
        result = ((uint64_t (*)(char *, uint64_t))off_1E3D658A0[v14])(&v18, i);
        *(_DWORD *)(i + 24) = -1;
      }
    }
  }
  return result;
}

void sub_19C8764A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D658A0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 1)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D658A0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 1;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(__n128 **a1, std::string *this, std::string *__str)
{
  __n128 *v3;
  unsigned __int32 v4;
  __n128 result;
  std::string v6;
  char v7;

  v3 = *a1;
  v4 = (*a1)[1].n128_u32[2];
  if (v4 == 2)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v6, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      v4 = v3[1].n128_u32[2];
    }
    else
    {
      v6 = *__str;
    }
    if (v4 != -1)
      ((void (*)(char *, __n128 *))off_1E3D658A0[v4])(&v7, v3);
    result = *(__n128 *)&v6.__r_.__value_.__l.__data_;
    v3[1].n128_u64[0] = v6.__r_.__value_.__r.__words[2];
    *v3 = result;
    v3[1].n128_u32[2] = 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D658A0[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(__n128 **a1, std::string *this, std::string *__str)
{
  __n128 *v3;
  unsigned __int32 v4;
  __n128 result;
  std::string v6;
  char v7;

  v3 = *a1;
  v4 = (*a1)[1].n128_u32[2];
  if (v4 == 4)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v6, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      v4 = v3[1].n128_u32[2];
    }
    else
    {
      v6 = *__str;
    }
    if (v4 != -1)
      ((void (*)(char *, __n128 *))off_1E3D658A0[v4])(&v7, v3);
    result = *(__n128 *)&v6.__r_.__value_.__l.__data_;
    v3[1].n128_u64[0] = v6.__r_.__value_.__r.__words[2];
    *v3 = result;
    v3[1].n128_u32[2] = 4;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 5)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D658A0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 5;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(__n128 **a1, std::string *this, std::string *__str)
{
  __n128 *v3;
  unsigned __int32 v4;
  __n128 result;
  std::string v6;
  char v7;

  v3 = *a1;
  v4 = (*a1)[1].n128_u32[2];
  if (v4 == 6)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v6, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      v4 = v3[1].n128_u32[2];
    }
    else
    {
      v6 = *__str;
    }
    if (v4 != -1)
      ((void (*)(char *, __n128 *))off_1E3D658A0[v4])(&v7, v3);
    result = *(__n128 *)&v6.__r_.__value_.__l.__data_;
    v3[1].n128_u64[0] = v6.__r_.__value_.__r.__words[2];
    *v3 = result;
    v3[1].n128_u32[2] = 6;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 7)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D658A0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 7;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(__n128 **a1, std::string *this, std::string *__str)
{
  __n128 *v3;
  unsigned __int32 v4;
  __n128 result;
  std::string v6;
  char v7;

  v3 = *a1;
  v4 = (*a1)[1].n128_u32[2];
  if (v4 == 8)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v6, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      v4 = v3[1].n128_u32[2];
    }
    else
    {
      v6 = *__str;
    }
    if (v4 != -1)
      ((void (*)(char *, __n128 *))off_1E3D658A0[v4])(&v7, v3);
    result = *(__n128 *)&v6.__r_.__value_.__l.__data_;
    v3[1].n128_u64[0] = v6.__r_.__value_.__r.__words[2];
    *v3 = result;
    v3[1].n128_u32[2] = 8;
  }
  return result;
}

void sub_19C876BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C87706C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_19C877378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C87762C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19C87776C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C8778BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_19C87797C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C877A9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C877C8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C877FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C878268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void _MLModelInputArchiver::_MLModelInputArchiver(_MLModelInputArchiver *this, const IArchive *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  std::map<std::string,IArchive>::map[abi:ne180100]((uint64_t)this + 16, (_QWORD *)a2 + 2);
}

void sub_19C878328(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19C8784BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(a14);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void sub_19C878670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *a22)
{
  uint64_t v22;

  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(a16);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(a22);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void sub_19C878850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v22 - 72));
  _Unwind_Resume(a1);
}

void sub_19C87929C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::~__hash_table((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_19C87963C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;

  if (a24 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);

  _Unwind_Resume(a1);
}

void sub_19C879970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  MEMORY[0x1A1AD6260](v16, 0x10A1C40759568C3);

  _Unwind_Resume(a1);
}

void sub_19C879D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;

  _Unwind_Resume(a1);
}

void sub_19C87A19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char *a31)
{
  uint64_t v31;

  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(a23);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(a31);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  a25 = (void *)(v31 - 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  _Unwind_Resume(a1);
}

void sub_19C87A614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_19C87A90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C87AAC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::modelTypeNames(_anonymous_namespace_ *this, const CoreML::Specification::Pipeline *a2)
{
  void *v3;
  uint64_t i;
  int v5;
  const char *v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *((int *)this + 6));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((int *)this + 6) >= 1)
  {
    for (i = 0; i < *((int *)this + 6); ++i)
    {
      v5 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * i + 8) + 44);
      if (v5 > 559)
      {
        if (v5 > 899)
        {
          switch(v5)
          {
            case 2000:
              v6 = "MLModelType_textClassifier";
              break;
            case 2001:
              v6 = "MLModelType_wordTagger";
              break;
            case 2002:
              v6 = "MLModelType_visionFeaturePrint";
              break;
            case 2003:
              v6 = "MLModelType_soundAnalysisPreprocessing";
              break;
            case 2004:
              v6 = "MLModelType_gazetteer";
              break;
            case 2005:
              v6 = "MLModelType_wordEmbedding";
              break;
            case 2006:
              v6 = "MLModelType_audioFeaturePrint";
              break;
            default:
              if (v5 == 900)
              {
                v6 = "MLModelType_identity";
              }
              else
              {
                if (v5 != 3000)
                  goto LABEL_56;
                v6 = "MLModelType_serializedModel";
              }
              break;
          }
        }
        else
        {
          switch(v5)
          {
            case 600:
              v6 = "MLModelType_oneHotEncoder";
              break;
            case 601:
              v6 = "MLModelType_imputer";
              break;
            case 602:
              v6 = "MLModelType_featureVectorizer";
              break;
            case 603:
              v6 = "MLModelType_dictVectorizer";
              break;
            case 604:
              v6 = "MLModelType_scaler";
              break;
            case 605:
            case 608:
              goto LABEL_56;
            case 606:
              v6 = "MLModelType_categoricalMapping";
              break;
            case 607:
              v6 = "MLModelType_normalizer";
              break;
            case 609:
              v6 = "MLModelType_arrayFeatureExtractor";
              break;
            case 610:
              v6 = "MLModelType_nonMaximumSuppression";
              break;
            default:
              if (v5 != 560)
                goto LABEL_56;
              v6 = "MLModelType_classConfidenceThresholding";
              break;
          }
        }
        goto LABEL_61;
      }
      if (v5 <= 399)
      {
        if (v5 > 201)
        {
          switch(v5)
          {
            case 300:
              v6 = "MLModelType_glmRegressor";
              break;
            case 301:
              v6 = "MLModelType_supportVectorRegressor";
              break;
            case 302:
              v6 = "MLModelType_treeEnsembleRegressor";
              break;
            case 303:
              v6 = "MLModelType_neuralNetworkRegressor";
              break;
            case 304:
              v6 = "MLModelType_bayesianProbitRegressor";
              break;
            default:
              if (v5 != 202)
                goto LABEL_56;
              v6 = "MLModelType_pipeline";
              break;
          }
          goto LABEL_61;
        }
        if (!v5)
        {
LABEL_56:
          v6 = "INVALID";
          goto LABEL_61;
        }
        v6 = "MLModelType_pipelineClassifier";
        if (v5 != 200)
        {
          if (v5 != 201)
            goto LABEL_56;
          v6 = "MLModelType_pipelineRegressor";
        }
      }
      else
      {
        if (v5 <= 499)
        {
          switch(v5)
          {
            case 400:
              v6 = "MLModelType_glmClassifier";
              break;
            case 401:
              v6 = "MLModelType_supportVectorClassifier";
              break;
            case 402:
              v6 = "MLModelType_treeEnsembleClassifier";
              break;
            case 403:
              v6 = "MLModelType_neuralNetworkClassifier";
              break;
            case 404:
              v6 = "MLModelType_kNearestNeighborsClassifier";
              break;
            default:
              goto LABEL_56;
          }
          goto LABEL_61;
        }
        if (v5 <= 501)
        {
          if (v5 == 500)
            v6 = "MLModelType_neuralNetwork";
          else
            v6 = "MLModelType_itemSimilarityRecommender";
          goto LABEL_61;
        }
        switch(v5)
        {
          case 502:
            v6 = "MLModelType_mlProgram";
            break;
          case 555:
            v6 = "MLModelType_customModel";
            break;
          case 556:
            v6 = "MLModelType_linkedModel";
            break;
          default:
            goto LABEL_56;
        }
      }
LABEL_61:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v7);

    }
  }
  return v3;
}

void sub_19C87AE98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Frontend::MIL::Parse(MIL::IRProgramValidator **a1, std::string::size_type *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  std::string::size_type v10;
  std::string *v11;
  google::protobuf::_anonymous_namespace_ *v12;
  google::protobuf::_anonymous_namespace_ *v13;
  const google::protobuf::MessageLite *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string::size_type v18;
  uint64_t v19;
  std::string::size_type v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  MIL::IRProgramValidator *v24;
  uint64_t v25;
  const IRProgram *v26;
  uint64_t v27;
  _QWORD *i;
  MIL::Builder::FunctionBuilder *v29;
  const MIL::IRValue *v30;
  uint64_t *j;
  std::string::size_type v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  MIL::IRProgramValidator *v45;
  MIL::IRProgramValidator *v46;
  std::string::size_type v47;
  uint64_t v48;
  std::string::size_type v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::string::size_type v53;
  int v54;
  _QWORD *k;
  MIL::IRObject *v56;
  const MIL::IRValue *v57;
  uint64_t v58;
  uint64_t BlobFileReference;
  MIL::IRObject *v60;
  const MIL::IRValue *v61;
  uint64_t v62;
  MIL::IRObject ****v63;
  MIL::IRObject **v64;
  MIL::IRObject **v65;
  MIL::IRObject *v66;
  const MIL::IRValue *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  MIL::IRArgument **v72;
  MIL::IRArgument **v73;
  _anonymous_namespace_ *Value;
  const MIL::IRValue *v75;
  _QWORD *v76;
  _QWORD *v77;
  BOOL v78;
  void *v79;
  NSObject *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t v89;
  float *inited;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  int v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  int v105;
  int v106;
  double v107;
  float v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  int v115;
  uint64_t *v116;
  uint64_t v117;
  const CoreML::Specification::ArrayFeatureType *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  const CoreML::Specification::ArrayFeatureType *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  std::string *v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  char HasControlFlow;
  __int128 v138;
  CoreML::NNCompiler::MLClassifierInfo *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *p_shared_owners;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  __int128 v152;
  char **v153;
  char **v154;
  char *v155;
  std::string::size_type v156;
  std::string *v157;
  __int128 v158;
  std::string *v159;
  int v160;
  uint64_t v161;
  id v162;
  std::string::size_type v163;
  uint64_t **v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  id v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  id v174;
  CoreML::NNCompiler::MLClassifierInfo *v175;
  _QWORD *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  int v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t *v192;
  _QWORD *v193;
  _QWORD *v194;
  std::string *v195;
  std::string::size_type v196;
  _QWORD *v197;
  char *v198;
  std::string::size_type v199;
  int v200;
  char *v201;
  uint64_t v202;
  char *exception;
  std::string::size_type v204;
  char *v205;
  std::string::size_type v206;
  char *v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t Message;
  int v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t Location;
  std::string *p_s;
  std::string::size_type v217;
  std::runtime_error *v218;
  char *v219;
  uint64_t v220;
  int v221;
  id v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  MIL::IRProgramValidator *v227;
  uint64_t v228;
  uint64_t v229;
  id v230;
  _BYTE v231[32];
  std::string v232;
  uint64_t v233;
  std::string v234;
  std::string::size_type v235;
  std::string::size_type v236;
  std::string::size_type v237;
  std::string::size_type v238;
  _QWORD v239[12];
  char v240;
  uint64_t v241;
  std::string v242;
  uint64_t v243;
  std::string v244;
  std::string::size_type v245;
  std::string v246;
  std::string v247;
  std::string v248[12];
  std::string v249;
  uint64_t **v250;
  uint64_t *v251;
  uint64_t v252;
  std::string v253;
  std::string *v254[2];
  std::string *v255;
  MIL::IRProgramValidator *v256[3];
  id v257;
  CoreML::Specification::Model *v258;
  std::__shared_weak_count *v259;
  CoreML::NNCompiler::MLClassifierInfo *v260;
  std::__shared_weak_count *v261;
  CoreML::NNCompiler::MLClassifierInfo *v262;
  __int128 v263;
  std::string v264;
  std::string v265;
  void **v266;
  std::__shared_weak_count *v267;
  std::string v268;
  std::string v269;
  MIL::Builder::ProgramBuilder *v270;
  char *v271[2];
  std::string __s;
  std::string v273;
  int v274;
  std::string __p;
  __int128 v276[6];
  char v277;
  std::string v278;
  int v279;
  int v280;
  uint64_t v281;

  v281 = *MEMORY[0x1E0C80C00];
  CoreML::Model::validate((CoreML::Model *)&__p, (const CoreML::Specification::Model *)a3);
  if (((uint64_t)__p.__r_.__value_.__l.__data_ & 0xFFFFFFEF) != 0)
  {
    exception = (char *)__cxa_allocate_exception(0x30uLL);
    *(_OWORD *)&v246.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
    v245 = __p.__r_.__value_.__r.__words[0];
    v246.__r_.__value_.__r.__words[2] = *(_QWORD *)&v276[0];
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    *(_QWORD *)&v276[0] = 0;
    std::runtime_error::runtime_error((std::runtime_error *)exception, &v246);
    *(_QWORD *)exception = &off_1E3D595E8;
    *((_QWORD *)exception + 2) = v245;
    v204 = v246.__r_.__value_.__r.__words[2];
    *(_OWORD *)(exception + 24) = *(_OWORD *)&v246.__r_.__value_.__l.__data_;
    *((_QWORD *)exception + 5) = v204;
    memset(&v246, 0, sizeof(v246));
  }
  if (SBYTE7(v276[0]) < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (*(_DWORD *)(a3 + 44) != 502)
  {
    v205 = (char *)__cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Model specification does not contain an ML Program.");
    v243 = 5;
    std::operator+<char>();
    std::runtime_error::runtime_error((std::runtime_error *)v205, &v244);
    *(_QWORD *)v205 = &off_1E3D595E8;
    *((_QWORD *)v205 + 2) = v243;
    v206 = v244.__r_.__value_.__r.__words[2];
    *(_OWORD *)(v205 + 24) = *(_OWORD *)&v244.__r_.__value_.__l.__data_;
    *((_QWORD *)v205 + 5) = v206;
    memset(&v244, 0, sizeof(v244));
  }
  v225 = a3;
  v9 = *(_QWORD *)(a3 + 32);
  memset(&v242, 0, sizeof(v242));
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  if (v10 >> 31)
  {
    LODWORD(v247.__r_.__value_.__l.__data_) = 2;
    v247.__r_.__value_.__l.__size_ = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-in"
                                                             "ternal/deps/protobuf/src/google/protobuf/message_lite.cc";
    LODWORD(v247.__r_.__value_.__r.__words[2]) = 302;
    memset(v248, 0, 24);
    std::string::append(v248, "Exceeded maximum protobuf size of 2GB: ");
    snprintf((char *)&__p, 0x80uLL, "%lu", v10);
    v277 = 0;
    std::string::append(v248, (const std::string::value_type *)&__p);
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v247);
    if (SHIBYTE(v248[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v248[0].__r_.__value_.__l.__data_);
    v242.__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&v242.__r_.__value_.__s + 23) = 0;
  }
  else
  {
    std::string::resize(&v242, v10, 0);
    if ((v242.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v242;
    else
      v11 = (std::string *)v242.__r_.__value_.__r.__words[0];
    v12 = (google::protobuf::_anonymous_namespace_ *)((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 112))(v9, v11)- (_QWORD)v11);
    if (v12 != (google::protobuf::_anonymous_namespace_ *)v10)
    {
      v13 = (google::protobuf::_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
    }
  }
  std::istringstream::basic_istringstream[abi:ne180100](v239, &v242, 8);
  if (a4[3])
  {
    v15 = *a2;
    v16 = a2[1];
    v237 = *a2;
    v238 = v16;
    *a2 = 0;
    a2[1] = 0;
    if (*(char *)(a5 + 23) < 0)
      std::string::__init_copy_ctor_external(&v278, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    else
      v278 = *(std::string *)a5;
    CoreML::MIL::CoreMLUtil::MakeProtoParserOptions((MIL::ParserOptions *)&v265, (uint64_t)&v278);
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v278.__r_.__value_.__l.__data_);
    (*(void (**)(std::string::size_type, _QWORD))(*(_QWORD *)v265.__r_.__value_.__l.__data_ + 64))(v265.__r_.__value_.__r.__words[0], 0);
    (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)v265.__r_.__value_.__l.__data_ + 112))(v265.__r_.__value_.__r.__words[0], 1);
    v19 = *(unsigned __int8 *)(a5 + 23);
    if ((v19 & 0x80u) != 0)
      v19 = *(_QWORD *)(a5 + 8);
    if (!v19)
    {
      v20 = v265.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&v273, "mem://");
      (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v20 + 48))(v20, &v273);
      if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v273.__r_.__value_.__l.__data_);
    }
    v269.__r_.__value_.__r.__words[0] = v15;
    v269.__r_.__value_.__l.__size_ = v16;
    v237 = 0;
    v238 = 0;
    MIL::Proto::ParseProgram();
    size = (std::__shared_weak_count *)v269.__r_.__value_.__l.__size_;
    if (v269.__r_.__value_.__l.__size_)
    {
      v22 = (unint64_t *)(v269.__r_.__value_.__l.__size_ + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v24 = v256[0];
    v256[0] = 0;
    v25 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v265.__r_.__value_.__l.__data_ + 40))(v265.__r_.__value_.__r.__words[0]);
    if (a4[3])
    {
      v27 = v25;
      MEMORY[0x1A1AD5798](&v268, v24);
      MIL::Transform::ProgramTransformer::GetProgramBuilder((MIL::Transform::ProgramTransformer *)&v268);
      for (i = *(_QWORD **)(MIL::Builder::ProgramBuilder::GetFunctions(v270) + 16); i; i = (_QWORD *)*i)
      {
        v29 = (MIL::Builder::FunctionBuilder *)i[5];
        for (j = *(uint64_t **)(MIL::Builder::FunctionBuilder::GetAttributes(v29) + 16); j; j = (uint64_t *)*j)
        {
          {
            v32 = v247.__r_.__value_.__r.__words[0];
            if (v247.__r_.__value_.__r.__words[0])
            {
              if (*((char *)j + 39) < 0)
                std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)j[2], j[3]);
              else
                __p = *(std::string *)(j + 2);
              __s.__r_.__value_.__r.__words[0] = v32;
              __s.__r_.__value_.__l.__size_ = v247.__r_.__value_.__l.__size_;
              *(_OWORD *)&v247.__r_.__value_.__l.__data_ = 0uLL;
              MIL::Builder::FunctionBuilder::SetAttribute();
              v33 = (std::__shared_weak_count *)__s.__r_.__value_.__l.__size_;
              if (__s.__r_.__value_.__l.__size_)
              {
                v34 = (unint64_t *)(__s.__r_.__value_.__l.__size_ + 8);
                do
                  v35 = __ldaxr(v34);
                while (__stlxr(v35 - 1, v34));
                if (!v35)
                {
                  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                  std::__shared_weak_count::__release_weak(v33);
                }
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            v36 = (std::__shared_weak_count *)v247.__r_.__value_.__l.__size_;
            if (v247.__r_.__value_.__l.__size_)
            {
              v37 = (unint64_t *)(v247.__r_.__value_.__l.__size_ + 8);
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
          }
        }
        MIL::Builder::FunctionBuilder::SelectedSpecialization(v29);
        MIL::Builder::FunctionBuilder::GetBlock();
        if (__p.__r_.__value_.__r.__words[0])
        v39 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v40 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)&v268);
      v42 = (std::__shared_weak_count *)v271[0];
      if (v271[0])
      {
        v43 = (unint64_t *)(v271[0] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&v268);
      v45 = (MIL::IRProgramValidator *)v264.__r_.__value_.__r.__words[0];
    }
    else
    {
      v45 = v24;
      v24 = 0;
    }
    v264.__r_.__value_.__r.__words[0] = 0;
    v46 = v256[0];
    v256[0] = v45;
    if (v46)
    {
      (*(void (**)(MIL::IRProgramValidator *))(*(_QWORD *)v46 + 8))(v46);
      v47 = v264.__r_.__value_.__r.__words[0];
      v264.__r_.__value_.__r.__words[0] = 0;
      if (v47)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v47 + 8))(v47);
    }
    if (v24)
      (*(void (**)(MIL::IRProgramValidator *))(*(_QWORD *)v24 + 8))(v24);
    MIL::IRProgramValidator::Validate(v256[0], v26);
    v48 = v225;
    if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v247) & 1) == 0)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      v209 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"Program failed validation when resolving blob file reference: ", 62);
      Message = MIL::MILResult::GetMessage((MIL::MILResult *)&v247);
      v211 = *(char *)(Message + 23);
      if (v211 >= 0)
        v212 = Message;
      else
        v212 = *(_QWORD *)Message;
      if (v211 >= 0)
        v213 = *(unsigned __int8 *)(Message + 23);
      else
        v213 = *(_QWORD *)(Message + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v209, v212, v213);
      v214 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)" location", 9);
      Location = MIL::MILResult::GetLocation((MIL::MILResult *)&v247);
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)Location + 24))(&__s);
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_s = &__s;
      else
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v217 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      else
        v217 = __s.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)p_s, v217);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      v218 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v218, &__s);
      __cxa_throw(v218, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    MEMORY[0x1A1AD5408](&v247);
    v49 = v265.__r_.__value_.__r.__words[0];
    v265.__r_.__value_.__r.__words[0] = 0;
    if (v49)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v49 + 8))(v49);
    v227 = v256[0];
    v256[0] = 0;
  }
  else
  {
    v17 = *a2;
    v18 = a2[1];
    v235 = *a2;
    v236 = v18;
    *a2 = 0;
    a2[1] = 0;
    if (*(char *)(a5 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    else
      __p = *(std::string *)a5;
    v48 = v225;
    CoreML::MIL::CoreMLUtil::MakeProtoParserOptions((MIL::ParserOptions *)&v278, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v247.__r_.__value_.__r.__words[0] = v17;
    v247.__r_.__value_.__l.__size_ = v18;
    v235 = 0;
    v236 = 0;
    MIL::Proto::ParseProgram();
    v50 = (std::__shared_weak_count *)v247.__r_.__value_.__l.__size_;
    if (v247.__r_.__value_.__l.__size_)
    {
      v51 = (unint64_t *)(v247.__r_.__value_.__l.__size_ + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = v278.__r_.__value_.__r.__words[0];
    v278.__r_.__value_.__r.__words[0] = 0;
    if (v53)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v53 + 8))(v53);
    v227 = (MIL::IRProgramValidator *)v273.__r_.__value_.__r.__words[0];
    v273.__r_.__value_.__r.__words[0] = 0;
  }
  v54 = *(char *)(a5 + 23);
  if ((v54 & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a5 + 23))
      goto LABEL_90;
LABEL_93:
    for (k = *(_QWORD **)((*(uint64_t (**)(MIL::IRProgramValidator *))(*(_QWORD *)v227 + 72))(v227) + 16);
          k;
          k = (_QWORD *)*k)
    {
      v56 = (MIL::IRObject *)k[5];
      v58 = MIL::IRObject::GetAttributes(v56) + 16;
      while (1)
      {
        v58 = *(_QWORD *)v58;
        if (!v58)
          break;
        if (BlobFileReference)
        {
LABEL_358:
          v193 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)BlobFileReference + 88))(BlobFileReference);
          std::string::basic_string[abi:ne180100]<0>(&__p, "path");
          std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::at(v193, (unsigned __int8 *)&__p);
          MIL::IRValue::GetScalar<std::string>();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
          v194 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"The in-memory ML Program must not have a blob file reference but found a reference to ", 86);
          if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v195 = &v247;
          else
            v195 = (std::string *)v247.__r_.__value_.__r.__words[0];
          if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v196 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
          else
            v196 = v247.__r_.__value_.__l.__size_;
          v197 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)v195, v196);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)".", 1);
          v198 = (char *)__cxa_allocate_exception(0x30uLL);
          std::stringbuf::str();
          v233 = 12;
          std::operator+<char>();
          std::runtime_error::runtime_error((std::runtime_error *)v198, &v234);
          *(_QWORD *)v198 = &off_1E3D595E8;
          *((_QWORD *)v198 + 2) = v233;
          v199 = v234.__r_.__value_.__r.__words[2];
          *(_OWORD *)(v198 + 24) = *(_OWORD *)&v234.__r_.__value_.__l.__data_;
          *((_QWORD *)v198 + 5) = v199;
          memset(&v234, 0, sizeof(v234));
        }
      }
      v60 = (MIL::IRObject *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v56 + 40))(v56);
      v62 = MIL::IRObject::GetAttributes(v60) + 16;
      while (1)
      {
        v62 = *(_QWORD *)v62;
        if (!v62)
          break;
        if (BlobFileReference)
          goto LABEL_358;
      }
      v63 = (MIL::IRObject ****)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v60 + 56))(v60);
      v64 = **v63;
      v65 = (*v63)[1];
      while (v64 != v65)
      {
        v66 = *v64;
        v68 = MIL::IRObject::GetAttributes(*v64) + 16;
        while (1)
        {
          v68 = *(_QWORD *)v68;
          if (!v68)
            break;
          if (BlobFileReference)
            goto LABEL_358;
        }
        v69 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v66 + 160))(v66);
        v70 = v69 + 1;
        v71 = (_QWORD *)*v69;
        if ((_QWORD *)*v69 != v69 + 1)
        {
          do
          {
            v72 = (MIL::IRArgument **)v71[7];
            v73 = (MIL::IRArgument **)v71[8];
            while (v72 != v73)
            {
              if ((*(uint64_t (**)(MIL::IRArgument *))(*(_QWORD *)*v72 + 40))(*v72))
              {
                Value = (_anonymous_namespace_ *)MIL::IRArgument::GetValue(*v72);
                if (BlobFileReference)
                  goto LABEL_358;
              }
              v72 += 2;
            }
            v76 = (_QWORD *)v71[1];
            if (v76)
            {
              do
              {
                v77 = v76;
                v76 = (_QWORD *)*v76;
              }
              while (v76);
            }
            else
            {
              do
              {
                v77 = (_QWORD *)v71[2];
                v78 = *v77 == (_QWORD)v71;
                v71 = v77;
              }
              while (!v78);
            }
            v71 = v77;
          }
          while (v77 != v70);
        }
        v64 += 2;
      }
    }
    v48 = v225;
    if ((*(_BYTE *)(a5 + 23) & 0x80) == 0)
      goto LABEL_91;
    goto LABEL_123;
  }
  if (!*(_QWORD *)(a5 + 8))
    goto LABEL_93;
LABEL_90:
  if ((v54 & 0x80) == 0)
  {
LABEL_91:
    v232 = *(std::string *)a5;
    goto LABEL_124;
  }
LABEL_123:
  std::string::__init_copy_ctor_external(&v232, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
LABEL_124:
  v221 = *(_DWORD *)(v48 + 44);
  std::allocate_shared[abi:ne180100]<CoreML::Specification::Model,std::allocator<CoreML::Specification::Model>,CoreML::Specification::Model const&,void>(&v258, (const CoreML::Specification::Model *)v48);
  +[MLCompilerOptions defaultOptions](MLCompilerOptions, "defaultOptions");
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  v257 = 0;
  +[MLNeuralNetworkCompiler compiledVersionForSpecification:options:error:](MLNeuralNetworkCompiler, "compiledVersionForSpecification:options:error:", &v258, v79, &v257);
  v226 = (void *)objc_claimAutoreleasedReturnValue();
  v223 = v257;

  if (!v226)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v80 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
    {
      v200 = *(_DWORD *)(v48 + 24);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109378;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v200;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v223;
      _os_log_error_impl(&dword_19C486000, v80, OS_LOG_TYPE_ERROR, "Compiler version info is nil for specification version: %d, error: %@", (uint8_t *)&__p, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Compiler version info is nil for specification version: %d, error: %@"), *(unsigned int *)(v48 + 24), v223);
  }
  v81 = *(uint64_t **)(v48 + 16);
  v82 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (!v81)
    v81 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::NNCompiler::Frontend::ParseModelOSSizeTrackingInfo((CoreML::NNCompiler::Frontend *)v256, (const CoreML::Specification::ModelDescription *)v81[20]);
  v254[1] = 0;
  v254[0] = 0;
  v255 = 0;
  memset(&v253, 0, sizeof(v253));
  v252 = 0;
  v251 = 0;
  v250 = &v251;
  if (*(_QWORD *)(v48 + 16))
    v82 = *(uint64_t **)(v48 + 16);
  if (*((_DWORD *)v82 + 24))
  {
    std::string::operator=(&v253, (const std::string *)v82[19]);
    v83 = v82[13];
    if (v83)
      v84 = v83 + 8;
    else
      v84 = 0;
    v85 = *((int *)v82 + 24);
    if ((_DWORD)v85)
    {
      v224 = v84 + 8 * v85;
      do
      {
        v86 = *(_QWORD *)v84;
        v87 = *(__int128 **)(*(_QWORD *)v84 + 88);
        v88 = (*(uint64_t (**)(MIL::IRProgramValidator *, __int128 *))(*(_QWORD *)v227 + 56))(v227, v87);
        if (!v88)
        {
          v201 = (char *)__cxa_allocate_exception(0x30uLL);
          std::operator+<char>();
          __p.__r_.__value_.__r.__words[0] = 0x130000000CLL;
          std::operator+<char>();
          std::runtime_error::runtime_error((std::runtime_error *)v201, (const std::string *)&__p.__r_.__value_.__r.__words[1]);
          *(_QWORD *)v201 = &off_1E3D595E8;
          *((_QWORD *)v201 + 2) = __p.__r_.__value_.__r.__words[0];
          v202 = *(_QWORD *)&v276[0];
          *(_OWORD *)(v201 + 24) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
          *((_QWORD *)v201 + 5) = v202;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
          *(_QWORD *)&v276[0] = 0;
        }
        v230 = v226;
        v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 112))(v88);
        v229 = *(_QWORD *)std::map<std::string,std::string>::at(v89, &__s);
        v228 = v84;
        v271[0] = 0;
        v271[1] = 0;
        v270 = (MIL::Builder::ProgramBuilder *)v271;
        v91 = *(_QWORD *)(v86 + 32);
        if (v91)
          v92 = (uint64_t *)(v91 + 8);
        else
          v92 = 0;
        v93 = *(int *)(v86 + 24);
        if (!(_DWORD)v93)
        {
          *(_OWORD *)&v269.__r_.__value_.__r.__words[1] = 0uLL;
          v269.__r_.__value_.__r.__words[0] = (std::string::size_type)&v269.__r_.__value_.__l.__size_;
          goto LABEL_201;
        }
        v94 = 8 * v93;
        do
        {
          v95 = *v92;
          v96 = *(uint64_t **)(*v92 + 32);
          if (!v96)
            v96 = &CoreML::Specification::_FeatureType_default_instance_;
          if (*((_BYTE *)v96 + 16))
          {
            if (*((_DWORD *)v96 + 9) == 5)
            {
              v97 = (uint64_t *)v96[3];
            }
            else
            {
              inited = (float *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
              v97 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            v98 = *((_DWORD *)v97 + 16);
            if (v98 == 41)
            {
              v103 = *(uint64_t **)(v95 + 32);
              if (!v103)
                v103 = &CoreML::Specification::_FeatureType_default_instance_;
              if (*((_DWORD *)v103 + 9) == 5)
              {
                v104 = (uint64_t *)v103[3];
              }
              else
              {
                CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                v104 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              if (*((_DWORD *)v104 + 16) == 41)
                v106 = *((_DWORD *)v104 + 12);
              else
                v106 = 0;
              __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v95 + 16);
              inited = (float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v270, __p.__r_.__value_.__l.__data_, (__int128 **)&__p);
              v108 = (float)v106;
LABEL_179:
              inited[14] = v108;
              goto LABEL_180;
            }
            if (v98 != 51)
            {
              if (v98 != 61)
              {
                __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v95 + 16);
                inited = (float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v270, __p.__r_.__value_.__l.__data_, (__int128 **)&__p);
                inited[14] = 0.0;
                goto LABEL_180;
              }
              v99 = *(uint64_t **)(v95 + 32);
              if (!v99)
                v99 = &CoreML::Specification::_FeatureType_default_instance_;
              if (*((_DWORD *)v99 + 9) == 5)
              {
                v100 = (uint64_t *)v99[3];
              }
              else
              {
                CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                v100 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              v107 = 0.0;
              if (*((_DWORD *)v100 + 16) == 61)
                v107 = *((double *)v100 + 6);
              __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v95 + 16);
              inited = (float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v270, __p.__r_.__value_.__l.__data_, (__int128 **)&__p);
              v108 = v107;
              goto LABEL_179;
            }
            v101 = *(uint64_t **)(v95 + 32);
            if (!v101)
              v101 = &CoreML::Specification::_FeatureType_default_instance_;
            if (*((_DWORD *)v101 + 9) == 5)
            {
              v102 = (uint64_t *)v101[3];
            }
            else
            {
              CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
              v102 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            v105 = 0;
            if (*((_DWORD *)v102 + 16) == 51)
              v105 = *((_DWORD *)v102 + 12);
            __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v95 + 16);
            inited = (float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v270, __p.__r_.__value_.__l.__data_, (__int128 **)&__p);
            *((_DWORD *)inited + 14) = v105;
          }
LABEL_180:
          ++v92;
          v94 -= 8;
        }
        while (v94);
        v109 = *(_QWORD *)(v86 + 32);
        v110 = *(int *)(v86 + 24);
        *(_OWORD *)&v269.__r_.__value_.__r.__words[1] = 0uLL;
        v269.__r_.__value_.__r.__words[0] = (std::string::size_type)&v269.__r_.__value_.__l.__size_;
        if (v109)
          v111 = (uint64_t *)(v109 + 8);
        else
          v111 = 0;
        if ((_DWORD)v110)
        {
          v112 = 8 * v110;
          while (1)
          {
            v113 = *v111;
            v114 = *(uint64_t **)(*v111 + 32);
            if (!v114)
              v114 = &CoreML::Specification::_FeatureType_default_instance_;
            v115 = *((_DWORD *)v114 + 9);
            if (v115 == 4)
              break;
            if (v115 == 8)
            {
              v117 = v114[3];
              if (*(_DWORD *)(v117 + 28) == 1)
              {
                v118 = *(const CoreML::Specification::ArrayFeatureType **)(v117 + 16);
              }
              else
              {
                CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                v118 = (const CoreML::Specification::ArrayFeatureType *)&CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v278.__r_.__value_.__l.__size_, (uint64_t)&v273);
              v279 = v274;
              v280 = 0;
              std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v278.__r_.__value_.__l.__size_);
              v268.__r_.__value_.__r.__words[0] = *(_QWORD *)(v113 + 16);
              v120 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v269, v268.__r_.__value_.__l.__data_, (__int128 **)&v268);
              std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v120 + 8), (uint64_t)&__p.__r_.__value_.__l.__size_);
              goto LABEL_197;
            }
            if (v115 == 5)
            {
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v278.__r_.__value_.__l.__size_, (uint64_t)&v273);
              v279 = v274;
              v280 = 0;
              std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v278.__r_.__value_.__l.__size_);
              v268.__r_.__value_.__r.__words[0] = *(_QWORD *)(v113 + 16);
              v116 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v269, v268.__r_.__value_.__l.__data_, (__int128 **)&v268);
              std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v116 + 8), (uint64_t)&__p.__r_.__value_.__l.__size_);
LABEL_197:
              std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&__p.__r_.__value_.__l.__size_);
              std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v278.__r_.__value_.__l.__size_);
              inited = (float *)std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v273);
            }
            ++v111;
            v112 -= 8;
            if (!v112)
              goto LABEL_201;
          }
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v278.__r_.__value_.__l.__size_, (uint64_t)&v273);
          v279 = v274;
          v280 = 1;
          std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v278.__r_.__value_.__l.__size_);
          v268.__r_.__value_.__r.__words[0] = *(_QWORD *)(v113 + 16);
          v119 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v269, v268.__r_.__value_.__l.__data_, (__int128 **)&v268);
          std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v119 + 8), (uint64_t)&__p.__r_.__value_.__l.__size_);
          goto LABEL_197;
        }
LABEL_201:
        *(_OWORD *)&v268.__r_.__value_.__r.__words[1] = 0uLL;
        v268.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268.__r_.__value_.__l.__size_;
        v121 = *(_QWORD *)(v86 + 80);
        if (v121)
          v122 = (uint64_t *)(v121 + 8);
        else
          v122 = 0;
        v123 = *(int *)(v86 + 72);
        if ((_DWORD)v123)
        {
          v124 = 8 * v123;
          do
          {
            v125 = *v122;
            v126 = *(uint64_t **)(*v122 + 32);
            if (!v126)
              v126 = &CoreML::Specification::_FeatureType_default_instance_;
            if (*((_DWORD *)v126 + 9) == 8)
            {
              v127 = (uint64_t *)v126[3];
            }
            else
            {
              inited = (float *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
              v127 = &CoreML::Specification::_StateFeatureType_default_instance_;
            }
            if (*((_DWORD *)v127 + 7) == 1)
            {
              v128 = (const CoreML::Specification::ArrayFeatureType *)v127[2];
            }
            else
            {
              CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
              v128 = (const CoreML::Specification::ArrayFeatureType *)&CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v278.__r_.__value_.__l.__size_, (uint64_t)&v273);
            v279 = v274;
            v280 = 0;
            std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v278.__r_.__value_.__l.__size_);
            v249.__r_.__value_.__r.__words[0] = *(_QWORD *)(v125 + 16);
            v129 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v268, v249.__r_.__value_.__l.__data_, (__int128 **)&v249);
            std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v129 + 8), (uint64_t)&__p.__r_.__value_.__l.__size_);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&__p.__r_.__value_.__l.__size_);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v278.__r_.__value_.__l.__size_);
            inited = (float *)std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v273);
            ++v122;
            v124 -= 8;
          }
          while (v124);
        }
        memset(&__p, 0, sizeof(__p));
        v130 = *(_QWORD *)(v86 + 56);
        if (v130)
          v131 = v130 + 8;
        else
          v131 = 0;
        v132 = *(int *)(v86 + 48);
        if ((_DWORD)v132)
        {
          v133 = 0;
          v134 = 8 * v132;
          do
          {
            v135 = *(_QWORD *)(*(_QWORD *)v131 + 16);
            if ((unint64_t)v133 >= __p.__r_.__value_.__r.__words[2])
            {
              v133 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&__p, (__int128 *)v135);
            }
            else
            {
              if (*(char *)(v135 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v133, *(const std::string::value_type **)v135, *(_QWORD *)(v135 + 8));
              }
              else
              {
                v136 = *(_OWORD *)v135;
                v133->__r_.__value_.__r.__words[2] = *(_QWORD *)(v135 + 16);
                *(_OWORD *)&v133->__r_.__value_.__l.__data_ = v136;
              }
              ++v133;
            }
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v133;
            v131 += 8;
            v134 -= 8;
          }
          while (v134);
        }
        v48 = v225;
        if (*((char *)v87 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v278, *(const std::string::value_type **)v87, *((_QWORD *)v87 + 1));
        }
        else
        {
          v138 = *v87;
          v278.__r_.__value_.__r.__words[2] = *((_QWORD *)v87 + 2);
          *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v138;
        }
        v139 = v260;
        v266 = (void **)v260;
        if (v260)
        {
          v140 = (std::__shared_weak_count *)operator new();
          v140->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C598;
          v140->__shared_owners_ = 0;
          v140->__shared_weak_owners_ = 0;
          v140[1].__vftable = (std::__shared_weak_count_vtbl *)v139;
        }
        else
        {
          v140 = 0;
        }
        v267 = v140;
        v260 = 0;
        v265 = v269;
        if (v269.__r_.__value_.__r.__words[2])
        {
          *(_QWORD *)(v269.__r_.__value_.__l.__size_ + 16) = &v265.__r_.__value_.__l.__size_;
          v269.__r_.__value_.__r.__words[0] = (std::string::size_type)&v269.__r_.__value_.__l.__size_;
          *(_OWORD *)&v269.__r_.__value_.__r.__words[1] = 0uLL;
        }
        else
        {
          v265.__r_.__value_.__r.__words[0] = (std::string::size_type)&v265.__r_.__value_.__l.__size_;
        }
        v264 = v268;
        if (v268.__r_.__value_.__r.__words[2])
        {
          *(_QWORD *)(v268.__r_.__value_.__l.__size_ + 16) = &v264.__r_.__value_.__l.__size_;
          v268.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268.__r_.__value_.__l.__size_;
          *(_OWORD *)&v268.__r_.__value_.__r.__words[1] = 0uLL;
        }
        else
        {
          v264.__r_.__value_.__r.__words[0] = (std::string::size_type)&v264.__r_.__value_.__l.__size_;
        }
        v263 = *(_OWORD *)&v249.__r_.__value_.__l.__data_;
        if (v249.__r_.__value_.__l.__size_)
        {
          v141 = (unint64_t *)(v249.__r_.__value_.__l.__size_ + 8);
          do
            v142 = __ldxr(v141);
          while (__stxr(v142 + 1, v141));
        }
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v273, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v273 = __s;
        CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo((uint64_t)&v247, (__int128 *)&v278, (uint64_t)&v266, &v270, &v265, &v264, (uint64_t)&v263, (__int128 *)&v273, HasControlFlow);
        if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v273.__r_.__value_.__l.__data_);
        v143 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
        if (*((_QWORD *)&v263 + 1))
        {
          v144 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }
        std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((_QWORD *)v264.__r_.__value_.__l.__size_);
        std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((_QWORD *)v265.__r_.__value_.__l.__size_);
        v146 = v267;
        if (v267)
        {
          p_shared_owners = (unint64_t *)&v267->__shared_owners_;
          do
            v148 = __ldaxr(p_shared_owners);
          while (__stlxr(v148 - 1, p_shared_owners));
          if (!v148)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
        }
        if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v278.__r_.__value_.__l.__data_);
        v149 = (std::__shared_weak_count *)v249.__r_.__value_.__l.__size_;
        if (v249.__r_.__value_.__l.__size_)
        {
          v150 = (unint64_t *)(v249.__r_.__value_.__l.__size_ + 8);
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
        v249.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v249);
        std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((_QWORD *)v268.__r_.__value_.__l.__size_);
        std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((_QWORD *)v269.__r_.__value_.__l.__size_);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v271[0]);
        if (v260)
        {
          CoreML::NNCompiler::MLClassifierInfo::~MLClassifierInfo(v260);
          MEMORY[0x1A1AD6260]();
        }
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);

        if (*((char *)v87 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v87, *((_QWORD *)v87 + 1));
        }
        else
        {
          v152 = *v87;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v87 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v152;
        }
        CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo((uint64_t)v276, (__int128 *)&v247);
        v153 = (char **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)&v250, &v273, &__p);
        if (!*v153)
        {
          v154 = v153;
          v155 = (char *)operator new(0x178uLL);
          v278.__r_.__value_.__l.__size_ = (std::string::size_type)&v251;
          *(std::string *)(v155 + 32) = __p;
          memset(&__p, 0, sizeof(__p));
          CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo((uint64_t)(v155 + 56), v276);
          v278.__r_.__value_.__s.__data_[16] = 1;
          v156 = v273.__r_.__value_.__r.__words[0];
          *(_QWORD *)v155 = 0;
          *((_QWORD *)v155 + 1) = 0;
          *((_QWORD *)v155 + 2) = v156;
          *v154 = v155;
          if (*v250)
          {
            v250 = (uint64_t **)*v250;
            v155 = *v154;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v251, (uint64_t *)v155);
          ++v252;
          v278.__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&v278);
        }
        CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)v276);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v157 = v254[1];
        if (v254[1] >= v255)
        {
          v159 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v254, v87);
        }
        else
        {
          if (*((char *)v87 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v254[1], *(const std::string::value_type **)v87, *((_QWORD *)v87 + 1));
          }
          else
          {
            v158 = *v87;
            v254[1]->__r_.__value_.__r.__words[2] = *((_QWORD *)v87 + 2);
            *(_OWORD *)&v157->__r_.__value_.__l.__data_ = v158;
          }
          v159 = v157 + 1;
        }
        v254[1] = v159;
        CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)&v247);
        v84 = v228 + 8;
      }
      while (v228 + 8 != v224);
    }
    v160 = *(_DWORD *)(v48 + 24);
    v161 = operator new();
    v162 = v226;
    *(_DWORD *)v161 = v221;
    *(_OWORD *)(v161 + 8) = *(_OWORD *)v254;
    *(_QWORD *)(v161 + 24) = v255;
    v254[0] = 0;
    v254[1] = 0;
    v255 = 0;
    *(std::string *)(v161 + 32) = v253;
    memset(&v253, 0, sizeof(v253));
    v163 = v232.__r_.__value_.__r.__words[2];
    *(_OWORD *)(v161 + 56) = *(_OWORD *)&v232.__r_.__value_.__l.__data_;
    memset(&v232, 0, sizeof(v232));
    v164 = v250;
    v165 = v251;
    *(_QWORD *)(v161 + 72) = v163;
    *(_QWORD *)(v161 + 80) = v164;
    v166 = v252;
    *(_QWORD *)(v161 + 88) = v165;
    *(_QWORD *)(v161 + 96) = v166;
    v167 = v161 + 88;
    if (v166)
    {
      v165[2] = v167;
      v250 = &v251;
      v251 = 0;
      v252 = 0;
    }
    else
    {
      *(_QWORD *)(v161 + 80) = v167;
    }
    *(_BYTE *)(v161 + 104) = 1;
    v174 = v162;
    *(_QWORD *)(v161 + 112) = v174;
    *(_DWORD *)(v161 + 120) = v160;
    std::map<std::string,std::string>::map[abi:ne180100]((_QWORD *)(v161 + 128), v256);

    v48 = v225;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "main");
    v168 = (*(uint64_t (**)(MIL::IRProgramValidator *, std::string *))(*(_QWORD *)v227 + 56))(v227, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (!v168)
    {
      v219 = (char *)__cxa_allocate_exception(0x30uLL);
      std::string::basic_string[abi:ne180100]<0>(&v247, "ML Program does not contain a main function.");
      __p.__r_.__value_.__r.__words[0] = 0x130000000CLL;
      std::operator+<char>();
      std::runtime_error::runtime_error((std::runtime_error *)v219, (const std::string *)&__p.__r_.__value_.__r.__words[1]);
      *(_QWORD *)v219 = &off_1E3D595E8;
      *((_QWORD *)v219 + 2) = __p.__r_.__value_.__r.__words[0];
      v220 = *(_QWORD *)&v276[0];
      *(_OWORD *)(v219 + 24) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
      *((_QWORD *)v219 + 5) = v220;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      *(_QWORD *)&v276[0] = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v249, "main");
    if (*(_QWORD *)(v48 + 16))
      v169 = *(uint64_t **)(v48 + 16);
    else
      v169 = &CoreML::Specification::_ModelDescription_default_instance_;
    v170 = v226;
    v171 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v168 + 112))(v168);
    v172 = *(_QWORD *)std::map<std::string,std::string>::at(v171, &v247);
    CoreML::NNCompiler::Frontend::ParseOptionalInputDefaults((uint64_t **)&v278, (const CoreML::Specification::ModelDescription *)*((unsigned int *)v169 + 6), v169[4]);
    CoreML::MLNeuralNetworkUtilities::getInputShapeInfosFromSpec((uint64_t **)&v273, (const CoreML::Specification::ModelDescription *)*((unsigned int *)v169 + 6), v169[4]);
    CoreML::MLNeuralNetworkUtilities::getStateShapeInfosFromSpec((uint64_t **)&__s, (const CoreML::Specification::ModelDescription *)*((unsigned int *)v169 + 18), v169[10]);
    CoreML::MLNeuralNetworkUtilities::getOutputNamesFromSpec((CoreML::MLNeuralNetworkUtilities *)&v270, (const CoreML::Specification::ModelDescription *)*((unsigned int *)v169 + 12), v169[7]);
    if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v269, v249.__r_.__value_.__l.__data_, v249.__r_.__value_.__l.__size_);
    else
      v269 = v249;
    v175 = v262;
    *(_QWORD *)&v263 = v262;
    if (v262)
    {
      v176 = (_QWORD *)operator new();
      *v176 = &off_1E3D5C598;
      v176[1] = 0;
      v176[2] = 0;
      v176[3] = v175;
    }
    else
    {
      v176 = 0;
    }
    *((_QWORD *)&v263 + 1) = v176;
    v262 = 0;
    v268 = v273;
    if (v273.__r_.__value_.__r.__words[2])
    {
      *(_QWORD *)(v273.__r_.__value_.__l.__size_ + 16) = &v268.__r_.__value_.__l.__size_;
      v273.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273.__r_.__value_.__l.__size_;
      *(_OWORD *)&v273.__r_.__value_.__r.__words[1] = 0uLL;
    }
    else
    {
      v268.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268.__r_.__value_.__l.__size_;
    }
    v265 = __s;
    if (__s.__r_.__value_.__r.__words[2])
    {
      *(_QWORD *)(__s.__r_.__value_.__l.__size_ + 16) = &v265.__r_.__value_.__l.__size_;
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s.__r_.__value_.__l.__size_;
      *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = 0uLL;
    }
    else
    {
      v265.__r_.__value_.__r.__words[0] = (std::string::size_type)&v265.__r_.__value_.__l.__size_;
    }
    v260 = (CoreML::NNCompiler::MLClassifierInfo *)v266;
    v261 = v267;
    if (v267)
    {
      v177 = (unint64_t *)&v267->__shared_owners_;
      do
        v178 = __ldxr(v177);
      while (__stxr(v178 + 1, v177));
    }
    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v264, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
    else
      v264 = v247;
    CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo((uint64_t)&__p, (__int128 *)&v269, (uint64_t)&v263, &v278, &v268, &v265, (uint64_t)&v260, (__int128 *)&v264, v173);
    if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v264.__r_.__value_.__l.__data_);
    v179 = v261;
    if (v261)
    {
      v180 = (unint64_t *)&v261->__shared_owners_;
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((_QWORD *)v265.__r_.__value_.__l.__size_);
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((_QWORD *)v268.__r_.__value_.__l.__size_);
    v182 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
    if (*((_QWORD *)&v263 + 1))
    {
      v183 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
      do
        v184 = __ldaxr(v183);
      while (__stlxr(v184 - 1, v183));
      if (!v184)
      {
        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
        std::__shared_weak_count::__release_weak(v182);
      }
    }
    if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v269.__r_.__value_.__l.__data_);
    v185 = v267;
    if (v267)
    {
      v186 = (unint64_t *)&v267->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
    }
    v266 = (void **)&v270;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v266);
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((_QWORD *)__s.__r_.__value_.__l.__size_);
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((_QWORD *)v273.__r_.__value_.__l.__size_);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v278.__r_.__value_.__l.__size_);
    if (v262)
    {
      CoreML::NNCompiler::MLClassifierInfo::~MLClassifierInfo(v262);
      MEMORY[0x1A1AD6260]();
    }
    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v247.__r_.__value_.__l.__data_);

    if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v249.__r_.__value_.__l.__data_);
    v188 = *(_DWORD *)(v48 + 24);
    v161 = operator new();
    CoreML::NNCompiler::MLModelInfo::MLModelInfo(v161, v221, (__int128 *)&v232, (uint64_t)&__p, v170, v188, v256);
    CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)&__p);
  }
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>>>::destroy(v251);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v253.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v254;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v256[1]);

  v189 = v259;
  if (v259)
  {
    v190 = (unint64_t *)&v259->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  if (*(_QWORD *)(v48 + 16))
    v192 = *(uint64_t **)(v48 + 16);
  else
    v192 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::NNCompiler::Frontend::MIL::Util::ValidateSpecIsConsistent((CoreML::Result *)&__p, (uint64_t)v227, v161, (uint64_t)v192);
  if (((uint64_t)__p.__r_.__value_.__l.__data_ & 0xFFFFFFEF) != 0)
  {
    v207 = (char *)__cxa_allocate_exception(0x30uLL);
    *(std::string *)v231 = __p;
    *(_QWORD *)&v231[24] = *(_QWORD *)&v276[0];
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    *(_QWORD *)&v276[0] = 0;
    std::runtime_error::runtime_error((std::runtime_error *)v207, (const std::string *)&v231[8]);
    *(_QWORD *)v207 = &off_1E3D595E8;
    *((_QWORD *)v207 + 2) = *(_QWORD *)v231;
    v208 = *(_QWORD *)&v231[24];
    *(_OWORD *)(v207 + 24) = *(_OWORD *)&v231[8];
    *((_QWORD *)v207 + 5) = v208;
    memset(&v231[8], 0, 24);
  }
  if (SBYTE7(v276[0]) < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  *a1 = v227;
  a1[1] = (MIL::IRProgramValidator *)v161;
  v239[0] = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)v239 + *(_QWORD *)(v239[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v239[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v240 < 0)
    operator delete((void *)v239[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A1AD61C4](&v241);
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v242.__r_.__value_.__l.__data_);
}

void sub_19C87CE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45)
{
  void *v45;
  int v46;
  unint64_t v48;
  unint64_t v49;

  if (SLOBYTE(STACK[0x52F]) < 0)
  {
    operator delete((void *)STACK[0x518]);
    if ((v46 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x570]);
      MEMORY[0x1A1AD5408](&STACK[0x288]);
      v48 = STACK[0x428];
      STACK[0x428] = 0;
      if (v48)
        (*(void (**)(unint64_t))(*(_QWORD *)v48 + 8))(v48);
      v49 = STACK[0x4A0];
      STACK[0x4A0] = 0;
      if (v49)
        (*(void (**)(unint64_t))(*(_QWORD *)v49 + 8))(v49);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
      std::istringstream::~istringstream((uint64_t)&a45);
      if (SLOBYTE(STACK[0x247]) < 0)
        operator delete((void *)STACK[0x230]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v45);
  goto LABEL_6;
}

unsigned __int8 *std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::at(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;

  v2 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2 + 40;
}

void `anonymous namespace'::GetInterpretedSpecialization(std::string *a1, uint64_t a2)
{
  const std::string *p_str;
  char *exception;
  std::string::size_type v6;
  _QWORD v7[3];
  uint64_t v8;
  std::string v9;
  std::string __str;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;

  v18 = 7;
  strcpy((char *)v17, "CoreML5");
  v16 = 7;
  strcpy((char *)v15, "CoreML6");
  v14 = 13;
  strcpy((char *)v13, "CoreML6_train");
  v12 = 7;
  strcpy((char *)__p, "CoreML7");
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__str, "CoreML8");
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a2 + 200))(a2, v17) & 1) != 0)
  {
    p_str = (const std::string *)v17;
  }
  else if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a2 + 200))(a2, v15) & 1) != 0)
  {
    p_str = (const std::string *)v15;
  }
  else if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a2 + 200))(a2, v13) & 1) != 0)
  {
    p_str = (const std::string *)v13;
  }
  else if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a2 + 200))(a2, __p) & 1) != 0)
  {
    p_str = (const std::string *)__p;
  }
  else
  {
    if (!(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 200))(a2, &__str))
    {
      exception = (char *)__cxa_allocate_exception(0x30uLL);
      std::string::basic_string[abi:ne180100]<0>(v7, "ML Program default function is not written in an opset that is supported by CoreML compiler.");
      v8 = 0x120000000CLL;
      std::operator+<char>();
      std::runtime_error::runtime_error((std::runtime_error *)exception, &v9);
      *(_QWORD *)exception = &off_1E3D595E8;
      *((_QWORD *)exception + 2) = v8;
      v6 = v9.__r_.__value_.__r.__words[2];
      *(_OWORD *)(exception + 24) = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
      *((_QWORD *)exception + 5) = v6;
      memset(&v9, 0, sizeof(v9));
    }
    p_str = &__str;
  }
  std::string::operator=(a1, p_str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
}

void sub_19C87D8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  int v40;
  uint64_t v41;

  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v40 & 1) == 0)
    {
LABEL_8:
      if (a27 < 0)
        operator delete(a22);
      if (a33 < 0)
        operator delete(a28);
      if (a39 < 0)
        operator delete(a34);
      if (*(char *)(v41 - 57) < 0)
        operator delete(*(void **)(v41 - 80));
      if (*(char *)(v41 - 33) < 0)
        operator delete(*(void **)(v41 - 56));
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v39);
  goto LABEL_8;
}

void `anonymous namespace'::ParseClassifierInfo(uint64_t *a1)
{
  std::string *value;
  uint64_t v3;
  uint64_t ArgumentName;
  uint64_t v5;
  uint64_t Name;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  MIL::IRValue *ParameterValue;
  MIL::IRValueType *v12;
  uint64_t v13;
  MIL::IRValueType *v14;
  uint64_t v15;
  int v16;
  MIL::IRListValue *v17;
  std::vector<std::string>::size_type v18;
  MIL::IRListValue *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::vector<std::string>::pointer v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  MIL::IRListValue *v32;
  unint64_t v33;
  MIL::IRListValue *v34;
  uint64_t Values;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string *end;
  std::string *first;
  char *v41;
  char *v42;
  std::__split_buffer<std::string>::pointer begin;
  std::string *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char **v49;
  char *v50;
  std::logic_error *exception;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  void *v57[2];
  std::string::size_type v58;
  std::vector<std::string> v59;
  std::string v60;
  uint64_t v61;
  std::__split_buffer<std::string> __p;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v61 = 0;
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&off_1E3D5B780;
  __p.__begin_ = (std::__split_buffer<std::string>::pointer)&v61;
  __p.__end_cap_.__value_ = (std::string *)&__p;
  MIL::Util::Walk();
  value = __p.__end_cap_.__value_;
  if ((std::__split_buffer<std::string> *)__p.__end_cap_.__value_ == &__p)
  {
    v3 = 4;
    value = (std::string *)&__p;
  }
  else
  {
    if (!__p.__end_cap_.__value_)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(value->__r_.__value_.__r.__words[0] + 8 * v3))();
LABEL_6:
  if (v61)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "probabilities");
    ArgumentName = MIL::IROperation::GetArgumentName();
    if (SHIBYTE(__p.__end_) < 0)
      operator delete(__p.__first_);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 176))(v61);
    if (*(_QWORD *)(v5 + 8) == *(_QWORD *)v5)
      std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]();
    Name = MIL::IRNamedValueType::GetName(**(MIL::IRNamedValueType ***)v5);
    v7 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 176))(v61);
    if (v7[1] - *v7 < 0x11uLL)
    {
      memset(&v60, 0, sizeof(v60));
    }
    else
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 176))(v61);
      v9 = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)(*(_QWORD *)v8 + 16));
      if (*(char *)(v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)v9, *(_QWORD *)(v9 + 8));
      }
      else
      {
        v10 = *(_OWORD *)v9;
        v60.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "classes");
    ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
    if (SHIBYTE(__p.__end_) < 0)
      operator delete(__p.__first_);
    v12 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)ParameterValue + 32))(ParameterValue);
    v13 = MIL::IRValueType::AsListType(v12);
    v14 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 64))(v13);
    v15 = MIL::IRValueType::AsTensorType(v14);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 88))(v15);
    if (v16 == 12)
    {
      memset(&__p, 0, 24);
      v32 = (MIL::IRListValue *)MIL::IRValue::AsList(ParameterValue);
      MIL::IRListValue::GetValues(v32);
      std::vector<long long>::reserve((void **)&__p.__first_, v33);
      v34 = (MIL::IRListValue *)MIL::IRValue::AsList(ParameterValue);
      Values = MIL::IRListValue::GetValues(v34);
      if (v36)
      {
        v37 = Values;
        v52 = ArgumentName;
        v54 = Name;
        v56 = a1;
        v38 = Values + 16 * v36;
        end = __p.__end_;
        first = __p.__first_;
        do
        {
          v41 = (char *)MIL::IRValue::GetScalar<long long>();
          v42 = v41;
          begin = __p.__begin_;
          if (__p.__begin_ >= end)
          {
            v45 = ((char *)__p.__begin_ - (char *)first) >> 3;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61)
            {
              __p.__first_ = first;
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            if (((char *)end - (char *)first) >> 2 > v46)
              v46 = ((char *)end - (char *)first) >> 2;
            if ((unint64_t)((char *)end - (char *)first) >= 0x7FFFFFFFFFFFFFF8)
              v47 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v47 = v46;
            if (v47)
              v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v47);
            else
              v48 = 0;
            v49 = (char **)(v47 + 8 * v45);
            *v49 = v42;
            v44 = (std::string *)(v49 + 1);
            while (begin != first)
            {
              v50 = (char *)begin[-1].__r_.__value_.__r.__words[2];
              begin = (std::__split_buffer<std::string>::pointer)((char *)begin - 8);
              *--v49 = v50;
            }
            end = (std::string *)(v47 + 8 * v48);
            __p.__begin_ = v44;
            if (first)
              operator delete(first);
            first = (std::string *)v49;
          }
          else
          {
            __p.__begin_->__r_.__value_.__l.__data_ = v41;
            v44 = (std::string *)&begin->__r_.__value_.__r.__words[1];
          }
          __p.__begin_ = v44;
          v37 += 16;
        }
        while (v37 != v38);
        __p.__end_ = end;
        __p.__first_ = first;
        Name = v54;
        a1 = v56;
        ArgumentName = v52;
      }
      std::make_unique[abi:ne180100]<CoreML::NNCompiler::MLClassifierInfo,std::string const&,std::string const&,std::string const&,std::vector<long long>>(a1, ArgumentName, Name, (uint64_t)&v60, (uint64_t)&__p);
      if (__p.__first_)
        operator delete(__p.__first_);
    }
    else
    {
      if (v16 != 3)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Unknown class type.");
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      v53 = Name;
      v55 = a1;
      memset(&v59, 0, sizeof(v59));
      v17 = (MIL::IRListValue *)MIL::IRValue::AsList(ParameterValue);
      MIL::IRListValue::GetValues(v17);
      std::vector<std::string>::reserve(&v59, v18);
      v19 = (MIL::IRListValue *)MIL::IRValue::AsList(ParameterValue);
      v20 = MIL::IRListValue::GetValues(v19);
      v22 = ArgumentName;
      if (v21)
      {
        v23 = v20;
        v24 = 16 * v21;
        do
        {
          MIL::IRValue::GetScalar<std::string>();
          v25 = v59.__end_;
          if (v59.__end_ >= v59.__end_cap_.__value_)
          {
            v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59.__end_ - (char *)v59.__begin_) >> 3);
            v27 = v26 + 1;
            if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v59.__end_cap_.__value_ - (char *)v59.__begin_) >> 3) > v27)
              v27 = 0x5555555555555556 * (((char *)v59.__end_cap_.__value_ - (char *)v59.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v59.__end_cap_.__value_ - (char *)v59.__begin_) >> 3) >= 0x555555555555555)
              v28 = 0xAAAAAAAAAAAAAAALL;
            else
              v28 = v27;
            __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v59.__end_cap_;
            if (v28)
              v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v59.__end_cap_, v28);
            else
              v29 = 0;
            v30 = v29 + v26;
            __p.__first_ = v29;
            __p.__begin_ = v30;
            __p.__end_cap_.__value_ = &v29[v28];
            v30->__r_.__value_.__r.__words[2] = v58;
            *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)v57;
            v58 = 0;
            *(_OWORD *)v57 = 0uLL;
            __p.__end_ = v30 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v59, &__p);
            v31 = v59.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__p);
            v59.__end_ = v31;
          }
          else
          {
            v59.__end_->__r_.__value_.__r.__words[2] = v58;
            *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v57;
            v59.__end_ = v25 + 1;
          }
          v23 += 16;
          v24 -= 16;
        }
        while (v24);
      }
      std::make_unique[abi:ne180100]<CoreML::NNCompiler::MLClassifierInfo,std::string const&,std::string const&,std::string const&,std::vector<std::string>>(v55, v22, v53, (uint64_t)&v60, (__n128 *)&v59);
      __p.__first_ = (std::__split_buffer<std::string>::pointer)&v59;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
  }
  else
  {
    *a1 = 0;
  }
}

void sub_19C87DEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,std::__split_buffer<std::string> *a30)
{
  void *v30;

  __cxa_free_exception(v30);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL `anonymous namespace'::ParseHasControlFlow(uint64_t a1)
{
  _QWORD ***v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;

  v1 = (_QWORD ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v2 = **v1;
  v3 = (*v1)[1];
  if (v2 != v3)
  {
    while (1)
    {
      v4 = *v2;
      v5 = (_QWORD **)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 208))(*v2);
      v6 = (_QWORD *)**v5;
      v7 = (_QWORD *)(*v5)[1];
      while (v6 != v7)
      {
          return v2 != (*v1)[1];
        v6 += 2;
      }
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
      v9 = *(char *)(v8 + 23);
      if (v9 < 0)
      {
        if (*(_QWORD *)(v8 + 8) == 10)
        {
          v8 = *(_QWORD *)v8;
LABEL_11:
          if (*(_QWORD *)v8 == 0x6F6C5F656C696877 && *(_WORD *)(v8 + 8) == 28783)
            return v2 != (*v1)[1];
        }
      }
      else if (v9 == 10)
      {
        goto LABEL_11;
      }
      v2 += 2;
      if (v2 == v3)
      {
        v2 = v3;
        return v2 != (*v1)[1];
      }
    }
  }
  return v2 != (*v1)[1];
}

void `anonymous namespace'::GetEspressoConfigurationsFromInputShapeInfos(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, void *a5)
{
  id v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v9 = a5;
  CoreML::MLNeuralNetworkUtilities::getEspressoConfigurationsFromShapeInfos((uint64_t)&v15, a2, a3, a4, 1, 0, v9);
  v10 = operator new(0x30uLL);
  v10[1] = 0;
  v10[2] = 0;
  v11 = v16;
  v10[3] = v15;
  v12 = v10 + 3;
  *v10 = &off_1E3D5C1A8;
  v10[4] = v11;
  v13 = v10 + 4;
  v14 = v17;
  v10[5] = v17;
  if (v14)
  {
    v11[2] = v13;
    v15 = &v16;
    v16 = 0;
    v17 = 0;
    v11 = 0;
  }
  else
  {
    *v12 = v13;
  }
  *a1 = v12;
  a1[1] = v10;
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(v11);

}

void sub_19C87E1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  void *v11;

  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(a11);

  _Unwind_Resume(a1);
}

CoreML::NNCompiler::MLClassifierInfo *std::unique_ptr<CoreML::NNCompiler::MLClassifierInfo>::reset[abi:ne180100](CoreML::NNCompiler::MLClassifierInfo **a1)
{
  CoreML::NNCompiler::MLClassifierInfo *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    CoreML::NNCompiler::MLClassifierInfo::~MLClassifierInfo(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

uint64_t std::default_delete<CoreML::NNCompiler::MLModelInfo>::operator()[abi:ne180100](uint64_t a1)
{
  void **v3;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(a1 + 136));

  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>>>::destroy(*(_QWORD **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1A1AD6260](a1, 0x10F2C40548D0382);
}

uint64_t std::pair<std::string,CoreML::NNCompiler::MLFunctionInfo>::~pair(uint64_t a1)
{
  CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F58];
  v3 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A1AD61C4](a1 + 120);
  return a1;
}

void std::__shared_ptr_pointer<CoreML::NNCompiler::MLClassifierInfo  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

CoreML::NNCompiler::MLClassifierInfo *std::__shared_ptr_pointer<CoreML::NNCompiler::MLClassifierInfo  *>::__on_zero_shared(uint64_t a1)
{
  CoreML::NNCompiler::MLClassifierInfo *result;

  result = *(CoreML::NNCompiler::MLClassifierInfo **)(a1 + 24);
  if (result)
  {
    CoreML::NNCompiler::MLClassifierInfo::~MLClassifierInfo(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CoreML::NNCompiler::MLClassifierInfo  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN6CoreML10NNCompiler16MLClassifierInfoEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<std::map<std::string,Espresso::net_configuration>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C1A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<std::string,Espresso::net_configuration>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C1A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<std::map<std::string,Espresso::net_configuration>>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(*(_QWORD **)(a1 + 32));
}

void std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

__n128 std::make_unique[abi:ne180100]<CoreML::NNCompiler::MLClassifierInfo,std::string const&,std::string const&,std::string const&,std::vector<std::string>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  uint64_t v10;
  std::string::size_type v11;
  char v12;
  std::string::size_type size;
  __int128 v14;
  char v15;
  __n128 result;
  std::string v17;
  std::string v18;
  std::string v19;

  v10 = operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v19 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v18 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v17 = *(std::string *)a4;
  v11 = v19.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v10 + 8) = v19.__r_.__value_.__l.__size_;
  *(_QWORD *)(v10 + 15) = *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 7);
  v12 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  memset(&v19, 0, sizeof(v19));
  size = v18.__r_.__value_.__l.__size_;
  *(_QWORD *)(v10 + 24) = v18.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v10 + 32) = size;
  *(_QWORD *)(v10 + 39) = *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 7);
  LOBYTE(size) = *((_BYTE *)&v18.__r_.__value_.__s + 23);
  memset(&v18, 0, sizeof(v18));
  v14 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
  *(_QWORD *)(v10 + 63) = *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 7);
  v15 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  memset(&v17, 0, sizeof(v17));
  *(_QWORD *)v10 = v11;
  *(_BYTE *)(v10 + 23) = v12;
  *(_BYTE *)(v10 + 47) = size;
  *(_OWORD *)(v10 + 48) = v14;
  *(_BYTE *)(v10 + 71) = v15;
  *(_DWORD *)(v10 + 72) = 1;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)(v10 + 96) = 0;
  result = *a5;
  *(__n128 *)(v10 + 104) = *a5;
  *(_QWORD *)(v10 + 120) = a5[1].n128_u64[0];
  a5->n128_u64[0] = 0;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  *a1 = v10;
  return result;
}

void sub_19C87E5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  MEMORY[0x1A1AD6260](v25, 0x1032C40416AD52CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<CoreML::NNCompiler::MLClassifierInfo,std::string const&,std::string const&,std::string const&,std::vector<long long>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  std::string::size_type v11;
  char v12;
  std::string::size_type size;
  __int128 v14;
  char v15;
  uint64_t v16;
  std::string __p;
  std::string v18;
  std::string v19;
  _QWORD v20[3];
  void **v21;

  v10 = operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v19 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v18 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  v11 = v19.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v10 + 8) = v19.__r_.__value_.__l.__size_;
  *(_QWORD *)(v10 + 15) = *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 7);
  v12 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  memset(&v19, 0, sizeof(v19));
  size = v18.__r_.__value_.__l.__size_;
  *(_QWORD *)(v10 + 24) = v18.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v10 + 32) = size;
  *(_QWORD *)(v10 + 39) = *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 7);
  LOBYTE(size) = *((_BYTE *)&v18.__r_.__value_.__s + 23);
  memset(&v18, 0, sizeof(v18));
  v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(v10 + 63) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  *(_QWORD *)v10 = v11;
  *(_BYTE *)(v10 + 23) = v12;
  *(_BYTE *)(v10 + 47) = size;
  *(_OWORD *)(v10 + 48) = v14;
  *(_BYTE *)(v10 + 71) = v15;
  *(_DWORD *)(v10 + 72) = 0;
  *(_OWORD *)(v10 + 80) = *(_OWORD *)a5;
  v16 = *(_QWORD *)(a5 + 16);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(v10 + 96) = v16;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)(v10 + 112) = 0;
  *(_QWORD *)(v10 + 120) = 0;
  memset(v20, 0, sizeof(v20));
  v21 = (void **)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  *a1 = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_19C87E79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  MEMORY[0x1A1AD6260](v25, 0x1032C40416AD52CLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<`anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0,std::allocator<`anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1A1AD6260);
}

_QWORD *std::__function::__func<`anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0,std::allocator<`anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D5B780;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0,std::allocator<`anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D5B780;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0,std::allocator<`anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, MIL::IRObject *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  const void *v7;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *exception;
  uint64_t *LocationPtr;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v4 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 56))(a2);
  v5 = *(char *)(v4 + 23);
  if (v5 < 0)
  {
    if (*(_QWORD *)(v4 + 8) != 8)
      return 1;
    v4 = *(_QWORD *)v4;
  }
  else if (v5 != 8)
  {
    return 1;
  }
  if (*(_QWORD *)v4 == 0x7966697373616C63)
  {
    if (**(_QWORD **)(a1 + 8))
    {
      exception = __cxa_allocate_exception(0x48uLL);
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      v16 = LocationPtr[1];
      v20 = *LocationPtr;
      v21 = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      std::string::basic_string[abi:ne180100]<0>(v19, "Op \"classify\" can only be defined once per ML program.");
      MIL::ValidationError::ValidationError();
      __cxa_throw(exception, MEMORY[0x1E0D45E90], (void (*)(void *))MIL::ValidationError::~ValidationError);
    }
    v6 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 96))(a2);
    v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 64) + 72))(v6 + 64);
    if (!v7 || !__dynamic_cast(v7, MEMORY[0x1E0D45EB0], MEMORY[0x1E0D45E80], 64))
    {
      v9 = __cxa_allocate_exception(0x48uLL);
      v10 = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      v11 = v10[1];
      v20 = *v10;
      v21 = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      std::string::basic_string[abi:ne180100]<0>(v19, "Op \"classify\" is only valid when defined inside a function level block.");
      MIL::ValidationError::ValidationError();
      __cxa_throw(v9, MEMORY[0x1E0D45E90], (void (*)(void *))MIL::ValidationError::~ValidationError);
    }
    **(_QWORD **)(a1 + 8) = a2;
  }
  return 1;
}

void sub_19C87EA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  void *v17;
  char v18;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;

  if (a15 < 0)
  {
    operator delete(__p);
    v20 = a17;
    if (!a17)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
  }
  else
  {
    v20 = a17;
    if (!a17)
      goto LABEL_11;
    v23 = (unint64_t *)&a17->__shared_owners_;
    do
      v22 = __ldaxr(v23);
    while (__stlxr(v22 - 1, v23));
  }
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_11:
  if ((v18 & 1) != 0)
    __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<`anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0,std::allocator<`anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN12_GLOBAL__N_119ParseClassifierInfoERKN3MIL7IRBlockEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0,std::allocator<`anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

void BrickLayers::BatchedMatMulShapeComputation(char **a1, int a2, char **a3, int a4, _QWORD *a5)
{
  char *v6;
  int64_t v7;
  char *v9;
  char *v10;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *exception;
  uint64_t v50;

  v6 = *a1;
  v7 = a1[1] - *a1;
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Invalid shape of first argument.");
    goto LABEL_62;
  }
  v9 = *a3;
  v10 = a3[1];
  if (v10 == *a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Invalid shape of second argument.");
    goto LABEL_62;
  }
  if (a5[1] - *a5 <= 0xFuLL)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Invalid rank of output.");
    goto LABEL_62;
  }
  if (v7 == 8)
  {
    v50 = 1;
    std::vector<unsigned long>::insert((uint64_t)a1, v6, &v50);
    v9 = *a3;
    v10 = a3[1];
  }
  v14 = (v10 - v9) >> 3;
  if (v10 - v9 == 8)
  {
    v15 = (unint64_t)a3[2];
    if ((unint64_t)v10 >= v15)
    {
      v17 = v15 - (_QWORD)v9;
      v18 = v17 >> 2;
      if (v17 >> 2 <= v14 + 1)
        v18 = v14 + 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v19);
      v21 = *a3;
      v22 = a3[1];
      v23 = &v20[8 * v14];
      v25 = &v20[8 * v24];
      *(_QWORD *)v23 = 1;
      v16 = v23 + 8;
      while (v22 != v21)
      {
        v26 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v23 - 1) = v26;
        v23 -= 8;
      }
      *a3 = v23;
      a3[1] = v16;
      a3[2] = v25;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v10 = 1;
      v16 = v10 + 8;
    }
    a3[1] = v16;
    v9 = *a3;
    v14 = (v16 - *a3) >> 3;
  }
  v27 = *a1;
  v28 = a1[1] - *a1;
  v29 = a5[1] - *a5;
  v30 = v29 >> 3;
  if (v29 >> 3 != v28 >> 3 && v30 != v14)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Invalid rank of output");
    goto LABEL_62;
  }
  v32 = v28 >> 3;
  v33 = -2;
  if (a2)
    v34 = -2;
  else
    v34 = -1;
  v35 = *(_QWORD *)&v27[8 * v32 + 8 * v34];
  if (a4)
    v36 = -1;
  else
    v36 = -2;
  if (v35 != *(_QWORD *)&v9[8 * v14 + 8 * v36])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Incompatible shapes for matrix multiplication.");
LABEL_62:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (a4)
    v37 = -2;
  else
    v37 = -1;
  v38 = v14 + v37;
  if (a2)
    v33 = -1;
  v39 = *(_QWORD *)&v9[8 * v38];
  v40 = *a5 + 8 * v30;
  *(_QWORD *)(v40 - 16) = *(_QWORD *)&v27[8 * v32 + 8 * v33];
  *(_QWORD *)(v40 - 8) = v39;
  if ((unint64_t)v29 >= 0x11)
  {
    if (v30 <= 3)
      v30 = 3;
    v41 = (unint64_t *)(v40 - 24);
    v42 = &v9[8 * v14 - 24];
    v43 = &v27[8 * v32 - 24];
    v44 = 2;
    do
    {
      if (v32 > v44 && v14 > v44)
      {
        v45 = *(_QWORD *)v43;
        v46 = *(_QWORD *)v42;
        if (*(_QWORD *)v42 != 1 && v45 != 1 && v45 != v46)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD5E28](exception, "Invalid shapes for broadcasting");
          goto LABEL_62;
        }
        if (v45 <= v46)
          v45 = *(_QWORD *)v42;
        *v41 = v45;
      }
      if (v32 > v44 && v14 <= v44)
        *v41 = *(_QWORD *)v43;
      if (v32 <= v44 && v14 > v44)
        *v41 = *(_QWORD *)v42;
      ++v44;
      --v41;
      v42 -= 8;
      v43 -= 8;
    }
    while (v30 != v44);
  }
}

void sub_19C87EEB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::insert(uint64_t a1, char *__src, _QWORD *a3)
{
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;

  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    v21 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == __src)
          v23 = 1;
        else
          v23 = v15 >> 2;
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v8, v23);
        v20 = &v24[8 * (v23 >> 2)];
        v21 = &v24[8 * v25];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v22 = v16 + 2;
        if (v16 >= -1)
          v22 = v16 + 1;
        v20 -= 8 * (v22 >> 1);
      }
    }
    *(_QWORD *)v20 = *a3;
    v26 = v20 + 8;
    v27 = *(char **)a1;
    if (*(char **)a1 != __src)
    {
      v28 = __src;
      do
      {
        v29 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v20 - 1) = v29;
        v20 -= 8;
      }
      while (v28 != v27);
    }
    v30 = *(_BYTE **)(a1 + 8);
    v31 = v30 - __src;
    if (v30 != __src)
      memmove(v26, __src, v30 - __src);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = &v26[v31];
    *(_QWORD *)(a1 + 16) = v21;
    if (v32)
      operator delete(v32);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    *(_QWORD *)__src = *a3;
  }
}

void sub_19C87F0D0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t BrickLayers::ConcatNDShapeComputation(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  void *exception;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a3 - (uint64_t)a2) >> 3);
  v6 = *a2;
  v7 = a2[1];
  v8 = (v7 - *a2) >> 3;
  if (v5 >= 2)
  {
    v9 = a2 + 4;
    v10 = v5 - 1;
    while (v8 == (uint64_t)(*v9 - *(v9 - 1)) >> 3)
    {
      v9 += 3;
      if (!--v10)
        goto LABEL_5;
    }
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Invalid ranks of input tensors.");
LABEL_19:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_5:
  if (v8 != (a5 - a4) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Mismatch between ranks of input and output tensors.");
    goto LABEL_19;
  }
  v11 = (v8 & (result >> 63)) + result;
  if (v11 < 0 || v11 >= v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Invalid value of the argument 'axis'.");
    goto LABEL_19;
  }
  if (v7 != v6)
  {
    v12 = 0;
    if ((unint64_t)v8 <= 1)
      v8 = 1;
    do
    {
      v13 = *(_QWORD *)(v6 + 8 * v12);
      *(_QWORD *)(a4 + 8 * v12) = v13;
      v14 = a2 + 3;
      v15 = v5 - 1;
      if (v5 >= 2)
      {
        do
        {
          v16 = *v14;
          if (v12 == v11)
          {
            result = *(_QWORD *)(v16 + 8 * v11);
            v13 += result;
            *(_QWORD *)(a4 + 8 * v12) = v13;
          }
          else
          {
            result = *(_QWORD *)(v16 + 8 * v12);
            if (v13 != result)
            {
              exception = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1A1AD5E28](exception, "Invalid shape of input tensors.");
              goto LABEL_19;
            }
          }
          v14 += 3;
          --v15;
        }
        while (v15);
      }
      ++v12;
    }
    while (v12 != v8);
  }
  return result;
}

void sub_19C87F264(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BrickLayers::BroadcastTo(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *exception;
  void *v39;
  uint64_t v40;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  void *__p;
  void *v46;
  uint64_t v47;
  void *__dst;
  void *v49;
  void *v50;
  _BYTE *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  _BYTE *v56;

  v5 = *a3;
  v4 = (uint64_t *)a3[1];
  v6 = (uint64_t)v4 - *a3;
  v7 = (uint64_t *)*a1;
  v8 = (a1[1] - *a1) >> 3;
  if (v8 < v6 >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "BroadcastTo layer: Invalid target shape.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = v6 >> 3;
  if (v7 == &v7[v8 - (v6 >> 3)])
  {
    v13 = 1;
  }
  else
  {
    v12 = 8 * v8 - 8 * v11;
    v13 = 1;
    do
    {
      v14 = *v7++;
      v13 *= v14;
      v12 -= 8;
    }
    while (v12);
  }
  v15 = 1;
  if ((uint64_t *)v5 != v4)
  {
    v16 = (uint64_t *)*a3;
    do
    {
      v17 = *v16++;
      v15 *= v17;
    }
    while (v16 != v4);
  }
  std::vector<unsigned long>::vector(&v55, v11);
  std::vector<unsigned long>::vector(&v53, v8);
  TensorAlgebraUtils::computeStrides(*a1, a1[1], (uint64_t)v53, (uint64_t)v54);
  TensorAlgebraUtils::computeStrides(*a3, a3[1], (uint64_t)v55, (uint64_t)v56);
  if ((uint64_t *)v5 != v4)
  {
    v18 = v8 - 1;
    v19 = (uint64_t *)(*a3 + 8 * v11 - 8);
    v20 = 1;
    while (1)
    {
      v22 = *v19--;
      v21 = v22;
      v23 = *(_QWORD *)(*a1 + 8 * v18);
      if (v22 != v23)
        break;
      ++v20;
      --v18;
      if (v20 > v11)
        goto LABEL_21;
    }
    if (v21 != 1 || v23 <= 1)
    {
      v39 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](v39, "BroadcastTo layer: Invalid shapes for broadcasting.");
      __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v15 = *((_QWORD *)v53 + v18);
    v13 = *(_QWORD *)(*a1 + 8 * v18);
  }
LABEL_21:
  v52 = 0;
  std::vector<unsigned long>::vector(&v50, v8);
  std::vector<unsigned long>::vector(&__dst, v11);
  v43 = v5;
  v44 = v4;
  v25 = (uint64_t *)*a1;
  v26 = (uint64_t *)a1[1];
  v27 = 1;
  if ((uint64_t *)*a1 == v26)
    goto LABEL_24;
  do
  {
    v28 = *v25++;
    v27 *= v28;
  }
  while (v25 != v26);
  if (v27)
  {
LABEL_24:
    v29 = 0;
    v42 = v8 - v11;
    if (v11 <= 1)
      v30 = 1;
    else
      v30 = v11;
    v40 = v30;
    do
    {
      if (v13)
      {
        v31 = a4 + 4 * v29;
        v32 = v13;
        do
        {
          cblas_scopy_NEWLAPACK();
          v29 += v15;
          v31 += 4 * v15;
          --v32;
        }
        while (v32);
      }
      TensorAlgebraUtils::unravel_index(v29, *a1, a1[1], (unint64_t *)v50, (uint64_t)v51);
      v33 = (char *)v50 + 8 * v42;
      if (v51 != v33)
        memmove(__dst, v33, v51 - v33);
      if ((uint64_t *)v43 != v44)
      {
        v34 = (uint64_t *)*a3;
        v35 = __dst;
        v36 = v40;
        do
        {
          v37 = *v34++;
          if (v37 == 1)
            *v35 = 0;
          ++v35;
          --v36;
        }
        while (v36);
      }
      __p = 0;
      v46 = 0;
      v47 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v55, (uint64_t)v56, (v56 - (_BYTE *)v55) >> 3);
      TensorAlgebraUtils::ravel_multi_index((uint64_t *)__dst, (uint64_t)v49, *a3, a3[1], (uint64_t *)__p, &v52);
      if (__p)
      {
        v46 = __p;
        operator delete(__p);
      }
    }
    while (v29 < v27);
  }
  if (__dst)
  {
    v49 = __dst;
    operator delete(__dst);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
}

void sub_19C87F5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (__p)
    operator delete(__p);
  v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(_QWORD *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void *BrickLayers::GatherShapeComputation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  void *result;
  uint64_t v11;
  _BYTE *v14;
  _BYTE *v15;
  void *exception;

  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v8 = *(_BYTE **)a3;
  v9 = *(_BYTE **)(a3 + 8);
  result = *(void **)a4;
  if ((v7 >> 3) + ((uint64_t)&v9[-*(_QWORD *)a3] >> 3) - 1 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Gather layer: Invalid rank of Output.");
    goto LABEL_13;
  }
  v11 = ((a1 >> 63) & (v7 >> 3)) + a1;
  if (v11 < 0 || v11 >= v7 >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Gather layer: Invalid value of the argument 'axis'.");
LABEL_13:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v11 << 32)
  {
    result = memmove(result, v6, 8 * (int)v11);
    v8 = *(_BYTE **)a3;
    v9 = *(_BYTE **)(a3 + 8);
  }
  if (v9 != v8)
    result = memmove((void *)(*(_QWORD *)a4 + 8 * (int)v11), v8, v9 - v8);
  v14 = *(_BYTE **)(a2 + 8);
  v15 = (_BYTE *)(*(_QWORD *)a2 + 8 * (int)v11 + 8);
  if (v14 != v15)
    return memmove((void *)(*(_QWORD *)a4 + 8 * (int)v11 + ((uint64_t)((*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) << 29) >> 29)), v15, v14 - v15);
  return result;
}

void sub_19C87F794(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *BrickLayers::StackNDShapeComputation(uint64_t a1, char ***a2, char **a3)
{
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  char *result;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  char *v18;
  void *exception;

  v6 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  v7 = **a2;
  v8 = (*a2)[1];
  v9 = v8 - v7;
  if (v6 >= 2)
  {
    v10 = *a2 + 4;
    v11 = v6 - 1;
    while (1)
    {
      v12 = (const void *)*(v10 - 1);
      if (v9 != *v10 - (_QWORD)v12 || memcmp(v7, v12, v8 - v7))
        break;
      v10 += 3;
      if (!--v11)
        goto LABEL_6;
    }
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "StackND layer: Invalid shapes of input tensors.");
LABEL_15:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_6:
  v13 = (v9 >> 3) + 1;
  result = *a3;
  if (v13 != (a3[1] - *a3) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "StackND layer: Invalid rank of output tensor.");
    goto LABEL_15;
  }
  v15 = (v13 & (a1 >> 63)) + a1;
  if (v15 < 0 || v15 > v9 >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "StackND layer: Invalid value of the argument 'axis'.");
    goto LABEL_15;
  }
  v16 = (int)v15;
  if (v15 << 32)
  {
    memmove(result, v7, 8 * (int)v15);
    result = *a3;
    v7 = **a2;
    v8 = (*a2)[1];
  }
  v17 = (unint64_t *)&result[8 * v16];
  *v17 = v6;
  v18 = &v7[8 * v16];
  if (v8 != v18)
    return (char *)memmove(v17 + 1, v18, v8 - v18);
  return result;
}

void sub_19C87F938(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *BrickLayers::SplitNDShapeComputation(char *result, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  uint64_t v10;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *exception;

  v4 = *a2;
  v5 = (a2[1] - *a2) >> 3;
  v6 = *a4;
  v7 = a4[1];
  if (v5 != 0xAAAAAAAAAAAAAAABLL * ((v7 - *a4) >> 3))
  {
LABEL_23:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Split layer: Invalid number or size of splits.");
    goto LABEL_22;
  }
  v9 = *(char **)a3;
  v10 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3;
  if (v7 == v6)
  {
    v16 = (uint64_t)&result[v10 & ((uint64_t)result >> 63)];
    if (v16 >= 0 && v16 < v10)
    {
      v19 = 0;
      goto LABEL_19;
    }
LABEL_24:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Invalid value of the argument 'axis'.");
LABEL_22:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v5 <= 1)
    v13 = 1;
  else
    v13 = (a2[1] - *a2) >> 3;
  v14 = (_QWORD *)(v6 + 8);
  v15 = v13;
  do
  {
    if (v10 != (uint64_t)(*v14 - *(v14 - 1)) >> 3)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](exception, "Mismatch between ranks of input and output tensors.");
      goto LABEL_22;
    }
    v14 += 3;
    --v15;
  }
  while (v15);
  v16 = (uint64_t)&result[v10 & ((uint64_t)result >> 63)];
  if (v16 < 0 || v16 >= v10)
    goto LABEL_24;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  do
  {
    result = (char *)(v6 + v17);
    if (v6 + v17 != a3)
    {
      result = std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(result, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
      v4 = *a2;
      v6 = *a4;
    }
    *(_QWORD *)(*(_QWORD *)(v6 + v17) + 8 * v16) = *(_QWORD *)(v4 + 8 * v18);
    v19 += *(_QWORD *)(v4 + 8 * v18++);
    v17 += 24;
  }
  while (v13 != v18);
  v9 = *(char **)a3;
LABEL_19:
  if (v19 != *(_QWORD *)&v9[8 * v16])
    goto LABEL_23;
  return result;
}

void sub_19C87FB14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BrickLayers::SliceNDShapeComputation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD **a7)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *exception;
  void *__p[3];

  v15 = *a6;
  v14 = a6[1];
  v16 = (v14 - *a6) >> 3;
  std::vector<long long>::vector(__p, v16);
  v17 = *(_QWORD **)a1;
  if (v16 != (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "SliceND layer: Mismatch between the input rank and the number of elements in begin_ids.");
    goto LABEL_52;
  }
  v18 = *(_QWORD **)a2;
  if (v16 != (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "SliceND layer: Mismatch between the input rank and the number of elements in end_ids.");
    goto LABEL_52;
  }
  if (a4[1] != v16)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "SliceND layer: Mismatch between the input rank and the number of elements in begin_masks.");
    goto LABEL_52;
  }
  if (a5[1] != v16)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "SliceND layer: Mismatch between the input rank and the number of elements in end_masks.");
    goto LABEL_52;
  }
  v19 = *(uint64_t **)a3;
  if (v16 != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "SliceND layer: Mismatch between the input rank and the number of elements in strides.");
LABEL_52:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v14 == v15)
    goto LABEL_39;
  v20 = 0;
  v21 = *a4;
  v22 = *a6;
  if (v16 <= 1)
    v23 = 1;
  else
    v23 = v16;
  do
  {
    if (((*(_QWORD *)(v21 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
    {
      if (v19[v20] <= 0)
        v24 = *(_QWORD *)(v22 + 8 * v20) - 1;
      else
        LODWORD(v24) = 0;
      v24 = (int)v24;
    }
    else
    {
      v24 = v17[v20];
      if ((v24 & 0x8000000000000000) == 0)
        goto LABEL_18;
      v24 += *(int *)(v22 + 8 * v20);
    }
    v17[v20] = v24;
    if (v24 < 0)
      goto LABEL_42;
LABEL_18:
    if (v24 >= *(int *)(v22 + 8 * v20))
    {
LABEL_42:
      v35 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](v35, "SliceND layer: Invalid values in begin_ids.");
      __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    ++v20;
  }
  while (v23 != v20);
  v25 = 0;
  v26 = *a5;
  v27 = *a6;
  do
  {
    if (((*(_QWORD *)(v26 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v25) & 1) != 0)
    {
      if (v19[v25] < 1)
        LODWORD(v28) = -1;
      else
        v28 = *(_QWORD *)(v27 + 8 * v25);
      v28 = (int)v28;
      v18[v25] = (int)v28;
    }
    else
    {
      v28 = v18[v25];
      if (v28 < 0)
      {
        v28 += *(int *)(v27 + 8 * v25);
        v18[v25] = v28;
        if (v28 < 0)
        {
LABEL_43:
          v36 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD5E28](v36, "SliceND layer: Invalid values in end_ids.");
          __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
    }
    if (v28 > *(int *)(v27 + 8 * v25))
      goto LABEL_43;
    ++v25;
  }
  while (v23 != v25);
  v29 = (uint64_t *)__p[0];
  v30 = v23;
  do
  {
    if (!*v19)
    {
      v37 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](v37, "SliceND layer: Invalid values in strides.");
      goto LABEL_46;
    }
    v31 = (*v18 - *v17) / *v19;
    *v29 = v31;
    if ((*v18 - *v17) % *v19)
      *v29 = ++v31;
    if (v31 <= 0)
    {
      v37 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](v37, "SliceND layer: Invalid values in arguments (begin_ids, end_ids, strides)");
LABEL_46:
      __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    ++v29;
    ++v17;
    ++v18;
    ++v19;
    --v30;
  }
  while (v30);
  v32 = (uint64_t *)__p[0];
  v33 = *a7;
  do
  {
    v34 = *v32++;
    *v33++ = v34;
    --v23;
  }
  while (v23);
LABEL_39:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19C87FEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  __cxa_free_exception(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<_KDInterval>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_19C87FFAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *BrickLayers::TileShapeComputation(uint64_t *result, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *exception;

  v5 = a4 - a3;
  if (v5 != (a2 - (uint64_t)result) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Tile layer: Mismatch between input rank and the number of elements in multiples.");
    goto LABEL_9;
  }
  if (a4 != a3)
  {
    if (v5 <= 1)
      v5 = 1;
    while (1)
    {
      v7 = *result++;
      v6 = v7;
      if (!v7)
        break;
      v8 = *a3++;
      *a5++ = v8 * v6;
      if (!--v5)
        return result;
    }
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Tile layer: Invalid values in multiples.");
LABEL_9:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_19C88006C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BrickLayers::Tile(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v28;
  uint64_t *v29;
  void *__p;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  _BYTE *v38;
  uint64_t v39;

  BrickLayers::TileShapeComputation(*(uint64_t **)a1, *(_QWORD *)(a1 + 8), *a3, a3[1], (_QWORD *)*a5);
  v39 = 0;
  v28 = *a3;
  v29 = a3[1];
  v8 = v29 - *a3;
  std::vector<unsigned long>::vector(&v37, v8);
  std::vector<unsigned long>::vector(&v35, v8);
  std::vector<unsigned long>::vector(&v33, v8);
  v9 = (uint64_t *)*a5;
  v10 = 1;
  while (v9 != (uint64_t *)a5[1])
  {
    v11 = *v9++;
    v10 *= v11;
  }
  TensorAlgebraUtils::computeStrides((uint64_t)*a3, (uint64_t)a3[1], (uint64_t)v37, (uint64_t)v38);
  if (v10)
  {
    v12 = 0;
    v13 = 8 * v8 - 8;
    v14 = *(uint64_t *)((char *)*a3 + v13);
    v15 = *(_QWORD *)(*(_QWORD *)a1 + v13);
    if (v8 <= 1)
      v16 = 1;
    else
      v16 = v8;
    v26 = v16;
    do
    {
      TensorAlgebraUtils::unravel_index(v12, *a5, a5[1], (unint64_t *)v33, (uint64_t)v34);
      if (v29 != v28)
      {
        v17 = (uint64_t *)v33;
        v18 = *a3;
        v19 = v26;
        v20 = (unint64_t *)v35;
        do
        {
          v22 = *v17++;
          v21 = v22;
          v23 = *v18++;
          *v20++ = v21 % v23;
          --v19;
        }
        while (v19);
      }
      __p = 0;
      v31 = 0;
      v32 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v37, (uint64_t)v38, (v38 - (_BYTE *)v37) >> 3);
      TensorAlgebraUtils::ravel_multi_index((uint64_t *)v35, (uint64_t)v36, (uint64_t)*a3, (uint64_t)a3[1], (uint64_t *)__p, &v39);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      if (v15)
      {
        v24 = a4 + 4 * v12;
        v25 = v15;
        do
        {
          cblas_scopy_NEWLAPACK();
          v12 += v14;
          v24 += 4 * v14;
          --v25;
        }
        while (v25);
      }
    }
    while (v12 < v10);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
}

void sub_19C880280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t BrickLayers::SlidingWindowsShapeComputation(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *exception;

  v7 = (a5 - a4) >> 3;
  v8 = (a7 - a6) >> 3;
  if (v7 != v8 - 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Sliding Windows Layer: Mismatch between ranks of input and output tensors.");
    goto LABEL_23;
  }
  if (a2 <= 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Sliding Windows Layer: Window size can't be less than 1");
    goto LABEL_23;
  }
  if (a3 <= 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Sliding Windows Layer: Step can't be less than 1");
    goto LABEL_23;
  }
  v9 = (v7 & (result >> 63)) + result;
  if (v9 < 0 || v9 >= v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Sliding Windows Layer: Invalid value of the argument 'axis'.");
    goto LABEL_23;
  }
  v10 = *(_QWORD *)(a4 + 8 * v9);
  v11 = v10 < a2;
  v12 = v10 - a2;
  if (v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Sliding Windows Layer: Window Size can't be larger than the dimension length.");
    goto LABEL_23;
  }
  v13 = v12 / a3;
  if (v13 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Sliding Windows Layer: Invalid values in arguments (axis, window_size, step)");
LABEL_23:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)(a6 + 8 * v9) = v13 + 1;
  *(_QWORD *)(a6 + 8 * (v9 + 1)) = a2;
  if (a7 != a6)
  {
    v14 = 0;
    if (v8 <= 1)
      v8 = 1;
    while (1)
    {
      v15 = v14;
      if (v14 < v9)
        goto LABEL_14;
      if (v14 > v9 + 1)
        break;
LABEL_15:
      if (v8 == ++v14)
        return result;
    }
    v15 = v14 - 1;
LABEL_14:
    *(_QWORD *)(a6 + 8 * v14) = *(_QWORD *)(a4 + 8 * v15);
    goto LABEL_15;
  }
  return result;
}

void sub_19C880464(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C880528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8807E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  void (**v12)(_QWORD);
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a10);

  v12[2](v12);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19C880C88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8810B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void (**v14)(void);
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a13);

  v14[2]();
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

CoreML::Specification::Model *std::allocate_shared[abi:ne180100]<CoreML::Specification::Model,std::allocator<CoreML::Specification::Model>,CoreML::Specification::Model&,void>(CoreML::Specification::Model **a1, const CoreML::Specification::Model *a2)
{
  _QWORD *v4;
  CoreML::Specification::Model *result;

  v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E3D5BC68;
  result = CoreML::Specification::Model::Model((CoreML::Specification::Model *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (CoreML::Specification::Model *)v4;
  return result;
}

void sub_19C8812BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<double>>::__construct_one_at_end[abi:ne180100]<std::vector<double> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_19C88131C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  int64x2_t v14;
  char *v15;
  char *v17;
  int64x2_t v18;
  char *v19;
  _QWORD *v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  v19 = &v7[24 * v6];
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v8, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v9 = v18.i64[0];
  v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  v12 = (_QWORD *)*a1;
  v11 = (_QWORD *)a1[1];
  if (v11 == (_QWORD *)*a1)
  {
    v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      v9 -= 24;
      *(_QWORD *)(v9 + 16) = 0;
      v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)v9 = v13;
      *(_QWORD *)(v9 + 16) = v11[2];
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    v14 = *(int64x2_t *)a1;
    v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  v18 = v14;
  v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  v19 = v15;
  v17 = (char *)v14.i64[0];
  std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)&v17);
  return v10;
}

void sub_19C881484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<_KDInterval>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C8814F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<CoreML::Specification::Model>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BC68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::Specification::Model>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BC68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_emplace<CoreML::Specification::Model>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C8815B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8817B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C881828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CoreML::MultiArrayBuffer::MultiArrayBuffer(uint64_t a1, uint64_t a2, uint64_t a3, int a4, size_t a5)
{
  uint64_t v10;
  char *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  void *v28;
  _QWORD *v29;
  std::__shared_weak_count *size;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t *v35;
  NSObject *CoreChannel;
  std::string *v38;
  std::bad_alloc *v39;
  std::bad_alloc *v40;
  unint64_t v41;
  std::runtime_error *exception;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::bad_alloc *v47;
  std::bad_alloc *v48;
  std::string v49;
  std::string __p;
  std::string buf;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 8) = 0u;
  v10 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = &off_1E3D59518;
  *(_BYTE *)(a1 + 104) = 0;
  v11 = (char *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  if (a1 + 24 != a2)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)(a1 + 24), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if (v11 != (char *)a3)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v11, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  *(_DWORD *)(a1 + 72) = a4;
  v12 = *(unint64_t **)(a1 + 24);
  v13 = 1;
  while (v12 != *(unint64_t **)(a1 + 32))
  {
    v14 = *v12++;
    v15 = v13 * v14;
    if (is_mul_ok(v13, v14))
      v13 = v15;
    else
      v13 = -1;
  }
  *(_QWORD *)(a1 + 80) = v13;
  *(_WORD *)(a1 + 88) = CoreML::MultiArrayBuffer::computeAttributes((uint64_t **)a2, *(uint64_t **)a3, *(_QWORD *)(a3 + 8), 1);
  *(_QWORD *)(a1 + 96) = 0;
  v16 = *(char **)a2;
  v17 = *(char **)(a2 + 8);
  v18 = (uint64_t)&v17[-*(_QWORD *)a2] >> 3;
  v19 = *(char **)a3;
  if (v18 != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3)
  {
    v41 = (uint64_t)&v17[-*(_QWORD *)a2] >> 3;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v49, v41);
    v43 = std::string::insert(&v49, 0, "strides must be ");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v45 = std::string::append(&buf, " elements for shape");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v17 == v16)
  {
    v20 = 1;
  }
  else
  {
    v20 = 0;
    if (v18 <= 1)
      v18 = 1;
    while (1)
    {
      v22 = *(_QWORD *)v16;
      v16 += 8;
      v21 = v22;
      v23 = *(_QWORD *)v19;
      v19 += 8;
      v24 = v21 * v23;
      v25 = is_mul_ok(v21, v23) ? v24 : -1;
      if (!v25)
        break;
      if (v20 <= v25)
        v20 = v25;
      if (!--v18)
        goto LABEL_24;
    }
    v20 = 0;
  }
LABEL_24:
  if (is_mul_ok(v20, (unsigned __int16)a4 >> 3))
    v26 = v20 * ((unsigned __int16)a4 >> 3);
  else
    v26 = -1;
  if (v26)
  {
    if (v26 == -1)
    {
      CoreChannel = MLLoggingGetCoreChannel();
      if (os_log_type_enabled(CoreChannel, OS_LOG_TYPE_ERROR))
      {
        CoreML::shapeToString((uint64_t)&__p, (uint64_t *)a2);
        v38 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
        _os_log_error_impl(&dword_19C486000, CoreChannel, OS_LOG_TYPE_ERROR, "Failed to allocate MultiArrayBuffer with shape %s due to integer overflow", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v39 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v40 = std::bad_alloc::bad_alloc(v39);
      __cxa_throw(v40, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
    }
    if (a5 < 2)
    {
      v33 = operator new[]();
      __p.__r_.__value_.__r.__words[0] = v33;
      v34 = (_QWORD *)operator new();
      *v34 = &off_1E3D5C800;
      v34[1] = 0;
      v34[2] = 0;
      v34[3] = v33;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
      std::shared_ptr<MIL::IRProgram const>::operator=[abi:ne180100](v10, (__int128 *)&__p);
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        return a1;
      v35 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v32 = __ldaxr(v35);
      while (__stlxr(v32 - 1, v35));
      goto LABEL_38;
    }
    v27 = (a5 + v26 - 1) / a5 * a5;
    if (v27 < v26)
    {
      v47 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v48 = std::bad_alloc::bad_alloc(v47);
      __cxa_throw(v48, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
    }
    v28 = malloc_type_aligned_alloc(a5, v27, 0x59E15B9CuLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    v29 = (_QWORD *)operator new();
    *v29 = &off_1E3D5C7C8;
    v29[1] = 0;
    v29[2] = 0;
    v29[3] = v28;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
    std::shared_ptr<MIL::IRProgram const>::operator=[abi:ne180100](v10, (__int128 *)&__p);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v31 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
LABEL_38:
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  return a1;
}

void sub_19C881C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  void **v30;
  void **v31;
  void *v32;
  int v33;
  void *v35;
  void *v36;

  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v33 & 1) == 0)
    {
LABEL_10:
      v35 = *v31;
      if (*v31)
      {
        *(_QWORD *)(v28 + 56) = v35;
        operator delete(v35);
      }
      v36 = *v30;
      if (*v30)
      {
        *(_QWORD *)(v28 + 32) = v36;
        operator delete(v36);
      }
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v29);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v32);
  goto LABEL_10;
}

void sub_19C881CE4(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    MEMORY[0x1A1AD6248](v2, 0x1000C8077774924);
    __cxa_rethrow();
  }
  JUMPOUT(0x19C881DC4);
}

void sub_19C881D14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  __cxa_end_catch();
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sub_19C881D28(void *a1, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    free(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x19C881DC4);
}

void sub_19C881D48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  __cxa_end_catch();
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sub_19C881D54(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x19C881DC4);
}

void sub_19C881D68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  __cxa_free_exception(v15);
  JUMPOUT(0x19C881D9CLL);
}

void std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType,unsigned long)::$_1,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType,unsigned long)::$_1,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1A1AD6248);
  return result;
}

uint64_t std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType,unsigned long)::$_1,std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6CoreML16MultiArrayBufferC1ERKNSt3__16vectorImNS1_9allocatorImEEEES7_NS_10ScalarTypeEmE3$_1"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType,unsigned long)::$_0,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType,unsigned long)::$_0,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  free(*(void **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType,unsigned long)::$_0,std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6CoreML16MultiArrayBufferC1ERKNSt3__16vectorImNS1_9allocatorImEEEES7_NS_10ScalarTypeEmE3$_0"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t CoreML::MultiArrayBuffer::MultiArrayBuffer(uint64_t a1, unint64_t **a2, int a3, int a4, size_t a5)
{
  void *__p[3];

  CoreML::MultiArrayBuffer::stridesForConiguousArray((unint64_t **)__p, a2, a4);
  CoreML::MultiArrayBuffer::MultiArrayBuffer(a1, (uint64_t)a2, (uint64_t)__p, a3, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_19C881F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(unsigned char *,std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType)::$_0,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(unsigned char *,std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType)::$_0,std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN6CoreML16MultiArrayBufferC1EPhRKNSt3__16vectorImNS2_9allocatorImEEEES8_NS_10ScalarTypeEE3$_0"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t CoreML::MultiArrayBuffer::MultiArrayBuffer(uint64_t a1, __CVBuffer *a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = &off_1E3D59518;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 24), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 48), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  *(_DWORD *)(a1 + 72) = 65552;
  v8 = *(unint64_t **)(a1 + 24);
  v9 = 1;
  while (v8 != *(unint64_t **)(a1 + 32))
  {
    v10 = *v8++;
    v11 = v9 * v10;
    if (is_mul_ok(v9, v10))
      v9 = v11;
    else
      v9 = -1;
  }
  *(_QWORD *)(a1 + 80) = v9;
  *(_WORD *)(a1 + 88) = CoreML::MultiArrayBuffer::computeAttributes((uint64_t **)a3, *(uint64_t **)a4, *(_QWORD *)(a4 + 8), 1);
  *(_QWORD *)(a1 + 96) = CVPixelBufferRetain(a2);
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

void sub_19C8820A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::lockAndGetBaseAddressOfPixelBuffer(__CVBuffer *)::$_0,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::lockAndGetBaseAddressOfPixelBuffer(__CVBuffer *)::$_0,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 0);
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

uint64_t std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::lockAndGetBaseAddressOfPixelBuffer(__CVBuffer *)::$_0,std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK6CoreML16MultiArrayBuffer34lockAndGetBaseAddressOfPixelBufferEP10__CVBufferE3$_0"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void CoreML::MultiArrayBuffer::squeeze(CoreML::MultiArrayBuffer *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  void *v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  void *v42;
  char *v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  void *v57[2];
  _QWORD v58[2];
  void *__p[2];
  _QWORD v60[2];
  uint64_t v61;
  std::__shared_weak_count *v62;

  __p[0] = 0;
  __p[1] = 0;
  v60[0] = 0;
  v57[0] = 0;
  v57[1] = 0;
  v58[0] = 0;
  std::vector<unsigned long>::reserve(__p, (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  std::vector<unsigned long>::reserve(v57, (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  if (v4 == v5)
  {
    v5 = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7 != 1)
      {
        v8 = (char *)__p[1];
        if (__p[1] >= (void *)v60[0])
        {
          v10 = (char *)__p[0];
          v11 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            goto LABEL_84;
          v13 = v60[0] - (unint64_t)__p[0];
          if ((uint64_t)(v60[0] - (unint64_t)__p[0]) >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v60, v14);
            v10 = (char *)__p[0];
            v8 = (char *)__p[1];
            v7 = *(_QWORD *)(v5 + 8 * v6);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v7;
          v9 = v16 + 8;
          while (v8 != v10)
          {
            v17 = *((_QWORD *)v8 - 1);
            v8 -= 8;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          __p[0] = v16;
          __p[1] = v9;
          v60[0] = &v15[8 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)__p[1] = v7;
          v9 = v8 + 8;
        }
        __p[1] = v9;
        v18 = *(_QWORD *)(a2 + 48);
        v19 = (char *)v57[1];
        if (v57[1] >= (void *)v58[0])
        {
          v21 = (char *)v57[0];
          v22 = ((char *)v57[1] - (char *)v57[0]) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
LABEL_84:
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          v24 = v58[0] - (unint64_t)v57[0];
          if ((uint64_t)(v58[0] - (unint64_t)v57[0]) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v58, v25);
            v21 = (char *)v57[0];
            v19 = (char *)v57[1];
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[8 * v22];
          *(_QWORD *)v27 = *(_QWORD *)(v18 + 8 * v6);
          v20 = v27 + 8;
          while (v19 != v21)
          {
            v28 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v27 - 1) = v28;
            v27 -= 8;
          }
          v57[0] = v27;
          v57[1] = v20;
          v58[0] = &v26[8 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v57[1] = *(_QWORD *)(v18 + 8 * v6);
          v20 = v19 + 8;
        }
        v57[1] = v20;
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(_QWORD *)(a2 + 32);
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 3);
  }
  if (v4 != v5)
  {
    v29 = (char *)__p[1];
    if (__p[1] == __p[0])
    {
      if (__p[1] >= (void *)v60[0])
      {
        v31 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v32 = (uint64_t)(v60[0] - (unint64_t)__p[0]) >> 2;
        if (v32 <= v31 + 1)
          v32 = v31 + 1;
        if (v60[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v60, v33);
        v35 = (char *)__p[0];
        v36 = (char *)__p[1];
        v37 = &v34[8 * v31];
        v39 = &v34[8 * v38];
        *(_QWORD *)v37 = 1;
        v30 = v37 + 8;
        while (v36 != v35)
        {
          v40 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v37 - 1) = v40;
          v37 -= 8;
        }
        __p[0] = v37;
        __p[1] = v30;
        v60[0] = v39;
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_QWORD *)__p[1] = 1;
        v30 = v29 + 8;
      }
      __p[1] = v30;
      v41 = (char *)v57[1];
      if (v57[1] >= (void *)v58[0])
      {
        v43 = (char *)v57[0];
        v44 = ((char *)v57[1] - (char *)v57[0]) >> 3;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v46 = v58[0] - (unint64_t)v57[0];
        if ((uint64_t)(v58[0] - (unint64_t)v57[0]) >> 2 > v45)
          v45 = v46 >> 2;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v58, v47);
          v43 = (char *)v57[0];
          v41 = (char *)v57[1];
        }
        else
        {
          v48 = 0;
        }
        v49 = &v48[8 * v44];
        v50 = &v48[8 * v47];
        *(_QWORD *)v49 = 1;
        v42 = v49 + 8;
        while (v41 != v43)
        {
          v51 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *((_QWORD *)v49 - 1) = v51;
          v49 -= 8;
        }
        v57[0] = v49;
        v57[1] = v42;
        v58[0] = v50;
        if (v43)
          operator delete(v43);
      }
      else
      {
        *(_QWORD *)v57[1] = 1;
        v42 = v41 + 8;
      }
      v57[1] = v42;
    }
  }
  *(_QWORD *)this = &off_1E3D59518;
  *((_QWORD *)this + 1) = 0;
  v52 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)__p;
  *((_QWORD *)this + 5) = v60[0];
  __p[0] = 0;
  __p[1] = 0;
  v60[0] = 0;
  *((_OWORD *)this + 3) = *(_OWORD *)v57;
  *((_QWORD *)this + 8) = v58[0];
  v57[0] = 0;
  v57[1] = 0;
  v58[0] = 0;
  *((_DWORD *)this + 18) = *(_DWORD *)(a2 + 72);
  *((_QWORD *)this + 10) = *(_QWORD *)(a2 + 80);
  *((_WORD *)this + 44) = *(_WORD *)(a2 + 88);
  *((_QWORD *)this + 12) = CVPixelBufferRetain(*(CVPixelBufferRef *)(a2 + 96));
  *((_BYTE *)this + 104) = 0;
  std::atomic_load[abi:ne180100]<CoreML::MultiArrayBuffer>(&v61, (_QWORD *)(a2 + 8));
  v53 = v61;
  if (v61 && *(_QWORD *)(a2 + 96))
    *((_BYTE *)this + 104) = 1;
  v54 = v62;
  std::shared_ptr<unsigned char>::operator=[abi:ne180100](v52, v53, (uint64_t)v62);
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v57[0])
  {
    v57[1] = v57[0];
    operator delete(v57[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19C8825FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__11742(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t CoreML::initVIBuffer(CoreML *this, const CoreML::MultiArrayBuffer *a2, vImage_Buffer *a3)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *i;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  if (!*((_QWORD *)this + 10))
    return 0;
  v5 = (unint64_t *)*((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4);
  v6 = v4 - (_QWORD)v5;
  if ((unint64_t)(v4 - (_QWORD)v5) < 0x10)
    return 0;
  v8 = (unint64_t *)*((_QWORD *)this + 6);
  v9 = (unint64_t *)*((_QWORD *)this + 7);
  if (v8 != v9)
  {
    for (i = v8 + 1; i != v9; ++i)
    {
      v12 = *(i - 1);
      v11 = *i;
      if (v11 > v12)
        return 0;
    }
  }
  v13 = v6 >> 3;
  v14 = (v6 >> 3) - 1;
  if (v8[v14] != 1)
    return 0;
  v15 = (unint64_t *)(v4 - 8);
  v16 = 1;
  if (v5 != (unint64_t *)(v4 - 8))
  {
    do
    {
      v17 = *v5++;
      v16 = CoreML::SafeMultiplies<unsigned long>::operator()(v16, v17);
    }
    while (v5 != v15);
    v8 = (unint64_t *)*((_QWORD *)this + 6);
    v5 = (unint64_t *)*((_QWORD *)this + 3);
  }
  v18 = v8[v13 - 2];
  if (v18 * v16 != *v5 * *v8)
    return 0;
  v19 = v5[v14];
  v20 = v18 * ((unsigned __int16)*((_DWORD *)this + 18) >> 3);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = v16;
  *((_QWORD *)a2 + 2) = v19;
  *((_QWORD *)a2 + 3) = v20;
  return 1;
}

void ___ZN6CoreMLL16copyMultiArrayVIIddEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL16copyMultiArrayVIIddEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E3D659A8;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745;
  v6[3] = &unk_1E3D659F8;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

__n128 __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *(_OWORD *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 40) = v2;
  v4 = *(_OWORD *)(a2 + 88);
  v5 = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v4;
  result = *(__n128 *)(a2 + 152);
  v8 = *(_OWORD *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  *(__n128 *)(a1 + 152) = result;
  return result;
}

uint64_t CoreML::MultiArrayIterator<double>::MultiArrayIterator(uint64_t a1, uint64_t a2, int a3, char a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v24;
  std::__shared_weak_count *v25;

  CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)a1, a2);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a1);
  v8 = v24;
  v7 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = v8;
  v11 = *(uint64_t **)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 32) - (_QWORD)v11;
  v14 = v13 >> 3;
  if (v13)
  {
    if (v14 <= 1)
      v15 = 1;
    else
      v15 = v13 >> 3;
    v16 = *(uint64_t **)(a1 + 48);
    do
    {
      v17 = *v11++;
      v18 = v17 - 1;
      v19 = *v16++;
      v8 += 8 * v19 * v18;
      --v15;
    }
    while (v15);
    *(_QWORD *)(a1 + 120) = v8;
  }
  *(_QWORD *)(a1 + 120) = v8 + 8;
  v20 = v14 - 1;
  if (a3)
    v21 = 1;
  else
    v21 = -1;
  if (a3)
    v22 = v14 - 1;
  else
    v22 = 0;
  if (a3)
    v20 = 0;
  *(_DWORD *)(a1 + 176) = v21;
  *(_QWORD *)(a1 + 160) = v22;
  *(_QWORD *)(a1 + 168) = v20;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(v12 + 8 * v20);
  v24 = 0;
  std::vector<unsigned long>::resize((char **)(a1 + 128), v14, &v24);
  if ((a4 & 1) == 0)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * *(_QWORD *)(a1 + 168)) = *(_QWORD *)(*(_QWORD *)(a1 + 24)
                                                                                 + 8 * *(_QWORD *)(a1 + 168));
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 120);
  }
  return a1;
}

void sub_19C882994(_Unwind_Exception *a1)
{
  CoreML::MultiArrayBuffer *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 17) = v4;
    operator delete(v4);
  }
  CoreML::MultiArrayBuffer::~MultiArrayBuffer(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::MultiArrayIterator<double>::operator++(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(result + 112);
  v1 = *(_QWORD *)(result + 120);
  if (v2 < v1)
  {
    v3 = *(_QWORD *)(result + 168);
    v4 = *(_QWORD *)(result + 128);
    v5 = (unint64_t *)(v4 + 8 * v3);
    v6 = *v5;
    v7 = *v5 + 1;
    *v5 = v7;
    v8 = v2 + 8 * *(_QWORD *)(result + 152);
    v9 = *(_QWORD *)(result + 24);
    if (v7 >= *(_QWORD *)(v9 + 8 * v3))
    {
      while (v3 != *(_QWORD *)(result + 160))
      {
        v10 = *(_QWORD *)(result + 48);
        v11 = v8 + 8 * *(_QWORD *)(v10 + 8 * v3) * ~v6;
        *v5 = 0;
        v3 += *(int *)(result + 176);
        v5 = (unint64_t *)(v4 + 8 * v3);
        v6 = *v5;
        v12 = *v5 + 1;
        *v5 = v12;
        v8 = v11 + 8 * *(_QWORD *)(v10 + 8 * v3);
        if (v12 < *(_QWORD *)(v9 + 8 * v3))
          goto LABEL_7;
      }
      v8 = v1;
    }
LABEL_7:
    *(_QWORD *)(result + 112) = v8;
  }
  return result;
}

uint64_t CoreML::vectorizeMultiArray<double,float>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  int v8;
  float *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const double *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  vDSP_Length v17;
  uint64_t v18;
  float v20;
  _QWORD v21[16];
  void *__p;
  void *v23;
  float *v24;
  std::__shared_weak_count *v25;
  double *v26;
  void *v27;
  void *v28;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65600 && *(_DWORD *)(a3 + 72) == 65568;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a3);
  v9 = v24;
  v10 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a1);
    v13 = (const double *)v24;
    v14 = v25;
    if (v25)
    {
      v15 = (unint64_t *)&v25->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *(_QWORD *)(a1 + 80);
    v18 = 1;
    vDSP_vdpsp(v13, 1, v9, 1, v17);
  }
  else
  {
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v24, a1, a2, 1);
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)v21, a1, 1, 0);
    while (v26 != (double *)v21[14])
    {
      v20 = *v26;
      *v9++ = v20;
      CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v24);
    }
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v21);
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v24);
    return 1;
  }
  return v18;
}

void sub_19C882C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

BOOL CoreML::initBNNSDArrayDescriptor<float>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  int BNNSDataLayout;
  uint64_t v7;

  BNNSDataLayout = CoreML::getBNNSDataLayout(__src, a3, (char *)(a4 + 72));
  if (BNNSDataLayout != -1)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != *(_QWORD *)a1)
      memmove((void *)(a4 + 8), *(const void **)a1, v7 - *(_QWORD *)a1);
    *(_DWORD *)(a4 + 144) = 65568;
    *(_DWORD *)(a4 + 4) = BNNSDataLayout;
    *(_QWORD *)(a4 + 164) = 1065353216;
  }
  return BNNSDataLayout != -1;
}

uint64_t CoreML::MultiArrayIterator<float>::MultiArrayIterator(uint64_t a1, uint64_t a2, int a3, char a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v24;
  std::__shared_weak_count *v25;

  CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)a1, a2);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a1);
  v8 = v24;
  v7 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = v8;
  v11 = *(uint64_t **)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 32) - (_QWORD)v11;
  v14 = v13 >> 3;
  if (v13)
  {
    if (v14 <= 1)
      v15 = 1;
    else
      v15 = v13 >> 3;
    v16 = *(uint64_t **)(a1 + 48);
    do
    {
      v17 = *v11++;
      v18 = v17 - 1;
      v19 = *v16++;
      v8 += 4 * v19 * v18;
      --v15;
    }
    while (v15);
    *(_QWORD *)(a1 + 120) = v8;
  }
  *(_QWORD *)(a1 + 120) = v8 + 4;
  v20 = v14 - 1;
  if (a3)
    v21 = 1;
  else
    v21 = -1;
  if (a3)
    v22 = v14 - 1;
  else
    v22 = 0;
  if (a3)
    v20 = 0;
  *(_DWORD *)(a1 + 176) = v21;
  *(_QWORD *)(a1 + 160) = v22;
  *(_QWORD *)(a1 + 168) = v20;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(v12 + 8 * v20);
  v24 = 0;
  std::vector<unsigned long>::resize((char **)(a1 + 128), v14, &v24);
  if ((a4 & 1) == 0)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * *(_QWORD *)(a1 + 168)) = *(_QWORD *)(*(_QWORD *)(a1 + 24)
                                                                                 + 8 * *(_QWORD *)(a1 + 168));
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 120);
  }
  return a1;
}

void sub_19C882DDC(_Unwind_Exception *a1)
{
  CoreML::MultiArrayBuffer *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 17) = v4;
    operator delete(v4);
  }
  CoreML::MultiArrayBuffer::~MultiArrayBuffer(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::MultiArrayIterator<float>::operator++(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(result + 112);
  v1 = *(_QWORD *)(result + 120);
  if (v2 < v1)
  {
    v3 = *(_QWORD *)(result + 168);
    v4 = *(_QWORD *)(result + 128);
    v5 = (unint64_t *)(v4 + 8 * v3);
    v6 = *v5;
    v7 = *v5 + 1;
    *v5 = v7;
    v8 = v2 + 4 * *(_QWORD *)(result + 152);
    v9 = *(_QWORD *)(result + 24);
    if (v7 >= *(_QWORD *)(v9 + 8 * v3))
    {
      while (v3 != *(_QWORD *)(result + 160))
      {
        v10 = *(_QWORD *)(result + 48);
        v11 = v8 + 4 * *(_QWORD *)(v10 + 8 * v3) * ~v6;
        *v5 = 0;
        v3 += *(int *)(result + 176);
        v5 = (unint64_t *)(v4 + 8 * v3);
        v6 = *v5;
        v12 = *v5 + 1;
        *v5 = v12;
        v8 = v11 + 4 * *(_QWORD *)(v10 + 8 * v3);
        if (v12 < *(_QWORD *)(v9 + 8 * v3))
          goto LABEL_7;
      }
      v8 = v1;
    }
LABEL_7:
    *(_QWORD *)(result + 112) = v8;
  }
  return result;
}

uint64_t CoreML::vectorizeMultiArray<double,int>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  int v8;
  int *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const double *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  vDSP_Length v17;
  uint64_t v18;
  _QWORD v20[16];
  void *__p;
  void *v22;
  int *v23;
  std::__shared_weak_count *v24;
  double *v25;
  void *v26;
  void *v27;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65600 && *(_DWORD *)(a3 + 72) == 131104;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v23, a3);
  v9 = v23;
  v10 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v23, a1);
    v13 = (const double *)v23;
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *(_QWORD *)(a1 + 80);
    v18 = 1;
    vDSP_vfix32D(v13, 1, v9, 1, v17);
  }
  else
  {
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v23, a1, a2, 1);
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)v20, a1, 1, 0);
    while (v25 != (double *)v20[14])
    {
      *v9++ = (int)*v25;
      CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v23);
    }
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v20);
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v23);
    return 1;
  }
  return v18;
}

void sub_19C88305C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

BOOL CoreML::initBNNSDArrayDescriptor<int>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  int BNNSDataLayout;
  uint64_t v7;

  BNNSDataLayout = CoreML::getBNNSDataLayout(__src, a3, (char *)(a4 + 72));
  if (BNNSDataLayout != -1)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != *(_QWORD *)a1)
      memmove((void *)(a4 + 8), *(const void **)a1, v7 - *(_QWORD *)a1);
    *(_DWORD *)(a4 + 144) = 131104;
    *(_DWORD *)(a4 + 4) = BNNSDataLayout;
    *(_QWORD *)(a4 + 164) = 1065353216;
  }
  return BNNSDataLayout != -1;
}

uint64_t CoreML::MultiArrayIterator<int>::MultiArrayIterator(uint64_t a1, uint64_t a2, int a3, char a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v24;
  std::__shared_weak_count *v25;

  CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)a1, a2);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a1);
  v8 = v24;
  v7 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = v8;
  v11 = *(uint64_t **)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 32) - (_QWORD)v11;
  v14 = v13 >> 3;
  if (v13)
  {
    if (v14 <= 1)
      v15 = 1;
    else
      v15 = v13 >> 3;
    v16 = *(uint64_t **)(a1 + 48);
    do
    {
      v17 = *v11++;
      v18 = v17 - 1;
      v19 = *v16++;
      v8 += 4 * v19 * v18;
      --v15;
    }
    while (v15);
    *(_QWORD *)(a1 + 120) = v8;
  }
  *(_QWORD *)(a1 + 120) = v8 + 4;
  v20 = v14 - 1;
  if (a3)
    v21 = 1;
  else
    v21 = -1;
  if (a3)
    v22 = v14 - 1;
  else
    v22 = 0;
  if (a3)
    v20 = 0;
  *(_DWORD *)(a1 + 176) = v21;
  *(_QWORD *)(a1 + 160) = v22;
  *(_QWORD *)(a1 + 168) = v20;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(v12 + 8 * v20);
  v24 = 0;
  std::vector<unsigned long>::resize((char **)(a1 + 128), v14, &v24);
  if ((a4 & 1) == 0)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * *(_QWORD *)(a1 + 168)) = *(_QWORD *)(*(_QWORD *)(a1 + 24)
                                                                                 + 8 * *(_QWORD *)(a1 + 168));
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 120);
  }
  return a1;
}

void sub_19C883228(_Unwind_Exception *a1)
{
  CoreML::MultiArrayBuffer *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 17) = v4;
    operator delete(v4);
  }
  CoreML::MultiArrayBuffer::~MultiArrayBuffer(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN6CoreMLL19vectorizeMultiArrayIdDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  int v8;
  std::__shared_weak_count *v9;
  _WORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v26[16];
  void *__p;
  void *v28;
  _WORD *v29;
  std::__shared_weak_count *v30;
  uint64_t *v31;
  void *v32;
  void *v33;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65600 && *(_DWORD *)(a3 + 72) == 65552;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v29, a3);
  v10 = v29;
  v9 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v29, a1);
    v14 = (uint64_t *)v29;
    v13 = v30;
    if (v30)
    {
      v15 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v17 = *(_QWORD *)(a1 + 80);
    if (v17)
    {
      v18 = 8 * v17;
      do
      {
        v19 = *v14++;
        _D0 = v19;
        __asm { FCVT            H0, D0 }
        *v10++ = _D0;
        v18 -= 8;
      }
      while (v18);
    }
  }
  else
  {
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v29, a1, a2, 1);
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)v26, a1, 1, 0);
    while (v31 != (uint64_t *)v26[14])
    {
      _D0 = *v31;
      __asm { FCVT            H0, D0 }
      *v10++ = _D0;
      CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v29);
    }
    if (__p)
    {
      v28 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v26);
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v29);
  }
  return 1;
}

void sub_19C883408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

BOOL _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  int BNNSDataLayout;
  uint64_t v7;

  BNNSDataLayout = CoreML::getBNNSDataLayout(__src, a3, (char *)(a4 + 72));
  if (BNNSDataLayout != -1)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != *(_QWORD *)a1)
      memmove((void *)(a4 + 8), *(const void **)a1, v7 - *(_QWORD *)a1);
    *(_DWORD *)(a4 + 144) = 65552;
    *(_DWORD *)(a4 + 4) = BNNSDataLayout;
    *(_QWORD *)(a4 + 164) = 1065353216;
  }
  return BNNSDataLayout != -1;
}

uint64_t _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb(uint64_t a1, uint64_t a2, int a3, char a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v24;
  std::__shared_weak_count *v25;

  CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)a1, a2);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a1);
  v8 = v24;
  v7 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = v8;
  v11 = *(uint64_t **)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 32) - (_QWORD)v11;
  v14 = v13 >> 3;
  if (v13)
  {
    if (v14 <= 1)
      v15 = 1;
    else
      v15 = v13 >> 3;
    v16 = *(uint64_t **)(a1 + 48);
    do
    {
      v17 = *v11++;
      v18 = v17 - 1;
      v19 = *v16++;
      v8 += 2 * v19 * v18;
      --v15;
    }
    while (v15);
    *(_QWORD *)(a1 + 120) = v8;
  }
  *(_QWORD *)(a1 + 120) = v8 + 2;
  v20 = v14 - 1;
  if (a3)
    v21 = 1;
  else
    v21 = -1;
  if (a3)
    v22 = v14 - 1;
  else
    v22 = 0;
  if (a3)
    v20 = 0;
  *(_DWORD *)(a1 + 176) = v21;
  *(_QWORD *)(a1 + 160) = v22;
  *(_QWORD *)(a1 + 168) = v20;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(v12 + 8 * v20);
  v24 = 0;
  std::vector<unsigned long>::resize((char **)(a1 + 128), v14, &v24);
  if ((a4 & 1) == 0)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * *(_QWORD *)(a1 + 168)) = *(_QWORD *)(*(_QWORD *)(a1 + 24)
                                                                                 + 8 * *(_QWORD *)(a1 + 168));
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 120);
  }
  return a1;
}

void sub_19C8835D4(_Unwind_Exception *a1)
{
  CoreML::MultiArrayBuffer *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 17) = v4;
    operator delete(v4);
  }
  CoreML::MultiArrayBuffer::~MultiArrayBuffer(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN6CoreML18MultiArrayIteratorIDF16_EppEv(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(result + 112);
  v1 = *(_QWORD *)(result + 120);
  if (v2 < v1)
  {
    v3 = *(_QWORD *)(result + 168);
    v4 = *(_QWORD *)(result + 128);
    v5 = (unint64_t *)(v4 + 8 * v3);
    v6 = *v5;
    v7 = *v5 + 1;
    *v5 = v7;
    v8 = v2 + 2 * *(_QWORD *)(result + 152);
    v9 = *(_QWORD *)(result + 24);
    if (v7 >= *(_QWORD *)(v9 + 8 * v3))
    {
      while (v3 != *(_QWORD *)(result + 160))
      {
        v10 = *(_QWORD *)(result + 48);
        v11 = v8 + 2 * *(_QWORD *)(v10 + 8 * v3) * ~v6;
        *v5 = 0;
        v3 += *(int *)(result + 176);
        v5 = (unint64_t *)(v4 + 8 * v3);
        v6 = *v5;
        v12 = *v5 + 1;
        *v5 = v12;
        v8 = v11 + 2 * *(_QWORD *)(v10 + 8 * v3);
        if (v12 < *(_QWORD *)(v9 + 8 * v3))
          goto LABEL_7;
      }
      v8 = v1;
    }
LABEL_7:
    *(_QWORD *)(result + 112) = v8;
  }
  return result;
}

uint64_t CoreML::vectorizeMultiArray<float,double>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  int v8;
  double *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const float *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  vDSP_Length v17;
  uint64_t v18;
  _QWORD v20[16];
  void *__p;
  void *v22;
  double *v23;
  std::__shared_weak_count *v24;
  float *v25;
  void *v26;
  void *v27;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65568 && *(_DWORD *)(a3 + 72) == 65600;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v23, a3);
  v9 = v23;
  v10 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v23, a1);
    v13 = (const float *)v23;
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *(_QWORD *)(a1 + 80);
    v18 = 1;
    vDSP_vspdp(v13, 1, v9, 1, v17);
  }
  else
  {
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v23, a1, a2, 1);
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)v20, a1, 1, 0);
    while (v25 != (float *)v20[14])
    {
      *v9++ = *v25;
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v23);
    }
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v20);
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v23);
    return 1;
  }
  return v18;
}

void sub_19C883850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

void ___ZN6CoreMLL16copyMultiArrayVIIffEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL16copyMultiArrayVIIffEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E3D65A20;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745;
  v6[3] = &unk_1E3D659F8;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIffEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIffEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E3D65A70;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745;
  v6[3] = &unk_1E3D659F8;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t CoreML::vectorizeMultiArray<float,int>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  int v8;
  int *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const float *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  vDSP_Length v17;
  uint64_t v18;
  _QWORD v20[16];
  void *__p;
  void *v22;
  int *v23;
  std::__shared_weak_count *v24;
  float *v25;
  void *v26;
  void *v27;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65568 && *(_DWORD *)(a3 + 72) == 131104;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v23, a3);
  v9 = v23;
  v10 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v23, a1);
    v13 = (const float *)v23;
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *(_QWORD *)(a1 + 80);
    v18 = 1;
    vDSP_vfix32(v13, 1, v9, 1, v17);
  }
  else
  {
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v23, a1, a2, 1);
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)v20, a1, 1, 0);
    while (v25 != (float *)v20[14])
    {
      *v9++ = (int)*v25;
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v23);
    }
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v20);
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v23);
    return 1;
  }
  return v18;
}

void sub_19C883B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIfiEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIfiEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E3D65AC0;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745;
  v6[3] = &unk_1E3D659F8;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t _ZN6CoreMLL19vectorizeMultiArrayIfDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  int v8;
  std::__shared_weak_count *v9;
  _WORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  int *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD v26[16];
  void *__p;
  void *v28;
  _WORD *v29;
  std::__shared_weak_count *v30;
  int *v31;
  void *v32;
  void *v33;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65568 && *(_DWORD *)(a3 + 72) == 65552;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v29, a3);
  v10 = v29;
  v9 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v29, a1);
    v14 = (int *)v29;
    v13 = v30;
    if (v30)
    {
      v15 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v17 = *(_QWORD *)(a1 + 80);
    if (v17)
    {
      v18 = 4 * v17;
      do
      {
        v19 = *v14++;
        _S0 = v19;
        __asm { FCVT            H0, S0 }
        *v10++ = _S0;
        v18 -= 4;
      }
      while (v18);
    }
  }
  else
  {
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v29, a1, a2, 1);
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)v26, a1, 1, 0);
    while (v31 != (int *)v26[14])
    {
      _S0 = *v31;
      __asm { FCVT            H0, S0 }
      *v10++ = _S0;
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v29);
    }
    if (__p)
    {
      v28 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v26);
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v29);
  }
  return 1;
}

void sub_19C883D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

void ___ZN6CoreMLL16copyMultiArrayVIIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL16copyMultiArrayVIIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E3D65B10;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745;
  v6[3] = &unk_1E3D659F8;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E3D65B60;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745;
  v6[3] = &unk_1E3D659F8;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t CoreML::vectorizeMultiArray<int,double>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  int v8;
  double *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const int *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  vDSP_Length v17;
  uint64_t v18;
  _QWORD v20[16];
  void *__p;
  void *v22;
  double *v23;
  std::__shared_weak_count *v24;
  int *v25;
  void *v26;
  void *v27;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 131104 && *(_DWORD *)(a3 + 72) == 65600;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v23, a3);
  v9 = v23;
  v10 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v23, a1);
    v13 = (const int *)v23;
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *(_QWORD *)(a1 + 80);
    v18 = 1;
    vDSP_vflt32D(v13, 1, v9, 1, v17);
  }
  else
  {
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v23, a1, a2, 1);
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)v20, a1, 1, 0);
    while (v25 != (int *)v20[14])
    {
      *v9++ = (double)*v25;
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v23);
    }
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v20);
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v23);
    return 1;
  }
  return v18;
}

void sub_19C88404C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

uint64_t CoreML::vectorizeMultiArray<int,float>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  int v8;
  float *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const int *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  vDSP_Length v17;
  uint64_t v18;
  _QWORD v20[16];
  void *__p;
  void *v22;
  float *v23;
  std::__shared_weak_count *v24;
  int *v25;
  void *v26;
  void *v27;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 131104 && *(_DWORD *)(a3 + 72) == 65568;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v23, a3);
  v9 = v23;
  v10 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v23, a1);
    v13 = (const int *)v23;
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *(_QWORD *)(a1 + 80);
    v18 = 1;
    vDSP_vflt32(v13, 1, v9, 1, v17);
  }
  else
  {
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v23, a1, a2, 1);
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)v20, a1, 1, 0);
    while (v25 != (int *)v20[14])
    {
      *v9++ = (float)*v25;
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v23);
    }
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v20);
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v23);
    return 1;
  }
  return v18;
}

void sub_19C884218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIifEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIifEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E3D65BB0;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745;
  v6[3] = &unk_1E3D659F8;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t CoreML::vectorizeMultiArray<int,int>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  _DWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[16];
  void *__p;
  void *v23;
  void *v24;
  std::__shared_weak_count *v25;
  _DWORD *v26;
  void *v27;
  void *v28;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 131104 && *(_DWORD *)(a3 + 72) == 131104;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  if (((unsigned __int16)v7 & *(_WORD *)(a1 + 88)) != 0)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a3);
    v8 = v24;
    v9 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a1);
    v12 = v24;
    v13 = v25;
    if (v25)
    {
      v14 = (unint64_t *)&v25->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    memcpy(v8, v12, 4 * *(_QWORD *)(a1 + 80));
  }
  else
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a3);
    v18 = v24;
    v17 = v25;
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v24, a1, a2, 1);
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)v21, a1, 1, 0);
    while (v26 != (_DWORD *)v21[14])
    {
      *v18++ = *v26;
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v24);
    }
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v21);
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v24);
  }
  return 1;
}

void sub_19C884498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

void ___ZN6CoreMLL16copyMultiArrayVIIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL16copyMultiArrayVIIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E3D65C00;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745;
  v6[3] = &unk_1E3D659F8;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E3D65C50;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745;
  v6[3] = &unk_1E3D659F8;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t _ZN6CoreMLL19vectorizeMultiArrayIiDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  int v8;
  std::__shared_weak_count *v9;
  _WORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  int *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD v26[16];
  void *__p;
  void *v28;
  _WORD *v29;
  std::__shared_weak_count *v30;
  int *v31;
  void *v32;
  void *v33;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 131104 && *(_DWORD *)(a3 + 72) == 65552;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v29, a3);
  v10 = v29;
  v9 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v29, a1);
    v14 = (int *)v29;
    v13 = v30;
    if (v30)
    {
      v15 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v17 = *(_QWORD *)(a1 + 80);
    if (v17)
    {
      v18 = 4 * v17;
      do
      {
        v19 = *v14++;
        _S0 = (float)v19;
        __asm { FCVT            H0, S0 }
        *v10++ = LOWORD(_S0);
        v18 -= 4;
      }
      while (v18);
    }
  }
  else
  {
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v29, a1, a2, 1);
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)v26, a1, 1, 0);
    while (v31 != (int *)v26[14])
    {
      _S0 = (float)*v31;
      __asm { FCVT            H0, S0 }
      *v10++ = LOWORD(_S0);
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v29);
    }
    if (__p)
    {
      v28 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v26);
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v29);
  }
  return 1;
}

void sub_19C884778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIiDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIiDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E3D65CA0;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745;
  v6[3] = &unk_1E3D659F8;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t _ZN6CoreMLL19vectorizeMultiArrayIDF16_dEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  int v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  __int16 *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  _QWORD v28[16];
  void *__p;
  void *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  __int16 *v33;
  void *v34;
  void *v35;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65552 && *(_DWORD *)(a3 + 72) == 65600;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v31, a3);
  v10 = v31;
  v9 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v31, a1);
    v14 = (__int16 *)v31;
    v13 = v32;
    if (v32)
    {
      v15 = (unint64_t *)&v32->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v17 = *(_QWORD *)(a1 + 80);
    if (v17)
    {
      v18 = 2 * v17;
      do
      {
        v19 = *v14++;
        _H0 = v19;
        __asm { FCVT            D0, H0 }
        *v10++ = _D0;
        v18 -= 2;
      }
      while (v18);
    }
  }
  else
  {
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v31, a1, a2, 1);
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)v28, a1, 1, 0);
    while (v33 != (__int16 *)v28[14])
    {
      _H0 = *v33;
      __asm { FCVT            D0, H0 }
      *v10++ = _D0;
      _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v31);
    }
    if (__p)
    {
      v30 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v28);
    if (v34)
    {
      v35 = v34;
      operator delete(v34);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v31);
  }
  return 1;
}

void sub_19C8849C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

uint64_t _ZN6CoreMLL19vectorizeMultiArrayIDF16_fEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  int v8;
  std::__shared_weak_count *v9;
  _DWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  __int16 *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  _QWORD v28[16];
  void *__p;
  void *v30;
  _DWORD *v31;
  std::__shared_weak_count *v32;
  __int16 *v33;
  void *v34;
  void *v35;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65552 && *(_DWORD *)(a3 + 72) == 65568;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v31, a3);
  v10 = v31;
  v9 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v31, a1);
    v14 = (__int16 *)v31;
    v13 = v32;
    if (v32)
    {
      v15 = (unint64_t *)&v32->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v17 = *(_QWORD *)(a1 + 80);
    if (v17)
    {
      v18 = 2 * v17;
      do
      {
        v19 = *v14++;
        _H0 = v19;
        __asm { FCVT            S0, H0 }
        *v10++ = _S0;
        v18 -= 2;
      }
      while (v18);
    }
  }
  else
  {
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v31, a1, a2, 1);
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)v28, a1, 1, 0);
    while (v33 != (__int16 *)v28[14])
    {
      _H0 = *v33;
      __asm { FCVT            S0, H0 }
      *v10++ = _S0;
      _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v31);
    }
    if (__p)
    {
      v30 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v28);
    if (v34)
    {
      v35 = v34;
      operator delete(v34);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v31);
  }
  return 1;
}

void sub_19C884B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

void ___ZN6CoreMLL16copyMultiArrayVIIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL16copyMultiArrayVIIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E3D65CF0;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745;
  v6[3] = &unk_1E3D659F8;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E3D65D40;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745;
  v6[3] = &unk_1E3D659F8;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t _ZN6CoreMLL19vectorizeMultiArrayIDF16_iEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  int v8;
  std::__shared_weak_count *v9;
  _DWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  __int16 *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  _QWORD v28[16];
  void *__p;
  void *v30;
  _DWORD *v31;
  std::__shared_weak_count *v32;
  __int16 *v33;
  void *v34;
  void *v35;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65552 && *(_DWORD *)(a3 + 72) == 131104;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v31, a3);
  v10 = v31;
  v9 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v31, a1);
    v14 = (__int16 *)v31;
    v13 = v32;
    if (v32)
    {
      v15 = (unint64_t *)&v32->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v17 = *(_QWORD *)(a1 + 80);
    if (v17)
    {
      v18 = 2 * v17;
      do
      {
        v19 = *v14++;
        _H0 = v19;
        __asm { FCVT            S0, H0 }
        *v10++ = (int)_S0;
        v18 -= 2;
      }
      while (v18);
    }
  }
  else
  {
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v31, a1, a2, 1);
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)v28, a1, 1, 0);
    while (v33 != (__int16 *)v28[14])
    {
      _H0 = *v33;
      __asm { FCVT            S0, H0 }
      *v10++ = (int)_S0;
      _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v31);
    }
    if (__p)
    {
      v30 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v28);
    if (v34)
    {
      v35 = v34;
      operator delete(v34);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v31);
  }
  return 1;
}

void sub_19C884E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_iEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_iEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E3D65D90;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745;
  v6[3] = &unk_1E3D659F8;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t _ZN6CoreMLL19vectorizeMultiArrayIDF16_DF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4;
  __int16 v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  _WORD *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[16];
  void *__p;
  void *v23;
  void *v24;
  std::__shared_weak_count *v25;
  _WORD *v26;
  void *v27;
  void *v28;

  v4 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65552 && *(_DWORD *)(a3 + 72) == 65552;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0)
    return 0;
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  if (((unsigned __int16)v7 & *(_WORD *)(a1 + 88)) != 0)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a3);
    v8 = v24;
    v9 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a1);
    v12 = v24;
    v13 = v25;
    if (v25)
    {
      v14 = (unint64_t *)&v25->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    memcpy(v8, v12, 2 * *(_QWORD *)(a1 + 80));
  }
  else
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v24, a3);
    v18 = v24;
    v17 = v25;
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v24, a1, a2, 1);
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)v21, a1, 1, 0);
    while (v26 != (_WORD *)v21[14])
    {
      *v18++ = *v26;
      _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v24);
    }
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v21);
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v24);
  }
  return 1;
}

void sub_19C8850F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev((CoreML::MultiArrayBuffer *)&a32);
  _Unwind_Resume(a1);
}

void ___ZN6CoreMLL16copyMultiArrayVIIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL16copyMultiArrayVIIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E3D65DE0;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745;
  v6[3] = &unk_1E3D659F8;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E3D65E30;
  v5 = a2;
  v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745;
  v6[3] = &unk_1E3D659F8;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 176) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[4] + 8) + 40), 0);
}

uint64_t ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_11745(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

vImage_Error ___ZN6CoreMLL16copyMultiArrayVIIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = a2;
  return vImageCopyBuffer((const vImage_Buffer *)(*(_QWORD *)(a1[4] + 8) + 40), (const vImage_Buffer *)(*(_QWORD *)(a1[5] + 8) + 40), 2uLL, 0x10u);
}

void _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev(CoreML::MultiArrayBuffer *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  CoreML::MultiArrayBuffer::~MultiArrayBuffer(this);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_iEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 176) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[4] + 8) + 40), 0);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 176) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[4] + 8) + 40), 0);
}

vImage_Error ___ZN6CoreMLL16copyMultiArrayVIIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = a2;
  return vImageConvert_Planar16FtoPlanarF((const vImage_Buffer *)(*(_QWORD *)(a1[4] + 8) + 40), (const vImage_Buffer *)(*(_QWORD *)(a1[5] + 8) + 40), 0x10u);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIiDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 176) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[4] + 8) + 40), 0);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 176) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[4] + 8) + 40), 0);
}

vImage_Error ___ZN6CoreMLL16copyMultiArrayVIIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = a2;
  return vImageCopyBuffer((const vImage_Buffer *)(*(_QWORD *)(a1[4] + 8) + 40), (const vImage_Buffer *)(*(_QWORD *)(a1[5] + 8) + 40), 4uLL, 0x10u);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIifEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 176) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[4] + 8) + 40), 0);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 176) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[4] + 8) + 40), 0);
}

vImage_Error ___ZN6CoreMLL16copyMultiArrayVIIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = a2;
  return vImageConvert_PlanarFtoPlanar16F((const vImage_Buffer *)(*(_QWORD *)(a1[4] + 8) + 40), (const vImage_Buffer *)(*(_QWORD *)(a1[5] + 8) + 40), 0x10u);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIfiEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 176) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[4] + 8) + 40), 0);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIffEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 176) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(_QWORD *)(a1[4] + 8) + 40), 0);
}

vImage_Error ___ZN6CoreMLL16copyMultiArrayVIIffEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = a2;
  return vImageCopyBuffer((const vImage_Buffer *)(*(_QWORD *)(a1[4] + 8) + 40), (const vImage_Buffer *)(*(_QWORD *)(a1[5] + 8) + 40), 4uLL, 0x10u);
}

void std::vector<unsigned long>::resize(char **a1, unint64_t a2, _QWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *i;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v6 = *a1;
  v5 = a1[1];
  v7 = (v5 - *a1) >> 3;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[8 * a2];
  }
  else
  {
    v9 = (uint64_t)(a1 + 2);
    v10 = a1[2];
    if (a2 - v7 <= (v10 - v5) >> 3)
    {
      v24 = &v5[8 * (a2 - v7)];
      v25 = 8 * a2 - 8 * v7;
      do
      {
        *(_QWORD *)v5 = *a3;
        v5 += 8;
        v25 -= 8;
      }
      while (v25);
      a1[1] = v24;
    }
    else
    {
      if (a2 >> 61)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v11 = v10 - v6;
      v12 = (v10 - v6) >> 2;
      if (v12 <= a2)
        v12 = a2;
      if (v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9, v13);
      v16 = &v14[8 * v7];
      v17 = &v14[8 * a2];
      v18 = 8 * a2 - 8 * v7;
      v19 = v16;
      do
      {
        *(_QWORD *)v19 = *a3;
        v19 += 8;
        v18 -= 8;
      }
      while (v18);
      v20 = &v14[8 * v15];
      v21 = *a1;
      for (i = a1[1]; i != v21; i -= 8)
      {
        v23 = *((_QWORD *)i - 1);
        *((_QWORD *)v16 - 1) = v23;
        v16 -= 8;
      }
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v20;
      if (v21)
        operator delete(v21);
    }
  }
}

uint64_t CoreML::getBNNSDataLayout(char *__src, char *a2, char *__dst)
{
  unint64_t v3;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *i;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;

  v3 = (unint64_t)(a2 - __src) >> 3;
  if (v3 > 8)
    return 0xFFFFFFFFLL;
  if (__src == a2)
  {
LABEL_14:
    v12 = 0;
  }
  else
  {
    v5 = __src + 8;
    do
    {
      if (v5 == a2)
      {
        memmove(__dst, __src, a2 - __src);
        goto LABEL_14;
      }
      v7 = *((_QWORD *)v5 - 1);
      v6 = *(_QWORD *)v5;
      v5 += 8;
    }
    while (v6 >= v7);
    for (i = __src + 8; i != a2; i += 8)
    {
      v10 = *((_QWORD *)i - 1);
      v9 = *(_QWORD *)i;
      if (v9 > v10)
        return 0xFFFFFFFFLL;
    }
    do
    {
      v11 = *((_QWORD *)a2 - 1);
      a2 -= 8;
      *(_QWORD *)__dst = v11;
      __dst += 8;
    }
    while (a2 != __src);
    v12 = 1;
  }
  return v12 | ((_DWORD)v3 << 16) | 0x8000u;
}

vImage_Error ___ZN6CoreMLL16copyMultiArrayVIIddEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = a2;
  return vImageCopyBuffer((const vImage_Buffer *)(*(_QWORD *)(a1[4] + 8) + 40), (const vImage_Buffer *)(*(_QWORD *)(a1[5] + 8) + 40), 8uLL, 0x10u);
}

void ___ZN6CoreMLL14equalalityTestIdEEbRKNS_16MultiArrayBufferES3__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v4[7];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN6CoreMLL14equalalityTestIdEEbRKNS_16MultiArrayBufferES3__block_invoke_2;
  v4[3] = &unk_1E3D65E80;
  v3 = *(_QWORD *)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v4[5] = a2;
  v4[6] = a3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v3, v4);
}

void ___ZN6CoreMLL14equalalityTestIfEEbRKNS_16MultiArrayBufferES3__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v4[7];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN6CoreMLL14equalalityTestIfEEbRKNS_16MultiArrayBufferES3__block_invoke_2;
  v4[3] = &unk_1E3D65ED0;
  v3 = *(_QWORD *)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v4[5] = a2;
  v4[6] = a3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v3, v4);
}

void ___ZN6CoreMLL14equalalityTestIiEEbRKNS_16MultiArrayBufferES3__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v4[7];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN6CoreMLL14equalalityTestIiEEbRKNS_16MultiArrayBufferES3__block_invoke_2;
  v4[3] = &unk_1E3D65F20;
  v3 = *(_QWORD *)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v4[5] = a2;
  v4[6] = a3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v3, v4);
}

void ___ZN6CoreMLL14equalalityTestIDF16_EEbRKNS_16MultiArrayBufferES3__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v4[7];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN6CoreMLL14equalalityTestIDF16_EEbRKNS_16MultiArrayBufferES3__block_invoke_2;
  v4[3] = &unk_1E3D65F70;
  v3 = *(_QWORD *)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v4[5] = a2;
  v4[6] = a3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v3, v4);
}

uint64_t ___ZN6CoreMLL14equalalityTestIDF16_EEbRKNS_16MultiArrayBufferES3__block_invoke_2(uint64_t a1, const void *a2)
{
  uint64_t result;

  result = memcmp(*(const void **)(a1 + 40), a2, *(_QWORD *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_DWORD)result == 0;
  return result;
}

uint64_t ___ZN6CoreMLL14equalalityTestIiEEbRKNS_16MultiArrayBufferES3__block_invoke_2(uint64_t a1, const void *a2)
{
  uint64_t result;

  result = memcmp(*(const void **)(a1 + 40), a2, *(_QWORD *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_DWORD)result == 0;
  return result;
}

uint64_t ___ZN6CoreMLL14equalalityTestIfEEbRKNS_16MultiArrayBufferES3__block_invoke_2(uint64_t a1, const void *a2)
{
  uint64_t result;

  result = memcmp(*(const void **)(a1 + 40), a2, *(_QWORD *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_DWORD)result == 0;
  return result;
}

uint64_t ___ZN6CoreMLL14equalalityTestIdEEbRKNS_16MultiArrayBufferES3__block_invoke_2(uint64_t a1, const void *a2)
{
  uint64_t result;

  result = memcmp(*(const void **)(a1 + 40), a2, *(_QWORD *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_DWORD)result == 0;
  return result;
}

void sub_19C885FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,__CVBuffer *a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  std::unique_ptr<__CVBuffer,MLE5ObjectDeleter<__CVBuffer>>::reset[abi:ne180100](&a27);
  std::unique_ptr<__IOSurface,MLE5ObjectDeleter<__IOSurface>>::reset[abi:ne180100](&a13);

  _Unwind_Resume(a1);
}

void std::unique_ptr<__CVBuffer,MLE5ObjectDeleter<__CVBuffer>>::reset[abi:ne180100](__CVBuffer **a1)
{
  __CVBuffer *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CVPixelBufferRelease(v2);
}

void std::unique_ptr<__IOSurface,MLE5ObjectDeleter<__IOSurface>>::reset[abi:ne180100](const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
}

void CoreML::NNCompiler::Backend::MIL::Ios16::Ios16LayerTranslator::~Ios16LayerTranslator(void **this)
{
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(this);
  JUMPOUT(0x1A1AD6260);
}

uint64_t MLE5FindDirectInputModeFunction(unsigned int a1, unsigned int a2, _QWORD *a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  __CFString *v18;
  __CFString *v19;
  void *v20;
  void *v21;
  __CFString *v22;
  __CFString *v23;
  uint64_t v25;
  void *v26;
  uint8_t buf[4];
  __CFString *v28;
  __int16 v29;
  __CFString *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  {
    directInputModeFunctionTable(void)::table = 0u;
    *(_OWORD *)&qword_1ED001100 = 0u;
    dword_1ED001110 = 1065353216;
  }
  if (directInputModeFunctionTable(void)::onceToken != -1)
    dispatch_once(&directInputModeFunctionTable(void)::onceToken, &__block_literal_global_11836);
  v7 = a2;
  if (*((_QWORD *)&directInputModeFunctionTable(void)::table + 1))
  {
    v8 = ((unint64_t)a1 << 24) | ((unint64_t)a2 << 16);
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&directInputModeFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = ((unint64_t)a1 << 24) | ((unint64_t)a2 << 16);
      if (v8 >= *((_QWORD *)&directInputModeFunctionTable(void)::table + 1))
        v10 = v8 % *((_QWORD *)&directInputModeFunctionTable(void)::table + 1);
    }
    else
    {
      v10 = v8 & (*((_QWORD *)&directInputModeFunctionTable(void)::table + 1) - 1);
    }
    v11 = *(uint64_t ***)(directInputModeFunctionTable(void)::table + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v8 == v13)
        {
          if (*((unsigned __int8 *)i + 16) == a1 && *((unsigned __int8 *)i + 17) == a2 && !*((_BYTE *)i + 18) && !i[3])
            return i[4];
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= *((_QWORD *)&directInputModeFunctionTable(void)::table + 1))
              v13 %= *((_QWORD *)&directInputModeFunctionTable(void)::table + 1);
          }
          else
          {
            v13 &= *((_QWORD *)&directInputModeFunctionTable(void)::table + 1) - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  +[MLLogging coreChannel](MLLogging, "coreChannel");
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = a1;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v22 = off_1E3D661B8[a1];
    v23 = off_1E3D661D0[v7];
    *(_DWORD *)buf = 138412546;
    v28 = v22;
    v29 = 2112;
    v30 = v23;
    _os_log_error_impl(&dword_19C486000, v14, OS_LOG_TYPE_ERROR, "The input feature is invalid or unsupported. (port trait %@, feature trait %@.)", buf, 0x16u);

  }
  if (a3)
  {
    v16 = (void *)MEMORY[0x1E0CB35C8];
    v25 = *MEMORY[0x1E0CB2D50];
    v17 = (void *)MEMORY[0x1E0CB3940];
    v18 = off_1E3D661B8[v15];
    v19 = off_1E3D661D0[v7];
    objc_msgSend(v17, "stringWithFormat:", CFSTR("The input feature is invalid or unsupported. (port trait %@, feature trait %@.)"), v18, v19, v25);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = v20;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 1, v21);
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
  return 0;
}

void sub_19C886708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *i;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v33;

  v4 = a1[1];
  v5 = a1[2];
  v6 = *((_QWORD *)a1 + 1);
  v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  v8 = *((_QWORD *)&directInputModeFunctionTable(void)::table + 1);
  if (*((_QWORD *)&directInputModeFunctionTable(void)::table + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&directInputModeFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((_QWORD *)&directInputModeFunctionTable(void)::table + 1))
        v2 = v7 % *((_QWORD *)&directInputModeFunctionTable(void)::table + 1);
    }
    else
    {
      v2 = v7 & (*((_QWORD *)&directInputModeFunctionTable(void)::table + 1) - 1);
    }
    v10 = *(void ***)(directInputModeFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((_QWORD *)&directInputModeFunctionTable(void)::table + 1))
                v12 %= *((_QWORD *)&directInputModeFunctionTable(void)::table + 1);
            }
            else
            {
              v12 &= *((_QWORD *)&directInputModeFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  v13 = (float)(unint64_t)(qword_1ED001108 + 1);
  if (!v8 || (float)(*(float *)&dword_1ED001110 * (float)v8) < v13)
  {
    v14 = 1;
    if (v8 >= 3)
      v14 = (v8 & (v8 - 1)) != 0;
    v15 = v14 | (2 * v8);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1ED001110);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)&directInputModeFunctionTable(void)::table + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v8)
    {
      v24 = vcvtps_u32_f32((float)(unint64_t)qword_1ED001108 / *(float *)&dword_1ED001110);
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)&directInputModeFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = (void *)directInputModeFunctionTable(void)::table;
          *(_QWORD *)&directInputModeFunctionTable(void)::table = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)&directInputModeFunctionTable(void)::table + 1) = prime;
          do
            *(_QWORD *)(directInputModeFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD **)qword_1ED001100;
          if (qword_1ED001100)
          {
            v22 = *(_QWORD *)(qword_1ED001100 + 8);
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(directInputModeFunctionTable(void)::table + 8 * v22) = &qword_1ED001100;
            for (i = *v21; i; v22 = v28)
            {
              v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(_QWORD *)&prime)
                  v28 %= *(_QWORD *)&prime;
              }
              else
              {
                v28 &= *(_QWORD *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(_QWORD *)(directInputModeFunctionTable(void)::table + 8 * v28))
                {
                  *(_QWORD *)(directInputModeFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                *v21 = (_QWORD *)*i;
                *i = **(_QWORD **)(directInputModeFunctionTable(void)::table + 8 * v28);
                **(_QWORD **)(directInputModeFunctionTable(void)::table + 8 * v28) = i;
                i = v21;
              }
              v28 = v22;
LABEL_57:
              v21 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        v33 = (void *)directInputModeFunctionTable(void)::table;
        *(_QWORD *)&directInputModeFunctionTable(void)::table = 0;
        if (v33)
          operator delete(v33);
        v8 = 0;
        *((_QWORD *)&directInputModeFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v29 = directInputModeFunctionTable(void)::table;
  v30 = *(_QWORD **)(directInputModeFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *v11 = *v30;
LABEL_74:
    *v30 = v11;
    goto LABEL_75;
  }
  *v11 = qword_1ED001100;
  qword_1ED001100 = (uint64_t)v11;
  *(_QWORD *)(v29 + 8 * v2) = &qword_1ED001100;
  if (*v11)
  {
    v31 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8)
        v31 %= v8;
    }
    else
    {
      v31 &= v8 - 1;
    }
    v30 = (_QWORD *)(directInputModeFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1ED001108;
  return v11;
}

void sub_19C886C80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MLE5DirectModeFromMultiArrayMemoryToTensor(void *a1, uint64_t a2, _QWORD *a3)
{
  id v4;
  void *v5;
  uint64_t supported_buffer_types;
  NSObject *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t last_error_message;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v13);
  objc_msgSend(v4, "multiArrayValue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0;
  v15 = 0;
  supported_buffer_types = e5rt_io_port_get_supported_buffer_types();
  if ((_DWORD)supported_buffer_types)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      v17 = last_error_message;
      v18 = 1024;
      v19 = supported_buffer_types;
      _os_log_error_impl(&dword_19C486000, v7, OS_LOG_TYPE_ERROR, "Failed to get supported buffer types for the port E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get supported buffer types for the port E5RT: %s (%d)"), e5rt_get_last_error_message(), supported_buffer_types);
  }
  if (!v15)
  {
LABEL_12:
    v8 = 2;
    goto LABEL_13;
  }
  if (*v14 != 1)
  {
    v9 = 0;
    while (v15 - 1 != v9)
    {
      v10 = v14[++v9];
      if (v10 == 1)
      {
        if (v9 < v15)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    goto LABEL_12;
  }
LABEL_7:
  v8 = MLE5CompareTensorAndMultiArrayMemoryLayout(v13, v5, a3);
LABEL_13:

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v13);
  return v8;
}

void sub_19C886E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MLE5DirectModeFromMultiArraySurfaceToTensor(void *a1, uint64_t a2, _QWORD *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;

  v4 = a1;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v8);
  objc_msgSend(v4, "multiArrayValue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = MLE5CompareTensorAndMultiArrayMemoryLayout(v8, v5, a3);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v8);
  return v6;
}

void sub_19C886F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MLE5DirectModeFromPixelBufferSurfaceToTensor(void *a1, uint64_t a2, _QWORD *a3)
{
  __CVBuffer *v4;
  uint64_t v5;
  uint64_t v7;

  v4 = (__CVBuffer *)objc_msgSend(a1, "imageBufferValue");
  MLE5TensorDescriptorOf((e5rt_io_port *)&v7);
  v5 = MLE5CompareTensorAndPixelBufferMemoryLayout(v7, v4, a3);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v7);
  return v5;
}

void sub_19C886F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MLE5NoDirectBinding()
{
  return 2;
}

uint64_t MLE5DirectModeFromPixelBufferSurfaceToSurface(void *a1, uint64_t a2, _QWORD *a3)
{
  id v4;
  uint64_t WidthFromSurfaceDescriptor;
  uint64_t HeightFromSurfaceDescriptor;
  __CVBuffer *v7;
  size_t Width;
  size_t Height;
  size_t v10;
  OSType PixelFormatType;
  int SurfaceFormatFromSurfaceDescriptor;
  unsigned __int8 v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint8_t buf[4];
  size_t v24;
  __int16 v25;
  size_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  MLE5SurfaceDescriptorOf((e5rt_io_port *)&v20);
  WidthFromSurfaceDescriptor = MLE5GetWidthFromSurfaceDescriptor();
  HeightFromSurfaceDescriptor = MLE5GetHeightFromSurfaceDescriptor();
  v7 = (__CVBuffer *)objc_msgSend(v4, "imageBufferValue");
  Width = CVPixelBufferGetWidth(v7);
  Height = CVPixelBufferGetHeight(v7);
  v10 = Height;
  if (Width == WidthFromSurfaceDescriptor && Height == HeightFromSurfaceDescriptor)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(v7);
    SurfaceFormatFromSurfaceDescriptor = MLE5GetSurfaceFormatFromSurfaceDescriptor();
    if (PixelFormatType == 1278226536 && SurfaceFormatFromSurfaceDescriptor == 7)
    {
      v13 = 1;
    }
    else
    {
      v13 = 1;
      if (PixelFormatType != 1111970369 || SurfaceFormatFromSurfaceDescriptor != 2)
      {
        if (SurfaceFormatFromSurfaceDescriptor == 8 && PixelFormatType == 32)
          v13 = 1;
        else
          v13 = 2;
      }
    }
  }
  else
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218752;
      v24 = Width;
      v25 = 2048;
      v26 = v10;
      v27 = 2048;
      v28 = WidthFromSurfaceDescriptor;
      v29 = 2048;
      v30 = HeightFromSurfaceDescriptor;
      _os_log_error_impl(&dword_19C486000, v14, OS_LOG_TYPE_ERROR, "The specified image size %zu x %zu doesn't match the expected image size: %zu x %zu.", buf, 0x2Au);
    }

    if (a3)
    {
      v15 = (void *)MEMORY[0x1E0CB35C8];
      v21 = *MEMORY[0x1E0CB2D50];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("The specified image size %zu x %zu doesn't match the expected image size: %zu x %zu."), Width, v10, WidthFromSurfaceDescriptor, HeightFromSurfaceDescriptor);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = v16;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 1, v17);
      *a3 = (id)objc_claimAutoreleasedReturnValue();

    }
    v13 = 0;
  }
  std::unique_ptr<e5rt_surface_desc,MLE5ObjectDeleter<e5rt_surface_desc>>::reset[abi:ne180100](&v20);

  return v13;
}

void sub_19C8871F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a6);

  std::unique_ptr<e5rt_surface_desc,MLE5ObjectDeleter<e5rt_surface_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_surface_desc,MLE5ObjectDeleter<e5rt_surface_desc>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
    return (uint64_t *)e5rt_surface_desc_release();
  return result;
}

uint64_t *std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
    return (uint64_t *)e5rt_tensor_desc_release();
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *i;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v33;

  v4 = a1[1];
  v5 = a1[2];
  v6 = *((_QWORD *)a1 + 1);
  v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  v8 = *((_QWORD *)&inputReusabilityFunctionTable(void)::table + 1);
  if (*((_QWORD *)&inputReusabilityFunctionTable(void)::table + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&inputReusabilityFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((_QWORD *)&inputReusabilityFunctionTable(void)::table + 1))
        v2 = v7 % *((_QWORD *)&inputReusabilityFunctionTable(void)::table + 1);
    }
    else
    {
      v2 = v7 & (*((_QWORD *)&inputReusabilityFunctionTable(void)::table + 1) - 1);
    }
    v10 = *(void ***)(inputReusabilityFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((_QWORD *)&inputReusabilityFunctionTable(void)::table + 1))
                v12 %= *((_QWORD *)&inputReusabilityFunctionTable(void)::table + 1);
            }
            else
            {
              v12 &= *((_QWORD *)&inputReusabilityFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  v13 = (float)(unint64_t)(qword_1EE427448 + 1);
  if (!v8 || (float)(*(float *)&dword_1EE427450 * (float)v8) < v13)
  {
    v14 = 1;
    if (v8 >= 3)
      v14 = (v8 & (v8 - 1)) != 0;
    v15 = v14 | (2 * v8);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1EE427450);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)&inputReusabilityFunctionTable(void)::table + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v8)
    {
      v24 = vcvtps_u32_f32((float)(unint64_t)qword_1EE427448 / *(float *)&dword_1EE427450);
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)&inputReusabilityFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = (void *)inputReusabilityFunctionTable(void)::table;
          *(_QWORD *)&inputReusabilityFunctionTable(void)::table = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)&inputReusabilityFunctionTable(void)::table + 1) = prime;
          do
            *(_QWORD *)(inputReusabilityFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD **)qword_1EE427440;
          if (qword_1EE427440)
          {
            v22 = *(_QWORD *)(qword_1EE427440 + 8);
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(inputReusabilityFunctionTable(void)::table + 8 * v22) = &qword_1EE427440;
            for (i = *v21; i; v22 = v28)
            {
              v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(_QWORD *)&prime)
                  v28 %= *(_QWORD *)&prime;
              }
              else
              {
                v28 &= *(_QWORD *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(_QWORD *)(inputReusabilityFunctionTable(void)::table + 8 * v28))
                {
                  *(_QWORD *)(inputReusabilityFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                *v21 = (_QWORD *)*i;
                *i = **(_QWORD **)(inputReusabilityFunctionTable(void)::table + 8 * v28);
                **(_QWORD **)(inputReusabilityFunctionTable(void)::table + 8 * v28) = i;
                i = v21;
              }
              v28 = v22;
LABEL_57:
              v21 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        v33 = (void *)inputReusabilityFunctionTable(void)::table;
        *(_QWORD *)&inputReusabilityFunctionTable(void)::table = 0;
        if (v33)
          operator delete(v33);
        v8 = 0;
        *((_QWORD *)&inputReusabilityFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v29 = inputReusabilityFunctionTable(void)::table;
  v30 = *(_QWORD **)(inputReusabilityFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *v11 = *v30;
LABEL_74:
    *v30 = v11;
    goto LABEL_75;
  }
  *v11 = qword_1EE427440;
  qword_1EE427440 = (uint64_t)v11;
  *(_QWORD *)(v29 + 8 * v2) = &qword_1EE427440;
  if (*v11)
  {
    v31 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8)
        v31 %= v8;
    }
    else
    {
      v31 &= v8 - 1;
    }
    v30 = (_QWORD *)(inputReusabilityFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1EE427448;
  return v11;
}

void sub_19C887788(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MLE5InputReusabilityTensorPortHasSameMultiArraySurface(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  v1 = a1;
  MLE5BufferObjectBoundTo((e5rt_io_port *)&v5);
  v2 = v5;
  if (v5)
  {
    if (MLE5TypeOfBufferObject())
    {
      v2 = 0;
    }
    else
    {
      v2 = MLE5IOSurfaceOfBufferObject();
      if (v2)
      {
        objc_msgSend(v1, "multiArrayValue");
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        v2 = v2 == (_QWORD)CVPixelBufferGetIOSurface((CVPixelBufferRef)objc_msgSend(v3, "pixelBuffer"));

      }
    }
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v5, 0);

  return v2;
}

void sub_19C887840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

BOOL MLE5InputReusabilityTensorPortHasSameMultiArrayMemory(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _BOOL8 v6;

  v3 = a2;
  objc_msgSend(a1, "multiArrayValue");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "multiArrayValue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v4 == v5;

  return v6;
}

void sub_19C8878DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t MLE5InputReusabilityTensorPortHasSamePixelBufferSurface(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v4;

  v1 = a1;
  MLE5BufferObjectBoundTo((e5rt_io_port *)&v4);
  v2 = v4;
  if (v4)
  {
    if (MLE5TypeOfBufferObject())
    {
      v2 = 0;
    }
    else
    {
      v2 = MLE5IOSurfaceOfBufferObject();
      if (v2)
        v2 = v2 == (_QWORD)CVPixelBufferGetIOSurface((CVPixelBufferRef)objc_msgSend(v1, "imageBufferValue"));
    }
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v4, 0);

  return v2;
}

void sub_19C887984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);

  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
    return (uint64_t *)e5rt_buffer_object_release();
  return result;
}

uint64_t *MLE5FindInputBindFunction(unsigned int a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t ***v14;
  uint64_t **i;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  __CFString *v21;
  __CFString *v22;
  __CFString *v23;
  void *v24;
  void *v25;
  __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  uint64_t v30;
  void *v31;
  uint8_t buf[4];
  __CFString *v33;
  __int16 v34;
  __CFString *v35;
  __int16 v36;
  __CFString *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  {
    inputBindFunctionTable(void)::table = 0u;
    *(_OWORD *)&qword_1ED0010D0 = 0u;
    dword_1ED0010E0 = 1065353216;
  }
  if (inputBindFunctionTable(void)::onceToken != -1)
    dispatch_once(&inputBindFunctionTable(void)::onceToken, &__block_literal_global_41);
  v9 = a2;
  v10 = a3;
  if (*((_QWORD *)&inputBindFunctionTable(void)::table + 1))
  {
    v11 = ((unint64_t)a1 << 24) | ((unint64_t)a2 << 16) | ((unint64_t)a3 << 8);
    v12 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&inputBindFunctionTable(void)::table + 8));
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = ((unint64_t)a1 << 24) | ((unint64_t)a2 << 16) | ((unint64_t)a3 << 8);
      if (v11 >= *((_QWORD *)&inputBindFunctionTable(void)::table + 1))
        v13 = v11 % *((_QWORD *)&inputBindFunctionTable(void)::table + 1);
    }
    else
    {
      v13 = v11 & (*((_QWORD *)&inputBindFunctionTable(void)::table + 1) - 1);
    }
    v14 = *(uint64_t ****)(inputBindFunctionTable(void)::table + 8 * v13);
    if (v14)
    {
      for (i = *v14; i; i = (uint64_t **)*i)
      {
        v16 = (unint64_t)i[1];
        if (v11 == v16)
        {
          if (*((unsigned __int8 *)i + 16) == a1
            && *((unsigned __int8 *)i + 17) == a2
            && *((unsigned __int8 *)i + 18) == a3
            && !i[3])
          {
            return i[4];
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v16 >= *((_QWORD *)&inputBindFunctionTable(void)::table + 1))
              v16 %= *((_QWORD *)&inputBindFunctionTable(void)::table + 1);
          }
          else
          {
            v16 &= *((_QWORD *)&inputBindFunctionTable(void)::table + 1) - 1;
          }
          if (v16 != v13)
            break;
        }
      }
    }
  }
  +[MLLogging coreChannel](MLLogging, "coreChannel");
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = a1;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    v26 = off_1E3D661B8[a1];
    v27 = off_1E3D661D0[a2];
    v28 = off_1E3D661A0[v10];
    *(_DWORD *)buf = 138412802;
    v33 = v26;
    v34 = 2112;
    v35 = v27;
    v36 = 2112;
    v37 = v28;
    _os_log_error_impl(&dword_19C486000, v17, OS_LOG_TYPE_ERROR, "The input feature value is invalid or unsupported. (Port trait %@, feature trait %@, and direct bind mode %@.)", buf, 0x20u);

  }
  if (a4)
  {
    v19 = (void *)MEMORY[0x1E0CB35C8];
    v30 = *MEMORY[0x1E0CB2D50];
    v20 = (void *)MEMORY[0x1E0CB3940];
    v21 = off_1E3D661B8[v18];
    v22 = off_1E3D661D0[v9];
    v23 = off_1E3D661A0[v10];
    objc_msgSend(v20, "stringWithFormat:", CFSTR("The input feature value is invalid or unsupported. (Port trait %@, feature trait %@, and direct bind mode %@.)"), v21, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v24;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 1, v25);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

  }
  return 0;
}

void sub_19C887D60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *i;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v33;

  v4 = a1[1];
  v5 = a1[2];
  v6 = *((_QWORD *)a1 + 1);
  v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  v8 = *((_QWORD *)&inputBindFunctionTable(void)::table + 1);
  if (*((_QWORD *)&inputBindFunctionTable(void)::table + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&inputBindFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((_QWORD *)&inputBindFunctionTable(void)::table + 1))
        v2 = v7 % *((_QWORD *)&inputBindFunctionTable(void)::table + 1);
    }
    else
    {
      v2 = v7 & (*((_QWORD *)&inputBindFunctionTable(void)::table + 1) - 1);
    }
    v10 = *(void ***)(inputBindFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((_QWORD *)&inputBindFunctionTable(void)::table + 1))
                v12 %= *((_QWORD *)&inputBindFunctionTable(void)::table + 1);
            }
            else
            {
              v12 &= *((_QWORD *)&inputBindFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  v13 = (float)(unint64_t)(qword_1ED0010D8 + 1);
  if (!v8 || (float)(*(float *)&dword_1ED0010E0 * (float)v8) < v13)
  {
    v14 = 1;
    if (v8 >= 3)
      v14 = (v8 & (v8 - 1)) != 0;
    v15 = v14 | (2 * v8);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1ED0010E0);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)&inputBindFunctionTable(void)::table + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v8)
    {
      v24 = vcvtps_u32_f32((float)(unint64_t)qword_1ED0010D8 / *(float *)&dword_1ED0010E0);
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)&inputBindFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = (void *)inputBindFunctionTable(void)::table;
          *(_QWORD *)&inputBindFunctionTable(void)::table = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)&inputBindFunctionTable(void)::table + 1) = prime;
          do
            *(_QWORD *)(inputBindFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD **)qword_1ED0010D0;
          if (qword_1ED0010D0)
          {
            v22 = *(_QWORD *)(qword_1ED0010D0 + 8);
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(inputBindFunctionTable(void)::table + 8 * v22) = &qword_1ED0010D0;
            for (i = *v21; i; v22 = v28)
            {
              v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(_QWORD *)&prime)
                  v28 %= *(_QWORD *)&prime;
              }
              else
              {
                v28 &= *(_QWORD *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(_QWORD *)(inputBindFunctionTable(void)::table + 8 * v28))
                {
                  *(_QWORD *)(inputBindFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                *v21 = (_QWORD *)*i;
                *i = **(_QWORD **)(inputBindFunctionTable(void)::table + 8 * v28);
                **(_QWORD **)(inputBindFunctionTable(void)::table + 8 * v28) = i;
                i = v21;
              }
              v28 = v22;
LABEL_57:
              v21 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        v33 = (void *)inputBindFunctionTable(void)::table;
        *(_QWORD *)&inputBindFunctionTable(void)::table = 0;
        if (v33)
          operator delete(v33);
        v8 = 0;
        *((_QWORD *)&inputBindFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v29 = inputBindFunctionTable(void)::table;
  v30 = *(_QWORD **)(inputBindFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *v11 = *v30;
LABEL_74:
    *v30 = v11;
    goto LABEL_75;
  }
  *v11 = qword_1ED0010D0;
  qword_1ED0010D0 = (uint64_t)v11;
  *(_QWORD *)(v29 + 8 * v2) = &qword_1ED0010D0;
  if (*v11)
  {
    v31 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8)
        v31 %= v8;
    }
    else
    {
      v31 &= v8 - 1;
    }
    v30 = (_QWORD *)(inputBindFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1ED0010D8;
  return v11;
}

void sub_19C88836C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MLE5BindInputBufferObjectByCopyingMultiArray(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  MLMultiArray *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  MLMultiArray *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  MLE5BufferObjectBoundTo((e5rt_io_port *)&v19);
  if (!v19)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19C486000, v6, OS_LOG_TYPE_ERROR, "MLE5BindBufferObjectByCopyingMultiArray requires the port to have bound a buffer object.", buf, 2u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("MLE5BindBufferObjectByCopyingMultiArray requires the port to have bound a buffer object."));
  }
  v7 = MLE5DataPointerOfBufferObject();
  MLE5TensorDescriptorOf((e5rt_io_port *)&v18);
  objc_msgSend(v5, "multiArrayValue");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = [MLMultiArray alloc];
  MLE5MultiArrayShapeForTensor();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MLE5MultiArrayDataTypeForTensor();
  MLE5MultiArrayStridesForTensor();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[MLMultiArray initWithDataPointer:shape:dataType:strides:deallocator:error:](v9, "initWithDataPointer:shape:dataType:strides:deallocator:error:", v7, v10, v11, v12, 0, a4);

  if (!v13)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v17 = *a4;
      *(_DWORD *)buf = 138412290;
      v21 = v17;
      _os_log_error_impl(&dword_19C486000, v14, OS_LOG_TYPE_ERROR, "Failed to create MLMultiArray: %@.", buf, 0xCu);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to create MLMultiArray: %@."), *a4);
  }
  v15 = objc_msgSend(v8, "copyIntoMultiArray:error:", v13, a4);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v18);
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v19, 0);

  return v15;
}

void sub_19C8885D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v7;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va1, 0);

  _Unwind_Resume(a1);
}

BOOL MLE5BindInputBufferObjectByRetainingMultiArraySurface(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t last_error_message;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend(a1, "multiArrayValue");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferGetIOSurface((CVPixelBufferRef)objc_msgSend(v7, "pixelBuffer"));
  MLE5NewBufferObjectUsing((__IOSurface *)&v14);
  v8 = e5rt_io_port_bind_buffer_object();
  if ((_DWORD)v8)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      v16 = last_error_message;
      v17 = 1024;
      v18 = v8;
      _os_log_error_impl(&dword_19C486000, v9, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a4)
    {
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("E5RT: %s (%d)"), e5rt_get_last_error_message(), v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "name");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 1, v10, CFSTR("Failed to bind the input multi-array for feature named: %@."), v11);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v14, 0);

  return (_DWORD)v8 == 0;
}

void sub_19C8887F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a4);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

BOOL MLE5BindInputBufferObjectByRetainingMultiArrayMemory(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  void *v7;
  uint64_t size;
  _QWORD *v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t last_error_message;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend(a1, "multiArrayValue");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  MLE5TensorDescriptorOf((e5rt_io_port *)&v23);
  v24 = 0;
  size = e5rt_tensor_desc_get_size();
  v9 = (_QWORD *)MEMORY[0x1E0C99750];
  if ((_DWORD)size)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      v26 = last_error_message;
      v27 = 1024;
      v28 = size;
      _os_log_error_impl(&dword_19C486000, v10, OS_LOG_TYPE_ERROR, "Failed to get size from tensor descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v9, CFSTR("Failed to get size from tensor descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), size);
  }
  v11 = objc_retainAutorelease(v7);
  objc_msgSend(v11, "bytes");
  v24 = 0;
  v12 = e5rt_buffer_object_create_from_data_pointer();
  if ((_DWORD)v12)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v20 = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      v26 = v20;
      v27 = 1024;
      v28 = v12;
      _os_log_error_impl(&dword_19C486000, v13, OS_LOG_TYPE_ERROR, "Failed to create E5 heap-allocated buffer object from data pointer E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v9, CFSTR("Failed to create E5 heap-allocated buffer object from data pointer E5RT: %s (%d)"), e5rt_get_last_error_message(), v12);
  }
  v22 = v24;
  v14 = e5rt_io_port_bind_buffer_object();
  if ((_DWORD)v14)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v21 = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      v26 = v21;
      v27 = 1024;
      v28 = v14;
      _os_log_error_impl(&dword_19C486000, v15, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a4)
    {
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("E5RT: %s (%d)"), e5rt_get_last_error_message(), v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "name");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 1, v16, CFSTR("Failed to bind the input multi-array for feature named: %@."), v17);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v22, 0);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v23);

  return (_DWORD)v14 == 0;
}

void sub_19C888B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v9;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v9 = va_arg(va1, _QWORD);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va1);

  _Unwind_Resume(a1);
}

BOOL MLE5BindInputBufferObjectByRetainingPixelBuffer(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t last_error_message;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  CVPixelBufferGetIOSurface((CVPixelBufferRef)objc_msgSend(a1, "imageBufferValue"));
  MLE5NewBufferObjectUsing((__IOSurface *)&v13);
  v7 = e5rt_io_port_bind_buffer_object();
  if ((_DWORD)v7)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      v15 = last_error_message;
      v16 = 1024;
      v17 = v7;
      _os_log_error_impl(&dword_19C486000, v8, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a4)
    {
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("E5RT: %s (%d)"), e5rt_get_last_error_message(), v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "name");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 1, v9, CFSTR("Failed to bind the input image for feature named: %@."), v10);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v13, 0);

  return (_DWORD)v7 == 0;
}

void sub_19C888D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

BOOL MLE5BindInputBufferObjectByCopyingPixelBuffer(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  id v7;
  __CVBuffer *v8;
  OSType PixelFormatType;
  void *v10;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void **v23;
  void *v24;
  void *v25;
  _BOOL8 v26;
  void *v28;
  void **v29;
  void (*v30)(void *, size_t, size_t, size_t, uint64_t, uint64_t, uint64_t);
  uint64_t StridesFromTensorDescriptor;
  uint64_t RankFromTensorDescriptor;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *BaseAddress;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  uint64_t v43;
  void *__p[2];
  char v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint8_t buf[4];
  void *v55;
  __int16 v56;
  void **v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = a3;
  v8 = (__CVBuffer *)objc_msgSend(v6, "imageBufferValue");
  PixelFormatType = CVPixelBufferGetPixelFormatType(v8);
  MLE5TensorDescriptorOf((e5rt_io_port *)&v49);
  objc_msgSend(v7, "imageConstraint");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "pixelType");

  MLE5PixelBufferAndTensorStrategyKey::MLE5PixelBufferAndTensorStrategyKey((uint64_t)&v46, PixelFormatType, v11);
  {
    copyPixelBufferToTensorFunctionTable(void)::table = 0u;
    *(_OWORD *)&qword_1EE431618 = 0u;
    dword_1EE431628 = 1065353216;
  }
  if (copyPixelBufferToTensorFunctionTable(void)::onceToken != -1)
    dispatch_once(&copyPixelBufferToTensorFunctionTable(void)::onceToken, &__block_literal_global_42);
  if (!*((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1))
    goto LABEL_22;
  v13 = v47 ^ v46 ^ v48;
  v14 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&copyPixelBufferToTensorFunctionTable(void)::table + 8));
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = v47 ^ v46 ^ v48;
    if (v13 >= *((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1))
      v15 = v13 % *((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1);
  }
  else
  {
    v15 = v13 & (*((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1) - 1);
  }
  v16 = *(uint64_t ***)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v15);
  if (!v16)
    goto LABEL_22;
  v17 = *v16;
  if (!v17)
    goto LABEL_22;
  while (1)
  {
    v18 = v17[1];
    if (v13 == v18)
      break;
    if (v14.u32[0] > 1uLL)
    {
      if (v18 >= *((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1))
        v18 %= *((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1);
    }
    else
    {
      v18 &= *((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1) - 1;
    }
    if (v18 != v15)
      goto LABEL_22;
LABEL_21:
    v17 = (uint64_t *)*v17;
    if (!v17)
      goto LABEL_22;
  }
  if (*((_DWORD *)v17 + 8) != v48 || v17[3] != v47 || *((_DWORD *)v17 + 4) != v46)
    goto LABEL_21;
  v30 = (void (*)(void *, size_t, size_t, size_t, uint64_t, uint64_t, uint64_t))v17[5];
  if (v30)
  {
    MLE5BufferObjectBoundTo((e5rt_io_port *)__p);
    StridesFromTensorDescriptor = MLE5GetStridesFromTensorDescriptor();
    RankFromTensorDescriptor = MLE5GetRankFromTensorDescriptor();
    v33 = MLE5DataPointerOfBufferObject();
    v34 = CVPixelBufferLockBaseAddress(v8, 1uLL);
    v26 = (_DWORD)v34 == 0;
    if ((_DWORD)v34)
    {
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v55) = v34;
        _os_log_error_impl(&dword_19C486000, v35, OS_LOG_TYPE_ERROR, "Failed to lock the source pixel buffer with CVReturn: %d", buf, 8u);
      }

      if (a4)
      {
        v36 = (void *)MEMORY[0x1E0CB35C8];
        v50 = *MEMORY[0x1E0CB2D50];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Failed to lock the source pixel buffer with CVReturn: %d"), v34);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v51 = v37;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 0, v38);
        *a4 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
    else
    {
      v43 = StridesFromTensorDescriptor;
      BaseAddress = CVPixelBufferGetBaseAddress(v8);
      Width = CVPixelBufferGetWidth(v8);
      Height = CVPixelBufferGetHeight(v8);
      BytesPerRow = CVPixelBufferGetBytesPerRow(v8);
      v30(BaseAddress, Width, Height, BytesPerRow, v33, v43, RankFromTensorDescriptor);
      CVPixelBufferUnlockBaseAddress(v8, 1uLL);
    }
    std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)__p, 0);
    goto LABEL_31;
  }
LABEL_22:
  +[MLLogging coreChannel](MLLogging, "coreChannel");
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(v7, "name");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    MLE5PixelBufferAndTensorStrategyKey::str((MLE5PixelBufferAndTensorStrategyKey *)__p, &v46);
    if (v45 >= 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    *(_DWORD *)buf = 138412546;
    v55 = v28;
    v56 = 2080;
    v57 = v29;
    _os_log_error_impl(&dword_19C486000, v19, OS_LOG_TYPE_ERROR, "Unable to copy the specified input image for the feature named %@ to the internal tensor (%s).", buf, 0x16u);
    if (v45 < 0)
      operator delete(__p[0]);

  }
  if (a4)
  {
    v20 = (void *)MEMORY[0x1E0CB35C8];
    v52 = *MEMORY[0x1E0CB2D50];
    v21 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v7, "name");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    MLE5PixelBufferAndTensorStrategyKey::str((MLE5PixelBufferAndTensorStrategyKey *)__p, &v46);
    if (v45 >= 0)
      v23 = __p;
    else
      v23 = (void **)__p[0];
    objc_msgSend(v21, "stringWithFormat:", CFSTR("Unable to copy the specified input image for the feature named %@ to the internal tensor (%s)."), v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = v24;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 1, v25);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

    if (v45 < 0)
      operator delete(__p[0]);

  }
  v26 = 0;
LABEL_31:
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v49);

  return v26;
}

void sub_19C889358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)&__p, 0);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&a21);

  _Unwind_Resume(a1);
}

uint64_t MLE5BindInputSurfaceObjectByCopyingPixelBuffer(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  __CVBuffer *v9;
  __CVBuffer *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v24;
  void *v25;
  VTPixelTransferSessionRef pixelTransferSessionOut;
  __CVBuffer *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  v9 = (__CVBuffer *)objc_msgSend(v7, "imageBufferValue");
  v10 = (__CVBuffer *)MLE5CopyPixelBufferOwningSurfaceOfPort(a2, (_QWORD *)a4);
  v27 = v10;
  if (!v10)
    goto LABEL_13;
  pixelTransferSessionOut = 0;
  v11 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &pixelTransferSessionOut);
  if ((_DWORD)v11)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v8, "name");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v33 = v24;
      v34 = 1024;
      v35 = v11;
      _os_log_error_impl(&dword_19C486000, v12, OS_LOG_TYPE_ERROR, "Failed to copy the input image for the feature named %@ to the internal surface buffer due to the underlying image transfer engine's creation error. (Error Code %d)", buf, 0x12u);

    }
    if (a4)
    {
      v13 = (void *)MEMORY[0x1E0CB35C8];
      v30 = *MEMORY[0x1E0CB2D50];
      v14 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v8, "name");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "stringWithFormat:", CFSTR("Failed to copy the input image for the feature named %@ to the internal surface buffer due to the underlying image transfer engine's creation error. (Error Code %d)"), v15, v11);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = v16;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 0, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_12:
      *(_QWORD *)a4 = v18;

LABEL_13:
      a4 = 0;
    }
  }
  else
  {
    v19 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v9, v10);
    if (!(_DWORD)v19)
    {
      CFRelease(pixelTransferSessionOut);
      a4 = 1;
      goto LABEL_14;
    }
    CFRelease(pixelTransferSessionOut);
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v8, "name");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v33 = v25;
      v34 = 1024;
      v35 = v19;
      _os_log_error_impl(&dword_19C486000, v20, OS_LOG_TYPE_ERROR, "Failed to copy the input image for the feature named %@ to the internal surface buffer due to the underlying image transfer engine's error. (Error Code %d)", buf, 0x12u);

    }
    if (a4)
    {
      v21 = (void *)MEMORY[0x1E0CB35C8];
      v28 = *MEMORY[0x1E0CB2D50];
      v22 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v8, "name");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "stringWithFormat:", CFSTR("Failed to copy the input image for the feature named %@ to the internal surface buffer due to the underlying image transfer engine's error. (Error Code %d)"), v15, v19);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = v16;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 0, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_12;
    }
  }
LABEL_14:
  std::unique_ptr<__CVBuffer,MLE5ObjectDeleter<__CVBuffer>>::reset[abi:ne180100](&v27);

  return a4;
}

void sub_19C889774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a4);

  std::unique_ptr<__CVBuffer,MLE5ObjectDeleter<__CVBuffer>>::reset[abi:ne180100]((__CVBuffer **)va);
  _Unwind_Resume(a1);
}

BOOL MLE5BindInputSurfaceObjectByRetainingPixelBuffer(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t last_error_message;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  CVPixelBufferGetIOSurface((CVPixelBufferRef)objc_msgSend(a1, "imageBufferValue"));
  MLE5NewSurfaceObjectUsing((__IOSurface *)&v13);
  v7 = e5rt_io_port_bind_surface_object();
  if ((_DWORD)v7)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      v15 = last_error_message;
      v16 = 1024;
      v17 = v7;
      _os_log_error_impl(&dword_19C486000, v8, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a4)
    {
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("E5RT: %s (%d)"), e5rt_get_last_error_message(), v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "name");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 1, v9, CFSTR("Failed to bind the input image for feature named: %@."), v10);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100](&v13, 0);

  return (_DWORD)v7 == 0;
}

void sub_19C88999C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
    return (uint64_t *)e5rt_surface_object_release();
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(int *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *i;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v33;

  v4 = a1[4];
  v5 = *((_QWORD *)a1 + 1);
  v6 = *a1;
  v7 = v5 ^ *a1 ^ v4;
  v8 = *((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1);
  if (*((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&copyPixelBufferToTensorFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = v5 ^ v6 ^ v4;
      if (v7 >= *((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1))
        v2 = v7 % *((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1);
    }
    else
    {
      v2 = v7 & (*((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1) - 1);
    }
    v10 = *(void ***)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 8) == v4 && v11[3] == v5 && *((_DWORD *)v11 + 4) == v6)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1))
                v12 %= *((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1);
            }
            else
            {
              v12 &= *((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *(_OWORD *)a2;
  v11[4] = *(_QWORD *)(a2 + 16);
  v11[5] = 0;
  v13 = (float)(unint64_t)(qword_1EE431620 + 1);
  if (!v8 || (float)(*(float *)&dword_1EE431628 * (float)v8) < v13)
  {
    v14 = 1;
    if (v8 >= 3)
      v14 = (v8 & (v8 - 1)) != 0;
    v15 = v14 | (2 * v8);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1EE431628);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v8)
    {
      v24 = vcvtps_u32_f32((float)(unint64_t)qword_1EE431620 / *(float *)&dword_1EE431628);
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = (void *)copyPixelBufferToTensorFunctionTable(void)::table;
          *(_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)&copyPixelBufferToTensorFunctionTable(void)::table + 1) = prime;
          do
            *(_QWORD *)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD **)qword_1EE431618;
          if (qword_1EE431618)
          {
            v22 = *(_QWORD *)(qword_1EE431618 + 8);
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v22) = &qword_1EE431618;
            for (i = *v21; i; v22 = v28)
            {
              v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(_QWORD *)&prime)
                  v28 %= *(_QWORD *)&prime;
              }
              else
              {
                v28 &= *(_QWORD *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(_QWORD *)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v28))
                {
                  *(_QWORD *)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                *v21 = (_QWORD *)*i;
                *i = **(_QWORD **)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v28);
                **(_QWORD **)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v28) = i;
                i = v21;
              }
              v28 = v22;
LABEL_57:
              v21 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        v33 = (void *)copyPixelBufferToTensorFunctionTable(void)::table;
        *(_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table = 0;
        if (v33)
          operator delete(v33);
        v8 = 0;
        *((_QWORD *)&copyPixelBufferToTensorFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v29 = copyPixelBufferToTensorFunctionTable(void)::table;
  v30 = *(_QWORD **)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *v11 = *v30;
LABEL_74:
    *v30 = v11;
    goto LABEL_75;
  }
  *v11 = qword_1EE431618;
  qword_1EE431618 = (uint64_t)v11;
  *(_QWORD *)(v29 + 8 * v2) = &qword_1EE431618;
  if (*v11)
  {
    v31 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8)
        v31 %= v8;
    }
    else
    {
      v31 &= v8 - 1;
    }
    v30 = (_QWORD *)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1EE431620;
  return v11;
}

void sub_19C88A098(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MLE5Copy32BGRA_BGRTensor_CompDtypeFLOAT_CompPackFmt32(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  size_t v9;
  uint64_t v10;
  void *v11;
  vImage_Error v12;
  NSObject *v13;
  vImage_Buffer blue;
  vImage_Buffer green;
  vImage_Buffer red;
  vImage_Buffer alpha;
  vImage_Buffer src;
  uint8_t buf[4];
  int v21;
  _QWORD minFloat[2];
  __int128 maxFloat;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  src.data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  alpha.data = a5;
  alpha.height = a3;
  v10 = *(_QWORD *)(a6 + 8 * a7 - 24);
  v9 = *(_QWORD *)(a6 + 8 * a7 - 16);
  alpha.width = a2;
  alpha.rowBytes = v9;
  red.data = &a5[v10];
  red.height = a3;
  red.width = a2;
  red.rowBytes = v9;
  green.data = &a5[2 * v10];
  green.height = a3;
  green.width = a2;
  green.rowBytes = v9;
  v11 = (void *)operator new[]();
  blue.data = v11;
  blue.height = a3;
  blue.width = a2;
  blue.rowBytes = 0;
  maxFloat = xmmword_19CB39A00;
  minFloat[0] = 0;
  minFloat[1] = 0;
  v12 = vImageConvert_ARGB8888toPlanarF(&src, &alpha, &red, &green, &blue, (const float *)&maxFloat, (const float *)minFloat, 0);
  if (v12)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v21 = v12;
      _os_log_error_impl(&dword_19C486000, v13, OS_LOG_TYPE_ERROR, "vImageConvert_ARGB8888toPlanarF has failed with error: %d", buf, 8u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("vImageConvert_ARGB8888toPlanarF has failed with error: %d"), v12);
  }
  return MEMORY[0x1A1AD6248](v11, 0x1000C8077774924);
}

void sub_19C88A230(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t MLE5Copy32BGRA_RGBTensor_CompDtypeFLOAT_CompPackFmt32(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  size_t v9;
  uint64_t v10;
  void *v11;
  vImage_Error v12;
  NSObject *v13;
  vImage_Buffer blue;
  vImage_Buffer alpha;
  vImage_Buffer red;
  vImage_Buffer green;
  vImage_Buffer src;
  uint8_t buf[4];
  int v21;
  _QWORD minFloat[2];
  __int128 maxFloat;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  src.data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  green.data = a5;
  green.height = a3;
  v10 = *(_QWORD *)(a6 + 8 * a7 - 24);
  v9 = *(_QWORD *)(a6 + 8 * a7 - 16);
  green.width = a2;
  green.rowBytes = v9;
  red.data = &a5[v10];
  red.height = a3;
  red.width = a2;
  red.rowBytes = v9;
  alpha.data = &a5[2 * v10];
  alpha.height = a3;
  alpha.width = a2;
  alpha.rowBytes = v9;
  v11 = (void *)operator new[]();
  blue.data = v11;
  blue.height = a3;
  blue.width = a2;
  blue.rowBytes = 0;
  maxFloat = xmmword_19CB39A00;
  minFloat[0] = 0;
  minFloat[1] = 0;
  v12 = vImageConvert_ARGB8888toPlanarF(&src, &alpha, &red, &green, &blue, (const float *)&maxFloat, (const float *)minFloat, 0);
  if (v12)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v21 = v12;
      _os_log_error_impl(&dword_19C486000, v13, OS_LOG_TYPE_ERROR, "vImageConvert_ARGB8888toPlanarF has failed with error: %d", buf, 8u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("vImageConvert_ARGB8888toPlanarF has failed with error: %d"), v12);
  }
  return MEMORY[0x1A1AD6248](v11, 0x1000C8077774924);
}

void sub_19C88A3E4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t MLE5Copy32ARGB_BGRTensor_CompDtypeFLOAT_CompPackFmt32(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  size_t v9;
  uint64_t v10;
  void *v11;
  vImage_Error v12;
  NSObject *v13;
  vImage_Buffer alpha;
  vImage_Buffer red;
  vImage_Buffer green;
  vImage_Buffer blue;
  vImage_Buffer src;
  uint8_t buf[4];
  int v21;
  _QWORD minFloat[2];
  __int128 maxFloat;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  src.data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  blue.data = a5;
  blue.height = a3;
  v10 = *(_QWORD *)(a6 + 8 * a7 - 24);
  v9 = *(_QWORD *)(a6 + 8 * a7 - 16);
  blue.width = a2;
  blue.rowBytes = v9;
  green.data = &a5[v10];
  green.height = a3;
  green.width = a2;
  green.rowBytes = v9;
  red.data = &a5[2 * v10];
  red.height = a3;
  red.width = a2;
  red.rowBytes = v9;
  v11 = (void *)operator new[]();
  alpha.data = v11;
  alpha.height = a3;
  alpha.width = a2;
  alpha.rowBytes = 0;
  maxFloat = xmmword_19CB39A00;
  minFloat[0] = 0;
  minFloat[1] = 0;
  v12 = vImageConvert_ARGB8888toPlanarF(&src, &alpha, &red, &green, &blue, (const float *)&maxFloat, (const float *)minFloat, 0);
  if (v12)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v21 = v12;
      _os_log_error_impl(&dword_19C486000, v13, OS_LOG_TYPE_ERROR, "vImageConvert_ARGB8888toPlanarF has failed with error: %d", buf, 8u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("vImageConvert_ARGB8888toPlanarF has failed with error: %d"), v12);
  }
  return MEMORY[0x1A1AD6248](v11, 0x1000C8077774924);
}

void sub_19C88A598(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t MLE5Copy32ARGB_RGBTensor_CompDtypeFLOAT_CompPackFmt32(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  size_t v9;
  uint64_t v10;
  void *v11;
  vImage_Error v12;
  NSObject *v13;
  vImage_Buffer alpha;
  vImage_Buffer blue;
  vImage_Buffer green;
  vImage_Buffer red;
  vImage_Buffer src;
  uint8_t buf[4];
  int v21;
  _QWORD minFloat[2];
  __int128 maxFloat;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  src.data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  red.data = a5;
  red.height = a3;
  v10 = *(_QWORD *)(a6 + 8 * a7 - 24);
  v9 = *(_QWORD *)(a6 + 8 * a7 - 16);
  red.width = a2;
  red.rowBytes = v9;
  green.data = &a5[v10];
  green.height = a3;
  green.width = a2;
  green.rowBytes = v9;
  blue.data = &a5[2 * v10];
  blue.height = a3;
  blue.width = a2;
  blue.rowBytes = v9;
  v11 = (void *)operator new[]();
  alpha.data = v11;
  alpha.height = a3;
  alpha.width = a2;
  alpha.rowBytes = 0;
  maxFloat = xmmword_19CB39A00;
  minFloat[0] = 0;
  minFloat[1] = 0;
  v12 = vImageConvert_ARGB8888toPlanarF(&src, &alpha, &red, &green, &blue, (const float *)&maxFloat, (const float *)minFloat, 0);
  if (v12)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v21 = v12;
      _os_log_error_impl(&dword_19C486000, v13, OS_LOG_TYPE_ERROR, "vImageConvert_ARGB8888toPlanarF has failed with error: %d", buf, 8u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("vImageConvert_ARGB8888toPlanarF has failed with error: %d"), v12);
  }
  return MEMORY[0x1A1AD6248](v11, 0x1000C8077774924);
}

void sub_19C88A74C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

vImage_Error MLE5CopyOneComponent8_GrayTensor_CompDtypeFLOAT_CompPackFmt32(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  size_t v7;
  vImage_Error result;
  vImage_Error v9;
  NSObject *v10;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint8_t buf[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  src.data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  dest.data = a5;
  dest.height = a3;
  v7 = *(_QWORD *)(a6 + 8 * a7 - 16);
  dest.width = a2;
  dest.rowBytes = v7;
  result = vImageConvert_Planar8toPlanarF(&src, &dest, 255.0, 0.0, 0);
  if (result)
  {
    v9 = result;
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v14 = v9;
      _os_log_error_impl(&dword_19C486000, v10, OS_LOG_TYPE_ERROR, "vImageConvert_ARGB8888toPlanarF has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("vImageConvert_ARGB8888toPlanarF has failed with error: %d"), v9);
  }
  return result;
}

vImage_Error MLE5CopyOneComponent16Half_GrayTensor_CompDtypeFLOAT_CompPackFmt32(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  size_t v7;
  vImage_Error result;
  vImage_Error v9;
  NSObject *v10;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint8_t buf[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  src.data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  dest.data = a5;
  dest.height = a3;
  v7 = *(_QWORD *)(a6 + 8 * a7 - 16);
  dest.width = a2;
  dest.rowBytes = v7;
  result = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  if (result)
  {
    v9 = result;
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v14 = v9;
      _os_log_error_impl(&dword_19C486000, v10, OS_LOG_TYPE_ERROR, "vImageConvert_ARGB8888toPlanarF has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("vImageConvert_ARGB8888toPlanarF has failed with error: %d"), v9);
  }
  return result;
}

vImage_Error MLE5CopyOneComponent16Half_GrayTensor_CompDtypeFLOAT_CompPackFmt16(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  size_t v7;
  vImage_Error result;
  vImage_Error v9;
  NSObject *v10;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint8_t buf[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  src.data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  dest.data = a5;
  dest.height = a3;
  v7 = *(_QWORD *)(a6 + 8 * a7 - 16);
  dest.width = a2;
  dest.rowBytes = v7;
  result = vImageCopyBuffer(&src, &dest, 2uLL, 0);
  if (result)
  {
    v9 = result;
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v14 = v9;
      _os_log_error_impl(&dword_19C486000, v10, OS_LOG_TYPE_ERROR, "vImageCopyBuffer has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("vImageCopyBuffer has failed with error: %d"), v9);
  }
  return result;
}

void MLE5Copy32BGRA_BGRTensor_CompDtypeFLOAT_CompPackFmt16(char *a1, vImagePixelCount a2, int a3, size_t a4, char *a5, const uint64_t *a6, uint64_t a7)
{
  _MLE5Copy32XXXX_YYYTensor_CompDtypeFLOAT_CompPackFmt16(a1, a2, a3, a4, a5, a6, a7, 1, 1);
}

void MLE5Copy32BGRA_RGBTensor_CompDtypeFLOAT_CompPackFmt16(char *a1, vImagePixelCount a2, int a3, size_t a4, char *a5, const uint64_t *a6, uint64_t a7)
{
  _MLE5Copy32XXXX_YYYTensor_CompDtypeFLOAT_CompPackFmt16(a1, a2, a3, a4, a5, a6, a7, 1, 0);
}

void MLE5Copy32ARGB_BGRTensor_CompDtypeFLOAT_CompPackFmt16(char *a1, vImagePixelCount a2, int a3, size_t a4, char *a5, const uint64_t *a6, uint64_t a7)
{
  _MLE5Copy32XXXX_YYYTensor_CompDtypeFLOAT_CompPackFmt16(a1, a2, a3, a4, a5, a6, a7, 0, 1);
}

void MLE5Copy32ARGB_RGBTensor_CompDtypeFLOAT_CompPackFmt16(char *a1, vImagePixelCount a2, int a3, size_t a4, char *a5, const uint64_t *a6, uint64_t a7)
{
  _MLE5Copy32XXXX_YYYTensor_CompDtypeFLOAT_CompPackFmt16(a1, a2, a3, a4, a5, a6, a7, 0, 0);
}

void MLE5CopyOneComponent8_GrayTensor_CompDtypeFLOAT_CompPackFmt16(char *a1, vImagePixelCount a2, uint64_t a3, size_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  size_t v14;
  uint64_t v15;
  vImage_Error v16;
  vImage_Error v17;
  NSObject *v18;
  vImage_Error v19;
  vImage_Error v20;
  NSObject *v21;
  size_t v22;
  vImage_Buffer dest;
  vImage_Buffer src;
  void *memptr;
  uint8_t buf[4];
  int v27;
  vImage_Buffer v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  memptr = 0;
  v22 = 4 * a2;
  malloc_type_posix_memalign(&memptr, 0x80uLL, 4 * a2, 0x100004052888210uLL);
  if (a3)
  {
    v14 = *(_QWORD *)(a6 + 8 * a7 - 16);
    v15 = *MEMORY[0x1E0C99750];
    do
    {
      src.data = a1;
      src.height = 1;
      src.width = a2;
      src.rowBytes = a4;
      dest.data = memptr;
      dest.height = 1;
      dest.width = a2;
      dest.rowBytes = v22;
      v16 = vImageConvert_Planar8toPlanarF(&src, &dest, 255.0, 0.0, 0);
      if (v16)
      {
        v17 = v16;
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v28.data) = 67109120;
          HIDWORD(v28.data) = v17;
          _os_log_error_impl(&dword_19C486000, v18, OS_LOG_TYPE_ERROR, "vImageConvert_Planar8ToPlanarF has failed with error: %d", (uint8_t *)&v28, 8u);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v15, CFSTR("vImageConvert_Planar8ToPlanarF has failed with error: %d"), v17);
      }
      v28.data = a5;
      v28.height = 1;
      v28.width = a2;
      v28.rowBytes = v14;
      v19 = vImageConvert_PlanarFtoPlanar16F(&dest, &v28, 0);
      if (v19)
      {
        v20 = v19;
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v27 = v20;
          _os_log_error_impl(&dword_19C486000, v21, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar16F with error: %d", buf, 8u);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v15, CFSTR("vImageConvert_PlanarFtoPlanar16F with error: %d"), v20);
      }
      a1 += a4;
      a5 += v14;
      --a3;
    }
    while (a3);
  }
  free(memptr);
}

vImage_Error MLE5CopyOneComponent8_GrayTensor_CompDtypeUINT_CompPackFmt8(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  size_t v7;
  vImage_Error result;
  vImage_Error v9;
  NSObject *v10;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint8_t buf[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  src.data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  dest.data = a5;
  dest.height = a3;
  v7 = *(_QWORD *)(a6 + 8 * a7 - 16);
  dest.width = a2;
  dest.rowBytes = v7;
  result = vImageCopyBuffer(&src, &dest, 1uLL, 0);
  if (result)
  {
    v9 = result;
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v14 = v9;
      _os_log_error_impl(&dword_19C486000, v10, OS_LOG_TYPE_ERROR, "vImageCopyBuffer has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("vImageCopyBuffer has failed with error: %d"), v9);
  }
  return result;
}

void _MLE5Copy32XXXX_YYYTensor_CompDtypeFLOAT_CompPackFmt16(char *a1, vImagePixelCount a2, int a3, size_t a4, char *a5, const uint64_t *a6, uint64_t a7, int a8, BOOL a9)
{
  uint64_t v16;
  vImagePixelCount v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  vImage_Error v22;
  vImage_Error v23;
  NSObject *v24;
  size_t v25;
  uint64_t v26;
  vImage_Error v27;
  vImage_Error v28;
  NSObject *v29;
  vImage_Error v30;
  vImage_Error v31;
  NSObject *v32;
  vImage_Error v33;
  vImage_Error v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  vImagePixelCount v40;
  vDSP_Length v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  vImage_Buffer v46;
  vImage_Buffer v47;
  vImage_Buffer dest;
  vImage_Buffer destB;
  vImage_Buffer destG;
  vImage_Buffer destR;
  vImage_Buffer destA;
  vImage_Buffer srcARGB;
  void *v54;
  void *memptr;
  uint8_t buf[4];
  int v57;
  vImage_Buffer v58;
  vImage_Buffer v59;
  vImage_Buffer src;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v54 = 0;
  memptr = 0;
  v44 = 4 * a2;
  malloc_type_posix_memalign(&memptr, 0x80uLL, 4 * a2, 0xC6336499uLL);
  v41 = 3 * a2;
  malloc_type_posix_memalign(&v54, 0x80uLL, 12 * a2, 0x100004052888210uLL);
  if (a3 >= 1)
  {
    v16 = 0;
    if (a8)
      v17 = 0;
    else
      v17 = a2;
    v18 = a8 ^ a9;
    v39 = a7 - 2;
    v40 = v17;
    v42 = *MEMORY[0x1E0C99750];
    v43 = a7 - 3;
    v19 = v18 == 0;
    v20 = 2;
    if (v18)
      v21 = 2;
    else
      v21 = 0;
    if (!v19)
      v20 = 0;
    v37 = v20;
    v38 = v21;
    v36 = a3;
    do
    {
      srcARGB.data = a1;
      srcARGB.height = 1;
      srcARGB.width = a2;
      srcARGB.rowBytes = a4;
      destA.data = memptr;
      destA.height = 1;
      destA.width = a2;
      destA.rowBytes = a2;
      destR.data = (char *)memptr + a2;
      destR.height = 1;
      destR.width = a2;
      destR.rowBytes = a2;
      destG.data = (char *)memptr + 2 * a2;
      destG.height = 1;
      destG.width = a2;
      destG.rowBytes = a2;
      destB.data = (char *)memptr + v41;
      destB.height = 1;
      destB.width = a2;
      destB.rowBytes = a2;
      v22 = vImageConvert_ARGB8888toPlanar8(&srcARGB, &destA, &destR, &destG, &destB, 0);
      if (v22)
      {
        v23 = v22;
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          LODWORD(src.data) = 67109120;
          HIDWORD(src.data) = v23;
          _os_log_error_impl(&dword_19C486000, v24, OS_LOG_TYPE_ERROR, "vImageConvert_ARGB8888toPlanar8 has failed with error: %d", (uint8_t *)&src, 8u);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v42, CFSTR("vImageConvert_ARGB8888toPlanar8 has failed with error: %d"), v23);
      }
      v25 = a4;
      vDSP_vfltu8((const unsigned __int8 *)memptr + v40, 1, (float *)v54, 1, v41);
      v26 = a6[v39] * v16;
      src.data = v54;
      src.height = 1;
      src.width = a2;
      src.rowBytes = v44;
      dest.data = &a5[a6[v43] * v38 + v26];
      dest.height = 1;
      dest.width = a2;
      dest.rowBytes = 2 * a2;
      v27 = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
      if (v27)
      {
        v28 = v27;
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v59.data) = 67109120;
          HIDWORD(v59.data) = v28;
          _os_log_error_impl(&dword_19C486000, v29, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar16F has failed with error: %d", (uint8_t *)&v59, 8u);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v42, CFSTR("vImageConvert_PlanarFtoPlanar16F has failed with error: %d"), v28);
      }
      v59.data = (char *)v54 + 4 * a2;
      v59.height = 1;
      v59.width = a2;
      v59.rowBytes = v44;
      v47.data = &a5[a6[v43] + v26];
      v47.height = 1;
      v47.width = a2;
      v47.rowBytes = 2 * a2;
      v30 = vImageConvert_PlanarFtoPlanar16F(&v59, &v47, 0);
      if (v30)
      {
        v31 = v30;
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v58.data) = 67109120;
          HIDWORD(v58.data) = v31;
          _os_log_error_impl(&dword_19C486000, v32, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar16F has failed with error: %d", (uint8_t *)&v58, 8u);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v42, CFSTR("vImageConvert_PlanarFtoPlanar16F has failed with error: %d"), v31);
      }
      v58.data = (char *)v54 + 8 * a2;
      v58.height = 1;
      v58.width = a2;
      v58.rowBytes = v44;
      v46.data = &a5[a6[v43] * v37 + v26];
      v46.height = 1;
      v46.width = a2;
      v46.rowBytes = 2 * a2;
      v33 = vImageConvert_PlanarFtoPlanar16F(&v58, &v46, 0);
      a4 = v25;
      if (v33)
      {
        v34 = v33;
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v35 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v57 = v34;
          _os_log_error_impl(&dword_19C486000, v35, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar16F has failed with error: %d", buf, 8u);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v42, CFSTR("vImageConvert_PlanarFtoPlanar16F has failed with error: %d"), v34);
      }
      ++v16;
      a1 += v25;
    }
    while (v36 != v16);
  }
  free(memptr);
  free(v54);
}

void sub_19C88B6E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C88B968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C88BB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a8);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

void sub_19C88C1BC(_Unwind_Exception *a1, uint64_t a2, void *a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);

  CoreML::Specification::CoreMLModels::AudioFeaturePrint::~AudioFeaturePrint((CoreML::Specification::CoreMLModels::AudioFeaturePrint *)va);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C88C664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void sub_19C88C8D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C88CE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);

  _Unwind_Resume(a1);
}

void sub_19C88D104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C88D324(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C88D524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);

  _Unwind_Resume(a1);
}

void sub_19C88D6F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C88D7C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C88D808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C88D8C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C88D930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C88D99C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C88DA08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C88DA74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C88DAE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C88DEA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v8;

  _Unwind_Resume(a1);
}

void sub_19C88E308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C88E480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C88E820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a7);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

void sub_19C88E988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C88EB58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C88EC40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C88EF9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C88F068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C88F1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C88F290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C88F3F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C88F480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C88F4D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C88F5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C88F758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C88F8D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C88FADC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C88FD78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C88FE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C89000C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  uint64_t v12;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose(va, 8);
  std::unique_ptr<ElapsedTimeRecorder>::reset[abi:ne180100]((id **)(v12 + 48));

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12656(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

id *__Block_byref_object_dispose__12657(uint64_t a1)
{
  return std::unique_ptr<ElapsedTimeRecorder>::reset[abi:ne180100]((id **)(a1 + 48));
}

void sub_19C890148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C890260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C890600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  MEMORY[0x1A1AD6260](v34, 0x10A1C40E043F9A7);
  *(_QWORD *)v32 = v36;
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(*(_QWORD **)(v32 + 32));
  *(_QWORD *)v32 = v35;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v33);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  MEMORY[0x1A1AD6260](v32, 0x10A1C40FE531CD0);

  _Unwind_Resume(a1);
}

void sub_19C8916B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  uint64_t v22;

  MEMORY[0x1A1AD6260](v22, 0x10A1C406130BDD3);
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);

  _Unwind_Resume(a1);
}

void sub_19C891C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  v30 = v28;

  if (a24 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C891FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_19C892434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C892780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v24;

  if (a2)
  {

    Archiver::MMappedFile::~MMappedFile((Archiver::MMappedFile *)&a10);
    v24 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      (*(void (**)(void *))(*(_QWORD *)v24 + 16))(v24);
      +[MLModelErrorUtils IOErrorWithFormat:](MLModelErrorUtils, "IOErrorWithFormat:", CFSTR("Failed to hash the input file: %s"));
      objc_claimAutoreleasedReturnValue();
      __cxa_end_catch();
      JUMPOUT(0x19C892724);
    }
    +[MLModelErrorUtils IOErrorWithFormat:](MLModelErrorUtils, "IOErrorWithFormat:", CFSTR("Failed to hash the input file."));
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
    JUMPOUT(0x19C892728);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C892A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  uint64_t v21;
  void *v24;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v21);
  if (a15 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    v24 = __cxa_begin_catch(a1);
    if (v20)
    {
      (*(void (**)(void *))(*(_QWORD *)v24 + 16))(v24);
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("%s"));
      *v20 = (id)objc_claimAutoreleasedReturnValue();
    }
    __cxa_end_catch();
    JUMPOUT(0x19C892A10);
  }
  _Unwind_Resume(a1);
}

void sub_19C892E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  v35 = *(void **)(v33 - 136);
  if (v35)
  {
    *(_QWORD *)(v33 - 128) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v33 - 112);
  if (v36)
  {
    *(_QWORD *)(v33 - 104) = v36;
    operator delete(v36);
  }

  _Unwind_Resume(a1);
}

void sub_19C89322C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C893A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  void *v49;
  void *v50;

  if (__p)
    operator delete(__p);
  if (a30)
    operator delete(a30);
  if (a33)
    operator delete(a33);
  if (a36)
    operator delete(a36);
  if (a39)
    operator delete(a39);
  if (a42)
    operator delete(a42);
  if (a45)
    operator delete(a45);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        v10 = *a1 + 8 * (v4 >> 6);
        v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      v6 = v5 - 1;
    }
    v7 = v6 >> 6;
    if (v5 >= 0x41)
      v8 = v7;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

uint64_t *TensorAlgebraUtils::Ndim_to_Mdim(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *exception;

  if (a2 != result)
  {
    v4 = result;
    do
    {
      if (!*v4)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](exception, "Number of elements along each dimension needs to be positive.");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      ++v4;
    }
    while (v4 != a2);
  }
  v5 = a2 - result;
  v6 = (a4 - (uint64_t)a3) >> 3;
  v7 = v6 - v5;
  if (v6 <= v5)
  {
    if (v6 != 1)
    {
      v11 = 2;
      if (v6 > 2)
        v11 = (a4 - (uint64_t)a3) >> 3;
      v12 = v11 - 1;
      v13 = &a3[v6 - 1];
      v14 = &result[v5 - 1];
      do
      {
        v15 = *v14--;
        *v13-- = v15;
        --v12;
      }
      while (v12);
    }
    *a3 = 1;
    v16 = v5 + 1 - v6;
    if (v16)
    {
      if (v16 <= 1)
        v16 = 1;
      v17 = 1;
      do
      {
        v18 = *result++;
        v17 *= v18;
        *a3 = v17;
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    v8 = 0;
    v9 = (uint64_t)&result[v5 - v6];
    do
    {
      if (v8 >= v7)
        v10 = *(_QWORD *)(v9 + 8 * v8);
      else
        v10 = 1;
      a3[v8++] = v10;
    }
    while (v6 != v8);
  }
  return result;
}

void sub_19C893F6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t TensorAlgebraUtils::computeStrides(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *exception;

  v4 = (a2 - result) >> 3;
  if (v4 != (a4 - a3) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Mismatch between lengths of shape and strides.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)(a3 + 8 * (v4 - 1)) = 1;
  if (v4 != 1)
  {
    v5 = 1;
    do
    {
      v5 *= *(_QWORD *)(result - 8 + 8 * v4);
      *(_QWORD *)(a3 - 16 + 8 * v4--) = v5;
    }
    while (v4 != 1);
  }
  return result;
}

void sub_19C894010(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *TensorAlgebraUtils::ravel_multi_index(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *exception;

  v6 = (a4 - a3) >> 3;
  if (v6 != (a2 - (uint64_t)result) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Invalid multi_index.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *a6 = 0;
  if (a4 != a3)
  {
    v7 = 0;
    if (v6 <= 1)
      v6 = 1;
    do
    {
      v9 = *a5++;
      v8 = v9;
      v10 = *result++;
      v7 += v10 * v8;
      *a6 = v7;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_19C8940B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t TensorAlgebraUtils::unravel_index(unint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  void *exception;

  v5 = (a3 - a2) >> 3;
  if (v5 != (a5 - (uint64_t)a4) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Invalid multi_index.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  while (--v5)
  {
    a4[v5] = result % *(_QWORD *)(a2 + 8 * v5);
    result /= *(_QWORD *)(a2 + 8 * v5);
  }
  *a4 = result;
  return result;
}

void sub_19C894148(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void EspressoBrickUtils::EspressoShape_to_NDShape(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *exception;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  switch((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)
  {
    case 1:
      v6 = (int)objc_msgSend(v3, "width");
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a2, (char *)&v6, (uint64_t)&v7, 1uLL);
      break;
    case 2:
      v7 = (int)objc_msgSend(v3, "width", (int)objc_msgSend(v3, "height"));
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a2, (char *)&v6, (uint64_t)&v8, 2uLL);
      break;
    case 3:
      v7 = (int)objc_msgSend(v3, "height", (int)objc_msgSend(v3, "channels"));
      v8 = (int)objc_msgSend(v4, "width");
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a2, (char *)&v6, (uint64_t)&v9, 3uLL);
      break;
    case 4:
      v7 = (int)objc_msgSend(v3, "channels", (int)objc_msgSend(v3, "batch"));
      v8 = (int)objc_msgSend(v4, "height");
      v9 = (int)objc_msgSend(v4, "width");
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a2, (char *)&v6, (uint64_t)&v10, 4uLL);
      break;
    case 5:
      v7 = (int)objc_msgSend(v3, "batch", (int)objc_msgSend(v3, "sequence"));
      v8 = (int)objc_msgSend(v4, "channels");
      v9 = (int)objc_msgSend(v4, "height");
      v10 = (int)objc_msgSend(v4, "width");
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a2, (char *)&v6, (uint64_t)&v11, 5uLL);
      break;
    default:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](exception, "Invalid rank encountered while converting Espresso Shapes to N-dimensional shape.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }

}

void sub_19C89439C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_15:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_15;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_17:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *v12 = &v9[v17];
  return result;
}

void EspressoBrickUtils::NDShape_to_EspressoShape(uint64_t **a1, void *a2)
{
  id v3;
  void *__p;
  void *v5;

  v3 = a2;
  std::vector<unsigned long>::vector(&__p, 5uLL);
  TensorAlgebraUtils::Ndim_to_Mdim(*a1, a1[1], (uint64_t *)__p, (uint64_t)v5);
  objc_msgSend(v3, "setSequence:", *(unsigned int *)__p);
  objc_msgSend(v3, "setBatch:", *((unsigned int *)__p + 2));
  objc_msgSend(v3, "setChannels:", *((unsigned int *)__p + 4));
  objc_msgSend(v3, "setHeight:", *((unsigned int *)__p + 6));
  objc_msgSend(v3, "setWidth:", *((unsigned int *)__p + 8));
  objc_msgSend(v3, "setRank:", (unint64_t)((char *)a1[1] - (char *)*a1) >> 3);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }

}

void sub_19C89458C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void EspressoBrickUtils::NSShape_to_VecShape(void *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  void *v7;
  void *exception;
  id v9;

  v9 = a1;
  v3 = objc_msgSend(v9, "count");
  v4 = a2[1];
  if (v3 != (v4 - *a2) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Invalid Shapes encountered while converting objective C NSArray shape to std:vector shape");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v4 != *a2)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      objc_msgSend(v9, "objectAtIndexedSubscript:", v5);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)(*a2 + 8 * v5) = objc_msgSend(v7, "unsignedIntegerValue");

      v5 = v6++;
    }
    while (v5 < (uint64_t)(a2[1] - *a2) >> 3);
  }

}

void sub_19C894680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  __cxa_free_exception(v10);

  _Unwind_Resume(a1);
}

uint64_t TensorAlgebraUtils::broadcasted_shape(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  void *exception;

  v6 = a6 - a5;
  if (a6 != a5)
  {
    v7 = 0;
    v8 = (a2 - result) >> 3;
    v9 = (a4 - a3) >> 3;
    v10 = v6 >> 3;
    if ((unint64_t)(v6 >> 3) <= 1)
      v11 = 1;
    else
      v11 = v6 >> 3;
    v12 = (unint64_t *)(a5 + 8 * v10 - 8);
    v13 = (unint64_t *)(a3 + 8 * v9 - 8);
    v14 = (unint64_t *)(result + 8 * v8 - 8);
    do
    {
      if (v8 > v7 && v9 > v7)
      {
        v15 = *v14;
        v16 = *v13;
        if (*v13 != 1 && v15 != 1 && v15 != v16)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD5E28](exception, "Invalid shapes for broadcasting");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (v15 <= v16)
          v15 = *v13;
        *v12 = v15;
      }
      if (v8 > v7 && v9 <= v7)
        *v12 = *v14;
      if (v8 <= v7 && v9 > v7)
        *v12 = *v13;
      ++v7;
      --v12;
      --v13;
      --v14;
    }
    while (v11 != v7);
  }
  return result;
}

void sub_19C8947B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C894E8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8951C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void sub_19C895500(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C895620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C895ACC(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, void (**a6)(void), uint64_t a7, void *a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a16);

  a6[2]();
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19C895EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

id NSArrayFromFloatVector(const CoreML::Specification::FloatVector *a1)
{
  void *v2;
  double v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  void *v7;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((int *)a1 + 4));
  v4 = *((_QWORD *)a1 + 3);
  if (v4)
    v5 = (_DWORD *)(v4 + 8);
  else
    v5 = 0;
  if (v4)
    v6 = v4 + 8 + 4 * *((int *)a1 + 4);
  else
    v6 = 0;
  for (; v5 != (_DWORD *)v6; ++v5)
  {
    LODWORD(v3) = *v5;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v7);

  }
  return v2;
}

void sub_19C895FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C896070(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C896160(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8961C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C89634C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C896710(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C896984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8977D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19C897C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C8983C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13689(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13690(uint64_t a1)
{

}

uint64_t `anonymous namespace'::WriteMainMetadataNNv1(unsigned int a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  if (a2)
    v7 = 403;
  else
    v7 = a1;
  operator<<(a4, v7);
  if (a2)
  {
    v8 = *(_DWORD *)(a2 + 72);
    if (v8 == 1)
    {
      v12 = operator<<(a4, 100);
      operator<<(v12, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3));
      v13 = *(_QWORD *)(a2 + 104);
      if (*(_QWORD *)(a2 + 112) != v13)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          operator<<(a4, (uint64_t *)(v13 + v14));
          ++v15;
          v13 = *(_QWORD *)(a2 + 104);
          v14 += 24;
        }
        while (v15 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 112) - v13) >> 3));
      }
    }
    else if (!v8)
    {
      v9 = operator<<(a4, 101);
      operator<<(v9, (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
      v10 = *(_QWORD *)(a2 + 80);
      if (*(_QWORD *)(a2 + 88) != v10)
      {
        v11 = 0;
        do
        {
          operator<<(a4, *(_QWORD *)(v10 + 8 * v11++));
          v10 = *(_QWORD *)(a2 + 80);
        }
        while (v11 < (*(_QWORD *)(a2 + 88) - v10) >> 3);
      }
    }
    operator<<(a4, (uint64_t *)a2);
  }
  return operator<<<std::string>(a4, a3);
}

void CoreML::NNCompiler::Backend::MetadataUtils::WriteMetadataIos15(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10[3];
  void **v11;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  if (v2 != v3)
  {
    v6 = a1 + 80;
    do
    {
      v7 = std::map<std::string,std::string>::at(v6, v2);
      v8 = *(_DWORD *)a1;
      v9 = *(_QWORD *)(v7 + 272);
      memset(v10, 0, sizeof(v10));
      v11 = (void **)v10;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
      v2 += 3;
    }
    while (v2 != v3);
  }
}

void sub_19C8988AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t MLE5PortTraitOf()
{
  uint64_t is_tensor;
  NSObject *v1;
  uint64_t is_surface;
  NSObject *v3;
  uint64_t v5;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  is_tensor = e5rt_io_port_is_tensor();
  if ((_DWORD)is_tensor)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v8 = 1024;
      v9 = is_tensor;
      _os_log_error_impl(&dword_19C486000, v1, OS_LOG_TYPE_ERROR, "e5rt_io_port_is_tensor failed. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("e5rt_io_port_is_tensor failed. E5RT: %s (%d)"), e5rt_get_last_error_message(), is_tensor);
  }
  is_surface = e5rt_io_port_is_surface();
  if ((_DWORD)is_surface)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      last_error_message = v5;
      v8 = 1024;
      v9 = is_surface;
      _os_log_error_impl(&dword_19C486000, v3, OS_LOG_TYPE_ERROR, "e5rt_io_port_is_surface failed. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("e5rt_io_port_is_surface failed. E5RT: %s (%d)"), e5rt_get_last_error_message(), is_surface);
  }
  return 0;
}

void sub_19C898A98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5FeatureTraitOf(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  unsigned __int8 v4;
  __CVBuffer *v5;

  v1 = a1;
  objc_msgSend(v1, "multiArrayValue");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    v4 = MLE5FeatureTraitOfMultiArray(v2);
  }
  else
  {
    v5 = (__CVBuffer *)objc_msgSend(v1, "imageBufferValue");
    if (v5)
    {
      if (CVPixelBufferGetIOSurface(v5))
        v4 = 3;
      else
        v4 = 4;
    }
    else
    {
      v4 = 0;
    }
  }

  return v4;
}

void sub_19C898B34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t MLE5FeatureTraitOfMultiArray(void *a1)
{
  id v1;
  __CVBuffer *v2;
  uint64_t v3;

  v1 = a1;
  v2 = (__CVBuffer *)objc_msgSend(v1, "pixelBuffer");
  if (v2 && CVPixelBufferGetIOSurface(v2))
    v3 = 1;
  else
    v3 = 2;

  return v3;
}

void sub_19C898B98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *i;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v33;

  v4 = a1[1];
  v5 = a1[2];
  v6 = *((_QWORD *)a1 + 1);
  v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  v8 = *((_QWORD *)&portCompatibilityFunctionTable(void)::table + 1);
  if (*((_QWORD *)&portCompatibilityFunctionTable(void)::table + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&portCompatibilityFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((_QWORD *)&portCompatibilityFunctionTable(void)::table + 1))
        v2 = v7 % *((_QWORD *)&portCompatibilityFunctionTable(void)::table + 1);
    }
    else
    {
      v2 = v7 & (*((_QWORD *)&portCompatibilityFunctionTable(void)::table + 1) - 1);
    }
    v10 = *(void ***)(portCompatibilityFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((_QWORD *)&portCompatibilityFunctionTable(void)::table + 1))
                v12 %= *((_QWORD *)&portCompatibilityFunctionTable(void)::table + 1);
            }
            else
            {
              v12 &= *((_QWORD *)&portCompatibilityFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  v13 = (float)(unint64_t)(qword_1EE427410 + 1);
  if (!v8 || (float)(*(float *)&dword_1EE427418 * (float)v8) < v13)
  {
    v14 = 1;
    if (v8 >= 3)
      v14 = (v8 & (v8 - 1)) != 0;
    v15 = v14 | (2 * v8);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1EE427418);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)&portCompatibilityFunctionTable(void)::table + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v8)
    {
      v24 = vcvtps_u32_f32((float)(unint64_t)qword_1EE427410 / *(float *)&dword_1EE427418);
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)&portCompatibilityFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = (void *)portCompatibilityFunctionTable(void)::table;
          *(_QWORD *)&portCompatibilityFunctionTable(void)::table = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)&portCompatibilityFunctionTable(void)::table + 1) = prime;
          do
            *(_QWORD *)(portCompatibilityFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD **)qword_1EE427408;
          if (qword_1EE427408)
          {
            v22 = *(_QWORD *)(qword_1EE427408 + 8);
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(portCompatibilityFunctionTable(void)::table + 8 * v22) = &qword_1EE427408;
            for (i = *v21; i; v22 = v28)
            {
              v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(_QWORD *)&prime)
                  v28 %= *(_QWORD *)&prime;
              }
              else
              {
                v28 &= *(_QWORD *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(_QWORD *)(portCompatibilityFunctionTable(void)::table + 8 * v28))
                {
                  *(_QWORD *)(portCompatibilityFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                *v21 = (_QWORD *)*i;
                *i = **(_QWORD **)(portCompatibilityFunctionTable(void)::table + 8 * v28);
                **(_QWORD **)(portCompatibilityFunctionTable(void)::table + 8 * v28) = i;
                i = v21;
              }
              v28 = v22;
LABEL_57:
              v21 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        v33 = (void *)portCompatibilityFunctionTable(void)::table;
        *(_QWORD *)&portCompatibilityFunctionTable(void)::table = 0;
        if (v33)
          operator delete(v33);
        v8 = 0;
        *((_QWORD *)&portCompatibilityFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v29 = portCompatibilityFunctionTable(void)::table;
  v30 = *(_QWORD **)(portCompatibilityFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *v11 = *v30;
LABEL_74:
    *v30 = v11;
    goto LABEL_75;
  }
  *v11 = qword_1EE427408;
  qword_1EE427408 = (uint64_t)v11;
  *(_QWORD *)(v29 + 8 * v2) = &qword_1EE427408;
  if (*v11)
  {
    v31 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8)
        v31 %= v8;
    }
    else
    {
      v31 &= v8 - 1;
    }
    v30 = (_QWORD *)(portCompatibilityFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1EE427410;
  return v11;
}

void sub_19C899094(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MLE5PortCompatibilityMultiArrayAndTensor(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  v1 = a1;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v7);
  objc_msgSend(v1, "multiArrayValue");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "shape");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  MLE5MultiArrayShapeForTensor();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqualToArray:", v4);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v7);
  return v5;
}

void sub_19C899148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MLE5PortCompatibilityPixelBufferAndTensor(void *a1)
{
  __CVBuffer *v1;
  uint64_t v3;

  v1 = (__CVBuffer *)objc_msgSend(a1, "imageBufferValue");
  MLE5TensorDescriptorOf((e5rt_io_port *)&v3);
  MLE5GetShapeFromTensorDescriptor();
  CVPixelBufferGetWidth(v1);
  CVPixelBufferGetHeight(v1);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v3);
  return 0;
}

void sub_19C899230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MLE5TensorDescriptorOf(e5rt_io_port *a1)
{
  uint64_t result;
  uint64_t v3;
  NSObject *v4;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  result = e5rt_io_port_retain_tensor_desc();
  v3 = result;
  if ((_DWORD)result)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v7 = 1024;
      v8 = v3;
      _os_log_error_impl(&dword_19C486000, v4, OS_LOG_TYPE_ERROR, "Failed to get E5 tensor descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    result = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get E5 tensor descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), v3);
  }
  *(_QWORD *)a1 = 0;
  return result;
}

void sub_19C899360(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5GetShapeFromTensorDescriptor()
{
  uint64_t shape;
  NSObject *v1;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  shape = e5rt_tensor_desc_get_shape();
  if ((_DWORD)shape)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v5 = 1024;
      v6 = shape;
      _os_log_error_impl(&dword_19C486000, v1, OS_LOG_TYPE_ERROR, "Failed to get strides from tensor descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get strides from tensor descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), shape, 0);
  }
  return 0;
}

void sub_19C899480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5TypeOfBufferObject()
{
  uint64_t type;
  NSObject *v1;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  type = e5rt_buffer_object_get_type();
  if ((_DWORD)type)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v5 = 1024;
      v6 = type;
      _os_log_error_impl(&dword_19C486000, v1, OS_LOG_TYPE_ERROR, "Failed to get type of the buffer object. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get type of the buffer object. E5RT: %s (%d)"), e5rt_get_last_error_message(), type);
  }
  return 0;
}

void sub_19C899594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5IOSurfaceOfBufferObject()
{
  uint64_t iosurface;
  NSObject *v1;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  iosurface = e5rt_buffer_object_get_iosurface();
  if ((_DWORD)iosurface)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v5 = 1024;
      v6 = iosurface;
      _os_log_error_impl(&dword_19C486000, v1, OS_LOG_TYPE_ERROR, "Failed to get buffer object's IOSurface. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get buffer object's IOSurface. E5RT: %s (%d)"), e5rt_get_last_error_message(), iosurface);
  }
  return 0;
}

void sub_19C8996A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5DataPointerOfBufferObject()
{
  uint64_t data_ptr;
  NSObject *v1;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  data_ptr = e5rt_buffer_object_get_data_ptr();
  if ((_DWORD)data_ptr)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v5 = 1024;
      v6 = data_ptr;
      _os_log_error_impl(&dword_19C486000, v1, OS_LOG_TYPE_ERROR, "Failed to get buffer object's base pointer. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get buffer object's base pointer. E5RT: %s (%d)"), e5rt_get_last_error_message(), data_ptr);
  }
  return 0;
}

void sub_19C8997BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5GetStridesFromTensorDescriptor()
{
  uint64_t strides;
  NSObject *v1;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  strides = e5rt_tensor_desc_get_strides();
  if ((_DWORD)strides)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v5 = 1024;
      v6 = strides;
      _os_log_error_impl(&dword_19C486000, v1, OS_LOG_TYPE_ERROR, "Failed to get strides from tensor descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get strides from tensor descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), strides, 0);
  }
  return 0;
}

void sub_19C8998DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5GetRankFromTensorDescriptor()
{
  uint64_t rank;
  NSObject *v1;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  rank = e5rt_tensor_desc_get_rank();
  if ((_DWORD)rank)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v5 = 1024;
      v6 = rank;
      _os_log_error_impl(&dword_19C486000, v1, OS_LOG_TYPE_ERROR, "Failed to get rank from tensor descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get rank from tensor descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), rank);
  }
  return 0;
}

void sub_19C8999F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5GetWidthFromSurfaceDescriptor()
{
  uint64_t width;
  NSObject *v1;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  width = e5rt_surface_desc_get_width();
  if ((_DWORD)width)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v5 = 1024;
      v6 = width;
      _os_log_error_impl(&dword_19C486000, v1, OS_LOG_TYPE_ERROR, "Failed to get width from E5 surface descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get width from E5 surface descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), width);
  }
  return 0;
}

void sub_19C899B04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5GetHeightFromSurfaceDescriptor()
{
  uint64_t height;
  NSObject *v1;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  height = e5rt_surface_desc_get_height();
  if ((_DWORD)height)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v5 = 1024;
      v6 = height;
      _os_log_error_impl(&dword_19C486000, v1, OS_LOG_TYPE_ERROR, "Failed to get height from E5 surface descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get height from E5 surface descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), height);
  }
  return 0;
}

void sub_19C899C18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5GetSurfaceFormatFromSurfaceDescriptor()
{
  uint64_t format;
  NSObject *v1;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  format = e5rt_surface_desc_get_format();
  if ((_DWORD)format)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v5 = 1024;
      v6 = format;
      _os_log_error_impl(&dword_19C486000, v1, OS_LOG_TYPE_ERROR, "Failed to get the surface format from E5 surface descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get the surface format from E5 surface descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), format);
  }
  return 0;
}

void sub_19C899D2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL MLE5BindEmptyMemoryObjectToPort(uint64_t a1, void *a2, __CVBuffer **a3, _QWORD *a4)
{
  id v6;
  NSObject *v7;
  int v8;
  id v9;
  uint64_t WidthFromSurfaceDescriptor;
  uint64_t HeightFromSurfaceDescriptor;
  int SurfaceFormatFromSurfaceDescriptor;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t ShapeFromTensorDescriptor;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t StridesFromTensorDescriptor;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  __CVBuffer *v30;
  __CVBuffer *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  void *v37;
  _BOOL4 v38;
  uint64_t v39;
  __CVBuffer *v40;
  __CVBuffer *v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  NSObject *v48;
  void *v49;
  uint64_t v51;
  uint64_t last_error_message;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  _BYTE buf[12];
  __int16 v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  if (v6 && !a3)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19C486000, v7, OS_LOG_TYPE_ERROR, "temporarilyBoundPixelBuffer must be non-NULL if pixelBufferPool is used.", buf, 2u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("temporarilyBoundPixelBuffer must be non-NULL if pixelBufferPool is used."));
  }
  v8 = MLE5PortTraitOf();
  switch(v8)
  {
    case 0:
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_19C486000, v14, OS_LOG_TYPE_ERROR, "Unable to bind a memory object to the underlying buffer due to the unknown port type. It is a broken or unsupported model.", buf, 2u);
      }

      if (a4)
      {
        v15 = (void *)MEMORY[0x1E0CB35C8];
        v60 = *MEMORY[0x1E0CB2D50];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unable to bind a memory object to the underlying buffer due to the unknown port type. It is a broken or unsupported model."));
        v9 = (id)objc_claimAutoreleasedReturnValue();
        v61 = v9;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 0, v16);
        *a4 = (id)objc_claimAutoreleasedReturnValue();

        v17 = 0;
LABEL_79:

        goto LABEL_80;
      }
      v17 = 0;
      goto LABEL_80;
    case 1:
      v9 = v6;
      MLE5TensorDescriptorOf((e5rt_io_port *)&v58);
      v57 = 0;
      v18 = v58;
      if (!v6)
        goto LABEL_68;
      *(_QWORD *)buf = 0;
      ShapeFromTensorDescriptor = MLE5GetShapeFromTensorDescriptor();
      if (*(_QWORD *)buf)
      {
        v20 = (unint64_t *)ShapeFromTensorDescriptor;
        v21 = ShapeFromTensorDescriptor + 8 * *(_QWORD *)buf;
        v55 = *(_QWORD *)(v21 - 8);
        if (*(_QWORD *)buf != 1 && ShapeFromTensorDescriptor != v21 - 8)
        {
          v22 = 8 * *(_QWORD *)buf - 8;
          v23 = 1;
          do
          {
            v23 = CoreML::SafeMultiplies<unsigned long>::operator()(v23, *v20++);
            v22 -= 8;
          }
          while (v22);
          goto LABEL_30;
        }
      }
      else
      {
        v55 = 1;
      }
      v23 = 1;
LABEL_30:
      *(_QWORD *)buf = 0;
      StridesFromTensorDescriptor = MLE5GetStridesFromTensorDescriptor();
      v25 = (unint64_t *)StridesFromTensorDescriptor;
      if (*(_QWORD *)buf >= 2uLL
        && (*(_QWORD *)(StridesFromTensorDescriptor + 8 * *(_QWORD *)buf - 16) & 0x3FLL) != 0)
      {
        v26 = (unint64_t *)MLE5GetShapeFromTensorDescriptor();
        v27 = CoreML::SafeMultiplies<unsigned long>::operator()(*v25, *v26);
        {
          v28 = 0;
          v29 = v27 >> 1;
        }
        {
          v28 = 0;
          v29 = v27 >> 2;
        }
        else
        {
          v28 = 0;
          v29 = v55;
          if (v38)
            v29 = v27;
        }
        v55 = v29;
        v23 = 1;
      }
      else
      {
        v28 = 1;
      }
      v39 = 1278226488;
      {
        v39 = 1278226536;
      }
      {
        v39 = 1278226534;
      }
      {
        goto LABEL_68;
      }
      v40 = (__CVBuffer *)objc_msgSend(v9, "createPixelBufferWithSize:pixelFormatType:error:", v39, 0, (double)v55, (double)v23);
      v41 = v40;
      if (v40)
      {
        if (*(_QWORD *)buf > 1uLL)
          v42 = v28;
        else
          v42 = 0;
        if (v42 == 1 && (v43 = v25[*(_QWORD *)buf - 2], v43 != CVPixelBufferGetBytesPerRow(v40)))
        {
          CVPixelBufferRelease(v41);
        }
        else
        {
          CVPixelBufferGetIOSurface(v41);
          MLE5NewBufferObjectUsing((__IOSurface *)&v59);
          v44 = v59;
          v59 = 0;
          std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v57, v44);
          std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v59, 0);
          *a3 = v41;
          if (v57)
          {
LABEL_73:
            v47 = e5rt_io_port_bind_buffer_object();
            v17 = (_DWORD)v47 == 0;
            if ((_DWORD)v47)
            {
              +[MLLogging coreChannel](MLLogging, "coreChannel");
              v48 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
              {
                last_error_message = e5rt_get_last_error_message();
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = last_error_message;
                v63 = 1024;
                v64 = v47;
                _os_log_error_impl(&dword_19C486000, v48, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
              }

              if (a4)
              {
                +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("E5RT: %s (%d)"), e5rt_get_last_error_message(), v47);
                v49 = (void *)objc_claimAutoreleasedReturnValue();
                +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 1, v49, CFSTR("Unable to allocate and bind the buffer object. It can be a system level error such as out-of-memory errors, or the model is broken or unsupported."));
                *a4 = (id)objc_claimAutoreleasedReturnValue();

              }
            }
            std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v57, 0);
            std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v58);
            goto LABEL_79;
          }
        }
      }
LABEL_68:
      v59 = 0;
      v45 = e5rt_tensor_desc_alloc_buffer_object();
      if ((_DWORD)v45)
      {
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v46 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          v53 = e5rt_get_last_error_message();
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v53;
          v63 = 1024;
          v64 = v45;
          _os_log_error_impl(&dword_19C486000, v46, OS_LOG_TYPE_ERROR, "Failed to allocate E5 buffer object. E5RT: %s (%d)", buf, 0x12u);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to allocate E5 buffer object. E5RT: %s (%d)"), e5rt_get_last_error_message(), v45);
      }
      v56 = 0;
      std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v57, v59);
      std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v56, 0);
      goto LABEL_73;
    case 2:
      v9 = v6;
      MLE5SurfaceDescriptorOf((e5rt_io_port *)&v58);
      if (v6)
      {
        WidthFromSurfaceDescriptor = MLE5GetWidthFromSurfaceDescriptor();
        HeightFromSurfaceDescriptor = MLE5GetHeightFromSurfaceDescriptor();
        SurfaceFormatFromSurfaceDescriptor = MLE5GetSurfaceFormatFromSurfaceDescriptor();
        v13 = 1278226488;
        switch(SurfaceFormatFromSurfaceDescriptor)
        {
          case 1:
            goto LABEL_36;
          case 2:
            v13 = 1111970369;
LABEL_36:
            v30 = (__CVBuffer *)objc_msgSend(v9, "createPixelBufferWithSize:pixelFormatType:error:", v13, 0, (double)(unint64_t)WidthFromSurfaceDescriptor, (double)(unint64_t)HeightFromSurfaceDescriptor);
            v31 = v30;
            v57 = 0;
            if (v30)
            {
              CVPixelBufferGetIOSurface(v30);
              MLE5NewSurfaceObjectUsing((__IOSurface *)buf);
              v32 = *(_QWORD *)buf;
              *(_QWORD *)buf = 0;
              std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100](&v57, v32);
              std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100]((uint64_t *)buf, 0);
              *a3 = v31;
LABEL_43:
              v35 = e5rt_io_port_bind_surface_object();
              v17 = (_DWORD)v35 == 0;
              if ((_DWORD)v35)
              {
                +[MLLogging coreChannel](MLLogging, "coreChannel");
                v36 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
                {
                  v51 = e5rt_get_last_error_message();
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = v51;
                  v63 = 1024;
                  v64 = v35;
                  _os_log_error_impl(&dword_19C486000, v36, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
                }

                if (a4)
                {
                  +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("E5RT: %s (%d)"), e5rt_get_last_error_message(), v35);
                  v37 = (void *)objc_claimAutoreleasedReturnValue();
                  +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 1, v37, CFSTR("Unable to allocate and bind the surface object. It can be a system level error such as out-of-memory errors, or the model is broken or unsupported."));
                  *a4 = (id)objc_claimAutoreleasedReturnValue();

                }
              }
              std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100](&v57, 0);
              std::unique_ptr<e5rt_surface_desc,MLE5ObjectDeleter<e5rt_surface_desc>>::reset[abi:ne180100](&v58);
              goto LABEL_79;
            }
LABEL_38:
            v59 = 0;
            v33 = e5rt_surface_object_alloc();
            if ((_DWORD)v33)
            {
              +[MLLogging coreChannel](MLLogging, "coreChannel");
              v34 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
              {
                v54 = e5rt_get_last_error_message();
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v54;
                v63 = 1024;
                v64 = v33;
                _os_log_error_impl(&dword_19C486000, v34, OS_LOG_TYPE_ERROR, "Failed to create E5 surface object from surface descriptor. E5RT: %s (%d)", buf, 0x12u);
              }

              objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to create E5 surface object from surface descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), v33);
            }
            v56 = 0;
            std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100](&v57, v59);
            std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100](&v56, 0);
            goto LABEL_43;
          case 7:
            v13 = 1278226536;
            goto LABEL_36;
        }
      }
      v57 = 0;
      goto LABEL_38;
  }
  v17 = 1;
LABEL_80:

  return v17;
}

void sub_19C89A5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  uint64_t v9;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va1);

  _Unwind_Resume(a1);
}

BOOL `anonymous namespace'::tensorUsesSameMemoryLayoutAsPixelFormatType(uint64_t a1, int a2)
{
  unsigned __int8 v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t *i;
  unint64_t v7;
  int v9;
  uint64_t v10;
  unsigned int v11;

  MLE5PixelBufferAndTensorStrategyKey::MLE5PixelBufferAndTensorStrategyKey((uint64_t)&v9, a2);
  if ((v2 & 1) == 0
  {
    *(_OWORD *)&qword_1ED001190 = 0u;
    dword_1ED0011A0 = 1065353216;
  }
  {
    v3 = v10 ^ v9 ^ v11;
                                        + 8));
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = v10 ^ v9 ^ v11;
    }
    else
    {
               - 1);
    }
    if (i)
    {
      for (i = (uint64_t *)*i; i; i = (uint64_t *)*i)
      {
        v7 = i[1];
        if (v3 == v7)
        {
          if (*((_DWORD *)i + 8) == v11 && i[3] == v10 && *((_DWORD *)i + 4) == v9)
            return i != 0;
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
                       + 1))
          }
          else
          {
                - 1;
          }
          if (v7 != v5)
            goto LABEL_23;
        }
      }
    }
  }
  else
  {
LABEL_23:
    i = 0;
  }
  return i != 0;
}

uint64_t MLE5NewBufferObjectUsing(__IOSurface *a1)
{
  uint64_t result;
  uint64_t v3;
  NSObject *v4;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  result = e5rt_buffer_object_create_from_iosurface();
  v3 = result;
  if ((_DWORD)result)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v7 = 1024;
      v8 = v3;
      _os_log_error_impl(&dword_19C486000, v4, OS_LOG_TYPE_ERROR, "Failed to create E5 buffer object from IOSurface. E5RT: %s (%d)", buf, 0x12u);
    }

    result = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to create E5 buffer object from IOSurface. E5RT: %s (%d)"), e5rt_get_last_error_message(), v3);
  }
  *(_QWORD *)a1 = 0;
  return result;
}

void sub_19C89A994(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5SurfaceDescriptorOf(e5rt_io_port *a1)
{
  uint64_t result;
  uint64_t v3;
  NSObject *v4;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  result = e5rt_io_port_retain_surface_desc();
  v3 = result;
  if ((_DWORD)result)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v7 = 1024;
      v8 = v3;
      _os_log_error_impl(&dword_19C486000, v4, OS_LOG_TYPE_ERROR, "Failed to get E5 surface descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    result = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get E5 surface descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), v3);
  }
  *(_QWORD *)a1 = 0;
  return result;
}

void sub_19C89AAC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5NewSurfaceObjectUsing(__IOSurface *a1)
{
  uint64_t result;
  uint64_t v3;
  NSObject *v4;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  result = e5rt_surface_object_create_from_iosurface();
  v3 = result;
  if ((_DWORD)result)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v7 = 1024;
      v8 = v3;
      _os_log_error_impl(&dword_19C486000, v4, OS_LOG_TYPE_ERROR, "Failed to create E5 surface object from IOSurface. E5RT: %s (%d)", buf, 0x12u);
    }

    result = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to create E5 surface object from IOSurface. E5RT: %s (%d)"), e5rt_get_last_error_message(), v3);
  }
  *(_QWORD *)a1 = 0;
  return result;
}

void sub_19C89ABE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_146pixelBufferSurfaceAndTensorDirectBindableTableEv_block_invoke()
{
  int v0;
  uint64_t v1;
  int v2;

  v2 = 1278226536;
  v1 = 0;
  v0 = 28;
  std::__hash_table<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,std::allocator<MLE5PixelBufferAndTensorStrategyKey>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey>(&v0, (uint64_t)&v0);
  v2 = 1278226534;
  v1 = 0;
  v0 = 52;
  std::__hash_table<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,std::allocator<MLE5PixelBufferAndTensorStrategyKey>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey>(&v0, (uint64_t)&v0);
  v2 = 1278226488;
  v1 = 0;
  v0 = 0;
  std::__hash_table<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,std::allocator<MLE5PixelBufferAndTensorStrategyKey>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey>(&v0, (uint64_t)&v0);
}

void std::__hash_table<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,std::allocator<MLE5PixelBufferAndTensorStrategyKey>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey>(int *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD **v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *j;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v33;

  v4 = a1[4];
  v5 = *((_QWORD *)a1 + 1);
  v6 = *a1;
  v7 = v5 ^ *a1 ^ v4;
  {
                                        + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = v5 ^ v6 ^ v4;
    }
    else
    {
               - 1);
    }
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 8) == v4 && i[3] == v5 && *((_DWORD *)i + 4) == v6)
            return;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
                        + 1))
          }
          else
          {
                 - 1;
          }
          if (v12 != v2)
            break;
        }
      }
    }
  }
  v13 = operator new(0x28uLL);
  *v13 = 0;
  v13[1] = v7;
  *((_OWORD *)v13 + 1) = *(_OWORD *)a2;
  v13[4] = *(_QWORD *)(a2 + 16);
  v14 = (float)(unint64_t)(qword_1ED001198 + 1);
  if (!v8 || (float)(*(float *)&dword_1ED0011A0 * (float)v8) < v14)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v14 / *(float *)&dword_1ED0011A0);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v8)
    {
      v25 = vcvtps_u32_f32((float)(unint64_t)qword_1ED001198 / *(float *)&dword_1ED0011A0);
      if (v8 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v8)
      {
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v19 = operator new(8 * *(_QWORD *)&prime);
          if (v20)
            operator delete(v20);
          v21 = 0;
          do
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD **)qword_1ED001190;
          if (qword_1ED001190)
          {
            v23 = *(_QWORD *)(qword_1ED001190 + 8);
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            for (j = *v22; j; v23 = v29)
            {
              v29 = j[1];
              if (v24.u32[0] > 1uLL)
              {
                if (v29 >= *(_QWORD *)&prime)
                  v29 %= *(_QWORD *)&prime;
              }
              else
              {
                v29 &= *(_QWORD *)&prime - 1;
              }
              if (v29 != v23)
              {
                                + 8 * v29))
                {
                            + 8 * v29) = v22;
                  goto LABEL_57;
                }
                *v22 = (_QWORD *)*j;
                                 + 8 * v29);
                            + 8 * v29) = j;
                j = v22;
              }
              v29 = v23;
LABEL_57:
              v22 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        if (v33)
          operator delete(v33);
        v8 = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  if (v31)
  {
    *v13 = *v31;
LABEL_74:
    *v31 = v13;
    goto LABEL_75;
  }
  *v13 = qword_1ED001190;
  qword_1ED001190 = (uint64_t)v13;
  *(_QWORD *)(v30 + 8 * v2) = &qword_1ED001190;
  if (*v13)
  {
    v32 = *(_QWORD *)(*v13 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v32 >= v8)
        v32 %= v8;
    }
    else
    {
      v32 &= v8 - 1;
    }
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1ED001198;
}

void sub_19C89B0A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MLE5CompareTensorAndPixelBufferMemoryLayout(uint64_t a1, __CVBuffer *a2, _QWORD *a3)
{
  uint64_t *ShapeFromTensorDescriptor;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v14;
  void *v15;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  ShapeFromTensorDescriptor = (uint64_t *)MLE5GetShapeFromTensorDescriptor();
  CVPixelBufferGetWidth(a2);
  CVPixelBufferGetHeight(a2);
  if (a3)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      MLE5ArrayOfNumbers<unsigned long>(ShapeFromTensorDescriptor, 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "componentsJoinedByString:", CFSTR(" x "));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v17 = v15;
      _os_log_error_impl(&dword_19C486000, v6, OS_LOG_TYPE_ERROR, "ML Program's shape is %@, which doesn't have enough dimensions to map width and height.", buf, 0xCu);

    }
    v7 = (void *)MEMORY[0x1E0CB35C8];
    v18 = *MEMORY[0x1E0CB2D50];
    v8 = (void *)MEMORY[0x1E0CB3940];
    MLE5ArrayOfNumbers<unsigned long>(ShapeFromTensorDescriptor, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "componentsJoinedByString:", CFSTR(" x "));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringWithFormat:", CFSTR("ML Program's shape is %@, which doesn't have enough dimensions to map width and height."), v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v11;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 1, v12);
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
  return 0;
}

void sub_19C89B5A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id MLE5ArrayOfNumbers<unsigned long>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *i;
  uint64_t v5;
  void *v6;

  v2 = a2;
  for (i = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", a2); v2; --v2)
  {
    v5 = *a1++;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(i, "addObject:", v6);

  }
  return i;
}

void sub_19C89B6E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t MLE5CompareTensorAndMultiArrayMemoryLayout(uint64_t a1, void *a2, _QWORD *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  objc_msgSend(v4, "shape");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  MLE5MultiArrayShapeForTensor();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "isEqualToArray:", v6) & 1) != 0)
  {
    v7 = MLE5MultiArrayDataTypeForTensor();
    if (v7 == objc_msgSend(v4, "dataType"))
    {
      objc_msgSend(v4, "strides");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      MLE5MultiArrayStridesForTensor();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v8, "isEqualToArray:", v9))
        LOBYTE(a3) = 1;
      else
        LOBYTE(a3) = 2;

    }
    else
    {
      LOBYTE(a3) = 2;
    }
  }
  else
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v5, "componentsJoinedByString:", CFSTR(" x "));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "componentsJoinedByString:", CFSTR(" x "));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v23 = v18;
      v24 = 2112;
      v25 = v19;
      _os_log_error_impl(&dword_19C486000, v10, OS_LOG_TYPE_ERROR, "MultiArray shape %@ doesn't match ML Program's expected shape %@.", buf, 0x16u);

    }
    if (a3)
    {
      v11 = (void *)MEMORY[0x1E0CB35C8];
      v20 = *MEMORY[0x1E0CB2D50];
      v12 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v5, "componentsJoinedByString:", CFSTR(" x "));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "componentsJoinedByString:", CFSTR(" x "));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "stringWithFormat:", CFSTR("MultiArray shape %@ doesn't match ML Program's expected shape %@."), v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v15;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 1, v16);
      *a3 = (id)objc_claimAutoreleasedReturnValue();

      LOBYTE(a3) = 0;
    }
  }

  return a3;
}

void sub_19C89B988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

_QWORD *MLE5CopyPixelBufferOwningSurfaceOfPort(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t iosurface;
  NSObject *v11;
  __IOSurface *v12;
  uint64_t format;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  const __CFDictionary *v18;
  void *v19;
  uint64_t width;
  NSObject *v21;
  uint64_t height;
  NSObject *v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t last_error_message;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __IOSurface *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;
  const __CFDictionary *v48;
  uint64_t v49;
  void *v50;
  _BYTE pixelBufferOut[12];
  __int16 v52;
  int v53;
  uint8_t buf[8];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  MLE5SurfaceDescriptorOf((e5rt_io_port *)&v41);
  if (v41)
  {
    *(_QWORD *)buf = 0;
    v3 = e5rt_io_port_retain_surface_object();
    v4 = v3;
    if ((_DWORD)v3)
    {
      if ((_DWORD)v3 == 2)
      {
        v40 = 0;
        goto LABEL_23;
      }
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        last_error_message = e5rt_get_last_error_message();
        *(_DWORD *)pixelBufferOut = 136315394;
        *(_QWORD *)&pixelBufferOut[4] = last_error_message;
        v52 = 1024;
        v53 = v4;
        _os_log_error_impl(&dword_19C486000, v9, OS_LOG_TYPE_ERROR, "Failed to retain surface object associated with the port E5RT: %s (%d)", pixelBufferOut, 0x12u);
      }

      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to retain surface object associated with the port E5RT: %s (%d)"), e5rt_get_last_error_message(), v4);
    }
    v40 = *(__IOSurface **)buf;
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)buf = 0;
      iosurface = e5rt_surface_object_get_iosurface();
      if ((_DWORD)iosurface)
      {
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v36 = e5rt_get_last_error_message();
          *(_DWORD *)pixelBufferOut = 136315394;
          *(_QWORD *)&pixelBufferOut[4] = v36;
          v52 = 1024;
          v53 = iosurface;
          _os_log_error_impl(&dword_19C486000, v11, OS_LOG_TYPE_ERROR, "Failed to get surface object's IOSurface. E5RT: %s (%d)", pixelBufferOut, 0x12u);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get surface object's IOSurface. E5RT: %s (%d)"), e5rt_get_last_error_message(), iosurface);
      }
      v12 = *(__IOSurface **)buf;
      *(_DWORD *)buf = 0;
      format = e5rt_surface_desc_get_format();
      if ((_DWORD)format)
      {
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          v37 = e5rt_get_last_error_message();
          *(_DWORD *)pixelBufferOut = 136315394;
          *(_QWORD *)&pixelBufferOut[4] = v37;
          v52 = 1024;
          v53 = format;
          _os_log_error_impl(&dword_19C486000, v14, OS_LOG_TYPE_ERROR, "Failed to get format from E5 surface descriptor. E5RT: %s (%d)", pixelBufferOut, 0x12u);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get format from E5 surface descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), format);
      }
      if ((*(_DWORD *)buf - 1) > 2)
        v15 = 0;
      else
        v15 = *(unsigned int *)&a800largb[4 * (*(_DWORD *)buf - 1)];
      *(_QWORD *)buf = 0;
      width = e5rt_surface_desc_get_width();
      if ((_DWORD)width)
      {
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          v38 = e5rt_get_last_error_message();
          *(_DWORD *)pixelBufferOut = 136315394;
          *(_QWORD *)&pixelBufferOut[4] = v38;
          v52 = 1024;
          v53 = width;
          _os_log_error_impl(&dword_19C486000, v21, OS_LOG_TYPE_ERROR, "Failed to get width from E5 surface descriptor. E5RT: %s (%d)", pixelBufferOut, 0x12u);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get width from E5 surface descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), width);
      }
      v42 = 0;
      height = e5rt_surface_desc_get_height();
      if ((_DWORD)height)
      {
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          v39 = e5rt_get_last_error_message();
          *(_DWORD *)pixelBufferOut = 136315394;
          *(_QWORD *)&pixelBufferOut[4] = v39;
          v52 = 1024;
          v53 = height;
          _os_log_error_impl(&dword_19C486000, v23, OS_LOG_TYPE_ERROR, "Failed to get width from E5 surface descriptor. E5RT: %s (%d)", pixelBufferOut, 0x12u);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get width from E5 surface descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), height);
      }
      v24 = *(_QWORD *)buf;
      v25 = v42;
      v45[0] = *MEMORY[0x1E0CA9040];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v15);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v46[0] = v26;
      v45[1] = *MEMORY[0x1E0CA90E0];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)v24);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v46[1] = v27;
      v45[2] = *MEMORY[0x1E0CA8FD8];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)v25);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v46[2] = v28;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v46, v45, 3);
      v18 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

      *(_QWORD *)pixelBufferOut = 0;
      v29 = CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12, v18, (CVPixelBufferRef *)pixelBufferOut);
      if (!(_DWORD)v29)
      {
        a2 = *(_QWORD **)pixelBufferOut;
        goto LABEL_43;
      }
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v29;
        _os_log_error_impl(&dword_19C486000, v30, OS_LOG_TYPE_ERROR, "Failed to create a pixel buffer from the ML Program. (CoreVideo error code: %d.)", buf, 8u);
      }

      if (!a2)
        goto LABEL_43;
      v31 = (void *)MEMORY[0x1E0CB35C8];
      v43 = *MEMORY[0x1E0CB2D50];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Failed to create a pixel buffer from the ML Program. (CoreVideo error code: %d.)"), v29);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = v32;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v44, &v43, 1);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 0, v33);
      *a2 = (id)objc_claimAutoreleasedReturnValue();

LABEL_41:
      a2 = 0;
LABEL_43:

LABEL_44:
      std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100]((uint64_t *)&v40, 0);
      goto LABEL_45;
    }
LABEL_23:
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)pixelBufferOut = 0;
      _os_log_error_impl(&dword_19C486000, v16, OS_LOG_TYPE_ERROR, "This ML Program is expected to have an image feature, but doesn't have the underlying buffer for that.", pixelBufferOut, 2u);
    }

    if (!a2)
      goto LABEL_44;
    v17 = (void *)MEMORY[0x1E0CB35C8];
    v47 = *MEMORY[0x1E0CB2D50];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("This ML Program is expected to have an image feature, but doesn't have the underlying buffer for that."));
    v18 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    v48 = v18;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 0, v19);
    *a2 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_41;
  }
  +[MLLogging coreChannel](MLLogging, "coreChannel");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)pixelBufferOut = 0;
    _os_log_error_impl(&dword_19C486000, v5, OS_LOG_TYPE_ERROR, "This ML Program is expected to have an image feature, but doesn't have one.", pixelBufferOut, 2u);
  }

  if (a2)
  {
    v6 = (void *)MEMORY[0x1E0CB35C8];
    v49 = *MEMORY[0x1E0CB2D50];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("This ML Program is expected to have an image feature, but doesn't have one."));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = v7;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v50, &v49, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 0, v8);
    *a2 = (id)objc_claimAutoreleasedReturnValue();

    a2 = 0;
  }
LABEL_45:
  std::unique_ptr<e5rt_surface_desc,MLE5ObjectDeleter<e5rt_surface_desc>>::reset[abi:ne180100](&v41);
  return a2;
}

void sub_19C89C1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);

  std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::unique_ptr<e5rt_surface_desc,MLE5ObjectDeleter<e5rt_surface_desc>>::reset[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t MLE5TensorDataTypeOf(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  NSObject *v4;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  result = e5rt_tensor_desc_retain_dtype();
  v3 = result;
  if ((_DWORD)result)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v7 = 1024;
      v8 = v3;
      _os_log_error_impl(&dword_19C486000, v4, OS_LOG_TYPE_ERROR, "Failed to get data type of the tensor. E5RT: %s (%d)", buf, 0x12u);
    }

    result = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to get data type of the tensor. E5RT: %s (%d)"), e5rt_get_last_error_message(), v3);
  }
  *a1 = 0;
  return result;
}

void sub_19C89C408(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5BufferObjectBoundTo(e5rt_io_port *a1)
{
  uint64_t result;
  uint64_t v3;
  NSObject *v4;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  result = e5rt_io_port_retain_buffer_object();
  v3 = result;
  if ((_DWORD)result && (_DWORD)result != 2)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v7 = 1024;
      v8 = v3;
      _os_log_error_impl(&dword_19C486000, v4, OS_LOG_TYPE_ERROR, "Failed to retain buffer object associated with the port E5RT: %s (%d)", buf, 0x12u);
    }

    result = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Failed to retain buffer object associated with the port E5RT: %s (%d)"), e5rt_get_last_error_message(), v3);
  }
  *(_QWORD *)a1 = 0;
  return result;
}

void sub_19C89C544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C89C660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C89C780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C89D8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)MLE5OutputPortBinder;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19C89DD8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C89DE9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C89E210(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C89E564(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C89E934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C89EABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C89ECBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19C89EEB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C89F240(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C89F928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8A0A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  _Block_object_dispose(&a53, 8);
  _Block_object_dispose((const void *)(v53 - 224), 8);
  _Block_object_dispose((const void *)(v53 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14413(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14414(uint64_t a1)
{

}

void sub_19C8A12EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8A13FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  void *v12;

  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19C8A1678(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C8A1B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

void sub_19C8A2098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_19C8A2394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{

  _Unwind_Resume(a1);
}

void sub_19C8A2534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  uint64_t v11;

  MEMORY[0x1A1AD6260](v11, 0x10A1C40FB0D5B10);

  _Unwind_Resume(a1);
}

void sub_19C8A27EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a26);

  _Unwind_Resume(a1);
}

void sub_19C8A2D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char *a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(a29);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a26);

  _Unwind_Resume(a1);
}

void sub_19C8A2E48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8A33F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v7;

  _Unwind_Resume(a1);
}

void sub_19C8A3B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;

  _Unwind_Resume(a1);
}

void sub_19C8A3FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33)
{
  void *v33;
  void *v34;

  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_19C8A40F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8A42FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, _QWORD *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a17);
  _Unwind_Resume(a1);
}

void sub_19C8A437C()
{
  JUMPOUT(0x19C8A4364);
}

void sub_19C8A4440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C8A46EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C8A5174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, _Unwind_Exception *exception_object, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_19C8A54B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8A5650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8A5910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C8A5A90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8A5C20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8A5D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::addMLProgramToCompiledModel(void *a1, void *a2, char a3, void *a4, _QWORD *a5)
{
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void **v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  _BOOL4 v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  char v31;
  char v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  __CFString *v39;
  uint64_t v40;
  __CFString *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  char v45;
  id v46;
  void *v47;
  void *v50;
  void *v51;
  char v52;
  id v53;
  id v54;
  void *v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  void *__p[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  id v64[2];
  void *v65[2];
  char v66;
  _QWORD v67[3];

  v67[1] = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v53 = a2;
  v54 = a4;
  v56 = v8;
  objc_msgSend(v8, "URLByAppendingPathComponent:", CFSTR("model.espresso.net"));
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v55, "path");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v8) = objc_msgSend(v9, "fileExistsAtPath:", v10);

  if ((_DWORD)v8)
  {
    objc_msgSend(v56, "path");
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v11, "UTF8String"));
    CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::UpgradeNeuralNetworkToMIL((uint64_t)v65, (char *)__p);
    if (SBYTE7(v61) < 0)
      operator delete(__p[0]);

    v12 = (void *)MEMORY[0x1E0C99E98];
    if (v66 >= 0)
      v13 = v65;
    else
      v13 = (void **)v65[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "fileURLWithPath:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v67[0] = v15;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v67, 1);
    v16 = (id)objc_claimAutoreleasedReturnValue();
    v17 = v53;
    objc_msgSend(v17, "outputFiles");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v18 == 0;

    if (v19)
    {
      objc_msgSend(v17, "setOutputFiles:", v16);
    }
    else
    {
      objc_msgSend(v17, "outputFiles");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "arrayByAddingObjectsFromArray:", v16);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "setOutputFiles:", v21);

    }
    objc_msgSend(v54, "setMilUpgradeStatus:", &unk_1E3DA23E0);
    if (v66 < 0)
      operator delete(v65[0]);
    v45 = 1;
  }
  else
  {
    objc_msgSend(v56, "URLByAppendingPathComponent:", CFSTR("model0"));
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v50, "path");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v22, "fileExistsAtPath:", v23);

    if (v24)
    {
      v59 = v56;
      v57 = v53;
      v58 = v54;
      v51 = (void *)objc_opt_new();
      v25 = 0;
      v52 = 0;
      do
      {
        v26 = (void *)MEMORY[0x1A1AD6ED8]();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("model%d"), v25);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v59, "URLByAppendingPathComponent:", v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "path");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend(v29, "fileExistsAtPath:", v30);

        if ((v31 & 1) != 0)
        {
          v64[0] = 0;
          v33 = v64[0];
          v34 = v33;
          if ((v32 & 1) == 0)
          {
            if (v33)
            {
              objc_msgSend(v33, "localizedDescription");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v51, "setObject:forKeyedSubscript:", v35, v27);

            }
            v52 = 1;
          }

          v25 = (v25 + 1);
        }

        objc_autoreleasePoolPop(v26);
      }
      while ((v31 & 1) != 0);
      if ((v52 & 1) != 0)
      {
        if (a5 && objc_msgSend(v51, "count"))
        {
          v62 = 0u;
          v63 = 0u;
          *(_OWORD *)__p = 0u;
          v61 = 0u;
          v36 = v51;
          v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", __p, v65, 16);
          if (v37)
          {
            v38 = *(_QWORD *)v61;
            v39 = CFSTR("Found errors while adding ML Programs to sub-models in the pipeline:");
            do
            {
              v40 = 0;
              v41 = v39;
              do
              {
                if (*(_QWORD *)v61 != v38)
                  objc_enumerationMutation(v36);
                v42 = *((_QWORD *)__p[1] + v40);
                v43 = (void *)MEMORY[0x1E0CB3940];
                objc_msgSend(v36, "objectForKeyedSubscript:", v42);
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v43, "stringWithFormat:", CFSTR("%@\n     %@ : %@"), v41, v42, v44);
                v39 = (__CFString *)objc_claimAutoreleasedReturnValue();

                ++v40;
                v41 = v39;
              }
              while (v37 != v40);
              v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", __p, v65, 16);
            }
            while (v37);
          }
          else
          {
            v39 = CFSTR("Found errors while adding ML Programs to sub-models in the pipeline:");
          }

          objc_msgSend(v58, "setMilUpgradeStatus:", &unk_1E3DA23F8);
          +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("%@"), v39);
          v46 = (id)objc_claimAutoreleasedReturnValue();
          *a5 = v46;
          objc_msgSend(v46, "description");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v58, "setMilUpgradeFailureReason:", v47);

        }
      }
      else
      {
        objc_msgSend(v58, "setMilUpgradeStatus:", &unk_1E3DA23E0);
      }

      v45 = v52 ^ 1;
    }
    else if ((a3 & 1) != 0)
    {
      v45 = 1;
    }
    else
    {
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("Cannot add ML Program to this model because it is not eligible."));
      v45 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }

  }
  return v45 & 1;
}

void sub_19C8A62EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_19C8A67C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14741(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14742(uint64_t a1)
{

}

void sub_19C8A73D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char *a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(a38);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a35);

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void CoreML::NNCompiler::Backend::MIL::MILFunctionBuilder::~MILFunctionBuilder(CoreML::NNCompiler::Backend::MIL::MILFunctionBuilder *this)
{
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(*((_QWORD **)this + 4));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*((char **)this + 1));
}

void sub_19C8A7838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_19C8A7BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_19C8A7F88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<_MLModelSpecification>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

void std::__shared_ptr_pointer<_MLModelSpecification *,std::shared_ptr<_MLModelSpecification>::__shared_ptr_default_delete<_MLModelSpecification,_MLModelSpecification>,std::allocator<_MLModelSpecification>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<_MLModelSpecification *,std::shared_ptr<_MLModelSpecification>::__shared_ptr_default_delete<_MLModelSpecification,_MLModelSpecification>,std::allocator<_MLModelSpecification>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<_MLModelSpecification *,std::shared_ptr<_MLModelSpecification>::__shared_ptr_default_delete<_MLModelSpecification,_MLModelSpecification>,std::allocator<_MLModelSpecification>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI21_MLModelSpecificationE27__shared_ptr_default_deleteIS1_S1_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char *MLLoggingGetHomeDirectory()
{
  uid_t v0;
  uint64_t v1;
  uint64_t v2;
  size_t v3;
  BOOL v4;
  NSObject *v5;
  uint8_t buf[8];
  passwd *v8;
  passwd v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v0 = getuid();
  v1 = sysconf(71);
  MEMORY[0x1E0C80A78](v1);
  memset(&v9, 0, sizeof(v9));
  v8 = 0;
  if (getpwuid_r(v0, &v9, (char *)&buf[-v2], v3, &v8))
    v4 = 1;
  else
    v4 = v8 == 0;
  if (!v4)
    return realpath_DARWIN_EXTSN(v9.pw_dir, 0);
  MLLoggingGetCoreChannel();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_19C486000, v5, OS_LOG_TYPE_ERROR, "Failed to get the home directory when checking model path.", buf, 2u);
  }

  return 0;
}

CoreML::Specification::BayesianProbitRegressor_FeatureWeight *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::TypeHandler>(google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  int *v2;
  int v3;
  int v4;
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (int *)*((_QWORD *)this + 2);
  if (!v2)
  {
    v3 = *((_DWORD *)this + 2);
    v4 = *((_DWORD *)this + 3);
LABEL_6:
    if (v3 <= v4)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(this, v4 - v3 + 1);
      v2 = (int *)*((_QWORD *)this + 2);
    }
    v4 = *v2;
    goto LABEL_9;
  }
  v3 = *((_DWORD *)this + 2);
  v4 = *v2;
  if (v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::BayesianProbitRegressor_FeatureWeight **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3))
    goto LABEL_6;
LABEL_9:
  *v2 = v4 + 1;
  v6 = *(google::protobuf::Arena **)this;
  if (*(_QWORD *)this)
  {
    CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight(Aligned);
    v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
    *v7 = Aligned;
    v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>;
    v8 = (unint64_t *)((char *)v6 + 32);
    do
      v9 = __ldxr(v8);
    while (__stxr((unint64_t)v7, v8));
    v7[2] = (google::protobuf::Arena *)v9;
  }
  else
  {
    Aligned = (CoreML::Specification::BayesianProbitRegressor_FeatureWeight *)operator new();
    CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight(Aligned);
  }
  v10 = *((_QWORD *)this + 2);
  v11 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = Aligned;
  return Aligned;
}

void sub_19C8A9084(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>(google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  int *v2;
  int v3;
  int v4;
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena **v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (int *)*((_QWORD *)this + 2);
  if (!v2)
  {
    v3 = *((_DWORD *)this + 2);
    v4 = *((_DWORD *)this + 3);
LABEL_6:
    if (v3 <= v4)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(this, v4 - v3 + 1);
      v2 = (int *)*((_QWORD *)this + 2);
    }
    v4 = *v2;
    goto LABEL_9;
  }
  v3 = *((_DWORD *)this + 2);
  v4 = *v2;
  if (v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3))
    goto LABEL_6;
LABEL_9:
  *v2 = v4 + 1;
  v6 = *(google::protobuf::Arena **)this;
  if (*(_QWORD *)this)
  {
    CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight(Aligned);
    v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
    *v7 = Aligned;
    v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>;
    v8 = (unint64_t *)((char *)v6 + 32);
    do
      v9 = __ldxr(v8);
    while (__stxr((unint64_t)v7, v8));
    v7[2] = (google::protobuf::Arena *)v9;
  }
  else
  {
    Aligned = (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)operator new();
    CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight(Aligned);
  }
  v10 = *((_QWORD *)this + 2);
  v11 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = Aligned;
  return Aligned;
}

void sub_19C8A91CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

double CoreML::BayesianProbitRegression::BayesianProbitRegression::setWeight(CoreML::BayesianProbitRegression::BayesianProbitRegression *this, unint64_t a2, double a3, double a4)
{
  unint64_t v4;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  char *v15;
  unint64_t v16;
  void **v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  double result;

  v9 = (uint64_t *)((char *)this + 8);
  v10 = a2 ^ (a2 >> 8);
  v11 = *((_QWORD *)this + 2);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = a2 ^ (a2 >> 8);
      if (v10 >= v11)
        v13 = v10 % v11;
    }
    else
    {
      v13 = (v11 - 1) & v10;
    }
    v14 = *(void ***)(*v9 + 8 * v13);
    if (v14)
    {
      v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          v16 = *((_QWORD *)v15 + 1);
          if (v16 == v10)
          {
            if (*((_QWORD *)v15 + 2) == a2)
              goto LABEL_55;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v13)
              break;
          }
          v15 = *(char **)v15;
        }
        while (v15);
      }
    }
    if (v12.u32[0] > 1uLL)
    {
      v4 = a2 ^ (a2 >> 8);
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v17 = *(void ***)(*v9 + 8 * v4);
    if (v17)
    {
      v15 = (char *)*v17;
      if (*v17)
      {
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v10)
          {
            if (*((_QWORD *)v15 + 2) == a2)
              goto LABEL_55;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v18 >= v11)
                v18 %= v11;
            }
            else
            {
              v18 &= v11 - 1;
            }
            if (v18 != v4)
              break;
          }
          v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  v15 = (char *)operator new(0x28uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  *((_QWORD *)v15 + 2) = a2;
  *(_OWORD *)(v15 + 24) = xmmword_19CB39930;
  v19 = (float)(unint64_t)(*((_QWORD *)this + 4) + 1);
  v20 = *((float *)this + 10);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)v9, v24);
    v11 = *((_QWORD *)this + 2);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v25 = *v9;
  v26 = *(_QWORD **)(*v9 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v15 = *v26;
LABEL_53:
    *v26 = v15;
    goto LABEL_54;
  }
  *(_QWORD *)v15 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v15;
  *(_QWORD *)(v25 + 8 * v4) = (char *)this + 24;
  if (*(_QWORD *)v15)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*v9 + 8 * v27);
    goto LABEL_53;
  }
LABEL_54:
  ++*((_QWORD *)this + 4);
LABEL_55:
  result = a3 * a4;
  *((double *)v15 + 3) = a4;
  *((double *)v15 + 4) = a3 * a4;
  return result;
}

void sub_19C8A94B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::BayesianProbitRegression::BayesianProbitRegression::initializeFeatures(CoreML::BayesianProbitRegression::BayesianProbitRegression *this, uint64_t a2, double a3)
{
  pthread_rwlock_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  unint64_t v12;
  double v13;
  double v14;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  long double v23;

  v6 = (pthread_rwlock_t *)((char *)this + 88);
  v7 = (_QWORD *)pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 88));
  *(_QWORD *)this = a2;
  *((double *)this + 10) = a3;
  if (*((_QWORD *)this + 4))
  {
    v7 = (_QWORD *)*((_QWORD *)this + 3);
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    *((_QWORD *)this + 3) = 0;
    v9 = *((_QWORD *)this + 2);
    if (v9)
    {
      for (i = 0; i != v9; ++i)
        *(_QWORD *)(*((_QWORD *)this + 1) + 8 * i) = 0;
    }
    *((_QWORD *)this + 4) = 0;
  }
  if (a3 < 0.0 || a3 > 1.0)
  {
    v12 = 0x7FF8000000000000;
LABEL_17:
    v13 = *(double *)&v12;
    goto LABEL_18;
  }
  if (a3 == 0.0)
  {
    v12 = 0xFFF0000000000000;
    goto LABEL_17;
  }
  if (a3 == 1.0)
  {
    v12 = 0x7FF0000000000000;
    goto LABEL_17;
  }
  if (1.0 - a3 >= a3)
    v16 = a3;
  else
    v16 = 1.0 - a3;
  if (v16 <= 0.02425)
  {
    v20 = sqrt(log(v16) * -2.0);
    v19 = (((((v20 * -0.007784894 + -0.322396458) * v20 + -2.40075828) * v20 + -2.54973254) * v20 + 4.37466414) * v20
         + 2.93816398)
        / ((((v20 * 0.00778469571 + 0.322467129) * v20 + 2.44513414) * v20 + 3.75440866) * v20 + 1.0);
  }
  else
  {
    v17 = v16 + -0.5;
    v18 = v17 * v17;
    v19 = v17
        * (((((v17 * v17 * -39.6968303 + 220.946098) * (v17 * v17) + -275.92851) * (v17 * v17) + 138.357752)
          * (v17
           * v17)
          + -30.6647981)
         * (v17
          * v17)
         + 2.50662828)
        / (((((v18 * -54.4760988 + 161.585837) * v18 + -155.69898) * v18 + 66.8013119) * v18 + -13.2806816) * v18 + 1.0);
  }
  CoreML::BayesianProbitRegression::Gaussian::stdNormalCDF((CoreML::BayesianProbitRegression::Gaussian *)v7, v19);
  v22 = (v21 - v16) * 2.50662827;
  v23 = exp(v19 * v19 * 0.5);
  v13 = v19 - v22 * v23 / (v19 * (v22 * v23) * 0.5 + 1.0);
  if (a3 > 0.5)
    v13 = -v13;
LABEL_18:
  v14 = v13 * sqrt((double)*(unint64_t *)this + (double)*(unint64_t *)this);
  *((_QWORD *)this + 6) = 0x3FF0000000000000;
  *((double *)this + 7) = v14;
  return pthread_rwlock_unlock(v6);
}

void CoreML::BayesianProbitRegression::BayesianProbitRegression::GetGaussiansAndBias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t i;
  unint64_t v10;
  _QWORD *v11;
  double *v12;
  unint64_t v13;
  double *v14;
  double v15;
  double *v16;
  double *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  double *v27;
  double v28;
  double *v29;
  double *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  double *v50;
  double v51;
  double *v52;
  double *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  double *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  double *v63;
  double v64;
  double *v65;
  double *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  double *v72;
  unint64_t v73;
  uint64_t v74;

  v8 = *(unsigned int *)(a2 + 8);
  if (a3)
    std::vector<long long>::reserve((void **)a3, *(unsigned int *)(a2 + 8));
  std::vector<double>::reserve((void **)a4, (v8 + 1));
  std::vector<double>::reserve((void **)a5, (v8 + 1));
  if ((_DWORD)v8)
  {
    for (i = 0; i != v8; ++i)
    {
      v10 = *(unsigned int *)(*(_QWORD *)a2 + 4 * i) | (unint64_t)(i << 32);
      v11 = std::__hash_table<std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>,CoreML::BayesianProbitRegression::SuperHasher,CoreML::BayesianProbitRegression::SuperHasher,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>,CoreML::BayesianProbitRegression::SuperHasher,CoreML::BayesianProbitRegression::SuperHasher,true>,std::allocator<std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>>>::find<unsigned long long>((_QWORD *)(a1 + 8), v10);
      if (v11)
        v12 = (double *)(v11 + 3);
      else
        v12 = (double *)(a1 + 64);
      v14 = *(double **)(a4 + 8);
      v13 = *(_QWORD *)(a4 + 16);
      v15 = v12[1] / *v12;
      if ((unint64_t)v14 >= v13)
      {
        v17 = *(double **)a4;
        v18 = ((uint64_t)v14 - *(_QWORD *)a4) >> 3;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
          goto LABEL_87;
        v20 = v13 - (_QWORD)v17;
        if (v20 >> 2 > v19)
          v19 = v20 >> 2;
        v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8;
        v22 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v21)
          v22 = v19;
        if (v22)
        {
          v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v22);
          v17 = *(double **)a4;
          v14 = *(double **)(a4 + 8);
        }
        else
        {
          v23 = 0;
        }
        v24 = (double *)(v22 + 8 * v18);
        *v24 = v15;
        v16 = v24 + 1;
        while (v14 != v17)
        {
          v25 = *((_QWORD *)v14-- - 1);
          *((_QWORD *)v24-- - 1) = v25;
        }
        *(_QWORD *)a4 = v24;
        *(_QWORD *)(a4 + 8) = v16;
        *(_QWORD *)(a4 + 16) = v22 + 8 * v23;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v14 = v15;
        v16 = v14 + 1;
      }
      *(_QWORD *)(a4 + 8) = v16;
      v27 = *(double **)(a5 + 8);
      v26 = *(_QWORD *)(a5 + 16);
      v28 = 1.0 / *v12;
      if ((unint64_t)v27 >= v26)
      {
        v30 = *(double **)a5;
        v31 = ((uint64_t)v27 - *(_QWORD *)a5) >> 3;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61)
          goto LABEL_87;
        v33 = v26 - (_QWORD)v30;
        if (v33 >> 2 > v32)
          v32 = v33 >> 2;
        v21 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8;
        v34 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v21)
          v34 = v32;
        if (v34)
        {
          v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v34);
          v30 = *(double **)a5;
          v27 = *(double **)(a5 + 8);
        }
        else
        {
          v35 = 0;
        }
        v36 = (double *)(v34 + 8 * v31);
        *v36 = v28;
        v29 = v36 + 1;
        while (v27 != v30)
        {
          v37 = *((_QWORD *)v27-- - 1);
          *((_QWORD *)v36-- - 1) = v37;
        }
        *(_QWORD *)a5 = v36;
        *(_QWORD *)(a5 + 8) = v29;
        *(_QWORD *)(a5 + 16) = v34 + 8 * v35;
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v27 = v28;
        v29 = v27 + 1;
      }
      *(_QWORD *)(a5 + 8) = v29;
      if (a3)
      {
        v39 = *(unint64_t **)(a3 + 8);
        v38 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v39 >= v38)
        {
          v41 = *(unint64_t **)a3;
          v42 = ((uint64_t)v39 - *(_QWORD *)a3) >> 3;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          v44 = v38 - (_QWORD)v41;
          if (v44 >> 2 > v43)
            v43 = v44 >> 2;
          v21 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8;
          v45 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v21)
            v45 = v43;
          if (v45)
          {
            v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v45);
            v41 = *(unint64_t **)a3;
            v39 = *(unint64_t **)(a3 + 8);
          }
          else
          {
            v46 = 0;
          }
          v47 = (unint64_t *)(v45 + 8 * v42);
          *v47 = v10;
          v40 = v47 + 1;
          while (v39 != v41)
          {
            v48 = *--v39;
            *--v47 = v48;
          }
          *(_QWORD *)a3 = v47;
          *(_QWORD *)(a3 + 8) = v40;
          *(_QWORD *)(a3 + 16) = v45 + 8 * v46;
          if (v41)
            operator delete(v41);
        }
        else
        {
          *v39 = v10;
          v40 = v39 + 1;
        }
        *(_QWORD *)(a3 + 8) = v40;
      }
    }
  }
  v50 = *(double **)(a4 + 8);
  v49 = *(_QWORD *)(a4 + 16);
  v51 = *(double *)(a1 + 56) / *(double *)(a1 + 48);
  if ((unint64_t)v50 >= v49)
  {
    v53 = *(double **)a4;
    v54 = ((uint64_t)v50 - *(_QWORD *)a4) >> 3;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 61)
      goto LABEL_87;
    v56 = v49 - (_QWORD)v53;
    if (v56 >> 2 > v55)
      v55 = v56 >> 2;
    v21 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8;
    v57 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v21)
      v57 = v55;
    if (v57)
    {
      v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v57);
      v53 = *(double **)a4;
      v50 = *(double **)(a4 + 8);
    }
    else
    {
      v58 = 0;
    }
    v59 = (double *)(v57 + 8 * v54);
    v60 = v57 + 8 * v58;
    *v59 = v51;
    v52 = v59 + 1;
    while (v50 != v53)
    {
      v61 = *((_QWORD *)v50-- - 1);
      *((_QWORD *)v59-- - 1) = v61;
    }
    *(_QWORD *)a4 = v59;
    *(_QWORD *)(a4 + 8) = v52;
    *(_QWORD *)(a4 + 16) = v60;
    if (v53)
      operator delete(v53);
  }
  else
  {
    *v50 = v51;
    v52 = v50 + 1;
  }
  *(_QWORD *)(a4 + 8) = v52;
  v63 = *(double **)(a5 + 8);
  v62 = *(_QWORD *)(a5 + 16);
  v64 = 1.0 / *(double *)(a1 + 48);
  if ((unint64_t)v63 < v62)
  {
    *v63 = v64;
    v65 = v63 + 1;
    goto LABEL_86;
  }
  v66 = *(double **)a5;
  v67 = ((uint64_t)v63 - *(_QWORD *)a5) >> 3;
  v68 = v67 + 1;
  if ((unint64_t)(v67 + 1) >> 61)
LABEL_87:
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v69 = v62 - (_QWORD)v66;
  if (v69 >> 2 > v68)
    v68 = v69 >> 2;
  v21 = (unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8;
  v70 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v21)
    v70 = v68;
  if (v70)
  {
    v70 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v70);
    v66 = *(double **)a5;
    v63 = *(double **)(a5 + 8);
  }
  else
  {
    v71 = 0;
  }
  v72 = (double *)(v70 + 8 * v67);
  v73 = v70 + 8 * v71;
  *v72 = v64;
  v65 = v72 + 1;
  while (v63 != v66)
  {
    v74 = *((_QWORD *)v63-- - 1);
    *((_QWORD *)v72-- - 1) = v74;
  }
  *(_QWORD *)a5 = v72;
  *(_QWORD *)(a5 + 8) = v65;
  *(_QWORD *)(a5 + 16) = v73;
  if (v66)
    operator delete(v66);
LABEL_86:
  *(_QWORD *)(a5 + 8) = v65;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>,CoreML::BayesianProbitRegression::SuperHasher,CoreML::BayesianProbitRegression::SuperHasher,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>,CoreML::BayesianProbitRegression::SuperHasher,CoreML::BayesianProbitRegression::SuperHasher,true>,std::allocator<std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>>>::find<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2 ^ (a2 >> 8);
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2 ^ (a2 >> 8);
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void sub_19C8A9E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C8AA008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  uint64_t v22;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19C8AA1A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8AA3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_19C8AA4F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8AA6C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19C8AA888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15106(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15107(uint64_t a1)
{

}

id `anonymous namespace'::computeShapeHashForFeatures(void *a1, void *a2)
{
  std::string *p_p;
  void *v3;
  std::string __p;

  CoreML::MLNeuralNetworkUtilities::hashFeatureProviderToConfigurationName(&__p, a1, 1, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

void sub_19C8AAA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id `anonymous namespace'::computeDefaultShapeHash(MLModelDescription *this, MLVersionInfo *a2, MLVersionInfo *a3)
{
  std::string *p_p;
  void *v4;
  std::string __p;

  CoreML::MLNeuralNetworkUtilities::hashE5ModelDefaultShapesToConfigurationName(&__p, this, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_19C8AAABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C8AADCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

BOOL `anonymous namespace'::reshapeOperationForFeatures(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  MLModelDescription *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  MLVersionInfo *v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  uint64_t last_error_message;
  MLVersionInfo *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v26 = a4;
  -[MLModelDescription inputDescriptionsByName](v11, "inputDescriptionsByName");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[MLModelDescription stateDescriptionsByName](v11, "stateDescriptionsByName");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v12, "count");
  v15 = objc_msgSend(v13, "count");
  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  v16 = v15 + v14;
  if (v15 + v14)
  {
    if (v16 >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    *(_QWORD *)&v27 = std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v15 + v14);
    *((_QWORD *)&v27 + 1) = v27;
    *(_QWORD *)&v28 = v27 + 8 * v17;
    *((_QWORD *)&v28 + 1) = std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v16);
    *(_QWORD *)&v29 = *((_QWORD *)&v28 + 1);
    *((_QWORD *)&v29 + 1) = *((_QWORD *)&v28 + 1) + 8 * v18;
  }
  if (v10)
  else
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "operationHandle");
  v21 = e5rt_execution_stream_operation_reshape_operation();
  if ((_DWORD)v21)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      v31 = last_error_message;
      v32 = 1024;
      v33 = v21;
      _os_log_error_impl(&dword_19C486000, v22, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a5)
    {
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("E5RT: %s (%d)"), e5rt_get_last_error_message(), v21);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 0, v23, CFSTR("Failed to reshape the operation for shape with hash: %@."), v20);
      *a5 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    objc_msgSend(v9, "setShapeHash:", v20);
  }

  return (_DWORD)v21 == 0;
}

void sub_19C8AB0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a5);

  _Unwind_Resume(a1);
}

void `anonymous namespace'::appendReshapeInfo(void **a1, void *a2, void *a3, void *a4)
{
  id v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  __CVBuffer *v16;
  size_t Height;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t TensorDescriptor;
  size_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  _QWORD *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t last_error_message;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  id v93;
  void *v94;
  size_t Width;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  id obj;
  void *v102;
  void *v103;
  void *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint8_t v111[128];
  _BYTE buf[24];
  void *v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v97 = a2;
  v7 = a3;
  v93 = a4;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  obj = v7;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v105, v111, 16);
  if (v8)
  {
    v96 = *(_QWORD *)v106;
    v92 = *MEMORY[0x1E0C99768];
    v99 = *MEMORY[0x1E0C99750];
    do
    {
      v98 = v8;
      for (i = 0; i != v98; ++i)
      {
        if (*(_QWORD *)v106 != v96)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v105 + 1) + 8 * i);
        objc_msgSend(obj, "objectForKeyedSubscript:", v10);
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v97, "featureValueForName:", v10);
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v104, "type") == 4)
        {
          v11 = v104;
          v12 = v103;
          v13 = v93;
          v100 = v11;
          v94 = v12;
          objc_msgSend(v11, "imageConstraint");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = v14;
          if (v12)
          {
            v16 = (__CVBuffer *)objc_msgSend(v12, "imageBufferValue");
            Width = CVPixelBufferGetWidth(v16);
            Height = CVPixelBufferGetHeight(v16);
          }
          else
          {
            Width = objc_msgSend(v14, "pixelsWide");
            Height = objc_msgSend(v15, "pixelsHigh");
          }
          v26 = Height;
          objc_msgSend(v100, "name");
          v102 = v15;
          v27 = (id)objc_claimAutoreleasedReturnValue();
          v28 = v13;
          v110 = 0;
          objc_msgSend(v28, "operationHandle");
          v29 = objc_retainAutorelease(v27);
          objc_msgSend(v29, "UTF8String");
          v30 = e5rt_execution_stream_operation_retain_input_port();
          if ((_DWORD)v30)
          {
            +[MLLogging coreChannel](MLLogging, "coreChannel");
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              v85 = objc_msgSend(objc_retainAutorelease(v29), "UTF8String");
              last_error_message = e5rt_get_last_error_message();
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v85;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = last_error_message;
              *(_WORD *)&buf[22] = 1024;
              LODWORD(v113) = v30;
              _os_log_error_impl(&dword_19C486000, v31, OS_LOG_TYPE_ERROR, "Failed to get port for feature named %s E5RT: %s (%d)", buf, 0x1Cu);
            }

            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v99, CFSTR("Failed to get port for feature named %s E5RT: %s (%d)"), objc_msgSend(objc_retainAutorelease(v29), "UTF8String"), e5rt_get_last_error_message(), v30);
          }
          v32 = MLE5PortTraitOf();
          v33 = e5rt_io_port_release();
          if ((_DWORD)v33)
          {
            +[MLLogging coreChannel](MLLogging, "coreChannel");
            v34 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              v87 = e5rt_get_last_error_message();
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v87;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v33;
              _os_log_error_impl(&dword_19C486000, v34, OS_LOG_TYPE_ERROR, "Failed to release input port E5RT: %s (%d)", buf, 0x12u);
            }

            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v99, CFSTR("Failed to release input port E5RT: %s (%d)"), e5rt_get_last_error_message(), v33);
          }

          if (v32 == 2)
          {
            v35 = objc_msgSend(v102, "pixelFormatType");
            v36 = v35;
            v110 = 0;
            if ((int)v35 > 1278226487)
            {
              if ((_DWORD)v35 != 1278226488 && (_DWORD)v35 != 1278226536)
                goto LABEL_56;
            }
            else
            {
              if ((_DWORD)v35 == 32 || (_DWORD)v35 == 1111970369)
                goto LABEL_59;
LABEL_56:
              +[MLLogging coreChannel](MLLogging, "coreChannel");
              v49 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
              {
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v36);
                v91 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = v91;
                _os_log_error_impl(&dword_19C486000, v49, OS_LOG_TYPE_ERROR, "No valid conversion for unsupported pixel format %@", buf, 0xCu);

              }
              v50 = (void *)MEMORY[0x1E0C99DA0];
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v36);
              v51 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v50, "raise:format:", v92, CFSTR("No valid conversion for unsupported pixel format %@"), v51);

            }
LABEL_59:
            v52 = e5rt_surface_desc_create();
            if ((_DWORD)v52)
            {
              +[MLLogging coreChannel](MLLogging, "coreChannel");
              v53 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
              {
                v88 = e5rt_get_last_error_message();
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v88;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v52;
                _os_log_error_impl(&dword_19C486000, v53, OS_LOG_TYPE_ERROR, "Failed to create surface descriptor. E5RT: %s (%d)", buf, 0x12u);
              }

              objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v99, CFSTR("Failed to create surface descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), v52);
            }
            v109 = 0;
            v54 = e5rt_operand_desc_retain_from_surface_desc();
            if ((_DWORD)v54)
            {
              +[MLLogging coreChannel](MLLogging, "coreChannel");
              v55 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
              {
                v89 = e5rt_get_last_error_message();
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v89;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v54;
                _os_log_error_impl(&dword_19C486000, v55, OS_LOG_TYPE_ERROR, "Failed to transfer surface descriptor to operand descriptor. E5RT: %s (%d)", buf, 0x12u);
              }

              objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v99, CFSTR("Failed to transfer surface descriptor to operand descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), v54);
            }
            v56 = e5rt_surface_desc_release();
            if ((_DWORD)v56)
            {
              +[MLLogging coreChannel](MLLogging, "coreChannel");
              v57 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
              {
                v90 = e5rt_get_last_error_message();
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v90;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v56;
                _os_log_error_impl(&dword_19C486000, v57, OS_LOG_TYPE_ERROR, "Failed to release surface descriptor. E5RT: %s (%d)", buf, 0x12u);
              }

              objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v99, CFSTR("Failed to release surface descriptor. E5RT: %s (%d)"), e5rt_get_last_error_message(), v56);
            }
            TensorDescriptor = v109;
LABEL_72:

            goto LABEL_73;
          }
          v37 = objc_msgSend(v102, "pixelType");
          if (v37 > 29)
          {
            v39 = 65552;
            if (v37 == 40)
              goto LABEL_43;
            if (v37 != 30)
              goto LABEL_31;
          }
          else if (v37 != 10 && v37 != 20)
          {
LABEL_31:
            +[MLLogging coreChannel](MLLogging, "coreChannel");
            v38 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_19C486000, v38, OS_LOG_TYPE_ERROR, "Can't get data type from unexpected pixel type.", buf, 2u);
            }

            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v92, CFSTR("Can't get data type from unexpected pixel type."));
            v39 = 65600;
LABEL_43:
            v41 = objc_msgSend(v102, "pixelType");
            v42 = 1;
            if (v41 > 29)
            {
              v43 = 0x1E0CB3000uLL;
              if (v41 == 40)
                goto LABEL_52;
              if (v41 == 30)
                goto LABEL_51;
LABEL_46:
              +[MLLogging coreChannel](MLLogging, "coreChannel", 1);
              v44 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_19C486000, v44, OS_LOG_TYPE_ERROR, "Can't get channels from unexpected pixel type.", buf, 2u);
              }

              objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v92, CFSTR("Can't get channels from unexpected pixel type."));
              v45 = 0;
            }
            else
            {
              v43 = 0x1E0CB3000;
              if (v41 != 10)
              {
                if (v41 != 20)
                  goto LABEL_46;
LABEL_51:
                v42 = 3;
              }
LABEL_52:
              objc_msgSend(*(id *)(v43 + 2024), "numberWithInt:", v42);
              v45 = (void *)objc_claimAutoreleasedReturnValue();
            }
            *(_QWORD *)buf = &unk_1E3DA2428;
            *(_QWORD *)&buf[8] = v45;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v26);
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            *(_QWORD *)&buf[16] = v46;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Width);
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            v113 = v47;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", buf, 4);
            v48 = (void *)objc_claimAutoreleasedReturnValue();

            TensorDescriptor = MLE5CreateTensorDescriptor(v48, v39);
            goto LABEL_72;
          }
          v39 = 65568;
          goto LABEL_43;
        }
        if (objc_msgSend(v104, "type") == 5)
        {
          v18 = v103;
          objc_msgSend(v104, "multiArrayConstraint");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = v19;
          if (v18)
          {
            objc_msgSend(v18, "multiArrayValue");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "shape");
            v22 = (void *)objc_claimAutoreleasedReturnValue();

          }
          else
          {
            objc_msgSend(v19, "shape");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
          }
          TensorDescriptor = MLE5CreateTensorDescriptor(v22, objc_msgSend(v20, "dataType"));

        }
        else if (objc_msgSend(v104, "type") == 8)
        {
          objc_msgSend(v104, "stateConstraint");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "bufferShape");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          TensorDescriptor = MLE5CreateTensorDescriptor(v24, objc_msgSend(v23, "dataType"));

        }
        else
        {
          +[MLLogging coreChannel](MLLogging, "coreChannel");
          v40 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_19C486000, v40, OS_LOG_TYPE_ERROR, "Logic error: Unknown feature type for reshape.", buf, 2u);
          }

          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v92, CFSTR("Logic error: Unknown feature type for reshape."));
          TensorDescriptor = 0;
        }
LABEL_73:
        v58 = objc_msgSend(objc_retainAutorelease(v10), "UTF8String");
        v59 = v58;
        v61 = (uint64_t *)a1[1];
        v60 = (unint64_t)a1[2];
        if ((unint64_t)v61 >= v60)
        {
          v63 = ((char *)v61 - (_BYTE *)*a1) >> 3;
          if ((unint64_t)(v63 + 1) >> 61)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          v64 = v60 - (_QWORD)*a1;
          v65 = v64 >> 2;
          if (v64 >> 2 <= (unint64_t)(v63 + 1))
            v65 = v63 + 1;
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
            v66 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v66 = v65;
          if (v66)
            v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v66);
          else
            v67 = 0;
          v68 = (uint64_t *)(v66 + 8 * v63);
          *v68 = v59;
          v62 = v68 + 1;
          v70 = (char *)*a1;
          v69 = (char *)a1[1];
          if (v69 != *a1)
          {
            do
            {
              v71 = *((_QWORD *)v69 - 1);
              v69 -= 8;
              *--v68 = v71;
            }
            while (v69 != v70);
            v69 = (char *)*a1;
          }
          *a1 = v68;
          a1[1] = v62;
          a1[2] = (void *)(v66 + 8 * v67);
          if (v69)
            operator delete(v69);
        }
        else
        {
          *v61 = v58;
          v62 = v61 + 1;
        }
        a1[1] = v62;
        v73 = (uint64_t *)a1[4];
        v72 = (unint64_t)a1[5];
        if ((unint64_t)v73 >= v72)
        {
          v75 = a1[3];
          v76 = ((char *)v73 - v75) >> 3;
          if ((unint64_t)(v76 + 1) >> 61)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          v77 = v72 - (_QWORD)v75;
          v78 = v77 >> 2;
          if (v77 >> 2 <= (unint64_t)(v76 + 1))
            v78 = v76 + 1;
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
            v79 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v79 = v78;
          if (v79)
            v79 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v79);
          else
            v80 = 0;
          v81 = (uint64_t *)(v79 + 8 * v76);
          *v81 = TensorDescriptor;
          v74 = v81 + 1;
          v83 = (char *)a1[3];
          v82 = (char *)a1[4];
          if (v82 != v83)
          {
            do
            {
              v84 = *((_QWORD *)v82 - 1);
              v82 -= 8;
              *--v81 = v84;
            }
            while (v82 != v83);
            v82 = (char *)a1[3];
          }
          a1[3] = v81;
          a1[4] = v74;
          a1[5] = (void *)(v79 + 8 * v80);
          if (v82)
            operator delete(v82);
        }
        else
        {
          *v73 = TensorDescriptor;
          v74 = v73 + 1;
        }
        a1[4] = v74;

      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v105, v111, 16);
    }
    while (v8);
  }

}

void sub_19C8ABD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{

  _Unwind_Resume(a1);
}

void `anonymous namespace'::InputNameAndOperandDescVector::~InputNameAndOperandDescVector(_anonymous_namespace_::InputNameAndOperandDescVector *this)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*((_QWORD *)this + 3);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v2 != v3)
  {
    do
    {
      e5rt_operand_desc_release();
      v2 += 8;
    }
    while (v2 != v3);
    v2 = (char *)*((_QWORD *)this + 3);
  }
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

void sub_19C8AC21C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8AC32C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8AC784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38)
{
  void *v38;

  _Unwind_Resume(a1);
}

void sub_19C8ACD50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8ACDCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8AD034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v26 - 112);
  _Unwind_Resume(a1);
}

void sub_19C8AD760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_19C8AD858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8ADA80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C8ADBE8(_Unwind_Exception *a1)
{
  void *v1;
  void (**v2)(_QWORD);
  void *v3;

  v2[2](v2);
  _Unwind_Resume(a1);
}

void sub_19C8ADD48(_Unwind_Exception *a1)
{
  void *v1;
  void (**v2)(_QWORD);
  void *v3;
  void *v4;

  v2[2](v2);
  _Unwind_Resume(a1);
}

void sub_19C8ADFE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8AE0B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8AE210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_19C8AE3C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C8AE4B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8AE60C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C8AE6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C8AE988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C8AECD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  void *v29;
  void *v30;
  void *v31;

  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_19C8AEE58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8AEF5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C8AF154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8AF208(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8AF440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8AF5D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8AF630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8AF948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19C8AFC50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8AFE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C8B0568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C8B07F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8B091C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8B09A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8B0B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_19C8B14D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;

  _Unwind_Resume(a1);
}

void sub_19C8B1788(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8B19A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZ64__MLE5Engine__probabilityDictionaryWithMultiArray_classifyTopK__EUb_E3__0NS_11__wrap_iterIPmEEEEjT1_S7_S7_T0_(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;

  v4 = *a2;
  v5 = *a1;
  v6 = *(float *)(a4 + 4 * *a2);
  v7 = *(float *)(a4 + 4 * *a1);
  v8 = *a3;
  v9 = *(float *)(a4 + 4 * *a3);
  if (v6 > v7)
  {
    if (v9 > v6)
    {
      *a1 = v8;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    if (*(float *)(a4 + 4 * *a3) <= v7)
      return 1;
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  if (v9 > v6)
  {
    *a2 = v8;
    *a3 = v4;
    v10 = *a1;
    if (*(float *)(a4 + 4 * *a2) <= *(float *)(a4 + 4 * *a1))
      return 1;
    *a1 = *a2;
    *a2 = v10;
    return 2;
  }
  return 0;
}

uint64_t __Block_byref_object_copy__15721(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15722(uint64_t a1)
{

}

void sub_19C8B25D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C8B26F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZL37e5rtWouldUseBackwardCompatibilityPathv_block_invoke()
{
  uint64_t result;

  result = MGGetSInt64Answer();
  e5rtWouldUseBackwardCompatibilityPath(void)::chipID = result;
  return result;
}

void CoreML::NNCompiler::Backend::MIL::Ios18::Ios18LayerTranslator::~Ios18LayerTranslator(void **this)
{
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(this);
  JUMPOUT(0x1A1AD6260);
}

void sub_19C8B28D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8B2990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_19C8B2C34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8B2DBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8B2F8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8B3098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8B3158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C8B31CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8B332C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8B351C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C8B3640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8B3770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8B3824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C8B38D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C8B3AFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8B3B98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8B3C44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8B3D88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8B3E2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8B40FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8B4194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8B432C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8B44CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8B4590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8B4708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8B47D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8B48D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8B49E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8B4A94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8B4CAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_19C8B4F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
  void *v23;
  void *v24;

  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

void sub_19C8B5144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8B531C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_19C8B58B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void (**a15)(void), uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;

  a15[2]();
  ElapsedTimeRecorder::~ElapsedTimeRecorder(&a26);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16273(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16274(uint64_t a1)
{

}

void sub_19C8B6894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  CoreML::Specification::CoreMLModels::VisionFeaturePrint::~VisionFeaturePrint((CoreML::Specification::CoreMLModels::VisionFeaturePrint *)&a32);
  _Unwind_Resume(a1);
}

id sortShapeKeysByFeatureResolution(void *a1)
{
  objc_msgSend(a1, "keysSortedByValueUsingComparator:", &__block_literal_global_16307);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZL32sortShapeKeysByFeatureResolutionP12NSDictionaryIP8NSStringP7NSArrayE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "lastObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "lastObject");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "compare:", v5);

  return v7;
}

void sub_19C8B6CA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19C8B723C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  _QWORD *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  void *v53;
  void *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  NSObject *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;

  if (a2)
  {
    std::__shared_weak_count::~__shared_weak_count(v49);
    operator delete(v53);
    if (*(char *)(v50 - 185) < 0)
      operator delete(*(void **)(v50 - 208));
    v54 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        v64 = (*(uint64_t (**)(void *))(*(_QWORD *)v54 + 16))(v54);
        *(_DWORD *)(v50 - 208) = 136315138;
        *(_QWORD *)(v50 - 204) = v64;
        _os_log_error_impl(&dword_19C486000, v55, OS_LOG_TYPE_ERROR, "Failed to resolve blob file reference, error=%s.", (uint8_t *)(v50 - 208), 0xCu);
      }

      if (v48)
      {
        v56 = (void *)MEMORY[0x1E0CB35C8];
        *(_QWORD *)(v50 - 184) = *MEMORY[0x1E0CB2D50];
        v57 = (void *)MEMORY[0x1E0CB3940];
        (*(void (**)(void *))(*(_QWORD *)v54 + 16))(v54);
        objc_msgSend(v57, "stringWithFormat:", CFSTR("Failed to resolve blob file reference, error=%s."));
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)(v50 - 208) = v58;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v50 - 208, v50 - 184, 1);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 0, v59);
        *v48 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
    else
    {
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v60 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)(v50 - 208) = 0;
        _os_log_error_impl(&dword_19C486000, v60, OS_LOG_TYPE_ERROR, "Failed to resolve blob file reference, unknown error.", (uint8_t *)(v50 - 208), 2u);
      }

      if (v48)
      {
        v61 = (void *)MEMORY[0x1E0CB35C8];
        *(_QWORD *)(v50 - 184) = *MEMORY[0x1E0CB2D50];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Failed to resolve blob file reference, unknown error."));
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)(v50 - 208) = v62;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v50 - 208, v50 - 184, 1);
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v61, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 0, v63);
        *v48 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
    __cxa_end_catch();
    JUMPOUT(0x19C8B7100);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C8B7D7C()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  __cxa_end_catch();
  JUMPOUT(0x19C8B7A68);
}

void sub_19C8B7DE4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_19C8B7E04()
{
  JUMPOUT(0x19C8B7E38);
}

void sub_19C8B7E0C()
{
  JUMPOUT(0x19C8B7E3CLL);
}

void sub_19C8B7E14()
{
  JUMPOUT(0x19C8B7E40);
}

_anonymous_namespace_::imemstream *`anonymous namespace'::imemstream::imemstream(_anonymous_namespace_::imemstream *this, const char *a2, uint64_t a3)
{
  char *v6;

  v6 = (char *)this + 16;
  std::streambuf::basic_streambuf();
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = a2;
  *((_QWORD *)this + 10) = &unk_1E3D49008;
  *((_QWORD *)this + 6) = &a2[a3];
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &off_1E3D4C7E0;
  *(_QWORD *)this = &unk_1E3D48FE0;
  std::ios_base::init((std::ios_base *)((char *)this + 80), v6);
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 56) = -1;
  *(_QWORD *)this = &off_1E3D4C758;
  *((_QWORD *)this + 2) = &off_1E3D4C7E0;
  *((_QWORD *)this + 10) = &off_1E3D4C868;
  return this;
}

_DWORD *`anonymous namespace'::VisitValue(_DWORD *result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD v27[3];

  v3 = result[11];
  if (v3 > 201)
  {
    if (v3 == 202)
    {
      v20 = *((_QWORD *)result + 4);
      v21 = *(_QWORD *)(v20 + 32);
      if (v21)
        v22 = (uint64_t *)(v21 + 8);
      else
        v22 = 0;
      v23 = *(int *)(v20 + 24);
      if ((_DWORD)v23)
      {
        v24 = 8 * v23;
        do
        {
          v25 = *v22++;
          v24 -= 8;
        }
        while (v24);
      }
    }
    else if (v3 == 502)
    {
      v11 = *((_QWORD *)result + 4);
      result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v26, *(_QWORD **)(v11 + 40));
      while (v26[0])
      {
        v12 = *(_QWORD *)(v26[0] + 24);
        google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v27, *(_QWORD **)(v12 + 88));
        while (v27[0])
        {
          google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(v27);
        }
        result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(v26);
      }
    }
  }
  else if (v3 == 200)
  {
    v13 = *((_QWORD *)result + 4);
    v14 = *(_QWORD *)(v13 + 16);
    if (!v14)
    {
      v14 = operator new();
      result = CoreML::Specification::Pipeline::Pipeline((CoreML::Specification::Pipeline *)v14);
      *(_QWORD *)(v13 + 16) = v14;
    }
    v15 = *(_QWORD *)(v14 + 32);
    if (v15)
      v16 = (uint64_t *)(v15 + 8);
    else
      v16 = 0;
    v17 = *(int *)(v14 + 24);
    if ((_DWORD)v17)
    {
      v18 = 8 * v17;
      do
      {
        v19 = *v16++;
        v18 -= 8;
      }
      while (v18);
    }
  }
  else if (v3 == 201)
  {
    v4 = *((_QWORD *)result + 4);
    v5 = *(_QWORD *)(v4 + 16);
    if (!v5)
    {
      v5 = operator new();
      result = CoreML::Specification::Pipeline::Pipeline((CoreML::Specification::Pipeline *)v5);
      *(_QWORD *)(v4 + 16) = v5;
    }
    v6 = *(_QWORD *)(v5 + 32);
    if (v6)
      v7 = (uint64_t *)(v6 + 8);
    else
      v7 = 0;
    v8 = *(int *)(v5 + 24);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *v7++;
        v9 -= 8;
      }
      while (v9);
    }
  }
  return result;
}

void sub_19C8B80D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::imemstream::~imemstream(_anonymous_namespace_::imemstream *this)
{
  uint64_t v1;

  v1 = std::istream::~istream();
  MEMORY[0x1A1AD61C4](v1 + 80);
  std::streambuf::~streambuf();
}

{
  uint64_t v1;

  v1 = std::istream::~istream();
  MEMORY[0x1A1AD61C4](v1 + 80);
  std::streambuf::~streambuf();
  JUMPOUT(0x1A1AD6260);
}

void `virtual thunk to'`anonymous namespace'::imemstream::~imemstream(_anonymous_namespace_::imemstream *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  std::istream::~istream();
  MEMORY[0x1A1AD61C4](v1 + 80);
  std::streambuf::~streambuf();
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  std::istream::~istream();
  MEMORY[0x1A1AD61C4](v1 + 80);
  std::streambuf::~streambuf();
  JUMPOUT(0x1A1AD6260);
}

_QWORD *`anonymous namespace'::VisitValue(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD v4[3];

  result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v4, a1);
  while (v4[0])
  {
    result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(v4);
  }
  return result;
}

_QWORD *`anonymous namespace'::VisitValue(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  if (*(int *)(a1 + 72) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v5 + 8);
      result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v16, *(_QWORD **)(v6 + 40));
      while (v16[0])
      {
        v7 = *(_QWORD *)(v16[0] + 24);
        v8 = *(_DWORD *)(v7 + 48);
        if (v8 >= 1)
        {
          for (i = 0; i < v8; ++i)
          {
            v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * i + 8);
            if (*(_DWORD *)(v10 + 28) == 2)
            {
              v8 = *(_DWORD *)(v7 + 48);
            }
          }
        }
        result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(v16);
      }
      v11 = *(_QWORD *)(v6 + 88);
      if (v11)
        v12 = (uint64_t *)(v11 + 8);
      else
        v12 = 0;
      v13 = *(int *)(v6 + 80);
      if ((_DWORD)v13)
      {
        v14 = 8 * v13;
        do
        {
          v15 = *v12++;
          v14 -= 8;
        }
        while (v14);
      }
      ++v5;
    }
    while (v5 < *(int *)(a1 + 72));
  }
  return result;
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v11;

  v2 = *(_QWORD *)(*a1 + 32);
  if (v2)
    goto LABEL_2;
  v11 = 0;
  if (google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)a1, (uint64_t *)&v11))
  {
    v3 = a1[2] + 1;
LABEL_13:
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::SearchFrom(a1, v3);
    return a1;
  }
  v4 = a1[2];
  v5 = *(_QWORD *)(*(_QWORD *)(a1[1] + 32) + 8 * v4);
  v6 = (uint64_t)v11;
  v7 = (_QWORD *)v11[1];
  if (v7)
  {
    do
    {
      v8 = v7;
      v7 = (_QWORD *)*v7;
    }
    while (v7);
  }
  else
  {
    do
    {
      v8 = *(_QWORD **)(v6 + 16);
      v9 = *v8 == v6;
      v6 = (uint64_t)v8;
    }
    while (!v9);
  }
  v11 = v8;
  if (v8 == (_QWORD *)(v5 + 8))
  {
    v3 = v4 + 2;
    goto LABEL_13;
  }
  v2 = v8[4];
LABEL_2:
  *a1 = v2;
  return a1;
}

CoreML::Specification::MILSpec::Value_ImmediateValue *`anonymous namespace'::VisitValue(CoreML::Specification::MILSpec::Value_ImmediateValue *result, uint64_t a2)
{
  uint64_t *v2;
  CoreML::Specification::MILSpec::Value_ImmediateValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CoreML::Specification::MILSpec::Value *v15;
  uint64_t v16;

  v2 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
  if (*((_QWORD *)result + 3))
    v2 = (uint64_t *)*((_QWORD *)result + 3);
  v4 = result;
  switch(*((_DWORD *)v2 + 7))
  {
    case 1:
      v5 = *(_QWORD *)(a2 + 24);
      if (!v5)
        std::__throw_bad_function_call[abi:ne180100]();
      result = (CoreML::Specification::MILSpec::Value_ImmediateValue *)(*(uint64_t (**)(uint64_t, CoreML::Specification::MILSpec::Value_ImmediateValue *))(*(_QWORD *)v5 + 48))(v5, v4);
      break;
    case 2:
      if (*((_DWORD *)result + 11) == 3)
      {
        v8 = *((_QWORD *)result + 4);
      }
      else
      {
        CoreML::Specification::MILSpec::Value::clear_value((uint64_t)result);
        *((_DWORD *)v4 + 11) = 3;
        v8 = operator new();
        result = CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue((CoreML::Specification::MILSpec::Value_ImmediateValue *)v8);
        *((_QWORD *)v4 + 4) = v8;
      }
      if (*(_DWORD *)(v8 + 28) == 3)
      {
        v11 = *(_QWORD *)(v8 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v8);
        *(_DWORD *)(v8 + 28) = 3;
        v11 = operator new();
        result = CoreML::Specification::MILSpec::ListValue::ListValue((CoreML::Specification::MILSpec::ListValue *)v11);
        *(_QWORD *)(v8 + 16) = v11;
      }
      if (*(int *)(v11 + 24) >= 1)
      {
        v16 = 0;
        do
        while (v16 < *(int *)(v11 + 24));
      }
      break;
    case 3:
      if (*((_DWORD *)result + 11) == 3)
      {
        v6 = *((_QWORD *)result + 4);
      }
      else
      {
        CoreML::Specification::MILSpec::Value::clear_value((uint64_t)result);
        *((_DWORD *)v4 + 11) = 3;
        v6 = operator new();
        result = CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue((CoreML::Specification::MILSpec::Value_ImmediateValue *)v6);
        *((_QWORD *)v4 + 4) = v6;
      }
      if (*(_DWORD *)(v6 + 28) == 2)
      {
        v9 = *(_QWORD *)(v6 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v6);
        *(_DWORD *)(v6 + 28) = 2;
        v9 = operator new();
        result = CoreML::Specification::MILSpec::TupleValue::TupleValue((CoreML::Specification::MILSpec::TupleValue *)v9);
        *(_QWORD *)(v6 + 16) = v9;
      }
      if (*(int *)(v9 + 24) >= 1)
      {
        v12 = 0;
        do
        while (v12 < *(int *)(v9 + 24));
      }
      break;
    case 4:
      if (*((_DWORD *)result + 11) == 3)
      {
        v7 = *((_QWORD *)result + 4);
      }
      else
      {
        CoreML::Specification::MILSpec::Value::clear_value((uint64_t)result);
        *((_DWORD *)v4 + 11) = 3;
        v7 = operator new();
        result = CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue((CoreML::Specification::MILSpec::Value_ImmediateValue *)v7);
        *((_QWORD *)v4 + 4) = v7;
      }
      if (*(_DWORD *)(v7 + 28) == 4)
      {
        v10 = *(_QWORD *)(v7 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v7);
        *(_DWORD *)(v7 + 28) = 4;
        v10 = operator new();
        result = CoreML::Specification::MILSpec::DictionaryValue::DictionaryValue((CoreML::Specification::MILSpec::DictionaryValue *)v10);
        *(_QWORD *)(v7 + 16) = v10;
      }
      if (*(int *)(v10 + 24) >= 1)
      {
        v13 = 0;
        do
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13 + 8);
          v15 = *(CoreML::Specification::MILSpec::Value **)(v14 + 24);
          if (!v15)
          {
            v15 = (CoreML::Specification::MILSpec::Value *)operator new();
            CoreML::Specification::MILSpec::Value::Value(v15);
            *(_QWORD *)(v14 + 24) = v15;
          }
          ++v13;
        }
        while (v13 < *(int *)(v10 + 24));
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_19C8B8758(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

void std::__function::__func<`anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<`anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::~__func()
{
  JUMPOUT(0x1A1AD6260);
}

__n128 std::__function::__func<`anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<`anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D5B830;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<`anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<`anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D5B830;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<`anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<`anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::operator()(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v4;
  id v5;
  void *v6;
  std::__fs::filesystem::path *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  std::__fs::filesystem::path *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  std::__fs::filesystem::path v17;
  std::string __p;
  std::__fs::filesystem::path v19;

  if (**(_QWORD **)(a1 + 8))
    v2 = 0;
  else
    v2 = *(_DWORD *)(a2 + 44) == 5;
  if (v2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 16);
    objc_msgSend(**(id **)(a1 + 16), "path");
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v5, "UTF8String"));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);

    v6 = (void *)MEMORY[0x1E0C99E98];
    if ((v19.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v19;
    else
      v7 = (std::__fs::filesystem::path *)v19.__pn_.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "fileURLWithPath:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__pn_.__r_.__value_.__l.__data_);
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:options:error:", v9, 1, **(_QWORD **)(a1 + 24));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v10)
      goto LABEL_26;
    objc_msgSend(v9, "path");
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    __p.__r_.__value_.__r.__words[0] = objc_msgSend(v11, "UTF8String");
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v19.__pn_, &__p.__r_.__value_.__l.__data_);

    objc_msgSend(**(id **)(a1 + 16), "path");
    v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v17.__pn_.__r_.__value_.__r.__words[0] = objc_msgSend(v12, "UTF8String");
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &v17.__pn_.__r_.__value_.__l.__data_);

    std::__fs::filesystem::relative[abi:ne180100](&v17, &v19, (const std::__fs::filesystem::path *)&__p);
    if (SHIBYTE(v17.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v17.__pn_.__r_.__value_.__l.__size_)
      {
        v13 = (std::__fs::filesystem::path *)v17.__pn_.__r_.__value_.__r.__words[0];
        goto LABEL_19;
      }
    }
    else if (*((_BYTE *)&v17.__pn_.__r_.__value_.__s + 23))
    {
      v13 = &v17;
LABEL_19:
      v14 = (void *)MEMORY[0x1E0C99E98];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "fileURLWithPath:relativeToURL:", v15, **(_QWORD **)(a1 + 16));
      v16 = objc_claimAutoreleasedReturnValue();

      v9 = (void *)v16;
    }
    objc_msgSend(**(id **)(a1 + 32), "setObject:forKeyedSubscript:", v10, v9);
    if (SHIBYTE(v17.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__pn_.__r_.__value_.__l.__data_);
LABEL_26:

  }
}

void sub_19C8B8A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<`anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<`anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN12_GLOBAL__N_132LoadBlobFileReferencesIntoMemoryERN6CoreML13Specification5ModelEP5NSURLPU15__autoreleasingP7NSErrorE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<`anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::target_type()
{
}

void `anonymous namespace'::ResolveModelPathPlaceHolder(std::__fs::filesystem::path *a1, uint64_t a2, uint64_t a3)
{
  int64_t size;
  std::string *v6;
  void **v7;
  int64_t v8;
  char *v9;
  int v10;
  std::string *v11;
  int64_t v12;
  char *v13;
  char *v14;
  std::string::size_type v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string __p;
  void *v20[2];
  unsigned __int8 v21;
  std::string v22;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v22 = *(std::string *)a2;
  std::string::basic_string[abi:ne180100]<0>(v20, "@model_path");
  size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v22;
  else
    v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v21 & 0x80u) == 0)
    v7 = v20;
  else
    v7 = (void **)v20[0];
  if ((v21 & 0x80u) == 0)
    v8 = v21;
  else
    v8 = (int64_t)v20[1];
  if (v8)
  {
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v22.__r_.__value_.__l.__size_;
    if (size >= v8)
    {
      v9 = (char *)v6 + size;
      v10 = *(char *)v7;
      v11 = v6;
      do
      {
        v12 = size - v8;
        if (v12 == -1)
          break;
        v13 = (char *)memchr(v11, v10, v12 + 1);
        if (!v13)
          break;
        v14 = v13;
        if (!memcmp(v13, v7, v8))
        {
          if (v14 != v9)
          {
            v15 = v14 - (char *)v6;
            if (v14 - (char *)v6 != -1)
              goto LABEL_24;
          }
          break;
        }
        v11 = (std::string *)(v14 + 1);
        size = v9 - (v14 + 1);
      }
      while (size >= v8);
    }
  }
  else
  {
    v15 = 0;
LABEL_24:
    v16 = *(char *)(a3 + 23);
    if (v16 >= 0)
      v17 = (const std::string::value_type *)a3;
    else
      v17 = *(const std::string::value_type **)a3;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a3 + 23);
    else
      v18 = *(_QWORD *)(a3 + 8);
    std::string::replace(&v22, v15, v8, v17, v18);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)&v22);
  std::__fs::filesystem::__canonical(a1, (const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v21 < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_19C8B8D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__16394(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__16395(uint64_t a1)
{
  return std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 48);
}

void ___ZN12_GLOBAL__N_118SerializeModelSpecERN6CoreML13Specification5ModelE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(std::__shared_weak_count **)(v1 + 56);
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t *std::unique_ptr<`anonymous namespace'::MILBlobReader>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::Blob::StorageReader>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v5)
      operator delete(v5);
    MEMORY[0x1A1AD6260](v2, 0x10A0C408EF24B1CLL);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::Blob::StorageReader>>,0>(uint64_t a1)
{
  MIL::Blob::StorageReader *v2;

  v2 = *(MIL::Blob::StorageReader **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    MIL::Blob::StorageReader::~StorageReader(v2);
    MEMORY[0x1A1AD6260]();
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_19C8B8F24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C1E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C1E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<`anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<`anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::~__func()
{
  JUMPOUT(0x1A1AD6260);
}

__n128 std::__function::__func<`anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<`anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D5B888;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<`anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<`anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D5B888;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<`anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<`anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned __int8 *v5;
  MIL::Blob::StorageReader *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  std::string::size_type *v35;
  std::string::size_type v36;
  unint64_t v37;
  CoreML::Specification::MILSpec::protobuf_MIL_2eproto *RawDataView;
  const std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _DWORD *v47;
  std::string **v48;
  std::string *v49;
  std::string **v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const std::string::value_type *v60;
  char *v61;
  int *v62;
  char *v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  const std::string::value_type *v68;
  int *v69;
  std::string::size_type v70;
  int v71;
  int v72;
  uint64_t v73;
  const std::string::value_type *v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  const std::string::value_type *v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  const std::string::value_type *v89;
  std::string::size_type v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  const std::string::value_type *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  const std::string::value_type *v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  std::string::size_type size;
  unint64_t v112;
  unint64_t v113;
  void *v114;
  unint64_t v115;
  unint64_t v116;
  int v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  std::runtime_error *exception;
  std::__fs::filesystem::path __p;
  std::string pn;
  std::string v130;

  if (*(_DWORD *)(a2 + 44) != 5)
    return;
  v4 = *(_QWORD *)(a1 + 8);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
  else
    pn = __p.__pn_;
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>>>::find<std::string>((_QWORD *)v4, (unsigned __int8 *)&pn);
  if (!v5)
  {
    v6 = (MIL::Blob::StorageReader *)operator new();
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v130, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
    else
      v130 = pn;
    MEMORY[0x1A1AD54B0](v6, &v130);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&pn);
    v8 = v7;
    v9 = *(_QWORD *)(v4 + 8);
    if (v9)
    {
      v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
      v10.i16[0] = vaddlv_u8(v10);
      v11 = v10.u32[0];
      if (v10.u32[0] > 1uLL)
      {
        v2 = v7;
        if (v7 >= v9)
          v2 = v7 % v9;
      }
      else
      {
        v2 = (v9 - 1) & v7;
      }
      v12 = *(unsigned __int8 ***)(*(_QWORD *)v4 + 8 * v2);
      if (v12)
      {
        for (i = *v12; i; i = *(unsigned __int8 **)i)
        {
          v14 = *((_QWORD *)i + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)&pn))
            {
              MIL::Blob::StorageReader::~StorageReader(v6);
              MEMORY[0x1A1AD6260]();
              goto LABEL_87;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v2)
              break;
          }
        }
      }
    }
    v15 = operator new(0x30uLL);
    v16 = (_QWORD *)(v4 + 16);
    v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    v130.__r_.__value_.__l.__size_ = v4 + 16;
    v130.__r_.__value_.__s.__data_[16] = 0;
    *v15 = 0;
    v15[1] = v8;
    v17 = (std::string *)(v15 + 2);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v17, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)&pn.__r_.__value_.__l.__data_;
      v15[4] = *((_QWORD *)&pn.__r_.__value_.__l + 2);
    }
    v15[5] = v6;
    v130.__r_.__value_.__s.__data_[16] = 1;
    v18 = (float)(unint64_t)(*(_QWORD *)(v4 + 24) + 1);
    v19 = *(float *)(v4 + 32);
    if (v9 && (float)(v19 * (float)v9) >= v18)
    {
LABEL_77:
      v35 = *(std::string::size_type **)(*(_QWORD *)v4 + 8 * v2);
      v36 = v130.__r_.__value_.__r.__words[0];
      if (v35)
      {
        *(_QWORD *)v130.__r_.__value_.__l.__data_ = *v35;
      }
      else
      {
        *(_QWORD *)v130.__r_.__value_.__l.__data_ = *(_QWORD *)(v4 + 16);
        *(_QWORD *)(v4 + 16) = v36;
        *(_QWORD *)(*(_QWORD *)v4 + 8 * v2) = v16;
        if (!*(_QWORD *)v36)
          goto LABEL_86;
        v37 = *(_QWORD *)(*(_QWORD *)v36 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v37 >= v9)
            v37 %= v9;
        }
        else
        {
          v37 &= v9 - 1;
        }
        v35 = (std::string::size_type *)(*(_QWORD *)v4 + 8 * v37);
      }
      *v35 = v36;
LABEL_86:
      v130.__r_.__value_.__r.__words[0] = 0;
      ++*(_QWORD *)(v4 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v130);
LABEL_87:
      v5 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>>>::find<std::string>((_QWORD *)v4, (unsigned __int8 *)&pn);
      goto LABEL_88;
    }
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(v4 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_43;
    if (*(_QWORD *)&prime < v9)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 24) / *(float *)(v4 + 32));
      if (v9 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(v4 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_43:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = *(void **)v4;
          *(_QWORD *)v4 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *(int8x8_t *)(v4 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v4 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*v16;
          if (*v16)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v4 + 8 * v28) = v16;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v4 + 8 * v34))
                  {
                    *(_QWORD *)(*(_QWORD *)v4 + 8 * v34) = v27;
                    goto LABEL_68;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)v4 + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)v4 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_68:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_72;
        }
        v114 = *(void **)v4;
        *(_QWORD *)v4 = 0;
        if (v114)
          operator delete(v114);
        v9 = 0;
        *(_QWORD *)(v4 + 8) = 0;
      }
    }
LABEL_72:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v2 = v8 % v9;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
    goto LABEL_77;
  }
LABEL_88:
  RawDataView = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)MIL::Blob::StorageReader::GetRawDataView(*((MIL::Blob::StorageReader **)v5 + 5));
  v39 = (const std::string::value_type *)RawDataView;
  v41 = v40;
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  v42 = *(_DWORD *)(a2 + 44);
  if (v42 == 3)
  {
    v44 = *(_QWORD *)(a2 + 32);
  }
  else
  {
    if (v42 == 5)
    {
      v43 = *(_QWORD *)(a2 + 32);
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      *(_DWORD *)(a2 + 44) = 0;
    }
    CoreML::Specification::MILSpec::Value::clear_value(a2);
    *(_DWORD *)(a2 + 44) = 3;
    v44 = operator new();
    RawDataView = CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue((CoreML::Specification::MILSpec::Value_ImmediateValue *)v44);
    *(_QWORD *)(a2 + 32) = v44;
  }
  if (*(_DWORD *)(v44 + 28) == 1)
  {
    v45 = *(_QWORD *)(v44 + 16);
  }
  else
  {
    CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v44);
    *(_DWORD *)(v44 + 28) = 1;
    v45 = operator new();
    RawDataView = CoreML::Specification::MILSpec::TensorValue::TensorValue((CoreML::Specification::MILSpec::TensorValue *)v45);
    *(_QWORD *)(v44 + 16) = v45;
  }
  v46 = *(uint64_t **)(a2 + 24);
  if (!v46)
    v46 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
  if (*((_DWORD *)v46 + 7) == 1)
  {
    v47 = (_DWORD *)v46[2];
  }
  else
  {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(RawDataView);
    v47 = &CoreML::Specification::MILSpec::_TensorType_default_instance_;
  }
  switch(v47[20])
  {
    case 1:
      if (*(_DWORD *)(v45 + 28) == 3)
      {
        v59 = *(_QWORD *)(v45 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v45);
        *(_DWORD *)(v45 + 28) = 3;
        v59 = operator new();
        CoreML::Specification::MILSpec::TensorValue_RepeatedBools::TensorValue_RepeatedBools((CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)v59);
        *(_QWORD *)(v45 + 16) = v59;
      }
      v110 = 0;
      if (!v41)
        v39 = 0;
      memset(&v130, 0, sizeof(v130));
      if (!v41)
        goto LABEL_250;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v130, v41);
      size = v130.__r_.__value_.__l.__size_;
      v112 = v130.__r_.__value_.__l.__size_ + v41;
      v130.__r_.__value_.__l.__size_ += v41;
      if (size)
      {
        v113 = v112 - 1;
        if (((v112 - 1) ^ (size - 1)) <= 0x3F)
        {
          v110 = (int *)v130.__r_.__value_.__r.__words[0];
          goto LABEL_242;
        }
      }
      else
      {
        v113 = v112 - 1;
      }
      v110 = (int *)v130.__r_.__value_.__r.__words[0];
      v115 = v113 >> 6;
      if (v112 >= 0x41)
        v116 = v115;
      else
        v116 = 0;
      *(_QWORD *)(v130.__r_.__value_.__r.__words[0] + 8 * v116) = 0;
LABEL_242:
      v117 = size & 0x3F;
      v118 = (uint64_t *)&v110[2 * (size >> 6)];
      do
      {
        v119 = 1 << v117;
        if (*v39)
          v120 = *v118 | v119;
        else
          v120 = *v118 & ~v119;
        *v118 = v120;
        ++v39;
        v118 += v117 == 63;
        if (v117 == 63)
          v117 = 0;
        else
          ++v117;
        --v41;
      }
      while (v41);
LABEL_250:
      v121 = v130.__r_.__value_.__s.__data_[8] & 0x3F;
      if (v130.__r_.__value_.__l.__size_ > 0x3F || (v130.__r_.__value_.__s.__data_[8] & 0x3F) != 0)
      {
        v122 = 0;
        v123 = &v110[2 * (v130.__r_.__value_.__l.__size_ >> 6)];
        v124 = *(_DWORD *)(v59 + 16);
        do
        {
          v125 = *(_QWORD *)v110;
          if (v124 == *(_DWORD *)(v59 + 20))
          {
            google::protobuf::RepeatedField<BOOL>::Reserve((unsigned int *)(v59 + 16), v124 + 1);
            v124 = *(_DWORD *)(v59 + 16);
          }
          v126 = *(_QWORD *)(v59 + 24) + v124++;
          *(_DWORD *)(v59 + 16) = v124;
          *(_BYTE *)(v126 + 8) = (v125 & (1 << v122)) != 0;
          v110 += 2 * (v122 == 63);
          if (v122 == 63)
            v122 = 0;
          else
            ++v122;
        }
        while (v110 != v123 || v122 != v121);
        v110 = (int *)v130.__r_.__value_.__r.__words[0];
      }
      if (v110)
      {
        v94 = v110;
LABEL_263:
        operator delete(v94);
      }
LABEL_264:
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      break;
    case 0xA:
    case 0x15:
    case 0x19:
    case 0x1F:
    case 0x21:
    case 0x23:
    case 0x26:
    case 0x27:
      if (*(_DWORD *)(v45 + 28) == 7)
      {
        v48 = *(std::string ***)(v45 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v45);
        *(_DWORD *)(v45 + 28) = 7;
        v48 = (std::string **)operator new();
        CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)v48);
        *(_QWORD *)(v45 + 16) = v48;
      }
      v51 = (__int128 *)v48[2];
      v50 = v48 + 2;
      v49 = (std::string *)v51;
      if (v51 == &google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v50, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v49 = *v50;
      }
      std::string::append(v49, v39, v41);
      goto LABEL_264;
    case 0xB:
      if (*(_DWORD *)(v45 + 28) == 1)
      {
        v53 = *(_QWORD *)(v45 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v45);
        *(_DWORD *)(v45 + 28) = 1;
        v53 = operator new();
        CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::TensorValue_RepeatedFloats((CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)v53);
        *(_QWORD *)(v45 + 16) = v53;
      }
      if ((unint64_t)v41 >= 4)
        v68 = v39;
      else
        v68 = 0;
      memset(&v130, 0, sizeof(v130));
      std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&v130, v68, (uint64_t)&v68[v41 & 0xFFFFFFFFFFFFFFFCLL], v41 >> 2);
      v70 = v130.__r_.__value_.__l.__size_;
      v69 = (int *)v130.__r_.__value_.__r.__words[0];
      if (v130.__r_.__value_.__r.__words[0] == v130.__r_.__value_.__l.__size_)
        goto LABEL_190;
      v71 = *(_DWORD *)(v53 + 16);
      do
      {
        v72 = *v69;
        if (v71 == *(_DWORD *)(v53 + 20))
        {
          google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v53 + 16), v71 + 1);
          v71 = *(_DWORD *)(v53 + 16);
        }
        v73 = *(_QWORD *)(v53 + 24) + 4 * v71++;
        *(_DWORD *)(v53 + 16) = v71;
        *(_DWORD *)(v73 + 8) = v72;
        ++v69;
      }
      while (v69 != (int *)v70);
      goto LABEL_189;
    case 0xC:
      if (*(_DWORD *)(v45 + 28) == 6)
      {
        v55 = *(_QWORD *)(v45 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v45);
        *(_DWORD *)(v45 + 28) = 6;
        v55 = operator new();
        CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles((CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)v55);
        *(_QWORD *)(v45 + 16) = v55;
      }
      if ((unint64_t)v41 >= 8)
        v82 = v39;
      else
        v82 = 0;
      if ((v41 & 0xFFFFFFFFFFFFFFF8) == 0)
        goto LABEL_264;
      if (v41 < 0)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v83 = v41 >> 3;
      v84 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v41 >> 3);
      v62 = v84;
      if ((unint64_t)v41 >= 8)
        memmove(v84, v82, v41 & 0xFFFFFFFFFFFFFFF8);
      if (8 * v83)
      {
        v85 = 0;
        v86 = *(_DWORD *)(v55 + 16);
        do
        {
          v87 = *(_QWORD *)&v62[v85];
          if (v86 == *(_DWORD *)(v55 + 20))
          {
            google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v55 + 16), v86 + 1);
            v86 = *(_DWORD *)(v55 + 16);
          }
          v88 = *(_QWORD *)(v55 + 24) + 8 * v86++;
          *(_DWORD *)(v55 + 16) = v86;
          *(_QWORD *)(v88 + 8) = v87;
          v85 += 2;
        }
        while (2 * v83 != v85);
      }
      goto LABEL_219;
    case 0x16:
      if (*(_DWORD *)(v45 + 28) == 2)
      {
        v52 = *(_QWORD *)(v45 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v45);
        *(_DWORD *)(v45 + 28) = 2;
        v52 = operator new();
        CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts((CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)v52);
        *(_QWORD *)(v45 + 16) = v52;
      }
      if ((unint64_t)v41 >= 2)
        v60 = v39;
      else
        v60 = 0;
      if ((v41 & 0xFFFFFFFFFFFFFFFELL) == 0)
        goto LABEL_264;
      if (v41 < 0)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v61 = (char *)operator new(v41 & 0xFFFFFFFFFFFFFFFELL);
      v62 = (int *)v61;
      v63 = &v61[2 * (v41 >> 1)];
      if ((unint64_t)v41 >= 2)
        memmove(v61, v60, v41 & 0xFFFFFFFFFFFFFFFELL);
      if (v62 != (int *)v63)
      {
        v64 = 0;
        do
        {
          v65 = *(__int16 *)((char *)v62 + v64);
          v66 = *(_DWORD *)(v52 + 16);
          if (v66 == *(_DWORD *)(v52 + 20))
          {
            google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v52 + 16), v66 + 1);
            v66 = *(_DWORD *)(v52 + 16);
          }
          v67 = *(_QWORD *)(v52 + 24);
          *(_DWORD *)(v52 + 16) = v66 + 1;
          *(_DWORD *)(v67 + 4 * v66 + 8) = v65;
          v64 += 2;
        }
        while (2 * (v41 >> 1) != v64);
      }
      goto LABEL_220;
    case 0x17:
      if (*(_DWORD *)(v45 + 28) == 2)
      {
        v54 = *(_QWORD *)(v45 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v45);
        *(_DWORD *)(v45 + 28) = 2;
        v54 = operator new();
        CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts((CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)v54);
        *(_QWORD *)(v45 + 16) = v54;
      }
      if ((unint64_t)v41 >= 4)
        v74 = v39;
      else
        v74 = 0;
      if ((v41 & 0xFFFFFFFFFFFFFFFCLL) == 0)
        goto LABEL_264;
      if (v41 < 0)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v75 = v41 >> 2;
      v76 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v41 >> 2);
      v62 = v76;
      if ((unint64_t)v41 >= 4)
        memmove(v76, v74, v41 & 0xFFFFFFFFFFFFFFFCLL);
      v77 = 4 * v75;
      if (4 * v75)
      {
        v78 = 0;
        do
        {
          v79 = v62[v78 / 4];
          v80 = *(_DWORD *)(v54 + 16);
          if (v80 == *(_DWORD *)(v54 + 20))
          {
            google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v54 + 16), v80 + 1);
            v80 = *(_DWORD *)(v54 + 16);
          }
          v81 = *(_QWORD *)(v54 + 24);
          *(_DWORD *)(v54 + 16) = v80 + 1;
          *(_DWORD *)(v81 + 4 * v80 + 8) = v79;
          v78 += 4;
        }
        while (v77 != v78);
      }
      goto LABEL_219;
    case 0x18:
      if (*(_DWORD *)(v45 + 28) == 5)
      {
        v56 = *(_QWORD *)(v45 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v45);
        *(_DWORD *)(v45 + 28) = 5;
        v56 = operator new();
        CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts((CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)v56);
        *(_QWORD *)(v45 + 16) = v56;
      }
      if ((unint64_t)v41 >= 8)
        v89 = v39;
      else
        v89 = 0;
      memset(&v130, 0, sizeof(v130));
      std::vector<long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(&v130, v89, (uint64_t)&v89[v41 & 0xFFFFFFFFFFFFFFF8], v41 >> 3);
      v90 = v130.__r_.__value_.__l.__size_;
      v69 = (int *)v130.__r_.__value_.__r.__words[0];
      if (v130.__r_.__value_.__r.__words[0] == v130.__r_.__value_.__l.__size_)
        goto LABEL_190;
      v91 = *(_DWORD *)(v56 + 16);
      do
      {
        v92 = *v69;
        if (v91 == *(_DWORD *)(v56 + 20))
        {
          google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v56 + 16), v91 + 1);
          v91 = *(_DWORD *)(v56 + 16);
        }
        v93 = *(_QWORD *)(v56 + 24) + 8 * v91++;
        *(_DWORD *)(v56 + 16) = v91;
        *(_QWORD *)(v93 + 8) = v92;
        v69 += 2;
      }
      while (v69 != (int *)v90);
LABEL_189:
      v69 = (int *)v130.__r_.__value_.__r.__words[0];
LABEL_190:
      if (!v69)
        goto LABEL_264;
      v94 = v69;
      goto LABEL_263;
    case 0x20:
      if (*(_DWORD *)(v45 + 28) == 2)
      {
        v57 = *(_QWORD *)(v45 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v45);
        *(_DWORD *)(v45 + 28) = 2;
        v57 = operator new();
        CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts((CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)v57);
        *(_QWORD *)(v45 + 16) = v57;
      }
      if ((unint64_t)v41 >= 2)
        v95 = v39;
      else
        v95 = 0;
      if ((v41 & 0xFFFFFFFFFFFFFFFELL) == 0)
        goto LABEL_264;
      if (v41 < 0)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v96 = (char *)operator new(v41 & 0xFFFFFFFFFFFFFFFELL);
      v62 = (int *)v96;
      v97 = &v96[2 * (v41 >> 1)];
      if ((unint64_t)v41 >= 2)
        memmove(v96, v95, v41 & 0xFFFFFFFFFFFFFFFELL);
      if (v62 != (int *)v97)
      {
        v98 = 0;
        do
        {
          v99 = *(unsigned __int16 *)((char *)v62 + v98);
          v100 = *(_DWORD *)(v57 + 16);
          if (v100 == *(_DWORD *)(v57 + 20))
          {
            google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v57 + 16), v100 + 1);
            v100 = *(_DWORD *)(v57 + 16);
          }
          v101 = *(_QWORD *)(v57 + 24);
          *(_DWORD *)(v57 + 16) = v100 + 1;
          *(_DWORD *)(v101 + 4 * v100 + 8) = v99;
          v98 += 2;
        }
        while (2 * (v41 >> 1) != v98);
      }
      goto LABEL_220;
    case 0x22:
      if (*(_DWORD *)(v45 + 28) == 5)
      {
        v58 = *(_QWORD *)(v45 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v45);
        *(_DWORD *)(v45 + 28) = 5;
        v58 = operator new();
        CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts((CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)v58);
        *(_QWORD *)(v45 + 16) = v58;
      }
      if ((unint64_t)v41 >= 8)
        v102 = v39;
      else
        v102 = 0;
      if ((v41 & 0xFFFFFFFFFFFFFFF8) == 0)
        goto LABEL_264;
      if (v41 < 0)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v103 = v41 >> 3;
      v104 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v41 >> 3);
      v62 = v104;
      if ((unint64_t)v41 >= 8)
        memmove(v104, v102, v41 & 0xFFFFFFFFFFFFFFF8);
      v105 = 8 * v103;
      if (8 * v103)
      {
        v106 = 0;
        v107 = *(_DWORD *)(v58 + 16);
        do
        {
          v108 = v62[v106 / 4];
          if (v107 == *(_DWORD *)(v58 + 20))
          {
            google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v58 + 16), v107 + 1);
            v107 = *(_DWORD *)(v58 + 16);
          }
          v109 = *(_QWORD *)(v58 + 24) + 8 * v107++;
          *(_DWORD *)(v58 + 16) = v107;
          *(_QWORD *)(v109 + 8) = v108;
          v106 += 8;
        }
        while (v105 != v106);
      }
LABEL_219:
      if (!v62)
        goto LABEL_264;
LABEL_220:
      v94 = v62;
      goto LABEL_263;
    default:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v130);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130.__r_.__value_.__r.__words[2], (uint64_t)"Failed to set value for DataType=", 33);
      std::ostream::operator<<();
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &pn);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_19C8B9F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,_QWORD *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  void *v42;
  int v43;
  uint64_t v45;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v43 & 1) == 0)
    {
LABEL_6:
      a23 = (_QWORD *)*MEMORY[0x1E0DE4F50];
      v45 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(_QWORD **)((char *)&a23 + *(a23 - 3)) = *(_QWORD **)(MEMORY[0x1E0DE4F50] + 64);
      a25 = v45;
      a26 = MEMORY[0x1E0DE4FB8] + 16;
      if (a39 < 0)
        operator delete(a34);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD61C4](&a42);
      if (a15 < 0)
        operator delete(a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v42);
  goto LABEL_6;
}

uint64_t std::__function::__func<`anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<`anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN12_GLOBAL__N_169ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValuesERN6CoreML13Specification5ModelEP5NSURLPU15__autoreleasingP7NSErrorE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<`anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::target_type()
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void google::protobuf::RepeatedField<BOOL>::Reserve(unsigned int *a1, int a2)
{
  signed int v2;
  google::protobuf::Arena **v4;
  google::protobuf::Arena *v5;
  int v6;
  int v7;
  _QWORD *Aligned;
  size_t v9;

  v2 = a1[1];
  if (v2 < a2)
  {
    v4 = (google::protobuf::Arena **)*((_QWORD *)a1 + 1);
    if (v4)
      v5 = *v4;
    else
      v5 = 0;
    v6 = 2 * v2;
    if (v6 <= a2)
      v6 = a2;
    if (v6 <= 4)
      v7 = 4;
    else
      v7 = v6;
    if (v5)
      Aligned = google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x1E0DE4EC8], (v7 + 8));
    else
      Aligned = operator new((v7 + 8));
    *((_QWORD *)a1 + 1) = Aligned;
    *Aligned = v5;
    a1[1] = v7;
    v9 = *a1;
    if ((int)v9 >= 1)
      memcpy(Aligned + 1, v4 + 1, v9);
    if (v4)
    {
      if (!*v4)
        operator delete(v4);
    }
  }
}

void google::protobuf::RepeatedField<float>::Reserve(unsigned int *a1, int a2)
{
  signed int v2;
  google::protobuf::Arena **v4;
  google::protobuf::Arena *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *Aligned;
  uint64_t v10;

  v2 = a1[1];
  if (v2 < a2)
  {
    v4 = (google::protobuf::Arena **)*((_QWORD *)a1 + 1);
    if (v4)
      v5 = *v4;
    else
      v5 = 0;
    v6 = 2 * v2;
    if (v6 <= a2)
      v6 = a2;
    if (v6 <= 4)
      v7 = 4;
    else
      v7 = v6;
    v8 = 4 * v7;
    if (v5)
      Aligned = google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x1E0DE4EC8], v8 + 8);
    else
      Aligned = operator new(v8 + 8);
    *((_QWORD *)a1 + 1) = Aligned;
    *Aligned = v5;
    a1[1] = v7;
    v10 = *a1;
    if ((int)v10 >= 1)
      memcpy(Aligned + 1, v4 + 1, 4 * v10);
    if (v4)
    {
      if (!*v4)
        operator delete(v4);
    }
  }
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<_KDInterval>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C8BA440(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::Blob::StorageReader>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void sub_19C8BA6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_19C8BA9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  void (**v8)(_QWORD);
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a6);
  XGBoostDataFormat::~XGBoostDataFormat((XGBoostDataFormat *)va);

  v8[2](v8);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)(v10 - 120));

  _Unwind_Resume(a1);
}

void sub_19C8BAAB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8BAD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void (**v7)(_QWORD);
  void *v8;
  va_list va;

  va_start(va, a5);
  XGBoostDataFormat::~XGBoostDataFormat((XGBoostDataFormat *)va);

  v7[2](v7);
  _Unwind_Resume(a1);
}

void sub_19C8BADD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8BB150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  XGBoostDataFormat *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  XGBoostDataFormat::~XGBoostDataFormat(v14);
  _Unwind_Resume(a1);
}

void sub_19C8BB3C0(_Unwind_Exception *a1)
{
  void *v1;
  XGBoostDataFormat *v2;
  void *v3;

  XGBoostDataFormat::~XGBoostDataFormat(v2);
  _Unwind_Resume(a1);
}

void sub_19C8BB9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_19C8BBBFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8BBCC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8BC084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C8BC314(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v5;

  _Unwind_Resume(a1);
}

void sub_19C8BC5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_19C8BC7BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8BC99C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8BCA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLTreeEnsembleXGBoostClassifier;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

uint64_t softLink_XGBoosterFree(void *a1)
{
  void *v2;
  void *v3;
  _Unwind_Exception *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getXGBoosterFreeSymbolLoc(void)::ptr;
  v9 = getXGBoosterFreeSymbolLoc(void)::ptr;
  if (!getXGBoosterFreeSymbolLoc(void)::ptr)
  {
    v3 = (void *)XGBoostFrameworkLibrary();
    v2 = dlsym(v3, "XGBoosterFree");
    v7[3] = (uint64_t)v2;
    getXGBoosterFreeSymbolLoc(void)::ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return ((uint64_t (*)(void *))v2)(a1);
}

uint64_t XGBoostFrameworkLibrary(void)
{
  uint64_t v0;
  void *v2;

  if (XGBoostFrameworkLibraryCore(char **)::frameworkLibrary)
    return XGBoostFrameworkLibraryCore(char **)::frameworkLibrary;
  XGBoostFrameworkLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = XGBoostFrameworkLibraryCore(char **)::frameworkLibrary;
  if (!XGBoostFrameworkLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void XGBoostDataFormat::~XGBoostDataFormat(XGBoostDataFormat *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t softLink_XGDMatrixCreateFromMat(const float *a1, uint64_t a2, uint64_t a3, float a4, void *a5)
{
  void *v9;
  void *v10;
  _Unwind_Exception *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v9 = getXGDMatrixCreateFromMatSymbolLoc(void)::ptr;
  v16 = getXGDMatrixCreateFromMatSymbolLoc(void)::ptr;
  if (!getXGDMatrixCreateFromMatSymbolLoc(void)::ptr)
  {
    v10 = (void *)XGBoostFrameworkLibrary();
    v9 = dlsym(v10, "XGDMatrixCreateFromMat");
    v14[3] = (uint64_t)v9;
    getXGDMatrixCreateFromMatSymbolLoc(void)::ptr = v9;
  }
  _Block_object_dispose(&v13, 8);
  if (!v9)
  {
    dlerror();
    v12 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v13, 8);
    _Unwind_Resume(v12);
  }
  return ((uint64_t (*)(const float *, uint64_t, uint64_t, void *, float))v9)(a1, a2, a3, a5, -1.0);
}

uint64_t softLink_XGBoosterPredict(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, unint64_t *a6, const float **a7)
{
  void *v11;
  void *v12;
  _Unwind_Exception *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v11 = getXGBoosterPredictSymbolLoc(void)::ptr;
  v18 = getXGBoosterPredictSymbolLoc(void)::ptr;
  if (!getXGBoosterPredictSymbolLoc(void)::ptr)
  {
    v12 = (void *)XGBoostFrameworkLibrary();
    v11 = dlsym(v12, "XGBoosterPredict");
    v16[3] = (uint64_t)v11;
    getXGBoosterPredictSymbolLoc(void)::ptr = v11;
  }
  _Block_object_dispose(&v15, 8);
  if (!v11)
  {
    dlerror();
    v14 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v15, 8);
    _Unwind_Resume(v14);
  }
  return ((uint64_t (*)(void *, void *, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v11)(a1, a2, 0, 0, 0, a3, a4);
}

uint64_t softLink_XGDMatrixFree(void *a1)
{
  void *v2;
  void *v3;
  _Unwind_Exception *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getXGDMatrixFreeSymbolLoc(void)::ptr;
  v9 = getXGDMatrixFreeSymbolLoc(void)::ptr;
  if (!getXGDMatrixFreeSymbolLoc(void)::ptr)
  {
    v3 = (void *)XGBoostFrameworkLibrary();
    v2 = dlsym(v3, "XGDMatrixFree");
    v7[3] = (uint64_t)v2;
    getXGDMatrixFreeSymbolLoc(void)::ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return ((uint64_t (*)(void *))v2)(a1);
}

void sub_19C8BD070(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::NeuralNetwork::UpdatableNeuralNetworkMLComputeBackend::~UpdatableNeuralNetworkMLComputeBackend(void **this)
{
  CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::~NeuralNetworkEspressoNetBackend(this);
  JUMPOUT(0x1A1AD6260);
}

void CoreML::NNCompiler::Backend::NeuralNetwork::UpdatableNeuralNetworkMLComputeBackend::Compile(CoreML::NNCompiler::Backend::NeuralNetwork::UpdatableNeuralNetworkMLComputeBackend *this, OArchive *a2)
{
  google::protobuf::MessageLite *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  char *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  google::protobuf::MessageLite *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  CoreML::MLModelException *exception;
  NSError *v20;
  CoreML::MLModelException *v21;
  NSError *v22;
  CoreML::MLModelException *v23;
  NSError *v24;
  google::protobuf::MessageLite *v25;
  void *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void *v32[2];
  char v33;
  void *__p;
  void (**v35)(google::protobuf::io::OstreamOutputStream::CopyingOstreamOutputStream *__hidden);
  uint64_t v36;
  void (**v37)(google::protobuf::io::CopyingOutputStreamAdaptor *__hidden);
  void (***v38)(google::protobuf::io::OstreamOutputStream::CopyingOstreamOutputStream *__hidden);
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 1) + 48))(*((_QWORD *)a2 + 1)) == 1)
  {
    exception = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    +[MLModelErrorUtils IOErrorWithFormat:](MLModelErrorUtils, "IOErrorWithFormat:", CFSTR("UpdatableNeuralNetworkMLComputeBackend doesn't support in-memory compilation."));
    v20 = (NSError *)objc_claimAutoreleasedReturnValue();
    CoreML::MLModelException::MLModelException(exception, v20);
  }
  CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::Compile(this, a2);
  v4 = (google::protobuf::MessageLite *)*((_QWORD *)this + 1);
  v7 = (char *)this + 16;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v5 = *((_QWORD *)v7 + 1);
  v25 = v4;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (google::protobuf::MessageLite *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  std::string::basic_string[abi:ne180100]<0>(v32, "NetworkUpdateParameters");
  std::string::basic_string[abi:ne180100]<0>(&__p, "updateParameters");
  v11 = OArchive::nestedArchive((char *)a2, (uint64_t)&__p);
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  (*(void (**)(_QWORD))(**((_QWORD **)v11 + 1) + 56))(*((_QWORD *)v11 + 1));
  v12 = OArchive::nestedArchive(v11, (uint64_t)v32);
  (*(void (**)(_QWORD))(**((_QWORD **)v12 + 1) + 56))(*((_QWORD *)v12 + 1));
  v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v12 + 1) + 56))(*((_QWORD *)v12 + 1));
  __p = &off_1E3D59908;
  v35 = &off_1E3D598E0;
  v36 = v13;
  v37 = &off_1E3D59990;
  v38 = &v35;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0x2000;
  if ((google::protobuf::MessageLite::SerializeToZeroCopyStream(v10, (google::protobuf::io::ZeroCopyOutputStream *)&__p) & 1) != 0)
  {
    CoreML::Result::Result((CoreML::Result *)&v29);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "unable to serialize object");
    v29 = 4;
    std::operator+<char>();
    if (SHIBYTE(v27) < 0)
      operator delete(v26);
  }
  google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)&__p);
  if (v33 < 0)
    operator delete(v32[0]);
  if ((v29 & 0xFFFFFFEF) != 0)
  {
    v21 = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    +[MLModelErrorUtils IOErrorWithFormat:](MLModelErrorUtils, "IOErrorWithFormat:", CFSTR("Failed to archive update parameters."), v25, v6);
    v22 = (NSError *)objc_claimAutoreleasedReturnValue();
    CoreML::MLModelException::MLModelException(v21, v22);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "entireSpec");
  v14 = OArchive::nestedArchive((char *)a2, (uint64_t)&__p);
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  (*(void (**)(_QWORD))(**((_QWORD **)v14 + 1) + 56))(*((_QWORD *)v14 + 1));
  v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v14 + 1) + 56))(*((_QWORD *)v14 + 1));
  __p = &off_1E3D59908;
  v35 = &off_1E3D598E0;
  v36 = v15;
  v37 = &off_1E3D59990;
  v38 = &v35;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0x2000;
  if ((google::protobuf::MessageLite::SerializeToZeroCopyStream(v4, (google::protobuf::io::ZeroCopyOutputStream *)&__p) & 1) != 0)
  {
    CoreML::Result::Result((CoreML::Result *)&v26);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "unable to serialize object");
    v26 = (void *)4;
    std::operator+<char>();
    if (v33 < 0)
      operator delete(v32[0]);
  }
  google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)&__p);
  v16 = (int)v26;
  v29 = (uint64_t)v26;
  if (SHIBYTE(v31) < 0)
  {
    operator delete((void *)v30);
    v16 = v29;
  }
  v30 = v27;
  v31 = v28;
  if ((v16 & 0xFFFFFFEF) != 0)
  {
    v23 = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    +[MLModelErrorUtils IOErrorWithFormat:](MLModelErrorUtils, "IOErrorWithFormat:", CFSTR("Failed to archive entire spec."), v25, v6);
    v24 = (NSError *)objc_claimAutoreleasedReturnValue();
    CoreML::MLModelException::MLModelException(v23, v24);
  }
  if (SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19C8BD63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C8BDD54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8BE61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C8BE8AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8BE92C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8BE984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8BF274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;

  _Unwind_Resume(a1);
}

void sub_19C8BF4E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8BF540(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8C0024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

void sub_19C8C033C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t CoreML::Archiver::PackedIntegerVector::push_back(CoreML::Archiver::PackedIntegerVector *this, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = (uint64_t *)((char *)this + 16);
  v5 = *((unsigned int *)this + 1);
  v6 = *((_QWORD *)this + 1) * v5;
  if ((v6 >> 6) + 2 >= *((_QWORD *)this + 2))
  {
    do
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)this + 32, v4, (void **)this + 3, 1);
    while ((v6 >> 6) + 2 >= *v4);
    LODWORD(v5) = *((_DWORD *)this + 1);
  }
  if ((_DWORD)v5 == 64)
    v7 = -1;
  else
    v7 = ~(-1 << v5);
  *(_QWORD *)(*((_QWORD *)this + 3) + 8 * (v6 >> 6) + ((v6 >> 3) & 7)) = *(_QWORD *)(*((_QWORD *)this + 3)
                                                                                   + 8 * (v6 >> 6)
                                                                                   + ((v6 >> 3) & 7)) & ~(v7 << (v6 & 7)) | (a2 << (v6 & 7));
  result = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = result + 1;
  return result;
}

void CoreML::Archiver::PackedIntegerVector::export_to_image(char *a1, char **a2, int a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  int v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CoreML::Archiver::MMappedContentManager *v27;
  _QWORD v28[2];
  _OWORD __src[2];
  CoreML::Archiver::MMappedContentManager *v30;
  _QWORD v31[3];

  v6 = a2[1];
  v7 = ((_BYTE)v6 - *(_DWORD *)a2) & 7;
  if ((((_BYTE)v6 - *(_DWORD *)a2) & 7) != 0)
  {
    LOBYTE(__src[0]) = 0;
    std::vector<unsigned char>::insert(a2, v6, 8 - v7, (char *)__src);
  }
  v8 = *((_QWORD *)a1 + 1);
  if (!v8)
    goto LABEL_17;
  v9 = 0;
  v10 = 0;
  v11 = *((unsigned int *)a1 + 1);
  v12 = *((_QWORD *)a1 + 1);
  do
  {
    v13 = *(_QWORD *)(*((_QWORD *)a1 + 3) + (v9 >> 3));
    if ((_DWORD)v11 != 64)
      v13 = (v13 >> (v9 & 7)) & ~(-1 << v11);
    v10 |= v13;
    v9 += v11;
    --v12;
  }
  while (v12);
  if (v10)
  {
    v14 = 0;
    do
      v15 = (unint64_t)++v14 > 0x3F || v10 >> v14 == 0;
    while (!v15);
    if (!a3)
      goto LABEL_24;
  }
  else
  {
LABEL_17:
    LODWORD(v14) = 1;
    if (!a3)
    {
LABEL_24:
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)a2, a2[1], a1, a1 + 4, 4);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)a2, a2[1], a1 + 4, a1 + 8, 4);
      v18 = a1 + 16;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)a2, a2[1], a1 + 8, a1 + 16, 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)a2, a2[1], a1 + 16, a1 + 24, 8);
      if (*((_QWORD *)a1 + 1))
      {
        v19 = (char *)*((_QWORD *)a1 + 3);
        *(_QWORD *)&__src[0] = *v18;
        std::vector<unsigned char>::reserve((unint64_t *)a2, &a2[1][*(_QWORD *)&__src[0]] - *a2 + 8);
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)a2, a2[1], (char *)__src, (char *)__src + 8, 8);
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)a2, a2[1], v19, &v19[8 * *(_QWORD *)&__src[0]], 8 * *(_QWORD *)&__src[0]);
      }
      v20 = a2[1];
      v21 = ((_BYTE)v20 - *(_DWORD *)a2) & 7;
      if ((((_BYTE)v20 - *(_DWORD *)a2) & 7) != 0)
      {
        LOBYTE(__src[0]) = 0;
        std::vector<unsigned char>::insert(a2, v20, 8 - v21, (char *)__src);
      }
      return;
    }
  }
  v16 = *((_DWORD *)a1 + 1);
  if ((_DWORD)v14 == v16)
    goto LABEL_24;
  v31[0] = 0;
  v31[1] = 0;
  memset(__src, 0, sizeof(__src));
  v30 = (CoreML::Archiver::MMappedContentManager *)v31;
  if ((v14 - 25) >= 0x27)
    v17 = 0;
  else
    v17 = -(int)v14 & 7;
  DWORD1(__src[0]) = v17 + v14;
  if (v17 + (_DWORD)v14 == v16)
  {
    CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v30);
    goto LABEL_24;
  }
  v28[0] = 0;
  v28[1] = 0;
  v27 = (CoreML::Archiver::MMappedContentManager *)v28;
  if (v8)
  {
    v22 = 0;
    do
    {
      v23 = *((unsigned int *)a1 + 1);
      v24 = *(_QWORD *)(*((_QWORD *)a1 + 3) + ((v22 * v23) >> 3));
      v15 = (_DWORD)v23 == 64;
      v25 = (v24 >> ((v22 * v23) & 7)) & ~(-1 << v23);
      if (v15)
        v26 = v24;
      else
        v26 = v25;
      CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)__src, v26);
      ++v22;
    }
    while (v22 < *((_QWORD *)a1 + 1));
  }
  CoreML::Archiver::PackedIntegerVector::export_to_image(__src, a2, 0);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v27);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v30);
}

void sub_19C8C06E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  CoreML::Archiver::MMappedContentManager **v2;
  va_list va;

  va_start(va, a2);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)va);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(v2);
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios17::Ios17Backend::~Ios17Backend(CoreML::NNCompiler::Backend::MIL::Ios17::Ios17Backend *this)
{
  char *v1;

  *(_QWORD *)this = &off_1E3D4CB18;
  v1 = (char *)this + 8;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_1E3D4CB18;
  v1 = (char *)this + 8;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t CoreML::NNCompiler::Backend::MIL::Ios17::Ios17Backend::Compile(CoreML::NNCompiler::Backend::MIL::Ios17::Ios17Backend *this, objc_object *a2)
{
  _QWORD *v4;
  MIL::Opsets::Common::ios17::ios17Opset *v5;
  uint64_t OpsetName;
  unint64_t v7;
  size_t v8;
  const void *v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const IRProgram *v17;
  MIL::Util *v18;
  MIL::Util *v19;
  uint64_t result;
  MIL::Util *v21;
  void *v22[3];
  _QWORD v23[2];
  int v24;
  uint64_t v25;
  _BYTE v26[15];
  char v27;
  __int128 v28;
  unint64_t v29;
  MIL::Util *v30;
  uint64_t v31;
  __int128 __dst;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD v39[2];
  void **v40[2];
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  CoreML::NNCompiler::Backend::MIL::OptimizeProgram((CoreML::NNCompiler::Backend::MIL *)&v31, *((const IRProgram **)this + 1));
  std::string::basic_string[abi:ne180100]<0>(v40, "classify");
  v4 = v42;
  v42[0] = &off_1E3D5B620;
  v42[1] = CoreML::NNCompiler::Backend::MIL::Ios15::Translations::TranslateClassify;
  v43 = v42;
  v5 = (MIL::Opsets::Common::ios17::ios17Opset *)std::unordered_map<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>::unordered_map((uint64_t)&v34, (uint64_t)v40, 1);
  OpsetName = MIL::Opsets::Common::ios17::ios17Opset::GetOpsetName(v5);
  v8 = v7;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = (const void *)OpsetName;
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v33 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v33) = v7;
  p_dst = &__dst;
  if (v7)
LABEL_8:
    memmove(p_dst, v9, v8);
  *((_BYTE *)p_dst + v8) = 0;
  v13 = v34;
  v14 = v35;
  v34 = 0;
  v35 = 0;
  v22[0] = &off_1E3D4CA68;
  v22[1] = v13;
  v22[2] = (void *)v14;
  v23[0] = v36;
  v23[1] = v37;
  v24 = v38;
  if (v37)
  {
    v15 = *(_QWORD *)(v36 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14)
        v15 %= v14;
    }
    else
    {
      v15 &= v14 - 1;
    }
    *((_QWORD *)v13 + v15) = v23;
    v36 = 0;
    v37 = 0;
  }
  v25 = 0x374C4D65726F43;
  *(_QWORD *)v26 = v39[0];
  *(_QWORD *)&v26[7] = *(_QWORD *)((char *)v39 + 7);
  v27 = 7;
  v28 = __dst;
  v29 = v33;
  __dst = 0uLL;
  v33 = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)&v34);
  if (v43 == v42)
  {
    v16 = 4;
  }
  else
  {
    if (!v43)
      goto LABEL_20;
    v16 = 5;
    v4 = v43;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v16))(v4);
LABEL_20:
  if (v41 < 0)
    operator delete(v40[0]);
  v22[0] = &off_1E3D4CB40;
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::Translate(&v30, (const IRProgram *)v22, v31);
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(v22);
  CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetAttributesForFunctions((uint64_t)v30, *((_QWORD *)this + 3));
  MIL::Util::FindBlobFilePaths(v30, v17);
  v18 = v30;
  v30 = 0;
  v21 = v18;
  CoreML::NNCompiler::Backend::MIL::WriteProgram((uint64_t *)&v21, *(unsigned int *)(*((_QWORD *)this + 3) + 120), a2, *((_QWORD *)this + 3) + 56);
  if (v21)
    (*(void (**)(MIL::Util *))(*(_QWORD *)v21 + 8))(v21);
  CoreML::NNCompiler::Backend::MetadataUtils::WriteMetadataIos15(*((_QWORD *)this + 3), (uint64_t)a2);
  CoreML::NNCompiler::Backend::MIL::CopyWeights((uint64_t *)(*((_QWORD *)this + 3) + 56), (uint64_t **)v22, (uint64_t)a2);
  v40[0] = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
  v19 = v30;
  v30 = 0;
  if (v19)
    (*(void (**)(MIL::Util *))(*(_QWORD *)v19 + 8))(v19);
  result = v31;
  v31 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19C8C0A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  *(_QWORD *)(v24 - 128) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 128));
  v26 = a23;
  a23 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = a24;
  a24 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  _Unwind_Resume(a1);
}

void sub_19C8C0E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C8C1704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  CoreML::Specification::Optimizer::~Optimizer((CoreML::Specification::Optimizer *)&a9);
  _Unwind_Resume(a1);
}

void sub_19C8C1930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8C1AC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *_KDPriorityQueue::pop(_KDPriorityQueue *this)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  result = (_QWORD *)*((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if (v3 - (uint64_t)result >= 9)
  {
    v4 = 0;
    v5 = (v3 - (uint64_t)result) >> 3;
    v6 = *result;
    v7 = result;
    do
    {
      v8 = v7;
      v7 += v4 + 1;
      v9 = 2 * v4;
      v4 = (2 * v4) | 1;
      v10 = v9 + 2;
      if (v10 < v5 && *((float *)v7 + 1) < *((float *)v7 + 3))
      {
        ++v7;
        v4 = v10;
      }
      *v8 = *v7;
    }
    while (v4 <= (uint64_t)((unint64_t)(v5 - 2) >> 1));
    v11 = (_QWORD *)(v3 - 8);
    if (v7 == v11)
    {
      *v7 = v6;
    }
    else
    {
      *v7 = *v11;
      *v11 = v6;
      result = (_QWORD *)std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,_KDPriorityQueueComparator &,std::__wrap_iter<_KDPriorityQueueElement *>>((uint64_t)result, (uint64_t)(v7 + 1), v7 + 1 - result);
    }
  }
  *((_QWORD *)this + 2) -= 8;
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,_KDPriorityQueueComparator &,std::__wrap_iter<_KDPriorityQueueElement *>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  float v4;
  uint64_t v5;
  int v6;
  int v7;
  _QWORD *v8;

  if (a3 >= 2)
  {
    v3 = (unint64_t)(a3 - 2) >> 1;
    v4 = *(float *)(a2 - 4);
    if (*(float *)(result + 8 * v3 + 4) < v4)
    {
      v7 = *(_DWORD *)(a2 - 8);
      v5 = a2 - 8;
      v6 = v7;
      do
      {
        v8 = (_QWORD *)v5;
        v5 = result + 8 * v3;
        *v8 = *(_QWORD *)v5;
        if (!v3)
          break;
        v3 = (v3 - 1) >> 1;
      }
      while (*(float *)(result + 8 * v3 + 4) < v4);
      *(_DWORD *)v5 = v6;
      *(float *)(v5 + 4) = v4;
    }
  }
  return result;
}

void sub_19C8C2A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C8C2BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C8C2CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

void sub_19C8C2E3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8C2F8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8C33C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_19C8C36A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C8C3BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a12);

  CoreML::Specification::LinkedModelFile::~LinkedModelFile((CoreML::Specification::LinkedModelFile *)va);
  _Unwind_Resume(a1);
}

void sub_19C8C3D50()
{
  JUMPOUT(0x19C8C3D3CLL);
}

void CoreML::BayesianProbitRegression::Gaussian::stdNormalCDF(CoreML::BayesianProbitRegression::Gaussian *this, double a2)
{
  double v2;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v2 = fabs(a2);
    if (v2 > 0.662912607)
      exp(-(v2 * v2) * 0.5);
  }
}

char **std::unique_ptr<CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters>::reset[abi:ne180100](char ***a1)
{
  char **result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters::~ImagePreprocessingParameters(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

uint64_t *std::unique_ptr<std::map<std::string,Espresso::net_configuration>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(*(_QWORD **)(v1 + 8));
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

_QWORD *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(_QWORD *result, uint64_t *a2, unint64_t a3)
{
  _QWORD *v4;
  std::string *v5;
  std::string *v6;
  __int128 v7;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  if (a3)
  {
    v4 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a3);
    v5 = (std::string *)v4[1];
    v11 = v5;
    v10 = v5;
    v8[0] = v4 + 2;
    v8[1] = &v10;
    v8[2] = &v11;
    v9 = 0;
    if (a2)
    {
      v6 = v5;
      do
      {
        if (*((char *)a2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)a2[2], a2[3]);
          v6 = v11;
        }
        else
        {
          v7 = *((_OWORD *)a2 + 1);
          v6->__r_.__value_.__r.__words[2] = a2[4];
          *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
        }
        a2 = (uint64_t *)*a2;
        v11 = ++v6;
      }
      while (a2);
    }
    else
    {
      v6 = v5;
    }
    v9 = 1;
    result = (_QWORD *)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
    v4[1] = v6;
  }
  return result;
}

void sub_19C8C45F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

char **std::__shared_ptr_pointer<CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters  *>::__on_zero_shared(uint64_t a1)
{
  char **result;

  result = *(char ***)(a1 + 24);
  if (result)
  {
    CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters::~ImagePreprocessingParameters(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN6CoreML10NNCompiler13NeuralNetwork28ImagePreprocessingParametersEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<std::map<std::string,Espresso::net_configuration> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_pointer<std::map<std::string,Espresso::net_configuration> *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(*(_QWORD **)(v1 + 8));
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::map<std::string,Espresso::net_configuration> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8Espresso17net_configurationENS_4lessIS7_EENS5_INS_4pairIKS7_S9_EEEEEEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_19C8C52DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;

  MEMORY[0x1A1AD6260](v41, 0x10A1C40EE95837BLL);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a37);

  _Unwind_Resume(a1);
}

void sub_19C8C5A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;

  MEMORY[0x1A1AD6260](v39, 0x10A1C40B6FDD44FLL);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a36);

  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::operator[](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  google::protobuf::Arena *v12;
  std::string *Aligned;
  std::string::__raw *v14;
  __int128 v15;
  google::protobuf::Arena **v16;
  google::protobuf::Arena *v17;
  google::protobuf::Arena *v18;
  std::string *v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  std::string __p;
  std::string::size_type v25;
  uint64_t v26[4];
  _QWORD v27[4];

  v4 = *(_QWORD **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v25 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v27, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  v6 = v27[0];
  if (v27[0])
    goto LABEL_18;
  v7 = v4[1];
  v8 = *v4 + 1;
  v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      v21 = 2 * v7;
LABEL_37:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize((uint64_t)v4, v21, v5);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      v11 = v26[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    v22 = 0;
    v23 = ((5 * v8) >> 2) + 1;
    do
      ++v22;
    while (v23 << v22 < v9);
    v21 = v7 >> v22 <= 8 ? 8 : v7 >> v22;
    if (v21 != v7)
      goto LABEL_37;
  }
  v11 = v27[3];
LABEL_11:
  v12 = (google::protobuf::Arena *)v4[5];
  if (v12)
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E0DE4EE8], 40);
  else
    Aligned = (std::string *)operator new(0x28uLL);
  v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v25;
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v26, (uint64_t)v4, v11, v14);
  ++*v4;
  v6 = v26[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (*(_QWORD *)a1)
    {
      v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E0DE4EE8], 56);
      v17 = *(google::protobuf::Arena **)a1;
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
      v18 = *(google::protobuf::Arena **)a1;
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)(v16 + 3));
      google::protobuf::Arena::OwnDestructor<CoreML::Specification::CustomModel_CustomModelParamValue>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
      std::string::operator=((std::string *)v16, (const std::string *)a2);
    }
    else
    {
      v19 = (std::string *)operator new();
      v16 = (google::protobuf::Arena **)v19;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)(v16 + 3));
    }
    *(_QWORD *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_19C8C5E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1A1AD6260](v14, 0x10B2C4015637A22);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<CoreML::Specification::CustomModel_CustomModelParamValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  google::protobuf::Arena **v3;
  unint64_t *v4;
  unint64_t v5;

  if (a2)
  {
    v3 = result;
    result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>;
    v4 = (unint64_t *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void sub_19C8C6094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C8C6280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C8C6670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C8C6D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_19C8C6F90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned long,std::vector<double>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CoreML::NNCompiler::Frontend::MIL::Util::ValidateSpecIsConsistent(CoreML::Result *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 **v23;
  char v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  const void **v28;
  unsigned __int8 *v29;
  uint64_t v30;
  const void **v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  const void **v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  _DWORD *v40;
  void *v41;
  int v42;
  uint64_t v43;
  CoreML::Result *v44;
  unsigned __int8 *v45;
  _QWORD *v46;
  _QWORD *v47;
  std::string *v48;
  std::string::size_type size;
  _QWORD *v50;
  std::string::size_type v51;
  uint64_t v52;
  unsigned __int8 **v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  const void **v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 **v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  int v66;
  const void **v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  void **v73;
  uint64_t v74;
  __int128 *v75;
  __int128 v76;
  uint64_t v77;
  const CoreML::NNCompiler::MLFunctionInfo *v78;
  char v79;
  _QWORD *v80;
  std::string *v81;
  std::string::size_type v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  __int128 v91;
  MIL::IRValueType *v92;
  uint64_t *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  const CoreML::Specification::FeatureDescription **v97;
  uint64_t v98;
  const CoreML::Specification::FeatureDescription **v99;
  const CoreML::Specification::FeatureDescription *v100;
  unsigned __int8 *v101;
  uint64_t v102;
  size_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unsigned __int8 *v112;
  CoreML::Specification::FeatureDescription *v113;
  CoreML::Specification::FeatureDescription *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  const CoreML::Specification::FeatureDescription **v118;
  _DWORD *v119;
  int v120;
  unsigned int v121;
  int v122;
  std::string::size_type v123;
  std::string::size_type v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  const std::string::value_type *v138;
  unsigned __int8 *v139;
  MIL::IRValueType *v140;
  uint64_t *v141;
  void *v142;
  std::string *v143;
  __int128 v144;
  std::string *v145;
  __int128 v146;
  int v147;
  const std::string::value_type *v148;
  std::string::size_type v149;
  std::string *v150;
  __int128 v151;
  std::string *v152;
  __int128 v153;
  int v154;
  const std::string::value_type *v155;
  std::string::size_type v156;
  std::string *v157;
  __int128 v158;
  std::string *v159;
  __int128 v160;
  const CoreML::NNCompiler::MLFunctionInfo *v161;
  uint64_t v162;
  uint64_t v163;
  const CoreML::Specification::FeatureDescription **v164;
  uint64_t v165;
  const CoreML::Specification::FeatureDescription **v166;
  const CoreML::Specification::FeatureDescription *v167;
  unsigned __int8 *v168;
  uint64_t v169;
  size_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  unsigned __int8 *v174;
  unsigned __int8 *v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  unsigned __int8 *v179;
  CoreML::Specification::FeatureDescription *v180;
  CoreML::Specification::FeatureDescription *v181;
  int v182;
  int v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  void **v187;
  uint64_t v188;
  uint64_t v189;
  __int128 *v190;
  __int128 v191;
  MIL::IRValueType *v192;
  uint64_t *v193;
  char v194;
  unsigned int v195;
  uint64_t v196;
  unsigned int *v197;
  const CoreML::Specification::FeatureDescription **v198;
  _DWORD *v199;
  int v200;
  unsigned int v201;
  int v202;
  std::string::size_type v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void **v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  const std::string::value_type *v218;
  unsigned __int8 *v219;
  MIL::IRValueType *v220;
  uint64_t *v221;
  void *v222;
  std::string *v223;
  __int128 v224;
  std::string *v225;
  __int128 v226;
  int v227;
  const std::string::value_type *v228;
  std::string::size_type v229;
  std::string *v230;
  __int128 v231;
  std::string *v232;
  __int128 v233;
  int v234;
  const std::string::value_type *v235;
  std::string::size_type v236;
  std::string *v237;
  __int128 v238;
  std::string *v239;
  __int128 v240;
  std::logic_error *exception;
  std::string *v242;
  __int128 v243;
  std::string *v244;
  std::string::size_type v245;
  std::string *v246;
  __int128 v247;
  std::string *v248;
  __int128 v249;
  uint64_t v250;
  int v251;
  const std::string::value_type *v252;
  std::string::size_type v253;
  std::string *v254;
  __int128 v255;
  std::string *v256;
  __int128 v257;
  std::string *v258;
  __int128 v259;
  uint64_t *v260;
  std::string::size_type v261;
  std::string::size_type v262;
  std::string::size_type v263;
  void **v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  CoreML::Result *v272;
  std::string v273;
  uint64_t v274;
  uint64_t v275[4];
  std::string v276;
  uint64_t v277;
  uint64_t v278[4];
  std::string __p;
  uint64_t v280;
  void *v281;
  void *v282;
  char v283;
  uint64_t v284;
  uint64_t v285;
  std::string v286;
  std::string v287;
  std::string v288;
  std::string v289;
  std::string v290;
  std::string v291;
  std::string v292;
  std::string v293;

  v4 = a4;
  if (*(_DWORD *)(a4 + 96))
  {
    v8 = *(__int128 **)(a4 + 152);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v286, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      v286.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v286.__r_.__value_.__l.__data_ = v9;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v286, "main");
  }
  v10 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 56))(a2, &v286);
  if (!v10)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"ML Program does not have a function named ", 42);
    if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v286;
    else
      v48 = (std::string *)v286.__r_.__value_.__r.__words[0];
    if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v286.__r_.__value_.__r.__words[2]);
    else
      size = v286.__r_.__value_.__l.__size_;
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)".", 1);
    std::stringbuf::str();
    *(_QWORD *)a1 = 12;
    std::operator+<char>();
    if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v293.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
    v51 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                              + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50]
                                                                                                + 64);
    __p.__r_.__value_.__r.__words[2] = v51;
    v280 = MEMORY[0x1E0DE4FB8] + 16;
    if (v283 < 0)
      operator delete(v282);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1A1AD61C4](&v285);
    goto LABEL_163;
  }
  v266 = v10;
  v267 = a2;
  v270 = v4;
  v272 = a1;
  if (*(_BYTE *)(a3 + 104))
  {
    v12 = *(_QWORD *)(a3 + 8);
    v11 = *(_QWORD *)(a3 + 16);
    v268 = a3;
    if (v12 != v11)
    {
      v13 = 0;
      v14 = (void **)((char *)a1 + 8);
      while (1)
      {
        v15 = *(_QWORD **)(*(_QWORD *)(v4 + 104) + 8 * v13 + 8);
        v16 = (unsigned __int8 *)v15[11];
        v17 = v16[23];
        if ((v17 & 0x80u) == 0)
          v18 = v16[23];
        else
          v18 = *((_QWORD *)v16 + 1);
        v19 = *(unsigned __int8 *)(v12 + 23);
        v20 = (char)v19;
        if ((v19 & 0x80u) != 0)
          v19 = *(_QWORD *)(v12 + 8);
        if (v18 != v19)
          goto LABEL_508;
        v21 = v20 >= 0 ? (unsigned __int8 *)v12 : *(unsigned __int8 **)v12;
        if ((v17 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v16, v21, *((_QWORD *)v16 + 1)))
            goto LABEL_508;
        }
        else if (v16[23])
        {
          while (*v16 == *v21)
          {
            ++v16;
            ++v21;
            if (!--v17)
              goto LABEL_25;
          }
LABEL_508:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v242 = std::string::append(&v288, " At function index ");
          v243 = *(_OWORD *)&v242->__r_.__value_.__l.__data_;
          v289.__r_.__value_.__r.__words[2] = v242->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v243;
          v242->__r_.__value_.__l.__size_ = 0;
          v242->__r_.__value_.__r.__words[2] = 0;
          v242->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v287, v13);
          if ((v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v244 = &v287;
          else
            v244 = (std::string *)v287.__r_.__value_.__r.__words[0];
          if ((v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v245 = HIBYTE(v287.__r_.__value_.__r.__words[2]);
          else
            v245 = v287.__r_.__value_.__l.__size_;
          v246 = std::string::append(&v289, (const std::string::value_type *)v244, v245);
          v247 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
          v290.__r_.__value_.__r.__words[2] = v246->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v247;
          v246->__r_.__value_.__l.__size_ = 0;
          v246->__r_.__value_.__r.__words[2] = 0;
          v246->__r_.__value_.__r.__words[0] = 0;
          v248 = std::string::append(&v290, " but the model description has ");
          v249 = *(_OWORD *)&v248->__r_.__value_.__l.__data_;
          v291.__r_.__value_.__r.__words[2] = v248->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v249;
          v248->__r_.__value_.__l.__size_ = 0;
          v248->__r_.__value_.__r.__words[2] = 0;
          v248->__r_.__value_.__r.__words[0] = 0;
          v250 = v15[11];
          v251 = *(char *)(v250 + 23);
          if (v251 >= 0)
            v252 = (const std::string::value_type *)v15[11];
          else
            v252 = *(const std::string::value_type **)v250;
          if (v251 >= 0)
            v253 = *(unsigned __int8 *)(v250 + 23);
          else
            v253 = *(_QWORD *)(v250 + 8);
          v254 = std::string::append(&v291, v252, v253);
          v255 = *(_OWORD *)&v254->__r_.__value_.__l.__data_;
          v292.__r_.__value_.__r.__words[2] = v254->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v255;
          v254->__r_.__value_.__l.__size_ = 0;
          v254->__r_.__value_.__r.__words[2] = 0;
          v254->__r_.__value_.__r.__words[0] = 0;
          v256 = std::string::append(&v292, " at the index. ");
          v257 = *(_OWORD *)&v256->__r_.__value_.__l.__data_;
          v293.__r_.__value_.__r.__words[2] = v256->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v257;
          v256->__r_.__value_.__l.__size_ = 0;
          v256->__r_.__value_.__r.__words[2] = 0;
          v256->__r_.__value_.__r.__words[0] = 0;
          v258 = std::string::append(&v293, "It's a logic error in MLModelInfo object initialization.");
          v259 = *(_OWORD *)&v258->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v258->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v259;
          v258->__r_.__value_.__l.__size_ = 0;
          v258->__r_.__value_.__r.__words[2] = 0;
          v258->__r_.__value_.__r.__words[0] = 0;
          std::logic_error::logic_error(exception, &__p);
          __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
LABEL_25:
        v22 = *(_QWORD *)(std::map<std::string,std::string>::at(v268 + 80, (_QWORD *)v12) + 272);
        v23 = (unsigned __int8 **)v15[12];
        v24 = *((_BYTE *)v23 + 23);
        if (!v22)
          break;
        if ((*((_BYTE *)v23 + 23) & 0x80) != 0)
        {
          if (!v23[1])
          {
LABEL_47:
            std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification does not declare a classifier, but the ML program does declare one.");
            *(_QWORD *)v272 = 0x110000000CLL;
            std::operator+<char>();
            goto LABEL_70;
          }
        }
        else if (!*((_BYTE *)v23 + 23))
        {
          goto LABEL_47;
        }
        v25 = *(unsigned __int8 *)(v22 + 47);
        if ((v25 & 0x80u) == 0)
          v26 = (unsigned __int8 *)*(unsigned __int8 *)(v22 + 47);
        else
          v26 = *(unsigned __int8 **)(v22 + 32);
        if (v24 >= 0)
          v27 = (unsigned __int8 *)*((unsigned __int8 *)v23 + 23);
        else
          v27 = v23[1];
        if (v26 != v27)
          goto LABEL_53;
        v28 = (const void **)(v22 + 24);
        if (v24 >= 0)
          v29 = (unsigned __int8 *)v15[12];
        else
          v29 = *v23;
        if ((v25 & 0x80) != 0)
        {
          if (memcmp(*v28, v29, *(_QWORD *)(v22 + 32)))
            goto LABEL_53;
        }
        else if (*(_BYTE *)(v22 + 47))
        {
          while (*(unsigned __int8 *)v28 == *v29)
          {
            v28 = (const void **)((char *)v28 + 1);
            ++v29;
            if (!--v25)
              goto LABEL_54;
          }
LABEL_53:
          std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification and ML program classifier predicted feature name do not match.");
          *(_QWORD *)v272 = 0x110000000CLL;
          std::operator+<char>();
          goto LABEL_70;
        }
LABEL_54:
        v31 = (const void **)v15[13];
        v32 = *(unsigned __int8 *)(v22 + 71);
        if ((v32 & 0x80u) == 0)
          v33 = (unsigned __int8 *)*(unsigned __int8 *)(v22 + 71);
        else
          v33 = *(unsigned __int8 **)(v22 + 56);
        v34 = (unsigned __int8 *)*((unsigned __int8 *)v31 + 23);
        v35 = (char)v34;
        if ((char)v34 < 0)
          v34 = (unsigned __int8 *)v31[1];
        if (v33 == v34)
        {
          v36 = (const void **)(v22 + 48);
          if (v35 >= 0)
            v37 = (unsigned __int8 *)v15[13];
          else
            v37 = (unsigned __int8 *)*v31;
          if ((v32 & 0x80) != 0)
          {
            if (!memcmp(*v36, v37, *(_QWORD *)(v22 + 56)))
            {
LABEL_79:
              if (v27)
              {
                v39 = *(_DWORD *)(v22 + 72);
                v40 = operator new(4uLL);
                v41 = v40;
                if (v39)
                  v42 = 3;
                else
                  v42 = 1;
                *v40 = v42;
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v40 + 1);
                v43 = (uint64_t)(v15 + 5);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v40 + 1);
                CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(v272, v43, (const void **)v23, (unsigned int **)&__p);
                operator delete(v41);
                if ((*(_DWORD *)v272 & 0xFFFFFFEF) == 0)
                {
                  v44 = v272;
                  if (*((char *)v272 + 31) < 0)
                    operator delete(*v14);
                  if (*((char *)v31 + 23) < 0)
                    v45 = (unsigned __int8 *)v31[1];
                  else
                    v45 = (unsigned __int8 *)*((unsigned __int8 *)v31 + 23);
                  if (v45)
                  {
                    v46 = operator new(8uLL);
                    *v46 = 0x600000005;
                    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v46 + 1);
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v46 + 1);
                    CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(v272, v43, v31, (unsigned int **)&__p);
                    operator delete(v46);
                    if ((*(_DWORD *)v272 & 0xFFFFFFEF) == 0)
                    {
                      v44 = v272;
                      if (*((char *)v272 + 31) < 0)
                        operator delete(*v14);
                      goto LABEL_95;
                    }
                  }
                  else
                  {
LABEL_95:
                    CoreML::Result::Result(v44);
                  }
                }
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "Specification is missing classifier predictedFeatureName");
                *(_QWORD *)v272 = 12;
                std::operator+<char>();
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              if ((*(_DWORD *)v272 & 0xFFFFFFEF) != 0)
                goto LABEL_72;
              if (*((char *)v272 + 31) < 0)
                operator delete(*v14);
LABEL_99:
              CoreML::Result::Result(v272);
              goto LABEL_72;
            }
          }
          else
          {
            if (!*(_BYTE *)(v22 + 71))
              goto LABEL_79;
            while (*(unsigned __int8 *)v36 == *v37)
            {
              v36 = (const void **)((char *)v36 + 1);
              ++v37;
              if (!--v32)
                goto LABEL_79;
            }
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification and ML program classifier predicted probabilities name do not match.");
        *(_QWORD *)v272 = 0x110000000CLL;
        std::operator+<char>();
LABEL_70:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_72:
        a1 = v272;
        v38 = *(_DWORD *)v272;
        if ((*(_DWORD *)v272 & 0xFFFFFFEF) != 0)
        {
          a2 = v267;
          a3 = v268;
          v4 = v270;
          goto LABEL_162;
        }
        v4 = v270;
        if (*((char *)v272 + 31) < 0)
          operator delete(*v14);
        ++v13;
        v12 += 24;
        if (v12 == v11)
          goto LABEL_161;
      }
      if ((*((_BYTE *)v23 + 23) & 0x80) != 0)
      {
        if (!v23[1])
          goto LABEL_49;
      }
      else if (!*((_BYTE *)v23 + 23))
      {
LABEL_49:
        v30 = v15[13];
        if (*(char *)(v30 + 23) < 0)
        {
          if (!*(_QWORD *)(v30 + 8))
            goto LABEL_99;
        }
        else if (!*(_BYTE *)(v30 + 23))
        {
          goto LABEL_99;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification declares a classifier, but the ML program does not contain a 'classify' op.");
      *(_QWORD *)v272 = 0x110000000CLL;
      std::operator+<char>();
      goto LABEL_70;
    }
    goto LABEL_161;
  }
  v52 = *(_QWORD *)(std::map<std::string,std::string>::at(a3 + 80, (_QWORD *)(a3 + 32)) + 272);
  v53 = *(unsigned __int8 ***)(v4 + 136);
  v54 = (unsigned __int8 *)*((unsigned __int8 *)v53 + 23);
  if (!v52)
  {
    if ((v54 & 0x80) != 0)
      v54 = v53[1];
    if (v54
      || ((v60 = *(_QWORD *)(v4 + 144), *(char *)(v60 + 23) < 0)
        ? (v61 = *(_QWORD *)(v60 + 8))
        : (v61 = *(unsigned __int8 *)(v60 + 23)),
          v61))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification declares a classifier, but the ML program does not contain a 'classify' op.");
      *(_QWORD *)a1 = 0x110000000CLL;
      std::operator+<char>();
      goto LABEL_156;
    }
    goto LABEL_480;
  }
  if ((v54 & 0x80) == 0)
  {
    if (*((_BYTE *)v53 + 23))
      goto LABEL_114;
LABEL_136:
    std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification does not declare a classifier, but the ML program does declare one.");
    *(_QWORD *)a1 = 0x110000000CLL;
    std::operator+<char>();
    goto LABEL_156;
  }
  if (!v53[1])
    goto LABEL_136;
LABEL_114:
  v55 = *(unsigned __int8 *)(v52 + 47);
  if ((v55 & 0x80u) == 0)
    v56 = (unsigned __int8 *)*(unsigned __int8 *)(v52 + 47);
  else
    v56 = *(unsigned __int8 **)(v52 + 32);
  if ((char)v54 >= 0)
    v57 = (unsigned __int8 *)*((unsigned __int8 *)v53 + 23);
  else
    v57 = v53[1];
  if (v56 != v57)
    goto LABEL_138;
  v58 = (const void **)(v52 + 24);
  if ((char)v54 >= 0)
    v59 = *(unsigned __int8 **)(v4 + 136);
  else
    v59 = *v53;
  if ((v55 & 0x80) != 0)
  {
    if (!memcmp(*v58, v59, *(_QWORD *)(v52 + 32)))
      goto LABEL_139;
LABEL_138:
    std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification and ML program classifier predicted feature name do not match.");
    *(_QWORD *)a1 = 0x110000000CLL;
    std::operator+<char>();
    goto LABEL_156;
  }
  if (*(_BYTE *)(v52 + 47))
  {
    while (*(unsigned __int8 *)v58 == *v59)
    {
      v58 = (const void **)((char *)v58 + 1);
      ++v59;
      if (!--v55)
        goto LABEL_139;
    }
    goto LABEL_138;
  }
LABEL_139:
  v62 = *(unsigned __int8 ***)(v4 + 144);
  v63 = *(unsigned __int8 *)(v52 + 71);
  if ((v63 & 0x80u) == 0)
    v64 = (unsigned __int8 *)*(unsigned __int8 *)(v52 + 71);
  else
    v64 = *(unsigned __int8 **)(v52 + 56);
  v65 = (unsigned __int8 *)*((unsigned __int8 *)v62 + 23);
  v66 = (char)v65;
  if ((char)v65 < 0)
    v65 = v62[1];
  if (v64 != v65)
    goto LABEL_476;
  v67 = (const void **)(v52 + 48);
  if (v66 >= 0)
    v68 = *(unsigned __int8 **)(v4 + 144);
  else
    v68 = *v62;
  if ((v63 & 0x80) != 0)
  {
    if (!memcmp(*v67, v68, *(_QWORD *)(v52 + 56)))
      goto LABEL_477;
LABEL_476:
    std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification and ML program classifier predicted probabilities name do not match.");
    *(_QWORD *)a1 = 0x110000000CLL;
    std::operator+<char>();
LABEL_156:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_158;
  }
  if (*(_BYTE *)(v52 + 71))
  {
    while (*(unsigned __int8 *)v67 == *v68)
    {
      v67 = (const void **)((char *)v67 + 1);
      ++v68;
      if (!--v63)
        goto LABEL_477;
    }
    goto LABEL_476;
  }
LABEL_477:
  CoreML::validateClassifierFeatureDescriptions((void **)a1, (const CoreML::Specification::ModelDescription *)v4, *(_DWORD *)(v52 + 72) == 0);
  if ((*(_DWORD *)a1 & 0xFFFFFFEF) == 0)
  {
    if (*((char *)a1 + 31) < 0)
      operator delete(*((void **)a1 + 1));
LABEL_480:
    CoreML::Result::Result(a1);
  }
LABEL_158:
  v38 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0xFFFFFFEF) != 0)
    goto LABEL_162;
  v268 = a3;
  if (*((char *)a1 + 31) < 0)
    operator delete(*((void **)a1 + 1));
LABEL_161:
  CoreML::Result::Result(a1);
  a2 = v267;
  a3 = v268;
  v38 = *(_DWORD *)a1;
LABEL_162:
  if ((v38 & 0xFFFFFFEF) != 0)
    goto LABEL_163;
  if (*((char *)a1 + 31) < 0)
    operator delete(*((void **)a1 + 1));
  v69 = *(int *)(v4 + 96);
  if ((_DWORD)v69)
  {
    v70 = *(_QWORD *)(v4 + 104);
    if (v70)
      v71 = (uint64_t *)(v70 + 8);
    else
      v71 = 0;
    v72 = &v71[v69];
    v73 = (void **)((char *)a1 + 8);
    v262 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v263 = *MEMORY[0x1E0DE4F60];
    v265 = a3 + 80;
    v261 = MEMORY[0x1E0DE4FB8] + 16;
    v260 = v72;
    v264 = (void **)((char *)a1 + 8);
    while (1)
    {
      v74 = *v71;
      v75 = *(__int128 **)(*v71 + 88);
      if (*((char *)v75 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v287, *(const std::string::value_type **)v75, *((_QWORD *)v75 + 1));
      }
      else
      {
        v76 = *v75;
        v287.__r_.__value_.__r.__words[2] = *((_QWORD *)v75 + 2);
        *(_OWORD *)&v287.__r_.__value_.__l.__data_ = v76;
      }
      v77 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 56))(a2, &v287);
      if (v77)
        break;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"ML Program does not have a function named ", 42);
      if ((v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = &v287;
      else
        v81 = (std::string *)v287.__r_.__value_.__r.__words[0];
      if ((v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = HIBYTE(v287.__r_.__value_.__r.__words[2]);
      else
        v82 = v287.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)v81, v82);
      std::stringbuf::str();
      *(_QWORD *)a1 = 12;
      std::operator+<char>();
      if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v293.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = v263;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v263 - 24)) = v262;
      __p.__r_.__value_.__l.__size_ = v261;
      if (SHIBYTE(v282) < 0)
        operator delete(v281);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1A1AD61C4](&v284);
      v79 = 0;
LABEL_314:
      if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v287.__r_.__value_.__l.__data_);
      if ((v79 & 1) == 0)
        goto LABEL_163;
      if (++v71 == v72)
        goto LABEL_438;
    }
    v271 = v77;
    v78 = (const CoreML::NNCompiler::MLFunctionInfo *)std::map<std::string,std::string>::at(v265, &v287);
    std::string::basic_string[abi:ne180100]<0>(&__p, "parameters");
    CoreML::validateInputOutputTypes(a1, *(_DWORD *)(v74 + 24), *(_QWORD *)(v74 + 32), 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v269 = v74;
    if ((*(_DWORD *)a1 & 0xFFFFFFEF) != 0)
    {
LABEL_180:
      if ((*(_DWORD *)a1 & 0xFFFFFFEF) != 0)
      {
        v79 = 0;
        a2 = v267;
        goto LABEL_314;
      }
      if (*((char *)a1 + 31) < 0)
        operator delete(*v73);
      CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo(&v273, v78);
      memset(&__p, 0, sizeof(__p));
      v95 = v274;
      if (v274)
      {
        v96 = *(_QWORD *)(v74 + 56);
        if (v96)
          v97 = (const CoreML::Specification::FeatureDescription **)(v96 + 8);
        else
          v97 = 0;
        v98 = *(int *)(v74 + 48);
        if ((_DWORD)v98)
        {
          v99 = &v97[v98];
          do
          {
            v100 = *v97;
            v101 = (unsigned __int8 *)*((_QWORD *)*v97 + 2);
            v102 = v101[23];
            v103 = *((_QWORD *)v101 + 1);
            if ((v102 & 0x80u) == 0)
              v104 = v101[23];
            else
              v104 = *((_QWORD *)v101 + 1);
            v105 = *(unsigned __int8 *)(v95 + 47);
            v106 = (char)v105;
            if ((v105 & 0x80u) != 0)
              v105 = *(_QWORD *)(v95 + 32);
            if (v104 == v105)
            {
              if (v106 >= 0)
                v107 = (unsigned __int8 *)(v95 + 24);
              else
                v107 = *(unsigned __int8 **)(v95 + 24);
              if ((v102 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v101, v107, *((_QWORD *)v101 + 1)))
                  goto LABEL_262;
              }
              else
              {
                if (!v101[23])
                  goto LABEL_262;
                v108 = (unsigned __int8 *)*((_QWORD *)*v97 + 2);
                v109 = v101[23];
                while (*v108 == *v107)
                {
                  ++v108;
                  ++v107;
                  if (!--v109)
                    goto LABEL_262;
                }
              }
            }
            v110 = *(unsigned __int8 *)(v95 + 71);
            v111 = (char)v110;
            if ((v110 & 0x80u) != 0)
              v110 = *(_QWORD *)(v95 + 56);
            if (v104 != v110)
              goto LABEL_260;
            if (v111 >= 0)
              v112 = (unsigned __int8 *)(v95 + 48);
            else
              v112 = *(unsigned __int8 **)(v95 + 48);
            if ((v102 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v101, v112, v103))
                goto LABEL_260;
            }
            else if ((_DWORD)v102)
            {
              while (*v101 == *v112)
              {
                ++v101;
                ++v112;
                if (!--v102)
                  goto LABEL_262;
              }
LABEL_260:
              v113 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((uint64_t)&__p);
              v114 = v113;
              if (v100 != v113)
              {
                CoreML::Specification::FeatureDescription::Clear(v113);
                CoreML::Specification::FeatureDescription::MergeFrom(v114, v100);
              }
            }
LABEL_262:
            ++v97;
          }
          while (v97 != v99);
        }
      }
      else
      {
        v115 = *(_DWORD *)(v74 + 48);
        if (v115)
        {
          v116 = *(_QWORD *)(v269 + 56);
          v117 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&__p, *(_DWORD *)(v74 + 48));
          v118 = (const CoreML::Specification::FeatureDescription **)(v116 + 8);
          v119 = (_DWORD *)__p.__r_.__value_.__r.__words[2];
          v120 = __p.__r_.__value_.__r.__words[1];
          google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)&__p, (CoreML::Specification::FeatureDescription **)v117, v118, v115, *(_DWORD *)__p.__r_.__value_.__r.__words[2] - LODWORD(__p.__r_.__value_.__r.__words[1]));
          LODWORD(__p.__r_.__value_.__r.__words[1]) = v120 + v115;
          if (*v119 < (signed int)(v120 + v115))
            *v119 = v120 + v115;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v293, "return values");
      a1 = v272;
      CoreML::validateInputOutputTypes(v272, __p.__r_.__value_.__r.__words[1], __p.__r_.__value_.__r.__words[2], 2);
      v72 = v260;
      if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v293.__r_.__value_.__l.__data_);
      v121 = *(_DWORD *)v272 & 0xFFFFFFEF;
      if (!v121 && *((char *)v272 + 31) < 0)
        operator delete(*v264);
      google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&__p);
      if (v121)
        goto LABEL_275;
      v122 = *(_DWORD *)(v269 + 48);
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v271 + 160))(&__p);
      v123 = __p.__r_.__value_.__l.__size_;
      v124 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v122 == ((v123 - v124) >> 3))
      {
        v125 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v271 + 112))(v271);
        a1 = v272;
        v126 = (uint64_t *)std::map<std::string,std::string>::at(v125, v275);
        v127 = v269;
        if (*(int *)(v269 + 48) < 1)
        {
LABEL_310:
          CoreML::Result::Result(v272);
          goto LABEL_275;
        }
        v128 = 0;
        v129 = *v126;
        v130 = *v126 + 64;
        while (1)
        {
          v131 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v127 + 56) + 8 * v128 + 8) + 16);
          v132 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v129 + 88))(v129);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v132[1] - *v132) >> 3) <= v128)
            std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]();
          v133 = *v132 + 24 * v128;
          v134 = *(unsigned __int8 *)(v131 + 23);
          if ((v134 & 0x80u) == 0)
            v135 = *(unsigned __int8 *)(v131 + 23);
          else
            v135 = *(_QWORD *)(v131 + 8);
          v136 = *(unsigned __int8 *)(v133 + 23);
          v137 = (char)v136;
          if ((v136 & 0x80u) != 0)
            v136 = *(_QWORD *)(v133 + 8);
          if (v135 != v136)
            break;
          if (v137 >= 0)
            v138 = (const std::string::value_type *)(*v132 + 24 * v128);
          else
            v138 = *(const std::string::value_type **)v133;
          if ((v134 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v131, v138, *(_QWORD *)(v131 + 8)))
              break;
          }
          else if (*(_BYTE *)(v131 + 23))
          {
            v139 = (unsigned __int8 *)v131;
            while (*v139 == *(unsigned __int8 *)v138)
            {
              ++v139;
              ++v138;
              if (!--v134)
                goto LABEL_299;
            }
            break;
          }
LABEL_299:
          v140 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v130 + 16))(v130, v133, 1);
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v269 + 56) + 8 * v128 + 8) + 32))
            v141 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v269 + 56) + 8 * v128 + 8) + 32);
          else
            v141 = &CoreML::Specification::_FeatureType_default_instance_;
          if ((*(_DWORD *)v272 & 0xFFFFFFEF) != 0)
            goto LABEL_275;
          if (*((char *)v272 + 31) < 0)
            operator delete(*v264);
          if ((*(_DWORD *)v272 & 0xFFFFFFEF) != 0 || (*((char *)v272 + 31) & 0x80000000) == 0)
          {
            if ((*(_DWORD *)v272 & 0xFFFFFFEF) != 0)
              goto LABEL_275;
          }
          else
          {
            operator delete(*v264);
          }
          ++v128;
          v127 = v269;
          if ((uint64_t)v128 >= *(int *)(v269 + 48))
            goto LABEL_310;
        }
        std::to_string(&v288, v128);
        v143 = std::string::insert(&v288, 0, "MLModel Specification's output at index ");
        v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
        v289.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v144;
        v143->__r_.__value_.__l.__size_ = 0;
        v143->__r_.__value_.__r.__words[2] = 0;
        v143->__r_.__value_.__r.__words[0] = 0;
        v145 = std::string::append(&v289, " is '");
        v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
        v290.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v146;
        v145->__r_.__value_.__l.__size_ = 0;
        v145->__r_.__value_.__r.__words[2] = 0;
        v145->__r_.__value_.__r.__words[0] = 0;
        v147 = *(char *)(v131 + 23);
        if (v147 >= 0)
          v148 = (const std::string::value_type *)v131;
        else
          v148 = *(const std::string::value_type **)v131;
        if (v147 >= 0)
          v149 = *(unsigned __int8 *)(v131 + 23);
        else
          v149 = *(_QWORD *)(v131 + 8);
        v150 = std::string::append(&v290, v148, v149);
        v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
        v291.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v151;
        v150->__r_.__value_.__l.__size_ = 0;
        v150->__r_.__value_.__r.__words[2] = 0;
        v150->__r_.__value_.__r.__words[0] = 0;
        v152 = std::string::append(&v291, "', but the corresponding output name of the ML Program is '");
        v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
        v292.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v153;
        v152->__r_.__value_.__l.__size_ = 0;
        v152->__r_.__value_.__r.__words[2] = 0;
        v152->__r_.__value_.__r.__words[0] = 0;
        v154 = *(char *)(v133 + 23);
        if (v154 >= 0)
          v155 = (const std::string::value_type *)v133;
        else
          v155 = *(const std::string::value_type **)v133;
        if (v154 >= 0)
          v156 = *(unsigned __int8 *)(v133 + 23);
        else
          v156 = *(_QWORD *)(v133 + 8);
        v157 = std::string::append(&v292, v155, v156);
        v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
        v293.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v158;
        v157->__r_.__value_.__l.__size_ = 0;
        v157->__r_.__value_.__r.__words[2] = 0;
        v157->__r_.__value_.__r.__words[0] = 0;
        v159 = std::string::append(&v293, "'.");
        v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v159->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v160;
        v159->__r_.__value_.__l.__size_ = 0;
        v159->__r_.__value_.__r.__words[2] = 0;
        v159->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)v272 = 0x80000000CLL;
        std::operator+<char>();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v293.__r_.__value_.__l.__data_);
        if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v292.__r_.__value_.__l.__data_);
        if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v291.__r_.__value_.__l.__data_);
        if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v290.__r_.__value_.__l.__data_);
        if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v289.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v288.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_275;
        v142 = (void *)v288.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "Model and main function must have same number of outputs.");
        a1 = v272;
        *(_QWORD *)v272 = 0xD0000000CLL;
        std::operator+<char>();
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_275;
        v142 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      operator delete(v142);
LABEL_275:
      CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)&v273);
      if ((*(_DWORD *)a1 & 0xFFFFFFEF) != 0)
      {
        v79 = 0;
        a2 = v267;
        v73 = v264;
      }
      else
      {
        a2 = v267;
        v73 = v264;
        if (*((char *)a1 + 31) < 0)
          operator delete(*v264);
        v79 = 1;
      }
      goto LABEL_314;
    }
    if (*((char *)a1 + 31) < 0)
      operator delete(*v73);
    v83 = *(_DWORD *)(v74 + 24);
    v84 = *(_DWORD *)(v74 + 72);
    if (v84 + v83 != *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v271 + 128))(v271) + 16))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Model and main function must have same number of inputs and states.");
      *(_QWORD *)a1 = 0x70000000CLL;
      std::operator+<char>();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_180;
    }
    v85 = *(_QWORD *)(v74 + 32);
    if (v85)
      v86 = (uint64_t *)(v85 + 8);
    else
      v86 = 0;
    v87 = *(int *)(v74 + 24);
    if (!(_DWORD)v87)
    {
LABEL_319:
      CoreML::Result::Result(a1);
      goto LABEL_180;
    }
    v88 = 8 * v87;
    while (1)
    {
      v89 = *v86;
      v90 = *(__int128 **)(*v86 + 16);
      if (*((char *)v90 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v90, *((_QWORD *)v90 + 1));
      }
      else
      {
        v91 = *v90;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v90 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v91;
      }
      v92 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v271 + 152))(v271, &__p);
      if (!v92)
        break;
      if (*(_QWORD *)(v89 + 32))
        v93 = *(uint64_t **)(v89 + 32);
      else
        v93 = &CoreML::Specification::_FeatureType_default_instance_;
      if ((*(_DWORD *)a1 & 0xFFFFFFEF) != 0)
      {
        v94 = 0;
        v74 = v269;
        goto LABEL_216;
      }
      if (*((char *)a1 + 31) < 0)
        operator delete(*v73);
      v74 = v269;
      if ((*(_DWORD *)a1 & 0xFFFFFFEF) != 0)
        goto LABEL_215;
      if (*((char *)a1 + 31) < 0)
        operator delete(*v73);
      v94 = 1;
LABEL_216:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v94 & 1) == 0)
        goto LABEL_180;
      ++v86;
      v88 -= 8;
      if (!v88)
        goto LABEL_319;
    }
    std::operator+<char>();
    *(_QWORD *)a1 = 0x80000000CLL;
    std::operator+<char>();
    if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v293.__r_.__value_.__l.__data_);
LABEL_215:
    v94 = 0;
    goto LABEL_216;
  }
  v161 = (const CoreML::NNCompiler::MLFunctionInfo *)std::map<std::string,std::string>::at(a3 + 80, (_QWORD *)(a3 + 32));
  std::string::basic_string[abi:ne180100]<0>(&__p, "parameters");
  CoreML::validateInputOutputTypes(v272, *(_DWORD *)(v270 + 24), *(_QWORD *)(v270 + 32), 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((*(_DWORD *)v272 & 0xFFFFFFEF) == 0)
  {
    if (*((char *)v272 + 31) < 0)
      operator delete(*((void **)v272 + 1));
    v182 = *(_DWORD *)(v270 + 24);
    v183 = *(_DWORD *)(v270 + 72);
    if (v183 + v182 != *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v266 + 128))(v266) + 16))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Model and main function must have same number of inputs and states.");
      *(_QWORD *)v272 = 0x70000000CLL;
      std::operator+<char>();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_352;
    }
    v184 = *(_QWORD *)(v270 + 32);
    if (v184)
      v185 = (uint64_t *)(v184 + 8);
    else
      v185 = 0;
    v186 = *(int *)(v270 + 24);
    if (!(_DWORD)v186)
    {
LABEL_422:
      CoreML::Result::Result(v272);
      goto LABEL_352;
    }
    v187 = (void **)((char *)v272 + 8);
    v188 = 8 * v186;
    while (1)
    {
      v189 = *v185;
      v190 = *(__int128 **)(*v185 + 16);
      if (*((char *)v190 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v190, *((_QWORD *)v190 + 1));
      }
      else
      {
        v191 = *v190;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v190 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v191;
      }
      v192 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v266 + 152))(v266, &__p);
      if (!v192)
        break;
      if (*(_QWORD *)(v189 + 32))
        v193 = *(uint64_t **)(v189 + 32);
      else
        v193 = &CoreML::Specification::_FeatureType_default_instance_;
      if ((*(_DWORD *)v272 & 0xFFFFFFEF) != 0)
        goto LABEL_417;
      if (*((char *)v272 + 31) < 0)
        operator delete(*v187);
      if ((*(_DWORD *)v272 & 0xFFFFFFEF) != 0)
        goto LABEL_417;
      if (*((char *)v272 + 31) < 0)
        operator delete(*v187);
      v194 = 1;
LABEL_418:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v194 & 1) == 0)
        goto LABEL_352;
      ++v185;
      v188 -= 8;
      if (!v188)
        goto LABEL_422;
    }
    std::operator+<char>();
    *(_QWORD *)v272 = 0x80000000CLL;
    std::operator+<char>();
    if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v293.__r_.__value_.__l.__data_);
LABEL_417:
    v194 = 0;
    goto LABEL_418;
  }
LABEL_352:
  if ((*(_DWORD *)v272 & 0xFFFFFFEF) != 0)
    goto LABEL_163;
  if (*((char *)v272 + 31) < 0)
    operator delete(*((void **)v272 + 1));
  CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo(&v276, v161);
  memset(&__p, 0, sizeof(__p));
  v162 = v277;
  if (v277)
  {
    v163 = *(_QWORD *)(v270 + 56);
    if (v163)
      v164 = (const CoreML::Specification::FeatureDescription **)(v163 + 8);
    else
      v164 = 0;
    v165 = *(int *)(v270 + 48);
    if ((_DWORD)v165)
    {
      v166 = &v164[v165];
      do
      {
        v167 = *v164;
        v168 = (unsigned __int8 *)*((_QWORD *)*v164 + 2);
        v169 = v168[23];
        v170 = *((_QWORD *)v168 + 1);
        if ((v169 & 0x80u) == 0)
          v171 = v168[23];
        else
          v171 = *((_QWORD *)v168 + 1);
        v172 = *(unsigned __int8 *)(v162 + 47);
        v173 = (char)v172;
        if ((v172 & 0x80u) != 0)
          v172 = *(_QWORD *)(v162 + 32);
        if (v171 == v172)
        {
          if (v173 >= 0)
            v174 = (unsigned __int8 *)(v162 + 24);
          else
            v174 = *(unsigned __int8 **)(v162 + 24);
          if ((v169 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v168, v174, *((_QWORD *)v168 + 1)))
              goto LABEL_391;
          }
          else
          {
            if (!v168[23])
              goto LABEL_391;
            v175 = (unsigned __int8 *)*((_QWORD *)*v164 + 2);
            v176 = v168[23];
            while (*v175 == *v174)
            {
              ++v175;
              ++v174;
              if (!--v176)
                goto LABEL_391;
            }
          }
        }
        v177 = *(unsigned __int8 *)(v162 + 71);
        v178 = (char)v177;
        if ((v177 & 0x80u) != 0)
          v177 = *(_QWORD *)(v162 + 56);
        if (v171 != v177)
          goto LABEL_389;
        if (v178 >= 0)
          v179 = (unsigned __int8 *)(v162 + 48);
        else
          v179 = *(unsigned __int8 **)(v162 + 48);
        if ((v169 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v168, v179, v170))
            goto LABEL_389;
        }
        else if ((_DWORD)v169)
        {
          while (*v168 == *v179)
          {
            ++v168;
            ++v179;
            if (!--v169)
              goto LABEL_391;
          }
LABEL_389:
          v180 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((uint64_t)&__p);
          v181 = v180;
          if (v167 != v180)
          {
            CoreML::Specification::FeatureDescription::Clear(v180);
            CoreML::Specification::FeatureDescription::MergeFrom(v181, v167);
          }
        }
LABEL_391:
        ++v164;
      }
      while (v164 != v166);
    }
  }
  else
  {
    v195 = *(_DWORD *)(v270 + 48);
    if (v195)
    {
      v196 = *(_QWORD *)(v270 + 56);
      v197 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&__p, *(_DWORD *)(v270 + 48));
      v198 = (const CoreML::Specification::FeatureDescription **)(v196 + 8);
      v199 = (_DWORD *)__p.__r_.__value_.__r.__words[2];
      v200 = __p.__r_.__value_.__r.__words[1];
      google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((google::protobuf::Arena **)&__p, (CoreML::Specification::FeatureDescription **)v197, v198, v195, *(_DWORD *)__p.__r_.__value_.__r.__words[2] - LODWORD(__p.__r_.__value_.__r.__words[1]));
      LODWORD(__p.__r_.__value_.__r.__words[1]) = v200 + v195;
      if (*v199 < (signed int)(v200 + v195))
        *v199 = v200 + v195;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v293, "return values");
  CoreML::validateInputOutputTypes(v272, __p.__r_.__value_.__r.__words[1], __p.__r_.__value_.__r.__words[2], 2);
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v293.__r_.__value_.__l.__data_);
  v201 = *(_DWORD *)v272 & 0xFFFFFFEF;
  if (!v201 && *((char *)v272 + 31) < 0)
    operator delete(*((void **)v272 + 1));
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&__p);
  if (v201)
    goto LABEL_434;
  v202 = *(_DWORD *)(v270 + 48);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v266 + 160))(&__p, v266);
  v203 = (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v202 == (_DWORD)v203)
  {
    v204 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v266 + 112))(v266);
    v205 = (uint64_t *)std::map<std::string,std::string>::at(v204, v278);
    v206 = v270;
    if (*(int *)(v270 + 48) < 1)
    {
LABEL_472:
      CoreML::Result::Result(v272);
      goto LABEL_434;
    }
    v207 = 0;
    v208 = *v205;
    v209 = *v205 + 64;
    v210 = (void **)((char *)v272 + 8);
    while (1)
    {
      v211 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v206 + 56) + 8 * v207 + 8) + 16);
      v212 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v208 + 88))(v208);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v212[1] - *v212) >> 3) <= v207)
        std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]();
      v213 = *v212 + 24 * v207;
      v214 = *(unsigned __int8 *)(v211 + 23);
      if ((v214 & 0x80u) == 0)
        v215 = *(unsigned __int8 *)(v211 + 23);
      else
        v215 = *(_QWORD *)(v211 + 8);
      v216 = *(unsigned __int8 *)(v213 + 23);
      v217 = (char)v216;
      if ((v216 & 0x80u) != 0)
        v216 = *(_QWORD *)(v213 + 8);
      if (v215 != v216)
        break;
      if (v217 >= 0)
        v218 = (const std::string::value_type *)(*v212 + 24 * v207);
      else
        v218 = *(const std::string::value_type **)v213;
      if ((v214 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v211, v218, *(_QWORD *)(v211 + 8)))
          break;
      }
      else if (*(_BYTE *)(v211 + 23))
      {
        v219 = (unsigned __int8 *)v211;
        while (*v219 == *(unsigned __int8 *)v218)
        {
          ++v219;
          ++v218;
          if (!--v214)
            goto LABEL_461;
        }
        break;
      }
LABEL_461:
      v220 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v209 + 16))(v209, v213, 1);
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v270 + 56) + 8 * v207 + 8) + 32))
        v221 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v270 + 56) + 8 * v207 + 8) + 32);
      else
        v221 = &CoreML::Specification::_FeatureType_default_instance_;
      if ((*(_DWORD *)v272 & 0xFFFFFFEF) != 0)
        goto LABEL_434;
      if (*((char *)v272 + 31) < 0)
        operator delete(*v210);
      if ((*(_DWORD *)v272 & 0xFFFFFFEF) != 0 || (*((char *)v272 + 31) & 0x80000000) == 0)
      {
        if ((*(_DWORD *)v272 & 0xFFFFFFEF) != 0)
          goto LABEL_434;
      }
      else
      {
        operator delete(*v210);
      }
      ++v207;
      v206 = v270;
      if ((uint64_t)v207 >= *(int *)(v270 + 48))
        goto LABEL_472;
    }
    std::to_string(&v288, v207);
    v223 = std::string::insert(&v288, 0, "MLModel Specification's output at index ");
    v224 = *(_OWORD *)&v223->__r_.__value_.__l.__data_;
    v289.__r_.__value_.__r.__words[2] = v223->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v224;
    v223->__r_.__value_.__l.__size_ = 0;
    v223->__r_.__value_.__r.__words[2] = 0;
    v223->__r_.__value_.__r.__words[0] = 0;
    v225 = std::string::append(&v289, " is '");
    v226 = *(_OWORD *)&v225->__r_.__value_.__l.__data_;
    v290.__r_.__value_.__r.__words[2] = v225->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v226;
    v225->__r_.__value_.__l.__size_ = 0;
    v225->__r_.__value_.__r.__words[2] = 0;
    v225->__r_.__value_.__r.__words[0] = 0;
    v227 = *(char *)(v211 + 23);
    if (v227 >= 0)
      v228 = (const std::string::value_type *)v211;
    else
      v228 = *(const std::string::value_type **)v211;
    if (v227 >= 0)
      v229 = *(unsigned __int8 *)(v211 + 23);
    else
      v229 = *(_QWORD *)(v211 + 8);
    v230 = std::string::append(&v290, v228, v229);
    v231 = *(_OWORD *)&v230->__r_.__value_.__l.__data_;
    v291.__r_.__value_.__r.__words[2] = v230->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v231;
    v230->__r_.__value_.__l.__size_ = 0;
    v230->__r_.__value_.__r.__words[2] = 0;
    v230->__r_.__value_.__r.__words[0] = 0;
    v232 = std::string::append(&v291, "', but the corresponding output name of the ML Program is '");
    v233 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
    v292.__r_.__value_.__r.__words[2] = v232->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v233;
    v232->__r_.__value_.__l.__size_ = 0;
    v232->__r_.__value_.__r.__words[2] = 0;
    v232->__r_.__value_.__r.__words[0] = 0;
    v234 = *(char *)(v213 + 23);
    if (v234 >= 0)
      v235 = (const std::string::value_type *)v213;
    else
      v235 = *(const std::string::value_type **)v213;
    if (v234 >= 0)
      v236 = *(unsigned __int8 *)(v213 + 23);
    else
      v236 = *(_QWORD *)(v213 + 8);
    v237 = std::string::append(&v292, v235, v236);
    v238 = *(_OWORD *)&v237->__r_.__value_.__l.__data_;
    v293.__r_.__value_.__r.__words[2] = v237->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v238;
    v237->__r_.__value_.__l.__size_ = 0;
    v237->__r_.__value_.__r.__words[2] = 0;
    v237->__r_.__value_.__r.__words[0] = 0;
    v239 = std::string::append(&v293, "'.");
    v240 = *(_OWORD *)&v239->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v239->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v240;
    v239->__r_.__value_.__l.__size_ = 0;
    v239->__r_.__value_.__r.__words[2] = 0;
    v239->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)v272 = 0x80000000CLL;
    std::operator+<char>();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v293.__r_.__value_.__l.__data_);
    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v292.__r_.__value_.__l.__data_);
    if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v291.__r_.__value_.__l.__data_);
    if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v290.__r_.__value_.__l.__data_);
    if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v289.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v288.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_434;
    v222 = (void *)v288.__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Model and main function must have same number of outputs.");
    *(_QWORD *)v272 = 0xD0000000CLL;
    std::operator+<char>();
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_434;
    v222 = (void *)__p.__r_.__value_.__r.__words[0];
  }
  operator delete(v222);
LABEL_434:
  CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)&v276);
  a1 = v272;
  if ((*(_DWORD *)v272 & 0xFFFFFFEF) != 0 || (*((char *)v272 + 31) & 0x80000000) == 0)
  {
    if ((*(_DWORD *)v272 & 0xFFFFFFEF) != 0)
      goto LABEL_163;
  }
  else
  {
    operator delete(*((void **)v272 + 1));
  }
LABEL_438:
  CoreML::Result::Result(a1);
LABEL_163:
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v286.__r_.__value_.__l.__data_);
}

void sub_19C8C8E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;

  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete((void *)STACK[0x2F0]);
  if (*(char *)(v63 - 121) < 0)
    operator delete(*(void **)(v63 - 144));
  if (*(char *)(v63 - 153) < 0)
    operator delete(*(void **)(v63 - 176));
  if (*(char *)(v63 - 185) < 0)
    operator delete(*(void **)(v63 - 208));
  if (*(char *)(v63 - 217) < 0)
    operator delete(*(void **)(v63 - 240));
  if (SLOBYTE(STACK[0x477]) < 0)
    operator delete((void *)STACK[0x460]);
  if (SLOBYTE(STACK[0x45F]) < 0)
    operator delete((void *)STACK[0x448]);
  CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)&a63);
  if (SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  _Unwind_Resume(a1);
}

void CoreML::validateInputOutputTypes(CoreML::Result *this, int a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  std::string *v13;
  __int128 v14;
  std::string v15;
  void *__p[2];
  std::string::size_type v17;

  v5 = a3 + 8;
  if (!a3)
    v5 = 0;
  if (a2)
  {
    v7 = 8 * a2;
    while (1)
    {
      v8 = *(uint64_t **)(*(_QWORD *)v5 + 32);
      if (!v8)
        v8 = &CoreML::Specification::_FeatureType_default_instance_;
      v9 = *((_DWORD *)v8 + 9);
      v10 = v9 > 8;
      v11 = (1 << v9) & 0x130;
      if (v10 || v11 == 0)
        break;
      v5 += 8;
      v7 -= 8;
      if (!v7)
        goto LABEL_12;
    }
    std::operator+<char>();
    v13 = std::string::append(&v15, " to be images, MLMultiArray, or State.");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v17 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    *(_DWORD *)this = 12;
    *((_DWORD *)this + 1) = a4;
    std::operator+<char>();
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
LABEL_12:
    CoreML::Result::Result(this);
  }
}

void sub_19C8C93F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::ValidateMultiArrayIOTypeIsSupported(CoreML::Result *a1, uint64_t a2, uint64_t a3, int a4)
{
  char *v8;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v9;
  int v10;
  int v11;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  uint64_t v26;
  uint64_t *v27;
  std::string *v28;
  __int128 v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  __int128 v46;
  std::string::size_type v47;
  std::string::value_type *v48;
  std::string::size_type v49;
  unsigned __int8 v50;

  if (a4)
    v8 = "input";
  else
    v8 = "output";
  v9 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)std::string::basic_string[abi:ne180100]<0>(&v48, v8);
  v10 = *(_DWORD *)(a2 + 36);
  if (v10 != 5)
  {
    if (v10 == 8 && a4 != 0)
    {
      v26 = *(_QWORD *)(a2 + 24);
      if (*(_DWORD *)(v26 + 28) == 1)
      {
        v27 = *(uint64_t **)(v26 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v9);
        v27 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      if (*((_DWORD *)v27 + 9) != 65552)
      {
        std::operator+<char>();
        v28 = std::string::append(&v41, " '");
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = *(char *)(a3 + 23);
        if (v30 >= 0)
          v31 = (const std::string::value_type *)a3;
        else
          v31 = *(const std::string::value_type **)a3;
        if (v30 >= 0)
          v32 = *(unsigned __int8 *)(a3 + 23);
        else
          v32 = *(_QWORD *)(a3 + 8);
        v33 = std::string::append(&v42, v31, v32);
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        v35 = std::string::append(&v43, "' is not a supported data type. Only float16 data type is supported for State ");
        v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        if ((v50 & 0x80u) == 0)
          v23 = (const std::string::value_type *)&v48;
        else
          v23 = v48;
        if ((v50 & 0x80u) == 0)
          v24 = v50;
        else
          v24 = v49;
        goto LABEL_48;
      }
    }
LABEL_32:
    CoreML::Result::Result(a1);
    goto LABEL_33;
  }
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 36);
  if (v11 == 65552 || v11 == 65568 || v11 == 131104)
    goto LABEL_32;
  std::operator+<char>();
  v14 = std::string::append(&v41, " '");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = *(char *)(a3 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)a3;
  else
    v17 = *(const std::string::value_type **)a3;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a3 + 23);
  else
    v18 = *(_QWORD *)(a3 + 8);
  v19 = std::string::append(&v42, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v43, "' is not a supported data type. Only int32, float32, or float16 data types are supported for MLMultiArray ");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v50 & 0x80u) == 0)
    v23 = (const std::string::value_type *)&v48;
  else
    v23 = v48;
  if ((v50 & 0x80u) == 0)
    v24 = v50;
  else
    v24 = v49;
LABEL_48:
  v37 = std::string::append(&v44, v23, v24);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v45, "s to ML Program models.");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v47 = v39->__r_.__value_.__r.__words[2];
  v46 = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a1 = 0x10000000CLL;
  std::operator+<char>();
  if (SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
LABEL_33:
  if ((char)v50 < 0)
    operator delete(v48);
}

void sub_19C8C97C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 73) < 0)
    operator delete(*(void **)(v42 - 96));
  if (a42 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v42 - 49) < 0)
    operator delete(*(void **)(v42 - 72));
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::SameTypes(CoreML::Result *a1, uint64_t a2, uint64_t a3, MIL::IRValueType *a4, int a5)
{
  char *v10;
  int v11;
  MIL::IRTensorValueType *v12;
  MIL::IRTensorValueType *v13;
  BOOL v14;
  int v15;
  char *v16;
  std::string *v17;
  __int128 v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  const std::string::value_type *p_p;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  MIL::IRStateValueType *v37;
  uint64_t WrappedType;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v39;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  BOOL v61;
  int v62;
  char *v63;
  std::string *v64;
  __int128 v65;
  int v66;
  const std::string::value_type *v67;
  std::string::size_type v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  char *v73;
  std::string *v74;
  __int128 v75;
  int v76;
  const std::string::value_type *v77;
  std::string::size_type v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  __int128 v84;
  char *v85;
  std::string *v86;
  __int128 v87;
  int v88;
  const std::string::value_type *v89;
  std::string::size_type v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  __int128 v94;
  BOOL v95;
  int v96;
  char *v97;
  std::string *v98;
  __int128 v99;
  int v100;
  const std::string::value_type *v101;
  std::string::size_type v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  __int128 v106;
  int v107;
  _QWORD *v108;
  uint64_t v109;
  BOOL v110;
  uint64_t *v111;
  BOOL v112;
  char *v113;
  std::string *v114;
  __int128 v115;
  int v116;
  const std::string::value_type *v117;
  std::string::size_type v118;
  std::string *v119;
  __int128 v120;
  std::string *v121;
  __int128 v122;
  int v123;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v124;
  uint64_t *v125;
  char *v126;
  std::string *v127;
  __int128 v128;
  int v129;
  const std::string::value_type *v130;
  std::string::size_type v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  __int128 v135;
  void *v136;
  BOOL v137;
  char *v138;
  std::string *v139;
  __int128 v140;
  int v141;
  const std::string::value_type *v142;
  std::string::size_type v143;
  std::string *v144;
  __int128 v145;
  std::string *v146;
  __int128 v147;
  uint64_t v148;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v149;
  uint64_t *v150;
  std::string *v151;
  __int128 v152;
  std::string *v153;
  __int128 v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  BOOL v160;
  char *v161;
  std::string *v162;
  __int128 v163;
  int v164;
  const std::string::value_type *v165;
  std::string::size_type v166;
  std::string *v167;
  __int128 v168;
  std::string *v169;
  __int128 v170;
  uint64_t *v171;
  std::string *v172;
  __int128 v173;
  BOOL v174;
  char *v175;
  std::string *v176;
  __int128 v177;
  int v178;
  const std::string::value_type *v179;
  std::string::size_type v180;
  std::string *v181;
  __int128 v182;
  std::string *v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t *v188;
  char *v189;
  std::runtime_error *exception;
  std::string *v191;
  __int128 v192;
  void *__p;
  std::string::size_type v194;
  unsigned __int8 v195;
  std::string v196;
  std::string v197;
  std::string v198;
  std::string v199;
  std::string v200;
  std::string v201;
  __int128 v202;
  std::string::size_type v203;

  if (a5)
    v10 = "parameter";
  else
    v10 = "return value";
  std::string::basic_string[abi:ne180100]<0>(&__p, v10);
  v11 = 12;
  switch(*(_DWORD *)(a3 + 36))
  {
    case 1:
      goto LABEL_6;
    case 3:
      goto LABEL_5;
    case 4:
      v42 = *(_QWORD *)(a3 + 24);
      v43 = (*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)a4 + 24))(a4);
      v44 = v43;
      if (v43
        && ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 88))(v43) == 5
         || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 88))(v44) == 4
         || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 88))(v44) == 14))
      {
        v45 = *(_DWORD *)(v42 + 32);
        if (v45 == 40 || v45 == 10)
          v47 = 1;
        else
          v47 = 3;
        if (*(_QWORD *)(v42 + 24) && *(_QWORD *)(v42 + 16))
        {
          v48 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 96))(v44);
          v49 = v48;
          v50 = *(_DWORD *)(v42 + 52);
          if (v50 == 31)
          {
            if (!a5)
              goto LABEL_246;
            v155 = (_QWORD *)*v48;
            if (v48[1] - *v48 != 32)
            {
LABEL_226:
              v160 = a5 == 0;
              if (a5)
                v15 = 11;
              else
                v15 = 15;
              if (v160)
                v161 = "output";
              else
                v161 = "input";
              std::string::basic_string[abi:ne180100]<0>(&v202, v161);
              std::operator+<char>();
              v162 = std::string::append(&v196, " '");
              v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
              v197.__r_.__value_.__r.__words[2] = v162->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v163;
              v162->__r_.__value_.__l.__size_ = 0;
              v162->__r_.__value_.__r.__words[2] = 0;
              v162->__r_.__value_.__r.__words[0] = 0;
              v164 = *(char *)(a2 + 23);
              if (v164 >= 0)
                v165 = (const std::string::value_type *)a2;
              else
                v165 = *(const std::string::value_type **)a2;
              if (v164 >= 0)
                v166 = *(unsigned __int8 *)(a2 + 23);
              else
                v166 = *(_QWORD *)(a2 + 8);
              v167 = std::string::append(&v197, v165, v166);
              v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
              v198.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v168;
              v167->__r_.__value_.__l.__size_ = 0;
              v167->__r_.__value_.__r.__words[2] = 0;
              v167->__r_.__value_.__r.__words[0] = 0;
              v169 = std::string::append(&v198, "' has a different shape than its corresponding ");
              v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
              v199.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v170;
              v169->__r_.__value_.__l.__size_ = 0;
              v169->__r_.__value_.__r.__words[2] = 0;
              v169->__r_.__value_.__r.__words[0] = 0;
              if ((v195 & 0x80u) == 0)
                p_p = (const std::string::value_type *)&__p;
              else
                p_p = (const std::string::value_type *)__p;
              if ((v195 & 0x80u) == 0)
                v27 = v195;
              else
                v27 = v194;
              goto LABEL_27;
            }
            v156 = *(_QWORD *)(v42 + 40);
            v157 = *v155;
            v158 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v155 + 16))(*v155);
            if (v158)
            {
              if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 48))(v158) != 1)
                goto LABEL_226;
            }
            else if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v157 + 24))(v157))
            {
              goto LABEL_226;
            }
            if (v49[1] - *v49 <= 8uLL)
              goto LABEL_295;
            v185 = *(_QWORD *)(*v49 + 8);
            v186 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v185 + 16))(v185);
            if (v186)
            {
              if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v186 + 48))(v186) != v47)
                goto LABEL_226;
            }
            else if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v185 + 24))(v185))
            {
              goto LABEL_226;
            }
            if (v49[1] - *v49 < 0x11uLL)
              goto LABEL_295;
            if (*(_QWORD *)(v156 + 24))
              v187 = *(uint64_t **)(v156 + 24);
            else
              v187 = &CoreML::Specification::_SizeRange_default_instance_;
              goto LABEL_226;
            if (v49[1] - *v49 < 0x19uLL)
LABEL_295:
              std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]();
            if (*(_QWORD *)(v156 + 16))
              v188 = *(uint64_t **)(v156 + 16);
            else
              v188 = &CoreML::Specification::_SizeRange_default_instance_;
          }
          else
          {
            if (v50 == 21)
            {
              if (a5)
              {
                v51 = *(_QWORD *)(v42 + 40);
                v52 = *(_QWORD *)(v51 + 32);
                v53 = v52 ? v52 + 8 : 0;
                v54 = *(int *)(v51 + 24);
                if ((_DWORD)v54)
                {
                  v55 = 8 * v54;
                  {
                    v53 += 8;
                    v55 -= 8;
                    if (!v55)
                      goto LABEL_246;
                  }
                  goto LABEL_226;
                }
              }
LABEL_246:
              CoreML::Result::Result(a1);
              goto LABEL_251;
            }
          }
          if ((v159 & 1) != 0)
            goto LABEL_246;
          goto LABEL_226;
        }
        v95 = a5 == 0;
        if (a5)
          v96 = 3;
        else
          v96 = 5;
        if (v95)
          v97 = "output";
        else
          v97 = "input";
        std::string::basic_string[abi:ne180100]<0>(&v202, v97);
        std::operator+<char>();
        v98 = std::string::append(&v198, " '");
        v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
        v199.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v99;
        v98->__r_.__value_.__l.__size_ = 0;
        v98->__r_.__value_.__r.__words[2] = 0;
        v98->__r_.__value_.__r.__words[0] = 0;
        v100 = *(char *)(a2 + 23);
        if (v100 >= 0)
          v101 = (const std::string::value_type *)a2;
        else
          v101 = *(const std::string::value_type **)a2;
        if (v100 >= 0)
          v102 = *(unsigned __int8 *)(a2 + 23);
        else
          v102 = *(_QWORD *)(a2 + 8);
        v103 = std::string::append(&v199, v101, v102);
        v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
        v200.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v104;
        v103->__r_.__value_.__l.__size_ = 0;
        v103->__r_.__value_.__r.__words[2] = 0;
        v103->__r_.__value_.__r.__words[0] = 0;
        v105 = std::string::append(&v200, "' has empty height or width.");
        v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
        v201.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v106;
        v105->__r_.__value_.__l.__size_ = 0;
        v105->__r_.__value_.__r.__words[2] = 0;
        v105->__r_.__value_.__r.__words[0] = 0;
        *(_DWORD *)a1 = 12;
        *((_DWORD *)a1 + 1) = v96;
        std::operator+<char>();
      }
      else
      {
        v61 = a5 == 0;
        if (a5)
          v62 = 4;
        else
          v62 = 6;
        if (v61)
          v63 = "output";
        else
          v63 = "input";
        std::string::basic_string[abi:ne180100]<0>(&v202, v63);
        std::operator+<char>();
        v64 = std::string::append(&v198, " '");
        v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v199.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        v66 = *(char *)(a2 + 23);
        if (v66 >= 0)
          v67 = (const std::string::value_type *)a2;
        else
          v67 = *(const std::string::value_type **)a2;
        if (v66 >= 0)
          v68 = *(unsigned __int8 *)(a2 + 23);
        else
          v68 = *(_QWORD *)(a2 + 8);
        v69 = std::string::append(&v199, v67, v68);
        v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        v200.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        v71 = std::string::append(&v200, "' must be a tensor of type Float32 or Float16");
        v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        v201.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        *(_DWORD *)a1 = 12;
        *((_DWORD *)a1 + 1) = v62;
        std::operator+<char>();
      }
      goto LABEL_177;
    case 5:
      v56 = *(_QWORD *)(a3 + 24);
      v57 = (*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)a4 + 24))(a4);
      v58 = v57;
      if (!v57)
      {
        if (a5)
          v85 = "input";
        else
          v85 = "output";
        std::string::basic_string[abi:ne180100]<0>(&v202, v85);
        std::operator+<char>();
        v86 = std::string::append(&v198, " '");
        v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v199.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        v88 = *(char *)(a2 + 23);
        if (v88 >= 0)
          v89 = (const std::string::value_type *)a2;
        else
          v89 = *(const std::string::value_type **)a2;
        if (v88 >= 0)
          v90 = *(unsigned __int8 *)(a2 + 23);
        else
          v90 = *(_QWORD *)(a2 + 8);
        v91 = std::string::append(&v199, v89, v90);
        v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
        v200.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v92;
        v91->__r_.__value_.__l.__size_ = 0;
        v91->__r_.__value_.__r.__words[2] = 0;
        v91->__r_.__value_.__r.__words[0] = 0;
        v93 = std::string::append(&v200, "' is not a tensor.");
        v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
        v201.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v94;
        v93->__r_.__value_.__l.__size_ = 0;
        v93->__r_.__value_.__r.__words[2] = 0;
        v93->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a1 = 0x90000000CLL;
        std::operator+<char>();
LABEL_177:
        if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v201.__r_.__value_.__l.__data_);
        if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v200.__r_.__value_.__l.__data_);
        if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v199.__r_.__value_.__l.__data_);
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        {
          v32 = (void *)v198.__r_.__value_.__r.__words[0];
          goto LABEL_185;
        }
LABEL_186:
        if (SHIBYTE(v203) < 0)
        {
          v136 = (void *)v202;
LABEL_188:
          operator delete(v136);
        }
        goto LABEL_251;
      }
      v59 = *(_DWORD *)(v56 + 36);
      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 88))(v57);
      if (v59 > 65599)
      {
        if (v59 == 65600)
        {
          if (v60 != 6)
            goto LABEL_190;
        }
        else if (v59 != 131104 || v60 != 11)
        {
LABEL_190:
          v137 = a5 == 0;
          if (a5)
            v15 = 12;
          else
            v15 = 16;
          if (v137)
            v138 = "output";
          else
            v138 = "input";
          std::string::basic_string[abi:ne180100]<0>(&v202, v138);
          std::operator+<char>();
          v139 = std::string::append(&v196, " '");
          v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
          v197.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v140;
          v139->__r_.__value_.__l.__size_ = 0;
          v139->__r_.__value_.__r.__words[2] = 0;
          v139->__r_.__value_.__r.__words[0] = 0;
          v141 = *(char *)(a2 + 23);
          if (v141 >= 0)
            v142 = (const std::string::value_type *)a2;
          else
            v142 = *(const std::string::value_type **)a2;
          if (v141 >= 0)
            v143 = *(unsigned __int8 *)(a2 + 23);
          else
            v143 = *(_QWORD *)(a2 + 8);
          v144 = std::string::append(&v197, v142, v143);
          v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
          v198.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v145;
          v144->__r_.__value_.__l.__size_ = 0;
          v144->__r_.__value_.__r.__words[2] = 0;
          v144->__r_.__value_.__r.__words[0] = 0;
          v146 = std::string::append(&v198, "' has a different type than its corresponding ");
          v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
          v199.__r_.__value_.__r.__words[2] = v146->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v147;
          v146->__r_.__value_.__l.__size_ = 0;
          v146->__r_.__value_.__r.__words[2] = 0;
          v146->__r_.__value_.__r.__words[0] = 0;
          if ((v195 & 0x80u) == 0)
            p_p = (const std::string::value_type *)&__p;
          else
            p_p = (const std::string::value_type *)__p;
          if ((v195 & 0x80u) == 0)
            v27 = v195;
          else
            v27 = v194;
          goto LABEL_27;
        }
      }
      else if (v59 == 65552)
      {
        if (v60 != 4)
          goto LABEL_190;
      }
      else if (v59 != 65568 || v60 != 5)
      {
        goto LABEL_190;
      }
      v107 = *(_DWORD *)(v56 + 16);
      if ((a5 & 1) == 0 && !v107)
        goto LABEL_246;
      v108 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 96))(v58);
      v109 = v108[1];
      v110 = v109 == *v108 || (v109 - *v108) >> 3 == v107;
      if (v110 && (v109 != *v108 || v107 == 1 && *(_QWORD *)(*(_QWORD *)(v56 + 24) + 8) == 1))
      {
        v111 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 96))(v58);
          goto LABEL_246;
        v112 = a5 == 0;
        if (a5)
          v15 = 11;
        else
          v15 = 15;
        if (v112)
          v113 = "output";
        else
          v113 = "input";
        std::string::basic_string[abi:ne180100]<0>(&v202, v113);
        std::operator+<char>();
        v114 = std::string::append(&v196, " '");
        v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
        v197.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v115;
        v114->__r_.__value_.__l.__size_ = 0;
        v114->__r_.__value_.__r.__words[2] = 0;
        v114->__r_.__value_.__r.__words[0] = 0;
        v116 = *(char *)(a2 + 23);
        if (v116 >= 0)
          v117 = (const std::string::value_type *)a2;
        else
          v117 = *(const std::string::value_type **)a2;
        if (v116 >= 0)
          v118 = *(unsigned __int8 *)(a2 + 23);
        else
          v118 = *(_QWORD *)(a2 + 8);
        v119 = std::string::append(&v197, v117, v118);
        v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
        v198.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v120;
        v119->__r_.__value_.__l.__size_ = 0;
        v119->__r_.__value_.__r.__words[2] = 0;
        v119->__r_.__value_.__r.__words[0] = 0;
        v121 = std::string::append(&v198, "' has a different shape than its corresponding ");
        v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
        v199.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v122;
        v121->__r_.__value_.__l.__size_ = 0;
        v121->__r_.__value_.__r.__words[2] = 0;
        v121->__r_.__value_.__r.__words[0] = 0;
        if ((v195 & 0x80u) == 0)
          p_p = (const std::string::value_type *)&__p;
        else
          p_p = (const std::string::value_type *)__p;
        if ((v195 & 0x80u) == 0)
          v27 = v195;
        else
          v27 = v194;
      }
      else
      {
        v174 = a5 == 0;
        if (a5)
          v15 = 10;
        else
          v15 = 14;
        if (v174)
          v175 = "output";
        else
          v175 = "input";
        std::string::basic_string[abi:ne180100]<0>(&v202, v175);
        std::operator+<char>();
        v176 = std::string::append(&v196, " '");
        v177 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
        v197.__r_.__value_.__r.__words[2] = v176->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v177;
        v176->__r_.__value_.__l.__size_ = 0;
        v176->__r_.__value_.__r.__words[2] = 0;
        v176->__r_.__value_.__r.__words[0] = 0;
        v178 = *(char *)(a2 + 23);
        if (v178 >= 0)
          v179 = (const std::string::value_type *)a2;
        else
          v179 = *(const std::string::value_type **)a2;
        if (v178 >= 0)
          v180 = *(unsigned __int8 *)(a2 + 23);
        else
          v180 = *(_QWORD *)(a2 + 8);
        v181 = std::string::append(&v197, v179, v180);
        v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
        v198.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v182;
        v181->__r_.__value_.__l.__size_ = 0;
        v181->__r_.__value_.__r.__words[2] = 0;
        v181->__r_.__value_.__r.__words[0] = 0;
        v183 = std::string::append(&v198, "' has a different rank than its corresponding ");
        v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
        v199.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v184;
        v183->__r_.__value_.__l.__size_ = 0;
        v183->__r_.__value_.__r.__words[2] = 0;
        v183->__r_.__value_.__r.__words[0] = 0;
        if ((v195 & 0x80u) == 0)
          p_p = (const std::string::value_type *)&__p;
        else
          p_p = (const std::string::value_type *)__p;
        if ((v195 & 0x80u) == 0)
          v27 = v195;
        else
          v27 = v194;
      }
LABEL_27:
      v28 = std::string::append(&v199, p_p, v27);
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v200.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = std::string::append(&v200, " to main.");
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v201.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      *(_DWORD *)a1 = 12;
      *((_DWORD *)a1 + 1) = v15;
      std::operator+<char>();
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v201.__r_.__value_.__l.__data_);
      if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v200.__r_.__value_.__l.__data_);
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v199.__r_.__value_.__l.__data_);
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v198.__r_.__value_.__l.__data_);
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
      {
        v32 = (void *)v196.__r_.__value_.__r.__words[0];
LABEL_185:
        operator delete(v32);
        goto LABEL_186;
      }
      goto LABEL_186;
    case 6:
      v33 = *(_QWORD *)(a3 + 24);
      v34 = (*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)a4 + 48))(a4);
      if (!v34)
      {
        if (a5)
          v73 = "input";
        else
          v73 = "output";
        std::string::basic_string[abi:ne180100]<0>(&v202, v73);
        std::operator+<char>();
        v74 = std::string::append(&v198, " '");
        v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
        v199.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v75;
        v74->__r_.__value_.__l.__size_ = 0;
        v74->__r_.__value_.__r.__words[2] = 0;
        v74->__r_.__value_.__r.__words[0] = 0;
        v76 = *(char *)(a2 + 23);
        if (v76 >= 0)
          v77 = (const std::string::value_type *)a2;
        else
          v77 = *(const std::string::value_type **)a2;
        if (v76 >= 0)
          v78 = *(unsigned __int8 *)(a2 + 23);
        else
          v78 = *(_QWORD *)(a2 + 8);
        v79 = std::string::append(&v199, v77, v78);
        v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v200.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        v81 = std::string::append(&v200, "' is not a dictionary.");
        v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
        v201.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v82;
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a1 = 0x90000000CLL;
        std::operator+<char>();
        goto LABEL_177;
      }
      v35 = *(_DWORD *)(v33 + 28);
      switch(v35)
      {
        case 0:
          if (a5)
            v126 = "input";
          else
            v126 = "output";
          std::string::basic_string[abi:ne180100]<0>(&v202, v126);
          std::operator+<char>();
          v127 = std::string::append(&v198, " '");
          v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
          v199.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v128;
          v127->__r_.__value_.__l.__size_ = 0;
          v127->__r_.__value_.__r.__words[2] = 0;
          v127->__r_.__value_.__r.__words[0] = 0;
          v129 = *(char *)(a2 + 23);
          if (v129 >= 0)
            v130 = (const std::string::value_type *)a2;
          else
            v130 = *(const std::string::value_type **)a2;
          if (v129 >= 0)
            v131 = *(unsigned __int8 *)(a2 + 23);
          else
            v131 = *(_QWORD *)(a2 + 8);
          v132 = std::string::append(&v199, v130, v131);
          v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
          v200.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v133;
          v132->__r_.__value_.__l.__size_ = 0;
          v132->__r_.__value_.__r.__words[2] = 0;
          v132->__r_.__value_.__r.__words[0] = 0;
          v134 = std::string::append(&v200, "' has invalid key type.");
          v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
          v201.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v135;
          v134->__r_.__value_.__l.__size_ = 0;
          v134->__r_.__value_.__r.__words[2] = 0;
          v134->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)a1 = 0x90000000CLL;
          std::operator+<char>();
          goto LABEL_177;
        case 2:
          a4 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 64))(v34);
LABEL_5:
          v11 = 3;
          break;
        case 1:
          a4 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 64))(v34);
          break;
        default:
          goto LABEL_246;
      }
LABEL_6:
      v12 = (MIL::IRTensorValueType *)(*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)a4 + 24))(a4);
      v13 = v12;
      if (!v12
        || !MIL::IRTensorValueType::IsScalar(v12)
        || (*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v13 + 88))(v13) != v11)
      {
        v14 = a5 == 0;
        if (a5)
          v15 = 12;
        else
          v15 = 16;
        if (v14)
          v16 = "output";
        else
          v16 = "input";
        std::string::basic_string[abi:ne180100]<0>(&v202, v16);
        std::operator+<char>();
        v17 = std::string::append(&v196, " '");
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v197.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        v19 = *(char *)(a2 + 23);
        if (v19 >= 0)
          v20 = (const std::string::value_type *)a2;
        else
          v20 = *(const std::string::value_type **)a2;
        if (v19 >= 0)
          v21 = *(unsigned __int8 *)(a2 + 23);
        else
          v21 = *(_QWORD *)(a2 + 8);
        v22 = std::string::append(&v197, v20, v21);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v198.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v198, "' has a different type than its corresponding ");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v199.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        if ((v195 & 0x80u) == 0)
          p_p = (const std::string::value_type *)&__p;
        else
          p_p = (const std::string::value_type *)__p;
        if ((v195 & 0x80u) == 0)
          v27 = v195;
        else
          v27 = v194;
        goto LABEL_27;
      }
      goto LABEL_246;
    case 8:
      v36 = *(_QWORD *)(a3 + 24);
      v37 = (MIL::IRStateValueType *)MIL::IRValueType::TryCastAsStateType(a4);
      if (!v37
        || (WrappedType = MIL::IRStateValueType::GetWrappedType(v37),
            v39 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WrappedType + 24))(WrappedType),
            (v40 = v39) == 0))
      {
        std::operator+<char>();
        v83 = std::string::append(&v201, "' is not a tensor.");
        v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
        v203 = v83->__r_.__value_.__r.__words[2];
        v202 = v84;
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a1 = 0x90000000CLL;
        std::operator+<char>();
        goto LABEL_248;
      }
      if (*(_DWORD *)(v36 + 28) == 1)
      {
        v41 = *(uint64_t **)(v36 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v39);
        v41 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      v123 = *((_DWORD *)v41 + 9);
      v124 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)(*(uint64_t (**)(CoreML::Specification::protobuf_FeatureTypes_2eproto *))(*(_QWORD *)v40 + 88))(v40);
      if (v123 > 65599)
      {
        if (v123 != 65600)
        {
          if (v123 != 131104 || (_DWORD)v124 != 11)
            goto LABEL_215;
          goto LABEL_164;
        }
        if ((_DWORD)v124 == 6)
          goto LABEL_164;
LABEL_215:
        std::operator+<char>();
        v151 = std::string::append(&v201, "' has a different type than its corresponding parameter to main.");
        v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
        v203 = v151->__r_.__value_.__r.__words[2];
        v202 = v152;
        v151->__r_.__value_.__l.__size_ = 0;
        v151->__r_.__value_.__r.__words[2] = 0;
        v151->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a1 = 0xC0000000CLL;
        std::operator+<char>();
        goto LABEL_248;
      }
      if (v123 == 65552)
      {
        if ((_DWORD)v124 == 4)
          goto LABEL_164;
        goto LABEL_215;
      }
      if (v123 != 65568 || (_DWORD)v124 != 5)
        goto LABEL_215;
LABEL_164:
      if (*(_DWORD *)(v36 + 28) == 1)
      {
        v125 = *(uint64_t **)(v36 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v124);
        v125 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      v148 = *((int *)v125 + 4);
      v149 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)(*(uint64_t (**)(CoreML::Specification::protobuf_FeatureTypes_2eproto *))(*(_QWORD *)v40 + 96))(v40);
      if (v148 == (uint64_t)(*((_QWORD *)v149 + 1) - *(_QWORD *)v149) >> 3)
      {
        if (*(_DWORD *)(v36 + 28) == 1)
        {
          v150 = *(uint64_t **)(v36 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v149);
          v150 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        v171 = (uint64_t *)(*(uint64_t (**)(CoreML::Specification::protobuf_FeatureTypes_2eproto *))(*(_QWORD *)v40 + 96))(v40);
          goto LABEL_246;
        std::operator+<char>();
        v172 = std::string::append(&v201, "' has a different shape than its corresponding parameter to main.");
        v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
        v203 = v172->__r_.__value_.__r.__words[2];
        v202 = v173;
        v172->__r_.__value_.__l.__size_ = 0;
        v172->__r_.__value_.__r.__words[2] = 0;
        v172->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a1 = 0xB0000000CLL;
        std::operator+<char>();
      }
      else
      {
        std::operator+<char>();
        v153 = std::string::append(&v201, "' has a different rank than its corresponding parameter to main.");
        v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
        v203 = v153->__r_.__value_.__r.__words[2];
        v202 = v154;
        v153->__r_.__value_.__l.__size_ = 0;
        v153->__r_.__value_.__r.__words[2] = 0;
        v153->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a1 = 0xA0000000CLL;
        std::operator+<char>();
      }
LABEL_248:
      if (SHIBYTE(v203) < 0)
        operator delete((void *)v202);
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
      {
        v136 = (void *)v201.__r_.__value_.__r.__words[0];
        goto LABEL_188;
      }
LABEL_251:
      if ((char)v195 < 0)
        operator delete(__p);
      return;
    default:
      if (a5)
        v189 = "input";
      else
        v189 = "output";
      std::string::basic_string[abi:ne180100]<0>(&v202, v189);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v191 = std::string::append(&v200, " type.");
      v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
      v201.__r_.__value_.__r.__words[2] = v191->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v192;
      v191->__r_.__value_.__l.__size_ = 0;
      v191->__r_.__value_.__r.__words[2] = 0;
      v191->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v201);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_19C8CACA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(char *)(v47 - 105) < 0)
    operator delete(*(void **)(v47 - 128));
  if (a47 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v47 - 73) < 0)
    operator delete(*(void **)(v47 - 96));
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(google::protobuf::Arena **a1, CoreML::Specification::FeatureDescription **a2, const CoreML::Specification::FeatureDescription **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  const CoreML::Specification::FeatureDescription **v11;
  CoreML::Specification::FeatureDescription **v12;
  const CoreML::Specification::FeatureDescription *v13;
  const CoreML::Specification::FeatureDescription *v14;
  CoreML::Specification::FeatureDescription *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  CoreML::Specification::FeatureDescription **v19;
  const CoreML::Specification::FeatureDescription **v20;
  const CoreML::Specification::FeatureDescription *v21;
  CoreML::Specification::FeatureDescription *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureDescription>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        CoreML::Specification::FeatureDescription::FeatureDescription(Aligned);
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureDescription>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (CoreML::Specification::FeatureDescription *)operator new();
        CoreML::Specification::FeatureDescription::FeatureDescription(Aligned);
      }
      google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureDescription>::Merge(v21, Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
}

void sub_19C8CB050(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureDescription>::Merge(const CoreML::Specification::FeatureDescription *a1, CoreML::Specification::FeatureDescription *a2)
{
  CoreML::Specification::FeatureDescription::MergeFrom(a2, a1);
}

uint64_t `anonymous namespace'::CompatibleShapes(uint64_t a1, uint64_t *a2, int a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v5 = *(_DWORD *)(a1 + 60);
  if (v5 == 31)
  {
    if (a3)
    {
      v19 = *(_QWORD *)(a1 + 40);
      if (*(int *)(v19 + 24) >= 1)
      {
        v20 = 0;
        do
        {
          if (v20 >= (a2[1] - *a2) >> 3)
            std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]();
          if ((result & 1) == 0)
            break;
          ++v20;
        }
        while ((uint64_t)v20 < *(int *)(v19 + 24));
        return result;
      }
    }
    return 1;
  }
  if (v5 == 21)
  {
    if (a3)
    {
      v6 = *(_QWORD *)(a1 + 40);
      v7 = *(_QWORD *)(v6 + 32);
      v8 = v7 ? (uint64_t *)(v7 + 8) : 0;
      v9 = *(int *)(v6 + 24);
      if ((_DWORD)v9)
      {
        v10 = &v8[v9];
        v11 = *a2;
        v12 = a2[1];
        while (v12 == v11)
        {
          v12 = v11;
LABEL_16:
          ++v8;
          result = 1;
          if (v8 == v10)
            return result;
        }
        v13 = 0;
        v14 = 0;
        v15 = *v8;
        while (1)
        {
          v16 = *(_QWORD *)(*(_QWORD *)(v15 + 24) + (v13 >> 29) + 8);
          v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 8 * v14) + 16))(*(_QWORD *)(v11 + 8 * v14));
          if (v17)
          {
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17) != v16)
              return 0;
          }
          ++v14;
          v11 = *a2;
          v12 = a2[1];
          v13 += 0x100000000;
          if (v14 >= (v12 - *a2) >> 3)
            goto LABEL_16;
        }
      }
    }
    return 1;
  }
  v21 = *a2;
  if (a2[1] == *a2)
    return 1;
  v22 = 0;
  v23 = 0;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v21 + 8 * v23) + 16))(*(_QWORD *)(v21 + 8 * v23));
    if (!result)
      break;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result) != *(_QWORD *)(*(_QWORD *)(a1 + 24)
                                                                                              + (v22 >> 29)
                                                                                              + 8))
      return 0;
    ++v23;
    v21 = *a2;
    v22 += 0x100000000;
    if (v23 >= (a2[1] - *a2) >> 3)
      return 1;
  }
  return result;
}

uint64_t `anonymous namespace'::CompatibleSizes(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (_QWORD *)*a4;
  if (a4[1] - *a4 != 32)
    return 0;
  v9 = *v4;
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
  if (v10)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10) != 1)
      return 0;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    if (!result)
      return result;
  }
  if (a4[1] - *a4 <= 8uLL)
    goto LABEL_21;
  v12 = *(_QWORD *)(*a4 + 8);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  if (v13)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13) != a1)
      return 0;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    if (!result)
      return result;
  }
  if (a4[1] - *a4 <= 0x10uLL)
    goto LABEL_21;
  v14 = *(_QWORD *)(*a4 + 16);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  if (v15)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15) != a2)
      return 0;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
    if (!result)
      return result;
  }
  if (a4[1] - *a4 <= 0x18uLL)
LABEL_21:
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]();
  v16 = *(_QWORD *)(*a4 + 24);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (v17)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17) == a3;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16) != 0;
}

BOOL `anonymous namespace'::CompatibleDimensions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 24)
      && (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2)) != 0
      && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4) == *(_QWORD *)(a1 + 16)
      || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != 0;
}

void sub_19C8CB59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C8CB7C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8CBB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;

  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C8CC0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  Archiver::MMappedFile::~MMappedFile((Archiver::MMappedFile *)&a25);

  _Unwind_Resume(a1);
}

void sub_19C8CC1F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8CC3F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8CC8B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8CC908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *i;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v33;

  v4 = a1[1];
  v5 = a1[2];
  v6 = *((_QWORD *)a1 + 1);
  v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  v8 = *((_QWORD *)&directOutputModeFunctionTable(void)::table + 1);
  if (*((_QWORD *)&directOutputModeFunctionTable(void)::table + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&directOutputModeFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((_QWORD *)&directOutputModeFunctionTable(void)::table + 1))
        v2 = v7 % *((_QWORD *)&directOutputModeFunctionTable(void)::table + 1);
    }
    else
    {
      v2 = v7 & (*((_QWORD *)&directOutputModeFunctionTable(void)::table + 1) - 1);
    }
    v10 = *(void ***)(directOutputModeFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((_QWORD *)&directOutputModeFunctionTable(void)::table + 1))
                v12 %= *((_QWORD *)&directOutputModeFunctionTable(void)::table + 1);
            }
            else
            {
              v12 &= *((_QWORD *)&directOutputModeFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  v13 = (float)(unint64_t)(qword_1ED001138 + 1);
  if (!v8 || (float)(*(float *)&dword_1ED001140 * (float)v8) < v13)
  {
    v14 = 1;
    if (v8 >= 3)
      v14 = (v8 & (v8 - 1)) != 0;
    v15 = v14 | (2 * v8);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1ED001140);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)&directOutputModeFunctionTable(void)::table + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v8)
    {
      v24 = vcvtps_u32_f32((float)(unint64_t)qword_1ED001138 / *(float *)&dword_1ED001140);
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)&directOutputModeFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = (void *)directOutputModeFunctionTable(void)::table;
          *(_QWORD *)&directOutputModeFunctionTable(void)::table = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)&directOutputModeFunctionTable(void)::table + 1) = prime;
          do
            *(_QWORD *)(directOutputModeFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD **)qword_1ED001130;
          if (qword_1ED001130)
          {
            v22 = *(_QWORD *)(qword_1ED001130 + 8);
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(directOutputModeFunctionTable(void)::table + 8 * v22) = &qword_1ED001130;
            for (i = *v21; i; v22 = v28)
            {
              v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(_QWORD *)&prime)
                  v28 %= *(_QWORD *)&prime;
              }
              else
              {
                v28 &= *(_QWORD *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(_QWORD *)(directOutputModeFunctionTable(void)::table + 8 * v28))
                {
                  *(_QWORD *)(directOutputModeFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                *v21 = (_QWORD *)*i;
                *i = **(_QWORD **)(directOutputModeFunctionTable(void)::table + 8 * v28);
                **(_QWORD **)(directOutputModeFunctionTable(void)::table + 8 * v28) = i;
                i = v21;
              }
              v28 = v22;
LABEL_57:
              v21 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        v33 = (void *)directOutputModeFunctionTable(void)::table;
        *(_QWORD *)&directOutputModeFunctionTable(void)::table = 0;
        if (v33)
          operator delete(v33);
        v8 = 0;
        *((_QWORD *)&directOutputModeFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v29 = directOutputModeFunctionTable(void)::table;
  v30 = *(_QWORD **)(directOutputModeFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *v11 = *v30;
LABEL_74:
    *v30 = v11;
    goto LABEL_75;
  }
  *v11 = qword_1ED001130;
  qword_1ED001130 = (uint64_t)v11;
  *(_QWORD *)(v29 + 8 * v2) = &qword_1ED001130;
  if (*v11)
  {
    v31 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8)
        v31 %= v8;
    }
    else
    {
      v31 &= v8 - 1;
    }
    v30 = (_QWORD *)(directOutputModeFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1ED001138;
  return v11;
}

void sub_19C8CCE2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MLE5DirectOutputModeTensorToMultiArray(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v12;

  v4 = a2;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v12);
  objc_msgSend(v4, "multiArrayConstraint");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  MLE5MultiArrayShapeForTensor();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "isAllowedShape:error:", v6, a3) & 1) != 0
    || (objc_msgSend(v5, "shapeConstraint"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v7, "findAvailableShape:", v6),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v8,
        v7,
        v8))
  {
    v9 = MLE5MultiArrayDataTypeForTensor();
    if (v9 == objc_msgSend(v5, "dataType"))
      v10 = 1;
    else
      v10 = 2;
  }
  else
  {
    v10 = 0;
  }

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v12);
  return v10;
}

void sub_19C8CCF30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MLE5DirectOutputModeDirect()
{
  return 1;
}

_QWORD *MLE5DirectOutputModeTensorToPixelBuffer(uint64_t a1, void *a2, _QWORD *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v4 = a2;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v15);
  objc_msgSend(v4, "imageConstraint");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0;
  MLE5GetShapeFromTensorDescriptor();
  +[MLLogging coreChannel](MLLogging, "coreChannel");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(v4, "name");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v17 = v13;
    v18 = 2048;
    v19 = v14;
    _os_log_error_impl(&dword_19C486000, v6, OS_LOG_TYPE_ERROR, "A tensor representation for the image feature named %@ should have at least two dimensions, but its rank was %zu", buf, 0x16u);

  }
  if (a3)
  {
    v7 = (void *)MEMORY[0x1E0CB35C8];
    v20 = *MEMORY[0x1E0CB2D50];
    v8 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v4, "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringWithFormat:", CFSTR("A tensor representation for the image feature named %@ should have at least two dimensions, but its rank was %zu"), v9, v14);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = v10;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, &v20, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 1, v11);
    *a3 = (id)objc_claimAutoreleasedReturnValue();

    a3 = 0;
  }

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v15);
  return a3;
}

void sub_19C8CD33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va1);

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *i;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v33;

  v4 = a1[1];
  v5 = a1[2];
  v6 = *((_QWORD *)a1 + 1);
  v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  v8 = *((_QWORD *)&outputReusabilityFunctionTable(void)::table + 1);
  if (*((_QWORD *)&outputReusabilityFunctionTable(void)::table + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&outputReusabilityFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((_QWORD *)&outputReusabilityFunctionTable(void)::table + 1))
        v2 = v7 % *((_QWORD *)&outputReusabilityFunctionTable(void)::table + 1);
    }
    else
    {
      v2 = v7 & (*((_QWORD *)&outputReusabilityFunctionTable(void)::table + 1) - 1);
    }
    v10 = *(void ***)(outputReusabilityFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((_QWORD *)&outputReusabilityFunctionTable(void)::table + 1))
                v12 %= *((_QWORD *)&outputReusabilityFunctionTable(void)::table + 1);
            }
            else
            {
              v12 &= *((_QWORD *)&outputReusabilityFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  v13 = (float)(unint64_t)(qword_1EE427010 + 1);
  if (!v8 || (float)(*(float *)&dword_1EE427018 * (float)v8) < v13)
  {
    v14 = 1;
    if (v8 >= 3)
      v14 = (v8 & (v8 - 1)) != 0;
    v15 = v14 | (2 * v8);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1EE427018);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)&outputReusabilityFunctionTable(void)::table + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v8)
    {
      v24 = vcvtps_u32_f32((float)(unint64_t)qword_1EE427010 / *(float *)&dword_1EE427018);
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)&outputReusabilityFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = (void *)outputReusabilityFunctionTable(void)::table;
          *(_QWORD *)&outputReusabilityFunctionTable(void)::table = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)&outputReusabilityFunctionTable(void)::table + 1) = prime;
          do
            *(_QWORD *)(outputReusabilityFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD **)qword_1EE427008;
          if (qword_1EE427008)
          {
            v22 = *(_QWORD *)(qword_1EE427008 + 8);
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(outputReusabilityFunctionTable(void)::table + 8 * v22) = &qword_1EE427008;
            for (i = *v21; i; v22 = v28)
            {
              v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(_QWORD *)&prime)
                  v28 %= *(_QWORD *)&prime;
              }
              else
              {
                v28 &= *(_QWORD *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(_QWORD *)(outputReusabilityFunctionTable(void)::table + 8 * v28))
                {
                  *(_QWORD *)(outputReusabilityFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                *v21 = (_QWORD *)*i;
                *i = **(_QWORD **)(outputReusabilityFunctionTable(void)::table + 8 * v28);
                **(_QWORD **)(outputReusabilityFunctionTable(void)::table + 8 * v28) = i;
                i = v21;
              }
              v28 = v22;
LABEL_57:
              v21 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        v33 = (void *)outputReusabilityFunctionTable(void)::table;
        *(_QWORD *)&outputReusabilityFunctionTable(void)::table = 0;
        if (v33)
          operator delete(v33);
        v8 = 0;
        *((_QWORD *)&outputReusabilityFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v29 = outputReusabilityFunctionTable(void)::table;
  v30 = *(_QWORD **)(outputReusabilityFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *v11 = *v30;
LABEL_74:
    *v30 = v11;
    goto LABEL_75;
  }
  *v11 = qword_1EE427008;
  qword_1EE427008 = (uint64_t)v11;
  *(_QWORD *)(v29 + 8 * v2) = &qword_1EE427008;
  if (*v11)
  {
    v31 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8)
        v31 %= v8;
    }
    else
    {
      v31 &= v8 - 1;
    }
    v30 = (_QWORD *)(outputReusabilityFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1EE427010;
  return v11;
}

void sub_19C8CD8E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MLE5OutputReusabilityTensorPortHasSamePixelBufferSurface(void *a1)
{
  __CVBuffer *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = a1;
  MLE5BufferObjectBoundTo((e5rt_io_port *)&v4);
  if (v4)
  {
    v2 = MLE5IOSurfaceOfBufferObject();
    if (v2)
      v2 = v2 == (_QWORD)CVPixelBufferGetIOSurface(v1);
  }
  else
  {
    v2 = 0;
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v4, 0);

  return v2;
}

void sub_19C8CD970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);

  _Unwind_Resume(a1);
}

uint64_t MLE5OutputReusabilityNo()
{
  return 0;
}

BOOL MLE5OutputReusabilityTensorPortHasSameMultiArray(void *a1)
{
  id v1;
  uint64_t v2;
  _BOOL8 v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v1 = a1;
  MLE5BufferObjectBoundTo((e5rt_io_port *)&v10);
  if (v10)
  {
    v2 = MLE5DataPointerOfBufferObject();
    v6 = 0;
    v7 = &v6;
    v8 = 0x2020000000;
    v9 = 0;
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __MLE5OutputReusabilityTensorPortHasSameMultiArray_block_invoke;
    v5[3] = &unk_1E3D66760;
    v5[4] = &v6;
    v5[5] = v2;
    objc_msgSend(v1, "getBytesWithHandler:", v5);
    v3 = *((_BYTE *)v7 + 24) != 0;
    _Block_object_dispose(&v6, 8);
  }
  else
  {
    v3 = 0;
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v10, 0);

  return v3;
}

void sub_19C8CDA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)(v9 - 24), 0);

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *i;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v33;

  v4 = a1[1];
  v5 = a1[2];
  v6 = *((_QWORD *)a1 + 1);
  v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  v8 = *((_QWORD *)&outputCopyFunctionTable(void)::table + 1);
  if (*((_QWORD *)&outputCopyFunctionTable(void)::table + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&outputCopyFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((_QWORD *)&outputCopyFunctionTable(void)::table + 1))
        v2 = v7 % *((_QWORD *)&outputCopyFunctionTable(void)::table + 1);
    }
    else
    {
      v2 = v7 & (*((_QWORD *)&outputCopyFunctionTable(void)::table + 1) - 1);
    }
    v10 = *(void ***)(outputCopyFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((_QWORD *)&outputCopyFunctionTable(void)::table + 1))
                v12 %= *((_QWORD *)&outputCopyFunctionTable(void)::table + 1);
            }
            else
            {
              v12 &= *((_QWORD *)&outputCopyFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  v13 = (float)(unint64_t)(qword_1EE4316E0 + 1);
  if (!v8 || (float)(*(float *)&dword_1EE4316E8 * (float)v8) < v13)
  {
    v14 = 1;
    if (v8 >= 3)
      v14 = (v8 & (v8 - 1)) != 0;
    v15 = v14 | (2 * v8);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1EE4316E8);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)&outputCopyFunctionTable(void)::table + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v8)
    {
      v24 = vcvtps_u32_f32((float)(unint64_t)qword_1EE4316E0 / *(float *)&dword_1EE4316E8);
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)&outputCopyFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = (void *)outputCopyFunctionTable(void)::table;
          *(_QWORD *)&outputCopyFunctionTable(void)::table = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)&outputCopyFunctionTable(void)::table + 1) = prime;
          do
            *(_QWORD *)(outputCopyFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD **)qword_1EE4316D8;
          if (qword_1EE4316D8)
          {
            v22 = *(_QWORD *)(qword_1EE4316D8 + 8);
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(outputCopyFunctionTable(void)::table + 8 * v22) = &qword_1EE4316D8;
            for (i = *v21; i; v22 = v28)
            {
              v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(_QWORD *)&prime)
                  v28 %= *(_QWORD *)&prime;
              }
              else
              {
                v28 &= *(_QWORD *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(_QWORD *)(outputCopyFunctionTable(void)::table + 8 * v28))
                {
                  *(_QWORD *)(outputCopyFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                *v21 = (_QWORD *)*i;
                *i = **(_QWORD **)(outputCopyFunctionTable(void)::table + 8 * v28);
                **(_QWORD **)(outputCopyFunctionTable(void)::table + 8 * v28) = i;
                i = v21;
              }
              v28 = v22;
LABEL_57:
              v21 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        v33 = (void *)outputCopyFunctionTable(void)::table;
        *(_QWORD *)&outputCopyFunctionTable(void)::table = 0;
        if (v33)
          operator delete(v33);
        v8 = 0;
        *((_QWORD *)&outputCopyFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v29 = outputCopyFunctionTable(void)::table;
  v30 = *(_QWORD **)(outputCopyFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *v11 = *v30;
LABEL_74:
    *v30 = v11;
    goto LABEL_75;
  }
  *v11 = qword_1EE4316D8;
  qword_1EE4316D8 = (uint64_t)v11;
  *(_QWORD *)(v29 + 8 * v2) = &qword_1EE4316D8;
  if (*v11)
  {
    v31 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8)
        v31 %= v8;
    }
    else
    {
      v31 &= v8 - 1;
    }
    v30 = (_QWORD *)(outputCopyFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1EE4316E0;
  return v11;
}

void sub_19C8CDFE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL MLE5CopyTensorToPixelBuffer(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  __CVBuffer *v6;
  id v7;
  OSType PixelFormatType;
  void *v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void **v21;
  void *v22;
  void *v23;
  _BOOL8 v24;
  void **v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, void *, size_t, size_t, size_t);
  uint64_t StridesFromTensorDescriptor;
  uint64_t RankFromTensorDescriptor;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *BaseAddress;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  void *__p[2];
  char v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint8_t buf[4];
  void **v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  PixelFormatType = CVPixelBufferGetPixelFormatType(v6);
  objc_msgSend(v7, "imageConstraint");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "pixelType");

  MLE5TensorDescriptorOf((e5rt_io_port *)&v45);
  MLE5PixelBufferAndTensorStrategyKey::MLE5PixelBufferAndTensorStrategyKey((uint64_t)&v42, PixelFormatType, v10);
  {
    copyTensorToPixelBufferFunctionTable(void)::table = 0u;
    *(_OWORD *)&qword_1EE431710 = 0u;
    dword_1EE431720 = 1065353216;
  }
  if (copyTensorToPixelBufferFunctionTable(void)::onceToken != -1)
    dispatch_once(&copyTensorToPixelBufferFunctionTable(void)::onceToken, &__block_literal_global_46);
  if (!*((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1))
    goto LABEL_22;
  v12 = v43 ^ v42 ^ v44;
  v13 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&copyTensorToPixelBufferFunctionTable(void)::table + 8));
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = v43 ^ v42 ^ v44;
    if (v12 >= *((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1))
      v14 = v12 % *((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1);
  }
  else
  {
    v14 = v12 & (*((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1) - 1);
  }
  v15 = *(uint64_t ***)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v14);
  if (!v15)
    goto LABEL_22;
  v16 = *v15;
  if (!v16)
    goto LABEL_22;
  while (1)
  {
    v17 = v16[1];
    if (v12 == v17)
      break;
    if (v13.u32[0] > 1uLL)
    {
      if (v17 >= *((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1))
        v17 %= *((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1);
    }
    else
    {
      v17 &= *((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1) - 1;
    }
    if (v17 != v14)
      goto LABEL_22;
LABEL_21:
    v16 = (uint64_t *)*v16;
    if (!v16)
      goto LABEL_22;
  }
  if (*((_DWORD *)v16 + 8) != v44 || v16[3] != v43 || *((_DWORD *)v16 + 4) != v42)
    goto LABEL_21;
  v27 = (void (*)(uint64_t, uint64_t, uint64_t, void *, size_t, size_t, size_t))v16[5];
  if (v27)
  {
    MLE5BufferObjectBoundTo((e5rt_io_port *)__p);
    StridesFromTensorDescriptor = MLE5GetStridesFromTensorDescriptor();
    RankFromTensorDescriptor = MLE5GetRankFromTensorDescriptor();
    v30 = MLE5DataPointerOfBufferObject();
    v31 = CVPixelBufferLockBaseAddress(v6, 0);
    v24 = (_DWORD)v31 == 0;
    if ((_DWORD)v31)
    {
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v51) = v31;
        _os_log_error_impl(&dword_19C486000, v32, OS_LOG_TYPE_ERROR, "Failed to lock the source pixel buffer. (CVReturn: %d).", buf, 8u);
      }

      if (a4)
      {
        v33 = (void *)MEMORY[0x1E0CB35C8];
        v46 = *MEMORY[0x1E0CB2D50];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Failed to lock the source pixel buffer. (CVReturn: %d)."), v31);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = v34;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 0, v35);
        *a4 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
    else
    {
      BaseAddress = CVPixelBufferGetBaseAddress(v6);
      Width = CVPixelBufferGetWidth(v6);
      Height = CVPixelBufferGetHeight(v6);
      BytesPerRow = CVPixelBufferGetBytesPerRow(v6);
      v27(v30, StridesFromTensorDescriptor, RankFromTensorDescriptor, BaseAddress, Width, Height, BytesPerRow);
      CVPixelBufferUnlockBaseAddress(v6, 0);
    }
    std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)__p, 0);
    goto LABEL_30;
  }
LABEL_22:
  +[MLLogging coreChannel](MLLogging, "coreChannel");
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    MLE5PixelBufferAndTensorStrategyKey::str((MLE5PixelBufferAndTensorStrategyKey *)__p, &v42);
    v26 = v41 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v51 = v26;
    _os_log_error_impl(&dword_19C486000, v18, OS_LOG_TYPE_ERROR, "Copy from tensor to pixel buffer (%s) is not supported.", buf, 0xCu);
    if (v41 < 0)
      operator delete(__p[0]);
  }

  if (a4)
  {
    v19 = (void *)MEMORY[0x1E0CB35C8];
    v48 = *MEMORY[0x1E0CB2D50];
    v20 = (void *)MEMORY[0x1E0CB3940];
    MLE5PixelBufferAndTensorStrategyKey::str((MLE5PixelBufferAndTensorStrategyKey *)__p, &v42);
    v21 = v41 >= 0 ? __p : (void **)__p[0];
    objc_msgSend(v20, "stringWithFormat:", CFSTR("Copy from tensor to pixel buffer (%s) is not supported."), v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = v22;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 1, v23);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

    if (v41 < 0)
      operator delete(__p[0]);
  }
  v24 = 0;
LABEL_30:
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v45);

  return v24;
}

void sub_19C8CE520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)&__p, 0);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&a19);

  _Unwind_Resume(a1);
}

uint64_t MLE5CopyTensorToMultiArray(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v6 = a2;
  +[MLMultiArray multiArrayOwningBufferObjectOfPort:error:](MLMultiArray, "multiArrayOwningBufferObjectOfPort:error:", a1, a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
    v9 = objc_msgSend(v7, "copyIntoMultiArray:error:", v6, a4);
  else
    v9 = 0;

  return v9;
}

void sub_19C8CE660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t MLE5CopySurfaceToPixelBuffer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  __CVBuffer *v6;
  __CVBuffer *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  VTPixelTransferSessionRef pixelTransferSessionOut;
  __CVBuffer *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint8_t buf[4];
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = (__CVBuffer *)MLE5CopyPixelBufferOwningSurfaceOfPort(a1, (_QWORD *)a4);
  pixelTransferSessionOut = 0;
  v19 = v7;
  v8 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &pixelTransferSessionOut);
  if ((_DWORD)v8)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v25 = v8;
      _os_log_error_impl(&dword_19C486000, v9, OS_LOG_TYPE_ERROR, "Failed to create a pixel buffer transfer engine. (VideoToolbox error: %d.)", buf, 8u);
    }

    if (a4)
    {
      v10 = (void *)MEMORY[0x1E0CB35C8];
      v22 = *MEMORY[0x1E0CB2D50];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Failed to create a pixel buffer transfer engine. (VideoToolbox error: %d.)"), v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v11;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 0, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:
      *(_QWORD *)a4 = v13;

      a4 = 0;
    }
  }
  else
  {
    v14 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v7, v6);
    if (!(_DWORD)v14)
    {
      CFRelease(pixelTransferSessionOut);
      a4 = 1;
      goto LABEL_13;
    }
    CFRelease(pixelTransferSessionOut);
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v25 = v14;
      _os_log_error_impl(&dword_19C486000, v15, OS_LOG_TYPE_ERROR, "Failed to transfer pixel buffer with err: %d", buf, 8u);
    }

    if (a4)
    {
      v16 = (void *)MEMORY[0x1E0CB35C8];
      v20 = *MEMORY[0x1E0CB2D50];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Failed to transfer pixel buffer with err: %d"), v14);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v11;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 0, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_11;
    }
  }
LABEL_13:
  std::unique_ptr<__CVBuffer,MLE5ObjectDeleter<__CVBuffer>>::reset[abi:ne180100](&v19);

  return a4;
}

void sub_19C8CE91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  std::unique_ptr<__CVBuffer,MLE5ObjectDeleter<__CVBuffer>>::reset[abi:ne180100]((__CVBuffer **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(int *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *i;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v33;

  v4 = a1[4];
  v5 = *((_QWORD *)a1 + 1);
  v6 = *a1;
  v7 = v5 ^ *a1 ^ v4;
  v8 = *((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1);
  if (*((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&copyTensorToPixelBufferFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = v5 ^ v6 ^ v4;
      if (v7 >= *((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1))
        v2 = v7 % *((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1);
    }
    else
    {
      v2 = v7 & (*((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1) - 1);
    }
    v10 = *(void ***)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 8) == v4 && v11[3] == v5 && *((_DWORD *)v11 + 4) == v6)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1))
                v12 %= *((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1);
            }
            else
            {
              v12 &= *((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *(_OWORD *)a2;
  v11[4] = *(_QWORD *)(a2 + 16);
  v11[5] = 0;
  v13 = (float)(unint64_t)(qword_1EE431718 + 1);
  if (!v8 || (float)(*(float *)&dword_1EE431720 * (float)v8) < v13)
  {
    v14 = 1;
    if (v8 >= 3)
      v14 = (v8 & (v8 - 1)) != 0;
    v15 = v14 | (2 * v8);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1EE431720);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v8)
    {
      v24 = vcvtps_u32_f32((float)(unint64_t)qword_1EE431718 / *(float *)&dword_1EE431720);
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = (void *)copyTensorToPixelBufferFunctionTable(void)::table;
          *(_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)&copyTensorToPixelBufferFunctionTable(void)::table + 1) = prime;
          do
            *(_QWORD *)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD **)qword_1EE431710;
          if (qword_1EE431710)
          {
            v22 = *(_QWORD *)(qword_1EE431710 + 8);
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v22) = &qword_1EE431710;
            for (i = *v21; i; v22 = v28)
            {
              v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(_QWORD *)&prime)
                  v28 %= *(_QWORD *)&prime;
              }
              else
              {
                v28 &= *(_QWORD *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(_QWORD *)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v28))
                {
                  *(_QWORD *)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                *v21 = (_QWORD *)*i;
                *i = **(_QWORD **)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v28);
                **(_QWORD **)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v28) = i;
                i = v21;
              }
              v28 = v22;
LABEL_57:
              v21 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        v33 = (void *)copyTensorToPixelBufferFunctionTable(void)::table;
        *(_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table = 0;
        if (v33)
          operator delete(v33);
        v8 = 0;
        *((_QWORD *)&copyTensorToPixelBufferFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v29 = copyTensorToPixelBufferFunctionTable(void)::table;
  v30 = *(_QWORD **)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *v11 = *v30;
LABEL_74:
    *v30 = v11;
    goto LABEL_75;
  }
  *v11 = qword_1EE431710;
  qword_1EE431710 = (uint64_t)v11;
  *(_QWORD *)(v29 + 8 * v2) = &qword_1EE431710;
  if (*v11)
  {
    v31 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8)
        v31 %= v8;
    }
    else
    {
      v31 &= v8 - 1;
    }
    v30 = (_QWORD *)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1EE431718;
  return v11;
}

void sub_19C8CEF28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

vImage_Error MLE5CopyBGRTensor_CompDtypeFLOAT_CompPackFmt32_32BGRA(char *a1, uint64_t a2, uint64_t a3, void *a4, vImagePixelCount a5, vImagePixelCount a6, size_t a7)
{
  uint64_t v7;
  size_t v8;
  vImage_Error result;
  vImage_Error v10;
  NSObject *v11;
  vImage_Buffer dest;
  vImage_Buffer red;
  vImage_Buffer green;
  vImage_Buffer blue;
  uint8_t buf[4];
  int v17;
  _QWORD minFloat[2];
  __int128 maxFloat;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  blue.data = a1;
  blue.height = a6;
  v7 = *(_QWORD *)(a2 + 8 * a3 - 24);
  v8 = *(_QWORD *)(a2 + 8 * a3 - 16);
  blue.width = a5;
  blue.rowBytes = v8;
  green.data = &a1[v7];
  green.height = a6;
  green.width = a5;
  green.rowBytes = v8;
  red.data = &a1[2 * v7];
  red.height = a6;
  red.width = a5;
  red.rowBytes = v8;
  dest.data = a4;
  dest.height = a6;
  dest.width = a5;
  dest.rowBytes = a7;
  maxFloat = xmmword_19CB39A00;
  minFloat[0] = 0;
  minFloat[1] = 0;
  result = vImageConvert_PlanarFToBGRX8888(&blue, &green, &red, 0xFFu, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
  if (result)
  {
    v10 = result;
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v17 = v10;
      _os_log_error_impl(&dword_19C486000, v11, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFToBGRX8888 has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("vImageConvert_PlanarFToBGRX8888 has failed with error: %d"), v10);
  }
  return result;
}

vImage_Error MLE5CopyRGBTensor_CompDtypeFLOAT_CompPackFmt32_32BGRA(char *a1, uint64_t a2, uint64_t a3, void *a4, vImagePixelCount a5, vImagePixelCount a6, size_t a7)
{
  uint64_t v7;
  size_t v8;
  vImage_Error result;
  vImage_Error v10;
  NSObject *v11;
  vImage_Buffer dest;
  vImage_Buffer blue;
  vImage_Buffer green;
  vImage_Buffer red;
  uint8_t buf[4];
  int v17;
  _QWORD minFloat[2];
  __int128 maxFloat;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  red.data = a1;
  red.height = a6;
  v7 = *(_QWORD *)(a2 + 8 * a3 - 24);
  v8 = *(_QWORD *)(a2 + 8 * a3 - 16);
  red.width = a5;
  red.rowBytes = v8;
  green.data = &a1[v7];
  green.height = a6;
  green.width = a5;
  green.rowBytes = v8;
  blue.data = &a1[2 * v7];
  blue.height = a6;
  blue.width = a5;
  blue.rowBytes = v8;
  dest.data = a4;
  dest.height = a6;
  dest.width = a5;
  dest.rowBytes = a7;
  maxFloat = xmmword_19CB39A00;
  minFloat[0] = 0;
  minFloat[1] = 0;
  result = vImageConvert_PlanarFToBGRX8888(&blue, &green, &red, 0xFFu, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
  if (result)
  {
    v10 = result;
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v17 = v10;
      _os_log_error_impl(&dword_19C486000, v11, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFToBGRX8888 has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("vImageConvert_PlanarFToBGRX8888 has failed with error: %d"), v10);
  }
  return result;
}

vImage_Error MLE5CopyGrayTensor_CompDtypeFLOAT_CompPackFmt32_OneComponent8(void *a1, uint64_t a2, uint64_t a3, void *a4, vImagePixelCount a5, vImagePixelCount a6, size_t a7)
{
  size_t v7;
  vImage_Error result;
  vImage_Error v9;
  NSObject *v10;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint8_t buf[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  src.data = a1;
  src.height = a6;
  v7 = *(_QWORD *)(a2 + 8 * a3 - 16);
  src.width = a5;
  src.rowBytes = v7;
  dest.data = a4;
  dest.height = a6;
  dest.width = a5;
  dest.rowBytes = a7;
  result = vImageConvert_PlanarFtoPlanar8(&src, &dest, 255.0, 0.0, 0);
  if (result)
  {
    v9 = result;
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v14 = v9;
      _os_log_error_impl(&dword_19C486000, v10, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar8 has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("vImageConvert_PlanarFtoPlanar8 has failed with error: %d"), v9);
  }
  return result;
}

vImage_Error MLE5CopyGrayTensor_CompDtypeFLOAT_CompPackFmt32_OneComponent16Half(void *a1, uint64_t a2, uint64_t a3, void *a4, vImagePixelCount a5, vImagePixelCount a6, size_t a7)
{
  size_t v7;
  vImage_Error result;
  vImage_Error v9;
  NSObject *v10;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint8_t buf[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  src.data = a1;
  src.height = a6;
  v7 = *(_QWORD *)(a2 + 8 * a3 - 16);
  src.width = a5;
  src.rowBytes = v7;
  dest.data = a4;
  dest.height = a6;
  dest.width = a5;
  dest.rowBytes = a7;
  result = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
  if (result)
  {
    v9 = result;
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v14 = v9;
      _os_log_error_impl(&dword_19C486000, v10, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar16F has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("vImageConvert_PlanarFtoPlanar16F has failed with error: %d"), v9);
  }
  return result;
}

void MLE5CopyBGRTensor_CompDtypeFLOAT_CompPackFmt16_32BGRA(char *a1, const uint64_t *a2, uint64_t a3, char *a4, vImagePixelCount a5, uint64_t a6, size_t a7)
{
  _MLE5CopyXXXTensor_CompDtypeFLOAT_CompPackFmt16_32YYYY(a1, a2, a3, a4, a5, a6, a7, 1);
}

void MLE5CopyRGBTensor_CompDtypeFLOAT_CompPackFmt16_32BGRA(char *a1, const uint64_t *a2, uint64_t a3, char *a4, vImagePixelCount a5, uint64_t a6, size_t a7)
{
  _MLE5CopyXXXTensor_CompDtypeFLOAT_CompPackFmt16_32YYYY(a1, a2, a3, a4, a5, a6, a7, 0);
}

void MLE5CopyGrayTensor_CompDtypeFLOAT_CompPackFmt16_OneComponent8(char *a1, uint64_t a2, uint64_t a3, char *a4, vImagePixelCount a5, uint64_t a6, size_t a7)
{
  size_t v14;
  uint64_t v15;
  vImage_Error v16;
  vImage_Error v17;
  NSObject *v18;
  vImage_Error v19;
  vImage_Error v20;
  NSObject *v21;
  size_t v22;
  vImage_Buffer dest;
  vImage_Buffer src;
  void *memptr;
  uint8_t buf[4];
  int v27;
  vImage_Buffer v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  memptr = 0;
  v22 = 4 * a5;
  malloc_type_posix_memalign(&memptr, 0x80uLL, 4 * a5, 0x100004052888210uLL);
  if (a6)
  {
    v14 = *(_QWORD *)(a2 + 8 * a3 - 16);
    v15 = *MEMORY[0x1E0C99750];
    do
    {
      src.data = a1;
      src.height = 1;
      src.width = a5;
      src.rowBytes = v14;
      dest.data = memptr;
      dest.height = 1;
      dest.width = a5;
      dest.rowBytes = v22;
      v16 = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      if (v16)
      {
        v17 = v16;
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v28.data) = 67109120;
          HIDWORD(v28.data) = v17;
          _os_log_error_impl(&dword_19C486000, v18, OS_LOG_TYPE_ERROR, "vImageConvert_Planar16FtoPlanarF has failed with error: %d", (uint8_t *)&v28, 8u);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v15, CFSTR("vImageConvert_Planar16FtoPlanarF has failed with error: %d"), v17);
      }
      v28.data = a4;
      v28.height = 1;
      v28.width = a5;
      v28.rowBytes = a7;
      v19 = vImageConvert_PlanarFtoPlanar8(&dest, &v28, 255.0, 0.0, 0);
      if (v19)
      {
        v20 = v19;
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v27 = v20;
          _os_log_error_impl(&dword_19C486000, v21, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar16F with error: %d", buf, 8u);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v15, CFSTR("vImageConvert_PlanarFtoPlanar16F with error: %d"), v20);
      }
      a1 += v14;
      a4 += a7;
      --a6;
    }
    while (a6);
  }
  free(memptr);
}

vImage_Error MLE5CopyGrayTensor_CompDtypeFLOAT_CompPackFmt16_OneComponent16Half(void *a1, uint64_t a2, uint64_t a3, void *a4, vImagePixelCount a5, vImagePixelCount a6, size_t a7)
{
  size_t v7;
  vImage_Error result;
  vImage_Error v9;
  NSObject *v10;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint8_t buf[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  src.data = a1;
  src.height = a6;
  v7 = *(_QWORD *)(a2 + 8 * a3 - 16);
  src.width = a5;
  src.rowBytes = v7;
  dest.data = a4;
  dest.height = a6;
  dest.width = a5;
  dest.rowBytes = a7;
  result = vImageCopyBuffer(&src, &dest, 2uLL, 0);
  if (result)
  {
    v9 = result;
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v14 = v9;
      _os_log_error_impl(&dword_19C486000, v10, OS_LOG_TYPE_ERROR, "vImageCopyBuffer has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("vImageCopyBuffer has failed with error: %d"), v9);
  }
  return result;
}

void _MLE5CopyXXXTensor_CompDtypeFLOAT_CompPackFmt16_32YYYY(char *a1, const uint64_t *a2, uint64_t a3, char *a4, vImagePixelCount a5, uint64_t a6, size_t a7, int a8)
{
  uint64_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t i;
  char *v23;
  vImage_Error v24;
  vImage_Error v25;
  NSObject *v26;
  vImage_Error v27;
  vImage_Error v28;
  NSObject *v29;
  vImage_Error v30;
  vImage_Error v31;
  NSObject *v32;
  size_t v33;
  size_t v34;
  size_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  vImage_Buffer v39;
  vImage_Buffer red;
  vImage_Buffer green;
  vImage_Buffer dest;
  vImage_Buffer src;
  void *v44;
  void *memptr;
  uint8_t v46[4];
  int v47;
  vImage_Buffer buf;
  _QWORD v49[5];

  v49[3] = *MEMORY[0x1E0C80C00];
  v13 = a2[a3 - 3];
  v14 = a2[a3 - 2];
  v49[0] = a1;
  v49[1] = &a1[v13];
  v49[2] = &a1[2 * v13];
  v44 = 0;
  memptr = 0;
  v15 = (4 * a5 + 127) & 0xFFFFFFFFFFFFFF80;
  v16 = (a5 + 127) & 0xFFFFFFFFFFFFFF80;
  malloc_type_posix_memalign(&memptr, 0x80uLL, 3 * v15, 0xC359222DuLL);
  malloc_type_posix_memalign(&v44, 0x80uLL, 3 * v16, 0xD7A7430DuLL);
  if (a6)
  {
    v17 = 0;
    v18 = 2;
    if (a8)
      v19 = 0;
    else
      v19 = 2;
    v20 = v19 * v16;
    if (!a8)
      v18 = 0;
    v33 = v18 * v16;
    v34 = v20;
    v38 = *MEMORY[0x1E0C99750];
    v35 = a7;
    do
    {
      v36 = v17;
      v37 = a4;
      v21 = 0;
      for (i = 0; i != 3; ++i)
      {
        v23 = (char *)v49[i];
        src.data = v23;
        src.height = 1;
        src.width = a5;
        src.rowBytes = v14;
        dest.data = (char *)memptr + v21;
        dest.height = 1;
        dest.width = a5;
        dest.rowBytes = v15;
        v24 = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        if (v24)
        {
          v25 = v24;
          +[MLLogging coreChannel](MLLogging, "coreChannel");
          v26 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.data) = 67109120;
            HIDWORD(buf.data) = v25;
            _os_log_error_impl(&dword_19C486000, v26, OS_LOG_TYPE_ERROR, "vImageConvert_Planar16FtoPlanarF has failed with error: %d", (uint8_t *)&buf, 8u);
          }

          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v38, CFSTR("vImageConvert_Planar16FtoPlanarF has failed with error: %d"), v25);
        }
        v49[i] = &v23[v14];
        v21 += v15;
      }
      src.data = memptr;
      src.height = 3;
      src.width = a5;
      src.rowBytes = v15;
      dest.data = v44;
      dest.height = 3;
      dest.width = a5;
      dest.rowBytes = v16;
      v27 = vImageConvert_PlanarFtoPlanar8(&src, &dest, 255.0, 0.0, 0);
      if (v27)
      {
        v28 = v27;
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.data) = 67109120;
          HIDWORD(buf.data) = v28;
          _os_log_error_impl(&dword_19C486000, v29, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar8 has failed with error: %d", (uint8_t *)&buf, 8u);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v38, CFSTR("vImageConvert_PlanarFtoPlanar8 has failed with error: %d"), v28);
      }
      buf.data = (char *)v44 + v34;
      buf.height = 1;
      buf.width = a5;
      buf.rowBytes = v16;
      green.data = (char *)v44 + v16;
      green.height = 1;
      green.width = a5;
      green.rowBytes = v16;
      red.data = (char *)v44 + v33;
      red.height = 1;
      red.width = a5;
      red.rowBytes = v16;
      v39.data = v37;
      v39.height = 1;
      v39.width = a5;
      v39.rowBytes = v35;
      v30 = vImageConvert_Planar8ToBGRX8888(&buf, &green, &red, 0xFFu, &v39, 0);
      if (v30)
      {
        v31 = v30;
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v46 = 67109120;
          v47 = v31;
          _os_log_error_impl(&dword_19C486000, v32, OS_LOG_TYPE_ERROR, "vImageConvert_Planar8ToBGRX8888 has failed with error: %d", v46, 8u);
        }

        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v38, CFSTR("vImageConvert_Planar8ToBGRX8888 has failed with error: %d"), v31);
      }
      a4 = &v37[v35];
      v17 = v36 + 1;
    }
    while (v36 + 1 != a6);
  }
  free(memptr);
  free(v44);
}

_QWORD *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *i;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v33;

  v4 = a1[1];
  v5 = a1[2];
  v6 = *((_QWORD *)a1 + 1);
  v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  v8 = *((_QWORD *)&outputFeatureValueFunctionTable(void)::table + 1);
  if (*((_QWORD *)&outputFeatureValueFunctionTable(void)::table + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&outputFeatureValueFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((_QWORD *)&outputFeatureValueFunctionTable(void)::table + 1))
        v2 = v7 % *((_QWORD *)&outputFeatureValueFunctionTable(void)::table + 1);
    }
    else
    {
      v2 = v7 & (*((_QWORD *)&outputFeatureValueFunctionTable(void)::table + 1) - 1);
    }
    v10 = *(void ***)(outputFeatureValueFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((_QWORD *)&outputFeatureValueFunctionTable(void)::table + 1))
                v12 %= *((_QWORD *)&outputFeatureValueFunctionTable(void)::table + 1);
            }
            else
            {
              v12 &= *((_QWORD *)&outputFeatureValueFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  v13 = (float)(unint64_t)(qword_1ED001168 + 1);
  if (!v8 || (float)(*(float *)&dword_1ED001170 * (float)v8) < v13)
  {
    v14 = 1;
    if (v8 >= 3)
      v14 = (v8 & (v8 - 1)) != 0;
    v15 = v14 | (2 * v8);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1ED001170);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)&outputFeatureValueFunctionTable(void)::table + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v8)
    {
      v24 = vcvtps_u32_f32((float)(unint64_t)qword_1ED001168 / *(float *)&dword_1ED001170);
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)&outputFeatureValueFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = (void *)outputFeatureValueFunctionTable(void)::table;
          *(_QWORD *)&outputFeatureValueFunctionTable(void)::table = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)&outputFeatureValueFunctionTable(void)::table + 1) = prime;
          do
            *(_QWORD *)(outputFeatureValueFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD **)qword_1ED001160;
          if (qword_1ED001160)
          {
            v22 = *(_QWORD *)(qword_1ED001160 + 8);
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(outputFeatureValueFunctionTable(void)::table + 8 * v22) = &qword_1ED001160;
            for (i = *v21; i; v22 = v28)
            {
              v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(_QWORD *)&prime)
                  v28 %= *(_QWORD *)&prime;
              }
              else
              {
                v28 &= *(_QWORD *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(_QWORD *)(outputFeatureValueFunctionTable(void)::table + 8 * v28))
                {
                  *(_QWORD *)(outputFeatureValueFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                *v21 = (_QWORD *)*i;
                *i = **(_QWORD **)(outputFeatureValueFunctionTable(void)::table + 8 * v28);
                **(_QWORD **)(outputFeatureValueFunctionTable(void)::table + 8 * v28) = i;
                i = v21;
              }
              v28 = v22;
LABEL_57:
              v21 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        v33 = (void *)outputFeatureValueFunctionTable(void)::table;
        *(_QWORD *)&outputFeatureValueFunctionTable(void)::table = 0;
        if (v33)
          operator delete(v33);
        v8 = 0;
        *((_QWORD *)&outputFeatureValueFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v29 = outputFeatureValueFunctionTable(void)::table;
  v30 = *(_QWORD **)(outputFeatureValueFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *v11 = *v30;
LABEL_74:
    *v30 = v11;
    goto LABEL_75;
  }
  *v11 = qword_1ED001160;
  qword_1ED001160 = (uint64_t)v11;
  *(_QWORD *)(v29 + 8 * v2) = &qword_1ED001160;
  if (*v11)
  {
    v31 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8)
        v31 %= v8;
    }
    else
    {
      v31 &= v8 - 1;
    }
    v30 = (_QWORD *)(outputFeatureValueFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1ED001168;
  return v11;
}

void sub_19C8D0008(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

id MLE5OutputMultiArrayFeatureValueByRetainingTensor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;

  +[MLMultiArray multiArrayOwningBufferObjectOfPort:error:](MLMultiArray, "multiArrayOwningBufferObjectOfPort:error:", a1, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    +[MLFeatureValue featureValueWithMultiArray:](MLFeatureValue, "featureValueWithMultiArray:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_19C8D007C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MLE5OutputMultiArrayFeatureValueByCopyingTensor(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  MLMultiArray *v9;
  void *v10;
  uint64_t v12;

  v5 = a2;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v12);
  MLE5MultiArrayShapeForTensor();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "multiArrayConstraint");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[MLMultiArray initWithShape:dataType:error:]([MLMultiArray alloc], "initWithShape:dataType:error:", v6, objc_msgSend(v7, "dataType"), a3);
  if (v9 && (MLE5CopyTensorToMultiArray(a1, v9, v8, a3) & 1) != 0)
  {
    +[MLFeatureValue featureValueWithMultiArray:](MLFeatureValue, "featureValueWithMultiArray:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = 0;
  }

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v12);
  return v10;
}

void sub_19C8D017C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

id MLE5OutputPixelBufferFeatureValueByCopyingTensor(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  __CVBuffer *v9;
  uint64_t v10;
  __CVBuffer *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v18;
  void *v19;
  uint8_t buf[4];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  kdebug_trace();
  +[MLMultiArray multiArrayOwningBufferObjectOfPort:error:](MLMultiArray, "multiArrayOwningBufferObjectOfPort:error:", a1, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "imageConstraint");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "pixelType");

  if (v8 > 19)
  {
    if (v8 != 20)
    {
      if (v8 != 30)
      {
        if (v8 == 40)
        {
          v9 = +[MLMultiArray pixelBufferGray16HalfFromMultiArrayHW:error:](MLMultiArray, "pixelBufferGray16HalfFromMultiArrayHW:error:", v6, a3);
          goto LABEL_12;
        }
LABEL_14:
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          v21 = v8;
          _os_log_error_impl(&dword_19C486000, v13, OS_LOG_TYPE_ERROR, "MLImagePixelType %tu is not supported.", buf, 0xCu);
        }

        if (a3)
        {
          v14 = (void *)MEMORY[0x1E0CB35C8];
          v18 = *MEMORY[0x1E0CB2D50];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("MLImagePixelType %tu is not supported."), v8);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = v15;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 1, v16);
          *a3 = (id)objc_claimAutoreleasedReturnValue();

        }
        goto LABEL_18;
      }
      v10 = 1;
      goto LABEL_11;
    }
LABEL_9:
    v10 = 0;
LABEL_11:
    v9 = +[MLMultiArray pixelBufferBGRA8FromMultiArrayCHW:channelOrderIsBGR:error:](MLMultiArray, "pixelBufferBGRA8FromMultiArrayCHW:channelOrderIsBGR:error:", v6, v10, a3);
    goto LABEL_12;
  }
  if (!v8)
    goto LABEL_9;
  if (v8 != 10)
    goto LABEL_14;
  v9 = +[MLMultiArray pixelBufferGray8FromMultiArrayHW:error:](MLMultiArray, "pixelBufferGray8FromMultiArrayHW:error:", v6, a3);
LABEL_12:
  v11 = v9;
  if (!v9)
  {
LABEL_18:
    v12 = 0;
    goto LABEL_19;
  }
  +[MLFeatureValue featureValueWithPixelBuffer:](MLFeatureValue, "featureValueWithPixelBuffer:", v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferRelease(v11);
LABEL_19:

  kdebug_trace();
  return v12;
}

void sub_19C8D0430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  kdebug_trace();
  _Unwind_Resume(a1);
}

id MLE5OutputPixelBufferFeatureValueByRetainingTensor(uint64_t a1, void *a2, _QWORD *a3)
{
  id v4;
  __IOSurface *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v15;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  MLE5BufferObjectBoundTo((e5rt_io_port *)&v17);
  v5 = (__IOSurface *)MLE5IOSurfaceOfBufferObject();
  pixelBufferOut = 0;
  v6 = CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, 0, &pixelBufferOut);
  if ((_DWORD)v6)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v4, "name");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v21 = v15;
      v22 = 1024;
      v23 = v6;
      _os_log_error_impl(&dword_19C486000, v7, OS_LOG_TYPE_ERROR, "Failed to create an output pixel buffer for feature named: %@. (CVReturn: %d.)", buf, 0x12u);

    }
    if (a3)
    {
      v8 = (void *)MEMORY[0x1E0CB35C8];
      v18 = *MEMORY[0x1E0CB2D50];
      v9 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v4, "name");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "stringWithFormat:", CFSTR("Failed to create an output pixel buffer for feature named: %@. (CVReturn: %d.)"), v10, v6);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = v11;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "errorWithDomain:code:userInfo:", CFSTR("com.apple.CoreML"), 1, v12);
      *a3 = (id)objc_claimAutoreleasedReturnValue();

    }
    v13 = 0;
  }
  else
  {
    +[MLFeatureValue featureValueWithPixelBuffer:](MLFeatureValue, "featureValueWithPixelBuffer:", pixelBufferOut);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    CVPixelBufferRelease(pixelBufferOut);
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v17, 0);

  return v13;
}

void sub_19C8D06CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a4);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_19C8D0828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_19C8D124C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (**a11)(void), void *a12, uint64_t a13, void *a14, void *a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  a11[2]();
  ElapsedTimeRecorder::~ElapsedTimeRecorder(&a28);

  _Unwind_Resume(a1);
}

void sub_19C8D1540(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLE5FeatureTraitOfBackingObject(void *a1)
{
  id v1;
  void *v2;
  CFTypeID v3;
  unsigned __int8 v4;

  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_8;
  v3 = CFGetTypeID(v1);
  if (v3 != CVPixelBufferGetTypeID())
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v4 = MLE5FeatureTraitOfMultiArray(v2);
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  if (CVPixelBufferGetIOSurface((CVPixelBufferRef)v2))
    v4 = 3;
  else
    v4 = 4;
LABEL_9:

  return v4;
}

void sub_19C8D15DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *i;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v33;

  v4 = a1[1];
  v5 = a1[2];
  v6 = *((_QWORD *)a1 + 1);
  v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  v8 = *((_QWORD *)&directOutputBackingModeFunctionTable(void)::table + 1);
  if (*((_QWORD *)&directOutputBackingModeFunctionTable(void)::table + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&directOutputBackingModeFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((_QWORD *)&directOutputBackingModeFunctionTable(void)::table + 1))
        v2 = v7 % *((_QWORD *)&directOutputBackingModeFunctionTable(void)::table + 1);
    }
    else
    {
      v2 = v7 & (*((_QWORD *)&directOutputBackingModeFunctionTable(void)::table + 1) - 1);
    }
    v10 = *(void ***)(directOutputBackingModeFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((_QWORD *)&directOutputBackingModeFunctionTable(void)::table + 1))
                v12 %= *((_QWORD *)&directOutputBackingModeFunctionTable(void)::table + 1);
            }
            else
            {
              v12 &= *((_QWORD *)&directOutputBackingModeFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  v13 = (float)(unint64_t)(qword_1EE427040 + 1);
  if (!v8 || (float)(*(float *)&dword_1EE427048 * (float)v8) < v13)
  {
    v14 = 1;
    if (v8 >= 3)
      v14 = (v8 & (v8 - 1)) != 0;
    v15 = v14 | (2 * v8);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1EE427048);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)&directOutputBackingModeFunctionTable(void)::table + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v8)
    {
      v24 = vcvtps_u32_f32((float)(unint64_t)qword_1EE427040 / *(float *)&dword_1EE427048);
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)&directOutputBackingModeFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = (void *)directOutputBackingModeFunctionTable(void)::table;
          *(_QWORD *)&directOutputBackingModeFunctionTable(void)::table = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)&directOutputBackingModeFunctionTable(void)::table + 1) = prime;
          do
            *(_QWORD *)(directOutputBackingModeFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD **)qword_1EE427038;
          if (qword_1EE427038)
          {
            v22 = *(_QWORD *)(qword_1EE427038 + 8);
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(directOutputBackingModeFunctionTable(void)::table + 8 * v22) = &qword_1EE427038;
            for (i = *v21; i; v22 = v28)
            {
              v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(_QWORD *)&prime)
                  v28 %= *(_QWORD *)&prime;
              }
              else
              {
                v28 &= *(_QWORD *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(_QWORD *)(directOutputBackingModeFunctionTable(void)::table + 8 * v28))
                {
                  *(_QWORD *)(directOutputBackingModeFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                *v21 = (_QWORD *)*i;
                *i = **(_QWORD **)(directOutputBackingModeFunctionTable(void)::table + 8 * v28);
                **(_QWORD **)(directOutputBackingModeFunctionTable(void)::table + 8 * v28) = i;
                i = v21;
              }
              v28 = v22;
LABEL_57:
              v21 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        v33 = (void *)directOutputBackingModeFunctionTable(void)::table;
        *(_QWORD *)&directOutputBackingModeFunctionTable(void)::table = 0;
        if (v33)
          operator delete(v33);
        v8 = 0;
        *((_QWORD *)&directOutputBackingModeFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v29 = directOutputBackingModeFunctionTable(void)::table;
  v30 = *(_QWORD **)(directOutputBackingModeFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *v11 = *v30;
LABEL_74:
    *v30 = v11;
    goto LABEL_75;
  }
  *v11 = qword_1EE427038;
  qword_1EE427038 = (uint64_t)v11;
  *(_QWORD *)(v29 + 8 * v2) = &qword_1EE427038;
  if (*v11)
  {
    v31 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8)
        v31 %= v8;
    }
    else
    {
      v31 &= v8 - 1;
    }
    v30 = (_QWORD *)(directOutputBackingModeFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1EE427040;
  return v11;
}

void sub_19C8D1AE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MLE5DirectOutputBackingModeFromTensorToPixelBufferSurface(uint64_t a1, void *a2, _QWORD *a3)
{
  __CVBuffer *v4;
  uint64_t v5;
  uint64_t v7;

  v4 = a2;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v7);
  v5 = MLE5CompareTensorAndPixelBufferMemoryLayout(v7, v4, a3);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v7);

  return v5;
}

void sub_19C8D1B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t MLE5DirectOutputBackingModeBufferCopy()
{
  return 2;
}

uint64_t MLE5DirectOutputBackingModeFromTensorToMultiArraySurface(uint64_t a1, void *a2, _QWORD *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v7;

  v4 = a2;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v7);
  v5 = MLE5CompareTensorAndMultiArrayMemoryLayout(v7, v4, a3);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v7);

  return v5;
}

void sub_19C8D1BF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *i;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v33;

  v4 = a1[1];
  v5 = a1[2];
  v6 = *((_QWORD *)a1 + 1);
  v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  v8 = *((_QWORD *)&outputBackingBindFunctionTable(void)::table + 1);
  if (*((_QWORD *)&outputBackingBindFunctionTable(void)::table + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&outputBackingBindFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((_QWORD *)&outputBackingBindFunctionTable(void)::table + 1))
        v2 = v7 % *((_QWORD *)&outputBackingBindFunctionTable(void)::table + 1);
    }
    else
    {
      v2 = v7 & (*((_QWORD *)&outputBackingBindFunctionTable(void)::table + 1) - 1);
    }
    v10 = *(void ***)(outputBackingBindFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((_QWORD *)&outputBackingBindFunctionTable(void)::table + 1))
                v12 %= *((_QWORD *)&outputBackingBindFunctionTable(void)::table + 1);
            }
            else
            {
              v12 &= *((_QWORD *)&outputBackingBindFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  v13 = (float)(unint64_t)(qword_1EE426FE0 + 1);
  if (!v8 || (float)(*(float *)&dword_1EE426FE8 * (float)v8) < v13)
  {
    v14 = 1;
    if (v8 >= 3)
      v14 = (v8 & (v8 - 1)) != 0;
    v15 = v14 | (2 * v8);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1EE426FE8);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)&outputBackingBindFunctionTable(void)::table + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v8)
    {
      v24 = vcvtps_u32_f32((float)(unint64_t)qword_1EE426FE0 / *(float *)&dword_1EE426FE8);
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)&outputBackingBindFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = (void *)outputBackingBindFunctionTable(void)::table;
          *(_QWORD *)&outputBackingBindFunctionTable(void)::table = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)&outputBackingBindFunctionTable(void)::table + 1) = prime;
          do
            *(_QWORD *)(outputBackingBindFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD **)qword_1EE426FD8;
          if (qword_1EE426FD8)
          {
            v22 = *(_QWORD *)(qword_1EE426FD8 + 8);
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(outputBackingBindFunctionTable(void)::table + 8 * v22) = &qword_1EE426FD8;
            for (i = *v21; i; v22 = v28)
            {
              v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(_QWORD *)&prime)
                  v28 %= *(_QWORD *)&prime;
              }
              else
              {
                v28 &= *(_QWORD *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(_QWORD *)(outputBackingBindFunctionTable(void)::table + 8 * v28))
                {
                  *(_QWORD *)(outputBackingBindFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                *v21 = (_QWORD *)*i;
                *i = **(_QWORD **)(outputBackingBindFunctionTable(void)::table + 8 * v28);
                **(_QWORD **)(outputBackingBindFunctionTable(void)::table + 8 * v28) = i;
                i = v21;
              }
              v28 = v22;
LABEL_57:
              v21 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        v33 = (void *)outputBackingBindFunctionTable(void)::table;
        *(_QWORD *)&outputBackingBindFunctionTable(void)::table = 0;
        if (v33)
          operator delete(v33);
        v8 = 0;
        *((_QWORD *)&outputBackingBindFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v29 = outputBackingBindFunctionTable(void)::table;
  v30 = *(_QWORD **)(outputBackingBindFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *v11 = *v30;
LABEL_74:
    *v30 = v11;
    goto LABEL_75;
  }
  *v11 = qword_1EE426FD8;
  qword_1EE426FD8 = (uint64_t)v11;
  *(_QWORD *)(v29 + 8 * v2) = &qword_1EE426FD8;
  if (*v11)
  {
    v31 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8)
        v31 %= v8;
    }
    else
    {
      v31 &= v8 - 1;
    }
    v30 = (_QWORD *)(outputBackingBindFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1EE426FE0;
  return v11;
}

void sub_19C8D20E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL MLE5BindPixelBufferOutputBackingToTensorPort(int a1, CVPixelBufferRef pixelBuffer, _QWORD *a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t last_error_message;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  CVPixelBufferGetIOSurface(pixelBuffer);
  MLE5NewBufferObjectUsing((__IOSurface *)&v9);
  v4 = e5rt_io_port_bind_buffer_object();
  if ((_DWORD)v4)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      v11 = last_error_message;
      v12 = 1024;
      v13 = v4;
      _os_log_error_impl(&dword_19C486000, v5, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a3)
    {
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("E5RT: %s (%d)"), e5rt_get_last_error_message(), v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 1, v6, CFSTR("Failed to bind the output buffer object backed by the specified multi-array output backing object."));
      *a3 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v9, 0);
  return (_DWORD)v4 == 0;
}

void sub_19C8D2254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

BOOL MLE5BindMultiArrayOutputBackingToTensorPort(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t last_error_message;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  CVPixelBufferGetIOSurface((CVPixelBufferRef)objc_msgSend(a2, "pixelBuffer"));
  MLE5NewBufferObjectUsing((__IOSurface *)&v9);
  v4 = e5rt_io_port_bind_buffer_object();
  if ((_DWORD)v4)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      v11 = last_error_message;
      v12 = 1024;
      v13 = v4;
      _os_log_error_impl(&dword_19C486000, v5, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a3)
    {
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("E5RT: %s (%d)"), e5rt_get_last_error_message(), v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 1, v6, CFSTR("Failed to bind the output buffer object backed by the specified multi-array output backing object."));
      *a3 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v9, 0);
  return (_DWORD)v4 == 0;
}

void sub_19C8D23F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

BOOL MLE5BindPixelBufferOutputBackingToSurfacePort(int a1, CVPixelBufferRef pixelBuffer, _QWORD *a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t last_error_message;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  CVPixelBufferGetIOSurface(pixelBuffer);
  MLE5NewSurfaceObjectUsing((__IOSurface *)&v9);
  v4 = e5rt_io_port_bind_surface_object();
  if ((_DWORD)v4)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      v11 = last_error_message;
      v12 = 1024;
      v13 = v4;
      _os_log_error_impl(&dword_19C486000, v5, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a3)
    {
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("E5RT: %s (%d)"), e5rt_get_last_error_message(), v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 1, v6, CFSTR("Failed to bind the output buffer object backed by the specified pixel buffer output backing object."));
      *a3 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100](&v9, 0);
  return (_DWORD)v4 == 0;
}

void sub_19C8D2588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);

  std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::CollectEspressoConfigurationNames(std::vector<std::string> *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t end;
  __int128 *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  if (a2)
  {
    std::vector<std::string>::reserve(a1, a2[2]);
    v6 = (_QWORD *)*a2;
    v4 = a2 + 1;
    v5 = v6;
    if (v6 != v4)
    {
      end = (unint64_t)a1->__end_;
      do
      {
        v8 = (__int128 *)(v5 + 4);
        if ((std::string *)end >= a1->__end_cap_.__value_)
        {
          end = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a1, v8);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a1, v8);
          end += 24;
        }
        a1->__end_ = (std::vector<std::string>::pointer)end;
        v9 = (_QWORD *)v5[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v5[2];
            v11 = *v10 == (_QWORD)v5;
            v5 = v10;
          }
          while (!v11);
        }
        v5 = v10;
      }
      while (v10 != v4);
    }
  }
}

void sub_19C8D2680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::GetDefaultShapes(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t Shape;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  __int128 v21;
  uint64_t v22;
  __int128 *v23;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    while (1)
    {
      Shape = CoreML::NNCompiler::MLShapeInfo::getShape((CoreML::NNCompiler::MLShapeInfo *)(v3 + 7));
      v6 = *(_DWORD *)(Shape + 48);
      v7 = CoreML::NNCompiler::MLShapeInfo::getShape((CoreML::NNCompiler::MLShapeInfo *)(v3 + 7));
      if (v6 == 2)
        break;
      if (*(_DWORD *)(v7 + 48) == 1)
      {
        v12 = *(uint64_t **)v7;
        v13 = *(uint64_t **)(v7 + 8);
        v14 = ((uint64_t)v13 - *(_QWORD *)v7) >> 3;
        v22 = 0;
        v21 = 0uLL;
        std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>((char *)&v21, v12, v13, v14);
        v23 = (__int128 *)(v3 + 4);
        v11 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v3 + 4, &v23);
        goto LABEL_6;
      }
LABEL_9:
      v18 = (_QWORD *)v3[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v3[2];
          v20 = *v19 == (_QWORD)v3;
          v3 = v19;
        }
        while (!v20);
      }
      v3 = v19;
      if (v19 == v2)
        return;
    }
    v8 = *(uint64_t **)Shape;
    v9 = *(uint64_t **)(Shape + 8);
    v10 = ((uint64_t)v9 - *(_QWORD *)Shape) >> 3;
    v22 = 0;
    v21 = 0uLL;
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>((char *)&v21, v8, v9, v10);
    v23 = (__int128 *)(v3 + 4);
    v11 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v3 + 4, &v23);
LABEL_6:
    v15 = v11;
    v17 = v11 + 7;
    v16 = (void *)v11[7];
    if (v16)
    {
      v15[8] = (uint64_t)v16;
      operator delete(v16);
      *v17 = 0;
      v17[1] = 0;
      v17[2] = 0;
    }
    *(_OWORD *)(v15 + 7) = v21;
    v15[9] = v22;
    goto LABEL_9;
  }
}

void sub_19C8D27F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  _QWORD **v9;

  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*v9);
  _Unwind_Resume(a1);
}

_QWORD *`anonymous namespace'::GetRangeShapes(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t **v4;
  uint64_t *v5;
  void **v6;
  char *v7;
  uint64_t **v8;
  std::string *v9;
  __int128 v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void **v19;
  char *v20;
  char *v21;
  char *v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  char *v30;
  _QWORD v31[2];
  char v32;
  uint64_t v33;

  result[1] = 0;
  result[2] = 0;
  v30 = (char *)(result + 1);
  *result = result + 1;
  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v4 = (uint64_t **)result;
    do
    {
      result = (_QWORD *)CoreML::NNCompiler::MLShapeInfo::getShape((CoreML::NNCompiler::MLShapeInfo *)(v3 + 7));
      if (*((_DWORD *)result + 12) != 1)
        goto LABEL_29;
      v5 = result;
      v6 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)v4, &v33, v3 + 4);
      v7 = (char *)*v6;
      if (!*v6)
      {
        v8 = (uint64_t **)v6;
        v7 = (char *)operator new(0x68uLL);
        v31[0] = v7;
        v31[1] = v30;
        v32 = 0;
        v9 = (std::string *)(v7 + 32);
        if (*((char *)v3 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)v3[4], v3[5]);
        }
        else
        {
          v10 = *((_OWORD *)v3 + 2);
          *((_QWORD *)v7 + 6) = v3[6];
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
        }
        *(_OWORD *)(v7 + 88) = 0u;
        *(_OWORD *)(v7 + 72) = 0u;
        *(_OWORD *)(v7 + 56) = 0u;
        v32 = 1;
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v4, v33, v8, (uint64_t *)v7);
        v31[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>>>>::reset[abi:ne180100]((uint64_t)v31);
      }
      result = v7 + 56;
      if (v7 + 56 == (char *)v5)
        goto LABEL_29;
      result = std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>((char *)result, (char *)*v5, v5[1], (v5[1] - *v5) >> 3);
      v11 = (char *)*((_QWORD *)v7 + 10);
      v12 = (char *)v5[3];
      v13 = (_BYTE *)v5[4];
      v14 = v13 - v12;
      v15 = (v13 - v12) >> 4;
      v16 = *((_QWORD *)v7 + 12);
      if (v15 <= (v16 - (uint64_t)v11) >> 4)
      {
        v22 = (char *)*((_QWORD *)v7 + 11);
        v19 = (void **)(v7 + 88);
        v21 = v22;
        v23 = v22 - v11;
        v24 = (v22 - v11) >> 4;
        if (v24 < v15)
        {
          if (v21 != v11)
          {
            result = memmove(v11, v12, v23);
            v11 = (char *)*v19;
          }
          v25 = &v12[16 * v24];
          v14 = v13 - v25;
          if (v13 == v25)
            goto LABEL_28;
          v26 = v11;
          goto LABEL_27;
        }
      }
      else
      {
        if (v11)
        {
          *((_QWORD *)v7 + 11) = v11;
          operator delete(v11);
          v16 = 0;
          *((_QWORD *)v7 + 10) = 0;
          *((_QWORD *)v7 + 11) = 0;
          *((_QWORD *)v7 + 12) = 0;
        }
        if ((v14 & 0x8000000000000000) != 0)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v17 = v16 >> 3;
        if (v16 >> 3 <= v15)
          v17 = (v13 - v12) >> 4;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
          v18 = 0xFFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        result = std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__vallocate[abi:ne180100]((_QWORD *)v7 + 10, v18);
        v20 = (char *)*((_QWORD *)v7 + 11);
        v19 = (void **)(v7 + 88);
        v11 = v20;
      }
      if (v13 != v12)
      {
        v26 = v11;
        v25 = v12;
LABEL_27:
        result = memmove(v26, v25, v14);
      }
LABEL_28:
      *v19 = &v11[v14];
LABEL_29:
      v27 = (_QWORD *)v3[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v3[2];
          v29 = *v28 == (_QWORD)v3;
          v3 = v28;
        }
        while (!v29);
      }
      v3 = v28;
    }
    while (v28 != v2);
  }
  return result;
}

void sub_19C8D2A6C(_Unwind_Exception *a1, uint64_t a2, _QWORD **a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*a3);
  _Unwind_Resume(a1);
}

char *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_19C8D2AEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo(uint64_t a1, __int128 *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, __int128 *a8, char a9)
{
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  v15 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v15;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = *a5;
  v16 = (_QWORD *)(a1 + 24);
  v17 = a5 + 1;
  v18 = a5[1];
  *(_QWORD *)(a1 + 32) = v18;
  v19 = a1 + 32;
  v20 = a5[2];
  *(_QWORD *)(a1 + 40) = v20;
  if (v20)
  {
    *(_QWORD *)(v18 + 16) = v19;
    *a5 = v17;
    *v17 = 0;
    a5[2] = 0;
  }
  else
  {
    *v16 = v19;
  }
  *(_QWORD *)(a1 + 96) = *a6;
  v21 = a6 + 1;
  v22 = a6[1];
  *(_QWORD *)(a1 + 104) = v22;
  v23 = a1 + 104;
  v24 = a6[2];
  *(_QWORD *)(a1 + 112) = v24;
  if (v24)
  {
    *(_QWORD *)(v22 + 16) = v23;
    *a6 = v21;
    *v21 = 0;
    a6[2] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 96) = v23;
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)a7;
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 248) = *a4;
  v25 = a1 + 256;
  v26 = a4 + 1;
  v27 = a4[1];
  *(_QWORD *)(a1 + 256) = v27;
  v28 = a4[2];
  *(_QWORD *)(a1 + 264) = v28;
  if (v28)
  {
    *(_QWORD *)(v27 + 16) = v25;
    *a4 = v26;
    *v26 = 0;
    a4[2] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 248) = v25;
  }
  *(_OWORD *)(a1 + 272) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v29 = *a8;
  *(_QWORD *)(a1 + 304) = *((_QWORD *)a8 + 2);
  *(_OWORD *)(a1 + 288) = v29;
  *((_QWORD *)a8 + 1) = 0;
  *((_QWORD *)a8 + 2) = 0;
  *(_QWORD *)a8 = 0;
  *(_WORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 314) = a9;
  *(_WORD *)(a1 + 315) = 0;
  *(_BYTE *)(a1 + 317) = 0;
  return a1;
}

void sub_19C8D2CB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v2);
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*(_QWORD **)(v1 + 152));
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(_QWORD **)(v1 + 128));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*(_QWORD **)(v1 + 104));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*(_QWORD **)(v1 + 80));
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(_QWORD **)(v1 + 56));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*(_QWORD **)(v1 + 32));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void sub_19C8D2F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  void *v20;
  _BYTE *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v27;

  __cxa_free_exception(v24);
  if (a16 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(a20);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);

  if (a2 == 1)
  {
    v27 = __cxa_begin_catch(a1);
    if (v22)
    {
      (*(void (**)(void *))(*(_QWORD *)v27 + 16))(v27);
      +[MLModelErrorUtils IOErrorWithFormat:](MLModelErrorUtils, "IOErrorWithFormat:", CFSTR("Failed to read encryptionInfo: %s"));
      *v22 = (id)objc_claimAutoreleasedReturnValue();
    }
    *v21 = 0;
    __cxa_end_catch();
    JUMPOUT(0x19C8D2EA0);
  }

  _Unwind_Resume(a1);
}

void sub_19C8D3140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_19C8D3248(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8D3328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18046(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18047(uint64_t a1)
{

}

void sub_19C8D3634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_19C8D3E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40)
{
  void *v40;
  uint64_t v41;

  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*(char **)(v41 - 120));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v41 - 144);

  _Unwind_Resume(a1);
}

void sub_19C8D3FB8()
{
  JUMPOUT(0x19C8D3F94);
}

void sub_19C8D4088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C8D42E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19C8D43F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8D44F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_19C8D45C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8D47B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C8D4820()
{
  JUMPOUT(0x19C8D47FCLL);
}

void sub_19C8D4828()
{
  JUMPOUT(0x19C8D4800);
}

_QWORD *__copy_helper_atomic_property_(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  const void *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  v3 = *(const void **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v4 = v2 - *(_QWORD *)a2;
  if (v2 != *(_QWORD *)a2)
  {
    v5 = result;
    std::vector<_KDInterval>::__vallocate[abi:ne180100](result, v4 >> 3);
    v6 = (char *)v5[1];
    result = memmove(v6, v3, v4);
    v5[1] = &v6[8 * (v4 >> 3)];
  }
  return result;
}

void sub_19C8D4998(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C8D4A3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8D4E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a29);
  if (a27 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id neuralNetworkOutputFromArchive(_QWORD *a1)
{
  void *v2;
  void *v3;
  id v4;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 56))(*a1) != 1)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "CompiledObject");
  (*(void (**)(_QWORD, void **))(*(_QWORD *)*a1 + 40))(*a1, __p);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7 < 0)
    operator delete(__p[0]);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

void sub_19C8D5030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

MIL::Attributes::IOAliasInfo *std::unique_ptr<MIL::Attributes::IOAliasInfo>::reset[abi:ne180100](MIL::Attributes::IOAliasInfo **a1)
{
  MIL::Attributes::IOAliasInfo *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    MIL::Attributes::IOAliasInfo::~IOAliasInfo(result);
    JUMPOUT(0x1A1AD6260);
  }
  return result;
}

void sub_19C8D62CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18434(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18435(uint64_t a1)
{

}

void sub_19C8D69BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);

  _Unwind_Resume(a1);
}

void sub_19C8D6C4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8D7004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  void *v29;
  void *v30;

  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);

  _Unwind_Resume(a1);
}

void sub_19C8D77C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24)
{

  _Unwind_Resume(a1);
}

void sub_19C8D7934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8D7C4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8D7DBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CoreML::numericVectorFromObjC<long>(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  std::vector<long long>::reserve((void **)a1, objc_msgSend(v3, "count"));
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v23 != v6)
          objc_enumerationMutation(v4);
        v8 = *(id *)(*((_QWORD *)&v22 + 1) + 8 * i);
        v9 = objc_msgSend(v8, "longValue");
        v10 = v9;
        v12 = *(uint64_t **)(a1 + 8);
        v11 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v12 >= v11)
        {
          v14 = *(uint64_t **)a1;
          v15 = ((uint64_t)v12 - *(_QWORD *)a1) >> 3;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          v17 = v11 - (_QWORD)v14;
          if (v17 >> 2 > v16)
            v16 = v17 >> 2;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v18);
          else
            v19 = 0;
          v20 = (uint64_t *)(v18 + 8 * v15);
          *v20 = v10;
          v13 = v20 + 1;
          while (v12 != v14)
          {
            v21 = *--v12;
            *--v20 = v21;
          }
          *(_QWORD *)a1 = v20;
          *(_QWORD *)(a1 + 8) = v13;
          *(_QWORD *)(a1 + 16) = v18 + 8 * v19;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v12 = v9;
          v13 = v12 + 1;
        }
        *(_QWORD *)(a1 + 8) = v13;

      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v5);
  }

}

void sub_19C8D8078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  void *v11;
  void *v13;

  v13 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLMultiArrayBufferLayout initWithShape:strides:]::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *result;
  v6 = *(_QWORD *)(a4 + 8 * *a2);
  v7 = *a3;
  v8 = *(_QWORD *)(a4 + 8 * *a3);
  if (v6 >= *(_QWORD *)(a4 + 8 * *result))
  {
    if (v8 < v6)
    {
      *a2 = v7;
      *a3 = v4;
      v9 = *result;
      if (*(_QWORD *)(a4 + 8 * *a2) < *(_QWORD *)(a4 + 8 * *result))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v6)
    {
      *result = v4;
      *a2 = v5;
      if (*(_QWORD *)(a4 + 8 * *a3) >= *(_QWORD *)(a4 + 8 * v5))
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v5;
  }
  return result;
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[MLMultiArrayBufferLayout initWithShape:strides:]::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLMultiArrayBufferLayout initWithShape:strides:]::$_0 &,unsigned long *>(a1, a2, a3, **a5);
  v11 = *a3;
  v12 = **a5;
  if (*(_QWORD *)(v12 + 8 * *a4) < *(_QWORD *)(v12 + 8 * *a3))
  {
    *a3 = *a4;
    *a4 = v11;
    v13 = *a2;
    if (*(_QWORD *)(v12 + 8 * *a3) < *(_QWORD *)(v12 + 8 * *a2))
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      if (*(_QWORD *)(v12 + 8 * *a2) < *(_QWORD *)(v12 + 8 * *a1))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[MLMultiArrayBufferLayout initWithShape:strides:]::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(_QWORD *)(**a3 + 8 * v8) < *(_QWORD *)(**a3 + 8 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLMultiArrayBufferLayout initWithShape:strides:]::$_0 &,unsigned long *>(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[MLMultiArrayBufferLayout initWithShape:strides:]::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v20 = a1 + 1;
      v21 = a1 + 2;
      v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[MLMultiArrayBufferLayout initWithShape:strides:]::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v23 = *(a2 - 1);
      v24 = a1[3];
      v25 = **a3;
      if (*(_QWORD *)(v25 + 8 * v23) < *(_QWORD *)(v25 + 8 * v24))
      {
        *v22 = v23;
        *(a2 - 1) = v24;
        v26 = *v22;
        v27 = *v21;
        if (*(_QWORD *)(v25 + 8 * *v22) < *(_QWORD *)(v25 + 8 * *v21))
        {
          *v21 = v26;
          *v22 = v27;
          v28 = *v20;
          if (*(_QWORD *)(v25 + 8 * v26) < *(_QWORD *)(v25 + 8 * *v20))
          {
            a1[1] = v26;
            a1[2] = v28;
            v29 = *a1;
            if (*(_QWORD *)(v25 + 8 * v26) < *(_QWORD *)(v25 + 8 * *a1))
            {
              *a1 = v26;
              a1[1] = v29;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLMultiArrayBufferLayout initWithShape:strides:]::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, **a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    if (*(_QWORD *)(v13 + 8 * *v11) < *(_QWORD *)(v13 + 8 * *v10))
    {
      v17 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v17) = v16;
        v18 = v17 - 8;
        if (v17 == 8)
          break;
        v16 = *(uint64_t *)((char *)a1 + v17 - 16);
        v17 -= 8;
        if (*(_QWORD *)(v13 + 8 * v15) >= *(_QWORD *)(v13 + 8 * v16))
        {
          v19 = (uint64_t *)((char *)a1 + v18);
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *v19 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 8;
    if (++v11 == a2)
      return 1;
  }
}

void sub_19C8D8CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C8D8E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C8D8F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8D9034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8D9200(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ModelKeyServerAPIResultErrorReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19C8D985C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_19C8D9BB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C8D9C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLAppleTextClassifier;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19C8D9F90(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void (**v10)(_QWORD);
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a9);

  v10[2](v10);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19C8DA574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  CoreML::Specification::CoreMLModels::TextClassifier::~TextClassifier((CoreML::Specification::CoreMLModels::TextClassifier *)&a17);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a24);

  _Unwind_Resume(a1);
}

void sub_19C8DB384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45)
{
  void *v45;
  void *v46;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_19C8DB890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8DBB28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C8DBE08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C8DBEF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios16Train::Ios16TrainBackend::~Ios16TrainBackend(CoreML::NNCompiler::Backend::MIL::Ios16Train::Ios16TrainBackend *this)
{
  char *v1;

  *(_QWORD *)this = &off_1E3D4CA20;
  v1 = (char *)this + 8;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_1E3D4CA20;
  v1 = (char *)this + 8;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t CoreML::NNCompiler::Backend::MIL::Ios16Train::Ios16TrainBackend::Compile(CoreML::NNCompiler::Backend::MIL::Ios16Train::Ios16TrainBackend *this, OArchive *a2)
{
  _QWORD *v4;
  MIL::Opsets::Train::ios16Train::ios16_trainOpset *v5;
  uint64_t OpsetName;
  unint64_t v7;
  std::string::size_type v8;
  const void *v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  const IRProgram *v16;
  MIL::Util *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  std::string *v25;
  void *v26;
  void *v27;
  void *v28;
  std::__fs::filesystem::path *p_p;
  void *v30;
  void *v31;
  MIL::Util *v32;
  uint64_t result;
  void *exception;
  void *v35;
  void *v36;
  std::__fs::filesystem::path v37;
  void (**v38)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator *__hidden);
  __int128 v39;
  _QWORD v40[2];
  int v41;
  uint64_t v42;
  int data;
  std::string::value_type v44;
  char v45;
  std::string::size_type v46;
  std::string::value_type v47;
  char v48;
  std::string v49;
  MIL::Util *v50;
  uint64_t v51;
  std::string __dst;
  std::__fs::filesystem::path __p;
  uint64_t v54;
  int v55;
  std::string v56;
  std::string v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 1) + 48))(*((_QWORD *)a2 + 1)) == 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Ios16TrainBackend doesn't support in-memory compilation.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CoreML::NNCompiler::Backend::MIL::OptimizeProgram((CoreML::NNCompiler::Backend::MIL *)&v51, *((const IRProgram **)this + 1));
  std::string::basic_string[abi:ne180100]<0>(&v57, "classify");
  v4 = v58;
  v58[0] = &off_1E3D5B620;
  v58[1] = CoreML::NNCompiler::Backend::MIL::Ios15::Translations::TranslateClassify;
  v59 = v58;
  v5 = (MIL::Opsets::Train::ios16Train::ios16_trainOpset *)std::unordered_map<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>::unordered_map((uint64_t)&__p, (uint64_t)&v57, 1);
  qmemcpy(&v37, "train", 5);
  OpsetName = MIL::Opsets::Train::ios16Train::ios16_trainOpset::GetOpsetName(v5);
  v8 = v7;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = (const void *)OpsetName;
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v8;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7;
  p_dst = &__dst;
  if (v7)
LABEL_9:
    memmove(p_dst, v9, v8);
  p_dst->__r_.__value_.__s.__data_[v8] = 0;
  v13 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = 0uLL;
  v38 = &off_1E3D4CA68;
  v39 = v13;
  v40[0] = *((_QWORD *)&__p.__pn_.__r_.__value_.__l + 2);
  v40[1] = v54;
  v41 = v55;
  if (v54)
  {
    v14 = *(_QWORD *)(__p.__pn_.__r_.__value_.__r.__words[2] + 8);
    if ((*((_QWORD *)&v13 + 1) & (*((_QWORD *)&v13 + 1) - 1)) != 0)
    {
      if (v14 >= *((_QWORD *)&v13 + 1))
        v14 %= *((_QWORD *)&v13 + 1);
    }
    else
    {
      v14 &= *((_QWORD *)&v13 + 1) - 1;
    }
    *(_QWORD *)(v13 + 8 * v14) = v40;
    __p.__pn_.__r_.__value_.__r.__words[2] = 0;
    v54 = 0;
  }
  v42 = 0x5F364C4D65726F43;
  data = (int)v37.__pn_.__r_.__value_.__l.__data_;
  v44 = v37.__pn_.__r_.__value_.__s.__data_[4];
  v45 = 0;
  v46 = v56.__r_.__value_.__r.__words[0];
  v47 = v56.__r_.__value_.__s.__data_[8];
  v48 = 13;
  v49 = __dst;
  memset(&__dst, 0, sizeof(__dst));
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)&__p);
  if (v59 == v58)
  {
    v15 = 4;
  }
  else
  {
    if (!v59)
      goto LABEL_21;
    v15 = 5;
    v4 = v59;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v15))(v4);
LABEL_21:
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  v38 = &off_1E3D4CA48;
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::Translate(&v50, (const IRProgram *)&v38, v51);
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator((void **)&v38);
  CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetAttributesForFunctions((uint64_t)v50, *((_QWORD *)this + 3));
  MIL::Util::FindBlobFilePaths(v50, v16);
  v17 = v50;
  v18 = *((_QWORD *)this + 3);
  v19 = *(unsigned int *)(v18 + 120);
  v20 = *((_QWORD *)a2 + 1);
  if (*(char *)(v20 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(v20 + 32), *(_QWORD *)(v20 + 40));
    v18 = *((_QWORD *)this + 3);
  }
  else
  {
    v57 = *(std::string *)(v20 + 32);
  }
  CoreML::NNCompiler::Backend::MIL::WriteProgram((uint64_t)v17, v19, (char *)&v57, v18 + 56);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  CoreML::NNCompiler::Backend::MetadataUtils::WriteMetadataIos15(*((_QWORD *)this + 3), (uint64_t)a2);
  CoreML::NNCompiler::Backend::MIL::CopyWeights((uint64_t *)(*((_QWORD *)this + 3) + 56), (uint64_t **)&v38, (uint64_t)a2);
  v21 = *((_QWORD *)a2 + 1);
  if (*(char *)(v21 + 55) < 0)
    std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)(v21 + 32), *(_QWORD *)(v21 + 40));
  else
    __dst = *(std::string *)(v21 + 32);
  __p.__pn_ = __dst;
  memset(&__dst, 0, sizeof(__dst));
  std::__fs::filesystem::path::path[abi:ne180100]<char [10],void>(&v56, "model.mil");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v56, (uint64_t)&__p, (std::__fs::filesystem::path *)&v57);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v22 = *((_QWORD *)a2 + 1);
  if (*(char *)(v22 + 55) < 0)
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(v22 + 32), *(_QWORD *)(v22 + 40));
  else
    v56 = *(std::string *)(v22 + 32);
  __dst = v56;
  memset(&v56, 0, sizeof(v56));
  memset(&v37, 0, sizeof(v37));
  std::string::append[abi:ne180100]<char const*,0>(&v37.__pn_, "model_train.mil", "");
  std::__fs::filesystem::operator/[abi:ne180100](&v37, (uint64_t)&__dst, &__p);
  if (SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (espresso_generate_training_program())
  {
    v35 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v35, "Cannot generate training program.");
    __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = (void *)MEMORY[0x1E0C99E98];
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v57;
  else
    v25 = (std::string *)v57.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "fileURLWithPath:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  v28 = (void *)MEMORY[0x1E0C99E98];
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "fileURLWithPath:", v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v23, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:", v27, v31, 0, 0, 0, 0) & 1) == 0)
  {
    objc_msgSend(v23, "removeItemAtURL:error:", v31, 0);
    v36 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v36, "Cannot save training program.");
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }

  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  v32 = v50;
  v50 = 0;
  if (v32)
    (*(void (**)(MIL::Util *))(*(_QWORD *)v32 + 8))(v32);
  result = v51;
  v51 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19C8DD224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;

  __cxa_free_exception(v45);

  if (a42 < 0)
    operator delete(__p);
  if (*(char *)(v46 - 105) < 0)
    operator delete(*(void **)(v46 - 128));
  *(_QWORD *)(v46 - 128) = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 128));
  v48 = a28;
  a28 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = a29;
  a29 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  _Unwind_Resume(a1);
}

void sub_19C8DD5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C8DD7F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (v3)
    operator delete(v3);

  _Unwind_Resume(a1);
}

void sub_19C8DE048(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8DE378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C8DE644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C8DEAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C8DEDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;
  void *v19;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);

  _Unwind_Resume(a1);
}

void sub_19C8DF1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  if (__p)
    operator delete(__p);
  v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(_QWORD *)(v22 - 96) = v24;
    operator delete(v24);
  }
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_19C8DF6DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8DF7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C8DF9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  if (v13)
    operator delete(v13);

  _Unwind_Resume(a1);
}

float *std::__introsort<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  int v14;
  float v15;
  float v16;
  uint64_t v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  float v22;
  float *v23;
  float v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  float v28;
  float v29;
  BOOL v30;
  float *v31;
  float v32;
  float *v33;
  float v34;
  float *v35;
  float *v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  float *v46;
  BOOL v48;
  uint64_t v49;
  float *v50;
  float *v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  float *v61;
  float *v62;
  float v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  float *v72;
  float *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  float *v78;
  float v79;
  uint64_t v80;
  float *v81;
  float *v83;
  float *v84;
  float v85;
  uint64_t v86;
  float *v87;
  float v88;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = *(a2 - 2);
        v44 = v8[2];
        if (v43 < v44)
        {
          v45 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v45;
          v8[2] = v43;
          *(a2 - 2) = v44;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v8, v8 + 4, a2 - 4);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v8, v8 + 4, v8 + 8, (uint64_t)(a2 - 4));
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v8, v8 + 4, v8 + 8, (uint64_t)(v8 + 12), (uint64_t)(a2 - 4));
      default:
        if (v9 <= 383)
        {
          v46 = v8 + 4;
          v48 = v8 == a2 || v46 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              v49 = 0;
              v50 = v8;
              do
              {
                v51 = v46;
                v52 = v50[6];
                if (v52 < v50[2])
                {
                  v53 = *((_QWORD *)v50 + 2);
                  v54 = v49;
                  while (1)
                  {
                    v55 = (char *)v8 + v54;
                    *((_QWORD *)v55 + 2) = *(_QWORD *)((char *)v8 + v54);
                    *((float *)v55 + 6) = *(float *)((char *)v8 + v54 + 8);
                    if (!v54)
                      break;
                    v54 -= 16;
                    if (v52 >= *((float *)v55 - 2))
                    {
                      v56 = (uint64_t)v8 + v54 + 16;
                      goto LABEL_77;
                    }
                  }
                  v56 = (uint64_t)v8;
LABEL_77:
                  *(_QWORD *)v56 = v53;
                  *(float *)(v56 + 8) = v52;
                }
                v46 = v51 + 4;
                v49 += 16;
                v50 = v51;
              }
              while (v51 + 4 != a2);
            }
          }
          else if (!v48)
          {
            v83 = v8 + 2;
            do
            {
              v84 = v46;
              v85 = v7[6];
              if (v85 < v7[2])
              {
                v86 = *((_QWORD *)v7 + 2);
                v87 = v83;
                do
                {
                  *((_QWORD *)v87 + 1) = *((_QWORD *)v87 - 1);
                  v87[4] = *v87;
                  v88 = *(v87 - 4);
                  v87 -= 4;
                }
                while (v85 < v88);
                *((_QWORD *)v87 + 1) = v86;
                v87[4] = v85;
              }
              v46 = v84 + 4;
              v83 += 4;
              v7 = v84;
            }
            while (v84 + 4 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v57 = (v10 - 2) >> 1;
            v58 = v57;
            do
            {
              v59 = v58;
              if (v57 >= v58)
              {
                v60 = (2 * v58) | 1;
                v61 = &v8[4 * v60];
                if (2 * v59 + 2 < (uint64_t)v10 && v61[2] < v61[6])
                {
                  v61 += 4;
                  v60 = 2 * v59 + 2;
                }
                v62 = &v8[4 * v59];
                v63 = v62[2];
                if (v61[2] >= v63)
                {
                  v64 = *(_QWORD *)v62;
                  do
                  {
                    v65 = v62;
                    v62 = v61;
                    *(_QWORD *)v65 = *(_QWORD *)v61;
                    v65[2] = v61[2];
                    if (v57 < v60)
                      break;
                    v66 = 2 * v60;
                    v60 = (2 * v60) | 1;
                    v61 = &v8[4 * v60];
                    v67 = v66 + 2;
                    if (v67 < (uint64_t)v10 && v61[2] < v61[6])
                    {
                      v61 += 4;
                      v60 = v67;
                    }
                  }
                  while (v61[2] >= v63);
                  *(_QWORD *)v62 = v64;
                  v62[2] = v63;
                }
              }
              v58 = v59 - 1;
            }
            while (v59);
            v68 = (unint64_t)v9 >> 4;
            do
            {
              v69 = 0;
              v70 = *(_QWORD *)v8;
              v71 = *((_DWORD *)v8 + 2);
              v72 = v8;
              do
              {
                v73 = v72;
                v72 += 4 * v69 + 4;
                v74 = 2 * v69;
                v69 = (2 * v69) | 1;
                v75 = v74 + 2;
                if (v75 < v68 && v72[2] < v72[6])
                {
                  v72 += 4;
                  v69 = v75;
                }
                *(_QWORD *)v73 = *(_QWORD *)v72;
                v73[2] = v72[2];
              }
              while (v69 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
              if (v72 == a2 - 4)
              {
                *(_QWORD *)v72 = v70;
                *((_DWORD *)v72 + 2) = v71;
              }
              else
              {
                *(_QWORD *)v72 = *((_QWORD *)a2 - 2);
                v72[2] = *(a2 - 2);
                *((_QWORD *)a2 - 2) = v70;
                *((_DWORD *)a2 - 2) = v71;
                v76 = (char *)v72 - (char *)v8 + 16;
                if (v76 >= 17)
                {
                  v77 = (unint64_t)((v76 >> 4) - 2) >> 1;
                  v78 = &v8[4 * v77];
                  v79 = v72[2];
                  if (v78[2] < v79)
                  {
                    v80 = *(_QWORD *)v72;
                    do
                    {
                      v81 = v72;
                      v72 = v78;
                      *(_QWORD *)v81 = *(_QWORD *)v78;
                      v81[2] = v78[2];
                      if (!v77)
                        break;
                      v77 = (v77 - 1) >> 1;
                      v78 = &v8[4 * v77];
                    }
                    while (v78[2] < v79);
                    *(_QWORD *)v72 = v80;
                    v72[2] = v79;
                  }
                }
              }
              a2 -= 4;
            }
            while (v68-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[4 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(&v7[4 * (v10 >> 1)], v7, a2 - 4);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v7, &v7[4 * (v10 >> 1)], a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v7 + 4, v12 - 4, a2 - 8);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v7 + 8, &v7[4 * v11 + 4], a2 - 12);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v12 - 4, v12, &v7[4 * v11 + 4]);
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
          v14 = *((_DWORD *)v7 + 2);
          v7[2] = v12[2];
          *((_DWORD *)v12 + 2) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = v7[2];
          v16 = v15;
          if (*(v7 - 2) < v15)
            goto LABEL_12;
          if (v15 >= *(a2 - 2))
          {
            v33 = v7 + 4;
            do
            {
              v8 = v33;
              if (v33 >= a2)
                break;
              v34 = v33[2];
              v33 += 4;
            }
            while (v15 >= v34);
          }
          else
          {
            v31 = v7;
            do
            {
              v8 = v31 + 4;
              v32 = v31[6];
              v31 += 4;
            }
            while (v15 >= v32);
          }
          v35 = a2;
          if (v8 < a2)
          {
            v36 = a2;
            do
            {
              v35 = v36 - 4;
              v37 = *(v36 - 2);
              v36 -= 4;
            }
            while (v15 < v37);
          }
          v38 = *(_QWORD *)v7;
          while (v8 < v35)
          {
            v39 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v35;
            *(_QWORD *)v35 = v39;
            v40 = *((_DWORD *)v8 + 2);
            v8[2] = v35[2];
            *((_DWORD *)v35 + 2) = v40;
            do
            {
              v41 = v8[6];
              v8 += 4;
            }
            while (v15 >= v41);
            do
            {
              v42 = *(v35 - 2);
              v35 -= 4;
            }
            while (v15 < v42);
          }
          if (v8 - 4 != v7)
          {
            *(_QWORD *)v7 = *((_QWORD *)v8 - 2);
            v7[2] = *(v8 - 2);
          }
          a4 = 0;
          *((_QWORD *)v8 - 2) = v38;
          *(v8 - 2) = v15;
          continue;
        }
        v15 = v7[2];
        v16 = v15;
LABEL_12:
        v17 = *(_QWORD *)v7;
        v18 = v7;
        do
        {
          v19 = v18;
          v18 += 4;
        }
        while (v16 > v19[6]);
        v20 = a2;
        if (v19 == v7)
        {
          v23 = a2;
          while (v18 < v23)
          {
            v21 = v23 - 4;
            v24 = *(v23 - 2);
            v23 -= 4;
            if (v16 > v24)
              goto LABEL_22;
          }
          v21 = v23;
        }
        else
        {
          do
          {
            v21 = v20 - 4;
            v22 = *(v20 - 2);
            v20 -= 4;
          }
          while (v16 <= v22);
        }
LABEL_22:
        v8 = v18;
        if (v18 < v21)
        {
          v25 = (unint64_t)v21;
          do
          {
            v26 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v25;
            *(_QWORD *)v25 = v26;
            v27 = *((_DWORD *)v8 + 2);
            v8[2] = *(float *)(v25 + 8);
            *(_DWORD *)(v25 + 8) = v27;
            do
            {
              v28 = v8[6];
              v8 += 4;
            }
            while (v16 > v28);
            do
            {
              v29 = *(float *)(v25 - 8);
              v25 -= 16;
            }
            while (v16 <= v29);
          }
          while ((unint64_t)v8 < v25);
        }
        if (v8 - 4 != v7)
        {
          *(_QWORD *)v7 = *((_QWORD *)v8 - 2);
          v7[2] = *(v8 - 2);
        }
        *((_QWORD *)v8 - 2) = v17;
        *(v8 - 2) = v15;
        if (v18 < v21)
        {
LABEL_33:
          result = (float *)std::__introsort<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *,false>(v7, v8 - 4, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v7, v8 - 4);
        result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 4;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(float *result, float *a2, float *a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;

  v3 = *(_QWORD *)a2;
  v4 = a2[2];
  v5 = result[2];
  v6 = a3[2];
  if (v4 >= v5)
  {
    if (v6 < v4)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v3;
      a2[2] = v6;
      a3[2] = v4;
      v8 = a2[2];
      v9 = result[2];
      if (v8 < v9)
      {
        v10 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v10;
        result[2] = v8;
        a2[2] = v9;
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)result;
    if (v6 >= v4)
    {
      *(_QWORD *)result = v3;
      *(_QWORD *)a2 = v7;
      result[2] = v4;
      a2[2] = v5;
      v11 = a3[2];
      if (v11 >= v5)
        return result;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v7;
      a2[2] = v11;
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a3;
      *(_QWORD *)a3 = v7;
      result[2] = v6;
    }
    a3[2] = v5;
  }
  return result;
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *result;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(a1, a2, a3);
  v9 = *(float *)(a4 + 8);
  v10 = a3[2];
  if (v9 < v10)
  {
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v11;
    a3[2] = v9;
    *(float *)(a4 + 8) = v10;
    v12 = a3[2];
    v13 = a2[2];
    if (v12 < v13)
    {
      v14 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v14;
      a2[2] = v12;
      a3[2] = v13;
      v15 = a2[2];
      v16 = a1[2];
      if (v15 < v16)
      {
        v17 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v17;
        a1[2] = v15;
        a2[2] = v16;
      }
    }
  }
  return result;
}

float *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(float *a1, float *a2, float *a3, uint64_t a4, uint64_t a5)
{
  float *result;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(a1, a2, a3, a4);
  v11 = *(float *)(a5 + 8);
  v12 = *(float *)(a4 + 8);
  if (v11 < v12)
  {
    v13 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v13;
    *(float *)(a4 + 8) = v11;
    *(float *)(a5 + 8) = v12;
    v14 = *(float *)(a4 + 8);
    v15 = a3[2];
    if (v14 < v15)
    {
      v16 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v16;
      a3[2] = v14;
      *(float *)(a4 + 8) = v15;
      v17 = a3[2];
      v18 = a2[2];
      if (v17 < v18)
      {
        v19 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v19;
        a2[2] = v17;
        a3[2] = v18;
        v20 = a2[2];
        v21 = a1[2];
        if (v20 < v21)
        {
          v22 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v22;
          a1[2] = v20;
          a2[2] = v21;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  uint64_t v8;
  float *v9;
  float *v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = a1[2];
      if (v6 < v7)
      {
        v8 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *((_QWORD *)a2 - 2);
        *((_QWORD *)a2 - 2) = v8;
        a1[2] = v6;
        *(a2 - 2) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(a1, a1 + 4, a1 + 8, (uint64_t)(a2 - 4));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(a1, a1 + 4, a1 + 8, (uint64_t)(a1 + 12), (uint64_t)(a2 - 4));
      return 1;
    default:
      v9 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(a1, a1 + 4, a1 + 8);
      v10 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[2];
    if (v13 < v9[2])
    {
      v14 = *(_QWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = (char *)a1 + v15;
        *((_QWORD *)v16 + 6) = *(_QWORD *)((char *)a1 + v15 + 32);
        *((float *)v16 + 14) = *(float *)((char *)a1 + v15 + 40);
        if (v15 == -32)
          break;
        v15 -= 16;
        if (v13 >= *((float *)v16 + 6))
        {
          v17 = (uint64_t)a1 + v15 + 48;
          goto LABEL_12;
        }
      }
      v17 = (uint64_t)a1;
LABEL_12:
      *(_QWORD *)v17 = v14;
      *(float *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 4 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 4;
    if (v10 == a2)
      return 1;
  }
}

void sub_19C8E0A00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8E0A7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8E0AD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<long *>,std::__wrap_iter<long *>,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE v13[64];

  if ((uint64_t)(a2 - a1) >= 9)
  {
    v4 = (uint64_t *)a1;
    v5 = a2 - 8;
    if (a2 - 8 > a1)
    {
      v7 = (a2 - a1) >> 3;
      do
      {
        if (v7 != 1)
        {
          if (v7)
          {
            v8 = __clz(v7);
            if (((v7 << v8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
              v9 = 64;
            else
              v9 = 63;
            std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v13, a3, v9 - v8);
            do
              v10 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v13);
            while (v10 >= v7);
            if (!v10)
              goto LABEL_13;
          }
          else
          {
            std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v13, a3, 0x40uLL);
            v10 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v13);
            if (!v10)
              goto LABEL_13;
          }
          v11 = *v4;
          *v4 = v4[v10];
          v4[v10] = v11;
        }
LABEL_13:
        ++v4;
        --v7;
      }
      while ((unint64_t)v4 < v5);
    }
  }
  return a2;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (a3 % 0x1E)
    v3 = a3 / 0x1E + 1;
  else
    v3 = a3 / 0x1E;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x7FFFFFFE) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      *(_QWORD *)(result + 32) = v3 - a3 + (v3 << 6);
      *(_QWORD *)(result + 40) = 0;
      LOBYTE(v4) = 64;
      goto LABEL_15;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x7FFFFFFE;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 >= 0x3F)
  {
LABEL_15:
    *(_QWORD *)(result + 48) = 0;
    v6 = -1;
    *(_DWORD *)(result + 56) = 0xFFFFFFFF >> -(char)v4;
    goto LABEL_16;
  }
  *(_QWORD *)(result + 48) = 0x3FFFFFFFuLL >> v4 << (v4 + 1);
  v6 = -1;
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  *(_DWORD *)(result + 56) = v7;
  if (v4 <= 0x1E)
    v6 = 0xFFFFFFFF >> ~(_BYTE)v4;
LABEL_16:
  *(_DWORD *)(result + 60) = v6;
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    result = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        v7 = v6 / 0xADC8;
        v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        v9 = v8 >= v7;
        v10 = v8 - v7;
        if (v9)
          v11 = 0;
        else
          v11 = 0x7FFFFFFF;
        v6 = v11 + v10;
        v12 = v6 - 1;
      }
      while (*(_QWORD *)(a1 + 40) <= v12);
      v13 = result << v5;
      if (v5 >= 0x40)
        v13 = 0;
      result = v13 + (*(_DWORD *)(a1 + 56) & v12);
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    result = 0;
  }
  v14 = *(_QWORD *)(a1 + 24);
  if (v2 < v14)
  {
    v15 = *(unsigned int **)a1;
    v16 = *(_QWORD *)(a1 + 48);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_DWORD *)(a1 + 60);
    v19 = *v15;
    while (1)
    {
      v20 = v19 / 0xADC8;
      v21 = 48271 * (v19 % 0xADC8);
      v20 *= 3399;
      v9 = v21 >= v20;
      v22 = v21 - v20;
      if (v9)
        v23 = 0;
      else
        v23 = 0x7FFFFFFF;
      v19 = v23 + v22;
      v24 = v19 - 1;
      if (v16 > v24)
      {
        v25 = result << (v17 + 1);
        if (v17 >= 0x3F)
          v25 = 0;
        result = v25 + (v18 & v24);
        if (++v2 == v14)
          break;
      }
    }
    *v15 = v19;
  }
  return result;
}

void CoreML::NNCompiler::MLClassifierInfo::~MLClassifierInfo(CoreML::NNCompiler::MLClassifierInfo *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void sub_19C8E1390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8E1558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8E15D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C8E16FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8E191C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8E31AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51)
{
  void *v51;

  _Unwind_Resume(a1);
}

uint64_t ___ZL10performNMSIddEP27MLDictionaryFeatureProviderP12MLMultiArrayS3_ddP33MLNonMaximumSuppressionParametersyyPU15__autoreleasingP7NSError_block_invoke()
{
  return kdebug_trace();
}

uint64_t ___ZL10performNMSIddEP27MLDictionaryFeatureProviderP12MLMultiArrayS3_ddP33MLNonMaximumSuppressionParametersyyPU15__autoreleasingP7NSError_block_invoke_2()
{
  return kdebug_trace();
}

uint64_t ___ZL10performNMSIddEP27MLDictionaryFeatureProviderP12MLMultiArrayS3_ddP33MLNonMaximumSuppressionParametersyyPU15__autoreleasingP7NSError_block_invoke_3()
{
  return kdebug_trace();
}

void std::vector<double>::resize(char **a1, unint64_t a2, _QWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *i;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v6 = *a1;
  v5 = a1[1];
  v7 = (v5 - *a1) >> 3;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[8 * a2];
  }
  else
  {
    v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 3)
    {
      v23 = &v5[8 * (a2 - v7)];
      v24 = 8 * a2 - 8 * v7;
      do
      {
        *(_QWORD *)v5 = *a3;
        v5 += 8;
        v24 -= 8;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 61)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v10 = v9 - v6;
      v11 = (v9 - v6) >> 2;
      if (v11 <= a2)
        v11 = a2;
      if (v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v12);
      v15 = &v13[8 * v7];
      v16 = &v13[8 * a2];
      v17 = 8 * a2 - 8 * v7;
      v18 = v15;
      do
      {
        *(_QWORD *)v18 = *a3;
        v18 += 8;
        v17 -= 8;
      }
      while (v17);
      v19 = &v13[8 * v14];
      v20 = *a1;
      for (i = a1[1]; i != v20; i -= 8)
      {
        v22 = *((_QWORD *)i - 1);
        *((_QWORD *)v15 - 1) = v22;
        v15 -= 8;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

uint64_t ___ZL10performNMSIffEP27MLDictionaryFeatureProviderP12MLMultiArrayS3_ddP33MLNonMaximumSuppressionParametersyyPU15__autoreleasingP7NSError_block_invoke()
{
  return kdebug_trace();
}

uint64_t ___ZL10performNMSIffEP27MLDictionaryFeatureProviderP12MLMultiArrayS3_ddP33MLNonMaximumSuppressionParametersyyPU15__autoreleasingP7NSError_block_invoke_2()
{
  return kdebug_trace();
}

uint64_t ___ZL10performNMSIffEP27MLDictionaryFeatureProviderP12MLMultiArrayS3_ddP33MLNonMaximumSuppressionParametersyyPU15__autoreleasingP7NSError_block_invoke_3()
{
  return kdebug_trace();
}

void std::vector<float>::resize(char **a1, unint64_t a2, _DWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *i;
  int v22;
  char *v23;
  uint64_t v24;

  v6 = *a1;
  v5 = a1[1];
  v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[4 * a2];
  }
  else
  {
    v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 2)
    {
      v23 = &v5[4 * (a2 - v7)];
      v24 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)v5 = *a3;
        v5 += 4;
        v24 -= 4;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 62)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v10 = v9 - v6;
      v11 = (v9 - v6) >> 1;
      if (v11 <= a2)
        v11 = a2;
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v12);
      v15 = &v13[4 * v7];
      v16 = &v13[4 * a2];
      v17 = 4 * a2 - 4 * v7;
      v18 = v15;
      do
      {
        *(_DWORD *)v18 = *a3;
        v18 += 4;
        v17 -= 4;
      }
      while (v17);
      v19 = &v13[4 * v14];
      v20 = *a1;
      for (i = a1[1]; i != v20; i -= 4)
      {
        v22 = *((_DWORD *)i - 1);
        *((_DWORD *)v15 - 1) = v22;
        v15 -= 4;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

void sub_19C8E44E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  CoreML::Specification::NonMaximumSuppression::~NonMaximumSuppression((CoreML::Specification::NonMaximumSuppression *)va);

  _Unwind_Resume(a1);
}

void sub_19C8E4684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8E4880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8E4E80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8E4EC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8E4F70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8E50CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v23 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_19C8E51C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8E526C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8E5360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8E5400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20005(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20006(uint64_t a1)
{

}

void sub_19C8E54BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8E5548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8E55E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8E566C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void CoreML::MLModelException::~MLModelException(std::exception *this)
{
  CoreML::MLModelException::~MLModelException(this);
  JUMPOUT(0x1A1AD6260);
}

{
  this->__vftable = (std::exception_vtbl *)&off_1E3D594F0;
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[2].__vftable);

  std::exception::~exception(this);
}

uint64_t CoreML::MLModelException::what(CoreML::MLModelException *this)
{
  uint64_t result;

  result = (uint64_t)this + 16;
  if (*((char *)this + 39) < 0)
    return *(_QWORD *)result;
  return result;
}

CoreML::MLModelException *CoreML::MLModelException::MLModelException(CoreML::MLModelException *this, NSError *a2)
{
  NSError *v3;
  NSError *v4;
  id v5;

  v3 = a2;
  *(_QWORD *)this = &off_1E3D594F0;
  v4 = v3;
  *((_QWORD *)this + 1) = v4;
  -[NSError localizedDescription](v4, "localizedDescription");
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 2, (char *)objc_msgSend(v5, "UTF8String"));

  return this;
}

void sub_19C8E577C(_Unwind_Exception *a1)
{
  std::exception *v1;
  void *v2;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void Archiver::_IArchiveDiskImpl::~_IArchiveDiskImpl(void **this)
{
  Archiver::_IArchiveImpl::~_IArchiveImpl(this);
  JUMPOUT(0x1A1AD6260);
}

void Archiver::_IArchiveDiskImpl::getObject()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Error: getObject is not supported by _OArchiveDiskImpl");
  __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
}

void sub_19C8E580C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1A1AD5F48](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1A1AD61C4](a1 + 53);
  return a1;
}

void std::__shared_ptr_emplace<Archiver::_IDataBlobImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BDF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Archiver::_IDataBlobImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BDF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<Archiver::MMappedInputENMLFile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BFB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Archiver::MMappedInputENMLFile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BFB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_emplace<Archiver::MMappedInputENMLFile>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Archiver::_IDataBlobENMLImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BF08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Archiver::_IDataBlobENMLImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BF08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_emplace<Archiver::_IDataBlobENMLImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Archiver::_IArchiveMemoryImpl::~_IArchiveMemoryImpl(id *this)
{

  Archiver::_IArchiveImpl::~_IArchiveImpl(this);
}

{

  Archiver::_IArchiveImpl::~_IArchiveImpl(this);
  JUMPOUT(0x1A1AD6260);
}

void Archiver::_IArchiveMemoryImpl::createBlob(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSData *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::ios_base *v27;
  char *v28;
  unint64_t *v29;
  unint64_t v30;
  id v31;
  __int128 v32;
  __int128 v33;

  if (*((char *)a2 + 23) >= 0)
    v6 = (uint64_t *)a2;
  else
    v6 = *(uint64_t **)a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "pathComponents");
  v31 = (id)objc_claimAutoreleasedReturnValue();

  if ((unint64_t)objc_msgSend(v31, "count") >= 2)
  {
    objc_msgSend(v31, "subarrayWithRange:", 0, objc_msgSend(v31, "count") - 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    Archiver::findArchive(v8, *(void **)(a1 + 48));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      objc_msgSend(v31, "lastObject");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "objectForKeyedSubscript:", v10);
      v11 = (NSData *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v11 = 0;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v12 = (std::__shared_weak_count *)operator new(0x110uLL);
      v12->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      v12->__shared_weak_owners_ = 0;
      v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BE28;
      Archiver::_MemoryIStream::_MemoryIStream((Archiver::_MemoryIStream *)&v12[1], v11);
      v14 = operator new(0x60uLL);
      v15 = v14;
      v14[1] = 0;
      v14[2] = 0;
      *v14 = &off_1E3D5BFE8;
      v16 = v14 + 3;
      *(_QWORD *)&v33 = v12 + 1;
      *((_QWORD *)&v33 + 1) = v12;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      Archiver::_IDataBlobImpl::_IDataBlobImpl(v14 + 3, a2, &v33);
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      v15[3] = &off_1E3D5B410;
      v15[11] = (id)v12[4].__shared_weak_owners_;
      *(_QWORD *)&v19 = v16;
      *((_QWORD *)&v19 + 1) = v15;
      *(_OWORD *)a3 = v19;
      if (v12)
      {
        v20 = (unint64_t *)&v12->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }

      goto LABEL_28;
    }

  }
  v22 = operator new(0x258uLL);
  v22[1] = 0;
  v22[2] = 0;
  *v22 = &off_1E3D5C170;
  v23 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v24 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  v22[3] = v23;
  v25 = MEMORY[0x1E0DE4FA8];
  v26 = MEMORY[0x1E0DE4FA8] + 64;
  v22[56] = MEMORY[0x1E0DE4FA8] + 64;
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v23 - 24) + 24) = v24;
  v22[4] = 0;
  v27 = (std::ios_base *)((char *)v22 + *(_QWORD *)(v22[3] - 24) + 24);
  std::ios_base::init(v27, v22 + 5);
  v27[1].__vftable = 0;
  v27[1].__fmtflags_ = -1;
  v22[3] = v25 + 24;
  v22[56] = v26;
  MEMORY[0x1A1AD5F3C](v22 + 5);
  *(_QWORD *)&v32 = v22 + 3;
  *((_QWORD *)&v32 + 1) = v22;
  v28 = (char *)operator new(0x58uLL);
  *(_OWORD *)(v28 + 8) = 0u;
  *(_QWORD *)v28 = &off_1E3D5BDF0;
  v33 = v32;
  Archiver::_IDataBlobImpl::_IDataBlobImpl((_QWORD *)v28 + 3, a2, &v33);
  if (*((_QWORD *)&v32 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
    }
  }
  *(_QWORD *)a3 = v28 + 24;
  *(_QWORD *)(a3 + 8) = v28;
LABEL_28:

}

void sub_19C8E5D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, char a13, uint64_t a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v22;
  void *v23;

  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v23);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);

  _Unwind_Resume(a1);
}

void sub_19C8E5E4C()
{
  void *v0;

  JUMPOUT(0x19C8E5E44);
}

void Archiver::_IArchiveMemoryImpl::getBlob(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void *__p[2];
  std::string::size_type v15;
  std::string v16;

  if (*(char *)(a1 + 31) >= 0)
    v6 = *(unsigned __int8 *)(a1 + 31);
  else
    v6 = *(_QWORD *)(a1 + 16);
  v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*(char *)(a1 + 31) >= 0)
      v8 = (const void *)(a1 + 8);
    else
      v8 = *(const void **)(a1 + 8);
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a2;
  else
    v10 = *(const std::string::value_type **)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::string::append(&v16, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v15 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  Archiver::_IArchiveMemoryImpl::createBlob(a1, (__int128 *)__p, a3);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_19C8E5F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Archiver::_IArchiveMemoryImpl::getNestedArchive(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  _QWORD *v13;
  __int128 v14;
  std::string __p;
  std::string v16;

  if (*(char *)(a1 + 31) >= 0)
    v6 = *(unsigned __int8 *)(a1 + 31);
  else
    v6 = *(_QWORD *)(a1 + 16);
  v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*(char *)(a1 + 31) >= 0)
      v8 = (const void *)(a1 + 8);
    else
      v8 = *(const void **)(a1 + 8);
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a2;
  else
    v10 = *(const std::string::value_type **)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::string::append(&v16, v10, v11);
  __p = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v13 = operator new(0x50uLL);
  v13[1] = 0;
  v13[2] = 0;
  *v13 = &off_1E3D5BF40;
  *(_QWORD *)&v14 = Archiver::_IArchiveMemoryImpl::_IArchiveMemoryImpl((uint64_t)(v13 + 3), (uint64_t)&__p, *(void **)(a1 + 48));
  *((_QWORD *)&v14 + 1) = v13;
  *a3 = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19C8E60B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id Archiver::_IArchiveMemoryImpl::getObject(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t *v8;
  void *v9;
  void *v10;

  v4 = (_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v4 = (_QWORD *)*v4;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pathComponents");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  Archiver::findArchive(v6, *(void **)(a1 + 48));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKeyedSubscript:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_19C8E61B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

BOOL Archiver::_IArchiveMemoryImpl::hasNestedArchive(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t v5;
  std::string *v6;
  const void *v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  void *v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  void *__p[2];
  int64_t v20;
  std::string v21;

  v4 = (void *)MEMORY[0x1E0CB3940];
  if (*(char *)(a1 + 31) >= 0)
    v5 = *(unsigned __int8 *)(a1 + 31);
  else
    v5 = *(_QWORD *)(a1 + 16);
  v6 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v5 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (*(char *)(a1 + 31) >= 0)
      v7 = (const void *)(a1 + 8);
    else
      v7 = *(const void **)(a1 + 8);
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a2;
  else
    v9 = *(const std::string::value_type **)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  v11 = std::string::append(&v21, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v20 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (v20 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  objc_msgSend(v4, "stringWithUTF8String:", v13, __p[0], __p[1], v20);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  objc_msgSend(v14, "pathComponents");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  Archiver::findArchive(v15, *(void **)(a1 + 48));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v16 != 0;

  return v17;
}

void sub_19C8E633C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

uint64_t Archiver::_IArchiveMemoryImpl::storageType(Archiver::_IArchiveMemoryImpl *this)
{
  return 1;
}

uint64_t Archiver::_IArchiveMemoryImpl::isENMLFormat(Archiver::_IArchiveMemoryImpl *this)
{
  return 0;
}

id Archiver::findArchive(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v13;
    while (2)
    {
      v8 = 0;
      v9 = v4;
      do
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v5);
        objc_msgSend(v9, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v8), (_QWORD)v12);
        v4 = (id)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          v10 = 0;
          goto LABEL_11;
        }

        ++v8;
        v9 = v4;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v6)
        continue;
      break;
    }
  }

  v9 = v4;
  v10 = v9;
LABEL_11:

  return v10;
}

void sub_19C8E64F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t Archiver::_IArchiveMemoryImpl::_IArchiveMemoryImpl(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  int v7;
  id v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v20[2];
  unsigned __int8 v21;
  void *__p[2];
  std::string::size_type v23;
  __int128 v24;
  std::string v25;

  v5 = a3;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  *(_QWORD *)a1 = off_1E3D5AFD8;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    v7 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v6 = a1 + 32;
    if (v7 < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)(a1 + 8) = v25;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v6 = a1 + 32;
  }
  *(_QWORD *)a1 = &off_1E3D5B338;
  v8 = v5;
  *(_QWORD *)(a1 + 48) = v8;
  std::string::basic_string[abi:ne180100]<0>(v20, "coremldata.bin");
  if (*(char *)(a1 + 31) >= 0)
    v9 = *(unsigned __int8 *)(a1 + 31);
  else
    v9 = *(_QWORD *)(a1 + 16);
  v10 = &v25;
  std::string::basic_string[abi:ne180100]((uint64_t)&v25, v9 + 1);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if (v9)
  {
    if (*(char *)(a1 + 31) >= 0)
      v11 = (const void *)(a1 + 8);
    else
      v11 = *(const void **)(a1 + 8);
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 47;
  if ((v21 & 0x80u) == 0)
    v12 = v20;
  else
    v12 = (void **)v20[0];
  if ((v21 & 0x80u) == 0)
    v13 = v21;
  else
    v13 = (std::string::size_type)v20[1];
  v14 = std::string::append(&v25, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  Archiver::_IArchiveMemoryImpl::createBlob(a1, (__int128 *)__p, (uint64_t)&v24);
  std::shared_ptr<MIL::IRProgram const>::operator=[abi:ne180100](v6, &v24);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if ((char)v21 < 0)
    operator delete(v20[0]);

  return a1;
}

void sub_19C8E6744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;

  if (a30 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Archiver::_IArchiveMemoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BF40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Archiver::_IArchiveMemoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BF40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<Archiver::_IArchiveMemoryImpl>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);

  Archiver::_IArchiveImpl::~_IArchiveImpl(v1);
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_emplace<std::ifstream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Archiver::_IDataBlobMemoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BFE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Archiver::_IDataBlobMemoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BFE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_emplace<Archiver::_IDataBlobMemoryImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Archiver::_MemoryIStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BE28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Archiver::_MemoryIStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BE28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<Archiver::_MemoryIStream>::__on_zero_shared(uint64_t a1)
{
  Archiver::_MemoryIStream::~_MemoryIStream((id *)(a1 + 24));
  JUMPOUT(0x1A1AD61C4);
}

void sub_19C8E69A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19C8E6AC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8E6C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C8E708C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8E7110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLE5ExecutionStream;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19C8E72F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8E73D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8E7454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8E7738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_19C8E7A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_19C8E7BB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8E7C64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8E7DF4(_Unwind_Exception *a1)
{
  void *v1;

  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19C8E7F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8E8378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8E8540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19C8E87E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8E89B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20334(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__20335(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    JUMPOUT(0x1A1AD6260);
  return result;
}

void sub_19C8E8D38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios16Train::Ios16TrainLayerTranslator::~Ios16TrainLayerTranslator(void **this)
{
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(this);
  JUMPOUT(0x1A1AD6260);
}

void sub_19C8E908C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8E90E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _QWORD *v9;
  void *v10;
  void *v13;

  __cxa_free_exception(v10);
  if (a2 == 1)
  {
    v13 = __cxa_begin_catch(a1);
    if (v9)
    {
      (*(void (**)(void *))(*(_QWORD *)v13 + 16))(v13);
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("%s"));
      *v9 = (id)objc_claimAutoreleasedReturnValue();
    }
    __cxa_end_catch();
    JUMPOUT(0x19C8E900CLL);
  }
  JUMPOUT(0x19C8E90D4);
}

void sub_19C8E9158()
{
  __cxa_end_catch();
  JUMPOUT(0x19C8E90D4);
}

void sub_19C8E93A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8E9480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8E9508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios15::Ios15LayerTranslator::~Ios15LayerTranslator(void **this)
{
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(this);
  JUMPOUT(0x1A1AD6260);
}

void sub_19C8E9744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C8E99F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C8E9E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;

  if (a16 < 0)
    operator delete(__p);
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)&a17);

  _Unwind_Resume(a1);
}

void sub_19C8EA008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8EA7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  uint64_t *v15;
  uint64_t v16;

  MEMORY[0x1A1AD6260](v16, 0x10A1C406130BDD3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v15);

  _Unwind_Resume(a1);
}

void sub_19C8EAD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_19C8EBB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,void *a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void sub_19C8EC2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19C8EDBA0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;

  MEMORY[0x1A1AD6260](v2, 0x10A1C403937033FLL);

  _Unwind_Resume(a1);
}

void sub_19C8EDE3C()
{
  void *v0;

  JUMPOUT(0x19C8EDE30);
}

void sub_19C8EDF2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8EE0AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8EE21C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8EE448(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8EE504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8EE704(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8EEA6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_19C8EEC08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8EF6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

id _validateAndGetData(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  size_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  const void *v22;
  void *v23;
  id v24;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned __int8 *)(v4 + 23);
  if (*(char *)(v4 + 23) < 0)
    v6 = *(_QWORD *)(v4 + 8);
  else
    v6 = *(unsigned __int8 *)(v4 + 23);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0)
    v9 = *(_QWORD *)(v7 + 8);
  else
    v9 = *(unsigned __int8 *)(v7 + 23);
  v10 = *(_DWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  if (v10 <= 0)
    v14 = 1;
  else
    v14 = 2;
  if (v6)
    v15 = v14;
  else
    v15 = v10 > 0;
  if (v9)
    ++v15;
  if (v13)
    ++v15;
  if (v10 < 1 || v15 != 1)
  {
    if (a2)
    {
      +[MLModelErrorUtils updateErrorWithFormat:](MLModelErrorUtils, "updateErrorWithFormat:", CFSTR("only float32 weight/bias supported."));
      v24 = (id)objc_claimAutoreleasedReturnValue();
      v23 = 0;
      *a2 = v24;
    }
    else
    {
      v23 = 0;
    }
    return v23;
  }
  if ((v5 & 0x80) == 0)
  {
    if ((v8 & 0x80) == 0)
      goto LABEL_24;
LABEL_44:
    v8 = *(_QWORD *)(v7 + 8);
    if ((v12 & 0x80) == 0)
      goto LABEL_25;
LABEL_45:
    v12 = *(_QWORD *)(v11 + 8);
    goto LABEL_25;
  }
  v5 = *(_QWORD *)(v4 + 8);
  if ((v8 & 0x80) != 0)
    goto LABEL_44;
LABEL_24:
  if ((v12 & 0x80) != 0)
    goto LABEL_45;
LABEL_25:
  if (v5)
    v16 = v14;
  else
    v16 = v10 > 0;
  if (v8)
    ++v16;
  if (v12)
    ++v16;
  if (v16 == 1)
    v17 = 4 * v10;
  else
    v17 = 0;
  v18 = v17;
  v19 = malloc_type_malloc(v17, 0x7DEEB7F7uLL);
  v20 = v19;
  v21 = *(_QWORD *)(a1 + 24);
  if (v21)
    v22 = (const void *)(v21 + 8);
  else
    v22 = 0;
  memcpy(v19, v22, v18);
  objc_msgSend(MEMORY[0x1E0CC1400], "dataWithBytesNoCopy:length:freeWhenDone:", v20, v18, 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  return v23;
}

id _mlcActivationDescriptor(int a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v6;

  if (a1 > 39)
  {
    if (a1 == 40)
    {
      v3 = 3;
      goto LABEL_10;
    }
    if (a1 == 41)
    {
      v3 = 4;
      goto LABEL_10;
    }
  }
  else
  {
    if (a1 == 10)
    {
      v3 = 1;
      goto LABEL_10;
    }
    if (a1 == 30)
    {
      v3 = 5;
LABEL_10:
      objc_msgSend(MEMORY[0x1E0CC1340], "descriptorWithType:", v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      return v4;
    }
  }
  if (a2)
  {
    +[MLModelErrorUtils errorWithCode:format:](MLModelErrorUtils, "errorWithCode:format:", 6, CFSTR("LSTM Actiavtion not supported."));
    v6 = (id)objc_claimAutoreleasedReturnValue();
    v4 = 0;
    *a2 = v6;
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

void sub_19C8EFBF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8EFDA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8EFFEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8F0354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;

  CoreML::Specification::WeightParams::~WeightParams((CoreML::Specification::WeightParams *)&a13);
  CoreML::Specification::WeightParams::~WeightParams((CoreML::Specification::WeightParams *)&a23);
  CoreML::Specification::WeightParams::~WeightParams((CoreML::Specification::WeightParams *)&a33);
  CoreML::Specification::WeightParams::~WeightParams((CoreML::Specification::WeightParams *)(v37 - 160));
  _Unwind_Resume(a1);
}

void sub_19C8F03D8()
{
  JUMPOUT(0x19C8F03C8);
}

_QWORD *CoreML::NNCompiler::NeuralNetwork::NeuralNetworkSpecProxy::Make(CoreML::NNCompiler::NeuralNetwork::NeuralNetworkSpecProxy *this, const CoreML::Specification::Model *a2, int a3)
{
  _QWORD *result;
  uint64_t (**v6)();
  void *exception;

  switch(a3)
  {
    case 303:
      result = (_QWORD *)operator new();
      v6 = &off_1E3D4C8D8;
      break;
    case 403:
      result = (_QWORD *)operator new();
      v6 = &off_1E3D4C928;
      break;
    case 500:
      result = (_QWORD *)operator new();
      v6 = &off_1E3D4C888;
      break;
    default:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](exception, "Invalid NeuralNetwork Specification type");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *result = v6;
  result[1] = a2;
  *(_QWORD *)this = result;
  return result;
}

void sub_19C8F054C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkClassifier>::~NeuralNetworkSpecProxyImpl()
{
  JUMPOUT(0x1A1AD6260);
}

uint64_t `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkClassifier>::GetOutputNames@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  size_t v12;
  size_t v13;
  const void *v14;
  uint64_t v15;
  int v16;
  size_t v17;
  const void *v18;
  size_t v19;
  const void *v21;
  uint64_t v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 **v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *i;
  uint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  _OWORD v49[2];
  int v50;
  __int128 v51;
  __int128 v52;
  int v53;
  __int128 v54;
  __int128 v55;
  int v56;

  v3 = *(_QWORD *)(a1 + 8);
  v54 = 0u;
  v55 = 0u;
  v56 = 1065353216;
  v4 = *(uint64_t **)(a2 + 16);
  if (!v4)
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  v5 = v4[7];
  if (v5)
    v6 = v5 + 8;
  else
    v6 = 0;
  v7 = *((int *)v4 + 12);
  if ((_DWORD)v7)
  {
    v9 = 8 * v7;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 16);
      if (*(_QWORD *)(a2 + 16))
        v11 = *(uint64_t **)(a2 + 16);
      else
        v11 = &CoreML::Specification::_ModelDescription_default_instance_;
      v12 = *(unsigned __int8 *)(v10 + 23);
      v13 = v12;
      v14 = *(const void **)(*(_QWORD *)v6 + 16);
      if (*(char *)(v10 + 23) < 0)
      {
        v14 = *(const void **)v10;
        v13 = *(_QWORD *)(v10 + 8);
      }
      v15 = v11[17];
      v16 = *(char *)(v15 + 23);
      if (v16 >= 0)
        v17 = *(unsigned __int8 *)(v15 + 23);
      else
        v17 = *(_QWORD *)(v15 + 8);
      if (v16 >= 0)
        v18 = (const void *)v11[17];
      else
        v18 = *(const void **)v15;
      if (v17 >= v13)
        v19 = v13;
      else
        v19 = v17;
      if (memcmp(v14, v18, v19) || v17 != v13)
      {
        v21 = (const void *)v10;
        if ((v12 & 0x80) != 0)
        {
          v21 = *(const void **)v10;
          v12 = *(_QWORD *)(v10 + 8);
        }
        v22 = v11[18];
        v23 = *(char *)(v22 + 23);
        if (v23 >= 0)
          v24 = *(unsigned __int8 *)(v22 + 23);
        else
          v24 = *(_QWORD *)(v22 + 8);
        if (v23 >= 0)
          v25 = (const void *)v11[18];
        else
          v25 = *(const void **)v22;
        if (v24 >= v12)
          v26 = v12;
        else
          v26 = v24;
        if (memcmp(v21, v25, v26) || v24 != v12)
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v54, (unsigned __int8 *)v10, v10);
      }
      v6 += 8;
      v9 -= 8;
    }
    while (v9);
  }
  v28 = *(_QWORD *)(v3 + 64);
  if (*(char *)(v28 + 23) < 0)
    v29 = *(_QWORD *)(v28 + 8);
  else
    v29 = *(unsigned __int8 *)(v28 + 23);
  if (v29)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v54, (unsigned __int8 *)v28, *(_QWORD *)(v3 + 64));
  }
  else
  {
    v51 = 0u;
    v52 = 0u;
    v53 = 1065353216;
    memset(v49, 0, sizeof(v49));
    v50 = 1065353216;
    v30 = *(_QWORD *)(v3 + 32);
    if (v30)
      v31 = (uint64_t *)(v30 + 8);
    else
      v31 = 0;
    v32 = *(int *)(v3 + 24);
    if ((_DWORD)v32)
    {
      v33 = &v31[v32];
      do
      {
        v34 = *v31;
        v35 = *(_QWORD *)(*v31 + 32);
        if (v35)
          v36 = (unsigned __int8 **)(v35 + 8);
        else
          v36 = 0;
        v37 = *(int *)(v34 + 24);
        if ((_DWORD)v37)
        {
          v38 = 8 * v37;
          do
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v49, *v36, (uint64_t)*v36);
            ++v36;
            v38 -= 8;
          }
          while (v38);
        }
        v39 = *(_QWORD *)(v34 + 56);
        if (v39)
          v40 = (unsigned __int8 **)(v39 + 8);
        else
          v40 = 0;
        v41 = *(int *)(v34 + 48);
        if ((_DWORD)v41)
        {
          v42 = 8 * v41;
          do
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v51, *v40, (uint64_t)*v40);
            ++v40;
            v42 -= 8;
          }
          while (v42);
        }
        ++v31;
      }
      while (v31 != v33);
      for (i = (unsigned __int8 *)v52; i; i = *(unsigned __int8 **)i)
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>>>::find<std::string>(v49, i + 16))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v54, i + 16, (uint64_t)(i + 16));
      }
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v49);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v51);
  }
  v44 = (uint64_t *)v55;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v45 = 0;
  if (v44)
  {
    v46 = v44;
    do
    {
      ++v45;
      v46 = (uint64_t *)*v46;
    }
    while (v46);
  }
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(a3, v44, v45);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v54);
}

void sub_19C8F081C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkClassifier>::arrayinputshapemapping(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 80);
}

uint64_t `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkClassifier>::imageinputshapemapping(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 84);
}

uint64_t `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkClassifier>::layers(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkClassifier>::preprocessing(uint64_t a1@<X0>, google::protobuf::internal::RepeatedPtrFieldBase *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  const CoreML::Specification::NeuralNetworkPreprocessing **v5;
  unsigned int *v6;
  _DWORD *v7;
  int v8;

  v3 = *(_QWORD *)(a1 + 8);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v4 = *(_DWORD *)(v3 + 48);
  if (v4)
  {
    v5 = (const CoreML::Specification::NeuralNetworkPreprocessing **)(*(_QWORD *)(v3 + 56) + 8);
    v6 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(a2, v4);
    v7 = (_DWORD *)*((_QWORD *)a2 + 2);
    v8 = *((_DWORD *)a2 + 2);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((google::protobuf::Arena **)a2, (CoreML::Specification::NeuralNetworkPreprocessing **)v6, v5, v4, *v7 - v8);
    *((_DWORD *)a2 + 2) = v8 + v4;
    if (*v7 < (signed int)(v8 + v4))
      *v7 = v8 + v4;
  }
}

uint64_t *`anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkClassifier>::updateparams(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72))
    return *(uint64_t **)(*(_QWORD *)(a1 + 8) + 72);
  else
    return &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(google::protobuf::Arena **a1, CoreML::Specification::NeuralNetworkPreprocessing **a2, const CoreML::Specification::NeuralNetworkPreprocessing **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  const CoreML::Specification::NeuralNetworkPreprocessing **v11;
  CoreML::Specification::NeuralNetworkPreprocessing **v12;
  const CoreML::Specification::NeuralNetworkPreprocessing *v13;
  const CoreML::Specification::NeuralNetworkPreprocessing *v14;
  CoreML::Specification::NeuralNetworkPreprocessing *v15;
  BOOL v16;
  int v17;
  google::protobuf::Arena *v18;
  CoreML::Specification::NeuralNetworkPreprocessing **v19;
  const CoreML::Specification::NeuralNetworkPreprocessing **v20;
  const CoreML::Specification::NeuralNetworkPreprocessing *v21;
  CoreML::Specification::NeuralNetworkPreprocessing *Aligned;
  google::protobuf::Arena **v23;
  unint64_t *v24;
  unint64_t v25;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<CoreML::Specification::NeuralNetworkPreprocessing>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20;
      if (v18)
      {
        CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing(Aligned);
        v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
        *v23 = Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::NeuralNetworkPreprocessing>;
        v24 = (unint64_t *)((char *)v18 + 32);
        do
          v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
      }
      else
      {
        Aligned = (CoreML::Specification::NeuralNetworkPreprocessing *)operator new();
        CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing(Aligned);
      }
      google::protobuf::internal::GenericTypeHandler<CoreML::Specification::NeuralNetworkPreprocessing>::Merge(v21, Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
}

void sub_19C8F0A40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD6260](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<CoreML::Specification::NeuralNetworkPreprocessing>::Merge(const CoreML::Specification::NeuralNetworkPreprocessing *a1, CoreML::Specification::NeuralNetworkPreprocessing *a2)
{
  CoreML::Specification::NeuralNetworkPreprocessing::MergeFrom(a2, a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::NeuralNetworkPreprocessing>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkRegressor>::~NeuralNetworkSpecProxyImpl()
{
  JUMPOUT(0x1A1AD6260);
}

uint64_t `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkRegressor>::GetOutputNames@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  __int128 v12;
  __int128 v13;
  int v14;

  v12 = 0u;
  v13 = 0u;
  v14 = 1065353216;
  v3 = *(uint64_t **)(a1 + 16);
  if (!v3)
    v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  v4 = v3[7];
  if (v4)
    v5 = v4 + 8;
  else
    v5 = 0;
  v6 = *((int *)v3 + 12);
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v12, *(unsigned __int8 **)(*(_QWORD *)v5 + 16), *(_QWORD *)(*(_QWORD *)v5 + 16));
      v5 += 8;
      v7 -= 8;
    }
    while (v7);
    v8 = (uint64_t *)v13;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    v9 = 0;
    if (v8)
    {
      v10 = v8;
      do
      {
        ++v9;
        v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(a2, v8, v9);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
}

void sub_19C8F0B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkRegressor>::arrayinputshapemapping(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 72);
}

uint64_t `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkRegressor>::imageinputshapemapping(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 76);
}

uint64_t `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkRegressor>::layers(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkRegressor>::preprocessing(uint64_t a1@<X0>, google::protobuf::internal::RepeatedPtrFieldBase *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  const CoreML::Specification::NeuralNetworkPreprocessing **v5;
  unsigned int *v6;
  _DWORD *v7;
  int v8;

  v3 = *(_QWORD *)(a1 + 8);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v4 = *(_DWORD *)(v3 + 48);
  if (v4)
  {
    v5 = (const CoreML::Specification::NeuralNetworkPreprocessing **)(*(_QWORD *)(v3 + 56) + 8);
    v6 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(a2, v4);
    v7 = (_DWORD *)*((_QWORD *)a2 + 2);
    v8 = *((_DWORD *)a2 + 2);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((google::protobuf::Arena **)a2, (CoreML::Specification::NeuralNetworkPreprocessing **)v6, v5, v4, *v7 - v8);
    *((_DWORD *)a2 + 2) = v8 + v4;
    if (*v7 < (signed int)(v8 + v4))
      *v7 = v8 + v4;
  }
}

uint64_t *`anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkRegressor>::updateparams(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64))
    return *(uint64_t **)(*(_QWORD *)(a1 + 8) + 64);
  else
    return &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
}

void `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetwork>::~NeuralNetworkSpecProxyImpl()
{
  JUMPOUT(0x1A1AD6260);
}

uint64_t `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetwork>::GetOutputNames@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  __int128 v12;
  __int128 v13;
  int v14;

  v12 = 0u;
  v13 = 0u;
  v14 = 1065353216;
  v3 = *(uint64_t **)(a1 + 16);
  if (!v3)
    v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  v4 = v3[7];
  if (v4)
    v5 = v4 + 8;
  else
    v5 = 0;
  v6 = *((int *)v3 + 12);
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v12, *(unsigned __int8 **)(*(_QWORD *)v5 + 16), *(_QWORD *)(*(_QWORD *)v5 + 16));
      v5 += 8;
      v7 -= 8;
    }
    while (v7);
    v8 = (uint64_t *)v13;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    v9 = 0;
    if (v8)
    {
      v10 = v8;
      do
      {
        ++v9;
        v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(a2, v8, v9);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
}

void sub_19C8F0D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetwork>::arrayinputshapemapping(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 72);
}

uint64_t `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetwork>::imageinputshapemapping(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 76);
}

uint64_t `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetwork>::layers(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void `anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetwork>::preprocessing(uint64_t a1@<X0>, google::protobuf::internal::RepeatedPtrFieldBase *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  const CoreML::Specification::NeuralNetworkPreprocessing **v5;
  unsigned int *v6;
  _DWORD *v7;
  int v8;

  v3 = *(_QWORD *)(a1 + 8);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v4 = *(_DWORD *)(v3 + 48);
  if (v4)
  {
    v5 = (const CoreML::Specification::NeuralNetworkPreprocessing **)(*(_QWORD *)(v3 + 56) + 8);
    v6 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(a2, v4);
    v7 = (_DWORD *)*((_QWORD *)a2 + 2);
    v8 = *((_DWORD *)a2 + 2);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((google::protobuf::Arena **)a2, (CoreML::Specification::NeuralNetworkPreprocessing **)v6, v5, v4, *v7 - v8);
    *((_DWORD *)a2 + 2) = v8 + v4;
    if (*v7 < (signed int)(v8 + v4))
      *v7 = v8 + v4;
  }
}

uint64_t *`anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetwork>::updateparams(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64))
    return *(uint64_t **)(*(_QWORD *)(a1 + 8) + 64);
  else
    return &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
}

uint64_t CoreML::NNCompiler::NeuralNetwork::NeuralNetworkSpecProxy::HasLayerOfType(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
    v5 = v4 + 8;
  else
    v5 = 0;
  v6 = *(int *)(v3 + 8);
  if (!(_DWORD)v6)
    return 0;
  v7 = v5 + 8 * v6;
  v8 = (_DWORD *)a2[1];
  while ((_DWORD *)*a2 == v8)
  {
LABEL_10:
    v5 += 8;
    if (v5 == v7)
      return 0;
  }
  v9 = (_DWORD *)*a2;
  while (*(_DWORD *)(*(_QWORD *)v5 + 140) != *v9)
  {
    if (++v9 == v8)
      goto LABEL_10;
  }
  return 1;
}

void sub_19C8F1E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLE5OutputPort;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19C8F1EAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8F1EF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8F1F3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8F1F80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8F1FC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8F2030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8F20FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C8F2268(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8F2DCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8F2EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C8F2F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19C8F2FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19C8F3094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19C8F3164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C8F31E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C8F325C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C8F32E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C8F3618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  void *v34;
  void *v35;

  _Block_object_dispose(&a29, 8);

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21149(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21150(uint64_t a1)
{

}

char *OArchive::nestedArchive(char *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  uint64_t **v9;
  char v10;
  unint64_t *v11;
  unint64_t v12;
  void **v13;
  char *v14;
  uint64_t **v15;
  std::string *v16;
  char *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v32;
  char v33;
  __int128 v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = a1 + 32;
  v5 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (!v5)
    goto LABEL_8;
  v6 = a1 + 32;
  do
  {
    v7 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v5 + 4, (_QWORD *)a2);
    v8 = v5 + 1;
    if (!v7)
    {
      v8 = v5;
      v6 = v5;
    }
    v5 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 != v4
    && !google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()((_QWORD *)a2, v6 + 4))
  {
    return (char *)(v6 + 7);
  }
LABEL_8:
  v9 = (uint64_t **)(v4 - 1);
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)a1 + 1) + 24))(&v32, *((_QWORD *)a1 + 1), a2);
  v10 = *a1;
  v33 = *a1;
  v34 = v32;
  if (*((_QWORD *)&v32 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v36 = 0;
  v37 = 0;
  v35 = &v36;
  v13 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)v9, &v38, (_QWORD *)a2);
  v14 = (char *)*v13;
  if (!*v13)
  {
    v15 = (uint64_t **)v13;
    v14 = (char *)operator new(0x68uLL);
    v16 = (std::string *)(v14 + 32);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((_QWORD *)v14 + 6) = *(_QWORD *)(a2 + 16);
    }
    *((_QWORD *)v14 + 8) = 0;
    *((_QWORD *)v14 + 9) = 0;
    *((_QWORD *)v14 + 12) = 0;
    *((_QWORD *)v14 + 11) = 0;
    *((_QWORD *)v14 + 10) = v14 + 88;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v9, v38, v15, (uint64_t *)v14);
    v10 = v33;
  }
  v14[56] = v10;
  v17 = v14 + 56;
  v18 = v34;
  v34 = 0uLL;
  v19 = (std::__shared_weak_count *)*((_QWORD *)v14 + 9);
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v14 + 88;
  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(*((char **)v14 + 11));
  v23 = v36;
  *((_QWORD *)v14 + 10) = v35;
  *((_QWORD *)v14 + 11) = v23;
  v24 = v37;
  *((_QWORD *)v14 + 12) = v37;
  if (v24)
  {
    *(_QWORD *)(v23 + 16) = v22;
    v23 = 0;
    v35 = &v36;
    v36 = 0;
    v37 = 0;
  }
  else
  {
    *((_QWORD *)v14 + 10) = v22;
  }
  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy((char *)v23);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return v17;
}

void sub_19C8F4070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  uint64_t v16;
  uint64_t v17;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,OArchive>,void *>>>::operator()[abi:ne180100](0, v16);
  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(a16);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t OArchive::listFilesWritten(OArchive *this, uint64_t a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return OArchive::appendToListFilesWritten(a2, (uint64_t)this);
}

void sub_19C8F40E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t OArchive::appendToListFilesWritten(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v5 = *(_QWORD **)(a1 + 24);
  v6 = (_QWORD *)(a1 + 32);
  if (v5 != v6)
  {
    do
    {
      result = OArchive::appendToListFilesWritten(v5 + 7, a2);
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v6);
  }
  return result;
}

uint64_t OArchive::flush(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v1 = this;
  v2 = *(_QWORD *)(*(_QWORD *)(this + 8) + 56);
  if (v2)
  {
    this = *(_QWORD *)(v2 + 624);
    if (this)
      this = std::ostream::flush();
  }
  v3 = *(_QWORD **)(v1 + 24);
  v4 = (_QWORD *)(v1 + 32);
  if (v3 != v4)
  {
    do
    {
      this = OArchive::flush((OArchive *)(v3 + 7));
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v4);
  }
  return this;
}

uint64_t operator<<(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  std::ios_base::failure *exception;
  std::error_code __ec;
  char v14;

  if (*((char *)a2 + 23) >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = a2[1];
  operator<<(a1, v4);
  v5 = *((char *)a2 + 23) < 0;
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  if (v6)
  {
    v7 = 0;
    do
    {
      if (v5)
        v8 = (uint64_t *)*a2;
      else
        v8 = a2;
      v14 = *((_BYTE *)v8 + v7);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      std::ostream::write();
      if (!*(_BYTE *)a1)
      {
        v9 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
        if ((*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 5) != 0)
        {
          exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
          *(_QWORD *)&__ec.__val_ = 1;
          __ec.__cat_ = std::iostream_category();
          std::ios_base::failure::failure(exception, "Error writing to archive.", &__ec);
          __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
        }
      }
      ++v7;
      v5 = *((char *)a2 + 23) < 0;
      v10 = *((unsigned __int8 *)a2 + 23);
      if ((v10 & 0x80u) != 0)
        v10 = a2[1];
    }
    while (v7 < v10);
  }
  return a1;
}

void sub_19C8F4344(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t operator<<(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  std::ios_base::failure *exception;
  std::error_code __ec;
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  std::ostream::write();
  if (!*(_BYTE *)a1)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
    {
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      *(_QWORD *)&__ec.__val_ = 1;
      __ec.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, "Error writing to archive.", &__ec);
      __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
    }
  }
  return a1;
}

{
  _QWORD *v3;
  std::ios_base::failure *exception;
  std::error_code __ec;
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  std::ostream::write();
  if (!*(_BYTE *)a1)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
    {
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      *(_QWORD *)&__ec.__val_ = 1;
      __ec.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, "Error writing to archive.", &__ec);
      __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
    }
  }
  return a1;
}

void sub_19C8F4418(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C8F44D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t operator<<(uint64_t a1, int a2)
{
  _QWORD *v3;
  std::ios_base::failure *exception;
  std::error_code __ec;
  int v7;

  v7 = a2;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  std::ostream::write();
  if (!*(_BYTE *)a1)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
    {
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      *(_QWORD *)&__ec.__val_ = 1;
      __ec.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, "Error writing to archive.", &__ec);
      __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
    }
  }
  return a1;
}

{
  _QWORD *v3;
  std::ios_base::failure *exception;
  std::error_code __ec;
  int v7;

  v7 = a2;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  std::ostream::write();
  if (!*(_BYTE *)a1)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
    {
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      *(_QWORD *)&__ec.__val_ = 1;
      __ec.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, "Error writing to archive.", &__ec);
      __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
    }
  }
  return a1;
}

void sub_19C8F45AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C8F4680(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C8F4754(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C8F4814(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t operator<<(uint64_t a1, float a2)
{
  _QWORD *v3;
  std::ios_base::failure *exception;
  std::error_code __ec;
  float v7;

  v7 = a2;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  std::ostream::write();
  if (!*(_BYTE *)a1)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
    {
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      *(_QWORD *)&__ec.__val_ = 1;
      __ec.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, "Error writing to archive.", &__ec);
      __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
    }
  }
  return a1;
}

void sub_19C8F48E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C8F4988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8F4A78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8F4BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_19C8F4D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21385(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21386(uint64_t a1)
{

}

void sub_19C8F5964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_19C8F5D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C8F5DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLAppleWordTagger;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19C8F642C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  void (**v17)(_QWORD);
  void *v18;
  va_list va;

  va_start(va, a15);

  v17[2](v17);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19C8F6C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  CoreML::Specification::CoreMLModels::WordTagger::~WordTagger((CoreML::Specification::CoreMLModels::WordTagger *)&a17);
  _Unwind_Resume(a1);
}

void sub_19C8F8438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;

  MEMORY[0x1A1AD6260](v45, 0x10A1C40EE95837BLL);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a43);

  _Unwind_Resume(a1);
}

void sub_19C8F9FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  a12 = &a9;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a12 = (uint64_t *)&a15;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19C8FA234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8FA6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char *__p,char *a26)
{
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v31;

  __cxa_free_exception(v28);
  if (__p)
  {
    a26 = __p;
    operator delete(__p);
  }
  v31 = *(void **)(v29 - 136);
  if (v31)
  {
    *(_QWORD *)(v29 - 128) = v31;
    operator delete(v31);
  }
  __p = &a10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a13)
    operator delete(a13);
  if (a16)
  {
    a17 = (uint64_t)a16;
    operator delete(a16);
  }
  __p = &a19;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

uint64_t ModelKeyServerAPISignedKeyReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19C8FADE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CoreML::TreeEnsembles::buildTreeEnsembleModelFromSpec(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  CoreML::TreeEnsembles::Internal::buildTreeEnsembleModelFromSpec(a1, (CoreML::Archiver::PackedIntegerVector *)v9, a4);
  if (a3)
  {
    v7 = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_19C8FAE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C8FAEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)MLE5ExecutionStreamOperation;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19C8FB16C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8FB2A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8FB6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C8FB964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8FBB5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8FBEEC(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD);

  v1[2](v1);

  _Unwind_Resume(a1);
}

void sub_19C8FC104(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8FC184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8FC1D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8FC594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8FC894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C8FCBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C8FCEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C8FD470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_19C8FD7E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C8FDD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;

  if (v20)
    operator delete(v20);

  _Unwind_Resume(a1);
}

void sub_19C8FE128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  uint64_t v25;

  *(_QWORD *)(v25 - 128) = &a24;
  std::vector<std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 128));

  _Unwind_Resume(a1);
}

void sub_19C8FE1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C8FE6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19C8FE998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_19C8FEBF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C8FEF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a3);

  std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_19C8FF160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_19C8FF2E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C8FF578(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v3 = v2;

  MEMORY[0x1A1AD6248](v1, 0x50C80EE9192B6);
  _Unwind_Resume(a1);
}

void sub_19C8FF7E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
    return (uint64_t *)e5rt_async_event_release();
  return result;
}

id getIOSurfaceSharedEventFromMTLSharedEvent(void *a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_msgSend(a1, "newSharedEventHandle");
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBBEB8]), "initWithMachPort:", objc_msgSend(v1, "eventPort"));

  return v2;
}

void sub_19C8FFA1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C8FFBBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::dependentEventsBoundTo(_anonymous_namespace_ *this, e5rt_execution_stream_operation *a2)
{
  uint64_t dependent_event_count;
  _QWORD *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t last_error_message;
  int buf;
  uint64_t buf_4;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  dependent_event_count = e5rt_execution_stream_operation_get_dependent_event_count();
  v4 = (_QWORD *)MEMORY[0x1E0C99750];
  if ((_DWORD)dependent_event_count)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      buf = 136315394;
      buf_4 = e5rt_get_last_error_message();
      v12 = 1024;
      v13 = dependent_event_count;
      _os_log_error_impl(&dword_19C486000, v5, OS_LOG_TYPE_ERROR, "Failed to get the number of dependent events. E5RT: %s (%d)", (uint8_t *)&buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v4, CFSTR("Failed to get the number of dependent events. E5RT: %s (%d)"), e5rt_get_last_error_message(), dependent_event_count);
  }
  v6 = malloc_type_calloc(0, 8uLL, 0x2004093837F09uLL);
  v7 = e5rt_execution_stream_operation_retain_dependent_events();
  if ((_DWORD)v7)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      last_error_message = e5rt_get_last_error_message();
      buf = 136315394;
      buf_4 = last_error_message;
      v12 = 1024;
      v13 = v7;
      _os_log_error_impl(&dword_19C486000, v8, OS_LOG_TYPE_ERROR, "Failed to retain dependent event bound to the E5 operation. E5RT: %s (%d)", (uint8_t *)&buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v4, CFSTR("Failed to retain dependent event bound to the E5 operation. E5RT: %s (%d)"), e5rt_get_last_error_message(), v7);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  free(v6);
}

void sub_19C8FFF3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>::reset[abi:ne180100]((uint64_t *)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C9000CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C9001A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C90024C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19C900324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C900610(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C900814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a8);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

void sub_19C900BA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C900CA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C900D4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C900DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_19C900E54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C900EA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C900F08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void Archiver::MMappedInputENMLFile::~MMappedInputENMLFile(Archiver::MMappedInputENMLFile *this)
{
  Archiver::MMappedFile::~MMappedFile(this);
  JUMPOUT(0x1A1AD6260);
}

uint64_t Archiver::MMappedInputENMLFile::data(Archiver::MMappedInputENMLFile *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t Archiver::MMappedInputENMLFile::size(Archiver::MMappedInputENMLFile *this)
{
  return *((_QWORD *)this + 7);
}

void sub_19C901048(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C90141C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_19C901CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void (**v17)(_QWORD);
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v17[2](v17);
  _Unwind_Resume(a1);
}

void sub_19C9027FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;

  _Unwind_Resume(a1);
}

void sub_19C902AAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_19C902BDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

uint64_t **google::protobuf::Map<long long,double>::InnerMap::iterator_base<google::protobuf::Map<long long,double>::KeyValuePair const>::operator++(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *a1;
  v3 = (uint64_t *)(*a1)[2];
  if (v3)
    goto LABEL_2;
  v16 = 0;
  v4 = a1[1];
  v5 = (unint64_t)a1[2] & (v4[1] - 1);
  a1[2] = (uint64_t *)v5;
  v6 = v4[4];
  v7 = *(uint64_t **)(v6 + 8 * v5);
  if (v7 == v2)
    goto LABEL_11;
  if (v7 && v7 != *(uint64_t **)(v6 + 8 * (v5 ^ 1)))
  {
    while (1)
    {
      v7 = (uint64_t *)v7[2];
      if (!v7)
        break;
      if (v7 == v2)
        goto LABEL_11;
    }
  }
  google::protobuf::Map<long long,double>::InnerMap::FindHelper(&v17, v4, v2, &v16);
  v5 = v18;
  a1[2] = (uint64_t *)v18;
  v8 = a1[1][4];
  v9 = *(_QWORD *)(v8 + 8 * v5);
  if (!v9 || v9 != *(_QWORD *)(v8 + 8 * (v5 ^ 1)))
  {
LABEL_11:
    v10 = v5 + 1;
LABEL_12:
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::SearchFrom(a1, v10);
    return a1;
  }
  v12 = v16;
  v13 = (_QWORD *)v16[1];
  if (v13)
  {
    do
    {
      v14 = v13;
      v13 = (_QWORD *)*v13;
    }
    while (v13);
  }
  else
  {
    do
    {
      v14 = (_QWORD *)v12[2];
      v15 = *v14 == (_QWORD)v12;
      v12 = v14;
    }
    while (!v15);
  }
  v16 = v14;
  if (v14 == (_QWORD *)(v9 + 8))
  {
    v10 = v5 + 2;
    goto LABEL_12;
  }
  v3 = (uint64_t *)v14[4];
LABEL_2:
  *a1 = v3;
  return a1;
}

_QWORD *google::protobuf::Map<long long,double>::InnerMap::FindHelper(_QWORD *result, _QWORD *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v10;

  v4 = result;
  v5 = (a2[1] - 1) & (a2[2] + *a3);
  v6 = a2[4];
  v7 = *(_QWORD **)(v6 + 8 * v5);
  if (v7)
  {
    if (v7 != *(_QWORD **)(v6 + 8 * (v5 ^ 1)))
    {
      while (*v7 != *a3)
      {
        v7 = (_QWORD *)v7[2];
        if (!v7)
          goto LABEL_10;
      }
      *result = v7;
      goto LABEL_12;
    }
    v5 &= ~1uLL;
    v10 = *(_QWORD *)(v6 + 8 * v5);
    result = (_QWORD *)std::__tree<long long *,google::protobuf::Map<long long,double>::InnerMap::KeyCompare,google::protobuf::Map<long long,double>::MapAllocator<long long *>>::find<long long *>(v10, a3);
    if ((_QWORD *)(v10 + 8) != result)
    {
      if (a4)
        *a4 = result;
      *v4 = result[4];
LABEL_12:
      v4[1] = a2;
      v4[2] = v5;
      goto LABEL_13;
    }
  }
LABEL_10:
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
LABEL_13:
  v4[3] = v5;
  return result;
}

uint64_t std::__tree<long long *,google::protobuf::Map<long long,double>::InnerMap::KeyCompare,google::protobuf::Map<long long,double>::MapAllocator<long long *>>::find<long long *>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = v2;
  do
  {
    v7 = **(_QWORD **)(v3 + 32);
    v8 = v7 < v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v3;
    else
      v9 = (uint64_t *)(v3 + 8);
    if (!v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < **(_QWORD **)(v6 + 32))
    return v2;
  return v6;
}

void sub_19C902EDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C90304C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C9030B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::~NeuralNetworkEspressoNetBackend(void **this)
{
  CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::~NeuralNetworkEspressoNetBackend(this);
  JUMPOUT(0x1A1AD6260);
}

{
  void *v2;

  *this = &off_1E3D4C978;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  v2 = this[3];
  this[3] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

void CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::Compile(CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend *this, OArchive *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  int v13;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *inited;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  BOOL v35;
  char *v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  char *v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  char *v59;
  int v60;
  const __CFString *v61;
  NSObject *v62;
  const __CFString *v63;
  NSObject *v64;
  NSError *v65;
  NSObject *v66;
  _QWORD **v67;
  _QWORD *v68;
  _QWORD **v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  char *v82;
  __int128 v83;
  char v84;
  __int128 *p_sb;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  char v89;
  NSError *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  CC_SHA256_CTX *v94;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::string *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  unint64_t v104;
  uint64_t v105;
  __n128 *v106;
  __n128 *v107;
  const char *v108;
  size_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  CC_SHA256_CTX *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  _OWORD *v117;
  int v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  Espresso::net *v122;
  _OWORD *v123;
  int v124;
  void **v125;
  void **v126;
  void **v127;
  unint64_t *v128;
  unint64_t v129;
  _QWORD *v130;
  std::__shared_weak_count *v131;
  unint64_t *p_size;
  unint64_t v133;
  uint8_t *v134;
  char v135;
  int32x4_t v136;
  int32x4_t v137;
  char v138;
  uint8_t *v139;
  uint8_t *v140;
  char *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  BOOL v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  NSObject *v150;
  __int128 v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  Espresso::net *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v173;
  int v174;
  int v175;
  int v176;
  uint64_t v177;
  char *v178;
  _QWORD *v179;
  _QWORD *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  _OWORD *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  NSObject *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  __int128 v199;
  std::__shared_weak_count *size;
  unint64_t *v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  std::string::size_type v205;
  uint64_t v206;
  _QWORD *v207;
  std::vector<std::string>::size_type v208;
  _QWORD *v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t **v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t **v216;
  uint64_t **v217;
  _QWORD *v218;
  _QWORD *v219;
  BOOL v220;
  uint64_t **v221;
  char *v222;
  char *v223;
  _QWORD *v224;
  __int128 v225;
  uint64_t *v226;
  uint64_t **v227;
  uint64_t **v228;
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  std::string *end;
  __int128 *v233;
  __int128 v234;
  _QWORD *v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  NSError *v261;
  CoreML::MLModelException *v262;
  void (*v263)(void *);
  struct type_info *v264;
  NSError *v265;
  CoreML::MLModelException *exception;
  void (*v267)(void *);
  struct type_info *v268;
  CoreML::MLModelException *v269;
  void (*v270)(void *);
  struct type_info *v271;
  uint64_t v272;
  uint64_t v274;
  Espresso::net *v275;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  std::vector<std::string> v280;
  __int128 v281;
  void *__p[2];
  _OWORD v283[2];
  __int128 v284;
  _OWORD v285[2];
  __int128 v286;
  _BYTE v287[64];
  Espresso::net *v288[2];
  char v289;
  char v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  uint64_t v293;
  std::__shared_weak_count *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  _QWORD **v297;
  _QWORD *v298[2];
  uint64_t *v299;
  _QWORD *v300[2];
  NSError *v301;
  void *v302;
  Espresso::net *v303;
  uint64_t v304;
  void *v305;
  void *v306;
  std::string v307;
  uint64_t v308;
  std::__shared_weak_count *v309;
  void **v310;
  __int128 __sb;
  _BYTE v312[32];
  __int128 v313;
  _BYTE c[32];
  std::string v315;
  std::string v316;
  std::string v317;
  uint8_t buf[48];
  _BYTE v319[72];
  std::string v320;
  std::string v321;
  char v322;
  uint8_t v323[8];
  _QWORD v324[8];
  char v325;
  uint64_t *v326;
  std::__shared_weak_count *v327;
  std::__shared_weak_count *v328;
  std::__shared_weak_count *v329;
  uint64_t v330;
  __n128 *v331;
  std::string *v332;
  unint64_t v333;
  void *v334;
  void *v335;
  uint64_t v336;

  v336 = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 71) < 0)
  {
    **((_BYTE **)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
  }
  else
  {
    *((_BYTE *)this + 48) = 0;
    *((_BYTE *)this + 71) = 0;
  }
  v300[1] = 0;
  v301 = 0;
  v299 = (uint64_t *)v300;
  v300[0] = 0;
  v2 = std::map<std::string,std::string>::at(*((_QWORD *)this + 4) + 80, (_QWORD *)(*((_QWORD *)this + 4) + 32));
  v3 = v2;
  if (!*(_BYTE *)(v2 + 312))
  {
    v38 = *((_QWORD *)this + 1);
    v324[1] = 0;
    v324[0] = 0;
    *(_QWORD *)v323 = v324;
    v39 = (_QWORD *)operator new();
    if (*(_QWORD *)(v38 + 16))
      v40 = *(uint64_t **)(v38 + 16);
    else
      v40 = &CoreML::Specification::_ModelDescription_default_instance_;
    v278 = (uint64_t)v39;
    CoreML::NeuralNetworkShaper::NeuralNetworkShaper(v39, (uint64_t)v40, *(_QWORD *)(v38 + 32) + 16);
    v41 = *(uint64_t **)(v38 + 16);
    if (!v41)
      v41 = &CoreML::Specification::_ModelDescription_default_instance_;
    v42 = v41[4];
    if (v42)
      v43 = v42 + 8;
    else
      v43 = 0;
    v44 = *((int *)v41 + 6);
    if ((_DWORD)v44)
    {
      v45 = 8 * v44;
      while (1)
      {
        v46 = *(_QWORD *)v43;
        v47 = *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(v278 + 32, buf, *(_QWORD **)(*(_QWORD *)v43 + 16));
        if (!v47)
          std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
        v48 = CoreML::RangeValue::value((CoreML::RangeValue *)(v47 + 56));
        v49 = v48;
        if (v48 >= 9001)
          break;
        if (v48 < 0)
        {
          +[MLLogging coreChannel](MLLogging, "coreChannel");
          v62 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_19C486000, v62, OS_LOG_TYPE_ERROR, "Error in neural network compiler computing minimum sequence length.", buf, 2u);
          }
          v63 = CFSTR("Error in neural network compiler computing minimum sequence length for the model.");
          goto LABEL_109;
        }
        *(_QWORD *)buf = *(_QWORD *)(v46 + 16);
        v50 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v323, *(_QWORD **)buf, (__int128 **)buf);
        if (v49 <= 1)
          v51 = 1;
        else
          v51 = v49;
        *((_DWORD *)v50 + 14) = v51;
        v52 = CoreML::RangeValue::value((CoreML::RangeValue *)(v47 + 88));
        if (v52 <= 1)
          v53 = 1;
        else
          v53 = v52;
        v54 = CoreML::RangeValue::value((CoreML::RangeValue *)(v47 + 120));
        if (v54 <= 1)
          v55 = 1;
        else
          v55 = v54;
        v56 = CoreML::RangeValue::value((CoreML::RangeValue *)(v47 + 152));
        if (v56 <= 1)
          v57 = 1;
        else
          v57 = v56;
        v58 = CoreML::RangeValue::value((CoreML::RangeValue *)(v47 + 184));
        *(_QWORD *)buf = *(_QWORD *)(v46 + 16);
        v59 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v299, *(_QWORD **)buf, (__int128 **)buf);
        if (v58 <= 1)
          v60 = 1;
        else
          v60 = v58;
        *((_DWORD *)v59 + 14) = v60;
        *((_DWORD *)v59 + 15) = v57;
        *((_DWORD *)v59 + 16) = v55;
        *((_DWORD *)v59 + 17) = v53;
        *((_DWORD *)v59 + 18) = v51;
        *((_DWORD *)v59 + 19) = -1;
        *((_QWORD *)v59 + 10) = 0;
        *((_QWORD *)v59 + 11) = 0;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v59 + 96, 0, 0, 0);
        v43 += 8;
        v45 -= 8;
        if (!v45)
          goto LABEL_110;
      }
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v62 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        *(_QWORD *)buf = 0x232804000100;
        _os_log_error_impl(&dword_19C486000, v62, OS_LOG_TYPE_ERROR, "Model requires sequence length greater than %d", buf, 8u);
      }
      v63 = CFSTR("Model requires a sequence longer than the maximum.");
LABEL_109:

      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", v63);
      v301 = (NSError *)objc_claimAutoreleasedReturnValue();
    }
LABEL_110:
    std::default_delete<CoreML::NeuralNetworkShaper>::operator()[abi:ne180100](v278);
  }
  v4 = *(uint64_t **)(*((_QWORD *)this + 1) + 16);
  if (!v4)
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  v5 = v4[4];
  if (v5)
    v6 = v5 + 8;
  else
    v6 = 0;
  v7 = *((int *)v4 + 6);
  if (!(_DWORD)v7)
  {
    v37 = 0;
    goto LABEL_111;
  }
  v272 = v2;
  v8 = v6 + 8 * v7;
  v9 = *((_QWORD *)this + 4);
  v277 = (_QWORD *)(v9 + 32);
  v274 = v9 + 80;
  while (1)
  {
    v10 = *(_QWORD *)v6;
    v11 = *(_QWORD **)(*(_QWORD *)v6 + 16);
    v12 = *(uint64_t **)(*(_QWORD *)v6 + 32);
    if (!v12)
      v12 = &CoreML::Specification::_FeatureType_default_instance_;
    v13 = *((_DWORD *)v12 + 9);
    if (v13 == 5)
      break;
    if (v13 != 4)
    {
      v61 = CFSTR("Neural networks only accept image and array inputs.");
      v3 = v272;
LABEL_104:
      +[MLModelErrorUtils errorWithCode:format:](MLModelErrorUtils, "errorWithCode:format:", 1, v61);
      v65 = (NSError *)objc_claimAutoreleasedReturnValue();
      goto LABEL_105;
    }
    inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)std::map<std::string,std::string>::at(v274, v277);
    if (*((_BYTE *)inited + 317))
      LODWORD(v15) = 5;
    else
      LODWORD(v15) = 4;
    v16 = *(uint64_t **)(v10 + 32);
    if (v16)
      v17 = *(uint64_t **)(v10 + 32);
    else
      v17 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v17 + 9) == 4)
    {
      v18 = (uint64_t *)v17[3];
    }
    else
    {
      inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
      v16 = *(uint64_t **)(v10 + 32);
      v18 = &CoreML::Specification::_ImageFeatureType_default_instance_;
    }
    v30 = *((_DWORD *)v18 + 8);
    _ZF = v30 == 10 || v30 == 40;
    if (_ZF)
      v27 = 1;
    else
      v27 = 3;
    if (v16)
      v32 = v16;
    else
      v32 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v32 + 9) == 4)
    {
      v33 = (uint64_t *)v32[3];
    }
    else
    {
      inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
      v16 = *(uint64_t **)(v10 + 32);
      v33 = &CoreML::Specification::_ImageFeatureType_default_instance_;
    }
    v25 = *((_DWORD *)v33 + 4);
    if (!v16)
      v16 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v16 + 9) == 4)
    {
      v34 = (uint64_t *)v16[3];
    }
    else
    {
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
      v34 = &CoreML::Specification::_ImageFeatureType_default_instance_;
    }
    v26 = *((_DWORD *)v34 + 6);
    if (v25)
      v35 = v26 == 0;
    else
      v35 = 1;
    if (v35)
    {
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v3 = v272;
      v66 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v323 = 0;
        _os_log_error_impl(&dword_19C486000, v66, OS_LOG_TYPE_ERROR, "Invalid height and width for the image input.", v323, 2u);
      }

      v61 = CFSTR("Invalid height and width for the image input.");
      goto LABEL_104;
    }
    v29 = 1;
    v28 = 1;
LABEL_61:
    *(_QWORD *)v323 = v11;
    v36 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v299, v11, (__int128 **)v323);
    *((_DWORD *)v36 + 14) = v25;
    *((_DWORD *)v36 + 15) = v26;
    *((_DWORD *)v36 + 16) = v27;
    *((_DWORD *)v36 + 17) = v28;
    *((_DWORD *)v36 + 18) = v29;
    *((_DWORD *)v36 + 19) = v15;
    *((_QWORD *)v36 + 10) = 0;
    *((_QWORD *)v36 + 11) = 0;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v36 + 96, 0, 0, 0);
    v6 += 8;
    if (v6 == v8)
    {
      v37 = 0;
      v3 = v272;
      goto LABEL_111;
    }
  }
  v19 = v12[3];
  v15 = *(unsigned int *)(v19 + 16);
  if ((int)v15 > 0)
  {
    v20 = 0;
    v21 = (v15 - 1);
    v22 = (v15 - 2);
    v23 = (v15 - 3);
    v24 = (v15 - 4);
    v25 = 1;
    v26 = 1;
    v27 = 1;
    v28 = 1;
    v29 = 1;
    do
    {
      if (!v20)
        v25 = *(_DWORD *)(*(_QWORD *)(v19 + 24) + 8 * v21 + 8);
      if (!(v21 - v22 + v20))
        v26 = *(_DWORD *)(*(_QWORD *)(v19 + 24) + 8 * v22 + 8);
      if (!(v21 - v23 + v20))
        v27 = *(_DWORD *)(*(_QWORD *)(v19 + 24) + 8 * v23 + 8);
      if (!(v21 - v24 + v20))
        v28 = *(_DWORD *)(*(_QWORD *)(v19 + 24) + 8 * v24 + 8);
      if (v21 + v20 <= (int)v15 - 5)
        v29 *= *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8 * (v15 - 1) + 8 + 8 * v20);
      --v20;
    }
    while (v21 + v20 + 1 > 0);
    goto LABEL_61;
  }
  +[MLLogging coreChannel](MLLogging, "coreChannel");
  v3 = v272;
  v64 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v323 = 67109120;
    *(_DWORD *)&v323[4] = v15;
    _os_log_error_impl(&dword_19C486000, v64, OS_LOG_TYPE_ERROR, "Input MLMultiArray cannot be %d dimensional (must have at least 1 dimension).", v323, 8u);
  }

  +[MLModelErrorUtils errorWithCode:format:](MLModelErrorUtils, "errorWithCode:format:", 1, CFSTR("Input MLMultiArray cannot be %d dimensional (must have at least 1 dimension)."), v15);
  v65 = (NSError *)objc_claimAutoreleasedReturnValue();
LABEL_105:
  v37 = 0;
  v301 = v65;
LABEL_111:
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v297, &v299);
  if (*(_BYTE *)(v3 + 312))
  {
    v67 = v297;
    if (v297 != v298)
    {
      do
      {
        v67[7] = (_QWORD *)-1;
        v67[8] = (_QWORD *)-1;
        *((_DWORD *)v67 + 18) = -1;
        v68 = v67[1];
        if (v68)
        {
          do
          {
            v69 = (_QWORD **)v68;
            v68 = (_QWORD *)*v68;
          }
          while (v68);
        }
        else
        {
          do
          {
            v69 = (_QWORD **)v67[2];
            _ZF = *v69 == v67;
            v67 = v69;
          }
          while (!_ZF);
        }
        v67 = v69;
      }
      while (v69 != v298);
    }
  }
  *(_DWORD *)v323 = 80000;
  Espresso::create_context((Espresso::abstract_engine_factory *)&v295, (int *)v323);
  v293 = v295;
  v294 = v296;
  if (v296)
  {
    p_shared_owners = (unint64_t *)&v296->__shared_owners_;
    do
      v71 = __ldxr(p_shared_owners);
    while (__stxr(v71 + 1, p_shared_owners));
  }
  v291 = 0;
  v292 = 0;
  MEMORY[0x1A1AD5834](v323, &v293, 0, &v291);
  v72 = v292;
  if (v292)
  {
    v73 = (unint64_t *)&v292->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v294;
  if (v294)
  {
    v76 = (unint64_t *)&v294->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v290 = 0;
  v78 = *((_QWORD *)this + 1);
  v79 = *((_QWORD *)this + 4);
  v80 = operator new(0x30uLL);
  *v80 = &off_1E3D5B6D0;
  v80[1] = v79;
  v81 = v80 + 1;
  v80[2] = &v290;
  v80[3] = v78;
  v80[4] = v323;
  v80[5] = &v297;
  *(_QWORD *)&buf[24] = v80;
  v82 = (char *)operator new(0x30uLL);
  *(_QWORD *)v82 = &off_1E3D5B6D0;
  v83 = *((_OWORD *)v81 + 1);
  *(_OWORD *)(v82 + 8) = *(_OWORD *)v81;
  *(_OWORD *)(v82 + 24) = v83;
  *((_QWORD *)v82 + 5) = v81[4];
  *(_QWORD *)&v312[8] = v82;
  std::string::basic_string[abi:ne180100]<0>(__p, "Error in compiling custom layer model.");
  if (!*(_QWORD *)&v312[8])
    std::__throw_bad_function_call[abi:ne180100]();
  v84 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v312[8] + 48))(*(_QWORD *)&v312[8]);
  if (SBYTE7(v283[0]) < 0)
    operator delete(__p[0]);
  p_sb = *(__int128 **)&v312[8];
  if (*(__int128 **)&v312[8] == &__sb)
  {
    v86 = 4;
    p_sb = &__sb;
LABEL_139:
    (*(void (**)(void))(*(_QWORD *)p_sb + 8 * v86))();
  }
  else if (*(_QWORD *)&v312[8])
  {
    v86 = 5;
    goto LABEL_139;
  }
  v87 = *(uint8_t **)&buf[24];
  if (*(uint8_t **)&buf[24] == buf)
  {
    v88 = 4;
    v87 = buf;
LABEL_144:
    (*(void (**)(void))(*(_QWORD *)v87 + 8 * v88))();
  }
  else if (*(_QWORD *)&buf[24])
  {
    v88 = 5;
    goto LABEL_144;
  }
  if ((v84 & 1) == 0)
  {
    v265 = v301;
    if (v301)
    {
      exception = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
      CoreML::MLModelException::MLModelException(exception, v265);
      v267 = (void (*)(void *))CoreML::MLModelException::~MLModelException;
    }
    else
    {
      exception = (CoreML::MLModelException *)__cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](exception, "Could not convert neural network model layers.");
      v267 = (void (*)(void *))MEMORY[0x1E0DE4338];
      v268 = (struct type_info *)MEMORY[0x1E0DE4E80];
    }
    __cxa_throw(exception, v268, v267);
  }
  if (*(_BYTE *)(v3 + 312))
  {
    if (*(_BYTE *)(v3 + 314))
      v89 = 1;
    else
      v89 = *(_BYTE *)(v3 + 316) != 0;
  }
  else
  {
    v89 = 0;
  }
  v289 = 0;
  BuildFromShapes((uint64_t)v288, (uint64_t)v323, (uint64_t)&v299, v89, (uint64_t)&v301, &v289);
  if (!v288[0])
  {
    v90 = v301;
    if (*(_BYTE *)(v3 + 312) || !v289)
    {
      if (v301)
      {
        v269 = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
        CoreML::MLModelException::MLModelException(v269, v90);
        v270 = (void (*)(void *))CoreML::MLModelException::~MLModelException;
      }
      else
      {
        v269 = (CoreML::MLModelException *)__cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v269, "Could not build inference network.");
        v270 = (void (*)(void *))MEMORY[0x1E0DE4338];
        v271 = (struct type_info *)MEMORY[0x1E0DE4E80];
      }
      __cxa_throw(v269, v271, v270);
    }
    v301 = 0;

    v37 = 1;
  }
  v91 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v91 + 44) == 500)
  {
    std::streambuf::basic_streambuf();
    *(_QWORD *)&__sb = &off_1E3D59568;
    v92 = operator new();
    *(_QWORD *)c = v92;
    v93 = (_QWORD *)operator new();
    *v93 = &off_1E3D5C608;
    v93[1] = 0;
    v93[2] = 0;
    v93[3] = v92;
    *(_QWORD *)&c[8] = v93;
    v94 = *(CC_SHA256_CTX **)c;
    *(_BYTE *)(*(_QWORD *)c + 136) = 0;
    CC_SHA256_Init(v94);
    *(_QWORD *)buf = MEMORY[0x1E0DE4FA0] + 24;
    *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FA0] + 64;
    std::ios_base::init((std::ios_base *)&buf[8], &__sb);
    v321.__r_.__value_.__r.__words[0] = 0;
    LODWORD(v321.__r_.__value_.__r.__words[1]) = -1;
    __p[0] = &off_1E3D59908;
    __p[1] = &off_1E3D598E0;
    *(_QWORD *)&v283[0] = buf;
    *((_QWORD *)&v283[0] + 1) = &off_1E3D59990;
    *(_QWORD *)&v283[1] = &__p[1];
    WORD4(v283[1]) = 0;
    v284 = 0uLL;
    *(_QWORD *)&v285[0] = 0x2000;
    v331 = 0;
    v332 = 0;
    v333 = 0;
    if (*(_DWORD *)(v91 + 44) == 500)
    {
      v96 = *(uint64_t **)(v91 + 32);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v95);
      v96 = &CoreML::Specification::_NeuralNetwork_default_instance_;
    }
    v97 = v96[4];
    if (v97)
      v98 = v97 + 8;
    else
      v98 = 0;
    v99 = *((int *)v96 + 6);
    if ((_DWORD)v99)
    {
      v100 = v332;
      v101 = 8 * v99;
      do
      {
        v102 = *(_QWORD *)(*(_QWORD *)v98 + 112);
        if ((unint64_t)v100 >= v333)
        {
          v100 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v331, (__int128 *)v102);
        }
        else
        {
          if (*(char *)(v102 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v100, *(const std::string::value_type **)v102, *(_QWORD *)(v102 + 8));
          }
          else
          {
            v103 = *(_OWORD *)v102;
            v100->__r_.__value_.__r.__words[2] = *(_QWORD *)(v102 + 16);
            *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v103;
          }
          ++v100;
        }
        v332 = v100;
        v98 += 8;
        v101 -= 8;
      }
      while (v101);
    }
    else
    {
      v100 = v332;
    }
    v104 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v100 - (char *)v331) >> 3));
    if (v100 == (std::string *)v331)
      v105 = 0;
    else
      v105 = v104;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v331, (__n128 *)v100, v105, 1);
    v106 = v331;
    v107 = (__n128 *)v332;
    while (v106 != v107)
    {
      v108 = (const char *)v106;
      if (v106[1].n128_i8[7] < 0)
        v108 = (const char *)v106->n128_u64[0];
      v109 = strlen(v108);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v108, v109);
      v106 = (__n128 *)((char *)v106 + 24);
    }
    std::ostream::flush();
    v110 = *(_QWORD *)c;
    if (!*(_BYTE *)(*(_QWORD *)c + 136))
    {
      v111 = *(std::__shared_weak_count **)&c[8];
      *(_OWORD *)&v307.__r_.__value_.__l.__data_ = *(_OWORD *)c;
      v112 = *(CC_SHA256_CTX **)c;
      if (*(_QWORD *)&c[8])
      {
        v113 = (unint64_t *)(*(_QWORD *)&c[8] + 8);
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
        v112 = *(CC_SHA256_CTX **)c;
      }
      CC_SHA256_Final((unsigned __int8 *)(v110 + 104), v112);
      if (v111)
      {
        v115 = (unint64_t *)&v111->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      v110 = *(_QWORD *)c;
      *(_BYTE *)(*(_QWORD *)c + 136) = 1;
    }
    v302 = 0;
    v303 = 0;
    v304 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v302, (const void *)(v110 + 104), v110 + 136, 0x20uLL);
    v117 = operator new(0x20uLL);
    *v117 = xmmword_19CB2EEF0;
    v117[1] = unk_19CB2EF00;
    v118 = memcmp(v302, v117, v303 - (Espresso::net *)v302);
    operator delete(v117);
    if (v302)
    {
      v303 = (Espresso::net *)v302;
      operator delete(v302);
    }
    v302 = &v331;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v302);
    google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)__p);
    std::ostream::~ostream();
    *(_QWORD *)&__sb = &off_1E3D59568;
    v119 = *(std::__shared_weak_count **)&c[8];
    if (*(_QWORD *)&c[8])
    {
      v120 = (unint64_t *)(*(_QWORD *)&c[8] + 8);
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    std::streambuf::~streambuf();
    if (!v118)
    {
      v122 = v288[0];
      std::string::basic_string[abi:ne180100]<0>(buf, "allowSoftmaxApproximation");
      *(_QWORD *)&__sb = buf;
      v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v122 + 59, buf, (_OWORD **)&__sb);
      MEMORY[0x1A1AD5EAC]((char *)v123 + 56, "1");
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
    }
  }
  if (!*(_BYTE *)(v3 + 312))
  {
    if ((v37 & 1) != 0)
    {
LABEL_204:
      std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)__p, &v299);
      v124 = 1;
      while (1)
      {
        v125 = (void **)__p[0];
        if (__p[0] != &__p[1])
        {
          do
          {
            *((_DWORD *)v125 + 18) = v124;
            v126 = (void **)v125[1];
            if (v126)
            {
              do
              {
                v127 = v126;
                v126 = (void **)*v126;
              }
              while (v126);
            }
            else
            {
              do
              {
                v127 = (void **)v125[2];
                _ZF = *v127 == v125;
                v125 = v127;
              }
              while (!_ZF);
            }
            v125 = v127;
          }
          while (v127 != &__p[1]);
        }
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[16] = 0;
        *(_QWORD *)&buf[32] = 0;
        *(_QWORD *)&buf[40] = 0;
        *(_QWORD *)buf = &buf[8];
        *(_QWORD *)&buf[24] = &buf[32];
        v331 = (__n128 *)v326;
        v332 = (std::string *)v327;
        if (v327)
        {
          v128 = (unint64_t *)&v327->__shared_owners_;
          do
            v129 = __ldxr(v128);
          while (__stxr(v129 + 1, v128));
        }
        Espresso::compute_network_shape_starting_from_data_shapes();
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(_QWORD **)&buf[8]);
        *(_OWORD *)buf = __sb;
        *(_QWORD *)&buf[16] = *(_QWORD *)v312;
        if (*(_QWORD *)v312)
        {
          *(_QWORD *)(*((_QWORD *)&__sb + 1) + 16) = &buf[8];
          *(_QWORD *)&__sb = (char *)&__sb + 8;
          *((_QWORD *)&__sb + 1) = 0;
          *(_QWORD *)v312 = 0;
        }
        else
        {
          *(_QWORD *)buf = &buf[8];
        }
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(_QWORD **)&buf[32]);
        v130 = *(_QWORD **)&v312[16];
        *(_QWORD *)&buf[24] = *(_QWORD *)&v312[8];
        *(_QWORD *)&buf[32] = *(_QWORD *)&v312[16];
        *(_QWORD *)&buf[40] = *(_QWORD *)&v312[24];
        if (*(_QWORD *)&v312[24])
        {
          *(_QWORD *)(*(_QWORD *)&v312[16] + 16) = &buf[32];
          v130 = 0;
          *(_QWORD *)&v312[8] = &v312[16];
          *(_QWORD *)&v312[16] = 0;
          *(_QWORD *)&v312[24] = 0;
        }
        else
        {
          *(_QWORD *)&buf[24] = &buf[32];
        }
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v130);
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*((_QWORD **)&__sb + 1));
        v131 = (std::__shared_weak_count *)v332;
        if (v332)
        {
          p_size = &v332->__r_.__value_.__l.__size_;
          do
            v133 = __ldaxr(p_size);
          while (__stlxr(v133 - 1, p_size));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
        v134 = *(uint8_t **)buf;
        if (*(uint8_t **)buf == &buf[8])
          break;
        v135 = 0;
        while (1)
        {
          v137.i64[0] = 0x100000001;
          v137.i64[1] = 0x100000001;
          v136.i64[1] = *((_QWORD *)v134 + 7);
          v136.i64[0] = *(_QWORD *)(v134 + 68);
          v136.i8[0] = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v137, v136)));
          v138 = v136.i8[0] | (*((_DWORD *)v134 + 16) < 1);
          if (v136.i8[0] & 1 | (*((_DWORD *)v134 + 16) < 1))
            break;
          v139 = (uint8_t *)*((_QWORD *)v134 + 1);
          if (v139)
          {
            do
            {
              v140 = v139;
              v139 = *(uint8_t **)v139;
            }
            while (v139);
          }
          else
          {
            do
            {
              v140 = (uint8_t *)*((_QWORD *)v134 + 2);
              _ZF = *(_QWORD *)v140 == (_QWORD)v134;
              v134 = v140;
            }
            while (!_ZF);
          }
          v135 |= v138;
          v134 = v140;
          if (v140 == &buf[8])
          {
            if ((v135 & 1) == 0)
              goto LABEL_276;
            break;
          }
        }
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(_QWORD **)&buf[32]);
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(_QWORD **)&buf[8]);
        if (++v124 == 400)
          goto LABEL_277;
      }
LABEL_276:
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(_QWORD **)&buf[32]);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(_QWORD **)&buf[8]);
LABEL_277:
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v150 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v150, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v124;
        _os_log_impl(&dword_19C486000, v150, OS_LOG_TYPE_INFO, "IOS 11 Legacy code found sequence length %d", buf, 8u);
      }

      BuildFromShapes((uint64_t)buf, (uint64_t)v323, (uint64_t)__p, 0, (uint64_t)&v301, 0);
      v151 = *(_OWORD *)buf;
      *(_OWORD *)buf = 0uLL;
      v152 = (std::__shared_weak_count *)v288[1];
      *(_OWORD *)v288 = v151;
      if (v152)
      {
        v153 = (unint64_t *)&v152->__shared_owners_;
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
        }
        v155 = v288[0];
        v156 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v157 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
          }
        }
        if (v155)
        {
LABEL_290:
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((_QWORD *)__p[1]);
          goto LABEL_291;
        }
      }
      else if ((_QWORD)v151)
      {
        goto LABEL_290;
      }
      v261 = v301;
      if (v301)
      {
        v262 = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
        CoreML::MLModelException::MLModelException(v262, v261);
        v263 = (void (*)(void *))CoreML::MLModelException::~MLModelException;
      }
      else
      {
        v262 = (CoreML::MLModelException *)__cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v262, "Could not build inference network.");
        v263 = (void (*)(void *))MEMORY[0x1E0DE4338];
        v264 = (struct type_info *)MEMORY[0x1E0DE4E80];
      }
      __cxa_throw(v262, v264, v263);
    }
    if (!*(_BYTE *)(v3 + 315))
    {
      v141 = (char *)v288[0] + 152;
      while (1)
      {
        v141 = *(char **)v141;
        if (!v141)
          break;
        if (v141[39] < 0)
          std::string::__init_copy_ctor_external(&v307, *((const std::string::value_type **)v141 + 2), *((_QWORD *)v141 + 3));
        else
          v307 = *(std::string *)(v141 + 16);
        v142 = *((_QWORD *)v141 + 5);
        v143 = (std::__shared_weak_count *)*((_QWORD *)v141 + 6);
        v308 = v142;
        v309 = v143;
        if (v143)
        {
          v144 = (unint64_t *)&v143->__shared_owners_;
          do
            v145 = __ldxr(v144);
          while (__stxr(v145 + 1, v144));
          v142 = v308;
        }
        Espresso::abstract_blob_container::shape((char *)buf, v142);
        if ((*(_DWORD *)&buf[16] & 0x80000000) != 0)
        {
          v146 = 1;
        }
        else
        {
          Espresso::abstract_blob_container::shape((char *)&__sb, v308);
          if (SHIDWORD(__sb) < 1)
          {
            v146 = 1;
          }
          else
          {
            Espresso::abstract_blob_container::shape((char *)__p, v308);
            if (SLODWORD(__p[1]) < 1)
            {
              v146 = 1;
            }
            else
            {
              Espresso::abstract_blob_container::shape((char *)&v331, v308);
              if (SHIDWORD(v331) < 1)
              {
                v146 = 1;
              }
              else
              {
                Espresso::abstract_blob_container::shape((char *)&v302, v308);
                v146 = (int)v302 < 1;
                if (v305)
                {
                  v306 = v305;
                  operator delete(v305);
                }
              }
              if (v334)
              {
                v335 = v334;
                operator delete(v334);
              }
            }
            if (*((_QWORD *)&v283[1] + 1))
            {
              *(_QWORD *)&v284 = *((_QWORD *)&v283[1] + 1);
              operator delete(*((void **)&v283[1] + 1));
            }
          }
          if (*(_QWORD *)&v312[24])
          {
            *(_QWORD *)&v313 = *(_QWORD *)&v312[24];
            operator delete(*(void **)&v312[24]);
          }
        }
        if (*(_QWORD *)&buf[40])
        {
          *(_QWORD *)v319 = *(_QWORD *)&buf[40];
          operator delete(*(void **)&buf[40]);
        }
        v147 = v309;
        if (v309)
        {
          v148 = (unint64_t *)&v309->__shared_owners_;
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v147);
          }
        }
        if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v307.__r_.__value_.__l.__data_);
          if (v146)
            goto LABEL_204;
        }
        else if (v146)
        {
          goto LABEL_204;
        }
      }
    }
  }
LABEL_291:
  v159 = *(_QWORD **)(v3 + 232);
  v275 = v288[0];
  *(_QWORD *)&buf[16] = 0;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)buf = &buf[8];
  v160 = v159 + 1;
  v161 = (_QWORD *)*v159;
  if ((_QWORD *)*v159 != v159 + 1)
  {
    v162 = (uint64_t)(v159 + 21);
    v163 = (uint64_t)(v159 + 6);
    v164 = (uint64_t)(v159 + 3);
    v165 = (uint64_t)(v159 + 15);
    v166 = (uint64_t)(v159 + 12);
    v167 = (uint64_t)(v159 + 9);
    v168 = (uint64_t)(v159 + 18);
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      v173 = *(_DWORD *)std::map<std::string,std::string>::at(v162, v161 + 4);
      if (*(float *)std::map<std::string,std::string>::at(v163, v161 + 4) <= 0.0)
      {
        if (*(float *)std::map<std::string,std::string>::at(v164, v161 + 4) <= 0.0)
        {
          v175 = *(_DWORD *)std::map<std::string,std::string>::at(v165, v161 + 4);
          v176 = *(_DWORD *)std::map<std::string,std::string>::at(v166, v161 + 4);
          v174 = *(_DWORD *)std::map<std::string,std::string>::at(v167, v161 + 4);
          v177 = 1;
        }
        else
        {
          v174 = *(_DWORD *)std::map<std::string,std::string>::at(v165, v161 + 4);
          v176 = *(_DWORD *)std::map<std::string,std::string>::at(v166, v161 + 4);
          v175 = *(_DWORD *)std::map<std::string,std::string>::at(v167, v161 + 4);
          v177 = 0x100000001;
        }
        v279 = v177;
      }
      else
      {
        v279 = 0;
        v174 = *(_DWORD *)std::map<std::string,std::string>::at(v168, v161 + 4);
        v175 = 0;
        v176 = 0;
      }
      *(_QWORD *)&__sb = v161 + 4;
      v178 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)buf, v161 + 4, (__int128 **)&__sb);
      *((_DWORD *)v178 + 14) = v173;
      *((_DWORD *)v178 + 15) = 0;
      *((_QWORD *)v178 + 8) = v279;
      *((_DWORD *)v178 + 18) = v174;
      *((_DWORD *)v178 + 19) = v176;
      *((_DWORD *)v178 + 20) = v175;
      *(_QWORD *)(v178 + 92) = 0;
      *(_QWORD *)(v178 + 84) = 0;
      *((_DWORD *)v178 + 25) = 0;
      *((_QWORD *)v178 + 13) = _D8;
      *((_QWORD *)v178 + 14) = 0;
      *((_QWORD *)v178 + 15) = 0;
      *((_DWORD *)v178 + 32) = 0;
      v179 = (_QWORD *)v161[1];
      if (v179)
      {
        do
        {
          v180 = v179;
          v179 = (_QWORD *)*v179;
        }
        while (v179);
      }
      else
      {
        do
        {
          v180 = (_QWORD *)v161[2];
          _ZF = *v180 == (_QWORD)v161;
          v161 = v180;
        }
        while (!_ZF);
      }
      v161 = v180;
    }
    while (v180 != v160);
  }
  v181 = (char *)v275 + 336;
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*((char **)v275 + 42));
  v182 = *(_QWORD *)&buf[8];
  *((_QWORD *)v275 + 41) = *(_QWORD *)buf;
  *((_QWORD *)v275 + 42) = v182;
  v183 = *(_QWORD *)&buf[16];
  *((_QWORD *)v275 + 43) = *(_QWORD *)&buf[16];
  if (v183)
  {
    *(_QWORD *)(v182 + 16) = v181;
    *(_QWORD *)buf = &buf[8];
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    v182 = 0;
  }
  else
  {
    *((_QWORD *)v275 + 41) = v181;
  }
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v182);
  std::map<std::string,std::string>::map[abi:ne180100](&v331, (_QWORD *)(*((_QWORD *)this + 4) + 128));
  if (v333)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "mldb_token");
    v184 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v332, buf);
    v185 = v184;
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (!v185)
        goto LABEL_367;
    }
    else if (!v184)
    {
      goto LABEL_367;
    }
    Espresso::net::get_analysis_model_metadata(v288[0]);
    v286 = 0u;
    memset(v287, 0, 56);
    memset(v285, 0, sizeof(v285));
    v284 = 0u;
    *(_OWORD *)__p = 0u;
    memset(v283, 0, sizeof(v283));
    if (v322)
    {
      if ((char)buf[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__sb, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
      }
      else
      {
        __sb = *(_OWORD *)buf;
        *(_QWORD *)v312 = *(_QWORD *)&buf[16];
      }
      if ((char)buf[47] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v312[8], *(const std::string::value_type **)&buf[24], *(std::string::size_type *)&buf[32]);
      }
      else
      {
        *(_OWORD *)&v312[8] = *(_OWORD *)&buf[24];
        *(_QWORD *)&v312[24] = *(_QWORD *)&buf[40];
      }
      if ((v319[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v313, *(const std::string::value_type **)v319, *(std::string::size_type *)&v319[8]);
      }
      else
      {
        v313 = *(_OWORD *)v319;
        *(_QWORD *)c = *(_QWORD *)&v319[16];
      }
      if ((v319[47] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&c[8], *(const std::string::value_type **)&v319[24], *(std::string::size_type *)&v319[32]);
      }
      else
      {
        *(_OWORD *)&c[8] = *(_OWORD *)&v319[24];
        *(_QWORD *)&c[24] = *(_QWORD *)&v319[40];
      }
      if ((v319[71] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v315, *(const std::string::value_type **)&v319[48], *(std::string::size_type *)&v319[56]);
      else
        v315 = *(std::string *)&v319[48];
      if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v316, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
      else
        v316 = v320;
      if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v317, v321.__r_.__value_.__l.__data_, v321.__r_.__value_.__l.__size_);
      else
        v317 = v321;
    }
    else
    {
      *(_QWORD *)v312 = 0;
      *(_QWORD *)&v312[24] = *((_QWORD *)&v283[1] + 1);
      *(_QWORD *)c = *(_QWORD *)&v285[0];
      *(_QWORD *)&c[24] = *((_QWORD *)&v285[1] + 1);
      v315.__r_.__value_.__r.__words[2] = *(_QWORD *)v287;
      v316 = *(std::string *)&v287[8];
      __sb = 0uLL;
      __p[0] = 0;
      __p[1] = 0;
      v186 = *(_OWORD *)((char *)v283 + 8);
      memset(v283, 0, sizeof(v283));
      *(_OWORD *)&v312[8] = v186;
      v313 = v284;
      v284 = 0uLL;
      *(_OWORD *)&c[8] = *(_OWORD *)((char *)v285 + 8);
      memset(v285, 0, sizeof(v285));
      *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v286;
      v286 = 0uLL;
      memset(v287, 0, 56);
      v317 = *(std::string *)&v287[32];
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "mldb_token");
    v302 = __p;
    v187 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v331, __p, (_OWORD **)&v302);
    std::string::operator=(&v317, (const std::string *)((char *)v187 + 56));
    if (SBYTE7(v283[0]) < 0)
      operator delete(__p[0]);
    Espresso::net::set_analysis_model_metadata(v288[0], (const Espresso::model_metadata_t *)&__sb);
    if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v317.__r_.__value_.__l.__data_);
    if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v316.__r_.__value_.__l.__data_);
    if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v315.__r_.__value_.__l.__data_);
    if ((c[31] & 0x80000000) != 0)
      operator delete(*(void **)&c[8]);
    if ((c[7] & 0x80000000) != 0)
      operator delete((void *)v313);
    if ((v312[31] & 0x80000000) != 0)
      operator delete(*(void **)&v312[8]);
    if ((v312[7] & 0x80000000) != 0)
      operator delete((void *)__sb);
    if (v322)
    {
      if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v321.__r_.__value_.__l.__data_);
      if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v320.__r_.__value_.__l.__data_);
      if ((v319[71] & 0x80000000) != 0)
        operator delete(*(void **)&v319[48]);
      if ((v319[47] & 0x80000000) != 0)
        operator delete(*(void **)&v319[24]);
      if ((v319[23] & 0x80000000) != 0)
        operator delete(*(void **)v319);
      if ((char)buf[47] < 0)
        operator delete(*(void **)&buf[24]);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
    }
  }
LABEL_367:
  *(_OWORD *)__p = 0u;
  v283[0] = 0u;
  LODWORD(v283[1]) = 1065353216;
  v188 = *(uint64_t **)(*((_QWORD *)this + 1) + 16);
  if (!v188)
    v188 = &CoreML::Specification::_ModelDescription_default_instance_;
  v189 = v188[7];
  if (v189)
    v190 = v189 + 8;
  else
    v190 = 0;
  v191 = *((int *)v188 + 12);
  if ((_DWORD)v191)
  {
    v192 = 8 * v191;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, *(unsigned __int8 **)(*(_QWORD *)v190 + 16), *(_QWORD *)(*(_QWORD *)v190 + 16));
      v190 += 8;
      v192 -= 8;
    }
    while (v192);
  }
  CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend::WriteModelOutputs((uint64_t *)v288, __p);
  *(_OWORD *)&v307.__r_.__value_.__l.__data_ = 0uLL;
  *(_QWORD *)buf = 0x4220000000000000;
  *(_DWORD *)&buf[8] = 0;
  *(_DWORD *)&buf[11] = 0;
  memset(&buf[16], 0, 32);
  v319[0] = 0;
  memset(&v319[8], 0, 48);
  *(_DWORD *)&v319[56] = 4096;
  *(_WORD *)&v319[60] = 0;
  if (v290)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v193 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__sb) = 0;
      _os_log_debug_impl(&dword_19C486000, v193, OS_LOG_TYPE_DEBUG, "Setting optimize parameter to use half precision", (uint8_t *)&__sb, 2u);
    }

    buf[0] = 1;
  }
  v302 = v288[0];
  v303 = v288[1];
  if (v288[1])
  {
    v194 = (unint64_t *)((char *)v288[1] + 8);
    do
      v195 = __ldxr(v194);
    while (__stxr(v195 + 1, v194));
  }
  __sb = *(_OWORD *)buf;
  *(_OWORD *)v312 = *(_OWORD *)&buf[16];
  *(_OWORD *)&v312[16] = *(_OWORD *)&buf[32];
  LOBYTE(v313) = v319[0];
  *((_QWORD *)&v313 + 1) = 0;
  *(_OWORD *)c = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)&v313 + 8), *(__int128 **)&v319[8], *(__int128 **)&v319[16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v319[16] - *(_QWORD *)&v319[8]) >> 3));
  if ((v319[55] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&c[16], *(const std::string::value_type **)&v319[32], *(std::string::size_type *)&v319[40]);
  }
  else
  {
    *(_OWORD *)&c[16] = *(_OWORD *)&v319[32];
    v315.__r_.__value_.__r.__words[0] = *(_QWORD *)&v319[48];
  }
  LODWORD(v315.__r_.__value_.__r.__words[1]) = *(_DWORD *)&v319[56];
  WORD2(v315.__r_.__value_.__r.__words[1]) = *(_WORD *)&v319[60];
  Espresso::auto_optimize();
  if (v315.__r_.__value_.__s.__data_[7] < 0)
    operator delete(*(void **)&c[16]);
  v310 = (void **)&v313 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v310);
  v196 = (std::__shared_weak_count *)v303;
  if (v303)
  {
    v197 = (unint64_t *)((char *)v303 + 8);
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  if ((v319[55] & 0x80000000) != 0)
    operator delete(*(void **)&v319[32]);
  v310 = (void **)&v319[8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v310);
  v199 = v281;
  v281 = 0uLL;
  size = (std::__shared_weak_count *)v307.__r_.__value_.__l.__size_;
  *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v199;
  if (size)
  {
    v201 = (unint64_t *)&size->__shared_owners_;
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (*((_QWORD *)&v281 + 1))
  {
    v203 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v281 + 1) + 16))(*((_QWORD *)&v281 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v281 + 1));
    }
  }
  v205 = v307.__r_.__value_.__r.__words[0];
  memset(&v280, 0, sizeof(v280));
  v206 = (*(uint64_t (**)(CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend *))(*(_QWORD *)this + 24))(this);
  v207 = *(_QWORD **)(std::map<std::string,std::string>::at(v206 + 80, (_QWORD *)(v206 + 32)) + 168);
  v208 = v207[2];
  if (v208)
  {
    if ((_QWORD *)(v205 + 776) != v207)
    {
      v209 = v207 + 1;
      v210 = (_QWORD *)*v207;
      if (*(_QWORD *)(v205 + 792))
      {
        v211 = *(_QWORD *)(v205 + 776);
        v212 = (uint64_t **)(v205 + 784);
        *(_QWORD *)(v205 + 776) = v205 + 784;
        *(_QWORD *)(*(_QWORD *)(v205 + 784) + 16) = 0;
        *(_QWORD *)(v205 + 784) = 0;
        *(_QWORD *)(v205 + 792) = 0;
        if (*(_QWORD *)(v211 + 8))
          v213 = *(_QWORD *)(v211 + 8);
        else
          v213 = v211;
        *(_QWORD *)buf = v205 + 776;
        *(_QWORD *)&buf[8] = v213;
        *(_QWORD *)&buf[16] = v213;
        if (!v213
          || (*(_QWORD *)&buf[8] = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next(v213),
              v210 == v209))
        {
          v219 = v210;
        }
        else
        {
          do
          {
            std::string::operator=((std::string *)(v213 + 32), (const std::string *)(v210 + 4));
            if ((_QWORD *)v213 != v210)
            {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v213 + 56, (std::string *)v210[7], (__int128 *)v210[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v210[8] - v210[7]) >> 3));
              std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>(v213 + 80, (uint64_t *)v210[10], v210 + 11);
            }
            v214 = *(uint64_t **)&buf[16];
            v215 = *v212;
            v216 = (uint64_t **)(v205 + 784);
            v217 = (uint64_t **)(v205 + 784);
            if (*v212)
            {
              do
              {
                while (1)
                {
                  v216 = (uint64_t **)v215;
                  if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v214 + 4, v215 + 4))break;
                  v215 = *v216;
                  v217 = v216;
                  if (!*v216)
                    goto LABEL_420;
                }
                v215 = v216[1];
              }
              while (v215);
              v217 = v216 + 1;
            }
LABEL_420:
            std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)(v205 + 776), (uint64_t)v216, v217, v214);
            *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
            if (*(_QWORD *)&buf[8])
              *(_QWORD *)&buf[8] = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next(*(uint64_t *)&buf[8]);
            v218 = (_QWORD *)v210[1];
            if (v218)
            {
              do
              {
                v219 = v218;
                v218 = (_QWORD *)*v218;
              }
              while (v218);
            }
            else
            {
              do
              {
                v219 = (_QWORD *)v210[2];
                _ZF = *v219 == (_QWORD)v210;
                v210 = v219;
              }
              while (!_ZF);
            }
            v213 = *(_QWORD *)&buf[16];
            if (*(_QWORD *)&buf[16])
              v220 = v219 == v209;
            else
              v220 = 1;
            v210 = v219;
          }
          while (!v220);
        }
        std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)buf);
        v210 = v219;
      }
      if (v210 != v209)
      {
        v221 = (uint64_t **)(v205 + 784);
        do
        {
          v222 = (char *)operator new(0x68uLL);
          v223 = v222;
          *(_QWORD *)buf = v222;
          *(_QWORD *)&buf[8] = v205 + 784;
          buf[16] = 0;
          v224 = v222 + 32;
          if (*((char *)v210 + 55) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v222 + 32), (const std::string::value_type *)v210[4], v210[5]);
          }
          else
          {
            v225 = *((_OWORD *)v210 + 2);
            *((_QWORD *)v222 + 6) = v210[6];
            *(_OWORD *)v224 = v225;
          }
          *((_QWORD *)v223 + 7) = 0;
          *((_QWORD *)v223 + 8) = 0;
          *((_QWORD *)v223 + 9) = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v223 + 56), (__int128 *)v210[7], (__int128 *)v210[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v210[8] - v210[7]) >> 3));
          std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)(v223 + 80), v210 + 10);
          buf[16] = 1;
          v226 = *v221;
          v227 = (uint64_t **)(v205 + 784);
          v228 = (uint64_t **)(v205 + 784);
          if (*v221)
          {
            do
            {
              while (1)
              {
                v227 = (uint64_t **)v226;
                if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v224, v226 + 4))
                  break;
                v226 = *v227;
                v228 = v227;
                if (!*v227)
                  goto LABEL_446;
              }
              v226 = v227[1];
            }
            while (v226);
            v228 = v227 + 1;
          }
LABEL_446:
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)(v205 + 776), (uint64_t)v227, v228, (uint64_t *)v223);
          *(_QWORD *)buf = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
          v229 = (_QWORD *)v210[1];
          if (v229)
          {
            do
            {
              v230 = v229;
              v229 = (_QWORD *)*v229;
            }
            while (v229);
          }
          else
          {
            do
            {
              v230 = (_QWORD *)v210[2];
              _ZF = *v230 == (_QWORD)v210;
              v210 = v230;
            }
            while (!_ZF);
          }
          v210 = v230;
        }
        while (v230 != v209);
      }
      v208 = v207[2];
    }
    std::vector<std::string>::reserve(&v280, v208);
    v231 = (_QWORD *)*v207;
    if ((_QWORD *)*v207 != v207 + 1)
    {
      end = v280.__end_;
      do
      {
        v233 = (__int128 *)(v231 + 4);
        if (end >= v280.__end_cap_.__value_)
        {
          end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v280, v233);
        }
        else
        {
          if (*((char *)v231 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v231[4], v231[5]);
          }
          else
          {
            v234 = *v233;
            end->__r_.__value_.__r.__words[2] = v231[6];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v234;
          }
          ++end;
        }
        v280.__end_ = end;
        v235 = (_QWORD *)v231[1];
        if (v235)
        {
          do
          {
            v236 = v235;
            v235 = (_QWORD *)*v235;
          }
          while (v235);
        }
        else
        {
          do
          {
            v236 = (_QWORD *)v231[2];
            _ZF = *v236 == (_QWORD)v231;
            v231 = v236;
          }
          while (!_ZF);
        }
        v231 = v236;
      }
      while (v236 != v207 + 1);
    }
    v237 = *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)v207, buf, v280.__begin_->__r_.__value_.__r.__words);
    if (!v237)
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    if (v205 + 800 != v237 + 56)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v205 + 800, *(std::string **)(v237 + 56), *(__int128 **)(v237 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v237 + 64) - *(_QWORD *)(v237 + 56)) >> 3));
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>(v205 + 824, *(uint64_t **)(v237 + 80), (uint64_t *)(v237 + 88));
    }
  }
  *(_QWORD *)&__sb = &v280;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__sb);
  CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend::WriteNetwork((uint64_t)&__sb, &v307, (uint64_t)a2);
  (*(void (**)(CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend *, OArchive *))(*(_QWORD *)this + 32))(this, a2);
  v238 = *(_QWORD *)v312;
  v239 = __sb;
  __sb = *((_OWORD *)this + 3);
  *(_QWORD *)v312 = *((_QWORD *)this + 8);
  *((_OWORD *)this + 3) = v239;
  *((_QWORD *)this + 8) = v238;
  if ((v312[7] & 0x80000000) != 0)
    operator delete((void *)__sb);
  v240 = (std::__shared_weak_count *)v307.__r_.__value_.__l.__size_;
  if (v307.__r_.__value_.__l.__size_)
  {
    v241 = (unint64_t *)(v307.__r_.__value_.__l.__size_ + 8);
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v332);
  v243 = (std::__shared_weak_count *)v288[1];
  if (v288[1])
  {
    v244 = (unint64_t *)((char *)v288[1] + 8);
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v330);
  v246 = v329;
  if (v329)
  {
    v247 = (unint64_t *)&v329->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
  v249 = v328;
  if (v328)
  {
    v250 = (unint64_t *)&v328->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  v252 = v327;
  if (v327)
  {
    v253 = (unint64_t *)&v327->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  if (v325 < 0)
    operator delete((void *)v324[6]);
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((_QWORD *)v324[2]);
  v255 = (std::__shared_weak_count *)v324[0];
  if (v324[0])
  {
    v256 = (unint64_t *)(v324[0] + 8);
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  v258 = v296;
  if (v296)
  {
    v259 = (unint64_t *)&v296->__shared_owners_;
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
      std::__shared_weak_count::__release_weak(v258);
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v298[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v300[0]);

}

void sub_19C9053F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((_QWORD *)STACK[0x300]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((_QWORD *)STACK[0x2E8]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a24);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x390]);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((_QWORD *)a55);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((_QWORD *)a58);

  JUMPOUT(0x19C905D1CLL);
}

void sub_19C905570(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a69;
  unint64_t v69;
  void *v72;
  CoreML::MLModelException *exception;
  NSError *v74;

  STACK[0x228] = v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x228]);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  Espresso::auto_optimize_options::~auto_optimize_options((void **)&STACK[0x2E0]);
  if (a2 == 1)
  {
    v72 = __cxa_begin_catch(a1);
    exception = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    (*(void (**)(void *))(*(_QWORD *)v72 + 16))(v72);
    +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("%s"));
    v74 = (NSError *)objc_claimAutoreleasedReturnValue();
    CoreML::MLModelException::MLModelException(exception, v74);
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a23);
  JUMPOUT(0x19C905CCCLL);
}

void sub_19C905588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_QWORD *a55,uint64_t a56,uint64_t a57,_QWORD *a58,uint64_t a59,id a60)
{
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  Espresso::sequential_builder::~sequential_builder((void **)&STACK[0x390]);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a55);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a58);

  _Unwind_Resume(a1);
}

void sub_19C9055A0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t *a57,uint64_t a58,uint64_t a59,void *a60)
{
  uint64_t v60;
  void *v63;
  NSObject *v64;
  NSObject *v65;
  NSObject *v66;
  uint64_t v67;

  MEMORY[0x1A1AD6260](a15, 0x1020C40DF1BFCEALL);
  if (a2 == 1)
  {
    v63 = __cxa_begin_catch(a1);
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v64 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      LOWORD(STACK[0x2E0]) = 0;
      _os_log_error_impl(&dword_19C486000, v64, OS_LOG_TYPE_ERROR, "Error computing shape information for Neural Network model. This model may be invalid.", (uint8_t *)&STACK[0x2E0], 2u);
    }

    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v65 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      v67 = (*(uint64_t (**)(void *))(*(_QWORD *)v63 + 16))(v63);
      LODWORD(STACK[0x2E0]) = 136315138;
      STACK[0x2E4] = v67;
      _os_log_error_impl(&dword_19C486000, v65, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&STACK[0x2E0], 0xCu);
    }

    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v66 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      LOWORD(STACK[0x2E0]) = 0;
      _os_log_error_impl(&dword_19C486000, v66, OS_LOG_TYPE_ERROR, "IMPORTANT: new sequence length computation failed, falling back to old path.", (uint8_t *)&STACK[0x2E0], 2u);
    }

    CollectInputShapesLegacyIOS11(*(uint64_t **)(v60 + 16), &a57, &a60);
    __cxa_end_catch();
    JUMPOUT(0x19C9036ECLL);
  }
  JUMPOUT(0x19C905C10);
}

void sub_19C905704()
{
  __cxa_end_catch();
  JUMPOUT(0x19C905C10);
}

void sub_19C905720()
{
  JUMPOUT(0x19C9057F4);
}

void sub_19C90574C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x19C905C80);
}

void sub_19C9057B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_QWORD *a55,uint64_t a56,uint64_t a57,_QWORD *a58,uint64_t a59,id a60)
{
  uint64_t v60;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v60 - 216));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  Espresso::sequential_builder::~sequential_builder((void **)&STACK[0x390]);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a55);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a58);

  JUMPOUT(0x19C905D1CLL);
}

void sub_19C9057DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  JUMPOUT(0x19C9057F4);
}

void sub_19C90580C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;

  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  JUMPOUT(0x19C905CC4);
}

void sub_19C905824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](&a69);
  JUMPOUT(0x19C905CC4);
}

void sub_19C90582C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;

  STACK[0x230] = (unint64_t)&a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  JUMPOUT(0x19C905CC4);
}

void sub_19C905848(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  void *v63;
  CoreML::MLModelException *exception;
  NSError *v65;

  Espresso::auto_optimize_options::~auto_optimize_options((void **)&STACK[0x230]);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  Espresso::auto_optimize_options::~auto_optimize_options((void **)&STACK[0x2E0]);
  if (a2 == 1)
  {
    v63 = __cxa_begin_catch(a1);
    exception = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    (*(void (**)(void *))(*(_QWORD *)v63 + 16))(v63);
    +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("%s"));
    v65 = (NSError *)objc_claimAutoreleasedReturnValue();
    CoreML::MLModelException::MLModelException(exception, v65);
  }
  JUMPOUT(0x19C905918);
}

void sub_19C90585C()
{
  JUMPOUT(0x19C905864);
}

void sub_19C9058F0()
{
  void *v0;

  __cxa_end_catch();
  JUMPOUT(0x19C905918);
}

void sub_19C905924(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_19C905938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,id a60)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](&a45);
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x390]);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](&a52);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a55);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a58);

  JUMPOUT(0x19C905D1CLL);
}

void sub_19C905944()
{
  unint64_t *v0;
  uint64_t v1;
  unint64_t *v2;
  uint64_t v3;

  v0 = (unint64_t *)STACK[0x248];
  if ((unint64_t *)STACK[0x248] == &STACK[0x230])
  {
    v1 = 4;
    v0 = &STACK[0x230];
  }
  else
  {
    if (!v0)
      goto LABEL_6;
    v1 = 5;
  }
  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_6:
  v2 = (unint64_t *)STACK[0x2F8];
  if ((unint64_t *)STACK[0x2F8] == &STACK[0x2E0])
  {
    v3 = 4;
    v2 = &STACK[0x2E0];
  }
  else
  {
    if (!v2)
      goto LABEL_11;
    v3 = 5;
  }
  (*(void (**)(unint64_t *))(*v2 + 8 * v3))(v2);
LABEL_11:
  JUMPOUT(0x19C905CECLL);
}

void sub_19C9059B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,char a50)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  JUMPOUT(0x19C905CF4);
}

void sub_19C9059D0()
{
  JUMPOUT(0x19C905CFCLL);
}

void sub_19C9059F0()
{
  JUMPOUT(0x19C905CECLL);
}

void sub_19C9059F8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = v0;
  JUMPOUT(0x19C905C80);
}

void sub_19C905A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t v63;
  _QWORD *v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t *v71;
  void *v72;

  if (a2)
  {
    if (a2 != 4)
    {
      if (a2 == 3)
      {
        v65 = __cxa_begin_catch(a1);
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v66 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
        {
          v71 = (uint64_t *)&a23;
          if (a28 < 0)
            v71 = a23;
          *(_DWORD *)(v63 - 224) = 136315138;
          *(_QWORD *)(v63 - 220) = v71;
          _os_log_error_impl(&dword_19C486000, v66, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)(v63 - 224), 0xCu);
        }

        v67 = v65[1];
        (*(void (**)(_QWORD *))(*v65 + 16))(v65);
        +[MLModelErrorUtils customLayerErrorWithUnderlyingError:withFormat:](MLModelErrorUtils, "customLayerErrorWithUnderlyingError:withFormat:", v67, CFSTR("%s"));
        v68 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v69 = __cxa_begin_catch(a1);
        if (a2 == 1)
        {
          (*(void (**)(void *))(*(_QWORD *)v69 + 16))(v69);
          +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("%s"));
        }
        else
        {
          +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("%@"));
        }
        v68 = objc_claimAutoreleasedReturnValue();
      }
      v70 = a63;
      a63 = (void *)v68;

      __cxa_end_catch();
      JUMPOUT(0x19C9038CCLL);
    }
    v72 = __cxa_begin_catch(a1);
    std::rethrow_if_nested[abi:ne180100]<std::exception>(v72);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_19C905B5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  __cxa_end_catch();
  if (a28 < 0)
    operator delete(__p);
  JUMPOUT(0x19C905948);
}

void sub_19C905BB8()
{
  JUMPOUT(0x19C905C60);
}

void sub_19C905BD8()
{
  JUMPOUT(0x19C905C58);
}

void sub_19C905BF0()
{
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&STACK[0x2E0]);
  JUMPOUT(0x19C905C60);
}

void sub_19C905C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::default_delete<CoreML::NeuralNetworkShaper>::operator()[abi:ne180100](a15);
}

void sub_19C905C1C(void *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x19C904EB4);
  }
  JUMPOUT(0x19C905834);
}

void sub_19C905C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_QWORD *a55,uint64_t a56,uint64_t a57,_QWORD *a58,uint64_t a59,id a60,void **a61)
{
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;

  a61 = (void **)(v63 - 224);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a61);
  google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)&a23);
  std::ostream::~ostream();
  STACK[0x230] = v61;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v62);
  std::streambuf::~streambuf();
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x390]);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a55);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a58);

  JUMPOUT(0x19C905D1CLL);
}

void sub_19C905CB8()
{
  JUMPOUT(0x19C905D04);
}

void sub_19C905CD8()
{
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x2E8]);
  JUMPOUT(0x19C905CE4);
}

uint64_t CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::GetMLModelInfo(CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend *this)
{
  return *((_QWORD *)this + 4);
}

void std::default_delete<CoreML::NeuralNetworkShaper>::operator()[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(*(_QWORD **)(a1 + 40));
  std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(*(_QWORD **)(a1 + 16));
  JUMPOUT(0x1A1AD6260);
}

void CollectInputShapesLegacyIOS11(uint64_t *a1, uint64_t **a2, void **a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  int v11;
  _DWORD *v12;
  int v13;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v28;
  void *v29;
  uint8_t buf[8];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (a1)
    v3 = a1;
  v4 = v3[4];
  if (v4)
    v5 = v4 + 8;
  else
    v5 = 0;
  v6 = *((int *)v3 + 6);
  if (!(_DWORD)v6)
    return;
  v8 = 8 * v6;
  while (1)
  {
    v9 = *(_QWORD **)(*(_QWORD *)v5 + 16);
    v10 = *(uint64_t **)(*(_QWORD *)v5 + 32);
    if (!v10)
      v10 = &CoreML::Specification::_FeatureType_default_instance_;
    v11 = *((_DWORD *)v10 + 9);
    if (v11 == 5)
      break;
    if (v11 != 4)
    {
      +[MLModelErrorUtils errorWithCode:format:](MLModelErrorUtils, "errorWithCode:format:", 1, CFSTR("Neural networks only accept image and array inputs."));
      v25 = objc_claimAutoreleasedReturnValue();
      goto LABEL_41;
    }
    v12 = (_DWORD *)v10[3];
    v13 = v12[8];
    if (v13 == 10 || v13 == 40)
      v15 = 1;
    else
      v15 = 3;
    v16 = v12[4];
    v17 = v12[6];
    if (v16)
      v18 = v17 == 0;
    else
      v18 = 1;
    if (v18)
    {
      +[MLLogging coreChannel](MLLogging, "coreChannel");
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_19C486000, v26, OS_LOG_TYPE_ERROR, "Invalid height and width for the image input.", buf, 2u);
      }

      +[MLModelErrorUtils errorWithCode:format:](MLModelErrorUtils, "errorWithCode:format:", 1, CFSTR("Invalid height and width for the image input."));
      v25 = objc_claimAutoreleasedReturnValue();
      goto LABEL_41;
    }
LABEL_32:
    *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)v5 + 16);
    v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v9, (__int128 **)buf);
    *((_DWORD *)v24 + 14) = v16;
    *((_DWORD *)v24 + 15) = v17;
    *((_DWORD *)v24 + 16) = v15;
    *(_QWORD *)(v24 + 68) = 0x100000001;
    *((_DWORD *)v24 + 19) = -1;
    *((_QWORD *)v24 + 10) = 0;
    *((_QWORD *)v24 + 11) = 0;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v24 + 96, 0, 0, 0);
    v5 += 8;
    v8 -= 8;
    if (!v8)
      return;
  }
  v19 = v10[3];
  v20 = *(unsigned int *)(v19 + 16);
  if ((v20 - 1) < 5)
  {
    switch((int)v20)
    {
      case 1:
        v15 = *(_DWORD *)(*(_QWORD *)(v19 + 24) + 8);
        goto LABEL_29;
      case 2:
        v15 = *(_DWORD *)(*(_QWORD *)(v19 + 24) + 16);
LABEL_29:
        v17 = 1;
        v16 = 1;
        break;
      case 3:
        v22 = *(_DWORD **)(v19 + 24);
        v15 = v22[2];
        v16 = v22[6];
        v17 = v22[4];
        break;
      case 4:
        v23 = *(_DWORD **)(v19 + 24);
        v15 = v23[4];
        v16 = v23[8];
        v17 = v23[6];
        break;
      default:
        v21 = *(_DWORD **)(v19 + 24);
        v15 = v21[6];
        v16 = v21[10];
        v17 = v21[8];
        break;
    }
    goto LABEL_32;
  }
  +[MLLogging coreChannel](MLLogging, "coreChannel");
  v28 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v20;
    _os_log_error_impl(&dword_19C486000, v28, OS_LOG_TYPE_ERROR, "Input MLMultiArray cannot be %d dimensional (must be between 1 and 5 dimensions).", buf, 8u);
  }

  +[MLModelErrorUtils errorWithCode:format:](MLModelErrorUtils, "errorWithCode:format:", 1, CFSTR("Input MLMultiArray cannot be %d dimensional (must be between 1 and 5 dimensions)."), v20);
  v25 = objc_claimAutoreleasedReturnValue();
LABEL_41:
  v29 = *a3;
  *a3 = (void *)v25;

}

void Espresso::create_context(Espresso::abstract_engine_factory *a1, int *a2)
{
  const char *v4;
  uint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  Espresso *v12;
  std::__shared_weak_count *v13;
  uint8_t buf[8];
  std::__shared_weak_count *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  Espresso::abstract_engine_factory::shared(a1);
  Espresso::abstract_engine_factory::engine_for_platform();
  if (v15)
  {
    p_shared_owners = &v15->__shared_owners_;
    do
      v6 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v6 - 1, (unint64_t *)p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v12)
  {
    (*(void (**)(Espresso *, Espresso **, uint64_t))(*(_QWORD *)v12 + 32))(v12, &v12, 0xFFFFFFFFLL);
  }
  else
  {
    Espresso::espresso_os_log_subsystem(0, v4);
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v11 = *a2;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v11;
      _os_log_error_impl(&dword_19C486000, v7, OS_LOG_TYPE_ERROR, "Unsupported Engine type %d.", buf, 8u);
    }

    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
  }
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19C9061DC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  _QWORD *v9;
  void *v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 1)
  {
    v12 = __cxa_begin_catch(a1);
    Espresso::espresso_os_log_subsystem(0, v13);
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 16))(v12);
      LODWORD(a9) = 136315138;
      *(_QWORD *)((char *)&a9 + 4) = v15;
      _os_log_error_impl(&dword_19C486000, v14, OS_LOG_TYPE_ERROR, "Cannot create context, Caught exception: %s", (uint8_t *)&a9, 0xCu);
    }

    *v9 = 0;
    v9[1] = 0;
    __cxa_end_catch();
    JUMPOUT(0x19C906170);
  }
  _Unwind_Resume(a1);
}

const std::nested_exception *std::rethrow_if_nested[abi:ne180100]<std::exception>(const void *a1)
{
  const std::nested_exception *result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _BYTE *v7;

  result = (const std::nested_exception *)__dynamic_cast(a1, MEMORY[0x1E0DE4EB0], (const struct __class_type_info *)off_1E3D427F0, -2);
  if (result)
  {
    std::nested_exception::rethrow_nested(result);
    return (const std::nested_exception *)BuildFromShapes(v2, v3, v4, v5, v6, v7);
  }
  return result;
}

_QWORD *BuildFromShapes(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, _BYTE *a6)
{
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  void *__p;
  char v17;
  char v18;
  _BYTE v19[24];
  _BYTE *v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v18 = a4;
  v9 = operator new(0x20uLL);
  *v9 = &off_1E3D5B728;
  v9[1] = a2;
  v10 = v9 + 1;
  v9[2] = a3;
  v9[3] = &v18;
  v22 = v9;
  v11 = (char *)operator new(0x20uLL);
  *(_QWORD *)v11 = &off_1E3D5B728;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)v10;
  *((_QWORD *)v11 + 3) = v10[2];
  v20 = v11;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Error in laying out custom layer model in memory.");
  if (a6)
    *a6 = 0;
  if (!v20)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *))(*(_QWORD *)v20 + 48))(v20);
  if (v17 < 0)
    operator delete(__p);
  v12 = v20;
  if (v20 == v19)
  {
    v13 = 4;
    v12 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  result = v22;
  if (v22 == v21)
  {
    v15 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void sub_19C906460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v23 = a18;
  if (a18 == &a15)
  {
    v24 = 4;
    v23 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a22;
  if (a22 == &a19)
  {
    v26 = 4;
    v25 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(char *))(*(_QWORD *)v25 + 8 * v26))(v25);
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_19C9064D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _QWORD *v16;
  void **v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t *v27;
  void *v28;

  if (a2)
  {
    if (a2 != 4)
    {
      if (a2 == 3)
      {
        v21 = __cxa_begin_catch(a1);
        +[MLLogging coreChannel](MLLogging, "coreChannel");
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          v27 = (uint64_t *)&a11;
          if (a16 < 0)
            v27 = a11;
          *(_DWORD *)(v19 - 96) = 136315138;
          *(_QWORD *)(v19 - 92) = v27;
          _os_log_error_impl(&dword_19C486000, v22, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)(v19 - 96), 0xCu);
        }

        v23 = v21[1];
        (*(void (**)(_QWORD *))(*v21 + 16))(v21);
        +[MLModelErrorUtils customLayerErrorWithUnderlyingError:withFormat:](MLModelErrorUtils, "customLayerErrorWithUnderlyingError:withFormat:", v23, CFSTR("%s"));
        v24 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v25 = __cxa_begin_catch(a1);
        if (a2 == 2)
        {
          if (v18)
            *v18 = 1;
          (*(void (**)(void *))(*(_QWORD *)v25 + 16))(v25);
          +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("%s"));
          v24 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("%@"));
          v24 = objc_claimAutoreleasedReturnValue();
        }
      }
      v26 = *v17;
      *v17 = (void *)v24;

      __cxa_end_catch();
      *v16 = 0;
      v16[1] = 0;
      JUMPOUT(0x19C9063B0);
    }
    v28 = __cxa_begin_catch(a1);
    std::rethrow_if_nested[abi:ne180100]<std::exception>(v28);
    __cxa_rethrow();
  }
  JUMPOUT(0x19C9064D0);
}

void sub_19C906640(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_end_catch();
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x19C906464);
}

void sub_19C9066A4()
{
  JUMPOUT(0x19C9064D0);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t *v9;
  __n128 *v10;
  uint64_t v11;
  unint64_t v12;
  __n128 *v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 v24;
  unint64_t v25;
  unint64_t v26;
  __int8 *v27;
  __n128 v28;
  __n128 v29;
  BOOL v30;
  __n128 v31;
  __n128 *v32;
  _BOOL4 v33;
  __n128 *v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int8 *v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 *v44;
  BOOL v46;
  uint64_t v47;
  __n128 *v48;
  __n128 *v49;
  __n128 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  __n128 v54;
  int64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t *v60;
  __n128 v61;
  unint64_t *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  int64_t v67;
  __n128 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  __n128 v77;
  unint64_t v78;
  uint64_t v79;
  int64_t v80;
  unint64_t v81;
  char *v82;
  __n128 v83;
  uint64_t v84;
  __int128 v85;
  __n128 v86;
  uint64_t v87;
  BOOL v88;
  __n128 *v89;
  __n128 v90;
  __n128 *v91;
  __n128 *v92;
  BOOL v93;
  __n128 v94;
  unint64_t v95;
  __n128 *v96;
  unsigned __int8 v97;
  __n128 *v98;
  __n128 v99;
  unint64_t v100;
  __n128 v101;
  unint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v8 = &a2[-2].n128_u64[1];
  v96 = a2 - 3;
  v98 = a2;
  v9 = &a2[-5].n128_u64[1];
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v8, a1))
        {
          v41 = *a1;
          v100 = a1[1].n128_u64[0];
          v99 = v41;
          v42 = *(__n128 *)v8;
          a1[1].n128_u64[0] = v8[2];
          *a1 = v42;
          v43 = v99;
          v8[2] = v100;
          *(__n128 *)v8 = v43;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, v8);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], v8);
        return;
      default:
        if (v11 <= 575)
        {
          v44 = (__n128 *)((char *)a1 + 24);
          v46 = a1 == a2 || v44 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v46)
            {
              v47 = 0;
              v48 = a1;
              do
              {
                v49 = v48;
                v48 = v44;
                if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v44, v49))
                {
                  v50 = *v48;
                  v100 = v48[1].n128_u64[0];
                  v99 = v50;
                  v48->n128_u64[1] = 0;
                  v48[1].n128_u64[0] = 0;
                  v48->n128_u64[0] = 0;
                  v51 = v47;
                  while (1)
                  {
                    v52 = (char *)a1 + v51;
                    *(__n128 *)(v52 + 24) = *(__n128 *)((char *)a1 + v51);
                    *((_QWORD *)v52 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v51);
                    v52[23] = 0;
                    *v52 = 0;
                    if (!v51)
                      break;
                    v51 -= 24;
                    if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v99, (unint64_t *)((char *)a1->n128_u64 + v51)))
                    {
                      v53 = (uint64_t)&a1[1].n128_i64[1] + v51;
                      goto LABEL_80;
                    }
                  }
                  v53 = (uint64_t)a1;
LABEL_80:
                  v54 = v99;
                  *(_QWORD *)(v53 + 16) = v100;
                  *(__n128 *)v53 = v54;
                }
                v44 = (__n128 *)((char *)v48 + 24);
                v47 += 24;
              }
              while (&v48[1].n128_i8[8] != (__int8 *)a2);
            }
          }
          else if (!v46)
          {
            do
            {
              v89 = a1;
              a1 = v44;
              if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v44, v89))
              {
                v90 = *a1;
                v100 = a1[1].n128_u64[0];
                v99 = v90;
                a1->n128_u64[1] = 0;
                a1[1].n128_u64[0] = 0;
                a1->n128_u64[0] = 0;
                v91 = a1;
                do
                {
                  v92 = (__n128 *)((char *)v91 - 24);
                  *v91 = *(__n128 *)((char *)v91 - 24);
                  v91[1].n128_u64[0] = v91[-1].n128_u64[1];
                  v91[-1].n128_u8[15] = 0;
                  v91[-2].n128_u8[8] = 0;
                  v93 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v99, (__n128 *)v91[-3].n128_u64);
                  v91 = v92;
                }
                while (v93);
                v94 = v99;
                v92[1].n128_u64[0] = v100;
                *v92 = v94;
              }
              v44 = (__n128 *)((char *)a1 + 24);
            }
            while (&a1[1].n128_i8[8] != (__int8 *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v55 = (v12 - 2) >> 1;
            v56 = v55;
            do
            {
              v57 = v56;
              if (v55 >= v56)
              {
                v58 = (2 * v56) | 1;
                v59 = (char *)a1 + 24 * v58;
                if (2 * v56 + 2 < (uint64_t)v12
                  && google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&a1->n128_u64[3 * v58], (_QWORD *)v59 + 3))
                {
                  v59 += 24;
                  v58 = 2 * v57 + 2;
                }
                v60 = &a1->n128_u64[3 * v57];
                a2 = v98;
                if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v59, v60))
                {
                  v61 = *(__n128 *)v60;
                  v100 = v60[2];
                  v99 = v61;
                  v60[1] = 0;
                  v60[2] = 0;
                  *v60 = 0;
                  do
                  {
                    v62 = (unint64_t *)v59;
                    v63 = *(_OWORD *)v59;
                    v60[2] = *((_QWORD *)v59 + 2);
                    *(_OWORD *)v60 = v63;
                    v59[23] = 0;
                    *v59 = 0;
                    if (v55 < v58)
                      break;
                    v64 = (2 * v58) | 1;
                    v59 = (char *)a1 + 24 * v64;
                    v65 = 2 * v58 + 2;
                    if (v65 < (uint64_t)v12
                      && google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&a1->n128_u64[3 * v64], (_QWORD *)v59 + 3))
                    {
                      v59 += 24;
                      v64 = v65;
                    }
                    v60 = v62;
                    v58 = v64;
                  }
                  while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v59, &v99));
                  v66 = v99;
                  v62[2] = v100;
                  *(__n128 *)v62 = v66;
                  a2 = v98;
                }
              }
              v56 = v57 - 1;
            }
            while (v57);
            v67 = v11 / 0x18uLL;
            do
            {
              v68 = a2;
              v69 = 0;
              v95 = a1->n128_u64[0];
              v101.n128_u64[0] = a1->n128_u64[1];
              *(unint64_t *)((char *)v101.n128_u64 + 7) = *(unint64_t *)((char *)&a1->n128_u64[1] + 7);
              v97 = a1[1].n128_u8[7];
              a1->n128_u64[1] = 0;
              a1[1].n128_u64[0] = 0;
              a1->n128_u64[0] = 0;
              v70 = v67 - 2;
              if (v67 < 2)
                v70 = v67 - 1;
              v71 = v70 >> 1;
              v72 = (uint64_t)a1;
              do
              {
                v73 = v72 + 24 * v69 + 24;
                v74 = 2 * v69;
                v69 = (2 * v69) | 1;
                v75 = v74 + 2;
                if (v74 + 2 < v67
                  && google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()((_QWORD *)v73, (_QWORD *)(v73 + 24)))
                {
                  v73 += 24;
                  v69 = v75;
                }
                if (*(char *)(v72 + 23) < 0)
                  operator delete(*(void **)v72);
                v76 = *(__n128 *)v73;
                *(_QWORD *)(v72 + 16) = *(_QWORD *)(v73 + 16);
                *(__n128 *)v72 = v76;
                *(_BYTE *)(v73 + 23) = 0;
                *(_BYTE *)v73 = 0;
                v72 = v73;
              }
              while (v69 <= v71);
              a2 = (__n128 *)((char *)v68 - 24);
              if ((__int8 *)v73 == &v68[-2].n128_i8[8])
              {
                *(_QWORD *)v73 = v95;
                v87 = *(uint64_t *)((char *)v101.n128_i64 + 7);
                *(_QWORD *)(v73 + 8) = v101.n128_u64[0];
                *(_QWORD *)(v73 + 15) = v87;
                *(_BYTE *)(v73 + 23) = v97;
                v80 = v67 - 1;
              }
              else
              {
                v77 = *a2;
                *(_QWORD *)(v73 + 16) = v68[-1].n128_u64[1];
                *(__n128 *)v73 = v77;
                v68[-2].n128_u64[1] = v95;
                v78 = v101.n128_u64[0];
                *(unint64_t *)((char *)v68[-1].n128_u64 + 7) = *(unint64_t *)((char *)v101.n128_u64 + 7);
                v68[-1].n128_u64[0] = v78;
                v68[-1].n128_u8[15] = v97;
                v79 = v73 - (_QWORD)a1 + 24;
                v80 = v67 - 1;
                if (v79 >= 25)
                {
                  v81 = (unint64_t)(-2 - 0x5555555555555555 * (v79 >> 3)) >> 1;
                  v82 = (char *)a1 + 24 * v81;
                  if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v82, (_QWORD *)v73))
                  {
                    v83 = *(__n128 *)v73;
                    v100 = *(_QWORD *)(v73 + 16);
                    v99 = v83;
                    *(_QWORD *)(v73 + 8) = 0;
                    *(_QWORD *)(v73 + 16) = 0;
                    *(_QWORD *)v73 = 0;
                    do
                    {
                      v84 = (uint64_t)v82;
                      v85 = *(_OWORD *)v82;
                      *(_QWORD *)(v73 + 16) = *((_QWORD *)v82 + 2);
                      *(_OWORD *)v73 = v85;
                      v82[23] = 0;
                      *v82 = 0;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = (char *)a1 + 24 * v81;
                      v73 = v84;
                    }
                    while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v82, &v99));
                    v86 = v99;
                    *(_QWORD *)(v84 + 16) = v100;
                    *(__n128 *)v84 = v86;
                  }
                }
              }
              v88 = v67 <= 2;
              v67 = v80;
            }
            while (!v88);
          }
          return;
        }
        v13 = (__n128 *)((char *)a1 + 24 * (v12 >> 1));
        if ((unint64_t)v11 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(&a1->n128_u64[3 * (v12 >> 1)], a1, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1->n128_u64[3 * (v12 >> 1)], v8);
          v14 = 3 * (v12 >> 1);
          v15 = (_QWORD *)&a1[-1] + 3 * (v12 >> 1) - 1;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(&a1[1].n128_u64[1], v15, v96);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[v14 + 1], v9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v15, v13, &a1[1].n128_u64[v14 + 1]);
          v16 = *a1;
          v100 = a1[1].n128_u64[0];
          v99 = v16;
          v17 = v13[1].n128_u64[0];
          *a1 = *v13;
          a1[1].n128_u64[0] = v17;
          v18 = v99;
          v13[1].n128_u64[0] = v100;
          *v13 = v18;
        }
        --a3;
        a2 = v98;
        if ((a4 & 1) == 0
          && !google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&a1[-2].n128_u64[1], a1))
        {
          v31 = *a1;
          v102 = a1[1].n128_u64[0];
          v101 = v31;
          a1->n128_u64[1] = 0;
          a1[1].n128_u64[0] = 0;
          a1->n128_u64[0] = 0;
          if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v101, v8))
          {
            v10 = a1;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v101, v10));
          }
          else
          {
            v32 = (__n128 *)((char *)a1 + 24);
            do
            {
              v10 = v32;
              if (v32 >= v98)
                break;
              v33 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v101, v32);
              v32 = (__n128 *)((char *)v10 + 24);
            }
            while (!v33);
          }
          v34 = v98;
          if (v10 < v98)
          {
            v34 = v98;
            do
              v34 = (__n128 *)((char *)v34 - 24);
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v101, v34));
          }
          while (v10 < v34)
          {
            v35 = *v10;
            v100 = v10[1].n128_u64[0];
            v99 = v35;
            v36 = *v34;
            v10[1].n128_u64[0] = v34[1].n128_u64[0];
            *v10 = v36;
            v37 = v99;
            v34[1].n128_u64[0] = v100;
            *v34 = v37;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v101, v10));
            do
              v34 = (__n128 *)((char *)v34 - 24);
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v101, v34));
          }
          v38 = &v10[-2].n128_i8[8];
          if (&v10[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v10[-1].n128_i8[15] < 0)
              operator delete((void *)a1->n128_u64[0]);
          }
          else
          {
            if (a1[1].n128_i8[7] < 0)
              operator delete((void *)a1->n128_u64[0]);
            v39 = *(__n128 *)v38;
            a1[1].n128_u64[0] = v10[-1].n128_u64[1];
            *a1 = v39;
            v10[-1].n128_u8[15] = 0;
            v10[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          v40 = v101;
          v10[-1].n128_u64[1] = v102;
          *(__n128 *)v38 = v40;
          continue;
        }
        v19 = *a1;
        v102 = a1[1].n128_u64[0];
        v101 = v19;
        a1->n128_u64[1] = 0;
        a1[1].n128_u64[0] = 0;
        a1->n128_u64[0] = 0;
        v20 = a1;
        do
        {
          v21 = v20;
          v20 = (__n128 *)((char *)v20 + 24);
        }
        while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v20, &v101));
        v22 = v98;
        if (v21 == a1)
        {
          v22 = v98;
          do
          {
            if (v20 >= v22)
              break;
            v22 = (__n128 *)((char *)v22 - 24);
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v22, &v101));
        }
        else
        {
          do
            v22 = (__n128 *)((char *)v22 - 24);
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v22, &v101));
        }
        v10 = v20;
        if (v20 < v22)
        {
          v23 = v22;
          do
          {
            v99 = *v10;
            v24 = v99;
            v100 = v10[1].n128_u64[0];
            v25 = v100;
            v26 = v23[1].n128_u64[0];
            *v10 = *v23;
            v10[1].n128_u64[0] = v26;
            v23[1].n128_u64[0] = v25;
            *v23 = v24;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v10, &v101));
            do
              v23 = (__n128 *)((char *)v23 - 24);
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v23, &v101));
          }
          while (v10 < v23);
        }
        v27 = &v10[-2].n128_i8[8];
        if (&v10[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v10[-1].n128_i8[15] < 0)
            operator delete((void *)a1->n128_u64[0]);
        }
        else
        {
          if (a1[1].n128_i8[7] < 0)
            operator delete((void *)a1->n128_u64[0]);
          v28 = *(__n128 *)v27;
          a1[1].n128_u64[0] = v10[-1].n128_u64[1];
          *a1 = v28;
          v10[-1].n128_u8[15] = 0;
          v10[-2].n128_u8[8] = 0;
        }
        v29 = v101;
        v10[-1].n128_u64[1] = v102;
        *(__n128 *)v27 = v29;
        if (v20 < v22)
        {
LABEL_34:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, &v10[-2].n128_i8[8], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (__n128 *)((char *)v10 - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, v98))
        {
          if (v30)
            continue;
          goto LABEL_34;
        }
        a2 = (__n128 *)((char *)v10 - 24);
        if (!v30)
          goto LABEL_2;
        return;
    }
  }
}

uint64_t std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>::~pair(uint64_t a1)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void Espresso::model_metadata_t::~model_metadata_t(void **this)
{
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0xAA];
    v7 = (uint64_t)*v6 + 24 * (v5 % 0xAA);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v5) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        v7 = std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v7) + 24;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 85;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 170;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void Espresso::sequential_builder::~sequential_builder(void **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)(this + 17));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 14));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 12));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(this[3]);
  v2 = (std::__shared_weak_count *)this[1];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  BOOL v6;
  _BOOL8 result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, a1);
  result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, a2);
  if (v6)
  {
    if (result)
    {
      v8 = a1[2];
      v9 = *(_OWORD *)a1;
      v10 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v10;
    }
    else
    {
      v17 = a1[2];
      v18 = *(_OWORD *)a1;
      v19 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v19;
      *(_OWORD *)a2 = v18;
      a2[2] = v17;
      result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, a2);
      if (!result)
        return result;
      v8 = a2[2];
      v9 = *(_OWORD *)a2;
      v20 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v20;
    }
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
  }
  else if (result)
  {
    v11 = a2[2];
    v12 = *(_OWORD *)a2;
    v13 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v13;
    *(_OWORD *)a3 = v12;
    a3[2] = v11;
    result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, a1);
    if (result)
    {
      v14 = a1[2];
      v15 = *(_OWORD *)a1;
      v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3);
  if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a4, a3))
  {
    v9 = a3[2];
    v10 = *(_OWORD *)a3;
    v11 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, a2))
    {
      v12 = a2[2];
      v13 = *(_OWORD *)a2;
      v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, a1))
      {
        v15 = a1[1].n128_u64[0];
        result = *a1;
        v16 = a2[2];
        *a1 = *(__n128 *)a2;
        a1[1].n128_u64[0] = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4);
  if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a5, a4))
  {
    v11 = a4[2];
    v12 = *(_OWORD *)a4;
    v13 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a4, a3))
    {
      v14 = a3[2];
      v15 = *(_OWORD *)a3;
      v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, a2))
      {
        v17 = a2[2];
        v18 = *(_OWORD *)a2;
        v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, a1))
        {
          v20 = a1[1].n128_u64[0];
          result = *a1;
          v21 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  __n128 *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__n128 *)((char *)a2 - 24);
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&a2[-2].n128_u64[1], a1))
      {
        v7 = a1[1].n128_u64[0];
        v8 = *a1;
        v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    default:
      v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v11, v10))
    {
      v17 = *(_OWORD *)v11;
      v18 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      v14 = v12;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((_QWORD *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48)
          break;
        v14 -= 24;
        if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v17, (_QWORD *)v15 + 3))
        {
          v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v16 = v17;
      *(_QWORD *)(v16 + 16) = v18;
      if (++v13 == 8)
        return v11 + 3 == (unint64_t *)a2;
    }
    v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2)
      return 1;
  }
}

void std::__function::__func<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0,std::allocator<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0>,std::shared_ptr<Espresso::net> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AD6260);
}

__n128 std::__function::__func<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0,std::allocator<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0>,std::shared_ptr<Espresso::net> ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3D5B728;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0,std::allocator<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0>,std::shared_ptr<Espresso::net> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D5B728;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0,std::allocator<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0>,std::shared_ptr<Espresso::net> ()(void)>::operator()(uint64_t a1)
{
  Espresso::sequential_builder::build_from_shapes();
  if (**(_BYTE **)(a1 + 24))
    Espresso::net::setup_script();
}

void sub_19C907930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0,std::allocator<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0>,std::shared_ptr<Espresso::net> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZL15BuildFromShapesRN8Espresso18sequential_builderERKNSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS_11layer_shapeENS2_4lessIS9_EENS7_INS2_4pairIKS9_SA_EEEEEEbRU8__strongP7NSErrorPbE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0,std::allocator<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0>,std::shared_ptr<Espresso::net> ()(void)>::target_type()
{
}

void std::__function::__func<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0,std::allocator<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1A1AD6260);
}

__n128 std::__function::__func<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0,std::allocator<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E3D5B6D0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0,std::allocator<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3D5B6D0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0,std::allocator<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;

  v2 = std::map<std::string,std::string>::at(*(_QWORD *)(a1 + 8) + 80, (_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
  **(_BYTE **)(a1 + 16) = EspressoConverter::convertToEspresso(*(const CoreML::Specification::NeuralNetwork **)(*(_QWORD *)(a1 + 24) + 32), *(_DWORD *)(*(_QWORD *)(a1 + 24) + 44), *(_QWORD **)(a1 + 32), *(uint64_t ***)(a1 + 40), *(_BYTE *)(v2 + 312));
  return 1;
}

uint64_t std::__function::__func<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0,std::allocator<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZL13ConvertLayersRKN6CoreML13Specification5ModelERKNS_10NNCompiler11MLModelInfoERN8Espresso18sequential_builderERNSt3__13mapINSB_12basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEENS8_11layer_shapeENSB_4lessISI_EENSG_INSB_4pairIKSI_SJ_EEEEEERN14EspressoCommon18compileModelResultERU8__strongP7NSErrorE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0,std::allocator<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0>,BOOL ()(void)>::target_type()
{
}

void std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::ShapeConstraint>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<int>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<int>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(*(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::ShapeConstraint>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::NeuralNetworkEspressoNetBackend(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_1E3D4C978;
  a1[1] = a2;
  a1[2] = a3;
  if (a3)
  {
    v6 = (unint64_t *)(a3 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    a2 = a1[1];
  }
  CoreML::NNCompiler::NeuralNetwork::NeuralNetworkSpecProxy::Make((CoreML::NNCompiler::NeuralNetwork::NeuralNetworkSpecProxy *)(a1 + 3), *(const CoreML::Specification::Model **)(a2 + 32), *(_DWORD *)(a2 + 44));
  v8 = a4[1];
  a1[4] = *a4;
  a1[5] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  return a1;
}

void sub_19C907CE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::UpgradeNeuralNetworkToMIL(uint64_t a1, char *a2)
{
  unint64_t p_v;
  void *v4;
  char *v5;
  void *v6;
  void *v7;
  void *v8;
  char isKindOfClass;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  std::vector<std::string>::pointer end;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  std::string *v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t k;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  unsigned __int8 **v43;
  unsigned __int8 *m;
  unint64_t v45;
  char *v46;
  float v47;
  _BOOL8 v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  void *v55;
  void *v56;
  _BOOL4 v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *size;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  char v70;
  std::__fs::filesystem::path *v71;
  int v72;
  char v73;
  std::string::size_type v74;
  std::__shared_weak_count *v75;
  void *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  MIL::IRTensorValueType *Scalar;
  std::__shared_weak_count *v81;
  std::string::size_type v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::string::size_type v86;
  uint64_t v87;
  char *v88;
  char *v89;
  std::string::size_type v90;
  void *exception;
  const char *v92;
  void *v93;
  void *v94;
  uint64_t last_error;
  void *v96;
  std::string *v98;
  id v99;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  std::string v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  std::vector<std::string> v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  char **v115;
  char *v116;
  uint64_t v117;
  id v118;
  std::__fs::filesystem::path v119;
  char *v120;
  void *__p[2];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  void *v125[2];
  __int128 v126;
  float v127;
  std::__fs::filesystem::path v128;
  std::string v129;
  void *v130;
  std::__shared_weak_count *v131;
  char v132;
  std::__fs::filesystem::path __s;
  _BYTE v134[128];
  _BYTE v135[128];
  std::__split_buffer<std::string> __v;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v101 = (void *)objc_opt_new();
  p_v = (unint64_t)MLModel;
  v4 = (void *)MEMORY[0x1E0C99E98];
  if (a2[23] >= 0)
    v5 = a2;
  else
    v5 = *(char **)a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5, a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "fileURLWithPath:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v118 = 0;
  +[MLModel modelWithContentsOfURL:configuration:error:](MLModel, "modelWithContentsOfURL:configuration:error:", v7, v101, &v118);
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  v99 = v118;

  if (!v102)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (v99)
    {
      objc_msgSend(v99, "localizedDescription");
      v92 = (const char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    }
    else
    {
      v92 = "Failed to read model from disk.";
    }
    MEMORY[0x1A1AD5E28](exception, v92);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v102, "internalEngine");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0)
  {
    v93 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v93, "Inappropriate model type for upgrade.");
    __cxa_throw(v93, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v102, "internalEngine");
  v116 = 0;
  v117 = 0;
  v115 = &v116;
  v111 = 0u;
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v104, "defaultOptionalValues");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v111, v135, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v112;
    p_v = (unint64_t)&__v;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v112 != v12)
          objc_enumerationMutation(v10);
        v14 = *(void **)(*((_QWORD *)&v111 + 1) + 8 * i);
        objc_msgSend(v104, "defaultOptionalValues");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "objectForKeyedSubscript:", v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "floatValue");
        v18 = v17;
        std::string::basic_string[abi:ne180100]<0>(&__v, (char *)objc_msgSend(objc_retainAutorelease(v14), "UTF8String"));
        __p[0] = &__v;
        *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v115, &__v, (_OWORD **)__p)+ 14) = v18;
        if (SHIBYTE(__v.__end_) < 0)
          operator delete(__v.__first_);

      }
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v111, v135, 16);
    }
    while (v11);
  }

  memset(&v110, 0, sizeof(v110));
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  objc_msgSend(v104, "modelDescription");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "outputDescriptionsByName");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v106, v134, 16);
  if (v21)
  {
    v22 = *(_QWORD *)v107;
    p_v = 0xAAAAAAAAAAAAAAABLL;
    do
    {
      for (j = 0; j != v21; ++j)
      {
        if (*(_QWORD *)v107 != v22)
          objc_enumerationMutation(v20);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v106 + 1) + 8 * j)), "UTF8String"));
        end = v110.__end_;
        if (v110.__end_ >= v110.__end_cap_.__value_)
        {
          v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v110.__end_ - (char *)v110.__begin_) >> 3);
          v27 = v26 + 1;
          if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v110.__end_cap_.__value_ - (char *)v110.__begin_) >> 3) > v27)
            v27 = 0x5555555555555556 * (((char *)v110.__end_cap_.__value_ - (char *)v110.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v110.__end_cap_.__value_ - (char *)v110.__begin_) >> 3) >= 0x555555555555555)
            v28 = 0xAAAAAAAAAAAAAAALL;
          else
            v28 = v27;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v110.__end_cap_;
          if (v28)
            v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v110.__end_cap_, v28);
          else
            v29 = 0;
          v30 = v29 + v26;
          __v.__first_ = v29;
          __v.__begin_ = v30;
          __v.__end_cap_.__value_ = &v29[v28];
          v31 = *(_OWORD *)__p;
          v30->__r_.__value_.__r.__words[2] = v122;
          *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
          __p[1] = 0;
          *(_QWORD *)&v122 = 0;
          __p[0] = 0;
          __v.__end_ = v30 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v110, &__v);
          v32 = v110.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v110.__end_ = v32;
          if (SBYTE7(v122) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v25 = *(_OWORD *)__p;
          v110.__end_->__r_.__value_.__r.__words[2] = v122;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v25;
          v110.__end_ = end + 1;
        }
      }
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v106, v134, 16);
    }
    while (v21);
  }

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)__p, a2);
  memset(&v119, 0, sizeof(v119));
  std::string::append[abi:ne180100]<char const*,0>(&v119.__pn_, "model.espresso.net", "");
  std::__fs::filesystem::operator/[abi:ne180100](&v119, (uint64_t)__p, (std::__fs::filesystem::path *)&__v);
  if (SHIBYTE(__v.__end_) < 0)
  {
    std::string::__init_copy_ctor_external(&v105, (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
  }
  else
  {
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
    v105.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
  }
  if (SHIBYTE(v119.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__pn_.__r_.__value_.__l.__data_);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  v33 = v104;
  objc_opt_class();
  v103 = v33;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    LODWORD(__v.__first_) = 80000;
    Espresso::create_context((Espresso::abstract_engine_factory *)&v130, (int *)&__v);
    if (!v130)
    {
      v96 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](v96, "Unable to create IR context.");
      __cxa_throw(v96, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *((_BYTE *)v130 + 53) = 1;
    Espresso::load_network();
    *(_OWORD *)v125 = 0u;
    v126 = 0u;
    v127 = 1.0;
    *(_OWORD *)__p = 0u;
    v122 = 0u;
    v123 = 0u;
    v124 = 0u;
    objc_msgSend(v33, "outputLayers");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", __p, &__v, 16);
    if (v35)
    {
      v36 = *(_QWORD *)v122;
      do
      {
        for (k = 0; k != v35; ++k)
        {
          if (*(_QWORD *)v122 != v36)
            objc_enumerationMutation(v34);
          std::string::basic_string[abi:ne180100]<0>(&v119, (char *)objc_msgSend(objc_retainAutorelease(*((id *)__p[1] + k)), "UTF8String"));
          v38 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v119);
          v39 = v38;
          v40 = (unint64_t)v125[1];
          if (v125[1])
          {
            v41 = (uint8x8_t)vcnt_s8((int8x8_t)v125[1]);
            v41.i16[0] = vaddlv_u8(v41);
            v42 = v41.u32[0];
            if (v41.u32[0] > 1uLL)
            {
              p_v = v38;
              if ((void *)v38 >= v125[1])
                p_v = v38 % (unint64_t)v125[1];
            }
            else
            {
              p_v = ((unint64_t)v125[1] - 1) & v38;
            }
            v43 = (unsigned __int8 **)*((_QWORD *)v125[0] + p_v);
            if (v43)
            {
              for (m = *v43; m; m = *(unsigned __int8 **)m)
              {
                v45 = *((_QWORD *)m + 1);
                if (v45 == v39)
                {
                  if (std::equal_to<std::string>::operator()[abi:ne180100](m + 16, (unsigned __int8 *)&v119))
                    goto LABEL_88;
                }
                else
                {
                  if (v42 > 1)
                  {
                    if (v45 >= v40)
                      v45 %= v40;
                  }
                  else
                  {
                    v45 &= v40 - 1;
                  }
                  if (v45 != p_v)
                    break;
                }
              }
            }
          }
          v46 = (char *)operator new(0x28uLL);
          *(_QWORD *)v46 = 0;
          *((_QWORD *)v46 + 1) = v39;
          *(std::__fs::filesystem::path *)(v46 + 16) = v119;
          memset(&v119, 0, sizeof(v119));
          v47 = (float)(unint64_t)(*((_QWORD *)&v126 + 1) + 1);
          if (!v40 || (float)(v127 * (float)v40) < v47)
          {
            v48 = (v40 & (v40 - 1)) != 0;
            if (v40 < 3)
              v48 = 1;
            v49 = v48 | (2 * v40);
            v50 = vcvtps_u32_f32(v47 / v127);
            if (v49 <= v50)
              v51 = v50;
            else
              v51 = v49;
            std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)v125, v51);
            v40 = (unint64_t)v125[1];
            if (((unint64_t)v125[1] & ((unint64_t)v125[1] - 1)) != 0)
            {
              if ((void *)v39 >= v125[1])
                p_v = v39 % (unint64_t)v125[1];
              else
                p_v = v39;
            }
            else
            {
              p_v = ((unint64_t)v125[1] - 1) & v39;
            }
          }
          v52 = v125[0];
          v53 = (_QWORD *)*((_QWORD *)v125[0] + p_v);
          if (v53)
          {
            *(_QWORD *)v46 = *v53;
LABEL_86:
            *v53 = v46;
            goto LABEL_87;
          }
          *(_QWORD *)v46 = v126;
          *(_QWORD *)&v126 = v46;
          v52[p_v] = &v126;
          if (*(_QWORD *)v46)
          {
            v54 = *(_QWORD *)(*(_QWORD *)v46 + 8);
            if ((v40 & (v40 - 1)) != 0)
            {
              if (v54 >= v40)
                v54 %= v40;
            }
            else
            {
              v54 &= v40 - 1;
            }
            v53 = (char *)v125[0] + 8 * v54;
            goto LABEL_86;
          }
LABEL_87:
          ++*((_QWORD *)&v126 + 1);
LABEL_88:
          if (SHIBYTE(v119.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v119.__pn_.__r_.__value_.__l.__data_);
        }
        v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", __p, &__v, 16);
      }
      while (v35);
    }

    CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend::WriteModelOutputs((uint64_t *)&v129, v125);
    objc_msgSend(v103, "compilerVersionInfo");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    +[MLVersionInfo versionInfoWithMajor:minor:patch:variant:](MLVersionInfo, "versionInfoWithMajor:minor:patch:variant:", 2, 0, 0, &stru_1E3D68DC8);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v55, "olderThan:", v56))
    {
      v57 = *(_QWORD *)(v129.__r_.__value_.__r.__words[0] + 344) == 0;

      if (v57
        && (objc_msgSend(v103, "copyImagePreprocessingParametersTo:error:", v129.__r_.__value_.__r.__words[0], 0) & 1) == 0)
      {
        v58 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v58, "Failed to process net for upgrade.");
        __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    else
    {

    }
    OArchive::OArchive((uint64_t)&v119, (uint64_t)a2, 0);
    CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend::WriteNetwork((uint64_t)&__s, &v129, (uint64_t)&v119);
    if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__pn_.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(v120);
    v59 = (std::__shared_weak_count *)v119.__pn_.__r_.__value_.__r.__words[2];
    if (v119.__pn_.__r_.__value_.__r.__words[2])
    {
      v60 = (unint64_t *)(v119.__pn_.__r_.__value_.__r.__words[2] + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
    size = (std::__shared_weak_count *)v129.__r_.__value_.__l.__size_;
    if (v129.__r_.__value_.__l.__size_)
    {
      v63 = (unint64_t *)(v129.__r_.__value_.__l.__size_ + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v65 = v131;
    if (v131)
    {
      p_shared_owners = (unint64_t *)&v131->__shared_owners_;
      do
        v67 = __ldaxr(p_shared_owners);
      while (__stlxr(v67 - 1, p_shared_owners));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }

  objc_msgSend(v103, "modelVersionInfo");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v69 = objc_msgSend(v68, "majorVersion");
  v70 = objc_msgSend(v103, "ndArrayInterpretation");
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v119.__pn_, (char *)&v105);
  std::__fs::filesystem::path::parent_path[abi:ne180100](&v119, (uint64_t)v125);
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>((std::string *)&__v, (char **)&kModelMILFileName);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__v, (uint64_t)v125, &__s);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  if ((v119.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v71 = &v119;
  else
    v71 = (std::__fs::filesystem::path *)v119.__pn_.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)v71);
  std::string::basic_string[abi:ne180100]<0>(&v130, "model.mil");
  std::string::basic_string[abi:ne180100]<0>(&v129, "model.espresso.weights");
  memset(&__v, 0, 32);
  LODWORD(__v.__end_cap_.__value_) = 1065353216;
  v72 = espresso_upgrade_net_to_mil();
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table((uint64_t)&__v);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if (v132 < 0)
    operator delete(v130);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  if (v72)
  {
    v94 = __cxa_allocate_exception(0x10uLL);
    last_error = espresso_get_last_error();
    MEMORY[0x1A1AD5E28](v94, last_error);
    __cxa_throw(v94, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v117)
    v73 = 0;
  else
    v73 = v70;
  if ((v73 & 1) == 0)
  {
    if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, __s.__pn_.__r_.__value_.__l.__data_, __s.__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)&__s.__pn_.__r_.__value_.__l.__data_;
      *(_QWORD *)&v122 = *((_QWORD *)&__s.__pn_.__r_.__value_.__l + 2);
    }
    CoreML::NNCompiler::Backend::MIL::LoadProgram((uint64_t)&v128, (uint64_t)__p);
    if (SBYTE7(v122) < 0)
      operator delete(__p[0]);
    v74 = v128.__pn_.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(__p, "main");
    (*(void (**)(void **__return_ptr, std::string::size_type, void **))(*(_QWORD *)v74 + 64))(&v130, v74, __p);
    v76 = v130;
    v75 = v131;
    if (v131)
    {
      v77 = (unint64_t *)&v131->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    if (SBYTE7(v122) < 0)
      operator delete(__p[0]);
    if (v117)
    {
      v79 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v128.__pn_.__r_.__value_.__l.__data_ + 40))(v128.__pn_.__r_.__value_.__r.__words[0]);
      CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetInputDefaultValuesAttribute(v79, (uint64_t)v76, &v115);
    }
    if ((v70 & 1) == 0)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v128.__pn_.__r_.__value_.__l.__data_ + 40))(v128.__pn_.__r_.__value_.__r.__words[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "CoreML_IsRank5ArrayMapping");
      Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
      MIL::IRTensorValueType::MakeBoolValue(Scalar);
      v130 = (void *)v129.__r_.__value_.__r.__words[0];
      if (v129.__r_.__value_.__r.__words[0])
      {
        v81 = (std::__shared_weak_count *)operator new();
        v82 = v129.__r_.__value_.__r.__words[0];
        v81->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C2C0;
        v81->__shared_owners_ = 0;
        v81->__shared_weak_owners_ = 0;
        v81[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
      }
      else
      {
        v81 = 0;
      }
      v131 = v81;
      v129.__r_.__value_.__r.__words[0] = 0;
      MIL::IRObject::SetAttribute();
      v83 = v131;
      if (v131)
      {
        v84 = (unint64_t *)&v131->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v86 = v129.__r_.__value_.__r.__words[0];
      v129.__r_.__value_.__r.__words[0] = 0;
      if (v86)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v86 + 8))(v86);
      if (SBYTE7(v122) < 0)
        operator delete(__p[0]);
    }
    v87 = v128.__pn_.__r_.__value_.__r.__words[0];
    if ((SBYTE7(v126) & 0x80u) == 0)
      v88 = (char *)v125;
    else
      v88 = (char *)v125[0];
    std::string::basic_string[abi:ne180100]<0>(__p, v88);
    if ((SBYTE7(v126) & 0x80u) == 0)
      v89 = (char *)v125;
    else
      v89 = (char *)v125[0];
    std::string::basic_string[abi:ne180100]<0>(&v130, v89);
    CoreML::NNCompiler::Backend::MIL::WriteProgram(v87, v69, (char *)__p, (uint64_t)&v130);
    if (v132 < 0)
      operator delete(v130);
    if (SBYTE7(v122) < 0)
      operator delete(__p[0]);
    v90 = v128.__pn_.__r_.__value_.__r.__words[0];
    v128.__pn_.__r_.__value_.__r.__words[0] = 0;
    if (v90)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v90 + 8))(v90);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v129, (char *)&v105);
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v129, (uint64_t)&v130);
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v128.__pn_, (char **)&kModelMILFileName);
  std::__fs::filesystem::operator/[abi:ne180100](&v128, (uint64_t)&v130, (std::__fs::filesystem::path *)__p);
  if (SBYTE7(v122) < 0)
  {
    std::string::__init_copy_ctor_external(v98, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SBYTE7(v122) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v98->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v98->__r_.__value_.__r.__words[2] = v122;
  }
  if (SHIBYTE(v128.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__pn_.__r_.__value_.__l.__data_);
  if (v132 < 0)
    operator delete(v130);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__pn_.__r_.__value_.__l.__data_);
  if (SBYTE7(v126) < 0)
    operator delete(v125[0]);
  if (SHIBYTE(v119.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__pn_.__r_.__value_.__l.__data_);

  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v110;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v116);

}

void sub_19C908C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a71;
  void *a72;
  void *v72;

  __cxa_free_exception(v72);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a62);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a71);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a72);

  if (a22 < 0)
    operator delete(__p);
  a62 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)a45);

  _Unwind_Resume(a1);
}

void sub_19C9092F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  void *v29;
  uint64_t v30;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v30 - 128);
  if (a16 < 0)
    operator delete(__p);
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)&a17);

  _Unwind_Resume(a1);
}

void sub_19C90952C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
    operator delete(__p);
  google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)&a24);
  _Unwind_Resume(a1);
}

void sub_19C909764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  _QWORD *v36;
  uint64_t v37;
  uint64_t v40;
  void *v41;

  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x1E0DE4F50];
  v40 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  a19 = v40;
  a20 = MEMORY[0x1E0DE4FB8] + 16;
  if (a33 < 0)
    operator delete(a28);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD61C4](&a36);
  if (a2 == 1)
  {
    v41 = __cxa_begin_catch(a1);
    if (v36)
    {
      (*(void (**)(void *))(*(_QWORD *)v41 + 16))(v41);
      +[MLModelErrorUtils IOErrorWithFormat:](MLModelErrorUtils, "IOErrorWithFormat:", CFSTR("%s"));
      *v36 = (id)objc_claimAutoreleasedReturnValue();
    }
    __cxa_end_catch();
    JUMPOUT(0x19C909744);
  }
  _Unwind_Resume(a1);
}

void sub_19C909ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C90A38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C90A588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C90A694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C90A768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C90A9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t buf, __int128 a16, char a17, char a18)
{
  void *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;

  v21 = v20;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
  MPL::ModelPackage::~ModelPackage((MPL::ModelPackage *)&a12);
  if (a2 == 1)
  {
    v24 = __cxa_begin_catch(a1);
    v25 = v24;
    if (v19)
    {
      (*(void (**)(void *))(*(_QWORD *)v24 + 16))(v24);
      +[MLModelErrorUtils IOErrorWithFormat:](MLModelErrorUtils, "IOErrorWithFormat:", CFSTR("Failed to read model package at %@. Error: %s"));
      *v19 = (id)objc_claimAutoreleasedReturnValue();
    }
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = (*(uint64_t (**)(void *))(*(_QWORD *)v25 + 16))(v25);
      LODWORD(buf) = 138412546;
      WORD2(a16) = 2080;
      *(_QWORD *)((char *)&a16 + 6) = v27;
      _os_log_error_impl(&dword_19C486000, v26, OS_LOG_TYPE_ERROR, "Failed to read model package at %@. Error: %s", (uint8_t *)&buf, 0x16u);
    }

    __cxa_end_catch();
    JUMPOUT(0x19C90A97CLL);
  }

  _Unwind_Resume(a1);
}

void sub_19C90AD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

id CoreML::numericArrayToObjC<google::protobuf::RepeatedField<long long>,long long>(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;

  v2 = *((_QWORD *)a1 + 1);
  v3 = v2 + 8;
  v4 = v2 == 0;
  if (v2)
    v5 = v2 + 8;
  else
    v5 = 0;
  v6 = v3 + 8 * *a1;
  if (v4)
    v6 = 0;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", (v6 - v5) >> 3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
    v9 = (_QWORD *)(v8 + 8);
  else
    v9 = 0;
  if (v8)
    v10 = v8 + 8 + 8 * *a1;
  else
    v10 = 0;
  for (; v9 != (_QWORD *)v10; ++v9)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObject:", v11);

  }
  return v7;
}

void sub_19C90AEBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CoreML::Specification::ModelDescription *_ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification16ModelDescriptionENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(CoreML::Specification::ModelDescription **a1)
{
  _QWORD *v2;
  CoreML::Specification::ModelDescription *result;

  v2 = operator new(0xC8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E3D5BC30;
  result = CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)(v2 + 3));
  *a1 = result;
  a1[1] = (CoreML::Specification::ModelDescription *)v2;
  return result;
}

void sub_19C90AF18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::Specification::ModelDescription>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BC30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::Specification::ModelDescription>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BC30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void sub_19C90B640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C90B900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C90BD6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C90BF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a8);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

void sub_19C90C544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v15;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);

  _Unwind_Resume(a1);
}

void sub_19C90C718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C90C79C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C90C860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C90C8EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = v9;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  unint64_t *k;
  unint64_t v21;
  unint64_t v22;
  unint64_t m;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v28;
  double *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t j;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  double v47;
  double v48;
  unint64_t *v49;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  double v57;
  double v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  double v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  double v73;
  double v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  double v80;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  double v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  double v106;
  unint64_t v107;
  unint64_t v108;
  double v109;

LABEL_1:
  v8 = (unint64_t *)(a2 - 16);
  i = (unint64_t)a1;
  while (2)
  {
    a1 = (unint64_t *)i;
    v10 = a2 - i;
    v11 = (uint64_t)(a2 - i) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v45 = *v8;
        v46 = *(_QWORD *)i;
        if (*v8 >= *(_QWORD *)i)
        {
          if (v46 < v45)
            return;
          v48 = *(double *)(a2 - 8);
          v47 = *(double *)(i + 8);
          if (v48 >= v47)
            return;
        }
        else
        {
          v47 = *(double *)(i + 8);
          v48 = *(double *)(a2 - 8);
        }
        *(_QWORD *)i = v45;
        *(_QWORD *)(a2 - 16) = v46;
        *(double *)(i + 8) = v48;
        *(double *)(a2 - 8) = v47;
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)i, (unint64_t *)(i + 16), (unint64_t *)(a2 - 16));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(i, i + 16, i + 32, a2 - 16);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(i, i + 16, i + 32, i + 48, (unint64_t *)(a2 - 16));
        return;
      default:
        if (v10 > 383)
        {
          if (!a3)
          {
            if (i == a2)
              return;
            v64 = (v11 - 2) >> 1;
            v65 = v64;
            while (1)
            {
              v66 = v65;
              if (v64 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = i + 16 * v67;
                if (2 * v66 + 2 < (uint64_t)v11)
                {
                  v69 = *(_QWORD *)(v68 + 16);
                  if (*(_QWORD *)v68 < v69
                    || v69 >= *(_QWORD *)v68 && *(double *)(i + 16 * v67 + 8) < *(double *)(v68 + 24))
                  {
                    v68 += 16;
                    v67 = 2 * v66 + 2;
                  }
                }
                v70 = i + 16 * v66;
                v71 = *(_QWORD *)v68;
                v72 = *(_QWORD *)v70;
                if (*(_QWORD *)v68 >= *(_QWORD *)v70)
                {
                  if (v72 < v71)
                  {
                    v73 = *(double *)(v70 + 8);
                    v74 = *(double *)(v68 + 8);
LABEL_130:
                    *(_QWORD *)v70 = v71;
                    *(double *)(v70 + 8) = v74;
                    if (v64 >= v67)
                    {
                      while (1)
                      {
                        v76 = 2 * v67;
                        v67 = (2 * v67) | 1;
                        v75 = i + 16 * v67;
                        v77 = v76 + 2;
                        if (v77 < (uint64_t)v11)
                        {
                          v78 = *(_QWORD *)(v75 + 16);
                          if (*(_QWORD *)v75 < v78
                            || v78 >= *(_QWORD *)v75 && *(double *)(i + 16 * v67 + 8) < *(double *)(v75 + 24))
                          {
                            v75 += 16;
                            v67 = v77;
                          }
                        }
                        v79 = *(_QWORD *)v75;
                        if (*(_QWORD *)v75 < v72)
                          break;
                        v80 = *(double *)(v75 + 8);
                        if (v72 >= v79 && v80 < v73)
                          break;
                        *(_QWORD *)v68 = v79;
                        *(double *)(v68 + 8) = v80;
                        v68 = v75;
                        if (v64 < v67)
                          goto LABEL_132;
                      }
                    }
                    v75 = v68;
LABEL_132:
                    *(_QWORD *)v75 = v72;
                    *(double *)(v75 + 8) = v73;
                    goto LABEL_133;
                  }
                  v74 = *(double *)(v68 + 8);
                  v73 = *(double *)(i + 16 * v66 + 8);
                  if (v74 >= v73)
                    goto LABEL_130;
                }
              }
LABEL_133:
              v65 = v66 - 1;
              if (!v66)
              {
                v89 = (unint64_t)v10 >> 4;
                while (1)
                {
                  v90 = 0;
                  v91 = *(_QWORD *)i;
                  v92 = *(double *)(i + 8);
                  v93 = v89 - 2;
                  if (v89 < 2)
                    v93 = v89 - 1;
                  v94 = v93 >> 1;
                  v95 = i;
                  do
                  {
                    v96 = (_QWORD *)v95;
                    v97 = v90 + 1;
                    v95 += 16 * (v90 + 1);
                    v98 = 2 * v90;
                    v90 = (2 * v90) | 1;
                    v99 = v98 + 2;
                    if (v99 < v89)
                    {
                      v100 = *(_QWORD *)(v95 + 16);
                      if (*(_QWORD *)v95 < v100
                        || v100 >= *(_QWORD *)v95 && *(double *)&v96[2 * v97 + 1] < *(double *)(v95 + 24))
                      {
                        v95 += 16;
                        v90 = v99;
                      }
                    }
                    *v96 = *(_QWORD *)v95;
                    v96[1] = *(_QWORD *)(v95 + 8);
                  }
                  while (v90 <= v94);
                  if (v95 == a2 - 16)
                    goto LABEL_181;
                  *(_QWORD *)v95 = *(_QWORD *)(a2 - 16);
                  *(_QWORD *)(v95 + 8) = *(_QWORD *)(a2 - 8);
                  *(_QWORD *)(a2 - 16) = v91;
                  *(double *)(a2 - 8) = v92;
                  v101 = v95 - i + 16;
                  if (v101 >= 17)
                    break;
LABEL_182:
                  a2 -= 16;
                  if (v89-- <= 2)
                    return;
                }
                v102 = (v101 >> 4) - 2;
                v103 = v102 >> 1;
                v104 = i + 16 * (v102 >> 1);
                v105 = *(_QWORD *)v104;
                v91 = *(_QWORD *)v95;
                if (*(_QWORD *)v104 >= *(_QWORD *)v95)
                {
                  if (v91 < v105)
                    goto LABEL_182;
                  v106 = *(double *)(i + 16 * v103 + 8);
                  v92 = *(double *)(v95 + 8);
                  if (v106 >= v92)
                    goto LABEL_182;
                }
                else
                {
                  v92 = *(double *)(v95 + 8);
                  v106 = *(double *)(v104 + 8);
                }
                *(_QWORD *)v95 = v105;
                *(double *)(v95 + 8) = v106;
                if (v102 >= 2)
                {
                  while (1)
                  {
                    v107 = v103 - 1;
                    v103 = (v103 - 1) >> 1;
                    v95 = i + 16 * v103;
                    v108 = *(_QWORD *)v95;
                    if (*(_QWORD *)v95 >= v91)
                    {
                      if (v91 < v108)
                        break;
                      v109 = *(double *)(i + 16 * v103 + 8);
                      if (v109 >= v92)
                        break;
                    }
                    else
                    {
                      v109 = *(double *)(v95 + 8);
                    }
                    *(_QWORD *)v104 = v108;
                    *(double *)(v104 + 8) = v109;
                    v104 = i + 16 * v103;
                    if (v107 <= 1)
                      goto LABEL_181;
                  }
                }
                v95 = v104;
LABEL_181:
                *(_QWORD *)v95 = v91;
                *(double *)(v95 + 8) = v92;
                goto LABEL_182;
              }
            }
          }
          v12 = v11 >> 1;
          v13 = (unint64_t *)(i + 16 * (v11 >> 1));
          if ((unint64_t)v10 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(&a1[2 * (v11 >> 1)], a1, (unint64_t *)(a2 - 16));
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, &a1[2 * (v11 >> 1)], (unint64_t *)(a2 - 16));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1 + 2, v13 - 2, (unint64_t *)(a2 - 32));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1 + 4, &a1[2 * v12 + 2], (unint64_t *)(a2 - 48));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v13 - 2, v13, &a1[2 * v12 + 2]);
            v14 = *a1;
            *a1 = *v13;
            *v13 = v14;
            v15 = a1[1];
            a1[1] = v13[1];
            v13[1] = v15;
          }
          --a3;
          v16 = *a1;
          if ((a4 & 1) == 0)
          {
            v17 = *(a1 - 2);
            if (v17 >= v16)
            {
              if (v16 < v17)
              {
                v18 = *((double *)a1 + 1);
              }
              else
              {
                v18 = *((double *)a1 + 1);
                if (*((double *)a1 - 1) < v18)
                  goto LABEL_12;
              }
              v34 = *v8;
              if (v16 >= *v8 && (v34 < v16 || v18 >= *(double *)(a2 - 8)))
              {
                for (i = (unint64_t)(a1 + 2);
                      i < a2 && v16 >= *(_QWORD *)i && (*(_QWORD *)i < v16 || v18 >= *(double *)(i + 8));
              }
              else
              {
                i = (unint64_t)a1;
                do
                {
                  v36 = *(_QWORD *)(i + 16);
                  i += 16;
                  v35 = v36;
                }
                while (v16 >= v36 && (v35 < v16 || v18 >= *(double *)(i + 8)));
              }
              j = a2;
              if (i < a2)
              {
                for (j = a2 - 16; v16 < v34 || v34 >= v16 && v18 < *(double *)(j + 8); j -= 16)
                {
                  v38 = *(_QWORD *)(j - 16);
                  v34 = v38;
                }
              }
              if (i < j)
              {
                v39 = *(_QWORD *)i;
                v40 = *(_QWORD *)j;
                do
                {
                  *(_QWORD *)i = v40;
                  *(_QWORD *)j = v39;
                  v41 = *(_QWORD *)(i + 16);
                  i += 16;
                  v39 = v41;
                  v42 = *(_QWORD *)(i - 8);
                  *(_QWORD *)(i - 8) = *(_QWORD *)(j + 8);
                  *(_QWORD *)(j + 8) = v42;
                  while (v16 >= v39 && (v39 < v16 || v18 >= *(double *)(i + 8)))
                  {
                    v43 = *(_QWORD *)(i + 16);
                    i += 16;
                    v39 = v43;
                  }
                  do
                  {
                    do
                    {
                      v44 = *(_QWORD *)(j - 16);
                      j -= 16;
                      v40 = v44;
                    }
                    while (v16 < v44);
                  }
                  while (v40 >= v16 && v18 < *(double *)(j + 8));
                }
                while (i < j);
              }
              if ((unint64_t *)(i - 16) != a1)
              {
                *a1 = *(_QWORD *)(i - 16);
                a1[1] = *(_QWORD *)(i - 8);
              }
              a4 = 0;
              *(_QWORD *)(i - 16) = v16;
              *(double *)(i - 8) = v18;
              continue;
            }
          }
LABEL_12:
          v19 = *((double *)a1 + 1);
          for (k = a1 + 2; ; k += 2)
          {
            v21 = *k;
            if (*k >= v16 && (v16 < v21 || *((double *)k + 1) >= v19))
              break;
          }
          if (k - 2 == a1)
          {
            m = a2;
            if ((unint64_t)k < a2)
            {
              v25 = *v8;
              m = a2 - 16;
              if (*v8 >= v16)
              {
                m = a2 - 16;
                do
                {
                  if (v16 >= v25)
                  {
                    if (*(double *)(m + 8) < v19 || (unint64_t)k >= m)
                      break;
                  }
                  else if ((unint64_t)k >= m)
                  {
                    break;
                  }
                  v27 = *(_QWORD *)(m - 16);
                  m -= 16;
                  v25 = v27;
                }
                while (v27 >= v16);
              }
            }
          }
          else
          {
            v22 = *v8;
            for (m = a2 - 16; v22 >= v16 && (v16 < v22 || *(double *)(m + 8) >= v19); m -= 16)
            {
              v24 = *(_QWORD *)(m - 16);
              v22 = v24;
            }
          }
          i = (unint64_t)k;
          if ((unint64_t)k < m)
          {
            v28 = *(_QWORD *)m;
            i = (unint64_t)k;
            v29 = (double *)m;
            do
            {
              *(_QWORD *)i = v28;
              *(_QWORD *)v29 = v21;
              v30 = *(_QWORD *)(i + 8);
              *(double *)(i + 8) = v29[1];
              *((_QWORD *)v29 + 1) = v30;
              do
              {
                do
                {
                  v31 = *(_QWORD *)(i + 16);
                  i += 16;
                  v21 = v31;
                }
                while (v31 < v16);
              }
              while (v16 >= v21 && *(double *)(i + 8) < v19);
              do
              {
                v32 = *((_QWORD *)v29 - 2);
                v29 -= 2;
                v28 = v32;
              }
              while (v32 >= v16 && (v16 < v28 || v29[1] >= v19));
            }
            while (i < (unint64_t)v29);
          }
          if ((unint64_t *)(i - 16) != a1)
          {
            *a1 = *(_QWORD *)(i - 16);
            a1[1] = *(_QWORD *)(i - 8);
          }
          *(_QWORD *)(i - 16) = v16;
          *(double *)(i - 8) = v19;
          if ((unint64_t)k < m)
          {
LABEL_49:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,false>(a1, i - 16, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t)a1, i - 16);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(i, a2))
          {
            if (v33)
              continue;
            goto LABEL_49;
          }
          a2 = i - 16;
          if (v33)
            return;
          goto LABEL_1;
        }
        v49 = (unint64_t *)(i + 16);
        v51 = i == a2 || v49 == (unint64_t *)a2;
        if ((a4 & 1) == 0)
        {
          if (v51)
            return;
          while (1)
          {
            v82 = a1;
            a1 = v49;
            v83 = v82[2];
            v84 = *v82;
            if (v83 < *v82)
              break;
            if (v84 >= v83)
            {
              v85 = *((double *)v82 + 3);
              if (v85 < *((double *)v82 + 1))
                goto LABEL_155;
            }
LABEL_159:
            v49 = a1 + 2;
            if (a1 + 2 == (unint64_t *)a2)
              return;
          }
          v85 = *((double *)v82 + 3);
          do
          {
            do
            {
LABEL_155:
              v86 = v82;
              v87 = v84;
              v88 = *(v82 - 2);
              v82 -= 2;
              v84 = v88;
              v82[4] = v87;
              v82[5] = v82[3];
            }
            while (v83 < v88);
          }
          while (v84 >= v83 && v85 < *((double *)v86 - 1));
          *v86 = v83;
          *((double *)v86 + 1) = v85;
          goto LABEL_159;
        }
        if (v51)
          return;
        v52 = 0;
        v53 = i;
        do
        {
          v54 = v53;
          v53 = (unint64_t)v49;
          v55 = *(_QWORD *)(v54 + 16);
          v56 = *(_QWORD *)v54;
          if (v55 >= *(_QWORD *)v54)
          {
            if (v56 < v55)
              goto LABEL_116;
            v57 = *(double *)(v54 + 24);
            v58 = *(double *)(v54 + 8);
            if (v57 >= v58)
              goto LABEL_116;
          }
          else
          {
            v57 = *(double *)(v54 + 24);
            v58 = *(double *)(v54 + 8);
          }
          *(_QWORD *)(v54 + 16) = v56;
          *(double *)(v53 + 8) = v58;
          v59 = i;
          if (v54 == i)
            goto LABEL_115;
          v60 = v52;
          while (1)
          {
            v61 = *(_QWORD *)(i + v60 - 16);
            if (v55 >= v61)
              break;
            v62 = *(double *)(i + v60 - 8);
LABEL_112:
            v54 -= 16;
            v63 = i + v60;
            *(_QWORD *)v63 = v61;
            *(double *)(v63 + 8) = v62;
            v60 -= 16;
            if (!v60)
            {
              v59 = i;
              goto LABEL_115;
            }
          }
          if (v61 >= v55)
          {
            v59 = i + v60;
            v62 = *(double *)(i + v60 - 8);
            if (v57 >= v62)
              goto LABEL_115;
            goto LABEL_112;
          }
          v59 = v54;
LABEL_115:
          *(_QWORD *)v59 = v55;
          *(double *)(v59 + 8) = v57;
LABEL_116:
          v49 = (unint64_t *)(v53 + 16);
          v52 += 16;
        }
        while (v53 + 16 != a2);
        return;
    }
  }
}

  v8 = (__int128 *)(a2 - 2);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = (uint64_t)((uint64_t)a2 - v9) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return *(double *)&v14;
      case 2uLL:
        if (*(_QWORD *)v8 < *(_QWORD *)v9)
        {
          v81 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *v8;
          *(_QWORD *)&v14 = v81;
          *v8 = v81;
        }
        return *(double *)&v14;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)v9, (uint64_t *)(v9 + 16), a2 - 2);
        return *(double *)&v14;
      case 4uLL:
        *(_QWORD *)&v14 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)v9, (uint64_t *)(v9 + 16), (uint64_t *)(v9 + 32), (_OWORD *)a2 - 1).n128_u64[0];
        return *(double *)&v14;
      case 5uLL:
        *(_QWORD *)&v14 = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)v9, (uint64_t *)(v9 + 16), (uint64_t *)(v9 + 32), (__n128 *)(v9 + 48), (__n128 *)a2 - 1).n128_u64[0];
        return *(double *)&v14;
      default:
        if (v10 <= 383)
        {
          v36 = (_QWORD *)(v9 + 16);
          v38 = (_QWORD *)v9 == a2 || v36 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v38)
            {
              v39 = 0;
              v40 = (_QWORD *)v9;
              do
              {
                v41 = v36;
                v42 = v40[2];
                if (v42 < *v40)
                {
                  v43 = v40[3];
                  v44 = v39;
                  while (1)
                  {
                    v14 = *(_OWORD *)(v9 + v44);
                    *(_OWORD *)(v9 + v44 + 16) = v14;
                    if (!v44)
                      break;
                    v45 = *(_QWORD *)(v9 + v44 - 16);
                    v44 -= 16;
                    if (v42 >= v45)
                    {
                      v46 = (_QWORD *)(v9 + v44 + 16);
                      goto LABEL_73;
                    }
                  }
                  v46 = (_QWORD *)v9;
LABEL_73:
                  *v46 = v42;
                  v46[1] = v43;
                }
                v36 = v41 + 2;
                v39 += 16;
                v40 = v41;
              }
              while (v41 + 2 != a2);
            }
          }
          else if (!v38)
          {
            do
            {
              v73 = (uint64_t)v36;
              v74 = *(_QWORD *)(a1 + 16);
              if (v74 < *(_QWORD *)a1)
              {
                v75 = *(_QWORD *)(a1 + 24);
                v76 = v73;
                do
                {
                  v14 = *(_OWORD *)(v76 - 16);
                  *(_OWORD *)v76 = v14;
                  v77 = *(_QWORD *)(v76 - 32);
                  v76 -= 16;
                }
                while (v74 < v77);
                *(_QWORD *)v76 = v74;
                *(_QWORD *)(v76 + 8) = v75;
              }
              v36 = (_QWORD *)(v73 + 16);
              a1 = v73;
            }
            while ((_QWORD *)(v73 + 16) != a2);
          }
          return *(double *)&v14;
        }
        if (!a3)
        {
          if ((_QWORD *)v9 != a2)
          {
            v47 = (v11 - 2) >> 1;
            v48 = v47;
            do
            {
              v49 = v48;
              if (v47 >= v48)
              {
                v50 = (2 * v48) | 1;
                v51 = (_QWORD *)(v9 + 16 * v50);
                if (2 * v49 + 2 >= (uint64_t)v11)
                {
                  v52 = *v51;
                }
                else
                {
                  v52 = v51[2];
                  v53 = *v51 < v52;
                  if (*v51 > v52)
                    v52 = *v51;
                  if (v53)
                  {
                    v51 += 2;
                    v50 = 2 * v49 + 2;
                  }
                }
                v54 = (_QWORD *)(v9 + 16 * v49);
                v55 = *v54;
                if (v52 >= *v54)
                {
                  v56 = v54[1];
                  do
                  {
                    v57 = v54;
                    v54 = v51;
                    *v57 = *(_OWORD *)v51;
                    if (v47 < v50)
                      break;
                    v58 = (2 * v50) | 1;
                    v51 = (_QWORD *)(v9 + 16 * v58);
                    v50 = 2 * v50 + 2;
                    if (v50 >= (uint64_t)v11)
                    {
                      v59 = *v51;
                      v50 = v58;
                    }
                    else
                    {
                      v59 = *v51;
                      v60 = v51[2];
                      if (*v51 <= v60)
                        v59 = v51[2];
                      if (*v51 >= v60)
                        v50 = v58;
                      else
                        v51 += 2;
                    }
                  }
                  while (v59 >= v55);
                  *v54 = v55;
                  v54[1] = v56;
                }
              }
              v48 = v49 - 1;
            }
            while (v49);
            v61 = (unint64_t)v10 >> 4;
            do
            {
              v62 = 0;
              v82 = *(_OWORD *)v9;
              v63 = (_OWORD *)v9;
              do
              {
                v64 = &v63[v62 + 1];
                v65 = (2 * v62) | 1;
                v66 = 2 * v62 + 2;
                if (v66 < v61 && *v64 < v64[2])
                {
                  v64 += 2;
                  v65 = v66;
                }
                *v63 = *(_OWORD *)v64;
                v63 = v64;
                v62 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              a2 -= 2;
              if (v64 == a2)
              {
                *(_QWORD *)&v14 = v82;
                *(_OWORD *)v64 = v82;
              }
              else
              {
                *(_OWORD *)v64 = *(_OWORD *)a2;
                *(_QWORD *)&v14 = v82;
                *(_OWORD *)a2 = v82;
                v67 = (uint64_t)v64 - v9 + 16;
                if (v67 >= 17)
                {
                  v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                  v69 = (_OWORD *)(v9 + 16 * v68);
                  v70 = *v64;
                  if (*(_QWORD *)v69 < *v64)
                  {
                    v71 = v64[1];
                    do
                    {
                      v72 = v64;
                      v64 = v69;
                      v14 = *v69;
                      *v72 = *v69;
                      if (!v68)
                        break;
                      v68 = (v68 - 1) >> 1;
                      v69 = (_OWORD *)(v9 + 16 * v68);
                    }
                    while (*(_QWORD *)v69 < v70);
                    *v64 = v70;
                    v64[1] = v71;
                  }
                }
              }
              v53 = v61-- <= 2;
            }
            while (!v53);
          }
          return *(double *)&v14;
        }
        v12 = v11 >> 1;
        v13 = (uint64_t *)(v9 + 16 * (v11 >> 1));
        if ((unint64_t)v10 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)(a1 + 16 * (v11 >> 1)), (uint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16 * (v11 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)(a1 + 16), v13 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)(a1 + 32), (uint64_t *)(a1 + 16 + 16 * v12), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)v13 - 1, v13, (uint64_t *)(a1 + 16 + 16 * v12));
          v79 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)&v14 = v79;
          *(_OWORD *)v13 = v79;
        }
        --a3;
        v15 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= v15)
        {
          if (v15 >= *(_QWORD *)v8)
          {
            v29 = a1 + 16;
            do
            {
              v9 = v29;
              if (v29 >= (unint64_t)a2)
                break;
              v29 += 16;
            }
            while (v15 >= *(_QWORD *)v9);
          }
          else
          {
            v9 = a1;
            do
            {
              v28 = *(_QWORD *)(v9 + 16);
              v9 += 16;
            }
            while (v15 >= v28);
          }
          v30 = (__int128 *)a2;
          if (v9 < (unint64_t)a2)
          {
            v30 = (__int128 *)a2;
            do
              v31 = *((_QWORD *)v30-- - 2);
            while (v15 < v31);
          }
          v32 = *(_QWORD *)(a1 + 8);
          while (v9 < (unint64_t)v30)
          {
            v80 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *v30;
            *(_QWORD *)&v14 = v80;
            *v30 = v80;
            do
            {
              v33 = *(_QWORD *)(v9 + 16);
              v9 += 16;
            }
            while (v15 >= v33);
            do
              v34 = *((_QWORD *)v30-- - 2);
            while (v15 < v34);
          }
          v35 = (__int128 *)(v9 - 16);
          if (v9 - 16 != a1)
          {
            v14 = *v35;
            *(_OWORD *)a1 = *v35;
          }
          a4 = 0;
          *(_QWORD *)(v9 - 16) = v15;
          *(_QWORD *)(v9 - 8) = v32;
          continue;
        }
        v16 = *(_QWORD *)(a1 + 8);
        v17 = a1;
        do
        {
          v18 = v17;
          v19 = *(_QWORD *)(v17 + 16);
          v17 += 16;
        }
        while (v19 < v15);
        v20 = (__int128 *)a2;
        if (v18 == a1)
        {
          v20 = (__int128 *)a2;
          do
          {
            if (v17 >= (unint64_t)v20)
              break;
            v22 = *((_QWORD *)v20-- - 2);
          }
          while (v22 >= v15);
        }
        else
        {
          do
            v21 = *((_QWORD *)v20-- - 2);
          while (v21 >= v15);
        }
        v9 = v17;
        if (v17 < (unint64_t)v20)
        {
          v23 = v20;
          do
          {
            v24 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *v23;
            *v23 = v24;
            do
            {
              v25 = *(_QWORD *)(v9 + 16);
              v9 += 16;
            }
            while (v25 < v15);
            do
              v26 = *((_QWORD *)v23-- - 2);
            while (v26 >= v15);
          }
          while (v9 < (unint64_t)v23);
        }
        if (v9 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v9 - 16);
        *(_QWORD *)(v9 - 16) = v15;
        *(_QWORD *)(v9 - 8) = v16;
        if (v17 < (unint64_t)v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*,false>(a1, v9 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>(a1, (_QWORD *)(v9 - 16));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>(v9, a2))
        {
          if (v27)
            continue;
          goto LABEL_29;
        }
        a2 = (_QWORD *)(v9 - 16);
        if (!v27)
          goto LABEL_1;
        return *(double *)&v14;
    }
  }
}

  v8 = (__int128 *)(a2 - 2);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = (uint64_t)((uint64_t)a2 - v9) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return *(double *)&v14;
      case 2uLL:
        if (*(_QWORD *)v8 < *(_QWORD *)v9)
        {
          v81 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *v8;
          *(_QWORD *)&v14 = v81;
          *v8 = v81;
        }
        return *(double *)&v14;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)v9, (uint64_t *)(v9 + 16), a2 - 2);
        return *(double *)&v14;
      case 4uLL:
        *(_QWORD *)&v14 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)v9, (uint64_t *)(v9 + 16), (uint64_t *)(v9 + 32), (_OWORD *)a2 - 1).n128_u64[0];
        return *(double *)&v14;
      case 5uLL:
        *(_QWORD *)&v14 = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)v9, (uint64_t *)(v9 + 16), (uint64_t *)(v9 + 32), (__n128 *)(v9 + 48), (__n128 *)a2 - 1).n128_u64[0];
        return *(double *)&v14;
      default:
        if (v10 <= 383)
        {
          v36 = (_QWORD *)(v9 + 16);
          v38 = (_QWORD *)v9 == a2 || v36 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v38)
            {
              v39 = 0;
              v40 = (_QWORD *)v9;
              do
              {
                v41 = v36;
                v42 = v40[2];
                if (v42 < *v40)
                {
                  v43 = v40[3];
                  v44 = v39;
                  while (1)
                  {
                    v14 = *(_OWORD *)(v9 + v44);
                    *(_OWORD *)(v9 + v44 + 16) = v14;
                    if (!v44)
                      break;
                    v45 = *(_QWORD *)(v9 + v44 - 16);
                    v44 -= 16;
                    if (v42 >= v45)
                    {
                      v46 = (_QWORD *)(v9 + v44 + 16);
                      goto LABEL_73;
                    }
                  }
                  v46 = (_QWORD *)v9;
LABEL_73:
                  *v46 = v42;
                  v46[1] = v43;
                }
                v36 = v41 + 2;
                v39 += 16;
                v40 = v41;
              }
              while (v41 + 2 != a2);
            }
          }
          else if (!v38)
          {
            do
            {
              v73 = (uint64_t)v36;
              v74 = *(_QWORD *)(a1 + 16);
              if (v74 < *(_QWORD *)a1)
              {
                v75 = *(_QWORD *)(a1 + 24);
                v76 = v73;
                do
                {
                  v14 = *(_OWORD *)(v76 - 16);
                  *(_OWORD *)v76 = v14;
                  v77 = *(_QWORD *)(v76 - 32);
                  v76 -= 16;
                }
                while (v74 < v77);
                *(_QWORD *)v76 = v74;
                *(_QWORD *)(v76 + 8) = v75;
              }
              v36 = (_QWORD *)(v73 + 16);
              a1 = v73;
            }
            while ((_QWORD *)(v73 + 16) != a2);
          }
          return *(double *)&v14;
        }
        if (!a3)
        {
          if ((_QWORD *)v9 != a2)
          {
            v47 = (v11 - 2) >> 1;
            v48 = v47;
            do
            {
              v49 = v48;
              if (v47 >= v48)
              {
                v50 = (2 * v48) | 1;
                v51 = (_QWORD *)(v9 + 16 * v50);
                if (2 * v49 + 2 >= (uint64_t)v11)
                {
                  v52 = *v51;
                }
                else
                {
                  v52 = v51[2];
                  v53 = *v51 < v52;
                  if (*v51 > v52)
                    v52 = *v51;
                  if (v53)
                  {
                    v51 += 2;
                    v50 = 2 * v49 + 2;
                  }
                }
                v54 = (_QWORD *)(v9 + 16 * v49);
                v55 = *v54;
                if (v52 >= *v54)
                {
                  v56 = v54[1];
                  do
                  {
                    v57 = v54;
                    v54 = v51;
                    *v57 = *(_OWORD *)v51;
                    if (v47 < v50)
                      break;
                    v58 = (2 * v50) | 1;
                    v51 = (_QWORD *)(v9 + 16 * v58);
                    v50 = 2 * v50 + 2;
                    if (v50 >= (uint64_t)v11)
                    {
                      v59 = *v51;
                      v50 = v58;
                    }
                    else
                    {
                      v59 = *v51;
                      v60 = v51[2];
                      if (*v51 <= v60)
                        v59 = v51[2];
                      if (*v51 >= v60)
                        v50 = v58;
                      else
                        v51 += 2;
                    }
                  }
                  while (v59 >= v55);
                  *v54 = v55;
                  v54[1] = v56;
                }
              }
              v48 = v49 - 1;
            }
            while (v49);
            v61 = (unint64_t)v10 >> 4;
            do
            {
              v62 = 0;
              v82 = *(_OWORD *)v9;
              v63 = (_OWORD *)v9;
              do
              {
                v64 = &v63[v62 + 1];
                v65 = (2 * v62) | 1;
                v66 = 2 * v62 + 2;
                if (v66 < v61 && *v64 < v64[2])
                {
                  v64 += 2;
                  v65 = v66;
                }
                *v63 = *(_OWORD *)v64;
                v63 = v64;
                v62 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              a2 -= 2;
              if (v64 == a2)
              {
                *(_QWORD *)&v14 = v82;
                *(_OWORD *)v64 = v82;
              }
              else
              {
                *(_OWORD *)v64 = *(_OWORD *)a2;
                *(_QWORD *)&v14 = v82;
                *(_OWORD *)a2 = v82;
                v67 = (uint64_t)v64 - v9 + 16;
                if (v67 >= 17)
                {
                  v68 = (((unint64_t)v67 >> 4) - 2) >> 1;
                  v69 = (_OWORD *)(v9 + 16 * v68);
                  v70 = *v64;
                  if (*(_QWORD *)v69 < *v64)
                  {
                    v71 = v64[1];
                    do
                    {
                      v72 = v64;
                      v64 = v69;
                      v14 = *v69;
                      *v72 = *v69;
                      if (!v68)
                        break;
                      v68 = (v68 - 1) >> 1;
                      v69 = (_OWORD *)(v9 + 16 * v68);
                    }
                    while (*(_QWORD *)v69 < v70);
                    *v64 = v70;
                    v64[1] = v71;
                  }
                }
              }
              v53 = v61-- <= 2;
            }
            while (!v53);
          }
          return *(double *)&v14;
        }
        v12 = v11 >> 1;
        v13 = (uint64_t *)(v9 + 16 * (v11 >> 1));
        if ((unint64_t)v10 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)(a1 + 16 * (v11 >> 1)), (uint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)a1, (uint64_t *)(a1 + 16 * (v11 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)(a1 + 16), v13 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)(a1 + 32), (uint64_t *)(a1 + 16 + 16 * v12), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,double> const*>*>((__int128 *)v13 - 1, v13, (uint64_t *)(a1 + 16 + 16 * v12));
          v79 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)&v14 = v79;
          *(_OWORD *)v13 = v79;
        }
        --a3;
        v15 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= v15)
        {
          if (v15 >= *(_QWORD *)v8)
          {
            v29 = a1 + 16;
            do
            {
              v9 = v29;
              if (v29 >= (unint64_t)a2)
                break;
              v29 += 16;
            }
            while (v15 >= *(_QWORD *)v9);
          }
          else
          {
            v9 = a1;
            do
            {
              v28 = *(_QWORD *)(v9 + 16);
              v9 += 16;
            }
            while (v15 >= v28);
          }
          v30 = (__int128 *)a2;
          if (v9 < (unint64_t)a2)
          {
            v30 = (__int128 *)a2;
            do
              v31 = *((_QWORD *)v30-- - 2);
            while (v15 < v31);
          }
          v32 = *(_QWORD *)(a1 + 8);
          while (v9 < (unint64_t)v30)
          {
            v80 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *v30;
            *(_QWORD *)&v14 = v80;
            *v30 = v80;
            do
            {
              v33 = *(_QWORD *)(v9 + 16);
              v9 += 16;
            }
            while (v15 >= v33);
            do
              v34 = *((_QWORD *)v30-- - 2);
            while (v15 < v34);
          }
          v35 = (__int128 *)(v9 - 16);
          if (v9 - 16 != a1)
          {
            v14 = *v35;
            *(_OWORD *)a1 = *v35;
          }
          a4 = 0;
          *(_QWORD *)(v9 - 16) = v15;
          *(_QWORD *)(v9 - 8) = v32;
          continue;
        }
        v16 = *(_QWORD *)(a1 + 8);
        v17 = a1;
        do
        {
          v18 = v17;
          v19 = *(_QWORD *)(v17 + 16);
          v17 += 16;
        }
        while (v19 < v15);
        v20 = (__int128 *)a2;
        if (v18 == a1)
        {
          v20 = (__int128 *)a2;
          do
          {
            if (v17 >= (unint64_t)v20)
              break;
            v22 = *((_QWORD *)v20-- - 2);
          }
          while (v22 >= v15);
        }
        else
        {
          do
            v21 = *((_QWORD *)v20-- - 2);
          while (v21 >= v15);
        }
        v9 = v17;
        if (v17 < (unint64_t)v20)
        {
          v23 = v20;
          do
          {
            v24 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *v23;
            *v23 = v24;
            do
            {
              v25 = *(_QWORD *)(v9 + 16);
              v9 += 16;
            }
            while (v25 < v15);
            do
              v26 = *((_QWORD *)v23-- - 2);
            while (v26 >= v15);
          }
          while (v9 < (unint64_t)v23);
        }
        if (v9 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v9 - 16);
        *(_QWORD *)(v9 - 16) = v15;
        *(_QWORD *)(v9 - 8) = v16;
        if (v17 < (unint64_t)v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,std::string> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,std::string> const*>*,false>(a1, v9 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,std::string> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,std::string> const*>*>(a1, (_QWORD *)(v9 - 16));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByFirstField<google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,std::string> const*>> &,google::protobuf::internal::SortItem<long long,google::protobuf::MapPair<long long,std::string> const*>*>(v9, a2))
        {
          if (v27)
            continue;
          goto LABEL_29;
        }
        a2 = (_QWORD *)(v9 - 16);
        if (!v27)
          goto LABEL_1;
        return *(double *)&v14;
    }
  }
}

  v8 = (unint64_t *)(a2 - 16);
  i = (unint64_t)a1;
  while (2)
  {
    a1 = (unint64_t *)i;
    v10 = a2 - i;
    v11 = (uint64_t)(a2 - i) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v45 = *v8;
        v46 = *(_QWORD *)i;
        if (*v8 >= *(_QWORD *)i)
        {
          if (v46 < v45)
            return;
          v48 = *(double *)(a2 - 8);
          v47 = *(double *)(i + 8);
          if (v48 >= v47)
            return;
        }
        else
        {
          v47 = *(double *)(i + 8);
          v48 = *(double *)(a2 - 8);
        }
        *(_QWORD *)i = v45;
        *(_QWORD *)(a2 - 16) = v46;
        *(double *)(i + 8) = v48;
        *(double *)(a2 - 8) = v47;
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)i, (unint64_t *)(i + 16), (unint64_t *)(a2 - 16));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(i, i + 16, i + 32, a2 - 16);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(i, i + 16, i + 32, i + 48, (unint64_t *)(a2 - 16));
        return;
      default:
        if (v10 > 383)
        {
          if (!a3)
          {
            if (i == a2)
              return;
            v64 = (v11 - 2) >> 1;
            v65 = v64;
            while (1)
            {
              v66 = v65;
              if (v64 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = i + 16 * v67;
                if (2 * v66 + 2 < (uint64_t)v11)
                {
                  v69 = *(_QWORD *)(v68 + 16);
                  if (*(_QWORD *)v68 < v69
                    || v69 >= *(_QWORD *)v68 && *(double *)(i + 16 * v67 + 8) < *(double *)(v68 + 24))
                  {
                    v68 += 16;
                    v67 = 2 * v66 + 2;
                  }
                }
                v70 = i + 16 * v66;
                v71 = *(_QWORD *)v68;
                v72 = *(_QWORD *)v70;
                if (*(_QWORD *)v68 >= *(_QWORD *)v70)
                {
                  if (v72 < v71)
                  {
                    v73 = *(double *)(v70 + 8);
                    v74 = *(double *)(v68 + 8);
LABEL_130:
                    *(_QWORD *)v70 = v71;
                    *(double *)(v70 + 8) = v74;
                    if (v64 >= v67)
                    {
                      while (1)
                      {
                        v76 = 2 * v67;
                        v67 = (2 * v67) | 1;
                        v75 = i + 16 * v67;
                        v77 = v76 + 2;
                        if (v77 < (uint64_t)v11)
                        {
                          v78 = *(_QWORD *)(v75 + 16);
                          if (*(_QWORD *)v75 < v78
                            || v78 >= *(_QWORD *)v75 && *(double *)(i + 16 * v67 + 8) < *(double *)(v75 + 24))
                          {
                            v75 += 16;
                            v67 = v77;
                          }
                        }
                        v79 = *(_QWORD *)v75;
                        if (*(_QWORD *)v75 < v72)
                          break;
                        v80 = *(double *)(v75 + 8);
                        if (v72 >= v79 && v80 < v73)
                          break;
                        *(_QWORD *)v68 = v79;
                        *(double *)(v68 + 8) = v80;
                        v68 = v75;
                        if (v64 < v67)
                          goto LABEL_132;
                      }
                    }
                    v75 = v68;
LABEL_132:
                    *(_QWORD *)v75 = v72;
                    *(double *)(v75 + 8) = v73;
                    goto LABEL_133;
                  }
                  v74 = *(double *)(v68 + 8);
                  v73 = *(double *)(i + 16 * v66 + 8);
                  if (v74 >= v73)
                    goto LABEL_130;
                }
              }
LABEL_133:
              v65 = v66 - 1;
              if (!v66)
              {
                v89 = (unint64_t)v10 >> 4;
                while (1)
                {
                  v90 = 0;
                  v91 = *(_QWORD *)i;
                  v92 = *(double *)(i + 8);
                  v93 = v89 - 2;
                  if (v89 < 2)
                    v93 = v89 - 1;
                  v94 = v93 >> 1;
                  v95 = i;
                  do
                  {
                    v96 = (_QWORD *)v95;
                    v97 = v90 + 1;
                    v95 += 16 * (v90 + 1);
                    v98 = 2 * v90;
                    v90 = (2 * v90) | 1;
                    v99 = v98 + 2;
                    if (v99 < v89)
                    {
                      v100 = *(_QWORD *)(v95 + 16);
                      if (*(_QWORD *)v95 < v100
                        || v100 >= *(_QWORD *)v95 && *(double *)&v96[2 * v97 + 1] < *(double *)(v95 + 24))
                      {
                        v95 += 16;
                        v90 = v99;
                      }
                    }
                    *v96 = *(_QWORD *)v95;
                    v96[1] = *(_QWORD *)(v95 + 8);
                  }
                  while (v90 <= v94);
                  if (v95 == a2 - 16)
                    goto LABEL_181;
                  *(_QWORD *)v95 = *(_QWORD *)(a2 - 16);
                  *(_QWORD *)(v95 + 8) = *(_QWORD *)(a2 - 8);
                  *(_QWORD *)(a2 - 16) = v91;
                  *(double *)(a2 - 8) = v92;
                  v101 = v95 - i + 16;
                  if (v101 >= 17)
                    break;
LABEL_182:
                  a2 -= 16;
                  if (v89-- <= 2)
                    return;
                }
                v102 = (v101 >> 4) - 2;
                v103 = v102 >> 1;
                v104 = i + 16 * (v102 >> 1);
                v105 = *(_QWORD *)v104;
                v91 = *(_QWORD *)v95;
                if (*(_QWORD *)v104 >= *(_QWORD *)v95)
                {
                  if (v91 < v105)
                    goto LABEL_182;
                  v106 = *(double *)(i + 16 * v103 + 8);
                  v92 = *(double *)(v95 + 8);
                  if (v106 >= v92)
                    goto LABEL_182;
                }
                else
                {
                  v92 = *(double *)(v95 + 8);
                  v106 = *(double *)(v104 + 8);
                }
                *(_QWORD *)v95 = v105;
                *(double *)(v95 + 8) = v106;
                if (v102 >= 2)
                {
                  while (1)
                  {
                    v107 = v103 - 1;
                    v103 = (v103 - 1) >> 1;
                    v95 = i + 16 * v103;
                    v108 = *(_QWORD *)v95;
                    if (*(_QWORD *)v95 >= v91)
                    {
                      if (v91 < v108)
                        break;
                      v109 = *(double *)(i + 16 * v103 + 8);
                      if (v109 >= v92)
                        break;
                    }
                    else
                    {
                      v109 = *(double *)(v95 + 8);
                    }
                    *(_QWORD *)v104 = v108;
                    *(double *)(v104 + 8) = v109;
                    v104 = i + 16 * v103;
                    if (v107 <= 1)
                      goto LABEL_181;
                  }
                }
                v95 = v104;
LABEL_181:
                *(_QWORD *)v95 = v91;
                *(double *)(v95 + 8) = v92;
                goto LABEL_182;
              }
            }
          }
          v12 = v11 >> 1;
          v13 = (unint64_t *)(i + 16 * (v11 >> 1));
          if ((unint64_t)v10 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(&a1[2 * (v11 >> 1)], a1, (unint64_t *)(a2 - 16));
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, &a1[2 * (v11 >> 1)], (unint64_t *)(a2 - 16));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1 + 2, v13 - 2, (unint64_t *)(a2 - 32));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1 + 4, &a1[2 * v12 + 2], (unint64_t *)(a2 - 48));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v13 - 2, v13, &a1[2 * v12 + 2]);
            v14 = *a1;
            *a1 = *v13;
            *v13 = v14;
            v15 = a1[1];
            a1[1] = v13[1];
            v13[1] = v15;
          }
          --a3;
          v16 = *a1;
          if ((a4 & 1) == 0)
          {
            v17 = *(a1 - 2);
            if (v17 >= v16)
            {
              if (v16 < v17)
              {
                v18 = *((double *)a1 + 1);
              }
              else
              {
                v18 = *((double *)a1 + 1);
                if (*((double *)a1 - 1) < v18)
                  goto LABEL_12;
              }
              v34 = *v8;
              if (v16 >= *v8 && (v34 < v16 || v18 >= *(double *)(a2 - 8)))
              {
                for (i = (unint64_t)(a1 + 2);
                      i < a2 && v16 >= *(_QWORD *)i && (*(_QWORD *)i < v16 || v18 >= *(double *)(i + 8));
              }
              else
              {
                i = (unint64_t)a1;
                do
                {
                  v36 = *(_QWORD *)(i + 16);
                  i += 16;
                  v35 = v36;
                }
                while (v16 >= v36 && (v35 < v16 || v18 >= *(double *)(i + 8)));
              }
              j = a2;
              if (i < a2)
              {
                for (j = a2 - 16; v16 < v34 || v34 >= v16 && v18 < *(double *)(j + 8); j -= 16)
                {
                  v38 = *(_QWORD *)(j - 16);
                  v34 = v38;
                }
              }
              if (i < j)
              {
                v39 = *(_QWORD *)i;
                v40 = *(_QWORD *)j;
                do
                {
                  *(_QWORD *)i = v40;
                  *(_QWORD *)j = v39;
                  v41 = *(_QWORD *)(i + 16);
                  i += 16;
                  v39 = v41;
                  v42 = *(_QWORD *)(i - 8);
                  *(_QWORD *)(i - 8) = *(_QWORD *)(j + 8);
                  *(_QWORD *)(j + 8) = v42;
                  while (v16 >= v39 && (v39 < v16 || v18 >= *(double *)(i + 8)))
                  {
                    v43 = *(_QWORD *)(i + 16);
                    i += 16;
                    v39 = v43;
                  }
                  do
                  {
                    do
                    {
                      v44 = *(_QWORD *)(j - 16);
                      j -= 16;
                      v40 = v44;
                    }
                    while (v16 < v44);
                  }
                  while (v40 >= v16 && v18 < *(double *)(j + 8));
                }
                while (i < j);
              }
              if ((unint64_t *)(i - 16) != a1)
              {
                *a1 = *(_QWORD *)(i - 16);
                a1[1] = *(_QWORD *)(i - 8);
              }
              a4 = 0;
              *(_QWORD *)(i - 16) = v16;
              *(double *)(i - 8) = v18;
              continue;
            }
          }
LABEL_12:
          v19 = *((double *)a1 + 1);
          for (k = a1 + 2; ; k += 2)
          {
            v21 = *k;
            if (*k >= v16 && (v16 < v21 || *((double *)k + 1) >= v19))
              break;
          }
          if (k - 2 == a1)
          {
            m = a2;
            if ((unint64_t)k < a2)
            {
              v25 = *v8;
              m = a2 - 16;
              if (*v8 >= v16)
              {
                m = a2 - 16;
                do
                {
                  if (v16 >= v25)
                  {
                    if (*(double *)(m + 8) < v19 || (unint64_t)k >= m)
                      break;
                  }
                  else if ((unint64_t)k >= m)
                  {
                    break;
                  }
                  v27 = *(_QWORD *)(m - 16);
                  m -= 16;
                  v25 = v27;
                }
                while (v27 >= v16);
              }
            }
          }
          else
          {
            v22 = *v8;
            for (m = a2 - 16; v22 >= v16 && (v16 < v22 || *(double *)(m + 8) >= v19); m -= 16)
            {
              v24 = *(_QWORD *)(m - 16);
              v22 = v24;
            }
          }
          i = (unint64_t)k;
          if ((unint64_t)k < m)
          {
            v28 = *(_QWORD *)m;
            i = (unint64_t)k;
            v29 = (double *)m;
            do
            {
              *(_QWORD *)i = v28;
              *(_QWORD *)v29 = v21;
              v30 = *(_QWORD *)(i + 8);
              *(double *)(i + 8) = v29[1];
              *((_QWORD *)v29 + 1) = v30;
              do
              {
                do
                {
                  v31 = *(_QWORD *)(i + 16);
                  i += 16;
                  v21 = v31;
                }
                while (v31 < v16);
              }
              while (v16 >= v21 && *(double *)(i + 8) < v19);
              do
              {
                v32 = *((_QWORD *)v29 - 2);
                v29 -= 2;
                v28 = v32;
              }
              while (v32 >= v16 && (v16 < v28 || v29[1] >= v19));
            }
            while (i < (unint64_t)v29);
          }
          if ((unint64_t *)(i - 16) != a1)
          {
            *a1 = *(_QWORD *)(i - 16);
            a1[1] = *(_QWORD *)(i - 8);
          }
          *(_QWORD *)(i - 16) = v16;
          *(double *)(i - 8) = v19;
          if ((unint64_t)k < m)
          {
LABEL_49:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *,false>(a1, i - 16, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *>((uint64_t)a1, i - 16);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *>(i, a2))
          {
            if (v33)
              continue;
            goto LABEL_49;
          }
          a2 = i - 16;
          if (v33)
            return;
          goto LABEL_1;
        }
        v49 = (unint64_t *)(i + 16);
        v51 = i == a2 || v49 == (unint64_t *)a2;
        if ((a4 & 1) == 0)
        {
          if (v51)
            return;
          while (1)
          {
            v82 = a1;
            a1 = v49;
            v83 = v82[2];
            v84 = *v82;
            if (v83 < *v82)
              break;
            if (v84 >= v83)
            {
              v85 = *((double *)v82 + 3);
              if (v85 < *((double *)v82 + 1))
                goto LABEL_155;
            }
LABEL_159:
            v49 = a1 + 2;
            if (a1 + 2 == (unint64_t *)a2)
              return;
          }
          v85 = *((double *)v82 + 3);
          do
          {
            do
            {
LABEL_155:
              v86 = v82;
              v87 = v84;
              v88 = *(v82 - 2);
              v82 -= 2;
              v84 = v88;
              v82[4] = v87;
              v82[5] = v82[3];
            }
            while (v83 < v88);
          }
          while (v84 >= v83 && v85 < *((double *)v86 - 1));
          *v86 = v83;
          *((double *)v86 + 1) = v85;
          goto LABEL_159;
        }
        if (v51)
          return;
        v52 = 0;
        v53 = i;
        do
        {
          v54 = v53;
          v53 = (unint64_t)v49;
          v55 = *(_QWORD *)(v54 + 16);
          v56 = *(_QWORD *)v54;
          if (v55 >= *(_QWORD *)v54)
          {
            if (v56 < v55)
              goto LABEL_116;
            v57 = *(double *)(v54 + 24);
            v58 = *(double *)(v54 + 8);
            if (v57 >= v58)
              goto LABEL_116;
          }
          else
          {
            v57 = *(double *)(v54 + 24);
            v58 = *(double *)(v54 + 8);
          }
          *(_QWORD *)(v54 + 16) = v56;
          *(double *)(v53 + 8) = v58;
          v59 = i;
          if (v54 == i)
            goto LABEL_115;
          v60 = v52;
          while (1)
          {
            v61 = *(_QWORD *)(i + v60 - 16);
            if (v55 >= v61)
              break;
            v62 = *(double *)(i + v60 - 8);
LABEL_112:
            v54 -= 16;
            v63 = i + v60;
            *(_QWORD *)v63 = v61;
            *(double *)(v63 + 8) = v62;
            v60 -= 16;
            if (!v60)
            {
              v59 = i;
              goto LABEL_115;
            }
          }
          if (v61 >= v55)
          {
            v59 = i + v60;
            v62 = *(double *)(i + v60 - 8);
            if (v57 >= v62)
              goto LABEL_115;
            goto LABEL_112;
          }
          v59 = v54;
LABEL_115:
          *(_QWORD *)v59 = v55;
          *(double *)(v59 + 8) = v57;
LABEL_116:
          v49 = (unint64_t *)(v53 + 16);
          v52 += 16;
        }
        while (v53 + 16 != a2);
        return;
    }
  }
}

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unint64_t v17;
  double v18;

  v3 = *a2;
  v4 = *result;
  if (*a2 >= *result && (v4 < v3 || *((double *)a2 + 1) >= *((double *)result + 1)))
  {
    v8 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v8)
        return result;
      v10 = *((double *)a3 + 1);
      v9 = *((double *)a2 + 1);
      if (v10 >= v9)
        return result;
    }
    else
    {
      v9 = *((double *)a2 + 1);
      v10 = *((double *)a3 + 1);
    }
    *a2 = v8;
    *a3 = v3;
    *((double *)a2 + 1) = v10;
    *((double *)a3 + 1) = v9;
    v11 = *a2;
    v12 = *result;
    if (*a2 >= *result)
    {
      if (v12 < v11)
        return result;
      v14 = *((double *)a2 + 1);
      v13 = *((double *)result + 1);
      if (v14 >= v13)
        return result;
    }
    else
    {
      v13 = *((double *)result + 1);
      v14 = *((double *)a2 + 1);
    }
    *result = v11;
    *a2 = v12;
    *((double *)result + 1) = v14;
    *((double *)a2 + 1) = v13;
    return result;
  }
  v5 = *a3;
  if (*a3 < v3)
  {
    v6 = *((double *)a3 + 1);
LABEL_6:
    *result = v5;
    *a3 = v4;
    v7 = result[1];
    *((double *)result + 1) = v6;
    a3[1] = v7;
    return result;
  }
  if (v3 >= v5)
  {
    v6 = *((double *)a3 + 1);
    v15 = *((double *)a2 + 1);
    if (v6 < v15)
      goto LABEL_6;
  }
  else
  {
    v15 = *((double *)a2 + 1);
  }
  *result = v3;
  *a2 = v4;
  v16 = *((double *)result + 1);
  *((double *)result + 1) = v15;
  *((double *)a2 + 1) = v16;
  v17 = *a3;
  if (*a3 < v4)
  {
    v18 = *((double *)a3 + 1);
LABEL_24:
    *a2 = v17;
    *a3 = v4;
    *((double *)a2 + 1) = v18;
    *((double *)a3 + 1) = v16;
    return result;
  }
  if (v4 >= v17)
  {
    v18 = *((double *)a3 + 1);
    if (v18 < v16)
      goto LABEL_24;
  }
  return result;
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  double v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  v9 = *(_QWORD *)a4;
  v10 = *(_QWORD *)a3;
  if (*(_QWORD *)a4 >= *(_QWORD *)a3)
  {
    if (v10 < v9)
      return result;
    v12 = *(double *)(a4 + 8);
    v11 = *(double *)(a3 + 8);
    if (v12 >= v11)
      return result;
  }
  else
  {
    v11 = *(double *)(a3 + 8);
    v12 = *(double *)(a4 + 8);
  }
  *(_QWORD *)a3 = v9;
  *(_QWORD *)a4 = v10;
  *(double *)(a3 + 8) = v12;
  *(double *)(a4 + 8) = v11;
  v13 = *(_QWORD *)a3;
  v14 = *(_QWORD *)a2;
  if (*(_QWORD *)a3 >= *(_QWORD *)a2)
  {
    if (v14 < v13)
      return result;
    v16 = *(double *)(a3 + 8);
    v15 = *(double *)(a2 + 8);
    if (v16 >= v15)
      return result;
  }
  else
  {
    v15 = *(double *)(a2 + 8);
    v16 = *(double *)(a3 + 8);
  }
  *(_QWORD *)a2 = v13;
  *(_QWORD *)a3 = v14;
  *(double *)(a2 + 8) = v16;
  *(double *)(a3 + 8) = v15;
  v17 = *(_QWORD *)a2;
  v18 = *(_QWORD *)a1;
  if (*(_QWORD *)a2 < *(_QWORD *)a1)
  {
    v19 = *(double *)(a1 + 8);
    v20 = *(double *)(a2 + 8);
LABEL_15:
    *(_QWORD *)a1 = v17;
    *(_QWORD *)a2 = v18;
    *(double *)(a1 + 8) = v20;
    *(double *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    v20 = *(double *)(a2 + 8);
    v19 = *(double *)(a1 + 8);
    if (v20 < v19)
      goto LABEL_15;
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  double result;
  unint64_t v11;
  unint64_t v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  double v22;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *(_QWORD *)a4;
  if (*a5 >= *(_QWORD *)a4)
  {
    if (v12 < v11)
      return result;
    v13 = *((double *)a5 + 1);
    result = *(double *)(a4 + 8);
    if (v13 >= result)
      return result;
  }
  else
  {
    result = *(double *)(a4 + 8);
    v13 = *((double *)a5 + 1);
  }
  *(_QWORD *)a4 = v11;
  *a5 = v12;
  *(double *)(a4 + 8) = v13;
  *((double *)a5 + 1) = result;
  v14 = *(_QWORD *)a4;
  v15 = *(_QWORD *)a3;
  if (*(_QWORD *)a4 >= *(_QWORD *)a3)
  {
    if (v15 < v14)
      return result;
    v16 = *(double *)(a4 + 8);
    result = *(double *)(a3 + 8);
    if (v16 >= result)
      return result;
  }
  else
  {
    result = *(double *)(a3 + 8);
    v16 = *(double *)(a4 + 8);
  }
  *(_QWORD *)a3 = v14;
  *(_QWORD *)a4 = v15;
  *(double *)(a3 + 8) = v16;
  *(double *)(a4 + 8) = result;
  v17 = *(_QWORD *)a3;
  v18 = *(_QWORD *)a2;
  if (*(_QWORD *)a3 >= *(_QWORD *)a2)
  {
    if (v18 < v17)
      return result;
    v19 = *(double *)(a3 + 8);
    result = *(double *)(a2 + 8);
    if (v19 >= result)
      return result;
  }
  else
  {
    result = *(double *)(a2 + 8);
    v19 = *(double *)(a3 + 8);
  }
  *(_QWORD *)a2 = v17;
  *(_QWORD *)a3 = v18;
  *(double *)(a2 + 8) = v19;
  *(double *)(a3 + 8) = result;
  v20 = *(_QWORD *)a2;
  v21 = *(_QWORD *)a1;
  if (*(_QWORD *)a2 < *(_QWORD *)a1)
  {
    result = *(double *)(a1 + 8);
    v22 = *(double *)(a2 + 8);
LABEL_9:
    *(_QWORD *)a1 = v20;
    *(_QWORD *)a2 = v21;
    *(double *)(a1 + 8) = v22;
    *(double *)(a2 + 8) = result;
    return result;
  }
  if (v21 >= v20)
  {
    v22 = *(double *)(a2 + 8);
    result = *(double *)(a1 + 8);
    if (v22 < result)
      goto LABEL_9;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)(a2 - 16);
      v7 = *(_QWORD *)a1;
      if (v6 < *(_QWORD *)a1)
      {
        v8 = *(double *)(a1 + 8);
        v9 = *(double *)(a2 - 8);
LABEL_30:
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a2 - 16) = v7;
        *(double *)(a1 + 8) = v9;
        *(double *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v9 = *(double *)(a2 - 8);
        v8 = *(double *)(a1 + 8);
        if (v9 < v8)
          goto LABEL_30;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a1 + 48, (unint64_t *)(a2 - 16));
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *(_QWORD *)v11;
  v15 = *(_QWORD *)v10;
  if (*(_QWORD *)v11 >= *(_QWORD *)v10)
  {
    if (v15 < v14)
      goto LABEL_21;
    v16 = *(double *)(v11 + 8);
    v17 = *(double *)(v10 + 8);
    if (v16 >= v17)
      goto LABEL_21;
  }
  else
  {
    v16 = *(double *)(v11 + 8);
    v17 = *(double *)(v10 + 8);
  }
  *(_QWORD *)v11 = v15;
  *(double *)(v11 + 8) = v17;
  v18 = a1;
  if (v10 == a1)
    goto LABEL_20;
  v19 = v12;
  while (1)
  {
    v20 = a1 + v19;
    v21 = *(_QWORD *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        v18 = v10;
        goto LABEL_20;
      }
      v22 = *(double *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        v18 = a1 + v19 + 32;
LABEL_20:
        *(_QWORD *)v18 = v14;
        *(double *)(v18 + 8) = v16;
        if (++v13 == 8)
          return v11 + 16 == a2;
LABEL_21:
        v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *(double *)(v20 + 24);
    }
    v10 -= 16;
    *(_QWORD *)(v20 + 32) = v21;
    *(double *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      v18 = a1;
      goto LABEL_20;
    }
  }
}

void std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BBC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BBC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void **v3;

  v3 = (void **)(a1 + 248);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(*(_QWORD **)(a1 + 56));
  std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(*(_QWORD **)(a1 + 32));
}

void std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void CoreML::Recommender::Internal::ItemSimilarityModel::~ItemSimilarityModel(CoreML::Archiver::MMappedContentManager **this)
{
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 20);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 13);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6);
}

uint64_t **CoreML::NNCompiler::Frontend::ParseOptionalInputDefaults(uint64_t **this, const CoreML::Specification::ModelDescription *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  double v16;
  float v17;
  int v18;
  int v19;
  __int128 *v20;

  this[1] = 0;
  this[2] = 0;
  *this = (uint64_t *)(this + 1);
  if (a3)
    v3 = (uint64_t *)(a3 + 8);
  else
    v3 = 0;
  if ((_DWORD)a2)
  {
    v4 = this;
    v5 = 8 * (int)a2;
    while (1)
    {
      v6 = *v3;
      v7 = *(uint64_t **)(*v3 + 32);
      if (!v7)
        v7 = &CoreML::Specification::_FeatureType_default_instance_;
      if (!*((_BYTE *)v7 + 16))
        goto LABEL_42;
      if (*((_DWORD *)v7 + 9) == 5)
      {
        v8 = (uint64_t *)v7[3];
      }
      else
      {
        this = (uint64_t **)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)this);
        v8 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      v9 = *((_DWORD *)v8 + 16);
      if (v9 == 41)
        break;
      if (v9 == 51)
      {
        v14 = *(uint64_t **)(v6 + 32);
        if (!v14)
          v14 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v14 + 9) == 5)
        {
          v15 = (uint64_t *)v14[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)this);
          v15 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        v19 = 0;
        if (*((_DWORD *)v15 + 16) == 51)
          v19 = *((_DWORD *)v15 + 12);
        v20 = *(__int128 **)(v6 + 16);
        this = (uint64_t **)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v20, &v20);
        *((_DWORD *)this + 14) = v19;
        goto LABEL_42;
      }
      if (v9 == 61)
      {
        v10 = *(uint64_t **)(v6 + 32);
        if (!v10)
          v10 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v10 + 9) == 5)
        {
          v11 = (uint64_t *)v10[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)this);
          v11 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        v16 = 0.0;
        if (*((_DWORD *)v11 + 16) == 61)
          v16 = *((double *)v11 + 6);
        v20 = *(__int128 **)(v6 + 16);
        this = (uint64_t **)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v20, &v20);
        v17 = v16;
LABEL_41:
        *((float *)this + 14) = v17;
        goto LABEL_42;
      }
      v20 = *(__int128 **)(v6 + 16);
      this = (uint64_t **)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v20, &v20);
      *((_DWORD *)this + 14) = 0;
LABEL_42:
      ++v3;
      v5 -= 8;
      if (!v5)
        return this;
    }
    v12 = *(uint64_t **)(v6 + 32);
    if (!v12)
      v12 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v12 + 9) == 5)
    {
      v13 = (uint64_t *)v12[3];
    }
    else
    {
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)this);
      v13 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
    }
    if (*((_DWORD *)v13 + 16) == 41)
      v18 = *((_DWORD *)v13 + 12);
    else
      v18 = 0;
    v20 = *(__int128 **)(v6 + 16);
    this = (uint64_t **)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v20, &v20);
    v17 = (float)v18;
    goto LABEL_41;
  }
  return this;
}

void sub_19C90ECD8(_Unwind_Exception *a1)
{
  char **v1;

  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

_QWORD *CoreML::NNCompiler::Frontend::ParseModelOSSizeTrackingInfo(CoreML::NNCompiler::Frontend *this, const CoreML::Specification::ModelDescription *a2)
{
  char *v3;
  const CoreML::Specification::ModelDescription *v4;
  uint64_t v5;
  _QWORD *i;
  const std::string *v7;
  google::protobuf::Arena **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::string *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  void **v19;
  char *v20;
  uint64_t **v21;
  std::string *v22;
  __int128 v23;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  _QWORD v32[2];
  char v33;

  *((_QWORD *)this + 1) = 0;
  v3 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = (char *)this + 8;
  if (a2)
    v4 = a2;
  else
    v4 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_Metadata_default_instance_;
  v25 = 0;
  v26 = *((_DWORD *)v4 + 8);
  google::protobuf::Map<std::string,std::string>::Init((uint64_t)&v25);
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v28, *((_QWORD **)v4 + 5));
  v30 = v28;
  v31 = v29;
  v5 = v28;
  for (i = v27; (_QWORD)v30; v5 = v30)
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v32, (uint64_t)i, *(unsigned __int8 **)(v5 + 24), 0);
    if (!v32[0])
    {
      v7 = *(const std::string **)(v30 + 24);
      v8 = google::protobuf::Map<std::string,std::string>::operator[]((uint64_t)&v25, (uint64_t)v7);
      std::string::operator=((std::string *)v8, v7 + 1);
    }
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++((unsigned __int8 **)&v30);
  }
  v9 = i[3];
  v10 = i[1];
  if (v10 > v9)
  {
    v11 = i[4];
    while (1)
    {
      v12 = *(_QWORD **)(v11 + 8 * v9);
      if (v12)
        break;
      if (v10 == ++v9)
        return google::protobuf::Map<std::string,std::string>::~Map(&v25);
    }
    if (v12 != *(_QWORD **)(v11 + 8 * (v9 ^ 1)))
    {
      *(_QWORD *)&v30 = *(_QWORD *)(v11 + 8 * v9);
      *((_QWORD *)&v30 + 1) = i;
      v31 = v9;
      goto LABEL_16;
    }
    v12 = *(_QWORD **)(*v12 + 32);
    *(_QWORD *)&v30 = v12;
    *((_QWORD *)&v30 + 1) = i;
    v31 = v9;
    if (v12)
    {
      do
      {
LABEL_16:
        v13 = (std::string *)v12[3];
        v14 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
        if (v14 < 0)
        {
          if (v13->__r_.__value_.__l.__size_ == 10)
          {
            v15 = (uint64_t *)v13->__r_.__value_.__r.__words[0];
LABEL_21:
            v16 = *v15;
            v17 = *((unsigned __int16 *)v15 + 4);
            if (v16 == 0x6B6F745F62646C6DLL && v17 == 28261)
            {
              v19 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)this, &v28, v13);
              v20 = (char *)*v19;
              if (!*v19)
              {
                v21 = (uint64_t **)v19;
                v20 = (char *)operator new(0x50uLL);
                v32[0] = v20;
                v32[1] = v3;
                v33 = 0;
                v22 = (std::string *)(v20 + 32);
                if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v22, v13->__r_.__value_.__l.__data_, v13->__r_.__value_.__l.__size_);
                }
                else
                {
                  v23 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
                  *((_QWORD *)v20 + 6) = *((_QWORD *)&v13->__r_.__value_.__l + 2);
                  *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
                }
                *((_QWORD *)v20 + 7) = 0;
                *((_QWORD *)v20 + 8) = 0;
                *((_QWORD *)v20 + 9) = 0;
                v33 = 1;
                std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)this, v28, v21, (uint64_t *)v20);
                v32[0] = 0;
                std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v32);
              }
              std::string::operator=((std::string *)(v20 + 56), v13 + 1);
            }
          }
        }
        else
        {
          v15 = (uint64_t *)v12[3];
          if (v14 == 10)
            goto LABEL_21;
        }
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(&v30);
        v12 = (_QWORD *)v30;
      }
      while ((_QWORD)v30);
    }
  }
  return google::protobuf::Map<std::string,std::string>::~Map(&v25);
}

void sub_19C90EF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _QWORD **v19;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&a19);
  google::protobuf::Map<std::string,std::string>::~Map(&a9);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v19);
  _Unwind_Resume(a1);
}

void std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;

  v4 = (uint64_t *)a2[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    v6 = a2;
    do
    {
      v5 = (uint64_t *)v6[2];
      v7 = *v5 == (_QWORD)v6;
      v6 = v5;
    }
    while (!v7);
  }
  if (*(uint64_t **)a1 == a2)
    *(_QWORD *)a1 = v5;
  --*(_QWORD *)(a1 + 24);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), a2);
  if (!*(_QWORD *)(a1 + 16))
    operator delete(a2);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string __token;

  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_19C90F048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned int *std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](unsigned int *result)
{
  unsigned int v1;
  uint64_t i;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v1 = *result;
  for (i = 1; i != 257; ++i)
  {
    v3 = v1 / 0x1F31D;
    v4 = 16807 * (v1 % 0x1F31D);
    v3 *= 2836;
    v5 = v4 >= v3;
    v6 = v4 - v3;
    if (v5)
      v7 = 0;
    else
      v7 = 0x7FFFFFFF;
    v1 = v7 + v6;
    result[i] = v1;
  }
  v8 = 16807 * (v1 % 0x1F31D);
  v9 = 2836 * (v1 / 0x1F31D);
  v5 = v8 >= v9;
  v10 = v8 - v9;
  if (v5)
    v11 = 0;
  else
    v11 = 0x7FFFFFFF;
  v12 = v11 + v10;
  *result = v12;
  result[257] = v12;
  return result;
}

uint64_t CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetFlexibleShapesAttribute(uint64_t result, uint64_t a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  BOOL v5;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  int v17;
  int v18;
  int8x16_t v19;
  int8x16_t v20;
  unint64_t v21;
  int *value;
  std::vector<int>::pointer end;
  int *begin;
  int *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  char *v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int *v42;
  int *v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint8x8_t v60;
  unint64_t v61;
  std::vector<int>::pointer *v62;
  std::vector<int>::pointer i;
  unint64_t v64;
  char *v65;
  std::string *v66;
  __int128 v67;
  float v68;
  _BOOL8 v69;
  unint64_t v70;
  unint64_t v71;
  int8x8_t prime;
  void *v73;
  void *v74;
  uint64_t v75;
  _QWORD **v76;
  unint64_t v77;
  uint8x8_t v78;
  unint64_t v79;
  uint8x8_t v80;
  uint64_t v81;
  _QWORD *j;
  unint64_t v83;
  std::vector<int>::pointer *v84;
  unint64_t v85;
  void *v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  void *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  char *v94;
  void *v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  std::runtime_error *exception;
  std::string *v99;
  __int128 v100;
  unint64_t v101;
  _QWORD *v102;
  unsigned __int8 *v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  __int128 v107;
  MIL::Attributes::FlexibleShapeInfo *v108;
  std::string v109;
  __int128 v110;
  uint64_t v111;
  _BYTE v112[20];
  int v113;
  void *__p[2];
  __int128 v115;
  float v116;
  std::string v117;
  std::vector<int> v118;

  if (a4[2])
    v5 = 0;
  else
    v5 = a5[2] == 0;
  if (!v5 || *(_QWORD *)(a3 + 16) != 0)
  {
    v9 = a3;
    v10 = result;
    MIL::Attributes::FlexibleShapeInfo::Make();
    v105 = v10;
    v101 = v9;
    if (a4[2])
    {
      v13 = (_QWORD *)*a4;
      v12 = a4 + 1;
      v11 = v13;
      if (v13 != v12)
      {
        v14 = v11;
        v102 = v12;
        do
        {
          *(_OWORD *)__p = 0u;
          v115 = 0u;
          v116 = 1.0;
          v15 = (_QWORD *)v14[10];
          v104 = v14;
          v106 = v14 + 11;
          if (v15 != v14 + 11)
          {
            do
            {
              *(_OWORD *)v112 = 0uLL;
              v16 = *((_DWORD *)v15 + 18);
              if (v16 == 1)
                v17 = 4;
              else
                v17 = 5;
              if (*((_DWORD *)v15 + 19) == -1)
                v18 = v17;
              else
                v18 = *((_DWORD *)v15 + 19);
              *(_DWORD *)&v112[16] = 0;
              v113 = v18;
              switch(v18)
              {
                case 0:
                  break;
                case 1:
                  *(_DWORD *)v112 = *((_DWORD *)v15 + 14);
                  break;
                case 2:
                  *(int32x2_t *)v112 = vrev64_s32((int32x2_t)v15[7]);
                  break;
                case 3:
                  *(int32x2_t *)v112 = vrev64_s32(*(int32x2_t *)((char *)v15 + 60));
                  *(_DWORD *)&v112[8] = *((_DWORD *)v15 + 14);
                  break;
                case 4:
                  v19 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v15 + 7));
                  *(int8x16_t *)v112 = vextq_s8(v19, v19, 8uLL);
                  break;
                case 5:
                  *(_DWORD *)v112 = v16;
                  v20 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v15 + 7));
                  *(int8x16_t *)&v112[4] = vextq_s8(v20, v20, 8uLL);
                  break;
                default:
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::to_string(&v117, v18);
                  v99 = std::string::insert(&v117, 0, "Invalid rank: ");
                  v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
                  v118.__end_cap_.__value_ = (int *)v99->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v118.__begin_ = v100;
                  v99->__r_.__value_.__l.__size_ = 0;
                  v99->__r_.__value_.__r.__words[2] = 0;
                  v99->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(exception, (const std::string *)&v118);
                  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              memset(&v118, 0, sizeof(v118));
              std::vector<int>::reserve(&v118, v18);
              if (v18)
              {
                v21 = 0;
                end = v118.__end_;
                value = v118.__end_cap_.__value_;
                begin = v118.__begin_;
                do
                {
                  if (end >= value)
                  {
                    v26 = end - begin;
                    v27 = v26 + 1;
                    if ((unint64_t)(v26 + 1) >> 62)
                    {
                      v118.__end_cap_.__value_ = value;
                      v118.__begin_ = begin;
                      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                    }
                    if (((char *)value - (char *)begin) >> 1 > v27)
                      v27 = ((char *)value - (char *)begin) >> 1;
                    if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL)
                      v28 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v28 = v27;
                    if (v28)
                      v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v28);
                    else
                      v29 = 0;
                    v30 = (int *)(v28 + 4 * v26);
                    *v30 = *(_DWORD *)&v112[4 * v21];
                    v25 = v30 + 1;
                    while (end != begin)
                    {
                      v31 = *--end;
                      *--v30 = v31;
                    }
                    value = (int *)(v28 + 4 * v29);
                    v118.__end_ = v25;
                    if (begin)
                      operator delete(begin);
                    begin = v30;
                  }
                  else
                  {
                    *end = *(_DWORD *)&v112[4 * v21];
                    v25 = end + 1;
                  }
                  v118.__end_ = v25;
                  ++v21;
                  end = v25;
                }
                while (v21 < v113);
                v118.__end_cap_.__value_ = value;
                v118.__begin_ = begin;
                v10 = v105;
              }
              if (v118.__begin_)
                operator delete(v118.__begin_);
              v118.__begin_ = (std::vector<int>::pointer)(v15 + 4);
              v32 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)v15 + 32, (__int128 **)&v118);
              v33 = (void *)*((_QWORD *)v32 + 5);
              if (v33)
              {
                *((_QWORD *)v32 + 6) = v33;
                operator delete(v33);
                *((_QWORD *)v32 + 5) = 0;
                *((_QWORD *)v32 + 6) = 0;
                *((_QWORD *)v32 + 7) = 0;
              }
              *(_OWORD *)(v32 + 40) = v110;
              *((_QWORD *)v32 + 7) = v111;
              v34 = (_QWORD *)v15[1];
              if (v34)
              {
                do
                {
                  v35 = v34;
                  v34 = (_QWORD *)*v34;
                }
                while (v34);
              }
              else
              {
                do
                {
                  v35 = (_QWORD *)v15[2];
                  v5 = *v35 == (_QWORD)v15;
                  v15 = v35;
                }
                while (!v5);
              }
              v15 = v35;
            }
            while (v35 != v106);
          }
          v36 = v104;
          if (*((char *)v104 + 55) < 0)
            std::string::__init_copy_ctor_external(&v109, (const std::string::value_type *)v104[4], v104[5]);
          else
            v109 = *(std::string *)(v104 + 4);
          MIL::Attributes::FlexibleShapeInfo::AddEnumeratedShapes();
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v109.__r_.__value_.__l.__data_);
          std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table((uint64_t)__p);
          v37 = (_QWORD *)v104[1];
          if (v37)
          {
            do
            {
              v38 = v37;
              v37 = (_QWORD *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              v38 = (_QWORD *)v36[2];
              v5 = *v38 == (_QWORD)v36;
              v36 = v38;
            }
            while (!v5);
          }
          v14 = v38;
        }
        while (v38 != v102);
        v9 = v101;
      }
    }
    if (a5[2])
    {
      *(_OWORD *)__p = 0u;
      v115 = 0u;
      v116 = 1.0;
      v41 = (unsigned __int8 *)*a5;
      v40 = (unsigned __int8 *)(a5 + 1);
      v39 = v41;
      if (v41 != v40)
      {
        v103 = v40;
        while (1)
        {
          v42 = (int *)*((_QWORD *)v39 + 10);
          v43 = (int *)*((_QWORD *)v39 + 11);
          if (v42 == v43)
          {
            v44 = 0;
            v107 = 0u;
          }
          else
          {
            v44 = 0;
            v45 = 0;
            v107 = 0u;
            do
            {
              v46 = *v42;
              v47 = v42[2];
              if (v45 >= v44)
              {
                v9 = v107;
                v48 = (uint64_t)&v45[-v107] >> 3;
                v49 = v48 + 1;
                if ((unint64_t)(v48 + 1) >> 61)
                  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                if ((uint64_t)&v44[-v107] >> 2 > v49)
                  v49 = (uint64_t)&v44[-v107] >> 2;
                if ((unint64_t)&v44[-v107] >= 0x7FFFFFFFFFFFFFF8)
                  v50 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v50 = v49;
                if (v50 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v51 = (char *)operator new(8 * v50);
                v52 = &v51[8 * v48];
                *(_DWORD *)v52 = v46;
                *((_DWORD *)v52 + 1) = v47;
                v53 = *((_QWORD *)&v107 + 1);
                v54 = v52;
                while (v53 != (_QWORD)v107)
                {
                  v55 = *(_QWORD *)(v53 - 8);
                  v53 -= 8;
                  *((_QWORD *)v54 - 1) = v55;
                  v54 -= 8;
                }
                v44 = &v51[8 * v50];
                v45 = v52 + 8;
                *(_QWORD *)&v107 = v54;
                if (v9)
                  operator delete((void *)v9);
              }
              else
              {
                *(_DWORD *)v45 = v46;
                *((_DWORD *)v45 + 1) = v47;
                v45 += 8;
              }
              *(_QWORD *)&v56 = v107;
              *((_QWORD *)&v56 + 1) = v45;
              v107 = v56;
              v42 += 4;
            }
            while (v42 != v43);
          }
          v57 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v39 + 32));
          v58 = v57;
          v59 = (unint64_t)__p[1];
          if (__p[1])
          {
            v60 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
            v60.i16[0] = vaddlv_u8(v60);
            v61 = v60.u32[0];
            if (v60.u32[0] > 1uLL)
            {
              v9 = v57;
              if ((void *)v57 >= __p[1])
                v9 = v57 % (unint64_t)__p[1];
            }
            else
            {
              v9 = ((unint64_t)__p[1] - 1) & v57;
            }
            v62 = (std::vector<int>::pointer *)*((_QWORD *)__p[0] + v9);
            if (v62)
            {
              for (i = *v62; i; i = *(std::vector<int>::pointer *)i)
              {
                v64 = *((_QWORD *)i + 1);
                if (v64 == v58)
                {
                  if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, v39 + 32))
                  {
                    v89 = v103;
                    goto LABEL_164;
                  }
                }
                else
                {
                  if (v61 > 1)
                  {
                    if (v64 >= v59)
                      v64 %= v59;
                  }
                  else
                  {
                    v64 &= v59 - 1;
                  }
                  if (v64 != v9)
                    break;
                }
              }
            }
          }
          v65 = (char *)operator new(0x40uLL);
          v118.__begin_ = (std::vector<int>::pointer)v65;
          v118.__end_ = (std::vector<int>::pointer)&v115;
          LOBYTE(v118.__end_cap_.__value_) = 0;
          *(_QWORD *)v65 = 0;
          *((_QWORD *)v65 + 1) = v58;
          v66 = (std::string *)(v65 + 16);
          if ((char)v39[55] < 0)
          {
            std::string::__init_copy_ctor_external(v66, *((const std::string::value_type **)v39 + 4), *((_QWORD *)v39 + 5));
          }
          else
          {
            v67 = *((_OWORD *)v39 + 2);
            *((_QWORD *)v65 + 4) = *((_QWORD *)v39 + 6);
            *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v67;
          }
          *((_QWORD *)v65 + 5) = 0;
          *((_QWORD *)v65 + 6) = 0;
          *((_QWORD *)v65 + 7) = 0;
          LOBYTE(v118.__end_cap_.__value_) = 1;
          v68 = (float)(unint64_t)(*((_QWORD *)&v115 + 1) + 1);
          if (!v59 || (float)(v116 * (float)v59) < v68)
            break;
LABEL_154:
          v84 = (std::vector<int>::pointer *)*((_QWORD *)__p[0] + v9);
          i = v118.__begin_;
          if (v84)
          {
            *(_QWORD *)v118.__begin_ = *v84;
            v89 = v103;
          }
          else
          {
            *(_QWORD *)v118.__begin_ = v115;
            *(_QWORD *)&v115 = i;
            *((_QWORD *)__p[0] + v9) = &v115;
            v89 = v103;
            if (!*(_QWORD *)i)
              goto LABEL_163;
            v85 = *(_QWORD *)(*(_QWORD *)i + 8);
            if ((v59 & (v59 - 1)) != 0)
            {
              if (v85 >= v59)
                v85 %= v59;
            }
            else
            {
              v85 &= v59 - 1;
            }
            v84 = (std::vector<int>::pointer *)((char *)__p[0] + 8 * v85);
          }
          *v84 = i;
LABEL_163:
          v118.__begin_ = 0;
          ++*((_QWORD *)&v115 + 1);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v118);
LABEL_164:
          v86 = (void *)*((_QWORD *)i + 5);
          if (v86)
          {
            *((_QWORD *)i + 6) = v86;
            operator delete(v86);
            *((_QWORD *)i + 5) = 0;
            *((_QWORD *)i + 6) = 0;
            *((_QWORD *)i + 7) = 0;
          }
          *(_OWORD *)(i + 10) = v107;
          *((_QWORD *)i + 7) = v44;
          v87 = (unsigned __int8 *)*((_QWORD *)v39 + 1);
          if (v87)
          {
            do
            {
              v88 = v87;
              v87 = *(unsigned __int8 **)v87;
            }
            while (v87);
          }
          else
          {
            do
            {
              v88 = (unsigned __int8 *)*((_QWORD *)v39 + 2);
              v5 = *(_QWORD *)v88 == (_QWORD)v39;
              v39 = v88;
            }
            while (!v5);
          }
          v39 = v88;
          if (v88 == v89)
            goto LABEL_182;
        }
        v69 = (v59 & (v59 - 1)) != 0;
        if (v59 < 3)
          v69 = 1;
        v70 = v69 | (2 * v59);
        v71 = vcvtps_u32_f32(v68 / v116);
        if (v70 <= v71)
          prime = (int8x8_t)v71;
        else
          prime = (int8x8_t)v70;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        }
        v59 = (unint64_t)__p[1];
        if ((void *)*(_QWORD *)&prime > __p[1])
          goto LABEL_120;
        if ((void *)*(_QWORD *)&prime < __p[1])
        {
          v79 = vcvtps_u32_f32((float)*((unint64_t *)&v115 + 1) / v116);
          if (__p[1] < (void *)3
            || (v80 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v80.i16[0] = vaddlv_u8(v80), v80.u32[0] > 1uLL))
          {
            v79 = std::__next_prime(v79);
          }
          else
          {
            v81 = 1 << -(char)__clz(v79 - 1);
            if (v79 >= 2)
              v79 = v81;
          }
          if (*(_QWORD *)&prime <= v79)
            prime = (int8x8_t)v79;
          if (*(_QWORD *)&prime >= v59)
          {
            v59 = (unint64_t)__p[1];
          }
          else
          {
            if (prime)
            {
LABEL_120:
              if (*(_QWORD *)&prime >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v73 = operator new(8 * *(_QWORD *)&prime);
              v74 = __p[0];
              __p[0] = v73;
              if (v74)
                operator delete(v74);
              v75 = 0;
              __p[1] = (void *)prime;
              do
                *((_QWORD *)__p[0] + v75++) = 0;
              while (*(_QWORD *)&prime != v75);
              v76 = (_QWORD **)v115;
              if ((_QWORD)v115)
              {
                v77 = *(_QWORD *)(v115 + 8);
                v78 = (uint8x8_t)vcnt_s8(prime);
                v78.i16[0] = vaddlv_u8(v78);
                if (v78.u32[0] > 1uLL)
                {
                  if (v77 >= *(_QWORD *)&prime)
                    v77 %= *(_QWORD *)&prime;
                }
                else
                {
                  v77 &= *(_QWORD *)&prime - 1;
                }
                *((_QWORD *)__p[0] + v77) = &v115;
                for (j = *v76; j; v77 = v83)
                {
                  v83 = j[1];
                  if (v78.u32[0] > 1uLL)
                  {
                    if (v83 >= *(_QWORD *)&prime)
                      v83 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v83 &= *(_QWORD *)&prime - 1;
                  }
                  if (v83 != v77)
                  {
                    if (!*((_QWORD *)__p[0] + v83))
                    {
                      *((_QWORD *)__p[0] + v83) = v76;
                      goto LABEL_145;
                    }
                    *v76 = (_QWORD *)*j;
                    *j = **((_QWORD **)__p[0] + v83);
                    **((_QWORD **)__p[0] + v83) = j;
                    j = v76;
                  }
                  v83 = v77;
LABEL_145:
                  v76 = (_QWORD **)j;
                  j = (_QWORD *)*j;
                }
              }
              v59 = (unint64_t)prime;
              goto LABEL_149;
            }
            v90 = __p[0];
            __p[0] = 0;
            if (v90)
              operator delete(v90);
            v59 = 0;
            __p[1] = 0;
          }
        }
LABEL_149:
        if ((v59 & (v59 - 1)) != 0)
        {
          if (v58 >= v59)
            v9 = v58 % v59;
          else
            v9 = v58;
        }
        else
        {
          v9 = (v59 - 1) & v58;
        }
        goto LABEL_154;
      }
LABEL_182:
      MIL::Attributes::FlexibleShapeInfo::SetRangeShapes();
      v9 = v101;
      std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table((uint64_t)__p);
      v10 = v105;
    }
    if (*(_QWORD *)(v9 + 16))
    {
      *(_OWORD *)__p = 0u;
      v115 = 0u;
      v116 = 1.0;
      v93 = *(unsigned __int8 **)v9;
      v92 = (unsigned __int8 *)(v9 + 8);
      v91 = v93;
      if (v93 != v92)
      {
        do
        {
          v117.__r_.__value_.__r.__words[0] = (std::string::size_type)(v91 + 32);
          v94 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, v91 + 32, (__int128 **)&v117);
          v95 = (void *)*((_QWORD *)v94 + 5);
          if (v95)
          {
            *((_QWORD *)v94 + 6) = v95;
            operator delete(v95);
            *((_QWORD *)v94 + 5) = 0;
            *((_QWORD *)v94 + 6) = 0;
            *((_QWORD *)v94 + 7) = 0;
          }
          *(std::vector<int> *)(v94 + 40) = v118;
          v96 = (unsigned __int8 *)*((_QWORD *)v91 + 1);
          if (v96)
          {
            do
            {
              v97 = v96;
              v96 = *(unsigned __int8 **)v96;
            }
            while (v96);
          }
          else
          {
            do
            {
              v97 = (unsigned __int8 *)*((_QWORD *)v91 + 2);
              v5 = *(_QWORD *)v97 == (_QWORD)v91;
              v91 = v97;
            }
            while (!v5);
          }
          v91 = v97;
        }
        while (v97 != v92);
      }
      MIL::Attributes::FlexibleShapeInfo::SetDefaultShapes();
      std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table((uint64_t)__p);
    }
    MIL::Attributes::FlexibleShapeInfo::Replace();
    result = (uint64_t)v108;
    if (v108)
    {
      MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v108);
      return MEMORY[0x1A1AD6260]();
    }
  }
  return result;
}

void sub_19C90FBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, uint64_t a18, MIL::Attributes::FlexibleShapeInfo *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table((uint64_t)&a35);
  std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::reset[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::LayerShapeToDimensions(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_DWORD **)a3;
  v5 = *(_DWORD **)(a3 + 8);
  v6 = (uint64_t)v5 - *(_QWORD *)a3;
  if (v5 == *(_DWORD **)a3)
  {
    v8 = 0;
  }
  else
  {
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v8 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v6 >> 2);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[v9];
    v4 = *(_DWORD **)a3;
    v5 = *(_DWORD **)(a3 + 8);
  }
  for (; v4 != v5; v8 = v19)
  {
    if ((*v4 & 0x80000000) != 0)
    {
      v10 = MIL::IRUnknownDimension::Make();
      v18 = (unint64_t)a1[2];
      if ((unint64_t)v8 >= v18)
      {
        v20 = *a1;
        v21 = v8 - *a1;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v23 = v18 - (_QWORD)v20;
        if (v23 >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v22;
        if (v16)
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v16);
        else
          v17 = 0;
        v24 = (uint64_t *)(v16 + 8 * v21);
        *v24 = v10;
        v19 = v24 + 1;
        if (v8 != v20)
        {
          do
          {
            v26 = *--v8;
            *--v24 = v26;
          }
          while (v8 != v20);
LABEL_33:
          v8 = *a1;
        }
LABEL_34:
        *a1 = v24;
        a1[1] = v19;
        a1[2] = (uint64_t *)(v16 + 8 * v17);
        if (v8)
          operator delete(v8);
        goto LABEL_36;
      }
    }
    else
    {
      v10 = MIL::IRConstantDimension::Make();
      v11 = (unint64_t)a1[2];
      if ((unint64_t)v8 >= v11)
      {
        v12 = *a1;
        v13 = v8 - *a1;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)v12;
        if (v15 >> 2 > v14)
          v14 = v15 >> 2;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v16);
        else
          v17 = 0;
        v24 = (uint64_t *)(v16 + 8 * v13);
        *v24 = v10;
        v19 = v24 + 1;
        if (v8 != v12)
        {
          do
          {
            v25 = *--v8;
            *--v24 = v25;
          }
          while (v8 != v12);
          goto LABEL_33;
        }
        goto LABEL_34;
      }
    }
    *v8 = v10;
    v19 = v8 + 1;
LABEL_36:
    a1[1] = v19;
    ++v4;
  }
}

void sub_19C90FEF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x40uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  v30 = 0;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v16 = (std::string *)(v13 + 16);
  v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v18 = *v17;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *((_QWORD *)v13 + 5) = 0;
  *((_QWORD *)v13 + 6) = 0;
  *((_QWORD *)v13 + 7) = 0;
  v30 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v13 = *v26;
LABEL_41:
    *v26 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v25 + 8 * v3) = v15;
  if (*(_QWORD *)v13)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_19C910188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetAttributesForFunctions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const CoreML::NNCompiler::MLFunctionInfo *v5;
  uint64_t v6;
  id v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  _BOOL4 v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t **v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t *v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  __int128 *v51;
  uint64_t v52;
  _QWORD *v53;
  std::logic_error *v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  std::runtime_error *exception;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::string v72;
  uint64_t *v73;
  uint64_t **v74;
  _QWORD v75[33];
  __int128 v76;
  uint64_t v77;
  _BYTE v78[32];
  int v79;

  v3 = a1;
  v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v4 = *(_QWORD *)(a2 + 8);
  v64 = *(_QWORD *)(a2 + 16);
  if (v4 != v64)
  {
    v62 = a2;
    v63 = a2 + 80;
    v61 = v3;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v70, v3, v4);
      if (!v70)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v73);
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Cannot find ", 12);
        v56 = *(char *)(v4 + 23);
        if (v56 >= 0)
          v57 = v4;
        else
          v57 = *(_QWORD *)v4;
        if (v56 >= 0)
          v58 = *(unsigned __int8 *)(v4 + 23);
        else
          v58 = *(_QWORD *)(v4 + 8);
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, v57, v58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" function in translated program.", 32);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, (const std::string *)v78);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v5 = (const CoreML::NNCompiler::MLFunctionInfo *)std::map<std::string,std::string>::at(v63, (_QWORD *)v4);
      CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetInputDefaultValuesAttribute(v66, v70, (_QWORD *)v5 + 31);
      +[MLNeuralNetworkCompiler iOS18CompilerVersionInfo](MLNeuralNetworkCompiler, "iOS18CompilerVersionInfo");
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = *(id *)(a2 + 112);
      v65 = (void *)v6;
      v8 = objc_msgSend(v7, "olderThan:", v6);

      if ((v8 & 1) != 0)
      {
        v9 = v70;
        CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::GetDefaultShapes(&v73, v5);
        v10 = (_QWORD *)*((_QWORD *)v5 + 21);
        CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::GetRangeShapes((uint64_t **)v78, v5);
        CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetFlexibleShapesAttribute(v66, v9, (unint64_t)&v73, v10, v78);
        std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*(_QWORD **)&v78[8]);
        std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(v74);
      }
      else
      {
        v11 = (_QWORD *)*((_QWORD *)v5 + 21);
        v68 = 0;
        v69 = 0;
        v67 = &v68;
        memset(v78, 0, sizeof(v78));
        v79 = 1065353216;
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)v78, (unint64_t)(float)(unint64_t)v11[2]);
        v14 = (uint64_t *)*v11;
        v13 = v11 + 1;
        v12 = v14;
        if (v14 != v13)
        {
          do
          {
            CoreML::MLNeuralNetworkUtilities::encodeConfigurationName((char *)&v76, (const void **)v12 + 4);
            v15 = v68;
            if (v68)
            {
              v16 = &v68;
              do
              {
                v17 = v16;
                v18 = v15 + 4;
                v19 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v15 + 4, &v76);
                if (v19)
                  v20 = v15 + 1;
                else
                  v20 = v15;
                if (v19)
                  v16 = v17;
                else
                  v16 = (uint64_t **)v15;
                v15 = (uint64_t *)*v20;
              }
              while (*v20);
              if (v16 != &v68)
              {
                v21 = v19 ? v17 + 4 : (uint64_t **)v18;
                if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v76, v21))
                {
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v73);
                  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"The configuration name=", 23);
                  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
                  v37 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)&v76, (__int128 **)&v72);
                  v40 = *((_QWORD *)v37 + 5);
                  v38 = v37 + 40;
                  v39 = v40;
                  v41 = v38[23];
                  if (v41 >= 0)
                    v42 = (uint64_t)v38;
                  else
                    v42 = v39;
                  if (v41 >= 0)
                    v43 = v38[23];
                  else
                    v43 = *((_QWORD *)v38 + 1);
                  v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v42, v43);
                  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" and the configuration name=", 28);
                  v46 = *((char *)v12 + 55);
                  if (v46 >= 0)
                    v47 = (uint64_t)(v12 + 4);
                  else
                    v47 = v12[4];
                  if (v46 >= 0)
                    v48 = *((unsigned __int8 *)v12 + 55);
                  else
                    v48 = v12[5];
                  v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
                  v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" have the same encoded value=", 29);
                  if (v77 >= 0)
                    v51 = &v76;
                  else
                    v51 = (__int128 *)v76;
                  if (v77 >= 0)
                    v52 = HIBYTE(v77);
                  else
                    v52 = *((_QWORD *)&v76 + 1);
                  v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)".", 1);
                  v54 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::stringbuf::str();
                  std::logic_error::logic_error(v54, &v72);
                  __cxa_throw(v54, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
                }
              }
            }
            v22 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)&v67, &v72, &v76);
            v23 = *v22;
            if (!*v22)
            {
              v24 = v22;
              v23 = (uint64_t *)operator new(0x68uLL);
              v73 = v23;
              v74 = &v68;
              LOBYTE(v75[0]) = 0;
              v25 = (std::string *)(v23 + 4);
              if (SHIBYTE(v77) < 0)
              {
                std::string::__init_copy_ctor_external(v25, (const std::string::value_type *)v76, *((std::string::size_type *)&v76 + 1));
              }
              else
              {
                *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v76;
                v23[6] = v77;
              }
              v23[7] = 0;
              v23[8] = 0;
              v23[11] = 0;
              v23[12] = 0;
              v23[9] = 0;
              v23[10] = (uint64_t)(v23 + 11);
              LOBYTE(v75[0]) = 1;
              v26 = v72.__r_.__value_.__r.__words[0];
              *v23 = 0;
              v23[1] = 0;
              v23[2] = v26;
              *v24 = v23;
              v27 = v23;
              if (*v67)
              {
                v67 = (uint64_t **)*v67;
                v27 = *v24;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v68, v27);
              ++v69;
              v73 = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100]((uint64_t)&v73);
            }
            if (v12 != v23)
            {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v23 + 7), (std::string *)v12[7], (__int128 *)v12[8], 0xAAAAAAAAAAAAAAABLL * ((v12[8] - v12[7]) >> 3));
              std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t)(v23 + 10), (uint64_t *)v12[10], v12 + 11);
            }
            v73 = (uint64_t *)&v76;
            v28 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)&v76, (__int128 **)&v73);
            std::string::operator=((std::string *)(v28 + 40), (const std::string *)(v12 + 4));
            if (SHIBYTE(v77) < 0)
              operator delete((void *)v76);
            v29 = (uint64_t *)v12[1];
            if (v29)
            {
              do
              {
                v30 = v29;
                v29 = (uint64_t *)*v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                v30 = (uint64_t *)v12[2];
                v31 = *v30 == (_QWORD)v12;
                v12 = v30;
              }
              while (!v31);
            }
            v12 = v30;
          }
          while (v30 != v13);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v78);
        v32 = v70;
        CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::GetDefaultShapes(&v73, v5);
        CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::GetRangeShapes((uint64_t **)v78, v5);
        v3 = v61;
        a2 = v62;
        CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetFlexibleShapesAttribute(v66, v32, (unint64_t)&v73, &v67, v78);
        std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*(_QWORD **)&v78[8]);
        std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(v74);
        std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(v68);
      }

      v33 = v71;
      if (v71)
      {
        p_shared_owners = (unint64_t *)&v71->__shared_owners_;
        do
          v35 = __ldaxr(p_shared_owners);
        while (__stlxr(v35 - 1, p_shared_owners));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v4 += 24;
    }
    while (v4 != v64);
  }
}

void sub_19C91073C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a26);
      if (*(char *)(v29 - 129) < 0)
        operator delete(*(void **)(v29 - 152));
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v29 - 128);
      std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(a16);

      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

uint64_t CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetInputDefaultValuesAttribute(uint64_t result, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  BOOL v39;
  std::__shared_weak_count *v40;
  MIL::IRDictionaryValue *v41;
  unint64_t *v42;
  unint64_t v43;
  MIL::IRDictionaryValue *v44;
  MIL::IRTensorValueType *Scalar;
  std::__shared_weak_count *v46;
  void *__p;
  char v48;
  uint64_t v49;
  std::string v50;
  uint64_t v51;
  MIL::IRDictionaryValue *v52;
  std::__shared_weak_count *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  float v57;

  if (a3[2])
  {
    MIL::IRTensorValueType::MakeScalar();
    Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
    v55 = 0u;
    v56 = 0u;
    v57 = 1.0;
    v7 = (_QWORD *)*a3;
    v6 = a3 + 1;
    v5 = v7;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v5 + 55) < 0)
          std::string::__init_copy_ctor_external(&v50, (const std::string::value_type *)v5[4], v5[5]);
        else
          v50 = *(std::string *)(v5 + 4);
        MIL::IRTensorValueType::MakeStringValue();
        MIL::IRTensorValueType::MakeFloat32Value(Scalar, *((float *)v5 + 14));
        std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<std::unique_ptr<MIL::IRTensorValue const>,std::unique_ptr<MIL::IRTensorValue const>,0>((uint64_t *)&v52, &v51, &v49);
        v8 = MIL::IRValueMapHasher::operator()();
        v9 = v8;
        v10 = *((_QWORD *)&v55 + 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v11 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v55 + 8));
          v11.i16[0] = vaddlv_u8(v11);
          v12 = v11.u32[0];
          if (v11.u32[0] > 1uLL)
          {
            v3 = v8;
            if (v8 >= *((_QWORD *)&v55 + 1))
              v3 = v8 % *((_QWORD *)&v55 + 1);
          }
          else
          {
            v3 = (*((_QWORD *)&v55 + 1) - 1) & v8;
          }
          v13 = *(_QWORD **)(v55 + 8 * v3);
          if (v13)
          {
            v14 = (_QWORD *)*v13;
            if (*v13)
            {
              do
              {
                v15 = v14[1];
                if (v15 == v9)
                {
                  if (MIL::IRValueMapEq::operator()())
                    goto LABEL_47;
                }
                else
                {
                  if (v12 > 1)
                  {
                    if (v15 >= v10)
                      v15 %= v10;
                  }
                  else
                  {
                    v15 &= v10 - 1;
                  }
                  if (v15 != v3)
                    break;
                }
                v14 = (_QWORD *)*v14;
              }
              while (v14);
            }
          }
        }
        v16 = operator new(0x30uLL);
        v17 = v16;
        *v16 = 0;
        v16[1] = v9;
        v18 = v53;
        v16[2] = v52;
        v16[3] = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
        }
        *((_OWORD *)v16 + 2) = v54;
        v54 = 0uLL;
        v21 = (float)(unint64_t)(*((_QWORD *)&v56 + 1) + 1);
        if (!v10 || (float)(v57 * (float)v10) < v21)
        {
          v22 = (v10 & (v10 - 1)) != 0;
          if (v10 < 3)
            v22 = 1;
          v23 = v22 | (2 * v10);
          v24 = vcvtps_u32_f32(v21 / v57);
          if (v23 <= v24)
            v25 = v24;
          else
            v25 = v23;
          std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)&v55, v25);
          v10 = *((_QWORD *)&v55 + 1);
          if ((v10 & (v10 - 1)) != 0)
          {
            if (v9 >= *((_QWORD *)&v55 + 1))
              v3 = v9 % *((_QWORD *)&v55 + 1);
            else
              v3 = v9;
          }
          else
          {
            v3 = (*((_QWORD *)&v55 + 1) - 1) & v9;
          }
        }
        v26 = v55;
        v27 = *(_QWORD **)(v55 + 8 * v3);
        if (v27)
        {
          *v17 = *v27;
        }
        else
        {
          *v17 = v56;
          *(_QWORD *)&v56 = v17;
          *(_QWORD *)(v26 + 8 * v3) = &v56;
          if (!*v17)
            goto LABEL_46;
          v28 = *(_QWORD *)(*v17 + 8);
          if ((v10 & (v10 - 1)) != 0)
          {
            if (v28 >= v10)
              v28 %= v10;
          }
          else
          {
            v28 &= v10 - 1;
          }
          v27 = (_QWORD *)(v55 + 8 * v28);
        }
        *v27 = v17;
LABEL_46:
        ++*((_QWORD *)&v56 + 1);
LABEL_47:
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = v53;
        if (v53)
        {
          v33 = (unint64_t *)&v53->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v35 = v49;
        v49 = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v36 = v51;
        v51 = 0;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        v37 = (_QWORD *)v5[1];
        if (v37)
        {
          do
          {
            v38 = v37;
            v37 = (_QWORD *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            v38 = (_QWORD *)v5[2];
            v39 = *v38 == (_QWORD)v5;
            v5 = v38;
          }
          while (!v39);
        }
        v5 = v38;
      }
      while (v38 != v6);
    }
    MIL::IRDictionaryValueType::Make();
    MIL::IRDictionaryValueType::MakeValue();
    std::string::basic_string[abi:ne180100]<0>(&__p, "CoreML_InputDefaultValues");
    if (v52)
    {
      v40 = (std::__shared_weak_count *)operator new();
      v41 = v52;
      v40->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C2F8;
      v40->__shared_owners_ = 0;
      v40->__shared_weak_owners_ = 0;
      v40[1].__vftable = (std::__shared_weak_count_vtbl *)v41;
    }
    else
    {
      v40 = 0;
    }
    v46 = v40;
    v52 = 0;
    MIL::IRObject::SetAttribute();
    if (v46)
    {
      v42 = (unint64_t *)&v46->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v48 < 0)
      operator delete(__p);
    v44 = v52;
    v52 = 0;
    if (v44)
    {
      MIL::IRDictionaryValue::~IRDictionaryValue(v44);
      MEMORY[0x1A1AD6260]();
    }
    return std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v55);
  }
  return result;
}

void sub_19C910D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,MIL::IRDictionaryValue *a31)
{
  uint64_t v31;

  if (a22 < 0)
    operator delete(__p);
  std::unique_ptr<MIL::IRDictionaryValue const>::reset[abi:ne180100](&a31);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v31 - 128);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x40uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  v30 = 0;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v16 = (std::string *)(v13 + 16);
  v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v18 = *v17;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *((_QWORD *)v13 + 5) = 0;
  *((_QWORD *)v13 + 6) = 0;
  *((_QWORD *)v13 + 7) = 0;
  v30 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v13 = *v26;
LABEL_41:
    *v26 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v25 + 8 * v3) = v15;
  if (*(_QWORD *)v13)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_19C9110A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::GetDefaultShapes(uint64_t **this, const CoreML::NNCompiler::MLFunctionInfo *a2)
{
  _QWORD *result;
  char *v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  char *v10;
  char *v11;

  result = (_QWORD *)std::map<std::string,std::vector<int>>::map[abi:ne180100]((uint64_t)this, (_QWORD *)a2 + 6);
  v5 = (char *)*((_QWORD *)a2 + 15);
  v6 = (char *)a2 + 128;
  if (v5 != v6)
  {
    v7 = this + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<int>> const&>(this, v7, (_QWORD *)v5 + 4, (uint64_t)(v5 + 32));
      v8 = (_QWORD *)result[1];
      if (v8)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)result[2];
          v9 = *v7 == (_QWORD)result;
          result = v7;
        }
        while (!v9);
      }
      v10 = (char *)*((_QWORD *)v5 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)*((_QWORD *)v5 + 2);
          v9 = *(_QWORD *)v11 == (_QWORD)v5;
          v5 = v11;
        }
        while (!v9);
      }
      v5 = v11;
    }
    while (v11 != v6);
  }
  return result;
}

void sub_19C911178(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::GetRangeShapes(uint64_t **this, const CoreML::NNCompiler::MLFunctionInfo *a2)
{
  uint64_t result;
  char *v5;
  char *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  char *v10;
  char *v11;

  result = std::map<std::string,CoreML::NNCompiler::MLRangeShape>::map[abi:ne180100]((uint64_t)this, (_QWORD *)a2 + 9);
  v5 = (char *)*((_QWORD *)a2 + 18);
  v6 = (char *)a2 + 152;
  if (v5 != v6)
  {
    v7 = (uint64_t *)(this + 1);
    do
    {
      result = (uint64_t)std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,CoreML::NNCompiler::MLRangeShape> const&>(this, v7, (_QWORD *)v5 + 4, (uint64_t)(v5 + 32));
      v8 = *(uint64_t **)(result + 8);
      if (v8)
      {
        do
        {
          v7 = v8;
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = *(uint64_t **)(result + 16);
          v9 = *v7 == result;
          result = (uint64_t)v7;
        }
        while (!v9);
      }
      v10 = (char *)*((_QWORD *)v5 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)*((_QWORD *)v5 + 2);
          v9 = *(_QWORD *)v11 == (_QWORD)v5;
          v5 = v11;
        }
        while (!v9);
      }
      v5 = v11;
    }
    while (v11 != v6);
  }
  return result;
}

void sub_19C911248(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19C91178C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

void sub_19C9119D8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1A1AD6260](v2, 0x10A1C40BFDB1307);

  _Unwind_Resume(a1);
}

void sub_19C911B88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C911DA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C911F30(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1A1AD6260](v3, 0x1081C40622C3295);

  _Unwind_Resume(a1);
}

void sub_19C9120C4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1A1AD6260](v3, 0x1081C40622C3295);

  _Unwind_Resume(a1);
}

void sub_19C91238C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1A1AD6260](v2, 0x1081C40622C3295);

  _Unwind_Resume(a1);
}

void sub_19C9124FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C912978(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1A1AD6260](v2, 0x1012C40EC159624);

  _Unwind_Resume(a1);
}

void sub_19C912B58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C913070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_19C9135A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;

  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*(char **)(v31 - 96));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v31 - 120);

  _Unwind_Resume(a1);
}

void sub_19C914078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a20);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(a15);

  _Unwind_Resume(a1);
}

void sub_19C91445C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C9144C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C914B14(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a6);

  XGBoostDataFormat::~XGBoostDataFormat((XGBoostDataFormat *)va);
  _Unwind_Resume(a1);
}

void sub_19C9150B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C915268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C9154E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t XGBoostFrameworkLibrary()
{
  uint64_t v0;
  void *v2;

  if (XGBoostFrameworkLibraryCore(char **)::frameworkLibrary)
    return XGBoostFrameworkLibraryCore(char **)::frameworkLibrary;
  XGBoostFrameworkLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = XGBoostFrameworkLibraryCore(char **)::frameworkLibrary;
  if (!XGBoostFrameworkLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t softLink_XGBoosterSetParam(void *a1, const char *a2, const char *a3)
{
  void *v6;
  void *v7;
  _Unwind_Exception *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v6 = getXGBoosterSetParamSymbolLoc(void)::ptr;
  v13 = getXGBoosterSetParamSymbolLoc(void)::ptr;
  if (!getXGBoosterSetParamSymbolLoc(void)::ptr)
  {
    v7 = (void *)XGBoostFrameworkLibrary();
    v6 = dlsym(v7, "XGBoosterSetParam");
    v11[3] = (uint64_t)v6;
    getXGBoosterSetParamSymbolLoc(void)::ptr = v6;
  }
  _Block_object_dispose(&v10, 8);
  if (!v6)
  {
    dlerror();
    v9 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v10, 8);
    _Unwind_Resume(v9);
  }
  return ((uint64_t (*)(void *, const char *, const char *))v6)(a1, a2, a3);
}

uint64_t softLink_XGDMatrixFree(uint64_t a1)
{
  void *v2;
  void *v3;
  _Unwind_Exception *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getXGDMatrixFreeSymbolLoc(void)::ptr;
  v9 = getXGDMatrixFreeSymbolLoc(void)::ptr;
  if (!getXGDMatrixFreeSymbolLoc(void)::ptr)
  {
    v3 = (void *)XGBoostFrameworkLibrary();
    v2 = dlsym(v3, "XGDMatrixFree");
    v7[3] = (uint64_t)v2;
    getXGDMatrixFreeSymbolLoc(void)::ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void sub_19C915D44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C916098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C916478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v11);

  _Unwind_Resume(a1);
}

void sub_19C916548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)MLE5ProgramLibrary;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19C9166D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  uint64_t v25;

  _Block_object_dispose(&a19, 8);

  _Block_object_dispose((const void *)(v25 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_19C91680C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  uint64_t v22;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19C9169FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v30 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_19C91842C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *a42)
{
  void *v42;
  void *v43;

  _Unwind_Resume(a1);
}

void sub_19C918B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_19C918BA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void sub_19C919090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::findProgramFunctionInLibrary(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  NSObject *v8;
  void *v9;
  uint8_t buf[4];
  uint64_t last_error_message;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = e5rt_program_library_retain_program_function();
  if ((_DWORD)v7)
  {
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      last_error_message = e5rt_get_last_error_message();
      v12 = 1024;
      v13 = v7;
      _os_log_error_impl(&dword_19C486000, v8, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a4)
    {
      +[MLModelErrorUtils genericErrorWithFormat:](MLModelErrorUtils, "genericErrorWithFormat:", CFSTR("E5RT: %s (%d)"), e5rt_get_last_error_message(), v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 0, v9, CFSTR("ML Program doesn't have the requested function named %s."), a3);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  *a1 = 0;
}

void sub_19C919238(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_program_function,MLE5ObjectDeleter<e5rt_program_function>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
    return (uint64_t *)e5rt_program_function_release();
  return result;
}

void sub_19C919424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C9195E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C919F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a6);

  std::unique_ptr<e5rt_program_function,MLE5ObjectDeleter<e5rt_program_function>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_compute_gpu_device,MLE5ObjectDeleter<e5rt_compute_gpu_device>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
    return (uint64_t *)e5rt_compute_gpu_device_release();
  return result;
}

uint64_t *std::unique_ptr<e5rt_precompiled_compute_op_create_options,MLE5ObjectDeleter<e5rt_precompiled_compute_op_create_options>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
    return (uint64_t *)e5rt_precompiled_compute_op_create_options_release();
  return result;
}

__n128 __Block_byref_object_copy__23892(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__23893(uint64_t a1)
{
  return std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 48);
}

void sub_19C91A560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_19C91A8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C91ABA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_19C91B628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C91B8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void (**v11)(_QWORD);
  void *v12;
  void *v13;
  void *v14;

  v11[2](v11);
  _Unwind_Resume(a1);
}

void sub_19C91BBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_19C91BEAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C91BFFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C91C118(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_19C91C864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_19C91CA74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C91CB80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C91CC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C91CCE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C91CD60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C91CDD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C91CF44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C91CFF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C91D0C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_19C91D260(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C91D32C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C91D3CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C91D4A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19C91D5C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C91D6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C91D960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_19C91DCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C91DF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_19C91E084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C91E178(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C91E278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C91E35C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C91E840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 96) = v3;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 96));
  *(_QWORD *)(v4 - 96) = v4 - 144;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 96));

  _Unwind_Resume(a1);
}

void sub_19C91E9A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C91EB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C91EE58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C91EEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLAppleWordEmbedding;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19C91F2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  void (**v14)(_QWORD);
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a12);

  v14[2](v14);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19C91F738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  void *v15;
  void *v16;
  void *v17;
  uint64_t *v18;
  void *v19;

  CoreML::Specification::SerializedModel::SharedDtor((uint64_t)&a15);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v18);

  _Unwind_Resume(a1);
}

void sub_19C92039C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45)
{
  void *v45;
  void *v46;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_19C920990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C920AA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19C920B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C920C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C920D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C92115C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_19C921638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void (**a10)(void), void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  a10[2]();
  _Unwind_Resume(a1);
}

void sub_19C921B30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::NameStore::AddVarNameUsed(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  std::runtime_error *exception;
  std::string *v25;
  __int128 v26;
  std::string v27;
  std::string v28;

  v5 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      v2 = v5;
      if (v5 >= v7)
        v2 = v5 % v7;
    }
    else
    {
      v2 = (v7 - 1) & v5;
    }
    v10 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v2);
    if (v10)
    {
      for (i = *v10; i; i = *(unsigned __int8 **)i)
      {
        v12 = *((_QWORD *)i + 1);
        if (v12 == v6)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)a2))
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v25 = std::string::append(&v27, " shadowed.");
            v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
            v28.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v26;
            v25->__r_.__value_.__l.__size_ = 0;
            v25->__r_.__value_.__r.__words[2] = 0;
            v25->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &v28);
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
        }
        else
        {
          if (v9 > 1)
          {
            if (v12 >= v7)
              v12 %= v7;
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v2)
            break;
        }
      }
    }
  }
  v13 = operator new(0x30uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_OWORD *)v13 + 1) = *(_OWORD *)a2;
  v14 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v13[4] = v14;
  v13[5] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v20);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v2 = v6 % v7;
      else
        v2 = v6;
    }
    else
    {
      v2 = (v7 - 1) & v6;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v22)
  {
    *v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v2) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v23 >= v7)
        v23 %= v7;
    }
    else
    {
      v23 &= v7 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19C921E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void **v21;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:ne180100](1, v21);
  _Unwind_Resume(a1);
}

void sub_19C921F8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C922520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void (**v12)(_QWORD);
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v12[2](v12);
  _Unwind_Resume(a1);
}

void sub_19C9229D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  CoreML::Specification::Scaler::~Scaler((CoreML::Specification::Scaler *)&a9);
  _Unwind_Resume(a1);
}

void sub_19C922C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C922DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C922EBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C922F4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C92349C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_19C92379C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void (**v3)(_QWORD);
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3[2](v3);
  _Unwind_Resume(a1);
}

void sub_19C923970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C923A28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C923BD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C923FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_19C9242CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_19C924474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C924594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_19C92495C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  void *v18;
  void *v19;
  uint64_t v20;

  MEMORY[0x1A1AD6260](v20, 0x1020C40DBF2485DLL);
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(a18);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C924A84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C924BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 72) = v13;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void std::default_delete<_MLModelInputArchiver>::operator()[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*(char **)(a1 + 24));
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1);
  JUMPOUT(0x1A1AD6260);
}

void sub_19C925260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  MEMORY[0x1A1AD6260](v17, 0x10A1C4092A090F6);
  _Unwind_Resume(a1);
}

void sub_19C9253FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C9254A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C92599C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a7);

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C925CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_19C925E44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C92623C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  void *v20;

  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);

  _Unwind_Resume(a1);
}

void sub_19C926514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C9265C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C926A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void (**v30)(_QWORD);
  pthread_rwlock_t *v31;
  uint64_t v32;
  void *v34;
  void *v35;

  v34 = *(void **)(v32 - 192);
  if (v34)
    operator delete(v34);
  v35 = *(void **)(v32 - 168);
  if (v35)
    operator delete(v35);
  pthread_rwlock_unlock(v31);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  v30[2](v30);

  ElapsedTimeRecorder::~ElapsedTimeRecorder(&a28);
  _Unwind_Resume(a1);
}

void sub_19C926D14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C92709C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  void *v22;
  pthread_rwlock_t *v23;

  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  pthread_rwlock_unlock(v23);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_19C927174(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C92736C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::BayesianProbitRegression::FeatureValues>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BD80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::BayesianProbitRegression::FeatureValues>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BD80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6CoreML24BayesianProbitRegression24BayesianProbitRegressionENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0x138uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E3D5BDB8;
  *((_QWORD *)v2 + 3) = 0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_DWORD *)v2 + 16) = 1065353216;
  *(_OWORD *)(v2 + 72) = xmmword_19CB39930;
  *(_OWORD *)(v2 + 88) = xmmword_19CB39930;
  result = pthread_rwlock_init((pthread_rwlock_t *)(v2 + 112), 0);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_19C9275B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::~__hash_table(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::BayesianProbitRegression::BayesianProbitRegression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BDB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::BayesianProbitRegression::BayesianProbitRegression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5BDB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_emplace<CoreML::BayesianProbitRegression::BayesianProbitRegression>::__on_zero_shared(uint64_t a1)
{
  pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 112));
  return std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::~__hash_table(a1 + 32);
}

id getString(uint64_t *a1)
{
  _BYTE *v1;
  uint64_t v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t *v5;
  void *v6;

  if (*((char *)a1 + 23) < 0)
  {
    v1 = (_BYTE *)*a1;
    v2 = a1[1];
    if (v2)
      v3 = v1 == 0;
    else
      v3 = 1;
    if (!v3)
      goto LABEL_8;
LABEL_17:
    v6 = 0;
    return v6;
  }
  if (!*((_BYTE *)a1 + 23))
    goto LABEL_17;
  v1 = a1;
  v2 = *((unsigned __int8 *)a1 + 23);
LABEL_8:
  v4 = v1;
  while (*v4 == 32)
  {
    ++v4;
    if (!--v2)
      goto LABEL_17;
  }
  if (v4 - v1 == -1)
    goto LABEL_17;
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  return v6;
}

void sub_19C927754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C9277C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C927860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C9278FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double Archiver::_MemoryStreamBuf::seekoff@<D0>(Archiver::_MemoryStreamBuf *this@<X0>, std::ios_base::seekdir a2@<W2>, uint64_t a3@<X1>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v7 = *((_DWORD *)this + 16) & a4;
  if ((v7 & 0x10) == 0)
  {
    if ((v7 & 8) != 0)
    {
      v8 = *((_QWORD *)this + 2);
      v9 = *((_QWORD *)this + 4) - v8;
      switch(a2)
      {
        case beg:
LABEL_17:
          v12 = -1;
          if ((a3 & 0x8000000000000000) == 0 && a3 < v9)
          {
            *((_QWORD *)this + 3) = v8 + a3;
            v12 = a3;
          }
          goto LABEL_20;
        case end:
          a3 += v9;
          goto LABEL_17;
        case cur:
          a3 = a3 - v8 + *((_QWORD *)this + 3);
          goto LABEL_17;
      }
    }
LABEL_11:
    v12 = -1;
    goto LABEL_20;
  }
  v10 = *((_QWORD *)this + 5);
  v11 = *((_QWORD *)this + 7) - v10;
  if (a2)
  {
    if (a2 == end)
    {
      a3 += v11;
    }
    else
    {
      if (a2 != cur)
        goto LABEL_11;
      a3 = a3 - v10 + *((_QWORD *)this + 6);
    }
  }
  v12 = -1;
  if ((a3 & 0x8000000000000000) == 0 && a3 <= v11)
  {
    *((_QWORD *)this + 6) = v10;
    Archiver::_MemoryStreamBuf::safe_pbump((uint64_t)this, a3);
    v12 = *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
  }
LABEL_20:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v12;
  return result;
}

uint64_t Archiver::_MemoryStreamBuf::seekpos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 128), 0, a3);
}

uint64_t Archiver::_MemoryStreamBuf::showmanyc(Archiver::_MemoryStreamBuf *this)
{
  return *((_QWORD *)this + 4) - *((_QWORD *)this + 3);
}

uint64_t Archiver::_MemoryStreamBuf::underflow(Archiver::_MemoryStreamBuf *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (v1 == *((unsigned __int8 **)this + 4))
    return 0xFFFFFFFFLL;
  else
    return *v1;
}

uint64_t Archiver::_MemoryStreamBuf::uflow(Archiver::_MemoryStreamBuf *this)
{
  unsigned __int8 *v1;
  uint64_t result;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (v1 == *((unsigned __int8 **)this + 4))
    return 0xFFFFFFFFLL;
  result = *v1;
  *((_QWORD *)this + 3) = v1 + 1;
  return result;
}

uint64_t Archiver::_MemoryStreamBuf::pbackfail(Archiver::_MemoryStreamBuf *this, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 2) == v2 || (_DWORD)a2 != -1 && *(char *)(v2 - 1) != (_DWORD)a2)
    return 0xFFFFFFFFLL;
  *((_QWORD *)this + 3) = v2 - 1;
  return a2;
}

uint64_t Archiver::_MemoryStreamBuf::overflow(Archiver::_MemoryStreamBuf *this, uint64_t a2)
{
  char v4;

  if ((_DWORD)a2 != -1)
  {
    v4 = a2;
    (*(void (**)(Archiver::_MemoryStreamBuf *, char *, uint64_t))(*(_QWORD *)this + 96))(this, &v4, 1);
  }
  return a2;
}

uint64_t Archiver::_MemoryStreamBuf::safe_pbump(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if ((a2 & 0x8000000000000000) == 0)
  {
    if (!((unint64_t)a2 >> 31))
      goto LABEL_11;
    v2 = 4294967294;
    if (a2 < 4294967294)
      v2 = a2;
    v3 = 0x7FFFFFFF * ((a2 - v2 + 2147483646) / 0x7FFFFFFFuLL);
    v4 = v3 + *(_QWORD *)(this + 48) + 0x7FFFFFFFLL;
    v5 = a2 - v3;
    v6 = -2147483647;
LABEL_10:
    a2 = v5 + v6;
    *(_QWORD *)(this + 48) = v4;
LABEL_11:
    if (!a2)
      return this;
    goto LABEL_12;
  }
  if ((unint64_t)a2 <= 0xFFFFFFFF7FFFFFFFLL)
  {
    v7 = 0xFFFFFFFF00000000;
    if (a2 > (uint64_t)0xFFFFFFFF00000000)
      v7 = a2;
    v5 = (v7 - a2 + 0x7FFFFFFF) & 0xFFFFFFFF80000000;
    v4 = *(_QWORD *)(this + 48) - v5 - 0x80000000;
    v6 = a2 + 0x80000000;
    goto LABEL_10;
  }
LABEL_12:
  *(_QWORD *)(this + 48) += (int)a2;
  return this;
}

void Archiver::_MemoryIStreamBuf::~_MemoryIStreamBuf(id *this)
{

  std::streambuf::~streambuf();
}

{

  std::streambuf::~streambuf();
  JUMPOUT(0x1A1AD6260);
}

uint64_t Archiver::_MemoryIStreamBuf::xsgetn(Archiver::_MemoryIStreamBuf *this, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) - v3 >= a3)
    v4 = a3;
  else
    v4 = *((_QWORD *)this + 4) - v3;
  if (v4 < 1)
    return 0;
  v6 = v3 - *((_QWORD *)this + 2);
  objc_msgSend(*((id *)this + 9), "getBytes:range:", a2, v6, v4);
  v7 = objc_msgSend(*((id *)this + 9), "bytes");
  v8 = objc_msgSend(*((id *)this + 9), "length");
  *((_QWORD *)this + 2) = v7;
  *((_QWORD *)this + 3) = v7 + v6 + v4;
  *((_QWORD *)this + 4) = v7 + v8;
  return v4;
}

void Archiver::_MemoryOStreamBuf::~_MemoryOStreamBuf(id *this)
{

  std::streambuf::~streambuf();
}

{

  std::streambuf::~streambuf();
  JUMPOUT(0x1A1AD6260);
}

uint64_t Archiver::_MemoryOStreamBuf::xsputn(Archiver::_MemoryOStreamBuf *this, const char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3 < 1)
    return 0;
  v3 = a3;
  v5 = *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
  objc_msgSend(*((id *)this + 9), "replaceBytesInRange:withBytes:", v5, a3, a2);
  v6 = objc_msgSend(*((id *)this + 9), "bytes");
  v7 = objc_msgSend(*((id *)this + 9), "length");
  *((_QWORD *)this + 5) = v6;
  *((_QWORD *)this + 6) = v6;
  *((_QWORD *)this + 7) = v6 + v7;
  Archiver::_MemoryStreamBuf::safe_pbump((uint64_t)this, v5 + v3);
  return v3;
}

Archiver::_MemoryIStream *Archiver::_MemoryIStream::_MemoryIStream(Archiver::_MemoryIStream *this, NSData *a2)
{
  NSData *v3;
  NSData *v4;
  NSData *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2;
  *((_QWORD *)this + 12) = &unk_1E3D49058;
  *(_QWORD *)this = &unk_1E3D49030;
  *((_QWORD *)this + 1) = 0;
  std::ios_base::init((std::ios_base *)((char *)this + 96), 0);
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 60) = -1;
  *(_QWORD *)this = &off_1E3D5B0C0;
  *((_QWORD *)this + 12) = off_1E3D5B0E8;
  v4 = v3;
  std::streambuf::basic_streambuf();
  *((_DWORD *)this + 20) = 12;
  *((_QWORD *)this + 2) = &off_1E3D5B1B0;
  v5 = v4;
  *((_QWORD *)this + 11) = v5;
  v6 = -[NSData bytes](v5, "bytes");
  v7 = -[NSData length](v5, "length");
  *((_QWORD *)this + 4) = v6;
  *((_QWORD *)this + 5) = v6;
  *((_QWORD *)this + 6) = v6 + v7;

  *((_QWORD *)this + 17) = (char *)this + 16;
  std::ios_base::clear((std::ios_base *)((char *)this + 96), 0);

  return this;
}

void sub_19C927E94(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A1AD61C4](v3);

  _Unwind_Resume(a1);
}

void sub_19C9280C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C92815C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C9282A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C9283D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_19C9286F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C9287BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C9289A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C928B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  uint64_t v20;

  _Block_object_dispose(&a15, 8);

  _Block_object_dispose((const void *)(v20 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25768(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__25769(uint64_t a1)
{

}

void sub_19C928BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C928D10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C928E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C928F28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C929070(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C929118(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C929190(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C929230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19C9292E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C929330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C9293CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19C929430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

objc_object *LabelIndexMapFromSharedKeySet(objc_object *a1)
{
  objc_object *v1;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("sharedKeySet must be created with +[MLProbabilityDictionary sharedKeySetForKeys:]."));
  return v1;
}

void sub_19C929500(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C929550(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C92964C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C9296C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C929744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C92979C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C9297E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C929844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C9298B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C9299D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C929A80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C929B54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C929C00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C929D20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::NeuralNetwork::UpdatableNeuralNetworkEspressoNetBackend::~UpdatableNeuralNetworkEspressoNetBackend(void **this)
{
  CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::~NeuralNetworkEspressoNetBackend(this);
  JUMPOUT(0x1A1AD6260);
}

void CoreML::NNCompiler::Backend::NeuralNetwork::UpdatableNeuralNetworkEspressoNetBackend::Compile(CoreML::NNCompiler::Backend::NeuralNetwork::UpdatableNeuralNetworkEspressoNetBackend *this, OArchive *a2)
{
  CoreML::MLModelException *exception;
  NSError *v5;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 1) + 48))(*((_QWORD *)a2 + 1)) == 1)
  {
    exception = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    +[MLModelErrorUtils IOErrorWithFormat:](MLModelErrorUtils, "IOErrorWithFormat:", CFSTR("UpdatableNeuralNetworkEspressoNetBackend doesn't support in-memory compilation."));
    v5 = (NSError *)objc_claimAutoreleasedReturnValue();
    CoreML::MLModelException::MLModelException(exception, v5);
  }
  CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::Compile(this, a2);
  WriteUpdatableModel((char *)a2, *((_QWORD *)this + 3), (uint64_t *)this + 6);
}

void sub_19C929E6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WriteUpdatableModel(char *a1, uint64_t a2, uint64_t *a3)
{
  google::protobuf::MessageLite *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void **v10;
  size_t v11;
  void *p_p;
  const void *v13;
  void *v14;
  int v15;
  uint64_t *v16;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v17;
  void *v18;
  uint64_t *v19;
  uint64_t *v20;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  const CoreML::Specification::Int64Parameter *v41;
  void *v42;
  void *v43;
  uint64_t *v44;
  void *v45;
  uint64_t *v46;
  void *v47;
  void *v48;
  uint64_t *v49;
  void *v50;
  uint64_t *v51;
  void *v52;
  void *v53;
  uint64_t *v54;
  int v55;
  _QWORD *v56;
  const CoreML::Specification::DoubleParameter *v57;
  const CoreML::Specification::Int64Parameter *v58;
  const CoreML::Specification::DoubleParameter *v59;
  const CoreML::Specification::DoubleParameter *v60;
  const CoreML::Specification::DoubleParameter *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  id v79;
  void *v80;
  id v81;
  uint64_t *v82;
  const CoreML::Specification::DoubleParameter *v83;
  const CoreML::Specification::Int64Parameter *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  const CoreML::Specification::DoubleParameter *v93;
  void *v94;
  void *v95;
  void *v96;
  id v97;
  uint64_t v98;
  NSError *v99;
  void *v100;
  NSError *v101;
  BOOL v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  void *v110;
  void *v111;
  uint64_t *v112;
  void *v113;
  id v114;
  void *v115;
  id v116;
  void *v117;
  id v118;
  void *v119;
  uint64_t v120;
  char *v121;
  double v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  CoreML::MLModelException *exception;
  NSError *v142;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v143;
  NSObject *v144;
  CoreML::MLModelException *v145;
  NSError *v146;
  uint64_t v147;
  void *v148;
  NSError *v149;
  uint64_t v150;
  MLNeuralNetworksCompileTimeParams *v151;
  void *v152;
  void *v153;
  void *v155;
  void *v157;
  void *v158;
  id v159;
  void *v160;
  void *v161;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v162;
  _QWORD v163[3];
  char v164;
  void *__p;
  void (**v166)(google::protobuf::io::OstreamOutputStream::CopyingOstreamOutputStream *__hidden);
  double v167;
  void (**v168)(google::protobuf::io::CopyingOutputStreamAdaptor *__hidden);
  char *v169;
  __int16 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  NSError *v174;
  id v175;
  id v176;
  id v177;
  _BYTE v178[16];
  double v179;
  _BYTE v180[16];
  double v181;
  id v182;
  _BYTE v183[16];
  double v184;
  void *v185[2];
  uint64_t v186;
  void *v187[2];
  uint64_t v188;
  _QWORD v189[3];
  _QWORD v190[3];
  _QWORD v191[5];
  _QWORD v192[5];
  _QWORD v193[5];
  _QWORD v194[5];
  _QWORD v195[2];
  _QWORD v196[2];
  _QWORD v197[2];
  _QWORD v198[4];

  v198[2] = *MEMORY[0x1E0C80C00];
  v4 = (google::protobuf::MessageLite *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  std::string::basic_string[abi:ne180100]<0>(v185, "NetworkUpdateParameters");
  std::string::basic_string[abi:ne180100]<0>(&__p, "updateParameters");
  v5 = OArchive::nestedArchive(a1, (uint64_t)&__p);
  if (SHIBYTE(v167) < 0)
    operator delete(__p);
  (*(void (**)(_QWORD))(**((_QWORD **)v5 + 1) + 56))(*((_QWORD *)v5 + 1));
  v6 = OArchive::nestedArchive(v5, (uint64_t)v185);
  (*(void (**)(_QWORD))(**((_QWORD **)v6 + 1) + 56))(*((_QWORD *)v6 + 1));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v6 + 1) + 56))(*((_QWORD *)v6 + 1));
  __p = &off_1E3D59908;
  v166 = &off_1E3D598E0;
  *(_QWORD *)&v167 = v7;
  v168 = &off_1E3D59990;
  v169 = (char *)&v166;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v173 = 0x2000;
  if ((google::protobuf::MessageLite::SerializeToZeroCopyStream(v4, (google::protobuf::io::ZeroCopyOutputStream *)&__p) & 1) != 0)
  {
    CoreML::Result::Result((CoreML::Result *)v163);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v187, "unable to serialize object");
    v163[0] = 4;
    std::operator+<char>();
    if (SHIBYTE(v188) < 0)
      operator delete(v187[0]);
  }
  google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)&__p);
  if (SHIBYTE(v186) < 0)
    operator delete(v185[0]);
  if ((v163[0] & 0xFFFFFFEF) != 0)
  {
    exception = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    +[MLModelErrorUtils IOErrorWithFormat:](MLModelErrorUtils, "IOErrorWithFormat:", CFSTR("Failed to archive update parameters."));
    v142 = (NSError *)objc_claimAutoreleasedReturnValue();
    CoreML::MLModelException::MLModelException(exception, v142);
  }
  v8 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2) + 32) + 8);
  v9 = (void *)MEMORY[0x1E0CB3940];
  v10 = *(const void ***)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2) + 32)
                                    + 8)
                        + 16);
  if (*((char *)v10 + 23) >= 0)
    v11 = *((unsigned __int8 *)v10 + 23);
  else
    v11 = (size_t)v10[1];
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v11 + 10);
  if (v167 < 0.0)
    p_p = __p;
  if (v11)
  {
    if (*((char *)v10 + 23) >= 0)
      v13 = v10;
    else
      v13 = *v10;
    memmove(p_p, v13, v11);
  }
  strcpy((char *)p_p + v11, "_lossValue");
  if (v167 >= 0.0)
    v14 = &__p;
  else
    v14 = __p;
  objc_msgSend(v9, "stringWithUTF8String:", v14);
  v160 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v167) < 0)
    operator delete(__p);
  v15 = *(_DWORD *)(v8 + 36);
  if (v15 != 10)
  {
    if (v15 != 11)
    {
      v143 = 0;
      +[MLModelErrorUtils updateErrorWithFormat:](MLModelErrorUtils, "updateErrorWithFormat:", CFSTR("Current loss layer is not supported."));
      v99 = (NSError *)objc_claimAutoreleasedReturnValue();
LABEL_167:

      goto LABEL_168;
    }
    v16 = *(uint64_t **)(*(_QWORD *)(v8 + 24) + 24);
    if (*((char *)v16 + 23) < 0)
      v16 = (uint64_t *)*v16;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16);
    v17 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)objc_claimAutoreleasedReturnValue();
    v162 = v17;
    v18 = (void *)MEMORY[0x1E0CB3940];
    if (*(_DWORD *)(v8 + 36) == 11)
    {
      v19 = *(uint64_t **)(v8 + 24);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v17);
      v19 = &CoreML::Specification::_MeanSquaredErrorLossLayer_default_instance_;
    }
    v35 = v19[2];
    if (*(char *)(v35 + 23) < 0)
      v35 = *(_QWORD *)v35;
    objc_msgSend(v18, "stringWithUTF8String:", v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D1F4A0], "L2LossWithInputName:targetInputName:lossOutputName:", v36, v162, v160);
    v37 = objc_claimAutoreleasedReturnValue();
    if (v37)
    {
      v38 = 2;
      v34 = (uint64_t)v36;
      goto LABEL_60;
    }
    +[MLModelErrorUtils updateErrorWithFormat:](MLModelErrorUtils, "updateErrorWithFormat:", CFSTR("Error in initalizing mean squared error loss layer. This loss layer might be invalid."));
    v99 = (NSError *)objc_claimAutoreleasedReturnValue();
LABEL_166:

    v143 = v162;
    goto LABEL_167;
  }
  v20 = *(uint64_t **)(*(_QWORD *)(v8 + 24) + 24);
  if (*((char *)v20 + 23) < 0)
    v20 = (uint64_t *)*v20;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v20);
  v21 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)objc_claimAutoreleasedReturnValue();
  v162 = v21;
  v22 = (void *)MEMORY[0x1E0CB3940];
  if (*(_DWORD *)(v8 + 36) == 10)
  {
    v23 = *(uint64_t **)(v8 + 24);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v21);
    v23 = &CoreML::Specification::_CategoricalCrossEntropyLossLayer_default_instance_;
  }
  v24 = v23[2];
  if (*(char *)(v24 + 23) < 0)
    v24 = *(_QWORD *)v24;
  objc_msgSend(v22, "stringWithUTF8String:", v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v27 = *(_QWORD *)(v26 + 16);
  if (v27)
    v28 = (uint64_t *)(v27 + 8);
  else
    v28 = 0;
  v29 = *(int *)(v26 + 8);
  if (!(_DWORD)v29)
  {
LABEL_49:
    v34 = (uint64_t)v25;
    goto LABEL_58;
  }
  v30 = 8 * v29;
  while (1)
  {
    v31 = *v28;
    if (*(_DWORD *)(*v28 + 140) == 175)
      break;
LABEL_48:
    ++v28;
    v30 -= 8;
    if (!v30)
      goto LABEL_49;
  }
  v32 = *(uint64_t **)(*(_QWORD *)(v31 + 56) + 8);
  if (*((char *)v32 + 23) < 0)
    v32 = (uint64_t *)*v32;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v33, "isEqualToString:", v25))
  {

    goto LABEL_48;
  }
  v39 = *(uint64_t **)(*(_QWORD *)(v31 + 32) + 8);
  if (*((char *)v39 + 23) < 0)
    v39 = (uint64_t *)*v39;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v39);
  v34 = objc_claimAutoreleasedReturnValue();

LABEL_58:
  objc_msgSend(MEMORY[0x1E0D1F4A0], "crossEntropyLossWithInputName:targetInputName:lossOutputName:", v34, v162, v160);
  v37 = objc_claimAutoreleasedReturnValue();
  if (!v37)
  {
    +[MLModelErrorUtils updateErrorWithFormat:](MLModelErrorUtils, "updateErrorWithFormat:", CFSTR("Error in initalizing categorical cross entropy loss layer. This loss layer might be invalid."));
    v99 = (NSError *)objc_claimAutoreleasedReturnValue();
    v36 = (void *)v34;
    goto LABEL_166;
  }
  v38 = 1;
LABEL_60:
  v161 = (void *)objc_msgSend(MEMORY[0x1E0C9AA70], "mutableCopy");
  v150 = v38;
  v157 = (void *)v37;
  v159 = (id)v34;
  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  if (*(_QWORD *)(v40 + 48))
    v41 = *(const CoreML::Specification::Int64Parameter **)(v40 + 48);
  else
    v41 = (const CoreML::Specification::Int64Parameter *)&CoreML::Specification::_Int64Parameter_default_instance_;
  CoreML::Specification::Int64Parameter::Int64Parameter((CoreML::Specification::Int64Parameter *)v187, v41);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v188);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  +[MLParameterKey epochs](MLParameterKey, "epochs");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v161, "setObject:forKeyedSubscript:", v42, v43);

  v44 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  if (v44 != &CoreML::Specification::_NetworkUpdateParameters_default_instance_ && v44[7])
  {
    v45 = (void *)MEMORY[0x1E0CB37E8];
    v46 = *(uint64_t **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2) + 56);
    if (!v46)
      v46 = &CoreML::Specification::_BoolParameter_default_instance_;
    objc_msgSend(v45, "numberWithBool:", *((unsigned __int8 *)v46 + 16));
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    +[MLParameterKey shuffle](MLParameterKey, "shuffle");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v161, "setObject:forKeyedSubscript:", v47, v48);

  }
  v49 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  if (v49 != &CoreML::Specification::_NetworkUpdateParameters_default_instance_ && v49[8])
  {
    v50 = (void *)MEMORY[0x1E0CB37E8];
    v51 = *(uint64_t **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2) + 64);
    if (!v51)
      v51 = &CoreML::Specification::_Int64Parameter_default_instance_;
    objc_msgSend(v50, "numberWithLongLong:", v51[2]);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    +[MLParameterKey seed](MLParameterKey, "seed");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v161, "setObject:forKeyedSubscript:", v52, v53);

  }
  v54 = *(uint64_t **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2) + 40);
  if (!v54)
    v54 = &CoreML::Specification::_Optimizer_default_instance_;
  v55 = *((_DWORD *)v54 + 7);
  if (v55 == 10)
  {
    v82 = (uint64_t *)v54[2];
    if (v82[2])
      v83 = (const CoreML::Specification::DoubleParameter *)v82[2];
    else
      v83 = (const CoreML::Specification::DoubleParameter *)&CoreML::Specification::_DoubleParameter_default_instance_;
    CoreML::Specification::DoubleParameter::DoubleParameter((CoreML::Specification::DoubleParameter *)&__p, v83);
    if (v82[3])
      v84 = (const CoreML::Specification::Int64Parameter *)v82[3];
    else
      v84 = (const CoreML::Specification::Int64Parameter *)&CoreML::Specification::_Int64Parameter_default_instance_;
    CoreML::Specification::Int64Parameter::Int64Parameter((CoreML::Specification::Int64Parameter *)v185, v84);
    +[MLParameterKey learningRate](MLParameterKey, "learningRate");
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    v197[0] = v85;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v167);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    v198[0] = v86;
    +[MLParameterKey miniBatchSize](MLParameterKey, "miniBatchSize");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    v197[1] = v87;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v186);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    v198[1] = v88;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v198, v197, 2);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    v158 = (void *)objc_msgSend(v89, "mutableCopy");

    v195[0] = *MEMORY[0x1E0D20190];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v186);
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    v196[0] = v90;
    v195[1] = *MEMORY[0x1E0D201B0];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v167);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    v196[1] = v91;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v196, v195, 2);
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    v77 = (void *)objc_msgSend(v92, "mutableCopy");

    if (v82 != &CoreML::Specification::_SGDOptimizer_default_instance_)
    {
      v93 = (const CoreML::Specification::DoubleParameter *)v82[4];
      if (v93)
      {
        CoreML::Specification::DoubleParameter::DoubleParameter((CoreML::Specification::DoubleParameter *)v183, v93);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v184);
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        +[MLParameterKey momentum](MLParameterKey, "momentum");
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v158, "setObject:forKeyedSubscript:", v94, v95);

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v184);
        v96 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v77, "setObject:forKeyedSubscript:", v96, *MEMORY[0x1E0D201B8]);

        CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)v183);
      }
    }
    v182 = 0;
    createEspressoOptimizer(0, v77, &v182);
    v78 = objc_claimAutoreleasedReturnValue();
    v97 = v182;
    v80 = v97;
    if (v78)
    {
      CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)v185);
      CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)&__p);
      v81 = 0;
      v98 = 1;
      goto LABEL_109;
    }
    v99 = (NSError *)v97;
    CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)v185);
    CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)&__p);
    v102 = 0;
    v101 = v99;
LABEL_157:

    v100 = v158;
  }
  else
  {
    if (v55 == 11)
    {
      v56 = (_QWORD *)v54[2];
      if (v56[2])
        v57 = (const CoreML::Specification::DoubleParameter *)v56[2];
      else
        v57 = (const CoreML::Specification::DoubleParameter *)&CoreML::Specification::_DoubleParameter_default_instance_;
      CoreML::Specification::DoubleParameter::DoubleParameter((CoreML::Specification::DoubleParameter *)&__p, v57);
      if (v56[3])
        v58 = (const CoreML::Specification::Int64Parameter *)v56[3];
      else
        v58 = (const CoreML::Specification::Int64Parameter *)&CoreML::Specification::_Int64Parameter_default_instance_;
      CoreML::Specification::Int64Parameter::Int64Parameter((CoreML::Specification::Int64Parameter *)v185, v58);
      if (v56[4])
        v59 = (const CoreML::Specification::DoubleParameter *)v56[4];
      else
        v59 = (const CoreML::Specification::DoubleParameter *)&CoreML::Specification::_DoubleParameter_default_instance_;
      CoreML::Specification::DoubleParameter::DoubleParameter((CoreML::Specification::DoubleParameter *)v183, v59);
      if (v56[5])
        v60 = (const CoreML::Specification::DoubleParameter *)v56[5];
      else
        v60 = (const CoreML::Specification::DoubleParameter *)&CoreML::Specification::_DoubleParameter_default_instance_;
      CoreML::Specification::DoubleParameter::DoubleParameter((CoreML::Specification::DoubleParameter *)v180, v60);
      if (v56[6])
        v61 = (const CoreML::Specification::DoubleParameter *)v56[6];
      else
        v61 = (const CoreML::Specification::DoubleParameter *)&CoreML::Specification::_DoubleParameter_default_instance_;
      CoreML::Specification::DoubleParameter::DoubleParameter((CoreML::Specification::DoubleParameter *)v178, v61);
      +[MLParameterKey learningRate](MLParameterKey, "learningRate");
      v148 = (void *)objc_claimAutoreleasedReturnValue();
      v193[0] = v148;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v167);
      v152 = (void *)objc_claimAutoreleasedReturnValue();
      v194[0] = v152;
      +[MLParameterKey miniBatchSize](MLParameterKey, "miniBatchSize");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v193[1] = v62;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v186);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      v194[1] = v63;
      +[MLParameterKey beta1](MLParameterKey, "beta1");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v193[2] = v64;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v184);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      v194[2] = v65;
      +[MLParameterKey beta2](MLParameterKey, "beta2");
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      v193[3] = v66;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v181);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      v194[3] = v67;
      +[MLParameterKey eps](MLParameterKey, "eps");
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      v193[4] = v68;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v179);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      v194[4] = v69;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v194, v193, 5);
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      v158 = (void *)objc_msgSend(v70, "mutableCopy");

      v191[0] = *MEMORY[0x1E0D20190];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v186);
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      v192[0] = v71;
      v191[1] = *MEMORY[0x1E0D201B0];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v167);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      v192[1] = v72;
      v191[2] = *MEMORY[0x1E0D20198];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v184);
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      v192[2] = v73;
      v191[3] = *MEMORY[0x1E0D201A0];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v181);
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      v192[3] = v74;
      v191[4] = *MEMORY[0x1E0D201A8];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v179);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      v192[4] = v75;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v192, v191, 5);
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      v77 = (void *)objc_msgSend(v76, "mutableCopy");

      v177 = 0;
      createEspressoOptimizer(1, v77, &v177);
      v78 = objc_claimAutoreleasedReturnValue();
      v79 = v177;
      v80 = v79;
      if (v78)
        v81 = 0;
      else
        v81 = v79;
      CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)v178);
      CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)v180);
      CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)v183);
      CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)v185);
      CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)&__p);
      v98 = 2;
LABEL_109:
      v103 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v153 = (void *)v78;
      v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v105 = *(_QWORD *)(v104 + 16);
      if (v105)
        v106 = v105 + 8;
      else
        v106 = 0;
      v107 = *(int *)(v104 + 8);
      if ((_DWORD)v107)
      {
        v108 = 8 * v107;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)v106 + 120))
          {
            v109 = *(uint64_t **)(*(_QWORD *)v106 + 112);
            if (*((char *)v109 + 23) < 0)
              v109 = (uint64_t *)*v109;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v109);
            v110 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v103, "addObject:", v110);

          }
          v106 += 8;
          v108 -= 8;
        }
        while (v108);
      }
      v111 = (void *)MEMORY[0x1E0C99E98];
      if (*((char *)a3 + 23) >= 0)
        v112 = a3;
      else
        v112 = (uint64_t *)*a3;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v112);
      v113 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v111, "fileURLWithPath:", v113);
      v155 = (void *)objc_claimAutoreleasedReturnValue();

      v114 = objc_alloc(MEMORY[0x1E0D1F4B0]);
      v176 = v80;
      v115 = (void *)objc_msgSend(v114, "initWithInferenceNetworkPath:inferenceInputs:inferenceOutputs:error:", v155, MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA60], &v176);
      v101 = (NSError *)v176;

      if (v115)
      {
        v116 = objc_alloc(MEMORY[0x1E0D1F4D0]);
        v175 = v81;
        v147 = objc_msgSend(v116, "initForLayers:error:", v103, &v175);
        v146 = (NSError *)v175;

        v117 = (void *)MEMORY[0x1A1AD6ED8]();
        v118 = objc_alloc(MEMORY[0x1E0D1F4C0]);
        v174 = v101;
        v119 = (void *)objc_msgSend(v118, "initWithModelDefinition:lossDefinition:variablesDefinition:optimizerDefinition:forPlatform:error:", v115, v157, v147, v153, 1, &v174);
        v149 = v174;

        objc_autoreleasePoolPop(v117);
        v102 = v119 != 0;
        if (v119)
        {
          v189[0] = CFSTR("kUpdateLossTargetName");
          v189[1] = CFSTR("kUpdateLossInputName");
          v190[0] = v162;
          v190[1] = v159;
          v189[2] = CFSTR("kUpdateLossOutputName");
          v190[2] = v160;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v190, v189, 3);
          v120 = objc_claimAutoreleasedReturnValue();
          v151 = -[MLNeuralNetworksCompileTimeParams initWithLossType:optimizerType:optimizerParameters:lossParameters:trainableLayerNames:updateParameters:]([MLNeuralNetworksCompileTimeParams alloc], "initWithLossType:optimizerType:optimizerParameters:lossParameters:trainableLayerNames:updateParameters:", v150, v98, v158, v120, v103, v161);
          std::string::basic_string[abi:ne180100]<0>(v185, "updateParameters");
          v121 = OArchive::nestedArchive(a1, (uint64_t)v185);
          if (SHIBYTE(v186) < 0)
            operator delete(v185[0]);
          (*(void (**)(_QWORD))(**((_QWORD **)v121 + 1) + 56))(*((_QWORD *)v121 + 1));
          LOBYTE(__p) = *v121;
          v122 = *((double *)v121 + 2);
          v166 = (void (**)(google::protobuf::io::OstreamOutputStream::CopyingOstreamOutputStream *__hidden))*((_QWORD *)v121 + 1);
          v167 = v122;
          if (v122 != 0.0)
          {
            v123 = (unint64_t *)(*(_QWORD *)&v122 + 8);
            do
              v124 = __ldxr(v123);
            while (__stxr(v124 + 1, v123));
          }
          std::map<std::string,OArchive>::map[abi:ne180100]((uint64_t)&v168, (_QWORD *)v121 + 3);
          v125 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
          v126 = *(_QWORD *)(v125 + 16);
          if (v126)
            v127 = (uint64_t *)(v126 + 8);
          else
            v127 = 0;
          v128 = *(int *)(v125 + 8);
          if ((_DWORD)v128)
          {
            v129 = 0;
            v130 = 8 * v128;
            do
            {
              v131 = *v127++;
              v129 += *(unsigned __int8 *)(v131 + 120);
              v130 -= 8;
            }
            while (v130);
          }
          else
          {
            v129 = 0;
          }
          operator<<((uint64_t)&__p, v129);
          v133 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
          v134 = *(_QWORD *)(v133 + 16);
          if (v134)
            v135 = v134 + 8;
          else
            v135 = 0;
          v136 = *(int *)(v133 + 8);
          if ((_DWORD)v136)
          {
            v137 = 8 * v136;
            do
            {
              if (*(_BYTE *)(*(_QWORD *)v135 + 120))
                operator<<((uint64_t)&__p, *(uint64_t **)(*(_QWORD *)v135 + 112));
              v135 += 8;
              v137 -= 8;
            }
            while (v137);
          }
          std::string::basic_string[abi:ne180100]<0>(v185, (char *)objc_msgSend(objc_retainAutorelease(v159), "UTF8String"));
          operator<<((uint64_t)&__p, (uint64_t *)v185);
          if (SHIBYTE(v186) < 0)
            operator delete(v185[0]);
          std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(v169);
          v138 = *(std::__shared_weak_count **)&v167;
          if (*(_QWORD *)&v167)
          {
            v139 = (unint64_t *)(*(_QWORD *)&v167 + 8);
            do
              v140 = __ldaxr(v139);
            while (__stlxr(v140 - 1, v139));
            if (!v140)
            {
              ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
              std::__shared_weak_count::__release_weak(v138);
            }
          }

          v99 = v146;
          v132 = (void *)v120;
        }
        else
        {
          +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 6);
          v99 = (NSError *)objc_claimAutoreleasedReturnValue();
          v132 = v146;
        }

        v81 = (id)v147;
        v101 = v149;
      }
      else
      {
        +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 6, v101, CFSTR("Error in initializing updatable model."));
        v99 = (NSError *)objc_claimAutoreleasedReturnValue();
        v102 = 0;
      }

      goto LABEL_157;
    }
    +[MLModelErrorUtils updateErrorWithFormat:](MLModelErrorUtils, "updateErrorWithFormat:", CFSTR("Current optimizer is not supported."));
    v99 = (NSError *)objc_claimAutoreleasedReturnValue();
    v100 = 0;
    v101 = 0;
    v102 = 0;
  }

  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)v187);
  if (!v102)
  {
LABEL_168:
    +[MLLogging coreChannel](MLLogging, "coreChannel");
    v144 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19C486000, v144, OS_LOG_TYPE_ERROR, "Error compiling updatable model.", (uint8_t *)&__p, 2u);
    }

    v145 = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    CoreML::MLModelException::MLModelException(v145, v99);
  }

  if (v164 < 0)
    operator delete((void *)v163[1]);
}

void sub_19C92B10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  void *v30;

  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id createEspressoOptimizer(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  id v10;

  v5 = a2;
  v10 = 0;
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D1F4B8]), "initWithOptimizationAlgorithm:parameters:error:", a1, v5, &v10);
  v7 = v10;
  if (v6)
  {
    v8 = v6;
  }
  else if (a3)
  {
    +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 6, v7, CFSTR("Error in initalizing optimizer. The parameters might be invalid.."));
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

void sub_19C92B6A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C92BDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__26108(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26109(uint64_t a1)
{

}

void sub_19C92C950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C92C9F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C92CC30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C92CEE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C92D088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C92D310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C92D4D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C92D620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C92D8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  void *v10;
  void *v11;
  void *v12;

  operator delete(__p);
  operator delete(v12);

  _Unwind_Resume(a1);
}

void sub_19C92DB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_19C92E048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void (**v11)(_QWORD);
  void *v12;
  va_list va;

  va_start(va, a10);

  v11[2](v11);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19C92E4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, char a18, uint64_t a19, uint64_t a20,_QWORD *__p)
{
  uint64_t *v21;

  if (__p)
  {
    if (!*__p)
      operator delete(__p);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v21);

  _Unwind_Resume(a1);
}

void sub_19C92E6C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_19C92E7EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void LayerTranslator::addSlice(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::SliceLayerParams *v7;
  unsigned int v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v15;
  const CoreML::Specification::SliceLayerParams *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  std::runtime_error *exception;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  std::runtime_error *v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  std::runtime_error *v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  std::runtime_error *v61;
  void *v62;
  std::string v63;
  std::string v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  int v67;
  int32x2_t v68;
  int v69;
  uint64_t v70;
  void (**v71)(CoreML::Specification::SliceLayerParams *__hidden);
  uint64_t v72;
  int64x2_t v73;
  uint64_t v74;
  int v75;
  __int128 *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 *v79;
  __int128 *v80;
  uint64_t v81;
  std::string v82;
  std::string v83;
  __int128 __p;
  __int128 v85;
  uint64_t v86;
  void *v87[31];
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void (**v94)(CoreML::Specification::SliceLayerParams *__hidden);
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  _BYTE v100[32];
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v82.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v5;
  }
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v79, (uint64_t *)&v76, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 350)
  {
    v7 = (const CoreML::Specification::SliceLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::SliceLayerParams *)&CoreML::Specification::_SliceLayerParams_default_instance_;
  }
  CoreML::Specification::SliceLayerParams::SliceLayerParams((CoreML::Specification::SliceLayerParams *)&v71, v7);
  v67 = 2;
  v70 = 0x100000000;
  v68 = vmovn_s64(v73);
  v69 = v74;
  if (v75 > 1)
  {
    if (v75 == 2)
    {
      v67 = 0;
      goto LABEL_15;
    }
    v8 = 0x7FFFFFFF;
  }
  else
  {
    if (v75 == 1)
    {
      v67 = 1;
      goto LABEL_15;
    }
    v8 = 0x80000000;
  }
  if (v75 == v8)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"Slice layer: '", 14);
    v32 = *((_QWORD *)a2 + 14);
    v33 = *(char *)(v32 + 23);
    if (v33 >= 0)
      v34 = *((_QWORD *)a2 + 14);
    else
      v34 = *(_QWORD *)v32;
    if (v33 >= 0)
      v35 = *(unsigned __int8 *)(v32 + 23);
    else
      v35 = *(_QWORD *)(v32 + 8);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v34, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"': unknown value for parameter 'axis'.", 38);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, (const std::string *)v100);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_15:
  v9 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "slice");
  memset(&v64, 0, sizeof(v64));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v64, v76, v77, 0xAAAAAAAAAAAAAAABLL * (((char *)v77 - (char *)v76) >> 3));
  memset(&v63, 0, sizeof(v63));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v63, v79, v80, 0xAAAAAAAAAAAAAAABLL * (((char *)v80 - (char *)v79) >> 3));
  Espresso::sequential_builder::add<Espresso::slice_params_t>(&v65, v9, (uint64_t)&__p, (uint64_t)&v82, (uint64_t)&v67, (__int128 *)v64.__r_.__value_.__l.__data_, (__int128 *)v64.__r_.__value_.__l.__size_, (__int128 **)&v63);
  v10 = v66;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)v100 = &v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
  *(_QWORD *)v100 = &v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
  if (SBYTE7(v85) < 0)
    operator delete((void *)__p);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v79);
  }
  else
  {
    v13 = (uint64_t **)*((_QWORD *)this + 1);
    v14 = std::map<std::string,std::string>::at((uint64_t)v13, v76);
    *(_OWORD *)v100 = *(_OWORD *)v14;
    *(_OWORD *)&v100[16] = *(_OWORD *)(v14 + 16);
    v101 = *(_QWORD *)(v14 + 32);
    v102 = 0;
    v103 = 0;
    v104 = 0;
    v15 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v102, *(const void **)(v14 + 40), *(_QWORD *)(v14 + 48), (uint64_t)(*(_QWORD *)(v14 + 48)- *(_QWORD *)(v14 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 350)
    {
      v16 = (const CoreML::Specification::SliceLayerParams *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v15);
      v16 = (const CoreML::Specification::SliceLayerParams *)&CoreML::Specification::_SliceLayerParams_default_instance_;
    }
    CoreML::Specification::SliceLayerParams::SliceLayerParams((CoreML::Specification::SliceLayerParams *)&v94, v16);
    v17 = v96;
    v18 = v97;
    v19 = v98;
    v20 = v99;
    v22 = *(_DWORD *)&v100[4];
    v21 = *(_DWORD *)&v100[8];
    v23 = *(_DWORD *)v100;
    v88 = *(_OWORD *)v100;
    v89 = *(_OWORD *)&v100[16];
    v90 = v101;
    v91 = 0;
    v93 = 0;
    v92 = 0;
    v62 = v102;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v91, v102, v103, (v103 - (uint64_t)v102) >> 2);
    if (v20)
    {
      if (v20 == 1)
      {
        v17 += v22 & (v17 >> 31);
        v24 = v22;
      }
      else if (v20 == 2)
      {
        v17 += v23 & (v17 >> 31);
        v24 = v23;
      }
      else
      {
        v24 = 0;
      }
    }
    else
    {
      v17 += v21 & (v17 >> 31);
      v24 = v21;
    }
    if (v17 >= v24)
    {
      v25 = 0;
    }
    else
    {
      if (v24 >= (v24 & (v18 >> 31)) + v18)
        v24 = (v24 & (v18 >> 31)) + v18;
      v25 = (v24 + ~v17) / v19 + 1;
    }
    if (v20 == 2)
    {
      if (v23 != -1)
      {
        if (v25 <= 0)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
          v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"Slice layer: '", 14);
          v47 = *((_QWORD *)a2 + 14);
          v48 = *(char *)(v47 + 23);
          if (v48 >= 0)
            v49 = *((_QWORD *)a2 + 14);
          else
            v49 = *(_QWORD *)v47;
          if (v48 >= 0)
            v50 = *(unsigned __int8 *)(v47 + 23);
          else
            v50 = *(_QWORD *)(v47 + 8);
          v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, v49, v50);
          v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"': output blob width dimension size is 0.", 41);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v52);
          v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::runtime_error::runtime_error(v53, &v83);
          __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        LODWORD(v88) = v25;
      }
    }
    else if (v20 == 1)
    {
      if (v22 != -1)
      {
        if (v25 <= 0)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
          v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"Slice layer: '", 14);
          v39 = *((_QWORD *)a2 + 14);
          v40 = *(char *)(v39 + 23);
          if (v40 >= 0)
            v41 = *((_QWORD *)a2 + 14);
          else
            v41 = *(_QWORD *)v39;
          if (v40 >= 0)
            v42 = *(unsigned __int8 *)(v39 + 23);
          else
            v42 = *(_QWORD *)(v39 + 8);
          v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v41, v42);
          v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"': output blob height dimension size is 0.", 42);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v44);
          v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::runtime_error::runtime_error(v45, &v83);
          __cxa_throw(v45, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        DWORD1(v88) = v25;
      }
    }
    else if (!v20 && v21 != -1)
    {
      if (v25 <= 0)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"Slice layer: '", 14);
        v55 = *((_QWORD *)a2 + 14);
        v56 = *(char *)(v55 + 23);
        if (v56 >= 0)
          v57 = *((_QWORD *)a2 + 14);
        else
          v57 = *(_QWORD *)v55;
        if (v56 >= 0)
          v58 = *(unsigned __int8 *)(v55 + 23);
        else
          v58 = *(_QWORD *)(v55 + 8);
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v57, v58);
        v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"': output blob channel dimension size is 0.", 43);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v60);
        v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v61, &v83);
        __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      DWORD2(v88) = v25;
    }
    __p = v88;
    v85 = v89;
    v26 = v91;
    v86 = v90;
    memset(v87, 0, 24);
    v27 = v92;
    v28 = (v92 - (uint64_t)v91) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v87, v91, v92, v28);
    EspressoConverter::validateShape((int *)&__p, *((_QWORD *)a2 + 14), (uint64_t)v79);
    if (v87[0])
      operator delete(v87[0]);
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
    v29 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, v79, (__int128 **)&v83);
    v30 = v89;
    *(_OWORD *)(v29 + 56) = v88;
    *(_OWORD *)(v29 + 72) = v30;
    *((_QWORD *)v29 + 11) = v90;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v29 + 96, v26, v27, v28);
    if (v26)
      operator delete(v26);
    v94 = &off_1E3D50378;
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v95);
    if (v62)
      operator delete(v62);
  }
  v71 = &off_1E3D50378;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v72);
  *(_QWORD *)&__p = &v76;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)&__p = &v79;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
}

void sub_19C92F93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45)
{
  int v45;
  void *v46;
  uint64_t v47;

  if (a44 < 0)
  {
    operator delete(__p);
    if ((v45 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a45);
      if (STACK[0x238])
        operator delete((void *)STACK[0x238]);
      *(_QWORD *)(v47 - 208) = &off_1E3D50378;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)(v47 - 200));
      if (a9)
        operator delete(a9);
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a22);
      STACK[0x210] = (unint64_t)&a27;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
      STACK[0x210] = (unint64_t)&a30;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
      if (a38 < 0)
        operator delete(a33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

void Espresso::sequential_builder::add<Espresso::slice_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C92FCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

_QWORD *std::endl[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_19C92FDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void LayerTranslator::addMax(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t i;
  std::string *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  __int128 *v13;
  std::string *v14;
  __int128 v15;
  __int128 *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  unint64_t *p_shared_owners;
  uint64_t **v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  std::string *v32;
  __int128 *v33;
  int *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  const CoreML::Specification::NeuralNetworkLayer *v39;
  std::string v40;
  std::string v41;
  std::string v42;
  void *v43[2];
  std::string::size_type v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::string v47;
  std::string v48;
  void *__p[2];
  char v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  __int128 *v54;
  uint64_t v55;
  std::string *v56;
  __int128 *v57;
  uint64_t v58;
  std::string v59;
  std::string *v60;
  __int128 v61;
  __int128 v62;
  void *v63;
  void *v64[3];
  __int128 v65;
  __int128 v66;
  void *v67;
  __int128 v68;
  uint64_t v69;
  void **v70;
  std::string *v71;
  unint64_t v72;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v59.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v5;
  }
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v56, (uint64_t *)&v53, *((_QWORD *)this + 1));
  v39 = a2;
  EspressoConverter::splitElementwiseLayer((uint64_t)&v51, &v53, (uint64_t)v56);
  v6 = v51;
  if (v52 != v51)
  {
    for (i = 0; i < 0x8E38E38E38E38E39 * ((v52 - v51) >> 3); ++i)
    {
      *(_QWORD *)&v66 = 897988541;
      BYTE8(v66) = 0;
      *(_QWORD *)((char *)&v68 + 4) = 0;
      *(_QWORD *)&v65 = 23;
      *((_QWORD *)&v65 + 1) = 1065353216;
      v61 = 0uLL;
      *(_QWORD *)&v62 = 0;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      if ((char *)v54 - (char *)v53 == 24)
      {
        *((_QWORD *)&v61 + 1) = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v61, v53);
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v70, v56, v57, 0xAAAAAAAAAAAAAAABLL * (((char *)v57 - (char *)v56) >> 3));
      }
      else
      {
        v8 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v61, (__int128 *)(v6 + 72 * i));
        v9 = v8;
        *((_QWORD *)&v61 + 1) = v8;
        v10 = (__int128 *)(v51 + 72 * i + 24);
        if ((unint64_t)v8 >= (unint64_t)v62)
        {
          v12 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v61, v10);
        }
        else
        {
          if (*(char *)(v51 + 72 * i + 47) < 0)
          {
            std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v10, *(_QWORD *)(v51 + 72 * i + 32));
          }
          else
          {
            v11 = *v10;
            v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(v51 + 72 * i + 40);
            *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v11;
          }
          v12 = (uint64_t)&v9[1];
        }
        *((_QWORD *)&v61 + 1) = v12;
        v13 = (__int128 *)(v51 + 72 * i + 48);
        v14 = v71;
        if ((unint64_t)v71 >= v72)
        {
          v16 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v70, v13);
        }
        else
        {
          if (*(char *)(v51 + 72 * i + 71) < 0)
          {
            std::string::__init_copy_ctor_external(v71, *(const std::string::value_type **)v13, *(_QWORD *)(v51 + 72 * i + 56));
          }
          else
          {
            v15 = *v13;
            v71->__r_.__value_.__r.__words[2] = *(_QWORD *)(v51 + 72 * i + 64);
            *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
          }
          v16 = (__int128 *)&v14[1];
        }
        v71 = (std::string *)v16;
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)v53) >> 3) > 2)
      {
        v21 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        std::to_string(&v42, i);
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &v59;
        else
          v22 = (std::string *)v59.__r_.__value_.__r.__words[0];
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
        else
          size = v59.__r_.__value_.__l.__size_;
        v24 = std::string::insert(&v42, 0, (const std::string::value_type *)v22, size);
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v44 = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)v43 = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        memset(&v41, 0, sizeof(v41));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v41, (__int128 *)v61, *((__int128 **)&v61 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v61 + 1) - v61) >> 3));
        memset(&v40, 0, sizeof(v40));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, (__int128 *)v70, (__int128 *)v71, 0xAAAAAAAAAAAAAAABLL * (((char *)v71 - (char *)v70) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v45, v21, (uint64_t)__p, (uint64_t)v43, (uint64_t)&v65, (__int128 *)v41.__r_.__value_.__l.__data_, (__int128 *)v41.__r_.__value_.__l.__size_, (__int128 **)&v40);
        v60 = &v40;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
        v60 = &v41;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
        if (SHIBYTE(v44) < 0)
          operator delete(v43[0]);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (v50 < 0)
          operator delete(__p[0]);
        v18 = v46;
        if (!v46)
          goto LABEL_45;
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
      }
      else
      {
        v17 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        memset(&v48, 0, sizeof(v48));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v48, (__int128 *)v61, *((__int128 **)&v61 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v61 + 1) - v61) >> 3));
        memset(&v47, 0, sizeof(v47));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v47, (__int128 *)v70, (__int128 *)v71, 0xAAAAAAAAAAAAAAABLL * (((char *)v71 - (char *)v70) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)v43, v17, (uint64_t)__p, (uint64_t)&v59, (uint64_t)&v65, (__int128 *)v48.__r_.__value_.__l.__data_, (__int128 *)v48.__r_.__value_.__l.__size_, (__int128 **)&v47);
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        if (v50 < 0)
          operator delete(__p[0]);
        v18 = (std::__shared_weak_count *)v43[1];
        if (!v43[1])
          goto LABEL_45;
        v19 = (unint64_t *)((char *)v43[1] + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
      }
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
LABEL_45:
      __p[0] = &v70;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v70 = (void **)&v61;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v70);
      v6 = v51;
    }
  }
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v56);
  }
  else
  {
    v27 = (uint64_t **)*((_QWORD *)this + 1);
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v29 = v53;
    v28 = v54;
    if (v53 == v54)
    {
      v33 = 0;
      v34 = 0;
      v30 = (uint64_t)v39;
    }
    else
    {
      v30 = (uint64_t)v39;
      do
      {
        v31 = (__int128 *)std::map<std::string,std::string>::at((uint64_t)v27, v29);
        v32 = v71;
        if ((unint64_t)v71 >= v72)
        {
          v33 = (__int128 *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v70, v31);
        }
        else
        {
          std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v70, v31);
          v33 = (__int128 *)&v32[2].__r_.__value_.__r.__words[2];
        }
        v71 = (std::string *)v33;
        v29 = (__int128 *)((char *)v29 + 24);
      }
      while (v29 != v28);
      v34 = (int *)v70;
    }
    EspressoConverter::validateEqualInputShapes(v30, v34, (int *)v33);
    v65 = *(_OWORD *)v70;
    v66 = *((_OWORD *)v70 + 1);
    v67 = v70[4];
    v68 = 0uLL;
    v69 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, v70[5], (uint64_t)v70[6], ((_BYTE *)v70[6] - (_BYTE *)v70[5]) >> 2);
    v61 = v65;
    v62 = v66;
    v35 = (char *)v68;
    v63 = v67;
    memset(v64, 0, sizeof(v64));
    v36 = *((_QWORD *)&v68 + 1);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v64, (const void *)v68, *((uint64_t *)&v68 + 1), (uint64_t)(*((_QWORD *)&v68 + 1) - v68) >> 2);
    EspressoConverter::validateShape((int *)&v61, *(_QWORD *)(v30 + 112), (uint64_t)v56);
    if (v64[0])
      operator delete(v64[0]);
    __p[0] = v56;
    v37 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, v56, (__int128 **)__p);
    v38 = v66;
    *(_OWORD *)(v37 + 56) = v65;
    *(_OWORD *)(v37 + 72) = v38;
    *((_QWORD *)v37 + 11) = v67;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v37 + 96, v35, v36, (v36 - (uint64_t)v35) >> 2);
    if (v35)
      operator delete(v35);
    *(_QWORD *)&v65 = &v70;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  }
  *(_QWORD *)&v65 = &v51;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  *(_QWORD *)&v65 = &v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  *(_QWORD *)&v65 = &v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
}

void sub_19C930448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p)
{
  void *v55;
  uint64_t v56;

  if (__p)
    operator delete(__p);
  if (v55)
    operator delete(v55);
  *(_QWORD *)(v56 - 208) = v56 - 136;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  *(_QWORD *)(v56 - 208) = &a34;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  *(_QWORD *)(v56 - 208) = &a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  *(_QWORD *)(v56 - 208) = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  if (a48 < 0)
    operator delete(a43);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::elementwise_params>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C9307D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(v3 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v3 + 40), *((const void **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 64;
  return result;
}

void sub_19C9308AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;

  v2 = (a1[1] - *a1) >> 6;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  v7 = a1[2] - *a1;
  if (v7 >> 5 > v3)
    v3 = v7 >> 5;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0)
    v8 = 0x3FFFFFFFFFFFFFFLL;
  else
    v8 = v3;
  v18 = v6;
  if (v8)
    v8 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v8);
  else
    v9 = 0;
  v10 = v8 + (v2 << 6);
  v15[0] = v8;
  v15[1] = v10;
  v16 = v10;
  v17 = v8 + (v9 << 6);
  v11 = *a2;
  v12 = a2[1];
  *(_QWORD *)(v10 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v10 = v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v10 + 40), *((const void **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 2);
  v16 += 64;
  std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_19C9309A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<std::pair<std::pair<std::string,std::string>,std::string>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::pair<std::string,std::string>,std::string>>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void LayerTranslator::addScatter(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t *inited;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  std::runtime_error *exception;
  std::string v25;
  std::string v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::string v29;
  void *__p[2];
  uint64_t v31;
  void (**v32)(CoreML::Specification::ScatterLayerParams *__hidden);
  uint64_t v33[2];
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  __int16 v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 *v43;
  __int128 *v44;
  uint64_t v45;
  std::string v46;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v46.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v5;
  }
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v43, (uint64_t *)&v40, *((_QWORD *)this + 1));
  v38 = 0;
  v39 = 257;
  if (*((_DWORD *)a2 + 35) == 935)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    v8 = v7[2];
    v36 = 0;
    v37 = v8;
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v10 = *((_DWORD *)a2 + 35);
    v36 = 0;
    v37 = qword_1ED0042C8;
    if (v10 == 935)
    {
      v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v7 = &CoreML::Specification::_ScatterLayerParams_default_instance_;
    }
  }
  v32 = &off_1E3D51A08;
  v33[0] = 0;
  v35 = 0;
  v11 = v7[1];
  if ((v11 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v33, v11 & 0xFFFFFFFFFFFFFFFELL);
  v12 = v7[2];
  v13 = *((_DWORD *)v7 + 6);
  v34 = v13;
  v33[1] = v12;
  if (v13 >= 7)
  {
    if (v13 == 0x80000000 || v13 == 0x7FFFFFFF)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Scatter layer: '", 16);
      v19 = *((_QWORD *)a2 + 14);
      v20 = *(char *)(v19 + 23);
      if (v20 >= 0)
        v21 = *((_QWORD *)a2 + 14);
      else
        v21 = *(_QWORD *)v19;
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(v19 + 23);
      else
        v22 = *(_QWORD *)(v19 + 8);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"': unknown value for parameter 'mode'.", 38);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v29);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    v38 = v13;
  }
  v14 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter_nd");
  memset(&v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26, v40, v41, 0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (char *)v40) >> 3));
  memset(&v25, 0, sizeof(v25));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v25, v43, v44, 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (char *)v43) >> 3));
  Espresso::sequential_builder::add<Espresso::scatter_nd_params_t>(&v27, v14, (uint64_t)__p, (uint64_t)&v46, (uint64_t)&v36, (__int128 *)v26.__r_.__value_.__l.__data_, (__int128 *)v26.__r_.__value_.__l.__size_, (__int128 **)&v25);
  v15 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v43);
  v32 = &off_1E3D51A08;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v33);
  __p[0] = &v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
}

void sub_19C930D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t *v28;
  void *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a23);
      *(_QWORD *)(v32 - 176) = v30;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v28);
      a23 = (void *)(v32 - 128);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      a23 = (void *)(v32 - 104);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      if (*(char *)(v32 - 57) < 0)
        operator delete(*(void **)(v32 - 80));
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

void Espresso::sequential_builder::add<Espresso::scatter_nd_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C931074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addGlobalPooling3d(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  std::logic_error *exception;
  std::string *v11;
  __int128 v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::string v17;
  std::string v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::string v21;
  std::string v22;
  _OWORD v23[2];
  int v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  void (**v30)(CoreML::Specification::GlobalPooling3DLayerParams *__hidden);
  uint64_t v31;
  int v32;
  int v33;
  __int128 *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 *v37;
  __int128 *v38;
  uint64_t v39;
  std::string v40;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v40.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v5;
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v37, (uint64_t *)&v34, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1466)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_GlobalPooling3DLayerParams_default_instance_;
  }
  v30 = &off_1E3D55698;
  v31 = 0;
  v33 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v31, v8 & 0xFFFFFFFFFFFFFFFELL);
  v9 = *((_DWORD *)v7 + 4);
  v32 = v9;
  v23[0] = xmmword_19CB39920;
  v23[1] = xmmword_19CB39960;
  v27 = 0;
  v26 = 0;
  v28 = 0;
  if (v9)
  {
    if (v9 == 0x80000000 || v9 == 0x7FFFFFFF)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v21, v32);
      v11 = std::string::insert(&v21, 0, "Unsupported Pooling Type: ");
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v22);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E3D427E8, MEMORY[0x1E0DE4360]);
    }
  }
  else
  {
    LODWORD(v23[0]) = 1;
  }
  v29 = 1;
  v24 = 0;
  v25 = 2;
  v13 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v22, "pool3d");
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, v34, v35, 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (char *)v34) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, v37, v38, 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v37) >> 3));
  Espresso::sequential_builder::add<Espresso::pool3d_params_t>(&v19, v13, (uint64_t)&v22, (uint64_t)&v40, (uint64_t)v23, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, (__int128 **)&v17);
  v14 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v37);
  v30 = &off_1E3D55698;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v31);
  *(_QWORD *)&v23[0] = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  *(_QWORD *)&v23[0] = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
}

void sub_19C9313EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31)
{
  uint64_t *v31;
  void *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  if (a29 < 0)
    operator delete(__p);
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v34 & 1) == 0)
    {
LABEL_8:
      *(_QWORD *)(v35 - 152) = v33;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v31);
      a31 = v35 - 128;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
      a31 = v35 - 104;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
      if (*(char *)(v35 - 57) < 0)
        operator delete(*(void **)(v35 - 80));
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

void Espresso::sequential_builder::add<Espresso::pool3d_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C9316E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addGatherND(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  void **v19;
  __int128 *v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  std::string v25;
  std::string *v26;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v25.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v5;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v22, (uint64_t *)&v19, *((_QWORD *)this + 1));
  v17 = 0;
  v18 = 257;
  v16 = 1;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "gather_nd");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, (__int128 *)v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
  Espresso::sequential_builder::add<Espresso::gather_nd_params_t>(&v14, v6, (uint64_t)__p, (uint64_t)&v25, (uint64_t)&v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v26 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v22);
  __p[0] = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v19 = (void **)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_19C931928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v26 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::gather_nd_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C931BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addSign(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[2] = (void **)897988541;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v16[0] = (void **)38;
  v16[1] = (void **)1065353216;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C931DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addMultiplyBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[2] = (void **)897988541;
  v18 = 0;
  v19 = 0;
  v16[0] = (void **)1;
  v16[1] = (void **)1065353216;
  v17 = 1;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C93205C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addClampedRelu(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v12;
  _QWORD *v13;
  std::string::size_type size;
  __int128 *v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v29;
  uint64_t *v30;
  _QWORD *v31;
  std::string *v32;
  __int128 v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::string v44;
  __int128 *v45;
  __int128 *v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  std::string v56;
  void *__p[2];
  char v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  __int128 **v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  __int128 *v72;
  uint64_t v73;
  __int128 *v74;
  __int128 *v75;
  uint64_t v76;
  std::string v77;
  std::string **v78;
  char v79;
  std::string v80;
  uint64_t v81;
  __int128 v82;
  int64_t v83;
  __int128 v84;

  *(_QWORD *)&v84 = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v77, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v77.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v5;
  }
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v74, (uint64_t *)&v71, *((_QWORD *)this + 1));
  __asm { FMOV            V0.2S, #1.0 }
  v67 = _D0;
  v69 = 0;
  v70 = 0;
  v68 = 0;
  v61 = 0;
  v62 = 1065353216;
  v63 = 897988541;
  v64 = 0;
  v65 = 0;
  v66 = 2;
  if (*((_DWORD *)a2 + 35) == 1460)
  {
    v12 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v12 = &CoreML::Specification::_ClampedReLULayerParams_default_instance_;
  }
  LODWORD(v67) = *((_DWORD *)v12 + 4);
  v13 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  else
    size = v77.__r_.__value_.__l.__size_;
  v15 = &v82;
  std::string::basic_string[abi:ne180100]((uint64_t)&v82, size + 11);
  if (v83 < 0)
    v15 = (__int128 *)v82;
  if (size)
  {
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v77;
    else
      v16 = (std::string *)v77.__r_.__value_.__r.__words[0];
    memmove(v15, v16, size);
  }
  strcpy((char *)v15 + size, "_leaky_relu");
  memset(&v56, 0, sizeof(v56));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v56, v71, v72, 0xAAAAAAAAAAAAAAABLL * (((char *)v72 - (char *)v71) >> 3));
  std::to_string(&v50, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  v17 = std::string::append(&v50, "_");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = *((char *)v71 + 23);
  if (v19 >= 0)
    v20 = (const std::string::value_type *)v71;
  else
    v20 = *(const std::string::value_type **)v71;
  if (v19 >= 0)
    v21 = *((unsigned __int8 *)v71 + 23);
  else
    v21 = *((_QWORD *)v71 + 1);
  v22 = std::string::append(&v51, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v52, "_leaky_relu");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v80.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v78 = &v53;
  v79 = 0;
  v53 = (std::string *)operator new(0x18uLL);
  v54 = v53;
  v55 = v53 + 1;
  v54 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v55, (__int128 *)&v80, (__int128 *)&v81, v53);
  Espresso::sequential_builder::add<Espresso::activation_params>(&v59, v13, (uint64_t)__p, (uint64_t)&v82, (uint64_t)&v66, (__int128 *)v56.__r_.__value_.__l.__data_, (__int128 *)v56.__r_.__value_.__l.__size_, (__int128 **)&v53);
  v26 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v78 = &v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  if (v58 < 0)
    operator delete(__p[0]);
  LODWORD(v61) = 119;
  LODWORD(v62) = -8388609;
  if (*((_DWORD *)a2 + 35) == 1460)
  {
    v30 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v29);
    v30 = &CoreML::Specification::_ClampedReLULayerParams_default_instance_;
  }
  HIDWORD(v62) = *((_DWORD *)v30 + 5);
  v31 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  std::to_string(&v51, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  v32 = std::string::append(&v51, "_");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = *((char *)v71 + 23);
  if (v34 >= 0)
    v35 = (const std::string::value_type *)v71;
  else
    v35 = *(const std::string::value_type **)v71;
  if (v34 >= 0)
    v36 = *((unsigned __int8 *)v71 + 23);
  else
    v36 = *((_QWORD *)v71 + 1);
  v37 = std::string::append(&v52, v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v80.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v80, "_leaky_relu");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v83 = v39->__r_.__value_.__r.__words[2];
  v82 = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  v50.__r_.__value_.__s.__data_[8] = 0;
  v45 = (__int128 *)operator new(0x18uLL);
  v46 = v45;
  v47 = (char *)v45 + 24;
  v46 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v47, &v82, &v84, (std::string *)v45);
  memset(&v44, 0, sizeof(v44));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v44, v74, v75, 0xAAAAAAAAAAAAAAABLL * (((char *)v75 - (char *)v74) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v48, v31, (uint64_t)__p, (uint64_t)&v77, (uint64_t)&v61, v45, v46, (__int128 **)&v44);
  v41 = v49;
  if (v49)
  {
    v42 = (unint64_t *)&v49->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (v58 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v74);
  v61 = &v71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  v61 = &v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
}

void sub_19C9326E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add<Espresso::activation_params>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C932A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addLayerNormalization(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  CoreML::Specification::WeightParams *v10;
  CoreML::Specification::WeightParams *v11;
  char *v12;
  int v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  std::string::size_type size;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  void *v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int128 **v31;
  std::string::size_type v32;
  std::string *v33;
  std::string *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  void *v44;
  char v45;
  _QWORD *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t i;
  std::string::size_type v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  std::string::size_type v56;
  std::string *v57;
  void *v58;
  char v59;
  _QWORD *v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 **v65;
  std::string::size_type v66;
  std::string *v67;
  std::string *v68;
  std::string *p_s;
  std::string::size_type v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  void *v78;
  char v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t j;
  std::string::size_type v85;
  std::string *v86;
  std::string *v87;
  std::string *v88;
  std::string::size_type v89;
  std::string *v90;
  void *v91;
  char v92;
  _QWORD *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::string::size_type v97;
  std::string *v98;
  std::string *v99;
  std::string *v100;
  std::string::size_type v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  std::string::size_type v107;
  std::string *v108;
  void *v109;
  char v110;
  _QWORD *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t k;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  std::string::size_type v121;
  std::string *v122;
  std::string *v123;
  std::string *v124;
  std::string::size_type v125;
  std::string *v126;
  __int128 v127;
  std::string *v128;
  __int128 v129;
  std::string *v130;
  std::string::size_type v131;
  std::string *v132;
  void *v133;
  char v134;
  _QWORD *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t *v142;
  unint64_t v143;
  std::string::size_type v144;
  std::string *v145;
  std::string *v146;
  std::string *v147;
  std::string::size_type v148;
  std::string *v149;
  __int128 v150;
  std::string *v151;
  __int128 v152;
  std::string *v153;
  std::string::size_type v154;
  std::string *v155;
  void *v156;
  char v157;
  _QWORD *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t *v165;
  unint64_t v166;
  std::string::size_type v167;
  std::string *v168;
  std::string *v169;
  std::string *v170;
  std::string::size_type v171;
  std::string *v172;
  __int128 v173;
  std::string *v174;
  __int128 v175;
  std::string *v176;
  std::string::size_type v177;
  std::string *v178;
  void *v179;
  char v180;
  _QWORD *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t m;
  std::string::size_type v186;
  std::string *v187;
  std::string *v188;
  std::string *v189;
  std::string::size_type v190;
  std::string *v191;
  __int128 v192;
  std::string *v193;
  __int128 v194;
  std::string *v195;
  std::string::size_type v196;
  std::string *v197;
  void *v198;
  char v199;
  _QWORD *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t n;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  size_t v225;
  std::string *v226;
  const void *p_p;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  size_t v231;
  std::string *v232;
  const void *v233;
  _QWORD *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  _QWORD *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  _QWORD *v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::string v267;
  __int128 *v268;
  __int128 *v269;
  __int128 *v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  std::string *v273;
  std::string *v274;
  std::string *v275;
  __int128 *v276;
  __int128 *v277;
  __int128 *v278;
  uint64_t v279;
  std::__shared_weak_count *v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  uint64_t v283;
  std::__shared_weak_count *v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  std::string *v287;
  std::string *v288;
  std::string *v289;
  __int128 *v290;
  __int128 *v291;
  uint64_t v292;
  uint64_t v293;
  std::__shared_weak_count *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  uint64_t v299;
  std::__shared_weak_count *v300;
  std::string *v301;
  std::string *v302;
  std::string *v303;
  __int128 *v304;
  __int128 *v305;
  uint64_t v306;
  uint64_t v307;
  std::__shared_weak_count *v308;
  std::string *v309;
  std::string *v310;
  std::string *v311;
  __int128 *v312;
  __int128 *v313;
  __int128 *v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  std::string v317;
  std::string *v318;
  std::string *v319;
  std::string *v320;
  __int128 *v321;
  __int128 *v322;
  char *v323;
  uint64_t v324;
  std::__shared_weak_count *v325;
  std::string *v326;
  std::string *v327;
  std::string *v328;
  __int128 *v329;
  __int128 *v330;
  __int128 *v331;
  uint64_t v332;
  std::__shared_weak_count *v333;
  std::string *v334;
  std::string *v335;
  std::string *v336;
  __int128 *v337;
  __int128 *v338;
  char *v339;
  uint64_t v340;
  std::__shared_weak_count *v341;
  std::string *v342;
  std::string *v343;
  std::string *v344;
  __int128 *v345;
  __int128 *v346;
  char *v347;
  uint64_t v348;
  std::__shared_weak_count *v349;
  std::string *v350;
  std::string *v351;
  std::string *v352;
  __int128 *v353;
  __int128 *v354;
  char *v355;
  uint64_t v356;
  std::__shared_weak_count *v357;
  std::string *v358;
  std::string *v359;
  std::string *v360;
  __int128 *v361;
  __int128 *v362;
  char *v363;
  uint64_t v364;
  std::__shared_weak_count *v365;
  std::string *v366;
  std::string *v367;
  std::string *v368;
  __int128 *v369;
  __int128 *v370;
  char *v371;
  uint64_t v372;
  std::__shared_weak_count *v373;
  std::string *v374;
  std::string *v375;
  std::string *v376;
  __int128 *v377;
  __int128 *v378;
  char *v379;
  uint64_t v380;
  std::__shared_weak_count *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  char v387;
  std::string *v388;
  std::string *v389;
  std::string *v390;
  __int128 *v391;
  __int128 *v392;
  __int128 *v393;
  uint64_t v394;
  std::__shared_weak_count *v395;
  std::string v396;
  char v397;
  int v398;
  int v399;
  std::string *v400;
  std::string *v401;
  std::string *v402;
  __int128 *v403;
  __int128 *v404;
  char *v405;
  uint64_t v406;
  std::__shared_weak_count *v407;
  std::string *v408;
  std::string *v409;
  std::string *v410;
  __int128 *v411;
  __int128 *v412;
  char *v413;
  uint64_t v414;
  std::__shared_weak_count *v415;
  std::string *v416;
  std::string *v417;
  std::string *v418;
  __int128 *v419;
  __int128 *v420;
  char *v421;
  uint64_t v422;
  std::__shared_weak_count *v423;
  std::string *v424;
  std::string *v425;
  std::string *v426;
  __int128 *v427;
  __int128 *v428;
  char *v429;
  uint64_t v430;
  std::__shared_weak_count *v431;
  std::string *v432;
  std::string *v433;
  std::string *v434;
  __int128 *v435;
  __int128 *v436;
  char *v437;
  uint64_t v438;
  std::__shared_weak_count *v439;
  std::string *v440;
  std::string *v441;
  std::string *v442;
  __int128 *v443;
  __int128 *v444;
  char *v445;
  uint64_t v446;
  std::__shared_weak_count *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  char v453;
  uint64_t v454;
  void *v455;
  std::string **v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t *v460;
  uint64_t *v461;
  int v462;
  int v463;
  std::string v464;
  std::string v465;
  void *__p;
  __int128 v467;
  std::string __s;
  std::string v469;
  std::string *__str[3];
  __int128 *v471;
  __int128 *v472;
  uint64_t v473;
  std::string v474;
  std::string v475[2];
  _QWORD v476[3];
  uint64_t v477;
  std::string v478;
  _QWORD v479[2];
  std::string v480;
  __int128 v481;
  uint64_t v482;
  std::string v483;
  std::string v484;
  std::string v485;
  __int128 v486;
  std::string v487;
  uint64_t v488;
  std::string v489;
  __int128 v490;
  int v491;
  int v492;
  std::string v493;
  __int128 v494;
  _BYTE v495[24];
  std::string v496;
  __int128 v497;
  _BYTE v498[12];
  uint64_t v499;

  v499 = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v474, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v474.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v474.__r_.__value_.__l.__data_ = v5;
  }
  v472 = 0;
  v471 = 0;
  v473 = 0;
  memset(__str, 0, sizeof(__str));
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v471, (uint64_t *)__str, *((_QWORD *)this + 1));
  memset(&v469, 0, sizeof(v469));
  memset(&__s, 0, sizeof(__s));
  v467 = 0uLL;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v465, "numerator");
  v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::string::basic_string[abi:ne180100]<0>(&v464, "denominator");
  if (*((_DWORD *)a2 + 35) == 1350)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_LayerNormalizationLayerParams_default_instance_;
  }
  v459 = 0;
  v458 = 0;
  v456 = (std::string **)&off_1E3D564D8;
  v457 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v458, v8);
    memcpy((void *)(v459 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v458) = *((_DWORD *)v7 + 4);
  }
  v463 = 0;
  v9 = v7[1];
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v457, v9 & 0xFFFFFFFFFFFFFFFELL);
  if (v7 == &CoreML::Specification::_LayerNormalizationLayerParams_default_instance_)
  {
    v11 = 0;
    v460 = 0;
  }
  else
  {
    if (v7[5])
    {
      v10 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v10, (const CoreML::Specification::WeightParams *)v7[5]);
    }
    else
    {
      v10 = 0;
    }
    v460 = (uint64_t *)v10;
    if (v7[6])
    {
      v11 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v11, (const CoreML::Specification::WeightParams *)v7[6]);
    }
    else
    {
      v11 = 0;
    }
  }
  v461 = (uint64_t *)v11;
  v462 = *((_DWORD *)v7 + 14);
  v455 = 0;
  v454 = 0;
  if ((_DWORD)v458)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v454, v458);
    v12 = (char *)v455;
    memcpy((char *)v455 + 8, (const void *)(v459 + 8), 8 * (int)v458);
    v13 = v458;
    LODWORD(v454) = v458;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  if (v12)
    v14 = (int *)(v12 + 8);
  else
    v14 = 0;
  v15 = (uint64_t)&v12[8 * v13 + 8];
  if (!v12)
    v15 = 0;
  v16 = 1;
  while (v14 != (int *)v15)
  {
    v17 = *v14;
    v14 += 2;
    v16 *= v17;
  }
  v449 = 0x100000007;
  v451 = 0;
  v450 = 0;
  v452 = 0xFFFFFFFF00000000;
  v448 = 0x358637BD00000001;
  v453 = 0;
  if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v474.__r_.__value_.__r.__words[2]);
  else
    size = v474.__r_.__value_.__l.__size_;
  v19 = &v396;
  std::string::basic_string[abi:ne180100]((uint64_t)&v396, size + 23);
  if ((v396.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v19 = (std::string *)v396.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v474;
    else
      v20 = (std::string *)v474.__r_.__value_.__r.__words[0];
    memmove(v19, v20, size);
  }
  strcpy((char *)v19 + size, "_numerator_reduce_mean_");
  std::to_string(&v496, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v496;
  else
    v21 = (std::string *)v496.__r_.__value_.__r.__words[0];
  if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(v496.__r_.__value_.__r.__words[2]);
  else
    v22 = v496.__r_.__value_.__l.__size_;
  v23 = std::string::append(&v396, (const std::string::value_type *)v21, v22);
  v24 = (void *)v23->__r_.__value_.__r.__words[0];
  v493.__r_.__value_.__r.__words[0] = v23->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v493.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
  v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v467) < 0)
    operator delete(__p);
  __p = v24;
  *(_QWORD *)&v467 = v493.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v467 + 7) = *(std::string::size_type *)((char *)v493.__r_.__value_.__r.__words + 7);
  HIBYTE(v467) = v25;
  if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v496.__r_.__value_.__l.__data_);
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v396.__r_.__value_.__l.__data_);
  std::string::operator=(&v469, __str[0]);
  MEMORY[0x1A1AD5EAC](&__s, "reduce_mean");
  if (v13 == 1)
  {
    LODWORD(v449) = 1;
    v26 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v396, "reduce");
    if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v496, v469.__r_.__value_.__l.__data_, v469.__r_.__value_.__l.__size_);
    else
      v496 = v469;
    v444 = 0;
    v443 = 0;
    v445 = 0;
    v493.__r_.__value_.__r.__words[0] = (std::string::size_type)&v443;
    v493.__r_.__value_.__s.__data_[8] = 0;
    v443 = (__int128 *)operator new(0x18uLL);
    v444 = v443;
    v445 = (char *)v443 + 24;
    v444 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v445, (__int128 *)&v496, &v497, (std::string *)v443);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v493, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v493 = __s;
    v441 = 0;
    v440 = 0;
    v442 = 0;
    v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v440;
    v489.__r_.__value_.__s.__data_[8] = 0;
    v440 = (std::string *)operator new(0x18uLL);
    v441 = v440;
    v442 = v440 + 1;
    v441 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v442, (__int128 *)&v493, &v494, v440);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v446, v26, (uint64_t)&v396, (uint64_t)&__p, (uint64_t)&v448, v443, v444, (__int128 **)&v440);
    v28 = v447;
    if (v447)
    {
      p_shared_owners = (unint64_t *)&v447->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v440;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v489);
    if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v493.__r_.__value_.__l.__data_);
    v31 = &v443;
LABEL_70:
    v493.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v493);
    if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v496.__r_.__value_.__l.__data_);
    if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v396.__r_.__value_.__l.__data_);
  }
  else
  {
    switch(v13)
    {
      case 2:
        LODWORD(v449) = 3;
        v27 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(&v396, "reduce");
        if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v496, v469.__r_.__value_.__l.__data_, v469.__r_.__value_.__l.__size_);
        else
          v496 = v469;
        v436 = 0;
        v435 = 0;
        v437 = 0;
        v493.__r_.__value_.__r.__words[0] = (std::string::size_type)&v435;
        v493.__r_.__value_.__s.__data_[8] = 0;
        v435 = (__int128 *)operator new(0x18uLL);
        v436 = v435;
        v437 = (char *)v435 + 24;
        v436 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v437, (__int128 *)&v496, &v497, (std::string *)v435);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v493, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v493 = __s;
        v433 = 0;
        v432 = 0;
        v434 = 0;
        v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v432;
        v489.__r_.__value_.__s.__data_[8] = 0;
        v432 = (std::string *)operator new(0x18uLL);
        v433 = v432;
        v434 = v432 + 1;
        v433 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v434, (__int128 *)&v493, &v494, v432);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v438, v27, (uint64_t)&v396, (uint64_t)&__p, (uint64_t)&v448, v435, v436, (__int128 **)&v432);
        v239 = v439;
        if (v439)
        {
          v240 = (unint64_t *)&v439->__shared_owners_;
          do
            v241 = __ldaxr(v240);
          while (__stlxr(v241 - 1, v240));
          if (!v241)
          {
            ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
            std::__shared_weak_count::__release_weak(v239);
          }
        }
        v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v432;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v489);
        if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v493.__r_.__value_.__l.__data_);
        v31 = &v435;
        goto LABEL_70;
      case 3:
        LODWORD(v449) = 7;
        v223 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(&v396, "reduce");
        if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v496, v469.__r_.__value_.__l.__data_, v469.__r_.__value_.__l.__size_);
        else
          v496 = v469;
        v428 = 0;
        v427 = 0;
        v429 = 0;
        v493.__r_.__value_.__r.__words[0] = (std::string::size_type)&v427;
        v493.__r_.__value_.__s.__data_[8] = 0;
        v427 = (__int128 *)operator new(0x18uLL);
        v428 = v427;
        v429 = (char *)v427 + 24;
        v428 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v429, (__int128 *)&v496, &v497, (std::string *)v427);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v493, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v493 = __s;
        v425 = 0;
        v424 = 0;
        v426 = 0;
        v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v424;
        v489.__r_.__value_.__s.__data_[8] = 0;
        v424 = (std::string *)operator new(0x18uLL);
        v425 = v424;
        v426 = v424 + 1;
        v425 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v426, (__int128 *)&v493, &v494, v424);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v430, v223, (uint64_t)&v396, (uint64_t)&__p, (uint64_t)&v448, v427, v428, (__int128 **)&v424);
        v242 = v431;
        if (v431)
        {
          v243 = (unint64_t *)&v431->__shared_owners_;
          do
            v244 = __ldaxr(v243);
          while (__stlxr(v244 - 1, v243));
          if (!v244)
          {
            ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
            std::__shared_weak_count::__release_weak(v242);
          }
        }
        v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v424;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v489);
        if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v493.__r_.__value_.__l.__data_);
        v31 = &v427;
        goto LABEL_70;
      case 4:
        LODWORD(v449) = 7;
        v224 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(&v396, "reduce");
        if (v467 >= 0)
          v225 = HIBYTE(v467);
        else
          v225 = v467;
        v226 = &v496;
        std::string::basic_string[abi:ne180100]((uint64_t)&v496, v225 + 5);
        if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v226 = (std::string *)v496.__r_.__value_.__r.__words[0];
        if (v225)
        {
          if (v467 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          memmove(v226, p_p, v225);
        }
        strcpy((char *)v226 + v225, "_temp");
        if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v493, v469.__r_.__value_.__l.__data_, v469.__r_.__value_.__l.__size_);
        else
          v493 = v469;
        v420 = 0;
        v419 = 0;
        v421 = 0;
        v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
        v489.__r_.__value_.__s.__data_[8] = 0;
        v419 = (__int128 *)operator new(0x18uLL);
        v420 = v419;
        v421 = (char *)v419 + 24;
        v420 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v421, (__int128 *)&v493, &v494, (std::string *)v419);
        std::string::basic_string[abi:ne180100]<0>(&v489, "temp");
        v417 = 0;
        v416 = 0;
        v418 = 0;
        v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
        v484.__r_.__value_.__s.__data_[8] = 0;
        v416 = (std::string *)operator new(0x18uLL);
        v417 = v416;
        v418 = v416 + 1;
        v417 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v418, (__int128 *)&v489, &v490, v416);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v422, v224, (uint64_t)&v396, (uint64_t)&v496, (uint64_t)&v448, v419, v420, (__int128 **)&v416);
        v235 = v423;
        if (v423)
        {
          v236 = (unint64_t *)&v423->__shared_owners_;
          do
            v237 = __ldaxr(v236);
          while (__stlxr(v237 - 1, v236));
          if (!v237)
          {
            ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
            std::__shared_weak_count::__release_weak(v235);
          }
        }
        v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v484);
        if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v489.__r_.__value_.__l.__data_);
        v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v489);
        if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v493.__r_.__value_.__l.__data_);
        if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v496.__r_.__value_.__l.__data_);
        if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v396.__r_.__value_.__l.__data_);
        LODWORD(v449) = 8;
        v238 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(&v396, "reduce");
        std::string::basic_string[abi:ne180100]<0>(&v496, "temp");
        v412 = 0;
        v411 = 0;
        v413 = 0;
        v493.__r_.__value_.__r.__words[0] = (std::string::size_type)&v411;
        v493.__r_.__value_.__s.__data_[8] = 0;
        v411 = (__int128 *)operator new(0x18uLL);
        v412 = v411;
        v413 = (char *)v411 + 24;
        v412 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v413, (__int128 *)&v496, &v497, (std::string *)v411);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v493, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v493 = __s;
        v409 = 0;
        v408 = 0;
        v410 = 0;
        v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v408;
        v489.__r_.__value_.__s.__data_[8] = 0;
        v408 = (std::string *)operator new(0x18uLL);
        v409 = v408;
        v410 = v408 + 1;
        v409 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v410, (__int128 *)&v493, &v494, v408);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v414, v238, (uint64_t)&v396, (uint64_t)&__p, (uint64_t)&v448, v411, v412, (__int128 **)&v408);
        v248 = v415;
        if (v415)
        {
          v249 = (unint64_t *)&v415->__shared_owners_;
          do
            v250 = __ldaxr(v249);
          while (__stlxr(v250 - 1, v249));
          if (!v250)
          {
            ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
            std::__shared_weak_count::__release_weak(v248);
          }
        }
        v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v408;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v489);
        if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v493.__r_.__value_.__l.__data_);
        v31 = &v411;
        goto LABEL_70;
      case 5:
        LODWORD(v449) = 31;
        v228 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(&v396, "reduce");
        if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v496, v469.__r_.__value_.__l.__data_, v469.__r_.__value_.__l.__size_);
        else
          v496 = v469;
        v404 = 0;
        v403 = 0;
        v405 = 0;
        v493.__r_.__value_.__r.__words[0] = (std::string::size_type)&v403;
        v493.__r_.__value_.__s.__data_[8] = 0;
        v403 = (__int128 *)operator new(0x18uLL);
        v404 = v403;
        v405 = (char *)v403 + 24;
        v404 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v405, (__int128 *)&v496, &v497, (std::string *)v403);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v493, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v493 = __s;
        v401 = 0;
        v400 = 0;
        v402 = 0;
        v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v400;
        v489.__r_.__value_.__s.__data_[8] = 0;
        v400 = (std::string *)operator new(0x18uLL);
        v401 = v400;
        v402 = v400 + 1;
        v401 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v402, (__int128 *)&v493, &v494, v400);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v406, v228, (uint64_t)&v396, (uint64_t)&__p, (uint64_t)&v448, v403, v404, (__int128 **)&v400);
        v245 = v407;
        if (v407)
        {
          v246 = (unint64_t *)&v407->__shared_owners_;
          do
            v247 = __ldaxr(v246);
          while (__stlxr(v247 - 1, v246));
          if (!v247)
          {
            ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
            std::__shared_weak_count::__release_weak(v245);
          }
        }
        v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v400;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v489);
        if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v493.__r_.__value_.__l.__data_);
        v31 = &v403;
        goto LABEL_70;
      default:
        break;
    }
  }
  v396.__r_.__value_.__r.__words[2] = 897988541;
  v399 = 0;
  v398 = 0;
  v396.__r_.__value_.__l.__size_ = 1065353216;
  v396.__r_.__value_.__r.__words[0] = 33;
  v397 = 1;
  std::string::operator=(&v469, &__s);
  if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = HIBYTE(v474.__r_.__value_.__r.__words[2]);
  else
    v32 = v474.__r_.__value_.__l.__size_;
  v33 = &v489;
  std::string::basic_string[abi:ne180100]((uint64_t)&v489, v32 + 1);
  if ((v489.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v33 = (std::string *)v489.__r_.__value_.__r.__words[0];
  if (v32)
  {
    if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v474;
    else
      v34 = (std::string *)v474.__r_.__value_.__r.__words[0];
    memmove(v33, v34, v32);
  }
  *(_WORD *)((char *)&v33->__r_.__value_.__l.__data_ + v32) = 95;
  if ((v465.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v465;
  else
    v35 = (std::string *)v465.__r_.__value_.__r.__words[0];
  if ((v465.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v465.__r_.__value_.__r.__words[2]);
  else
    v36 = v465.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v489, (const std::string::value_type *)v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v493.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v493.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v493, "_");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v496.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v496.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v484, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if ((v484.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &v484;
  else
    v41 = (std::string *)v484.__r_.__value_.__r.__words[0];
  if ((v484.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v484.__r_.__value_.__r.__words[2]);
  else
    v42 = v484.__r_.__value_.__l.__size_;
  v43 = std::string::append(&v496, (const std::string::value_type *)v41, v42);
  v44 = (void *)v43->__r_.__value_.__r.__words[0];
  v480.__r_.__value_.__r.__words[0] = v43->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v480.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v43->__r_.__value_.__r.__words[1] + 7);
  v45 = HIBYTE(v43->__r_.__value_.__r.__words[2]);
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v467) < 0)
    operator delete(__p);
  __p = v44;
  *(_QWORD *)&v467 = v480.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v467 + 7) = *(std::string::size_type *)((char *)v480.__r_.__value_.__r.__words + 7);
  HIBYTE(v467) = v45;
  if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v484.__r_.__value_.__l.__data_);
  if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v496.__r_.__value_.__l.__data_);
  if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v493.__r_.__value_.__l.__data_);
  if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v489.__r_.__value_.__l.__data_);
  v46 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v493, "elementwise");
  if (SHIBYTE(__str[0]->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v496, __str[0]->__r_.__value_.__l.__data_, __str[0]->__r_.__value_.__l.__size_);
  }
  else
  {
    v47 = *(_OWORD *)__str[0];
    v496.__r_.__value_.__r.__words[2] = __str[0]->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v496.__r_.__value_.__l.__data_ = v47;
  }
  if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v497, v469.__r_.__value_.__l.__data_, v469.__r_.__value_.__l.__size_);
  }
  else
  {
    v497 = *(_OWORD *)&v469.__r_.__value_.__l.__data_;
    *(_QWORD *)v498 = *((_QWORD *)&v469.__r_.__value_.__l + 2);
  }
  v392 = 0;
  v391 = 0;
  v393 = 0;
  v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v391;
  v489.__r_.__value_.__s.__data_[8] = 0;
  v391 = (__int128 *)operator new(0x30uLL);
  v392 = v391;
  v393 = v391 + 3;
  v392 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v393, (__int128 *)&v496, (__int128 *)&v498[8], (std::string *)v391);
  if (SHIBYTE(v465.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v489, v465.__r_.__value_.__l.__data_, v465.__r_.__value_.__l.__size_);
  else
    v489 = v465;
  v389 = 0;
  v388 = 0;
  v390 = 0;
  v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v388;
  v484.__r_.__value_.__s.__data_[8] = 0;
  v388 = (std::string *)operator new(0x18uLL);
  v389 = v388;
  v390 = v388 + 1;
  v389 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v390, (__int128 *)&v489, &v490, v388);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v394, v46, (uint64_t)&v493, (uint64_t)&__p, (uint64_t)&v396, v391, v392, (__int128 **)&v388);
  v48 = v395;
  if (v395)
  {
    v49 = (unint64_t *)&v395->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v388;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v484);
  if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v489.__r_.__value_.__l.__data_);
  v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v391;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v489);
  for (i = 0; i != -48; i -= 24)
  {
    if ((char)v498[i + 7] < 0)
      operator delete(*(void **)((char *)&v496 + i + 24));
  }
  if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v493.__r_.__value_.__l.__data_);
  v383 = 0x100000007;
  v384 = 0;
  v385 = 0;
  v386 = 0xFFFFFFFF00000000;
  v382 = 0x358637BD00000005;
  v387 = 0;
  if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = HIBYTE(v474.__r_.__value_.__r.__words[2]);
  else
    v52 = v474.__r_.__value_.__l.__size_;
  v53 = &v496;
  std::string::basic_string[abi:ne180100]((uint64_t)&v496, v52 + 23);
  if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v53 = (std::string *)v496.__r_.__value_.__r.__words[0];
  if (v52)
  {
    if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = &v474;
    else
      v54 = (std::string *)v474.__r_.__value_.__r.__words[0];
    memmove(v53, v54, v52);
  }
  strcpy((char *)v53 + v52, "_denominator_reduce_l2_");
  std::to_string(&v493, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if ((v493.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = &v493;
  else
    v55 = (std::string *)v493.__r_.__value_.__r.__words[0];
  if ((v493.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = HIBYTE(v493.__r_.__value_.__r.__words[2]);
  else
    v56 = v493.__r_.__value_.__l.__size_;
  v57 = std::string::append(&v496, (const std::string::value_type *)v55, v56);
  v58 = (void *)v57->__r_.__value_.__r.__words[0];
  v489.__r_.__value_.__r.__words[0] = v57->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v489.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v57->__r_.__value_.__r.__words[1] + 7);
  v59 = HIBYTE(v57->__r_.__value_.__r.__words[2]);
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v467) < 0)
    operator delete(__p);
  __p = v58;
  *(_QWORD *)&v467 = v489.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v467 + 7) = *(std::string::size_type *)((char *)v489.__r_.__value_.__r.__words + 7);
  HIBYTE(v467) = v59;
  if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v493.__r_.__value_.__l.__data_);
  if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v496.__r_.__value_.__l.__data_);
  std::string::operator=(&v469, &v465);
  MEMORY[0x1A1AD5EAC](&__s, "reduce_l2");
  if (v13 == 1)
  {
    LODWORD(v383) = 1;
    v60 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v496, "reduce");
    if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v493, v469.__r_.__value_.__l.__data_, v469.__r_.__value_.__l.__size_);
    else
      v493 = v469;
    v378 = 0;
    v377 = 0;
    v379 = 0;
    v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v377;
    v489.__r_.__value_.__s.__data_[8] = 0;
    v377 = (__int128 *)operator new(0x18uLL);
    v378 = v377;
    v379 = (char *)v377 + 24;
    v378 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v379, (__int128 *)&v493, &v494, (std::string *)v377);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v489, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v489 = __s;
    v375 = 0;
    v374 = 0;
    v376 = 0;
    v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v374;
    v484.__r_.__value_.__s.__data_[8] = 0;
    v374 = (std::string *)operator new(0x18uLL);
    v375 = v374;
    v376 = v374 + 1;
    v375 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v376, (__int128 *)&v489, &v490, v374);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v380, v60, (uint64_t)&v496, (uint64_t)&__p, (uint64_t)&v382, v377, v378, (__int128 **)&v374);
    v62 = v381;
    if (v381)
    {
      v63 = (unint64_t *)&v381->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v374;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v484);
    if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v489.__r_.__value_.__l.__data_);
    v65 = &v377;
LABEL_168:
    v489.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v489);
    if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v493.__r_.__value_.__l.__data_);
    if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v496.__r_.__value_.__l.__data_);
  }
  else
  {
    switch(v13)
    {
      case 2:
        LODWORD(v383) = 3;
        v61 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(&v496, "reduce");
        if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v493, v469.__r_.__value_.__l.__data_, v469.__r_.__value_.__l.__size_);
        else
          v493 = v469;
        v370 = 0;
        v369 = 0;
        v371 = 0;
        v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v369;
        v489.__r_.__value_.__s.__data_[8] = 0;
        v369 = (__int128 *)operator new(0x18uLL);
        v370 = v369;
        v371 = (char *)v369 + 24;
        v370 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v371, (__int128 *)&v493, &v494, (std::string *)v369);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v489, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v489 = __s;
        v367 = 0;
        v366 = 0;
        v368 = 0;
        v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v366;
        v484.__r_.__value_.__s.__data_[8] = 0;
        v366 = (std::string *)operator new(0x18uLL);
        v367 = v366;
        v368 = v366 + 1;
        v367 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v368, (__int128 *)&v489, &v490, v366);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v372, v61, (uint64_t)&v496, (uint64_t)&__p, (uint64_t)&v382, v369, v370, (__int128 **)&v366);
        v255 = v373;
        if (v373)
        {
          v256 = (unint64_t *)&v373->__shared_owners_;
          do
            v257 = __ldaxr(v256);
          while (__stlxr(v257 - 1, v256));
          if (!v257)
          {
            ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
            std::__shared_weak_count::__release_weak(v255);
          }
        }
        v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v366;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v484);
        if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v489.__r_.__value_.__l.__data_);
        v65 = &v369;
        goto LABEL_168;
      case 3:
        LODWORD(v383) = 7;
        v229 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(&v496, "reduce");
        if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v493, v469.__r_.__value_.__l.__data_, v469.__r_.__value_.__l.__size_);
        else
          v493 = v469;
        v362 = 0;
        v361 = 0;
        v363 = 0;
        v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v361;
        v489.__r_.__value_.__s.__data_[8] = 0;
        v361 = (__int128 *)operator new(0x18uLL);
        v362 = v361;
        v363 = (char *)v361 + 24;
        v362 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v363, (__int128 *)&v493, &v494, (std::string *)v361);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v489, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v489 = __s;
        v359 = 0;
        v358 = 0;
        v360 = 0;
        v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v358;
        v484.__r_.__value_.__s.__data_[8] = 0;
        v358 = (std::string *)operator new(0x18uLL);
        v359 = v358;
        v360 = v358 + 1;
        v359 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v360, (__int128 *)&v489, &v490, v358);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v364, v229, (uint64_t)&v496, (uint64_t)&__p, (uint64_t)&v382, v361, v362, (__int128 **)&v358);
        v258 = v365;
        if (v365)
        {
          v259 = (unint64_t *)&v365->__shared_owners_;
          do
            v260 = __ldaxr(v259);
          while (__stlxr(v260 - 1, v259));
          if (!v260)
          {
            ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
            std::__shared_weak_count::__release_weak(v258);
          }
        }
        v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v358;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v484);
        if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v489.__r_.__value_.__l.__data_);
        v65 = &v361;
        goto LABEL_168;
      case 4:
        LODWORD(v383) = 7;
        v230 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(&v496, "reduce");
        if (v467 >= 0)
          v231 = HIBYTE(v467);
        else
          v231 = v467;
        v232 = &v493;
        std::string::basic_string[abi:ne180100]((uint64_t)&v493, v231 + 5);
        if ((v493.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v232 = (std::string *)v493.__r_.__value_.__r.__words[0];
        if (v231)
        {
          if (v467 >= 0)
            v233 = &__p;
          else
            v233 = __p;
          memmove(v232, v233, v231);
        }
        strcpy((char *)v232 + v231, "_temp");
        if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v489, v469.__r_.__value_.__l.__data_, v469.__r_.__value_.__l.__size_);
        else
          v489 = v469;
        v354 = 0;
        v353 = 0;
        v355 = 0;
        v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v353;
        v484.__r_.__value_.__s.__data_[8] = 0;
        v353 = (__int128 *)operator new(0x18uLL);
        v354 = v353;
        v355 = (char *)v353 + 24;
        v354 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v355, (__int128 *)&v489, &v490, (std::string *)v353);
        std::string::basic_string[abi:ne180100]<0>(&v484, "temp");
        v351 = 0;
        v350 = 0;
        v352 = 0;
        v480.__r_.__value_.__r.__words[0] = (std::string::size_type)&v350;
        v480.__r_.__value_.__s.__data_[8] = 0;
        v350 = (std::string *)operator new(0x18uLL);
        v351 = v350;
        v352 = v350 + 1;
        v351 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v352, (__int128 *)&v484, (__int128 *)&v485, v350);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v356, v230, (uint64_t)&v496, (uint64_t)&v493, (uint64_t)&v382, v353, v354, (__int128 **)&v350);
        v251 = v357;
        if (v357)
        {
          v252 = (unint64_t *)&v357->__shared_owners_;
          do
            v253 = __ldaxr(v252);
          while (__stlxr(v253 - 1, v252));
          if (!v253)
          {
            ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
            std::__shared_weak_count::__release_weak(v251);
          }
        }
        v480.__r_.__value_.__r.__words[0] = (std::string::size_type)&v350;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v480);
        if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v484.__r_.__value_.__l.__data_);
        v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v353;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v484);
        if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v489.__r_.__value_.__l.__data_);
        if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v493.__r_.__value_.__l.__data_);
        if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v496.__r_.__value_.__l.__data_);
        LODWORD(v383) = 8;
        v254 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(&v496, "reduce");
        std::string::basic_string[abi:ne180100]<0>(&v493, "temp");
        v346 = 0;
        v345 = 0;
        v347 = 0;
        v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v345;
        v489.__r_.__value_.__s.__data_[8] = 0;
        v345 = (__int128 *)operator new(0x18uLL);
        v346 = v345;
        v347 = (char *)v345 + 24;
        v346 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v347, (__int128 *)&v493, &v494, (std::string *)v345);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v489, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v489 = __s;
        v343 = 0;
        v342 = 0;
        v344 = 0;
        v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v342;
        v484.__r_.__value_.__s.__data_[8] = 0;
        v342 = (std::string *)operator new(0x18uLL);
        v343 = v342;
        v344 = v342 + 1;
        v343 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v344, (__int128 *)&v489, &v490, v342);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v348, v254, (uint64_t)&v496, (uint64_t)&__p, (uint64_t)&v382, v345, v346, (__int128 **)&v342);
        v264 = v349;
        if (v349)
        {
          v265 = (unint64_t *)&v349->__shared_owners_;
          do
            v266 = __ldaxr(v265);
          while (__stlxr(v266 - 1, v265));
          if (!v266)
          {
            ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
            std::__shared_weak_count::__release_weak(v264);
          }
        }
        v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v342;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v484);
        if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v489.__r_.__value_.__l.__data_);
        v65 = &v345;
        goto LABEL_168;
      case 5:
        LODWORD(v383) = 31;
        v234 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(&v496, "reduce");
        if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v493, v469.__r_.__value_.__l.__data_, v469.__r_.__value_.__l.__size_);
        else
          v493 = v469;
        v338 = 0;
        v337 = 0;
        v339 = 0;
        v489.__r_.__value_.__r.__words[0] = (std::string::size_type)&v337;
        v489.__r_.__value_.__s.__data_[8] = 0;
        v337 = (__int128 *)operator new(0x18uLL);
        v338 = v337;
        v339 = (char *)v337 + 24;
        v338 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v339, (__int128 *)&v493, &v494, (std::string *)v337);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v489, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v489 = __s;
        v335 = 0;
        v334 = 0;
        v336 = 0;
        v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v334;
        v484.__r_.__value_.__s.__data_[8] = 0;
        v334 = (std::string *)operator new(0x18uLL);
        v335 = v334;
        v336 = v334 + 1;
        v335 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v336, (__int128 *)&v489, &v490, v334);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v340, v234, (uint64_t)&v496, (uint64_t)&__p, (uint64_t)&v382, v337, v338, (__int128 **)&v334);
        v261 = v341;
        if (v341)
        {
          v262 = (unint64_t *)&v341->__shared_owners_;
          do
            v263 = __ldaxr(v262);
          while (__stlxr(v263 - 1, v262));
          if (!v263)
          {
            ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
            std::__shared_weak_count::__release_weak(v261);
          }
        }
        v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v334;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v484);
        if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v489.__r_.__value_.__l.__data_);
        v65 = &v337;
        goto LABEL_168;
      default:
        break;
    }
  }
  v496.__r_.__value_.__r.__words[2] = 897988541;
  *(_QWORD *)&v498[4] = 0;
  v496.__r_.__value_.__r.__words[0] = 1;
  *(float *)&v496.__r_.__value_.__r.__words[1] = 1.0 / (float)v16;
  HIDWORD(v496.__r_.__value_.__r.__words[1]) = v462;
  LOBYTE(v497) = 0;
  std::string::operator=(&v469, &__s);
  MEMORY[0x1A1AD5EAC](&__s, "square_of_denominator");
  if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v66 = HIBYTE(v474.__r_.__value_.__r.__words[2]);
  else
    v66 = v474.__r_.__value_.__l.__size_;
  v67 = &v484;
  std::string::basic_string[abi:ne180100]((uint64_t)&v484, v66 + 1);
  if ((v484.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v67 = (std::string *)v484.__r_.__value_.__r.__words[0];
  if (v66)
  {
    if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = &v474;
    else
      v68 = (std::string *)v474.__r_.__value_.__r.__words[0];
    memmove(v67, v68, v66);
  }
  *(_WORD *)((char *)&v67->__r_.__value_.__l.__data_ + v66) = 95;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_s = &__s;
  else
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v70 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v70 = __s.__r_.__value_.__l.__size_;
  v71 = std::string::append(&v484, (const std::string::value_type *)p_s, v70);
  v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
  v489.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v489.__r_.__value_.__l.__data_ = v72;
  v71->__r_.__value_.__l.__size_ = 0;
  v71->__r_.__value_.__r.__words[2] = 0;
  v71->__r_.__value_.__r.__words[0] = 0;
  v73 = std::string::append(&v489, "_");
  v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
  v493.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v493.__r_.__value_.__l.__data_ = v74;
  v73->__r_.__value_.__l.__size_ = 0;
  v73->__r_.__value_.__r.__words[2] = 0;
  v73->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v480, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if ((v480.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v75 = &v480;
  else
    v75 = (std::string *)v480.__r_.__value_.__r.__words[0];
  if ((v480.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v76 = HIBYTE(v480.__r_.__value_.__r.__words[2]);
  else
    v76 = v480.__r_.__value_.__l.__size_;
  v77 = std::string::append(&v493, (const std::string::value_type *)v75, v76);
  v78 = (void *)v77->__r_.__value_.__r.__words[0];
  v475[0].__r_.__value_.__r.__words[0] = v77->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v475[0].__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v77->__r_.__value_.__r.__words[1] + 7);
  v79 = HIBYTE(v77->__r_.__value_.__r.__words[2]);
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v467) < 0)
    operator delete(__p);
  __p = v78;
  *(_QWORD *)&v467 = v475[0].__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v467 + 7) = *(std::string::size_type *)((char *)v475[0].__r_.__value_.__r.__words + 7);
  HIBYTE(v467) = v79;
  if (SHIBYTE(v480.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v480.__r_.__value_.__l.__data_);
  if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v493.__r_.__value_.__l.__data_);
  if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v489.__r_.__value_.__l.__data_);
  if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v484.__r_.__value_.__l.__data_);
  v80 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v489, "elementwise");
  if ((SHIBYTE(v469.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v493 = v469;
LABEL_207:
    v494 = *(_OWORD *)&v469.__r_.__value_.__l.__data_;
    *(_QWORD *)v495 = *((_QWORD *)&v469.__r_.__value_.__l + 2);
    goto LABEL_208;
  }
  std::string::__init_copy_ctor_external(&v493, v469.__r_.__value_.__l.__data_, v469.__r_.__value_.__l.__size_);
  if ((SHIBYTE(v469.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_207;
  std::string::__init_copy_ctor_external((std::string *)&v494, v469.__r_.__value_.__l.__data_, v469.__r_.__value_.__l.__size_);
LABEL_208:
  v330 = 0;
  v329 = 0;
  v331 = 0;
  v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v329;
  v484.__r_.__value_.__s.__data_[8] = 0;
  v329 = (__int128 *)operator new(0x30uLL);
  v330 = v329;
  v331 = v329 + 3;
  v330 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v331, (__int128 *)&v493, (__int128 *)&v495[8], (std::string *)v329);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v484, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v484 = __s;
  v327 = 0;
  v326 = 0;
  v328 = 0;
  v480.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
  v480.__r_.__value_.__s.__data_[8] = 0;
  v326 = (std::string *)operator new(0x18uLL);
  v327 = v326;
  v328 = v326 + 1;
  v327 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v328, (__int128 *)&v484, (__int128 *)&v485, v326);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v332, v80, (uint64_t)&v489, (uint64_t)&__p, (uint64_t)&v496, v329, v330, (__int128 **)&v326);
  v81 = v333;
  if (v333)
  {
    v82 = (unint64_t *)&v333->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v480.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v480);
  if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v484.__r_.__value_.__l.__data_);
  v484.__r_.__value_.__r.__words[0] = (std::string::size_type)&v329;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v484);
  for (j = 0; j != -48; j -= 24)
  {
    if ((char)v495[j + 7] < 0)
      operator delete(*(void **)((char *)&v493 + j + 24));
  }
  if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v489.__r_.__value_.__l.__data_);
  v493.__r_.__value_.__r.__words[2] = 897988541;
  LOBYTE(v494) = 0;
  *(_QWORD *)&v495[4] = 0;
  v493.__r_.__value_.__r.__words[0] = 11;
  v493.__r_.__value_.__l.__size_ = 1065353216;
  std::string::operator=(&v469, &__s);
  MEMORY[0x1A1AD5EAC](&v464, "denominator");
  if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v85 = HIBYTE(v474.__r_.__value_.__r.__words[2]);
  else
    v85 = v474.__r_.__value_.__l.__size_;
  v86 = &v489;
  std::string::basic_string[abi:ne180100]((uint64_t)&v489, v85 + 13);
  if ((v489.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v86 = (std::string *)v489.__r_.__value_.__r.__words[0];
  if (v85)
  {
    if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v87 = &v474;
    else
      v87 = (std::string *)v474.__r_.__value_.__r.__words[0];
    memmove(v86, v87, v85);
  }
  strcpy((char *)v86 + v85, "_denominator_");
  std::to_string(&v484, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if ((v484.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v88 = &v484;
  else
    v88 = (std::string *)v484.__r_.__value_.__r.__words[0];
  if ((v484.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v89 = HIBYTE(v484.__r_.__value_.__r.__words[2]);
  else
    v89 = v484.__r_.__value_.__l.__size_;
  v90 = std::string::append(&v489, (const std::string::value_type *)v88, v89);
  v91 = (void *)v90->__r_.__value_.__r.__words[0];
  v480.__r_.__value_.__r.__words[0] = v90->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v480.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v90->__r_.__value_.__r.__words[1] + 7);
  v92 = HIBYTE(v90->__r_.__value_.__r.__words[2]);
  v90->__r_.__value_.__l.__size_ = 0;
  v90->__r_.__value_.__r.__words[2] = 0;
  v90->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v467) < 0)
    operator delete(__p);
  __p = v91;
  *(_QWORD *)&v467 = v480.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v467 + 7) = *(std::string::size_type *)((char *)v480.__r_.__value_.__r.__words + 7);
  HIBYTE(v467) = v92;
  if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v484.__r_.__value_.__l.__data_);
  if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v489.__r_.__value_.__l.__data_);
  v93 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v489, "elementwise");
  if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v484, v469.__r_.__value_.__l.__data_, v469.__r_.__value_.__l.__size_);
  else
    v484 = v469;
  v321 = 0;
  v322 = 0;
  v323 = 0;
  v480.__r_.__value_.__r.__words[0] = (std::string::size_type)&v321;
  v480.__r_.__value_.__s.__data_[8] = 0;
  v321 = (__int128 *)operator new(0x18uLL);
  v322 = v321;
  v323 = (char *)v321 + 24;
  v322 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v323, (__int128 *)&v484, (__int128 *)&v485, (std::string *)v321);
  if (SHIBYTE(v464.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v480, v464.__r_.__value_.__l.__data_, v464.__r_.__value_.__l.__size_);
  else
    v480 = v464;
  v318 = 0;
  v319 = 0;
  v320 = 0;
  v475[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v318;
  v475[0].__r_.__value_.__s.__data_[8] = 0;
  v318 = (std::string *)operator new(0x18uLL);
  v319 = v318;
  v320 = v318 + 1;
  v319 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v320, (__int128 *)&v480, &v481, v318);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v324, v93, (uint64_t)&v489, (uint64_t)&__p, (uint64_t)&v493, v321, v322, (__int128 **)&v318);
  v94 = v325;
  if (v325)
  {
    v95 = (unint64_t *)&v325->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v475[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v318;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v475);
  if (SHIBYTE(v480.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v480.__r_.__value_.__l.__data_);
  v480.__r_.__value_.__r.__words[0] = (std::string::size_type)&v321;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v480);
  if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v484.__r_.__value_.__l.__data_);
  if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v489.__r_.__value_.__l.__data_);
  v489.__r_.__value_.__r.__words[2] = 897988541;
  v492 = 0;
  v491 = 0;
  v489.__r_.__value_.__l.__size_ = 1065353216;
  v489.__r_.__value_.__r.__words[0] = 102;
  LOBYTE(v490) = 1;
  MEMORY[0x1A1AD5EAC](&__s, "numerator_div_denominator");
  if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v97 = HIBYTE(v474.__r_.__value_.__r.__words[2]);
  else
    v97 = v474.__r_.__value_.__l.__size_;
  v98 = v475;
  std::string::basic_string[abi:ne180100]((uint64_t)v475, v97 + 1);
  if ((v475[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v98 = (std::string *)v475[0].__r_.__value_.__r.__words[0];
  if (v97)
  {
    if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v99 = &v474;
    else
      v99 = (std::string *)v474.__r_.__value_.__r.__words[0];
    memmove(v98, v99, v97);
  }
  *(_WORD *)((char *)&v98->__r_.__value_.__l.__data_ + v97) = 95;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v100 = &__s;
  else
    v100 = (std::string *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v101 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v101 = __s.__r_.__value_.__l.__size_;
  v102 = std::string::append(v475, (const std::string::value_type *)v100, v101);
  v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
  v480.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v480.__r_.__value_.__l.__data_ = v103;
  v102->__r_.__value_.__l.__size_ = 0;
  v102->__r_.__value_.__r.__words[2] = 0;
  v102->__r_.__value_.__r.__words[0] = 0;
  v104 = std::string::append(&v480, "_");
  v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  v484.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v484.__r_.__value_.__l.__data_ = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v317, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v106 = &v317;
  else
    v106 = (std::string *)v317.__r_.__value_.__r.__words[0];
  if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v107 = HIBYTE(v317.__r_.__value_.__r.__words[2]);
  else
    v107 = v317.__r_.__value_.__l.__size_;
  v108 = std::string::append(&v484, (const std::string::value_type *)v106, v107);
  v109 = (void *)v108->__r_.__value_.__r.__words[0];
  v487.__r_.__value_.__r.__words[0] = v108->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v487.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v108->__r_.__value_.__r.__words[1] + 7);
  v110 = HIBYTE(v108->__r_.__value_.__r.__words[2]);
  v108->__r_.__value_.__l.__size_ = 0;
  v108->__r_.__value_.__r.__words[2] = 0;
  v108->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v467) < 0)
    operator delete(__p);
  __p = v109;
  *(_QWORD *)&v467 = v487.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v467 + 7) = *(std::string::size_type *)((char *)v487.__r_.__value_.__r.__words + 7);
  HIBYTE(v467) = v110;
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v317.__r_.__value_.__l.__data_);
  if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v484.__r_.__value_.__l.__data_);
  if (SHIBYTE(v480.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v480.__r_.__value_.__l.__data_);
  if (SHIBYTE(v475[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v475[0].__r_.__value_.__l.__data_);
  v111 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v480, "elementwise");
  if (SHIBYTE(v465.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v484, v465.__r_.__value_.__l.__data_, v465.__r_.__value_.__l.__size_);
  else
    v484 = v465;
  if (SHIBYTE(v464.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v485, v464.__r_.__value_.__l.__data_, v464.__r_.__value_.__l.__size_);
  else
    v485 = v464;
  v312 = 0;
  v313 = 0;
  v314 = 0;
  v475[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v312;
  v475[0].__r_.__value_.__s.__data_[8] = 0;
  v312 = (__int128 *)operator new(0x30uLL);
  v313 = v312;
  v314 = v312 + 3;
  v313 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v314, (__int128 *)&v484, &v486, (std::string *)v312);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v475, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v475[0] = __s;
  v309 = 0;
  v310 = 0;
  v311 = 0;
  v317.__r_.__value_.__r.__words[0] = (std::string::size_type)&v309;
  v317.__r_.__value_.__s.__data_[8] = 0;
  v309 = (std::string *)operator new(0x18uLL);
  v310 = v309;
  v311 = v309 + 1;
  v310 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v311, (__int128 *)v475, (__int128 *)v476, v309);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v315, v111, (uint64_t)&v480, (uint64_t)&__p, (uint64_t)&v489, v312, v313, (__int128 **)&v309);
  v112 = v316;
  if (v316)
  {
    v113 = (unint64_t *)&v316->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v317.__r_.__value_.__r.__words[0] = (std::string::size_type)&v309;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v317);
  if (SHIBYTE(v475[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v475[0].__r_.__value_.__l.__data_);
  v475[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v312;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v475);
  for (k = 0; k != -6; k -= 3)
  {
    if (SHIBYTE(v485.__r_.__value_.__r.__words[k + 2]) < 0)
      operator delete(*(void **)((char *)&v484 + k * 8 + 24));
  }
  if (SHIBYTE(v480.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v480.__r_.__value_.__l.__data_);
  v116 = *((_DWORD *)v455 + 2 * v13);
  if (v13 <= 1)
  {
    v118 = 1;
    v117 = 1;
    goto LABEL_321;
  }
  v117 = *((_DWORD *)v455 + 2 * (v13 - 2) + 2);
  if (v13 == 2)
  {
    v118 = 1;
LABEL_321:
    v119 = 1;
    goto LABEL_322;
  }
  v119 = *((_DWORD *)v455 + 2 * (v13 - 3) + 2);
  if (v13 < 4)
  {
    v118 = 1;
    goto LABEL_322;
  }
  v118 = *((_DWORD *)v455 + 2 * (v13 - 4) + 2);
  if (v13 == 4)
  {
LABEL_322:
    v120 = 1;
    goto LABEL_323;
  }
  v120 = *((_DWORD *)v455 + 2 * (v13 - 5) + 2);
LABEL_323:
  v317.__r_.__value_.__l.__size_ = __PAIR64__(v118, v119);
  v317.__r_.__value_.__r.__words[0] = __PAIR64__(v117, v116);
  v317.__r_.__value_.__r.__words[2] = __PAIR64__(v13, v120);
  MEMORY[0x1A1AD5EAC](&__s, "gamma");
  if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v121 = HIBYTE(v474.__r_.__value_.__r.__words[2]);
  else
    v121 = v474.__r_.__value_.__l.__size_;
  v122 = v475;
  std::string::basic_string[abi:ne180100]((uint64_t)v475, v121 + 1);
  if ((v475[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v122 = (std::string *)v475[0].__r_.__value_.__r.__words[0];
  if (v121)
  {
    if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v123 = &v474;
    else
      v123 = (std::string *)v474.__r_.__value_.__r.__words[0];
    memmove(v122, v123, v121);
  }
  *(_WORD *)((char *)&v122->__r_.__value_.__l.__data_ + v121) = 95;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v124 = &__s;
  else
    v124 = (std::string *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v125 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v125 = __s.__r_.__value_.__l.__size_;
  v126 = std::string::append(v475, (const std::string::value_type *)v124, v125);
  v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
  v480.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v480.__r_.__value_.__l.__data_ = v127;
  v126->__r_.__value_.__l.__size_ = 0;
  v126->__r_.__value_.__r.__words[2] = 0;
  v126->__r_.__value_.__r.__words[0] = 0;
  v128 = std::string::append(&v480, "_");
  v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
  v484.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v484.__r_.__value_.__l.__data_ = v129;
  v128->__r_.__value_.__l.__size_ = 0;
  v128->__r_.__value_.__r.__words[2] = 0;
  v128->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v487, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if ((v487.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v130 = &v487;
  else
    v130 = (std::string *)v487.__r_.__value_.__r.__words[0];
  if ((v487.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v131 = HIBYTE(v487.__r_.__value_.__r.__words[2]);
  else
    v131 = v487.__r_.__value_.__l.__size_;
  v132 = std::string::append(&v484, (const std::string::value_type *)v130, v131);
  v133 = (void *)v132->__r_.__value_.__r.__words[0];
  v483.__r_.__value_.__r.__words[0] = v132->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v483.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v132->__r_.__value_.__r.__words[1] + 7);
  v134 = HIBYTE(v132->__r_.__value_.__r.__words[2]);
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v467) < 0)
    operator delete(__p);
  __p = v133;
  *(_QWORD *)&v467 = v483.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v467 + 7) = *(std::string::size_type *)((char *)v483.__r_.__value_.__r.__words + 7);
  HIBYTE(v467) = v134;
  if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v487.__r_.__value_.__l.__data_);
  if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v484.__r_.__value_.__l.__data_);
  if (SHIBYTE(v480.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v480.__r_.__value_.__l.__data_);
  if (SHIBYTE(v475[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v475[0].__r_.__value_.__l.__data_);
  v135 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v484, "load_constant");
  v304 = 0;
  v305 = 0;
  v306 = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v480, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v480 = __s;
  v301 = 0;
  v302 = 0;
  v303 = 0;
  v475[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v301;
  v475[0].__r_.__value_.__s.__data_[8] = 0;
  v301 = (std::string *)operator new(0x18uLL);
  v302 = v301;
  v303 = v301 + 1;
  v302 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v303, (__int128 *)&v480, &v481, v301);
  Espresso::sequential_builder::add<Espresso::load_constant_params>(&v307, v135, (uint64_t)&v484, (uint64_t)&__p, (uint64_t)&v317, v304, v305, (__int128 **)&v301);
  v475[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v301;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v475);
  if (SHIBYTE(v480.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v480.__r_.__value_.__l.__data_);
  v480.__r_.__value_.__r.__words[0] = (std::string::size_type)&v304;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v480);
  if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v484.__r_.__value_.__l.__data_);
  v299 = v307;
  v300 = v308;
  if (v308)
  {
    v136 = (unint64_t *)&v308->__shared_owners_;
    do
      v137 = __ldxr(v136);
    while (__stxr(v137 + 1, v136));
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v297, (int)v317.__r_.__value_.__l.__data_, SHIDWORD(v317.__r_.__value_.__r.__words[0]), v317.__r_.__value_.__r.__words[1], LODWORD(v317.__r_.__value_.__r.__words[2]) * HIDWORD(v317.__r_.__value_.__r.__words[1]));
  v138 = v297;
  if (v460)
    v139 = v460;
  else
    v139 = &CoreML::Specification::_WeightParams_default_instance_;
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v297 + 24), v139, 4 * v16);
  v295 = v138;
  v296 = v298;
  if (v298)
  {
    v140 = (unint64_t *)&v298->__shared_owners_;
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
  }
  Espresso::generic_load_constant_kernel::set_constant_blob();
  if (v296)
  {
    v142 = &v296->__shared_owners_;
    do
      v143 = __ldaxr((unint64_t *)v142);
    while (__stlxr(v143 - 1, (unint64_t *)v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
  }
  MEMORY[0x1A1AD5EAC](&__s, "beta");
  if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v144 = HIBYTE(v474.__r_.__value_.__r.__words[2]);
  else
    v144 = v474.__r_.__value_.__l.__size_;
  v145 = v475;
  std::string::basic_string[abi:ne180100]((uint64_t)v475, v144 + 1);
  if ((v475[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v145 = (std::string *)v475[0].__r_.__value_.__r.__words[0];
  if (v144)
  {
    if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v146 = &v474;
    else
      v146 = (std::string *)v474.__r_.__value_.__r.__words[0];
    memmove(v145, v146, v144);
  }
  *(_WORD *)((char *)&v145->__r_.__value_.__l.__data_ + v144) = 95;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v147 = &__s;
  else
    v147 = (std::string *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v148 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v148 = __s.__r_.__value_.__l.__size_;
  v149 = std::string::append(v475, (const std::string::value_type *)v147, v148);
  v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
  v480.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v480.__r_.__value_.__l.__data_ = v150;
  v149->__r_.__value_.__l.__size_ = 0;
  v149->__r_.__value_.__r.__words[2] = 0;
  v149->__r_.__value_.__r.__words[0] = 0;
  v151 = std::string::append(&v480, "_");
  v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  v484.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v484.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v487, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if ((v487.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v153 = &v487;
  else
    v153 = (std::string *)v487.__r_.__value_.__r.__words[0];
  if ((v487.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v154 = HIBYTE(v487.__r_.__value_.__r.__words[2]);
  else
    v154 = v487.__r_.__value_.__l.__size_;
  v155 = std::string::append(&v484, (const std::string::value_type *)v153, v154);
  v156 = (void *)v155->__r_.__value_.__r.__words[0];
  v483.__r_.__value_.__r.__words[0] = v155->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v483.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v155->__r_.__value_.__r.__words[1] + 7);
  v157 = HIBYTE(v155->__r_.__value_.__r.__words[2]);
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v467) < 0)
    operator delete(__p);
  __p = v156;
  *(_QWORD *)&v467 = v483.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v467 + 7) = *(std::string::size_type *)((char *)v483.__r_.__value_.__r.__words + 7);
  HIBYTE(v467) = v157;
  if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v487.__r_.__value_.__l.__data_);
  if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v484.__r_.__value_.__l.__data_);
  if (SHIBYTE(v480.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v480.__r_.__value_.__l.__data_);
  if (SHIBYTE(v475[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v475[0].__r_.__value_.__l.__data_);
  v158 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v484, "load_constant");
  v290 = 0;
  v291 = 0;
  v292 = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v480, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v480 = __s;
  v287 = 0;
  v288 = 0;
  v289 = 0;
  v475[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v287;
  v475[0].__r_.__value_.__s.__data_[8] = 0;
  v287 = (std::string *)operator new(0x18uLL);
  v288 = v287;
  v289 = v287 + 1;
  v288 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v289, (__int128 *)&v480, &v481, v287);
  Espresso::sequential_builder::add<Espresso::load_constant_params>(&v293, v158, (uint64_t)&v484, (uint64_t)&__p, (uint64_t)&v317, v290, v291, (__int128 **)&v287);
  v475[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v287;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v475);
  if (SHIBYTE(v480.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v480.__r_.__value_.__l.__data_);
  v480.__r_.__value_.__r.__words[0] = (std::string::size_type)&v290;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v480);
  if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v484.__r_.__value_.__l.__data_);
  v285 = v293;
  v286 = v294;
  if (v294)
  {
    v159 = (unint64_t *)&v294->__shared_owners_;
    do
      v160 = __ldxr(v159);
    while (__stxr(v160 + 1, v159));
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v283, (int)v317.__r_.__value_.__l.__data_, SHIDWORD(v317.__r_.__value_.__r.__words[0]), v317.__r_.__value_.__r.__words[1], LODWORD(v317.__r_.__value_.__r.__words[2]) * HIDWORD(v317.__r_.__value_.__r.__words[1]));
  v161 = v283;
  if (v461)
    v162 = v461;
  else
    v162 = &CoreML::Specification::_WeightParams_default_instance_;
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v283 + 24), v162, 4 * v16);
  v281 = v161;
  v282 = v284;
  if (v284)
  {
    v163 = (unint64_t *)&v284->__shared_owners_;
    do
      v164 = __ldxr(v163);
    while (__stxr(v164 + 1, v163));
  }
  Espresso::generic_load_constant_kernel::set_constant_blob();
  if (v282)
  {
    v165 = &v282->__shared_owners_;
    do
      v166 = __ldaxr((unint64_t *)v165);
    while (__stlxr(v166 - 1, (unint64_t *)v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
  v484.__r_.__value_.__r.__words[2] = 897988541;
  LODWORD(v486) = 0;
  HIDWORD(v485.__r_.__value_.__r.__words[2]) = 0;
  v484.__r_.__value_.__l.__size_ = 1065353216;
  v484.__r_.__value_.__r.__words[0] = 1;
  v485.__r_.__value_.__s.__data_[0] = 1;
  std::string::operator=(&v469, &__s);
  MEMORY[0x1A1AD5EAC](&__s, "numerator_div_denominator_mul_gamma");
  if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v167 = HIBYTE(v474.__r_.__value_.__r.__words[2]);
  else
    v167 = v474.__r_.__value_.__l.__size_;
  v168 = &v487;
  std::string::basic_string[abi:ne180100]((uint64_t)&v487, v167 + 1);
  if ((v487.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v168 = (std::string *)v487.__r_.__value_.__r.__words[0];
  if (v167)
  {
    if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v169 = &v474;
    else
      v169 = (std::string *)v474.__r_.__value_.__r.__words[0];
    memmove(v168, v169, v167);
  }
  *(_WORD *)((char *)&v168->__r_.__value_.__l.__data_ + v167) = 95;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v170 = &__s;
  else
    v170 = (std::string *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v171 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v171 = __s.__r_.__value_.__l.__size_;
  v172 = std::string::append(&v487, (const std::string::value_type *)v170, v171);
  v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
  v475[0].__r_.__value_.__r.__words[2] = v172->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v475[0].__r_.__value_.__l.__data_ = v173;
  v172->__r_.__value_.__l.__size_ = 0;
  v172->__r_.__value_.__r.__words[2] = 0;
  v172->__r_.__value_.__r.__words[0] = 0;
  v174 = std::string::append(v475, "_");
  v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
  v480.__r_.__value_.__r.__words[2] = v174->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v480.__r_.__value_.__l.__data_ = v175;
  v174->__r_.__value_.__l.__size_ = 0;
  v174->__r_.__value_.__r.__words[2] = 0;
  v174->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v483, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if ((v483.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v176 = &v483;
  else
    v176 = (std::string *)v483.__r_.__value_.__r.__words[0];
  if ((v483.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v177 = HIBYTE(v483.__r_.__value_.__r.__words[2]);
  else
    v177 = v483.__r_.__value_.__l.__size_;
  v178 = std::string::append(&v480, (const std::string::value_type *)v176, v177);
  v179 = (void *)v178->__r_.__value_.__r.__words[0];
  v478.__r_.__value_.__r.__words[0] = v178->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v478.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v178->__r_.__value_.__r.__words[1] + 7);
  v180 = HIBYTE(v178->__r_.__value_.__r.__words[2]);
  v178->__r_.__value_.__l.__size_ = 0;
  v178->__r_.__value_.__r.__words[2] = 0;
  v178->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v467) < 0)
    operator delete(__p);
  __p = v179;
  *(_QWORD *)&v467 = v478.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v467 + 7) = *(std::string::size_type *)((char *)v478.__r_.__value_.__r.__words + 7);
  HIBYTE(v467) = v180;
  if (SHIBYTE(v483.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v483.__r_.__value_.__l.__data_);
  if (SHIBYTE(v480.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v480.__r_.__value_.__l.__data_);
  if (SHIBYTE(v475[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v475[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v487.__r_.__value_.__l.__data_);
  v181 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(v475, "elementwise");
  std::string::basic_string[abi:ne180100]<0>(&v480, "numerator_div_denominator");
  std::string::basic_string[abi:ne180100]<0>(&v481, "gamma");
  v276 = 0;
  v277 = 0;
  v278 = 0;
  v487.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
  v487.__r_.__value_.__s.__data_[8] = 0;
  v276 = (__int128 *)operator new(0x30uLL);
  v277 = v276;
  v278 = v276 + 3;
  v277 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v278, (__int128 *)&v480, (__int128 *)((char *)&v482 + 4), (std::string *)v276);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v487, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v487 = __s;
  v273 = 0;
  v274 = 0;
  v275 = 0;
  v483.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273;
  v483.__r_.__value_.__s.__data_[8] = 0;
  v273 = (std::string *)operator new(0x18uLL);
  v274 = v273;
  v275 = v273 + 1;
  v274 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v275, (__int128 *)&v487, (__int128 *)&v488, v273);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v279, v181, (uint64_t)v475, (uint64_t)&__p, (uint64_t)&v484, v276, v277, (__int128 **)&v273);
  v182 = v280;
  if (v280)
  {
    v183 = (unint64_t *)&v280->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v483.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
  if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v487.__r_.__value_.__l.__data_);
  v487.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v487);
  for (m = 0; m != -48; m -= 24)
  {
    if (*((char *)&v482 + m + 3) < 0)
      operator delete(*(void **)((char *)&v480 + m + 24));
  }
  if (SHIBYTE(v475[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v475[0].__r_.__value_.__l.__data_);
  v480.__r_.__value_.__r.__words[2] = 897988541;
  v482 = 0;
  v480.__r_.__value_.__l.__size_ = 1065353216;
  v480.__r_.__value_.__r.__words[0] = 0;
  LOBYTE(v481) = 1;
  if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v186 = HIBYTE(v474.__r_.__value_.__r.__words[2]);
  else
    v186 = v474.__r_.__value_.__l.__size_;
  v187 = &v483;
  std::string::basic_string[abi:ne180100]((uint64_t)&v483, v186 + 1);
  if ((v483.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v187 = (std::string *)v483.__r_.__value_.__r.__words[0];
  if (v186)
  {
    if ((v474.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v188 = &v474;
    else
      v188 = (std::string *)v474.__r_.__value_.__r.__words[0];
    memmove(v187, v188, v186);
  }
  *(_WORD *)((char *)&v187->__r_.__value_.__l.__data_ + v186) = 95;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v189 = &__s;
  else
    v189 = (std::string *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v190 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v190 = __s.__r_.__value_.__l.__size_;
  v191 = std::string::append(&v483, (const std::string::value_type *)v189, v190);
  v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
  v487.__r_.__value_.__r.__words[2] = v191->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v487.__r_.__value_.__l.__data_ = v192;
  v191->__r_.__value_.__l.__size_ = 0;
  v191->__r_.__value_.__r.__words[2] = 0;
  v191->__r_.__value_.__r.__words[0] = 0;
  v193 = std::string::append(&v487, "_");
  v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
  v475[0].__r_.__value_.__r.__words[2] = v193->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v475[0].__r_.__value_.__l.__data_ = v194;
  v193->__r_.__value_.__l.__size_ = 0;
  v193->__r_.__value_.__r.__words[2] = 0;
  v193->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v478, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if ((v478.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v195 = &v478;
  else
    v195 = (std::string *)v478.__r_.__value_.__r.__words[0];
  if ((v478.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v196 = HIBYTE(v478.__r_.__value_.__r.__words[2]);
  else
    v196 = v478.__r_.__value_.__l.__size_;
  v197 = std::string::append(v475, (const std::string::value_type *)v195, v196);
  v198 = (void *)v197->__r_.__value_.__r.__words[0];
  v479[0] = v197->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v479 + 7) = *(std::string::size_type *)((char *)&v197->__r_.__value_.__r.__words[1] + 7);
  v199 = HIBYTE(v197->__r_.__value_.__r.__words[2]);
  v197->__r_.__value_.__l.__size_ = 0;
  v197->__r_.__value_.__r.__words[2] = 0;
  v197->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v467) < 0)
    operator delete(__p);
  __p = v198;
  *(_QWORD *)&v467 = v479[0];
  *(_QWORD *)((char *)&v467 + 7) = *(_QWORD *)((char *)v479 + 7);
  HIBYTE(v467) = v199;
  if (SHIBYTE(v478.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v478.__r_.__value_.__l.__data_);
  if (SHIBYTE(v475[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v475[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v487.__r_.__value_.__l.__data_);
  if (SHIBYTE(v483.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v483.__r_.__value_.__l.__data_);
  v200 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v487, "elementwise");
  std::string::basic_string[abi:ne180100]<0>(v475, "numerator_div_denominator_mul_gamma");
  std::string::basic_string[abi:ne180100]<0>(v476, "beta");
  v268 = 0;
  v269 = 0;
  v270 = 0;
  v483.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
  v483.__r_.__value_.__s.__data_[8] = 0;
  v268 = (__int128 *)operator new(0x30uLL);
  v269 = v268;
  v270 = v268 + 3;
  v269 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v270, (__int128 *)v475, (__int128 *)&v477, (std::string *)v268);
  memset(&v267, 0, sizeof(v267));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v267, v471, v472, 0xAAAAAAAAAAAAAAABLL * (((char *)v472 - (char *)v471) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v271, v200, (uint64_t)&v487, (uint64_t)&__p, (uint64_t)&v480, v268, v269, (__int128 **)&v267);
  v201 = v272;
  if (v272)
  {
    v202 = (unint64_t *)&v272->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  v483.__r_.__value_.__r.__words[0] = (std::string::size_type)&v267;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
  v483.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
  for (n = 0; n != 0x1FFFFFFFFFFFFFFALL; n -= 3)
  {
    if (SHIBYTE(v476[n + 2]) < 0)
      operator delete(v475[n / 3 + 1].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v487.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v471);
  v205 = v284;
  if (v284)
  {
    v206 = (unint64_t *)&v284->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = v286;
  if (v286)
  {
    v209 = (unint64_t *)&v286->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v211 = v294;
  if (v294)
  {
    v212 = (unint64_t *)&v294->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = v298;
  if (v298)
  {
    v215 = (unint64_t *)&v298->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  v217 = v300;
  if (v300)
  {
    v218 = (unint64_t *)&v300->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v220 = v308;
  if (v308)
  {
    v221 = (unint64_t *)&v308->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  if (v455 && !*(_QWORD *)v455)
    operator delete(v455);
  CoreML::Specification::LayerNormalizationLayerParams::~LayerNormalizationLayerParams((CoreML::Specification::LayerNormalizationLayerParams *)&v456);
  if (SHIBYTE(v464.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v464.__r_.__value_.__l.__data_);
  if (SHIBYTE(v465.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v465.__r_.__value_.__l.__data_);
  if (SHIBYTE(v467) < 0)
    operator delete(__p);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v469.__r_.__value_.__l.__data_);
  v456 = __str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v456);
  v456 = (std::string **)&v471;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v456);
  if (SHIBYTE(v474.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v474.__r_.__value_.__l.__data_);
}

void sub_19C9363BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;

  STACK[0x840] = (unint64_t)&STACK[0x298];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x840]);
  if (*(char *)(v1 - 217) < 0)
    operator delete(*(void **)(v1 - 240));
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  v3 = (_QWORD *)STACK[0x620];
  if (STACK[0x620] && !*v3)
    operator delete(v3);
  CoreML::Specification::LayerNormalizationLayerParams::~LayerNormalizationLayerParams((CoreML::Specification::LayerNormalizationLayerParams *)&STACK[0x628]);
  if (SLOBYTE(STACK[0x67F]) < 0)
    operator delete((void *)STACK[0x668]);
  if (SLOBYTE(STACK[0x697]) < 0)
    operator delete((void *)STACK[0x680]);
  if (SLOBYTE(STACK[0x6AF]) < 0)
    operator delete((void *)STACK[0x698]);
  if (SLOBYTE(STACK[0x6C7]) < 0)
    operator delete((void *)STACK[0x6B0]);
  if (SLOBYTE(STACK[0x6DF]) < 0)
    operator delete((void *)STACK[0x6C8]);
  STACK[0x628] = (unint64_t)&STACK[0x6E0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x628]);
  STACK[0x628] = (unint64_t)&STACK[0x6F8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x628]);
  if (SLOBYTE(STACK[0x727]) < 0)
    operator delete((void *)STACK[0x710]);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::reduce_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C937370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::load_constant_params>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C9375E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  _QWORD *v10;
  uint64_t result;

  v10 = operator new(0x60uLL);
  *v10 = &off_1E3D5C0C8;
  v10[1] = 0;
  v10[3] = &off_1E3D5B508;
  *((_OWORD *)v10 + 4) = 0u;
  v10[2] = 0;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  result = Espresso::kern_alloc((Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5));
  v10[6] = result;
  *((_BYTE *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
  return result;
}

void sub_19C93771C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  Espresso::blob_rtti_root *v2;
  uint64_t v3;
  void *v5;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v3);
  Espresso::blob_rtti_root::~blob_rtti_root(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::blob<float,4>::~blob(uint64_t a1, void *a2)
{
  Espresso *v3;

  *(_QWORD *)a1 = &off_1E3D5B508;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(Espresso **)(a1 + 24);
    if (v3)
      Espresso::kern_dealloc(v3, a2);
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 40);
  Espresso::blob_rtti_root::~blob_rtti_root((Espresso::blob_rtti_root *)a1);
}

{
  Espresso *v3;

  *(_QWORD *)a1 = &off_1E3D5B508;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(Espresso **)(a1 + 24);
    if (v3)
      Espresso::kern_dealloc(v3, a2);
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 40);
  Espresso::blob_rtti_root::~blob_rtti_root((Espresso::blob_rtti_root *)a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<Espresso::blob<float,4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C0C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<float,4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C0C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t LayerTranslator::addLoop(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  CoreML::Specification::NeuralNetwork *v12;
  unint64_t v13;
  int v14;
  __int128 v15;
  uint64_t *v16;
  std::string *v17;
  std::string *v18;
  int v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type v28;
  char v29;
  _QWORD *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::string::size_type size;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type v38;
  char v39;
  __int128 v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  std::string::size_type v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  std::string::size_type v60;
  std::string *v61;
  std::string *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  std::string::value_type v73;
  unsigned int v74;
  unsigned int v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  std::string::size_type v83;
  char v84;
  _QWORD *v85;
  std::string::size_type v86;
  std::string *v87;
  std::string *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  uint64_t i;
  _QWORD *v93;
  std::string::size_type v94;
  std::string *v95;
  std::string *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t j;
  _QWORD *v101;
  std::string::size_type v102;
  std::string *v103;
  std::string *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  std::string::size_type v109;
  std::string *v110;
  std::string *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  std::string::value_type v117;
  unsigned int v118;
  char v119;
  _QWORD *v120;
  std::string::size_type v121;
  std::string *v122;
  std::string *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  _QWORD *v127;
  std::string::size_type v128;
  std::string *v129;
  std::string *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  std::string::size_type v135;
  std::string *v136;
  std::string *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v142;
  unint64_t v143;
  std::string::size_type v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  __int128 *v160[3];
  _QWORD v161[3];
  uint64_t v162;
  std::__shared_weak_count *v163;
  __int128 *v164[3];
  _QWORD v165[3];
  uint64_t v166;
  std::__shared_weak_count *v167;
  __int128 *v168[3];
  _QWORD v169[3];
  uint64_t v170;
  std::__shared_weak_count *v171;
  std::string *v172;
  std::string *v173;
  std::string *v174;
  __int128 *v175;
  __int128 *v176;
  char *v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  __int128 *v180[3];
  __int128 *v181;
  __int128 *v182;
  char *v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  std::string *v186;
  std::string *v187;
  std::string *v188;
  __int128 *v189;
  __int128 *v190;
  __int128 *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  std::string *v194;
  std::string *v195;
  std::string *v196;
  __int128 *v197;
  __int128 *v198;
  __int128 *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  std::string v202;
  char v203;
  int v204;
  int v205;
  __int128 *v206;
  __int128 *v207;
  uint64_t v208;
  _QWORD v209[3];
  int v210;
  __int128 v211;
  unsigned __int128 v212;
  std::string *v213;
  std::string *v214;
  std::string *v215;
  __int128 *v216;
  __int128 *v217;
  uint64_t v218;
  std::string __p;
  unsigned __int128 v220;
  std::string *v221;
  std::string *v222;
  std::string *v223;
  __int128 *v224;
  __int128 *v225;
  uint64_t v226;
  std::string v227;
  std::string v228;
  std::string **p_str;
  uint64_t v230;
  std::string *v231;
  uint64_t *v232;
  CoreML::Specification::NeuralNetwork *v233;
  unint64_t v234;
  int v235;
  std::string *__str;
  std::string *v237;
  uint64_t v238;
  uint64_t v239[3];
  std::string v240;
  std::string *v241;
  char v242;
  std::string v243;
  uint64_t v244;
  std::string v245;
  std::string v246;
  std::string v247;
  std::string v248;
  __int128 v249;
  std::string v250;
  uint64_t v251;
  std::string v252;
  uint64_t v253;
  std::string v254;
  uint64_t v255;

  v255 = *MEMORY[0x1E0C80C00];
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v240, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v240.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v5;
  }
  memset(v239, 0, sizeof(v239));
  v237 = 0;
  __str = 0;
  v238 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, v239, (uint64_t *)&__str, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 615)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_LoopLayerParams_default_instance_;
  }
  p_str = (std::string **)&off_1E3D4F538;
  v230 = 0;
  v235 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v230, v8 & 0xFFFFFFFFFFFFFFFELL);
  v231 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
  v9 = v7[2];
  if (*(char *)(v9 + 23) < 0)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = *(unsigned __int8 *)(v9 + 23);
  if ((__int128 *)v9 != &google::protobuf::internal::fixed_address_empty_string && v10)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(&v231, v9);
  if (v7 == &CoreML::Specification::_LoopLayerParams_default_instance_)
  {
    v11 = 0;
    v12 = 0;
    v232 = 0;
  }
  else
  {
    if (v7[3])
    {
      v11 = (uint64_t *)operator new();
      CoreML::Specification::NeuralNetwork::NeuralNetwork((CoreML::Specification::NeuralNetwork *)v11, (const CoreML::Specification::NeuralNetwork *)v7[3]);
    }
    else
    {
      v11 = 0;
    }
    v232 = v11;
    if (v7[4])
    {
      v12 = (CoreML::Specification::NeuralNetwork *)operator new();
      CoreML::Specification::NeuralNetwork::NeuralNetwork(v12, (const CoreML::Specification::NeuralNetwork *)v7[4]);
      v11 = v232;
    }
    else
    {
      v12 = 0;
    }
  }
  v13 = v7[5];
  v233 = v12;
  v234 = v13;
  if (!v11)
    v11 = &CoreML::Specification::_NeuralNetwork_default_instance_;
  v14 = *((_DWORD *)v11 + 6);
  if (SHIBYTE(v231->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v228, v231->__r_.__value_.__l.__data_, v231->__r_.__value_.__l.__size_);
    v13 = v234;
    v12 = v233;
  }
  else
  {
    v15 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
    v228.__r_.__value_.__r.__words[2] = v231->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v15;
  }
  if (v12)
    v16 = (uint64_t *)v12;
  else
    v16 = &CoreML::Specification::_NeuralNetwork_default_instance_;
  v159 = (uint64_t)v16;
  if (v14 <= 0)
  {
    memset(&v227, 0, sizeof(v227));
    v17 = v237;
    v18 = __str;
  }
  else
  {
    v17 = v237;
    v18 = __str;
    memset(&v227, 0, sizeof(v227));
    if (v237 == __str && !v13)
    {
      memset(&__p, 0, sizeof(__p));
      v19 = 1;
      goto LABEL_102;
    }
  }
  if (v17 == v18)
  {
    std::to_string(&v245, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
    v31 = std::string::append(&v245, "_");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v247.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v247.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v240;
    else
      v33 = (std::string *)v240.__r_.__value_.__r.__words[0];
    if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v240.__r_.__value_.__r.__words[2]);
    else
      size = v240.__r_.__value_.__l.__size_;
    v35 = std::string::append(&v247, (const std::string::value_type *)v33, size);
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v202.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v202.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    v37 = std::string::append(&v202, "_max_loop_iters");
    v38 = v37->__r_.__value_.__r.__words[0];
    v254.__r_.__value_.__r.__words[0] = v37->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v254.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7);
    v39 = HIBYTE(v37->__r_.__value_.__r.__words[2]);
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v227.__r_.__value_.__l.__data_);
    v227.__r_.__value_.__r.__words[0] = v38;
    v227.__r_.__value_.__l.__size_ = v254.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&v227.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v254.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&v227.__r_.__value_.__s + 23) = v39;
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v247.__r_.__value_.__l.__data_);
    if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v245.__r_.__value_.__l.__data_);
    v202.__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
    *(_QWORD *)&v40 = 0x100000001;
    *((_QWORD *)&v40 + 1) = 0x100000001;
    *(_OWORD *)&v202.__r_.__value_.__l.__data_ = v40;
    v41 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v247, "load_constant");
    v225 = 0;
    v224 = 0;
    v226 = 0;
    if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v245, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
    else
      v245 = v227;
    v222 = 0;
    v221 = 0;
    v223 = 0;
    v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&v221;
    v254.__r_.__value_.__s.__data_[8] = 0;
    v221 = (std::string *)operator new(0x18uLL);
    v222 = v221;
    v223 = v221 + 1;
    v222 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v223, (__int128 *)&v245, (__int128 *)&v246, v221);
    Espresso::sequential_builder::add<Espresso::load_constant_params>((uint64_t *)&__p, v41, (uint64_t)&v247, (uint64_t)&v227, (uint64_t)&v202, v224, v225, (__int128 **)&v221);
    v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&v221;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
    if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v245.__r_.__value_.__l.__data_);
    v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&v224;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v247.__r_.__value_.__l.__data_);
    *(_OWORD *)&v247.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v142 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v143 = __ldxr(v142);
      while (__stxr(v143 + 1, v142));
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v245, 1, 1, 1, 1);
    v144 = v245.__r_.__value_.__r.__words[0];
    **(float **)(v245.__r_.__value_.__r.__words[0] + 24) = (float)v13;
    v220 = __PAIR128__(v245.__r_.__value_.__l.__size_, v144);
    if (v245.__r_.__value_.__l.__size_)
    {
      v145 = (unint64_t *)(v245.__r_.__value_.__l.__size_ + 8);
      do
        v146 = __ldxr(v145);
      while (__stxr(v146 + 1, v145));
    }
    Espresso::generic_load_constant_kernel::set_constant_blob();
    v147 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
    if (*((_QWORD *)&v220 + 1))
    {
      v148 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    v150 = (std::__shared_weak_count *)v245.__r_.__value_.__l.__size_;
    if (v245.__r_.__value_.__l.__size_)
    {
      v151 = (unint64_t *)(v245.__r_.__value_.__l.__size_ + 8);
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    v153 = (std::__shared_weak_count *)v247.__r_.__value_.__l.__size_;
    if (v247.__r_.__value_.__l.__size_)
    {
      v154 = (unint64_t *)(v247.__r_.__value_.__l.__size_ + 8);
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    v156 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v157 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v158 = __ldaxr(v157);
      while (__stlxr(v158 - 1, v157));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
  }
  else
  {
    std::string::operator=(&v227, v18);
  }
  memset(&__p, 0, sizeof(__p));
  v202.__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
  *(_QWORD *)&v20 = 0x100000001;
  *((_QWORD *)&v20 + 1) = 0x100000001;
  *(_OWORD *)&v202.__r_.__value_.__l.__data_ = v20;
  std::to_string(&v254, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  v21 = std::string::append(&v254, "_");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v245.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v240;
  else
    v23 = (std::string *)v240.__r_.__value_.__r.__words[0];
  if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
  else
    v24 = v240.__r_.__value_.__l.__size_;
  v25 = std::string::append(&v245, (const std::string::value_type *)v23, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v247.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v247.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v247, "_load_iterator");
  v28 = v27->__r_.__value_.__r.__words[0];
  v252.__r_.__value_.__r.__words[0] = v27->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v252.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
  v29 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = v28;
  __p.__r_.__value_.__l.__size_ = v252.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v252.__r_.__value_.__r.__words + 7);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v29;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v254.__r_.__value_.__l.__data_);
  v30 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v247, "load_constant");
  v217 = 0;
  v216 = 0;
  v218 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v245, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v245 = __p;
  v214 = 0;
  v213 = 0;
  v215 = 0;
  v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&v213;
  v254.__r_.__value_.__s.__data_[8] = 0;
  v213 = (std::string *)operator new(0x18uLL);
  v214 = v213;
  v215 = v213 + 1;
  v214 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v215, (__int128 *)&v245, (__int128 *)&v246, v213);
  Espresso::sequential_builder::add<Espresso::load_constant_params>((uint64_t *)&v252, v30, (uint64_t)&v247, (uint64_t)&__p, (uint64_t)&v202, v216, v217, (__int128 **)&v213);
  v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&v213;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  *(_OWORD *)&v247.__r_.__value_.__l.__data_ = *(_OWORD *)&v252.__r_.__value_.__l.__data_;
  if (v252.__r_.__value_.__l.__size_)
  {
    v42 = (unint64_t *)(v252.__r_.__value_.__l.__size_ + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v245, 1, 1, 1, 1);
  v44 = v245.__r_.__value_.__r.__words[0];
  **(_DWORD **)(v245.__r_.__value_.__r.__words[0] + 24) = 0;
  v212 = __PAIR128__(v245.__r_.__value_.__l.__size_, v44);
  if (v245.__r_.__value_.__l.__size_)
  {
    v45 = (unint64_t *)(v245.__r_.__value_.__l.__size_ + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  Espresso::generic_load_constant_kernel::set_constant_blob();
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
  if (*((_QWORD *)&v212 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count *)v245.__r_.__value_.__l.__size_;
  if (v245.__r_.__value_.__l.__size_)
  {
    v51 = (unint64_t *)(v245.__r_.__value_.__l.__size_ + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)v247.__r_.__value_.__l.__size_;
  if (v247.__r_.__value_.__l.__size_)
  {
    v54 = (unint64_t *)(v247.__r_.__value_.__l.__size_ + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = (std::__shared_weak_count *)v252.__r_.__value_.__l.__size_;
  if (v252.__r_.__value_.__l.__size_)
  {
    v57 = (unint64_t *)(v252.__r_.__value_.__l.__size_ + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v19 = 0;
LABEL_102:
  v59 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v252, "cf_loop");
  if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
  else
    v60 = v240.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)&v250, v60 + 11);
  if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = &v250;
  else
    v61 = (std::string *)v250.__r_.__value_.__r.__words[0];
  if (v60)
  {
    if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v62 = &v240;
    else
      v62 = (std::string *)v240.__r_.__value_.__r.__words[0];
    memmove(v61, v62, v60);
  }
  strcpy((char *)v61 + v60, "_loop_start");
  v210 = 0;
  memset(v209, 0, sizeof(v209));
  v208 = 0;
  v207 = 0;
  v206 = 0;
  memset(&v245, 0, sizeof(v245));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v245, 0, 0, 0);
  memset(&v254, 0, sizeof(v254));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v254, v206, v207, 0xAAAAAAAAAAAAAAABLL * (((char *)v207 - (char *)v206) >> 3));
  LODWORD(v202.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v59[14] + 8))(*(_QWORD *)(v59[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  *(_OWORD *)&v243.__r_.__value_.__l.__data_ = v211;
  if (*((_QWORD *)&v211 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  memset(&v202, 0, sizeof(v202));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v202, (__int128 *)v245.__r_.__value_.__l.__data_, (__int128 *)v245.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v245.__r_.__value_.__l.__size_ - v245.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v247, 0, sizeof(v247));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v247, (__int128 *)v254.__r_.__value_.__l.__data_, (__int128 *)v254.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v254.__r_.__value_.__l.__size_ - v254.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v241 = &v247;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v241);
  v241 = &v202;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v241);
  v65 = (std::__shared_weak_count *)v243.__r_.__value_.__l.__size_;
  if (v243.__r_.__value_.__l.__size_)
  {
    v66 = (unint64_t *)(v243.__r_.__value_.__l.__size_ + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (*v59)
    Espresso::sequential_builder::add_shape_from_kernel();
  v202.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v202);
  v202.__r_.__value_.__r.__words[0] = (std::string::size_type)&v245;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v202);
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
  if (*((_QWORD *)&v211 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v202.__r_.__value_.__r.__words[0] = (std::string::size_type)&v206;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v202);
  v202.__r_.__value_.__r.__words[0] = (std::string::size_type)v209;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v202);
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v250.__r_.__value_.__l.__data_);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v252.__r_.__value_.__l.__data_);
  if (*((int *)v11 + 6) < 1)
  {
    v75 = 0;
  }
  else
  {
    v71 = (_QWORD *)*((_QWORD *)this + 1);
    v72 = *((_QWORD *)this + 2);
    v73 = *(_BYTE *)v72;
    v74 = *(_DWORD *)(v72 + 4);
    LODWORD(v72) = *(_DWORD *)(v72 + 12);
    v202.__r_.__value_.__s.__data_[0] = v73;
    *(std::string::size_type *)((char *)v202.__r_.__value_.__r.__words + 4) = v74;
    HIDWORD(v202.__r_.__value_.__r.__words[1]) = v72;
    v75 = EspressoConverter::convertNeuralNetwork((uint64_t)v11, *(void **)this, v71, (uint64_t)&v202);
    *(_DWORD *)(*((_QWORD *)this + 2) + 4) = HIDWORD(v202.__r_.__value_.__r.__words[0]);
  }
  memset(&v254, 0, sizeof(v254));
  if (v19)
  {
    std::string::operator=(&v254, &v228);
  }
  else
  {
    std::to_string(&v245, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
    v76 = std::string::append(&v245, "_");
    v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v247.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v247.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v78 = &v240;
    else
      v78 = (std::string *)v240.__r_.__value_.__r.__words[0];
    if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v79 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
    else
      v79 = v240.__r_.__value_.__l.__size_;
    v80 = std::string::append(&v247, (const std::string::value_type *)v78, v79);
    v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v202.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v202.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    v82 = std::string::append(&v202, "_loop_cond_check");
    v83 = v82->__r_.__value_.__r.__words[0];
    v252.__r_.__value_.__r.__words[0] = v82->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v252.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v82->__r_.__value_.__r.__words[1] + 7);
    v84 = HIBYTE(v82->__r_.__value_.__r.__words[2]);
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v254.__r_.__value_.__l.__data_);
    v254.__r_.__value_.__r.__words[0] = v83;
    v254.__r_.__value_.__l.__size_ = v252.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&v254.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v252.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&v254.__r_.__value_.__s + 23) = v84;
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v247.__r_.__value_.__l.__data_);
    if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v245.__r_.__value_.__l.__data_);
    v202.__r_.__value_.__r.__words[2] = 897988541;
    v203 = 0;
    v205 = 0;
    v204 = 0;
    v202.__r_.__value_.__r.__words[0] = 103;
    v202.__r_.__value_.__l.__size_ = 1065353216;
    v85 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v245, "elementwise");
    if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v86 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
    else
      v86 = v240.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&v252, v86 + 17);
    if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v87 = &v252;
    else
      v87 = (std::string *)v252.__r_.__value_.__r.__words[0];
    if (v86)
    {
      if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v88 = &v240;
      else
        v88 = (std::string *)v240.__r_.__value_.__r.__words[0];
      memmove(v87, v88, v86);
    }
    strcpy((char *)v87 + v86, "_loop_count_check");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v247, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v247 = __p;
    if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v248, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
    else
      v248 = v227;
    v197 = 0;
    v198 = 0;
    v199 = 0;
    v250.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197;
    v250.__r_.__value_.__s.__data_[8] = 0;
    v197 = (__int128 *)operator new(0x30uLL);
    v198 = v197;
    v199 = v197 + 3;
    v198 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v199, (__int128 *)&v247, &v249, (std::string *)v197);
    if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v250, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
    else
      v250 = v254;
    v194 = 0;
    v195 = 0;
    v196 = 0;
    v243.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
    v243.__r_.__value_.__s.__data_[8] = 0;
    v194 = (std::string *)operator new(0x18uLL);
    v195 = v194;
    v196 = v194 + 1;
    v195 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v196, (__int128 *)&v250, (__int128 *)&v251, v194);
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v200, v85, (uint64_t)&v245, (uint64_t)&v252, (uint64_t)&v202, v197, v198, (__int128 **)&v194);
    v89 = v201;
    if (v201)
    {
      p_shared_owners = (unint64_t *)&v201->__shared_owners_;
      do
        v91 = __ldaxr(p_shared_owners);
      while (__stlxr(v91 - 1, p_shared_owners));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v243.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v243);
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v250.__r_.__value_.__l.__data_);
    v250.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v248.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v247 + i * 8 + 24));
    }
    if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v252.__r_.__value_.__l.__data_);
    if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v245.__r_.__value_.__l.__data_);
    if (v14 >= 1)
    {
      v247.__r_.__value_.__r.__words[2] = 897988541;
      v248.__r_.__value_.__s.__data_[0] = 0;
      LODWORD(v249) = 0;
      HIDWORD(v248.__r_.__value_.__r.__words[2]) = 0;
      v247.__r_.__value_.__l.__size_ = 1065353216;
      v247.__r_.__value_.__r.__words[0] = 110;
      v93 = *(_QWORD **)this;
      std::string::basic_string[abi:ne180100]<0>(&v252, "elementwise");
      if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v94 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
      else
        v94 = v240.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v250, v94 + 21);
      if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v95 = &v250;
      else
        v95 = (std::string *)v250.__r_.__value_.__r.__words[0];
      if (v94)
      {
        if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v96 = &v240;
        else
          v96 = (std::string *)v240.__r_.__value_.__r.__words[0];
        memmove(v95, v96, v94);
      }
      strcpy((char *)v95 + v94, "_loop_joint_condition");
      if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v245, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
      else
        v245 = v254;
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v246, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
      else
        v246 = v228;
      v189 = 0;
      v190 = 0;
      v191 = 0;
      v243.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
      v243.__r_.__value_.__s.__data_[8] = 0;
      v189 = (__int128 *)operator new(0x30uLL);
      v190 = v189;
      v191 = v189 + 3;
      v190 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v191, (__int128 *)&v245, (__int128 *)&v247, (std::string *)v189);
      if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v243, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
      else
        v243 = v254;
      v186 = 0;
      v187 = 0;
      v188 = 0;
      v241 = (std::string *)&v186;
      v242 = 0;
      v186 = (std::string *)operator new(0x18uLL);
      v187 = v186;
      v188 = v186 + 1;
      v187 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v188, (__int128 *)&v243, (__int128 *)&v244, v186);
      Espresso::sequential_builder::add<Espresso::elementwise_params>(&v192, v93, (uint64_t)&v252, (uint64_t)&v250, (uint64_t)&v247, v189, v190, (__int128 **)&v186);
      v97 = v193;
      if (v193)
      {
        v98 = (unint64_t *)&v193->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v241 = (std::string *)&v186;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v241);
      if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v243.__r_.__value_.__l.__data_);
      v243.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v243);
      for (j = 0; j != -6; j -= 3)
      {
        if (SHIBYTE(v246.__r_.__value_.__r.__words[j + 2]) < 0)
          operator delete(*(void **)((char *)&v245 + j * 8 + 24));
      }
      if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v250.__r_.__value_.__l.__data_);
      if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v252.__r_.__value_.__l.__data_);
    }
  }
  v101 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v202, "cf_if");
  if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
  else
    v102 = v240.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)&v247, v102 + 3);
  if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v103 = &v247;
  else
    v103 = (std::string *)v247.__r_.__value_.__r.__words[0];
  if (v102)
  {
    if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v104 = &v240;
    else
      v104 = (std::string *)v240.__r_.__value_.__r.__words[0];
    memmove(v103, v104, v102);
  }
  *(_DWORD *)((char *)&v103->__r_.__value_.__l.__data_ + v102) = 6711647;
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v245, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
  else
    v245 = v254;
  v181 = 0;
  v182 = 0;
  v183 = 0;
  v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v181;
  v252.__r_.__value_.__s.__data_[8] = 0;
  v181 = (__int128 *)operator new(0x18uLL);
  v182 = v181;
  v183 = (char *)v181 + 24;
  v182 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v183, (__int128 *)&v245, (__int128 *)&v246, (std::string *)v181);
  memset(v180, 0, sizeof(v180));
  Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v184, v101, (uint64_t)&v202, (uint64_t)&v247, (uint64_t)&v250, v181, v182, v180);
  v105 = v185;
  if (v185)
  {
    v106 = (unint64_t *)&v185->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v252.__r_.__value_.__r.__words[0] = (std::string::size_type)v180;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
  v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v181;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v202.__r_.__value_.__l.__data_);
    if ((v19 & 1) != 0)
      goto LABEL_279;
  }
  else if ((v19 & 1) != 0)
  {
    goto LABEL_279;
  }
  v202.__r_.__value_.__r.__words[2] = 897988541;
  v203 = 0;
  v205 = 0;
  v204 = 0;
  v202.__r_.__value_.__r.__words[0] = 2;
  v202.__r_.__value_.__l.__size_ = 1065353216;
  v108 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v247, "elementwise");
  if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v109 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
  else
    v109 = v240.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)&v245, v109 + 19);
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v110 = &v245;
  else
    v110 = (std::string *)v245.__r_.__value_.__r.__words[0];
  if (v109)
  {
    if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v111 = &v240;
    else
      v111 = (std::string *)v240.__r_.__value_.__r.__words[0];
    memmove(v110, v111, v109);
  }
  strcpy((char *)v110 + v109, "_increment_iterator");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v252, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v252 = __p;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v250.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175;
  v250.__r_.__value_.__s.__data_[8] = 0;
  v175 = (__int128 *)operator new(0x18uLL);
  v176 = v175;
  v177 = (char *)v175 + 24;
  v176 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v177, (__int128 *)&v252, (__int128 *)&v253, (std::string *)v175);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v250, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v250 = __p;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v243.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
  v243.__r_.__value_.__s.__data_[8] = 0;
  v172 = (std::string *)operator new(0x18uLL);
  v173 = v172;
  v174 = v172 + 1;
  v173 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v174, (__int128 *)&v250, (__int128 *)&v251, v172);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v178, v108, (uint64_t)&v247, (uint64_t)&v245, (uint64_t)&v202, v175, v176, (__int128 **)&v172);
  v112 = v179;
  if (v179)
  {
    v113 = (unint64_t *)&v179->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v243.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v243);
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v250.__r_.__value_.__l.__data_);
  v250.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v252.__r_.__value_.__l.__data_);
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v245.__r_.__value_.__l.__data_);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
LABEL_279:
  v115 = (_QWORD *)*((_QWORD *)this + 1);
  v116 = *((_QWORD *)this + 2);
  v117 = *(_BYTE *)v116;
  v118 = *(_DWORD *)(v116 + 4);
  LODWORD(v116) = *(_DWORD *)(v116 + 12) + 1;
  v245.__r_.__value_.__s.__data_[0] = v117;
  *(std::string::size_type *)((char *)v245.__r_.__value_.__r.__words + 4) = v118;
  HIDWORD(v245.__r_.__value_.__r.__words[1]) = v116;
  v119 = EspressoConverter::convertNeuralNetwork(v159, *(void **)this, v115, (uint64_t)&v245);
  *(_DWORD *)(*((_QWORD *)this + 2) + 4) = HIDWORD(v245.__r_.__value_.__r.__words[0]);
  LODWORD(v250.__r_.__value_.__l.__data_) = 1;
  v120 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v202, "cf_jump");
  if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v121 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
  else
    v121 = v240.__r_.__value_.__l.__size_;
  v122 = &v247;
  std::string::basic_string[abi:ne180100]((uint64_t)&v247, v121 + 5);
  if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v122 = (std::string *)v247.__r_.__value_.__r.__words[0];
  if (v121)
  {
    if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v123 = &v240;
    else
      v123 = (std::string *)v240.__r_.__value_.__r.__words[0];
    memmove(v122, v123, v121);
  }
  strcpy((char *)v122 + v121, "_jump");
  memset(v169, 0, sizeof(v169));
  memset(v168, 0, sizeof(v168));
  Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(&v170, v120, (uint64_t)&v202, (uint64_t)&v247, (uint64_t)&v250, 0, 0, v168);
  v124 = v171;
  if (v171)
  {
    v125 = (unint64_t *)&v171->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v252.__r_.__value_.__r.__words[0] = (std::string::size_type)v168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
  v252.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v202.__r_.__value_.__l.__data_);
  v127 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v202, "cf_end");
  if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v128 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
  else
    v128 = v240.__r_.__value_.__l.__size_;
  v129 = &v247;
  std::string::basic_string[abi:ne180100]((uint64_t)&v247, v128 + 12);
  if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v129 = (std::string *)v247.__r_.__value_.__r.__words[0];
  if (v128)
  {
    if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v130 = &v240;
    else
      v130 = (std::string *)v240.__r_.__value_.__r.__words[0];
    memmove(v129, v130, v128);
  }
  strcpy((char *)v129 + v128, "_end_loop_if");
  memset(v165, 0, sizeof(v165));
  memset(v164, 0, sizeof(v164));
  Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v166, v127, (uint64_t)&v202, (uint64_t)&v247, (uint64_t)&v243, 0, 0, v164);
  v131 = v167;
  if (v167)
  {
    v132 = (unint64_t *)&v167->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v252.__r_.__value_.__r.__words[0] = (std::string::size_type)v164;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
  v252.__r_.__value_.__r.__words[0] = (std::string::size_type)v165;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v202.__r_.__value_.__l.__data_);
  v134 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v202, "cf_end");
  if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v135 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
  else
    v135 = v240.__r_.__value_.__l.__size_;
  v136 = &v247;
  std::string::basic_string[abi:ne180100]((uint64_t)&v247, v135 + 9);
  if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v136 = (std::string *)v247.__r_.__value_.__r.__words[0];
  if (v135)
  {
    if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v137 = &v240;
    else
      v137 = (std::string *)v240.__r_.__value_.__r.__words[0];
    memmove(v136, v137, v135);
  }
  strcpy((char *)v136 + v135, "_end_loop");
  memset(v161, 0, sizeof(v161));
  memset(v160, 0, sizeof(v160));
  Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v162, v134, (uint64_t)&v202, (uint64_t)&v247, (uint64_t)&v243, 0, 0, v160);
  v138 = v163;
  if (v163)
  {
    v139 = (unint64_t *)&v163->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v252.__r_.__value_.__r.__words[0] = (std::string::size_type)v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
  v252.__r_.__value_.__r.__words[0] = (std::string::size_type)v161;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v247.__r_.__value_.__l.__data_);
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v202.__r_.__value_.__l.__data_);
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v254.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v227.__r_.__value_.__l.__data_);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v228.__r_.__value_.__l.__data_);
  CoreML::Specification::LoopLayerParams::~LoopLayerParams((CoreML::Specification::LoopLayerParams *)&p_str);
  p_str = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  p_str = (std::string **)v239;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (v119)
    return 1;
  else
    return v75;
}

void sub_19C9393F8(_Unwind_Exception *a1)
{
  STACK[0x3D0] = (unint64_t)&STACK[0x2D0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3D0]);
  if (SLOBYTE(STACK[0x417]) < 0)
    operator delete((void *)STACK[0x400]);
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  CoreML::Specification::LoopLayerParams::~LoopLayerParams((CoreML::Specification::LoopLayerParams *)&STACK[0x318]);
  STACK[0x318] = (unint64_t)&STACK[0x350];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x318]);
  STACK[0x318] = (unint64_t)&STACK[0x368];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x318]);
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::cf_if_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C939C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C939F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::cf_end_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C93A17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addConstantPad(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  unint64_t inited;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  _BYTE *v23;
  int *v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  int v31;
  uint64_t *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _DWORD *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  LayerTranslator *v50;
  std::string v51;
  std::string v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::string v55;
  std::string v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::string v59;
  std::string v60;
  void *__p[2];
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  _DWORD v65[20];
  _BYTE v66[20];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[21];
  __int128 *v82;
  __int128 *v83;
  uint64_t v84;
  __int128 *v85;
  __int128 *v86;
  uint64_t v87;
  std::string v88;
  void **v89[3];

  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v88.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v5;
  }
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v85, (uint64_t *)&v82, *((_QWORD *)this + 1));
  memset(v81, 0, sizeof(v81));
  v80 = 0u;
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  *(_OWORD *)&v66[4] = 0u;
  memset(v65, 0, 76);
  v66[0] = 1;
  if (*((_DWORD *)a2 + 35) == 1155)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    *(_DWORD *)&v66[4] = *((_DWORD *)v7 + 9);
LABEL_8:
    v81[20] = *((_BYTE *)v7 + 40);
    HIWORD(v65[0]) = 0;
    goto LABEL_9;
  }
  inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
  v8 = *((_DWORD *)a2 + 35);
  *(_DWORD *)&v66[4] = dword_1ED0059A4;
  if (v8 == 1155)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    goto LABEL_8;
  }
  inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
  v31 = *((_DWORD *)a2 + 35);
  v81[20] = byte_1ED0059A8;
  HIWORD(v65[0]) = 0;
  if (v31 == 1155)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v7 = &CoreML::Specification::_ConstantPaddingLayerParams_default_instance_;
  }
LABEL_9:
  v65[1] = *((_DWORD *)v7 + 9);
  if ((char *)v83 - (char *)v82 == 24)
  {
    if (*((_DWORD *)a2 + 35) == 1155)
    {
      v9 = (uint64_t *)*((_QWORD *)a2 + 16);
    }
    else
    {
      inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v9 = &CoreML::Specification::_ConstantPaddingLayerParams_default_instance_;
    }
    v50 = this;
    v15 = *((_DWORD *)v9 + 4);
    if (v15 < 1)
    {
      v16 = 0;
      v25 = 0;
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      if (v15 >= 64)
        v20 = 64;
      else
        v20 = v15;
      do
      {
        if (*((_DWORD *)a2 + 35) == 1155)
        {
          v21 = (uint64_t *)*((_QWORD *)a2 + 16);
        }
        else
        {
          inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v21 = &CoreML::Specification::_ConstantPaddingLayerParams_default_instance_;
        }
        v22 = *(_DWORD *)(v21[3] + 8 * v19 + 8);
        v23 = &v66[4 * v19];
        *((_DWORD *)v23 + 2) = v22;
        v24 = (int *)(v23 + 8);
        if ((unint64_t)v17 >= v18)
        {
          v26 = v17 - v16;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v18 - (_QWORD)v16) >> 1 > v27)
            v27 = (uint64_t)(v18 - (_QWORD)v16) >> 1;
          if (v18 - (unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
            inited = 0x3FFFFFFFFFFFFFFFLL;
          else
            inited = v27;
          if (inited)
          {
            inited = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(inited);
            v22 = *v24;
          }
          else
          {
            v28 = 0;
          }
          v29 = (_DWORD *)(inited + 4 * v26);
          *v29 = v22;
          v25 = v29 + 1;
          while (v17 != v16)
          {
            v30 = *--v17;
            *--v29 = v30;
          }
          v18 = inited + 4 * v28;
          if (v16)
            operator delete(v16);
          v16 = v29;
        }
        else
        {
          *v17 = v22;
          v25 = v17 + 1;
        }
        ++v19;
        v17 = v25;
      }
      while (v19 != v20);
    }
    if (*((_DWORD *)a2 + 35) == 1155)
    {
      v32 = (uint64_t *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v32 = &CoreML::Specification::_ConstantPaddingLayerParams_default_instance_;
    }
    if (*((_BYTE *)v32 + 40))
    {
LABEL_53:
      this = v50;
      v33 = *(_QWORD **)v50;
      std::string::basic_string[abi:ne180100]<0>(__p, "tensor_zero_pad");
      memset(&v56, 0, sizeof(v56));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v56, v82, v83, 0xAAAAAAAAAAAAAAABLL * (((char *)v83 - (char *)v82) >> 3));
      memset(&v55, 0, sizeof(v55));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v55, v85, v86, 0xAAAAAAAAAAAAAAABLL * (((char *)v86 - (char *)v85) >> 3));
      Espresso::sequential_builder::add<Espresso::tensor_zero_pad_params_t>(&v57, v33, (uint64_t)__p, (uint64_t)&v88, (uint64_t)v66, (__int128 *)v56.__r_.__value_.__l.__data_, (__int128 *)v56.__r_.__value_.__l.__size_, (__int128 **)&v55);
      v34 = v58;
      if (v58)
      {
        p_shared_owners = (unint64_t *)&v58->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v89[0] = (void **)&v55;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v89);
      v89[0] = (void **)&v56;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v89);
      if (v62 < 0)
        operator delete(__p[0]);
      if (!v16)
        goto LABEL_82;
      goto LABEL_80;
    }
    v37 = v25 - v16;
    v38 = v37 - 4;
    if (v37 == 4)
    {
      v42 = v16[2];
      v43 = v16[3];
    }
    else
    {
      if (*v16)
        goto LABEL_53;
      v39 = 0;
      while (v37 - 5 != v39)
      {
        if (v16[++v39])
        {
          if (v39 < v38)
            goto LABEL_53;
          break;
        }
      }
      v41 = &v16[v37];
      v42 = *(v41 - 2);
      v43 = *(v41 - 1);
      if ((unint64_t)((char *)v25 - (char *)v16) < 9)
      {
        LOWORD(v44) = 0;
        LOWORD(v45) = 0;
        this = v50;
        goto LABEL_73;
      }
    }
    this = v50;
    v44 = v16[v38];
    v45 = v16[v37 - 3];
LABEL_73:
    LOWORD(v65[2]) = v42;
    HIWORD(v65[2]) = v43;
    LOWORD(v65[3]) = v44;
    HIWORD(v65[3]) = v45;
    v46 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(__p, "general_padding");
    memset(&v60, 0, sizeof(v60));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v60, v82, v83, 0xAAAAAAAAAAAAAAABLL * (((char *)v83 - (char *)v82) >> 3));
    memset(&v59, 0, sizeof(v59));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v59, v85, v86, 0xAAAAAAAAAAAAAAABLL * (((char *)v86 - (char *)v85) >> 3));
    Espresso::sequential_builder::add<Espresso::general_padding_params>(&v63, v46, (uint64_t)__p, (uint64_t)&v88, (uint64_t)v65, (__int128 *)v60.__r_.__value_.__l.__data_, (__int128 *)v60.__r_.__value_.__l.__size_, (__int128 **)&v59);
    v47 = v64;
    if (v64)
    {
      v48 = (unint64_t *)&v64->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v89[0] = (void **)&v59;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v89);
    v89[0] = (void **)&v60;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v89);
    if (v62 < 0)
      operator delete(__p[0]);
LABEL_80:
    v14 = v16;
    goto LABEL_81;
  }
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "tensor_zero_pad");
  memset(&v52, 0, sizeof(v52));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v52, v82, v83, 0xAAAAAAAAAAAAAAABLL * (((char *)v83 - (char *)v82) >> 3));
  memset(&v51, 0, sizeof(v51));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v51, v85, v86, 0xAAAAAAAAAAAAAAABLL * (((char *)v86 - (char *)v85) >> 3));
  Espresso::sequential_builder::add<Espresso::tensor_zero_pad_params_t>(&v53, v10, (uint64_t)__p, (uint64_t)&v88, (uint64_t)v66, (__int128 *)v52.__r_.__value_.__l.__data_, (__int128 *)v52.__r_.__value_.__l.__size_, (__int128 **)&v51);
  v11 = v54;
  if (v54)
  {
    v12 = (unint64_t *)&v54->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v89[0] = (void **)&v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v89);
  v89[0] = (void **)&v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v89);
  if (v62 < 0)
  {
    v14 = __p[0];
LABEL_81:
    operator delete(v14);
  }
LABEL_82:
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v85);
  *(_QWORD *)v66 = &v82;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
  *(_QWORD *)v66 = &v85;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
}

void sub_19C93A88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t v50;
  void *v51;
  uint64_t v52;

  *(_QWORD *)(v52 - 104) = v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 104));
  *(_QWORD *)(v52 - 104) = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 104));
  if (a37 < 0)
    operator delete(__p);
  operator delete(v51);
  a50 = v52 - 176;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  a50 = v52 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (*(char *)(v52 - 105) < 0)
    operator delete(*(void **)(v52 - 128));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::general_padding_params>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C93ABBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::tensor_zero_pad_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C93AE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addCeil(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[2] = (void **)897988541;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v16[0] = (void **)118;
  v16[1] = (void **)1065353216;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C93B088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addConcatND(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  unint64_t *inited;
  int v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string v19;
  std::string v20;
  void *__p;
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  int v25;
  char v26;
  char v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::string *v41;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v34.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v5;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v31, (uint64_t *)&v28, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 980)
  {
    v7 = a2[16];
    v25 = v7[2];
    v26 = 1;
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v9 = *((_DWORD *)a2 + 35);
    v25 = qword_1ED0043B0;
    v26 = 1;
    if (v9 == 980)
    {
      v7 = a2[16];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v7 = &CoreML::Specification::_ConcatNDLayerParams_default_instance_;
    }
  }
  v27 = *((_BYTE *)v7 + 24);
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "general_concat");
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, v28, v29, 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v31, v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3));
  memset(&v36, 0, sizeof(v36));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v36, (__int128 *)v20.__r_.__value_.__l.__data_, (__int128 *)v20.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20.__r_.__value_.__l.__size_ - v20.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v35, 0, sizeof(v35));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v35, (__int128 *)v19.__r_.__value_.__l.__data_, (__int128 *)v19.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v38.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v10[14] + 8))(*(_QWORD *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v39 = v23;
  v40 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  memset(&v38, 0, sizeof(v38));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, (__int128 *)v36.__r_.__value_.__l.__data_, (__int128 *)v36.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36.__r_.__value_.__l.__size_ - v36.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v37, 0, sizeof(v37));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v37, (__int128 *)v35.__r_.__value_.__l.__data_, (__int128 *)v35.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35.__r_.__value_.__l.__size_ - v35.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v41 = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  v41 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  v13 = v40;
  if (v40)
  {
    v14 = (unint64_t *)&v40->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*v10)
    Espresso::sequential_builder::add_shape_from_kernel();
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  if (v22 < 0)
    operator delete(__p);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v31);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
}

void sub_19C93B4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  *(_QWORD *)(v36 - 56) = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = v36 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  if (a20 < 0)
    operator delete(__p);
  __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(a1);
}

void LayerTranslator::addFloorDivBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[2] = (void **)897988541;
  v18 = 0;
  v19 = 0;
  v16[0] = (void **)1021;
  v16[1] = (void **)1065353216;
  v17 = 1;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C93B780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addFlatten(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::FlattenLayerParams *v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t v10;
  void *v11;
  int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::string v22;
  std::string v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  void (**v27)(CoreML::Specification::FlattenLayerParams *__hidden);
  uint64_t v28;
  int v29;
  __int128 *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  std::string v36;
  _OWORD v37[2];
  uint64_t v38;
  void *__p;
  void *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v36.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v5;
  }
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v33, (uint64_t *)&v30, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 301)
  {
    v7 = (const CoreML::Specification::FlattenLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::FlattenLayerParams *)&CoreML::Specification::_FlattenLayerParams_default_instance_;
  }
  CoreML::Specification::FlattenLayerParams::FlattenLayerParams((CoreML::Specification::FlattenLayerParams *)&v27, v7);
  v26 = 0;
  if (v29 == 1)
    LODWORD(v26) = 1;
  v8 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v48, "flatten");
  memset(&v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  Espresso::sequential_builder::add<Espresso::flatten_params>(&v24, v8, (uint64_t)&v48, (uint64_t)&v36, (uint64_t)&v26, (__int128 *)v23.__r_.__value_.__l.__data_, (__int128 *)v23.__r_.__value_.__l.__size_, (__int128 **)&v22);
  *(_QWORD *)&v42 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  *(_QWORD *)&v42 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (SBYTE7(v49) < 0)
    operator delete((void *)v48);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v33);
  }
  else
  {
    v9 = (uint64_t **)*((_QWORD *)this + 1);
    v10 = std::map<std::string,std::string>::at((uint64_t)v9, v30);
    v48 = *(_OWORD *)v10;
    v49 = *(_OWORD *)(v10 + 16);
    v50 = *(_QWORD *)(v10 + 32);
    v51 = 0;
    v52 = 0;
    v53 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v51, *(const void **)(v10 + 40), *(_QWORD *)(v10 + 48), (uint64_t)(*(_QWORD *)(v10 + 48) - *(_QWORD *)(v10 + 40)) >> 2);
    v42 = v48;
    v43 = v49;
    v11 = v51;
    v44 = v50;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v45, v51, v52, (v52 - (uint64_t)v51) >> 2);
    if ((_DWORD)v48 == -1 || DWORD1(v48) == -1 || DWORD2(v48) == -1)
      v14 = -1;
    else
      v14 = DWORD1(v48) * DWORD2(v48) * v48;
    DWORD2(v42) = v14;
    *(_QWORD *)&v42 = 0x100000001;
    v37[0] = v42;
    v37[1] = v43;
    v15 = v45;
    v38 = v44;
    __p = 0;
    v40 = 0;
    v41 = 0;
    v16 = v46;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v45, v46, (v46 - (uint64_t)v45) >> 2);
    EspressoConverter::validateShape((int *)v37, *((_QWORD *)a2 + 14), (uint64_t)v33);
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    v54 = v33;
    v17 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, v33, &v54);
    v18 = v43;
    *(_OWORD *)(v17 + 56) = v42;
    *(_OWORD *)(v17 + 72) = v18;
    *((_QWORD *)v17 + 11) = v44;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v17 + 96, v15, v16, (v16 - (uint64_t)v15) >> 2);
    if (v15)
      operator delete(v15);
    if (v11)
      operator delete(v11);
  }
  v19 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v27 = &off_1E3D514B0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v28);
  *(_QWORD *)&v48 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  *(_QWORD *)&v48 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_19C93BB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void (**a18)(CoreML::Specification::FlattenLayerParams *__hidden this), uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p)
{
  void *v39;
  void *v40;
  uint64_t v41;

  if (__p)
  {
    operator delete(__p);
    if (!v40)
    {
LABEL_3:
      if (!v39)
      {
LABEL_8:
        std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
        a18 = &off_1E3D514B0;
        google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a19);
        *(_QWORD *)(v41 - 208) = &a21;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 208));
        *(_QWORD *)(v41 - 208) = &a24;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 208));
        if (a32 < 0)
          operator delete(a27);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v39);
      goto LABEL_8;
    }
  }
  else if (!v40)
  {
    goto LABEL_3;
  }
  operator delete(v40);
  if (!v39)
    goto LABEL_8;
  goto LABEL_7;
}

void Espresso::sequential_builder::add<Espresso::flatten_params>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C93BE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addDivideBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[2] = (void **)897988541;
  v18 = 0;
  v19 = 0;
  v16[0] = (void **)102;
  v16[1] = (void **)1065353216;
  v17 = 1;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C93C0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addSplitND(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  unint64_t *inited;
  uint64_t *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  std::string v24;
  std::string v25;
  void *__p;
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 **v30;
  _OWORD v31[32];
  __int128 *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 *v35;
  __int128 *v36;
  uint64_t v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::string *v45;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v38, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v38.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  }
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v35, (uint64_t *)&v32, *((_QWORD *)this + 1));
  memset(v31, 0, sizeof(v31));
  if (*((_DWORD *)a2 + 35) == 975)
  {
    v7 = a2[16];
    LODWORD(v30) = v7[5];
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v8 = *((_DWORD *)a2 + 35);
    LODWORD(v30) = qword_1ED004328;
    if (v8 != 975)
    {
      inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v23 = *((_DWORD *)a2 + 35);
      HIDWORD(v30) = qword_1ED004330;
      if (v23 == 975)
      {
        v7 = a2[16];
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v7 = &CoreML::Specification::_SplitNDLayerParams_default_instance_;
      }
      goto LABEL_9;
    }
    v7 = a2[16];
  }
  HIDWORD(v30) = v7[6];
LABEL_9:
  v9 = *((_DWORD *)v7 + 4);
  if (v9 >= 128)
    v10 = 128;
  else
    v10 = v9;
  if (v9 >= 1)
  {
    v11 = 0;
    if (v10 <= 1)
      v12 = 1;
    else
      v12 = v10;
    do
    {
      if (*((_DWORD *)a2 + 35) == 975)
      {
        v13 = a2[16];
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v13 = &CoreML::Specification::_SplitNDLayerParams_default_instance_;
      }
      *((_DWORD *)v31 + v11) = *(_QWORD *)(v13[3] + 8 * v11 + 8);
      HIDWORD(v30) = v10;
      ++v11;
    }
    while (v12 != v11);
  }
  v14 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "split_nd");
  memset(&v25, 0, sizeof(v25));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v25, v32, v33, 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v32) >> 3));
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, v35, v36, 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v35) >> 3));
  memset(&v40, 0, sizeof(v40));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, (__int128 *)v25.__r_.__value_.__l.__data_, (__int128 *)v25.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25.__r_.__value_.__l.__size_ - v25.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v39, 0, sizeof(v39));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v39, (__int128 *)v24.__r_.__value_.__l.__data_, (__int128 *)v24.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24.__r_.__value_.__l.__size_ - v24.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v42.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v14[14] + 8))(*(_QWORD *)(v14[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v43 = v28;
  v44 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  memset(&v42, 0, sizeof(v42));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v42, (__int128 *)v40.__r_.__value_.__l.__data_, (__int128 *)v40.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40.__r_.__value_.__l.__size_ - v40.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v41, 0, sizeof(v41));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v41, (__int128 *)v39.__r_.__value_.__l.__data_, (__int128 *)v39.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39.__r_.__value_.__l.__size_ - v39.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v45 = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  v45 = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  v17 = v44;
  if (v44)
  {
    v18 = (unint64_t *)&v44->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (*v14)
    Espresso::sequential_builder::add_shape_from_kernel();
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  v20 = v29;
  if (v29)
  {
    v21 = (unint64_t *)&v29->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (v27 < 0)
    operator delete(__p);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v35);
  v30 = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  v30 = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_19C93C5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 256;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 232;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 185) < 0)
    operator delete(*(void **)(v23 - 208));
  _Unwind_Resume(a1);
}

void LayerTranslator::addDotProduct(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t **v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int *v17;
  int *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  std::runtime_error *v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  std::runtime_error *exception;
  std::string v43;
  std::string v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  _DWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  void (**v52)(CoreML::Specification::DotProductLayerParams *__hidden);
  uint64_t v53;
  char v54;
  int v55;
  __int128 *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 *v59;
  __int128 *v60;
  uint64_t v61;
  std::string v62;
  std::string v63;
  void *__p[2];
  __int128 v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  void *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  unint64_t v78;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v62.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v5;
  }
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v59, (uint64_t *)&v56, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 270)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_DotProductLayerParams_default_instance_;
  }
  v52 = &off_1E3D53000;
  v53 = 0;
  v55 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v53, v8 & 0xFFFFFFFFFFFFFFFELL);
  v54 = *((_BYTE *)v7 + 16);
  v48 = 1065353216;
  v49 = 897988541;
  v50 = 0;
  v51 = 0;
  if (v54)
    v9 = 21;
  else
    v9 = 28;
  v47[0] = v9;
  v47[1] = 0;
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v44, 0, sizeof(v44));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v44, v56, v57, 0xAAAAAAAAAAAAAAABLL * (((char *)v57 - (char *)v56) >> 3));
  memset(&v43, 0, sizeof(v43));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v43, v59, v60, 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - (char *)v59) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v45, v10, (uint64_t)__p, (uint64_t)&v62, (uint64_t)v47, (__int128 *)v44.__r_.__value_.__l.__data_, (__int128 *)v44.__r_.__value_.__l.__size_, (__int128 **)&v43);
  *(_QWORD *)&v70 = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  *(_QWORD *)&v70 = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  if (SBYTE7(v65) < 0)
    operator delete(__p[0]);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v59);
  }
  else
  {
    v11 = (uint64_t **)*((_QWORD *)this + 1);
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v12 = v56;
    v13 = v57;
    if (v56 == v57)
    {
      v18 = 0;
      v17 = 0;
    }
    else
    {
      do
      {
        v14 = std::map<std::string,std::string>::at((uint64_t)v11, v12);
        v70 = *(_OWORD *)v14;
        v71 = *(_OWORD *)(v14 + 16);
        v72 = *(_QWORD *)(v14 + 32);
        v74 = 0;
        v75 = 0;
        v73 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v73, *(const void **)(v14 + 40), *(_QWORD *)(v14 + 48), (uint64_t)(*(_QWORD *)(v14 + 48) - *(_QWORD *)(v14 + 40)) >> 2);
        v15 = v77;
        if ((unint64_t)v77 >= v78)
        {
          v16 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(&v76, &v70);
        }
        else
        {
          *(_OWORD *)v77 = v70;
          *((_OWORD *)v15 + 1) = v71;
          *((_QWORD *)v15 + 4) = v72;
          *((_QWORD *)v15 + 6) = 0;
          *((_QWORD *)v15 + 7) = 0;
          *((_QWORD *)v15 + 5) = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)v15 + 5, v73, (uint64_t)v74, (v74 - (_BYTE *)v73) >> 2);
          v16 = (uint64_t)(v15 + 16);
        }
        v77 = (int *)v16;
        if (DWORD1(v70) != -1 && DWORD1(v70) != 1)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"Dot product layer: '", 20);
          v36 = *((_QWORD *)a2 + 14);
          v37 = *(char *)(v36 + 23);
          if (v37 >= 0)
            v38 = *((_QWORD *)a2 + 14);
          else
            v38 = *(_QWORD *)v36;
          if (v37 >= 0)
            v39 = *(unsigned __int8 *)(v36 + 23);
          else
            v39 = *(_QWORD *)(v36 + 8);
          v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v38, v39);
          v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"': height dimension of the input blob must be 1.", 48);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v41);
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::runtime_error::runtime_error(exception, &v63);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if ((_DWORD)v70 != -1 && (_DWORD)v70 != 1)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"Dot product layer: '", 20);
          v28 = *((_QWORD *)a2 + 14);
          v29 = *(char *)(v28 + 23);
          if (v29 >= 0)
            v30 = *((_QWORD *)a2 + 14);
          else
            v30 = *(_QWORD *)v28;
          if (v29 >= 0)
            v31 = *(unsigned __int8 *)(v28 + 23);
          else
            v31 = *(_QWORD *)(v28 + 8);
          v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v30, v31);
          v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"': width dimension of the input blob must be 1.", 47);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v33);
          v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::runtime_error::runtime_error(v34, &v63);
          __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (v73)
          operator delete(v73);
        v12 = (__int128 *)((char *)v12 + 24);
      }
      while (v12 != v13);
      v17 = (int *)v76;
      v18 = v77;
    }
    EspressoConverter::validateEqualInputShapes((uint64_t)a2, v17, v18);
    *(_OWORD *)__p = *(_OWORD *)v76;
    v65 = *(_OWORD *)(v76 + 16);
    v66 = *(_QWORD *)(v76 + 32);
    v67 = 0;
    v68 = 0;
    v69 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v67, *(const void **)(v76 + 40), *(_QWORD *)(v76 + 48), (uint64_t)(*(_QWORD *)(v76 + 48) - *(_QWORD *)(v76 + 40)) >> 2);
    LODWORD(__p[1]) = 1;
    __p[0] = (void *)0x100000001;
    v70 = *(_OWORD *)__p;
    v71 = v65;
    v19 = v67;
    v72 = v66;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v20 = v68;
    v21 = (v68 - (uint64_t)v67) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v73, v67, v68, v21);
    EspressoConverter::validateShape((int *)&v70, *((_QWORD *)a2 + 14), (uint64_t)v59);
    if (v73)
    {
      v74 = v73;
      operator delete(v73);
    }
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
    v22 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, v59, (__int128 **)&v63);
    v23 = v65;
    *(_OWORD *)(v22 + 56) = *(_OWORD *)__p;
    *(_OWORD *)(v22 + 72) = v23;
    *((_QWORD *)v22 + 11) = v66;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v22 + 96, v19, v20, v21);
    if (v19)
      operator delete(v19);
    __p[0] = &v76;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  v24 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v52 = &off_1E3D53000;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v53);
  __p[0] = &v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
}

void sub_19C93CC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t *v50;
  void *v51;
  int v52;
  uint64_t v53;
  void *v55;

  if (a44 < 0)
  {
    operator delete(__p);
    if ((v52 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a45);
      v55 = *(void **)(v53 - 136);
      if (v55)
        operator delete(v55);
      a45 = (char *)(v53 - 104);
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v50);
      a45 = &a27;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
      a45 = &a30;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
      if (a38 < 0)
        operator delete(a33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v52)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v51);
  goto LABEL_6;
}

void LayerTranslator::addSubtractBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[2] = (void **)897988541;
  v18 = 0;
  v19 = 0;
  v16[0] = (void **)33;
  v16[1] = (void **)1065353216;
  v17 = 1;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C93CFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addArgsort(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  unint64_t *inited;
  int v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string v19;
  std::string v20;
  void *__p;
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  int v25;
  char v26;
  __int128 *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 *v30;
  __int128 *v31;
  uint64_t v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::string *v40;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v33.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v5;
  }
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v30, (uint64_t *)&v27, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1461)
  {
    v7 = a2[16];
    v25 = v7[2];
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v9 = *((_DWORD *)a2 + 35);
    v25 = qword_1ED003AA0;
    if (v9 == 1461)
    {
      v7 = a2[16];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v7 = &CoreML::Specification::_ArgSortLayerParams_default_instance_;
    }
  }
  v26 = *((_BYTE *)v7 + 24) ^ 1;
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "argsort");
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  memset(&v35, 0, sizeof(v35));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v35, (__int128 *)v20.__r_.__value_.__l.__data_, (__int128 *)v20.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20.__r_.__value_.__l.__size_ - v20.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v34, 0, sizeof(v34));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v34, (__int128 *)v19.__r_.__value_.__l.__data_, (__int128 *)v19.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v37.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v10[14] + 8))(*(_QWORD *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v38 = v23;
  v39 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  memset(&v37, 0, sizeof(v37));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v37, (__int128 *)v35.__r_.__value_.__l.__data_, (__int128 *)v35.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35.__r_.__value_.__l.__size_ - v35.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v36, 0, sizeof(v36));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v36, (__int128 *)v34.__r_.__value_.__l.__data_, (__int128 *)v34.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34.__r_.__value_.__l.__size_ - v34.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v40 = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v40 = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v13 = v39;
  if (v39)
  {
    v14 = (unint64_t *)&v39->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*v10)
    Espresso::sequential_builder::add_shape_from_kernel();
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (v22 < 0)
    operator delete(__p);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v30);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_19C93D3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  *(_QWORD *)(v36 - 56) = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = v36 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(_QWORD *)(v36 - 56) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  if (a20 < 0)
    operator delete(__p);
  __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(a1);
}

void LayerTranslator::addSplit(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  std::runtime_error *v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  std::runtime_error *exception;
  unint64_t v54;
  uint64_t v55;
  uint64_t **v56;
  const CoreML::Specification::NeuralNetworkLayer *v57;
  std::string v58;
  std::string v59;
  void *__p;
  char v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  __int128 *v69;
  __int128 *v70;
  uint64_t v71;
  __int128 *v72;
  __int128 *v73;
  uint64_t v74;
  std::string v75;
  _BYTE v76[32];
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  std::string v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  void **v96[2];

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v75.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v5;
  }
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v72, (uint64_t *)&v69, *((_QWORD *)this + 1));
  v65 = 0;
  v67 = 0;
  v66 = 0;
  v64 = 0x200000002;
  v68 = 0;
  if (*((_DWORD *)a2 + 35) == 330)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_SplitLayerParams_default_instance_;
  }
  LODWORD(v64) = v7[2];
  v8 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "split");
  memset(&v59, 0, sizeof(v59));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v59, v69, v70, 0xAAAAAAAAAAAAAAABLL * (((char *)v70 - (char *)v69) >> 3));
  memset(&v58, 0, sizeof(v58));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v58, v72, v73, 0xAAAAAAAAAAAAAAABLL * (((char *)v73 - (char *)v72) >> 3));
  memset(v76, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v76, (__int128 *)v59.__r_.__value_.__l.__data_, (__int128 *)v59.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59.__r_.__value_.__l.__size_ - v59.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v93, 0, sizeof(v93));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v93, (__int128 *)v58.__r_.__value_.__l.__data_, (__int128 *)v58.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58.__r_.__value_.__l.__size_ - v58.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v81) = (***(uint64_t (****)(_QWORD))(v8[14] + 8))(*(_QWORD *)(v8[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v94 = v62;
  v95 = v63;
  if (v63)
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v81 = 0uLL;
  *(_QWORD *)&v82 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v81, *(__int128 **)v76, *(__int128 **)&v76[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v76[8] - *(_QWORD *)v76) >> 3));
  v87 = 0uLL;
  *(_QWORD *)&v88 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v87, (__int128 *)v93.__r_.__value_.__l.__data_, (__int128 *)v93.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93.__r_.__value_.__l.__size_ - v93.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v96[0] = (void **)&v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v96);
  v96[0] = (void **)&v81;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v96);
  v11 = v95;
  if (v95)
  {
    v12 = (unint64_t *)&v95->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (*v8)
    Espresso::sequential_builder::add_shape_from_kernel();
  *(_QWORD *)&v81 = &v93;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  *(_QWORD *)&v81 = v76;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  *(_QWORD *)&v81 = &v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  *(_QWORD *)&v81 = &v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  if (v61 < 0)
    operator delete(__p);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v72);
  }
  else
  {
    v56 = (uint64_t **)*((_QWORD *)this + 1);
    v14 = std::map<std::string,std::string>::at((uint64_t)v56, v69);
    v87 = *(_OWORD *)v14;
    v88 = *(_OWORD *)(v14 + 16);
    v89 = *(_QWORD *)(v14 + 32);
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v15 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v90, *(const void **)(v14 + 40), *(_QWORD *)(v14 + 48), (uint64_t)(*(_QWORD *)(v14 + 48)- *(_QWORD *)(v14 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 330)
    {
      v16 = (uint64_t *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v15);
      v16 = &CoreML::Specification::_SplitLayerParams_default_instance_;
    }
    v17 = *((_DWORD *)v16 + 4);
    v18 = DWORD2(v87);
    v19 = (SDWORD2(v87) / v17);
    if (DWORD2(v87) != -1 && SDWORD2(v87) % v17)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v81);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Split layer: '", 14);
      v46 = *((_QWORD *)a2 + 14);
      v47 = *(char *)(v46 + 23);
      if (v47 >= 0)
        v48 = *((_QWORD *)a2 + 14);
      else
        v48 = *(_QWORD *)v46;
      if (v47 >= 0)
        v49 = *(unsigned __int8 *)(v46 + 23);
      else
        v49 = *(_QWORD *)(v46 + 8);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v48, v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"' , number of outputs = ", 24);
      v51 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" do not divide the input dimension = ", 37);
      v52 = (_QWORD *)std::ostream::operator<<();
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v52);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, (const std::string *)v76);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v57 = a2;
    v20 = v72;
    v21 = v73;
    if (v17 != -1431655765 * ((unint64_t)((char *)v73 - (char *)v72) >> 3))
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v81);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Split layer :", 13);
      v36 = *((_QWORD *)v57 + 14);
      v37 = *(char *)(v36 + 23);
      if (v37 >= 0)
        v38 = *((_QWORD *)v57 + 14);
      else
        v38 = *(_QWORD *)v36;
      if (v37 >= 0)
        v39 = *(unsigned __int8 *)(v36 + 23);
      else
        v39 = *(_QWORD *)(v36 + 8);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v38, v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" , number of outputs (", 22);
      v41 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)") do not match the parameter nOutputs (", 39);
      v42 = (_QWORD *)std::ostream::operator<<();
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)")", 1);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v43);
      v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v44, (const std::string *)v76);
      __cxa_throw(v44, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v22 = v90;
    if (v72 != v73)
    {
      v55 = v91;
      v54 = (v91 - (uint64_t)v90) >> 2;
      do
      {
        v81 = v87;
        v82 = v88;
        v83 = v89;
        v85 = 0;
        v86 = 0;
        v84 = 0;
        v23 = v22;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v84, v22, v55, v54);
        v24 = v18;
        v25 = v19;
        if ((_DWORD)v18 == -1)
          v26 = -1;
        else
          v26 = v19;
        DWORD2(v81) = v26;
        v27 = v84;
        v77 = v83;
        *(_OWORD *)v76 = v81;
        *(_OWORD *)&v76[16] = v82;
        v79 = 0;
        v80 = 0;
        v78 = 0;
        v28 = v85;
        v29 = (v85 - (uint64_t)v84) >> 2;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v78, v84, v85, v29);
        EspressoConverter::validateShape((int *)v76, *((_QWORD *)v57 + 14), (uint64_t)v20);
        if (v78)
        {
          v79 = v78;
          operator delete(v78);
        }
        v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
        v30 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v56, v20, (__int128 **)&v93);
        v31 = v82;
        *(_OWORD *)(v30 + 56) = v81;
        *(_OWORD *)(v30 + 72) = v31;
        *((_QWORD *)v30 + 11) = v83;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v30 + 96, v27, v28, v29);
        if (v27)
          operator delete(v27);
        v20 = (__int128 *)((char *)v20 + 24);
        v18 = v24;
        v19 = v25;
        v22 = v23;
      }
      while (v20 != v21);
    }
    if (v22)
      operator delete(v22);
  }
  v32 = v63;
  if (v63)
  {
    v33 = (unint64_t *)&v63->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  *(_QWORD *)&v81 = &v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  *(_QWORD *)&v81 = &v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
}

void sub_19C93DC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,char a58)
{
  void *v58;
  int v59;
  uint64_t v60;
  void *v62;

  if (a52 < 0)
  {
    operator delete(__p);
    if ((v59 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a58);
      v62 = *(void **)(v60 - 168);
      if (v62)
        operator delete(v62);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
      a27 = &a34;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
      a27 = &a37;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
      if (a45 < 0)
        operator delete(a40);
      _Unwind_Resume(a1);
    }
  }
  else if (!v59)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v58);
  goto LABEL_6;
}

BOOL LayerTranslator::addEmbedding(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::EmbeddingLayerParams *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v30;
  unint64_t v32;
  int WeightParamSizeInBytes;
  std::string *v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  int WeightParamSize;
  uint64_t *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v68;
  std::string::size_type v70;
  void *v71;
  int v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t **v82;
  uint64_t v83;
  void *v84;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v85;
  uint64_t *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  __int128 v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  _BOOL8 v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::runtime_error *exception;
  std::string *v113;
  __int128 v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  std::string::size_type size;
  std::string *v119;
  __int128 v120;
  std::runtime_error *v121;
  std::string *v122;
  __int128 v123;
  std::string *v124;
  __int128 v125;
  std::string *v126;
  std::string::size_type v127;
  std::string *v128;
  __int128 v129;
  int v130;
  std::runtime_error *v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  __int128 v135;
  std::string *v136;
  std::string::size_type v137;
  std::string *v138;
  __int128 v139;
  std::string *v140;
  __int128 v141;
  std::string *v142;
  std::string::size_type v143;
  std::string *v144;
  __int128 v145;
  std::string *v146;
  __int128 v147;
  std::string *v148;
  std::string::size_type v149;
  std::string *v150;
  __int128 v151;
  int v152;
  std::runtime_error *v153;
  std::string *v154;
  __int128 v155;
  std::string *v156;
  __int128 v157;
  std::string *v158;
  std::string::size_type v159;
  std::string *v160;
  __int128 v161;
  std::string *v162;
  __int128 v163;
  std::string *v164;
  std::string::size_type v165;
  std::string *v166;
  __int128 v167;
  _QWORD *v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  std::runtime_error *v175;
  _QWORD *v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  std::runtime_error *v183;
  _QWORD *v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  std::runtime_error *v191;
  std::runtime_error *v192;
  std::string *v193;
  __int128 v194;
  std::string *v195;
  std::string::size_type v196;
  std::string *v197;
  __int128 v198;
  std::string *v199;
  __int128 v200;
  std::runtime_error *v201;
  std::string *v202;
  __int128 v203;
  std::string *v204;
  std::string::size_type v205;
  std::string *v206;
  __int128 v207;
  std::string *v208;
  __int128 v209;
  unint64_t v210;
  std::string::size_type v211;
  std::string::size_type v212;
  uint64_t v213[2];
  __int128 v214;
  std::string v215;
  std::string v216;
  std::string v217;
  std::string v218;
  std::string v219;
  std::string v220;
  std::string v221;
  uint64_t v222;
  uint64_t v223;
  std::string v224;
  std::string v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  _BYTE v228[28];
  uint64_t v229;
  int v230;
  char v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _BYTE v240[16];
  uint64_t *v241;
  uint64_t *v242;
  unint64_t v243;
  unint64_t __val;
  unsigned __int8 v245;
  __int128 *v246;
  __int128 *v247;
  uint64_t v248;
  __int128 *v249;
  __int128 *v250;
  uint64_t v251;
  std::string v252;
  _BYTE v253[32];
  uint64_t v254;
  void *v255;
  void *v256;
  uint64_t v257;
  __int128 __p;
  __int128 v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  _BYTE v264[32];
  uint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v252, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v252.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v5;
  }
  v250 = 0;
  v249 = 0;
  v251 = 0;
  v247 = 0;
  v246 = 0;
  v248 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v249, (uint64_t *)&v246, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 150)
  {
    v7 = (const CoreML::Specification::EmbeddingLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::EmbeddingLayerParams *)&CoreML::Specification::_EmbeddingLayerParams_default_instance_;
  }
  CoreML::Specification::EmbeddingLayerParams::EmbeddingLayerParams((CoreML::Specification::EmbeddingLayerParams *)v240, v7);
  v8 = __val;
  if (!__val)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)v253, __val);
    v113 = std::string::insert((std::string *)v253, 0, "outputChannels = ");
    v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
    *(_QWORD *)&v264[16] = *((_QWORD *)&v113->__r_.__value_.__l + 2);
    *(_OWORD *)v264 = v114;
    v113->__r_.__value_.__l.__size_ = 0;
    v113->__r_.__value_.__r.__words[2] = 0;
    v113->__r_.__value_.__r.__words[0] = 0;
    v115 = std::string::append((std::string *)v264, " not allowed in layer ");
    v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
    *(_QWORD *)&v228[16] = *((_QWORD *)&v115->__r_.__value_.__l + 2);
    *(_OWORD *)v228 = v116;
    v115->__r_.__value_.__l.__size_ = 0;
    v115->__r_.__value_.__r.__words[2] = 0;
    v115->__r_.__value_.__r.__words[0] = 0;
    if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v117 = &v252;
    else
      v117 = (std::string *)v252.__r_.__value_.__r.__words[0];
    if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v252.__r_.__value_.__r.__words[2]);
    else
      size = v252.__r_.__value_.__l.__size_;
    v119 = std::string::append((std::string *)v228, (const std::string::value_type *)v117, size);
    v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
    *(_QWORD *)&v259 = *((_QWORD *)&v119->__r_.__value_.__l + 2);
    __p = v120;
    v119->__r_.__value_.__l.__size_ = 0;
    v119->__r_.__value_.__r.__words[2] = 0;
    v119->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = v243;
  if (!v243)
  {
    v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)v253, v243);
    v122 = std::string::insert((std::string *)v253, 0, "inputDim = ");
    v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
    *(_QWORD *)&v264[16] = *((_QWORD *)&v122->__r_.__value_.__l + 2);
    *(_OWORD *)v264 = v123;
    v122->__r_.__value_.__l.__size_ = 0;
    v122->__r_.__value_.__r.__words[2] = 0;
    v122->__r_.__value_.__r.__words[0] = 0;
    v124 = std::string::append((std::string *)v264, " not allowed in layer ");
    v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
    *(_QWORD *)&v228[16] = *((_QWORD *)&v124->__r_.__value_.__l + 2);
    *(_OWORD *)v228 = v125;
    v124->__r_.__value_.__l.__size_ = 0;
    v124->__r_.__value_.__r.__words[2] = 0;
    v124->__r_.__value_.__r.__words[0] = 0;
    if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v126 = &v252;
    else
      v126 = (std::string *)v252.__r_.__value_.__r.__words[0];
    if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v127 = HIBYTE(v252.__r_.__value_.__r.__words[2]);
    else
      v127 = v252.__r_.__value_.__l.__size_;
    v128 = std::string::append((std::string *)v228, (const std::string::value_type *)v126, v127);
    v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
    *(_QWORD *)&v259 = *((_QWORD *)&v128->__r_.__value_.__l + 2);
    __p = v129;
    v128->__r_.__value_.__l.__size_ = 0;
    v128->__r_.__value_.__r.__words[2] = 0;
    v128->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v121, (const std::string *)&__p);
    __cxa_throw(v121, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v233 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v234 = _D0;
  v239 = 0;
  *(_DWORD *)&v228[16] = 0;
  *(_QWORD *)&v228[20] = _D0;
  v235 = 0;
  v232 = 0;
  v236 = 0;
  v238 = 0;
  v237 = 0;
  v229 = 0x100000000;
  *(_QWORD *)v228 = __PAIR64__(v243, __val);
  v230 = 0;
  *(_QWORD *)&v228[8] = v245;
  v231 = 0;
  v14 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "inner_product");
  memset(&v225, 0, sizeof(v225));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v225, v246, v247, 0xAAAAAAAAAAAAAAABLL * (((char *)v247 - (char *)v246) >> 3));
  memset(&v224, 0, sizeof(v224));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v224, v249, v250, 0xAAAAAAAAAAAAAAABLL * (((char *)v250 - (char *)v249) >> 3));
  Espresso::sequential_builder::add<Espresso::inner_product_uniforms>(&v226, v14, (uint64_t)&__p, (uint64_t)&v252, (uint64_t)v228, (__int128 *)v225.__r_.__value_.__l.__data_, (__int128 *)v225.__r_.__value_.__l.__size_, (__int128 **)&v224);
  *(_QWORD *)v264 = &v224;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v264);
  *(_QWORD *)v264 = &v225;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v264);
  if (SBYTE7(v259) < 0)
    operator delete((void *)__p);
  v15 = v226;
  v222 = v226;
  v223 = (uint64_t)v227;
  if (v227)
  {
    p_shared_owners = (unint64_t *)&v227->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (v241)
    v18 = v241;
  else
    v18 = &CoreML::Specification::_WeightParams_default_instance_;
  v19 = v18[5];
  if (*(char *)(v19 + 23) < 0)
    v20 = *(_QWORD *)(v19 + 8);
  else
    v20 = *(unsigned __int8 *)(v19 + 23);
  v21 = v18[6];
  v22 = *(unsigned __int8 *)(v21 + 23);
  if (*(char *)(v21 + 23) < 0)
    v23 = *(_QWORD *)(v21 + 8);
  else
    v23 = *(unsigned __int8 *)(v21 + 23);
  v210 = __val * v243;
  v24 = *((_DWORD *)v18 + 4);
  v25 = v18[7];
  if (*(char *)(v25 + 23) < 0)
    v26 = *(_QWORD *)(v25 + 8);
  else
    v26 = *(unsigned __int8 *)(v25 + 23);
  if (v24 <= 0)
    v27 = 1;
  else
    v27 = 2;
  if (v20)
    v28 = v27;
  else
    v28 = v24 > 0;
  if (v23)
    ++v28;
  if (v26)
    ++v28;
  if (v24 > 0 || v28 != 1)
    goto LABEL_77;
  if ((*(_BYTE *)(v19 + 23) & 0x80) != 0)
  {
    if (!*(_QWORD *)(v19 + 8))
      goto LABEL_45;
LABEL_77:
    WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v18);
    if (v210 != WeightParamSize)
    {
      v130 = WeightParamSize;
      v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v217, v130);
      v132 = std::string::insert(&v217, 0, "Size of weights = ");
      v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
      v218.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v133;
      v132->__r_.__value_.__l.__size_ = 0;
      v132->__r_.__value_.__r.__words[2] = 0;
      v132->__r_.__value_.__r.__words[0] = 0;
      v134 = std::string::append(&v218, " is not equal to size of the product of input dims and output channels = ");
      v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
      v219.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v135;
      v134->__r_.__value_.__l.__size_ = 0;
      v134->__r_.__value_.__r.__words[2] = 0;
      v134->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v216, v243);
      if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v136 = &v216;
      else
        v136 = (std::string *)v216.__r_.__value_.__r.__words[0];
      if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v137 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
      else
        v137 = v216.__r_.__value_.__l.__size_;
      v138 = std::string::append(&v219, (const std::string::value_type *)v136, v137);
      v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
      v220.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v139;
      v138->__r_.__value_.__l.__size_ = 0;
      v138->__r_.__value_.__r.__words[2] = 0;
      v138->__r_.__value_.__r.__words[0] = 0;
      v140 = std::string::append(&v220, ",");
      v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
      v221.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v141;
      v140->__r_.__value_.__l.__size_ = 0;
      v140->__r_.__value_.__r.__words[2] = 0;
      v140->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v215, __val);
      if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v142 = &v215;
      else
        v142 = (std::string *)v215.__r_.__value_.__r.__words[0];
      if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v143 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
      else
        v143 = v215.__r_.__value_.__l.__size_;
      v144 = std::string::append(&v221, (const std::string::value_type *)v142, v143);
      v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
      *(_QWORD *)&v253[16] = *((_QWORD *)&v144->__r_.__value_.__l + 2);
      *(_OWORD *)v253 = v145;
      v144->__r_.__value_.__l.__size_ = 0;
      v144->__r_.__value_.__r.__words[2] = 0;
      v144->__r_.__value_.__r.__words[0] = 0;
      v146 = std::string::append((std::string *)v253, " in layer ");
      v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
      *(_QWORD *)&v264[16] = *((_QWORD *)&v146->__r_.__value_.__l + 2);
      *(_OWORD *)v264 = v147;
      v146->__r_.__value_.__l.__size_ = 0;
      v146->__r_.__value_.__r.__words[2] = 0;
      v146->__r_.__value_.__r.__words[0] = 0;
      if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v148 = &v252;
      else
        v148 = (std::string *)v252.__r_.__value_.__r.__words[0];
      if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v149 = HIBYTE(v252.__r_.__value_.__r.__words[2]);
      else
        v149 = v252.__r_.__value_.__l.__size_;
      v150 = std::string::append((std::string *)v264, (const std::string::value_type *)v148, v149);
      v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
      *(_QWORD *)&v259 = *((_QWORD *)&v150->__r_.__value_.__l + 2);
      __p = v151;
      v150->__r_.__value_.__l.__size_ = 0;
      v150->__r_.__value_.__r.__words[2] = 0;
      v150->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v131, (const std::string *)&__p);
      __cxa_throw(v131, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v15 + 424))(&__p, v15);
    if (v241)
      v47 = v241;
    else
      v47 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(__p + 16), v47, 4 * (*(_DWORD *)&v228[4] * *(_DWORD *)v228));
    v214 = __p;
    if (*((_QWORD *)&__p + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 400))(v15, &v214);
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v214 + 1);
    if (*((_QWORD *)&v214 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v214 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    goto LABEL_94;
  }
  if (*(_BYTE *)(v19 + 23))
    goto LABEL_77;
LABEL_45:
  if ((v22 & 0x80) != 0)
    v22 = *(_QWORD *)(v21 + 8);
  if (v18 == &CoreML::Specification::_WeightParams_default_instance_)
    goto LABEL_77;
  v30 = v18[8];
  if (!v22 || v30 == 0)
    goto LABEL_77;
  v32 = *(_QWORD *)(v30 + 16);
  WeightParamSizeInBytes = EspressoConverter::getWeightParamSizeInBytes(v18);
  if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v18, v9 * v8))
  {
    v192 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v193 = std::string::append(&v221, "' has insufficient bytes for ");
    v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
    *(_QWORD *)&v253[16] = *((_QWORD *)&v193->__r_.__value_.__l + 2);
    *(_OWORD *)v253 = v194;
    v193->__r_.__value_.__l.__size_ = 0;
    v193->__r_.__value_.__r.__words[2] = 0;
    v193->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v220, v210);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v195 = &v220;
    else
      v195 = (std::string *)v220.__r_.__value_.__r.__words[0];
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v196 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
    else
      v196 = v220.__r_.__value_.__l.__size_;
    v197 = std::string::append((std::string *)v253, (const std::string::value_type *)v195, v196);
    v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
    *(_QWORD *)&v264[16] = *((_QWORD *)&v197->__r_.__value_.__l + 2);
    *(_OWORD *)v264 = v198;
    v197->__r_.__value_.__l.__size_ = 0;
    v197->__r_.__value_.__r.__words[2] = 0;
    v197->__r_.__value_.__r.__words[0] = 0;
    v199 = std::string::append((std::string *)v264, "units in weight");
    v200 = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
    *(_QWORD *)&v259 = *((_QWORD *)&v199->__r_.__value_.__l + 2);
    __p = v200;
    v199->__r_.__value_.__l.__size_ = 0;
    v199->__r_.__value_.__r.__words[2] = 0;
    v199->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v192, (const std::string *)&__p);
    __cxa_throw(v192, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CoreML::copySpecArrayStringToVector(&__p, (char *)v21, WeightParamSizeInBytes);
  std::to_string((std::string *)v253, v32);
  v34 = std::string::insert((std::string *)v253, 0, "W_U");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  *(_QWORD *)&v264[16] = *((_QWORD *)&v34->__r_.__value_.__l + 2);
  *(_OWORD *)v264 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if ((v253[23] & 0x80000000) != 0)
    operator delete(*(void **)v253);
  *(_OWORD *)v253 = 0uLL;
  (*(void (**)(uint64_t, _BYTE *, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v15 + 168))(v15, v253, v264, __p, WeightParamSizeInBytes, 0);
  v36 = *(std::__shared_weak_count **)&v253[8];
  if (*(_QWORD *)&v253[8])
  {
    v37 = (unint64_t *)(*(_QWORD *)&v253[8] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v241)
    v39 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v241;
  else
    v39 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)&CoreML::Specification::_WeightParams_default_instance_;
  v40 = (std::__shared_weak_count *)v223;
  v213[0] = v222;
  v213[1] = v223;
  if (v223)
  {
    v41 = (unint64_t *)(v223 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = *(unsigned int *)v228;
  std::string::basic_string[abi:ne180100]<0>(v253, (char *)&unk_19CB39696);
  CoreML::setQuantizationParams(v39, v213, v43, (const void **)v253);
  if ((v253[23] & 0x80000000) != 0)
    operator delete(*(void **)v253);
  if (v40)
  {
    v44 = (unint64_t *)&v40->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if ((v264[23] & 0x80000000) != 0)
    operator delete(*(void **)v264);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
LABEL_94:
  if (!v245)
    goto LABEL_151;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v217, 4 * *(_DWORD *)v228, 1, 1, 1);
  if (v242)
    v56 = v242;
  else
    v56 = &CoreML::Specification::_WeightParams_default_instance_;
  v57 = v56[5];
  if (*(char *)(v57 + 23) < 0)
    v58 = *(_QWORD *)(v57 + 8);
  else
    v58 = *(unsigned __int8 *)(v57 + 23);
  v59 = v56[6];
  v60 = *(unsigned __int8 *)(v59 + 23);
  if (*(char *)(v59 + 23) < 0)
    v61 = *(_QWORD *)(v59 + 8);
  else
    v61 = *(unsigned __int8 *)(v59 + 23);
  v62 = *((_DWORD *)v56 + 4);
  v63 = v56[7];
  if (*(char *)(v63 + 23) < 0)
    v64 = *(_QWORD *)(v63 + 8);
  else
    v64 = *(unsigned __int8 *)(v63 + 23);
  if (v62 <= 0)
    v65 = 1;
  else
    v65 = 2;
  if (v58)
    v66 = v65;
  else
    v66 = v62 > 0;
  if (v61)
    ++v66;
  if (v64)
    ++v66;
  if (v62 > 0 || v66 != 1)
    goto LABEL_136;
  if ((*(_BYTE *)(v57 + 23) & 0x80) != 0)
  {
    if (*(_QWORD *)(v57 + 8))
      goto LABEL_136;
  }
  else if (*(_BYTE *)(v57 + 23))
  {
    goto LABEL_136;
  }
  if ((v60 & 0x80) != 0)
    v60 = *(_QWORD *)(v59 + 8);
  if (v56 != &CoreML::Specification::_WeightParams_default_instance_)
  {
    v68 = v56[8];
    if (v60 && v68 != 0)
    {
      if ((int)EspressoConverter::getWeightParamSizeInBytes(v56) > (*(_QWORD *)(v68 + 16) * v8 + 7) >> 3)
      {
        v201 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v202 = std::string::append(&v221, "' has insufficient bytes for ");
        v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
        *(_QWORD *)&v253[16] = *((_QWORD *)&v202->__r_.__value_.__l + 2);
        *(_OWORD *)v253 = v203;
        v202->__r_.__value_.__l.__size_ = 0;
        v202->__r_.__value_.__r.__words[2] = 0;
        v202->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v220, v210);
        if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v204 = &v220;
        else
          v204 = (std::string *)v220.__r_.__value_.__r.__words[0];
        if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v205 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
        else
          v205 = v220.__r_.__value_.__l.__size_;
        v206 = std::string::append((std::string *)v253, (const std::string::value_type *)v204, v205);
        v207 = *(_OWORD *)&v206->__r_.__value_.__l.__data_;
        *(_QWORD *)&v264[16] = *((_QWORD *)&v206->__r_.__value_.__l + 2);
        *(_OWORD *)v264 = v207;
        v206->__r_.__value_.__l.__size_ = 0;
        v206->__r_.__value_.__r.__words[2] = 0;
        v206->__r_.__value_.__r.__words[0] = 0;
        v208 = std::string::append((std::string *)v264, "units in bias");
        v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
        *(_QWORD *)&v259 = *((_QWORD *)&v208->__r_.__value_.__l + 2);
        __p = v209;
        v208->__r_.__value_.__l.__size_ = 0;
        v208->__r_.__value_.__r.__words[2] = 0;
        v208->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v201, (const std::string *)&__p);
        __cxa_throw(v201, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      CoreML::dequantizeWeightParamSpec((CoreML *)&__p, (const CoreML::Specification::WeightParams *)v56, v8);
      v70 = v217.__r_.__value_.__r.__words[0];
      v71 = (void *)__p;
      memcpy(*(void **)(v217.__r_.__value_.__r.__words[0] + 16), (const void *)__p, 4 * v8);
      if (v71)
        operator delete(v71);
      goto LABEL_138;
    }
  }
LABEL_136:
  v72 = EspressoConverter::getWeightParamSize((uint64_t)v56);
  if (v8 != v72)
  {
    v152 = v72;
    v153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v219, v152);
    v154 = std::string::insert(&v219, 0, "Size of bias = ");
    v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
    v220.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v155;
    v154->__r_.__value_.__l.__size_ = 0;
    v154->__r_.__value_.__r.__words[2] = 0;
    v154->__r_.__value_.__r.__words[0] = 0;
    v156 = std::string::append(&v220, " is not equal to the output dims = ");
    v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
    v221.__r_.__value_.__r.__words[2] = v156->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v157;
    v156->__r_.__value_.__l.__size_ = 0;
    v156->__r_.__value_.__r.__words[2] = 0;
    v156->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v218, __val);
    if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v158 = &v218;
    else
      v158 = (std::string *)v218.__r_.__value_.__r.__words[0];
    if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v159 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
    else
      v159 = v218.__r_.__value_.__l.__size_;
    v160 = std::string::append(&v221, (const std::string::value_type *)v158, v159);
    v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
    *(_QWORD *)&v253[16] = *((_QWORD *)&v160->__r_.__value_.__l + 2);
    *(_OWORD *)v253 = v161;
    v160->__r_.__value_.__l.__size_ = 0;
    v160->__r_.__value_.__r.__words[2] = 0;
    v160->__r_.__value_.__r.__words[0] = 0;
    v162 = std::string::append((std::string *)v253, " in layer ");
    v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
    *(_QWORD *)&v264[16] = *((_QWORD *)&v162->__r_.__value_.__l + 2);
    *(_OWORD *)v264 = v163;
    v162->__r_.__value_.__l.__size_ = 0;
    v162->__r_.__value_.__r.__words[2] = 0;
    v162->__r_.__value_.__r.__words[0] = 0;
    if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v164 = &v252;
    else
      v164 = (std::string *)v252.__r_.__value_.__r.__words[0];
    if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v165 = HIBYTE(v252.__r_.__value_.__r.__words[2]);
    else
      v165 = v252.__r_.__value_.__l.__size_;
    v166 = std::string::append((std::string *)v264, (const std::string::value_type *)v164, v165);
    v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
    *(_QWORD *)&v259 = *((_QWORD *)&v166->__r_.__value_.__l + 2);
    __p = v167;
    v166->__r_.__value_.__l.__size_ = 0;
    v166->__r_.__value_.__r.__words[2] = 0;
    v166->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v153, (const std::string *)&__p);
    __cxa_throw(v153, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v70 = v217.__r_.__value_.__r.__words[0];
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v217.__r_.__value_.__r.__words[0] + 16), v56, 4 * *(unsigned int *)v228);
LABEL_138:
  v73 = v222;
  v211 = v70;
  v212 = v217.__r_.__value_.__l.__size_;
  if (v217.__r_.__value_.__l.__size_)
  {
    v74 = (unint64_t *)(v217.__r_.__value_.__l.__size_ + 8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  (*(void (**)(uint64_t, std::string::size_type *))(*(_QWORD *)v73 + 392))(v73, &v211);
  v76 = (std::__shared_weak_count *)v212;
  if (v212)
  {
    v77 = (unint64_t *)(v212 + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)v217.__r_.__value_.__l.__size_;
  if (v217.__r_.__value_.__l.__size_)
  {
    v80 = (unint64_t *)(v217.__r_.__value_.__l.__size_ + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
LABEL_151:
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v249);
  }
  else
  {
    v82 = (uint64_t **)*((_QWORD *)this + 1);
    v83 = std::map<std::string,std::string>::at((uint64_t)v82, v246);
    *(_OWORD *)v264 = *(_OWORD *)v83;
    *(_OWORD *)&v264[16] = *(_OWORD *)(v83 + 16);
    v265 = *(_QWORD *)(v83 + 32);
    v266 = 0;
    v267 = 0;
    v268 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v266, *(const void **)(v83 + 40), *(_QWORD *)(v83 + 48), (uint64_t)(*(_QWORD *)(v83 + 48) - *(_QWORD *)(v83 + 40)) >> 2);
    if (*(_DWORD *)&v264[4] != -1 && *(_DWORD *)&v264[4] != 1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v259, (uint64_t)"Embedding layer: '", 18);
      v169 = *((_QWORD *)a2 + 14);
      v170 = *(char *)(v169 + 23);
      if (v170 >= 0)
        v171 = *((_QWORD *)a2 + 14);
      else
        v171 = *(_QWORD *)v169;
      if (v170 >= 0)
        v172 = *(unsigned __int8 *)(v169 + 23);
      else
        v172 = *(_QWORD *)(v169 + 8);
      v173 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, v171, v172);
      v174 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)"': height dimension of the input blob must be 1.", 48);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v174);
      v175 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v175, (const std::string *)v253);
      __cxa_throw(v175, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (*(_DWORD *)v264 != -1 && *(_DWORD *)v264 != 1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v259, (uint64_t)"Embedding layer: '", 18);
      v177 = *((_QWORD *)a2 + 14);
      v178 = *(char *)(v177 + 23);
      if (v178 >= 0)
        v179 = *((_QWORD *)a2 + 14);
      else
        v179 = *(_QWORD *)v177;
      if (v178 >= 0)
        v180 = *(unsigned __int8 *)(v177 + 23);
      else
        v180 = *(_QWORD *)(v177 + 8);
      v181 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, v179, v180);
      v182 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)"': width dimension of the input blob must be 1.", 47);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v182);
      v183 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v183, (const std::string *)v253);
      __cxa_throw(v183, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (*(_DWORD *)&v264[8] != -1 && *(_DWORD *)&v264[8] != 1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      v184 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v259, (uint64_t)"Embedding layer: '", 18);
      v185 = *((_QWORD *)a2 + 14);
      v186 = *(char *)(v185 + 23);
      if (v186 >= 0)
        v187 = *((_QWORD *)a2 + 14);
      else
        v187 = *(_QWORD *)v185;
      if (v186 >= 0)
        v188 = *(unsigned __int8 *)(v185 + 23);
      else
        v188 = *(_QWORD *)(v185 + 8);
      v189 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, v187, v188);
      v190 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)"': channel dimension of the input blob must be 1.", 49);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v190);
      v191 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v191, (const std::string *)v253);
      __cxa_throw(v191, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    __p = *(_OWORD *)v264;
    v259 = *(_OWORD *)&v264[16];
    v84 = v266;
    v260 = v265;
    v261 = 0;
    v263 = 0;
    v262 = 0;
    v85 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v261, v266, v267, (v267 - (uint64_t)v266) >> 2);
    if (*((_DWORD *)a2 + 35) == 150)
    {
      v86 = (uint64_t *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v85);
      v86 = &CoreML::Specification::_EmbeddingLayerParams_default_instance_;
    }
    DWORD2(__p) = v86[5];
    *(_OWORD *)v253 = __p;
    *(_OWORD *)&v253[16] = v259;
    v87 = v261;
    v254 = v260;
    v255 = 0;
    v257 = 0;
    v256 = 0;
    v88 = v262;
    v89 = (v262 - (uint64_t)v261) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v255, v261, v262, v89);
    EspressoConverter::validateShape((int *)v253, *((_QWORD *)a2 + 14), (uint64_t)v249);
    if (v255)
    {
      v256 = v255;
      operator delete(v255);
    }
    v221.__r_.__value_.__r.__words[0] = (std::string::size_type)v249;
    v90 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v82, v249, (__int128 **)&v221);
    v91 = v259;
    *(_OWORD *)(v90 + 56) = __p;
    *(_OWORD *)(v90 + 72) = v91;
    *((_QWORD *)v90 + 11) = v260;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v90 + 96, v87, v88, v89);
    if (v87)
      operator delete(v87);
    if (v84)
      operator delete(v84);
  }
  if (v241)
    v92 = v241;
  else
    v92 = &CoreML::Specification::_WeightParams_default_instance_;
  v93 = v92[5];
  v94 = *(unsigned __int8 *)(v93 + 23);
  if (*(char *)(v93 + 23) < 0)
    v95 = *(_QWORD *)(v93 + 8);
  else
    v95 = *(unsigned __int8 *)(v93 + 23);
  v96 = v92[6];
  if (*(char *)(v96 + 23) < 0)
    v97 = *(_QWORD *)(v96 + 8);
  else
    v97 = *(unsigned __int8 *)(v96 + 23);
  v98 = *((_DWORD *)v92 + 4);
  v99 = v92[7];
  if (*(char *)(v99 + 23) < 0)
    v100 = *(_QWORD *)(v99 + 8);
  else
    v100 = *(unsigned __int8 *)(v99 + 23);
  if (v98 <= 0)
    v101 = 1;
  else
    v101 = 2;
  if (v95)
    v102 = v101;
  else
    v102 = v98 > 0;
  if (v97)
    ++v102;
  if (v100)
    ++v102;
  if (v98 <= 0 && v102 == 1)
  {
    if ((v94 & 0x80) != 0)
      v94 = *(_QWORD *)(v93 + 8);
    v104 = v94 != 0;
  }
  else
  {
    v104 = 0;
  }
  v105 = (std::__shared_weak_count *)v223;
  if (v223)
  {
    v106 = (unint64_t *)(v223 + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v227;
  if (v227)
  {
    v109 = (unint64_t *)&v227->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  CoreML::Specification::EmbeddingLayerParams::~EmbeddingLayerParams((CoreML::Specification::EmbeddingLayerParams *)v240);
  *(_QWORD *)&__p = &v246;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)&__p = &v249;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v252.__r_.__value_.__l.__data_);
  return v104;
}

void sub_19C93F0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,char a62,uint64_t a63)
{
  char a70;
  char a72;
  void *v72;
  int v73;
  uint64_t v74;

  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (*(char *)(v74 - 137) < 0)
    operator delete(*(void **)(v74 - 160));
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (a21 < 0)
    operator delete(a16);
  if (a60 < 0)
    operator delete(a55);
  if (a53 < 0)
    operator delete(a48);
  if (a27 < 0)
    operator delete(a22);
  if (a46 < 0)
    operator delete(a41);
  if (a39 < 0)
    operator delete(a34);
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v73 & 1) == 0)
    {
LABEL_24:
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a70);
      CoreML::Specification::EmbeddingLayerParams::~EmbeddingLayerParams((CoreML::Specification::EmbeddingLayerParams *)&a72);
      STACK[0x2A0] = (unint64_t)&STACK[0x210];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
      STACK[0x2A0] = (unint64_t)&STACK[0x228];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
      if (SLOBYTE(STACK[0x257]) < 0)
        operator delete((void *)STACK[0x240]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_24;
  }
  __cxa_free_exception(v72);
  goto LABEL_24;
}

void Espresso::sequential_builder::add<Espresso::inner_product_uniforms>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C93F8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  uint64_t result;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E3D5C090;
  *((_QWORD *)v10 + 3) = &off_1E3D5B4E8;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  result = Espresso::kern_alloc((Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5));
  *((_QWORD *)v10 + 5) = result;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void sub_19C93FA0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  Espresso::blob_rtti_root *v2;
  uint64_t v3;
  void *v5;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v3);
  Espresso::blob_rtti_root::~blob_rtti_root(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::blob<float,1>::~blob(uint64_t a1, void *a2)
{
  Espresso *v3;

  *(_QWORD *)a1 = &off_1E3D5B4E8;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(Espresso **)(a1 + 16);
    if (v3)
      Espresso::kern_dealloc(v3, a2);
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 32);
  Espresso::blob_rtti_root::~blob_rtti_root((Espresso::blob_rtti_root *)a1);
}

{
  Espresso *v3;

  *(_QWORD *)a1 = &off_1E3D5B4E8;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(Espresso **)(a1 + 16);
    if (v3)
      Espresso::kern_dealloc(v3, a2);
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 32);
  Espresso::blob_rtti_root::~blob_rtti_root((Espresso::blob_rtti_root *)a1);
  JUMPOUT(0x1A1AD6260);
}

void std::__shared_ptr_emplace<Espresso::blob<float,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<float,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D5C090;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD6260);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void LayerTranslator::addFloor(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[2] = (void **)897988541;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v16[0] = (void **)117;
  v16[1] = (void **)1065353216;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C93FD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addFillLike(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string v12;
  std::string v13;
  void *__p[2];
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _DWORD v18[8];
  char v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v26.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  *(_QWORD *)&v18[3] = 0;
  *(_QWORD *)&v18[1] = 0;
  *(_QWORD *)&v18[5] = 0xFFFFFFFF00000001;
  if (*((_DWORD *)a2 + 35) == 1080)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_FillLikeLayerParams_default_instance_;
  }
  v18[0] = *((_DWORD *)v7 + 4);
  v18[7] = 1;
  v19 = 0;
  v8 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "fill");
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::fill_params_t>(&v16, v8, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v18, (__int128 *)v13.__r_.__value_.__l.__data_, (__int128 *)v13.__r_.__value_.__l.__size_, (__int128 **)&v12);
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v27 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v15 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  *(_QWORD *)v18 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  *(_QWORD *)v18 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C93FFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(_QWORD *)(v24 - 40) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a20 < 0)
    operator delete(__p);
  a23 = v24 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v24 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v24 - 41) < 0)
    operator delete(*(void **)(v24 - 64));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::fill_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C940220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addFillStatic(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  std::string v18;
  std::string v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  char v30;
  __int128 **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 *v37;
  __int128 *v38;
  uint64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  std::string v43;
  std::string *v44;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v43, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v43.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v5;
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v40, (uint64_t *)&v37, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1085)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_FillStaticLayerParams_default_instance_;
  }
  v33 = 0;
  v34 = 0;
  v31 = (__int128 **)&off_1E3D53130;
  v32 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v33, v8);
    memcpy((void *)(v34 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    v9 = *((_DWORD *)v7 + 4);
    LODWORD(v33) = v9;
  }
  else
  {
    v9 = 0;
  }
  v36 = 0;
  v10 = v7[1];
  if ((v10 & 1) != 0)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v32, v10 & 0xFFFFFFFFFFFFFFFELL);
    v9 = v33;
  }
  v35 = *((_DWORD *)v7 + 9);
  v25 = 0;
  v26 = 0;
  v24 = v35;
  v28 = v9;
  v29 = 1;
  v30 = 0;
  if (v9 <= 0)
  {
    LODWORD(v25) = 1;
    goto LABEL_20;
  }
  LODWORD(v25) = *(_QWORD *)(v34 + 8 * (v9 - 1) + 8);
  if (v9 == 1)
  {
LABEL_20:
    HIDWORD(v25) = 1;
    goto LABEL_21;
  }
  HIDWORD(v25) = *(_QWORD *)(v34 + 8 * (v9 - 2) + 8);
  if (v9 <= 2)
  {
LABEL_21:
    LODWORD(v26) = 1;
    goto LABEL_22;
  }
  LODWORD(v26) = *(_QWORD *)(v34 + 8 * (v9 - 3) + 8);
  if (v9 == 3)
  {
LABEL_22:
    v17 = 1;
    HIDWORD(v26) = 1;
    goto LABEL_23;
  }
  HIDWORD(v26) = *(_QWORD *)(v34 + 8 * (v9 - 4) + 8);
  v11 = v9 >= 5;
  v12 = v9 - 5;
  if (v11)
    v17 = *(_DWORD *)(v34 + 8 * v12 + 8);
  else
    v17 = 1;
LABEL_23:
  v27 = v17;
  v13 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "fill");
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v37, v38, 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v37) >> 3));
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, v40, v41, 0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (char *)v40) >> 3));
  Espresso::sequential_builder::add<Espresso::fill_params_t>(&v22, v13, (uint64_t)__p, (uint64_t)&v43, (uint64_t)&v24, (__int128 *)v19.__r_.__value_.__l.__data_, (__int128 *)v19.__r_.__value_.__l.__size_, (__int128 **)&v18);
  v14 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v44 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  v44 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (v21 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v40);
  CoreML::Specification::FillStaticLayerParams::~FillStaticLayerParams((CoreML::Specification::FillStaticLayerParams *)&v31);
  v31 = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  v31 = &v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
}

void sub_19C940594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,_QWORD *__p)
{
  uint64_t *v31;
  uint64_t v32;

  if (__p && !*__p)
    operator delete(__p);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v31);
  a28 = v32 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = v32 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  if (*(char *)(v32 - 41) < 0)
    operator delete(*(void **)(v32 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addFillDynamic(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string v12;
  std::string v13;
  void *__p[2];
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _DWORD v18[8];
  char v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v26.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  *(_QWORD *)&v18[3] = 0;
  *(_QWORD *)&v18[1] = 0;
  *(_QWORD *)&v18[5] = 0xFFFFFFFF00000001;
  if (*((_DWORD *)a2 + 35) == 1090)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_FillDynamicLayerParams_default_instance_;
  }
  v18[0] = *((_DWORD *)v7 + 4);
  v18[7] = 1;
  v19 = 1;
  v8 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "fill");
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::fill_params_t>(&v16, v8, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v18, (__int128 *)v13.__r_.__value_.__l.__data_, (__int128 *)v13.__r_.__value_.__l.__size_, (__int128 **)&v12);
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v27 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v15 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  *(_QWORD *)v18 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  *(_QWORD *)v18 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C94084C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(_QWORD *)(v24 - 40) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a20 < 0)
    operator delete(__p);
  a23 = v24 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v24 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v24 - 41) < 0)
    operator delete(*(void **)(v24 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addLRN(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  float v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 *v15;
  size_t v16;
  std::string *v17;
  __int128 *v18;
  std::string *v19;
  std::string::size_type size;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  char *v24;
  char v25;
  std::__split_buffer<std::string>::pointer begin;
  std::string::size_type v27;
  std::string *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  std::string *v32;
  std::string *v33;
  std::string::size_type v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t **v46;
  uint64_t v47;
  void *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  std::string v52;
  std::string v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  std::string v56;
  std::string v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  void (**v70)(CoreML::Specification::LRNLayerParams *__hidden);
  uint64_t v71;
  __int128 v72;
  float v73;
  int v74;
  __int128 *v75;
  __int128 *v76;
  uint64_t v77;
  __int128 *v78;
  __int128 *v79;
  uint64_t v80;
  std::string v81;
  std::__split_buffer<std::string> v82;
  void *__p[3];
  std::__split_buffer<std::string> v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  std::__split_buffer<std::string> __v;
  __int128 v89;
  uint64_t v90;
  _QWORD v91[3];

  v91[2] = *MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v81.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v5;
  }
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v78, (uint64_t *)&v75, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 180)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_LRNLayerParams_default_instance_;
  }
  v70 = &off_1E3D4E9F0;
  v71 = 0;
  v74 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v71, v8 & 0xFFFFFFFFFFFFFFFELL);
  v9 = *((_OWORD *)v7 + 1);
  v73 = *((float *)v7 + 8);
  v72 = v9;
  v69 = 0;
  v68 = 0;
  v66 = v9;
  if (v73 >= 0.00001)
    v10 = v73;
  else
    v10 = 1.0;
  v67 = DWORD2(v72);
  if (fabsf(v10 + -1.0) >= 0.00001)
  {
    *(float *)&v66 = *(float *)&v72 / v10;
    memset(&v84, 0, 24);
    v15 = v78;
    if (*((char *)v78 + 23) >= 0)
      v16 = *((unsigned __int8 *)v78 + 23);
    else
      v16 = *((_QWORD *)v78 + 1);
    v17 = &v61;
    std::string::basic_string[abi:ne180100]((uint64_t)&v61, v16 + 1);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if (v16)
    {
      if (*((char *)v15 + 23) >= 0)
        v18 = v15;
      else
        v18 = *(__int128 **)v15;
      memmove(v17, v18, v16);
    }
    *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 95;
    std::to_string(&v60, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v60;
    else
      v19 = (std::string *)v60.__r_.__value_.__r.__words[0];
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    else
      size = v60.__r_.__value_.__l.__size_;
    v21 = std::string::append(&v61, (const std::string::value_type *)v19, size);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v82.__end_ = (std::__split_buffer<std::string>::pointer)v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__first_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = std::string::append((std::string *)&v82, "_lrn_out");
    v24 = (char *)v23->__r_.__value_.__r.__words[0];
    v91[0] = v23->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v91 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
    v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    begin = v84.__begin_;
    if (v84.__begin_ >= v84.__end_)
    {
      v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v84.__begin_ - (char *)v84.__first_) >> 3);
      v30 = v29 + 1;
      if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v84.__end_ - (char *)v84.__first_) >> 3) > v30)
        v30 = 0x5555555555555556 * (((char *)v84.__end_ - (char *)v84.__first_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v84.__end_ - (char *)v84.__first_) >> 3) >= 0x555555555555555)
        v31 = 0xAAAAAAAAAAAAAAALL;
      else
        v31 = v30;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v84.__end_;
      if (v31)
        v32 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v84.__end_, v31);
      else
        v32 = 0;
      v33 = v32 + v29;
      __v.__first_ = v32;
      __v.__begin_ = v33;
      __v.__end_cap_.__value_ = &v32[v31];
      v34 = v91[0];
      v33->__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
      v33->__r_.__value_.__l.__size_ = v34;
      *(std::string::size_type *)((char *)&v33->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v91 + 7);
      *((_BYTE *)&v33->__r_.__value_.__s + 23) = v25;
      v91[0] = 0;
      *(_QWORD *)((char *)v91 + 7) = 0;
      __v.__end_ = v33 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v84, &__v);
      v28 = v84.__begin_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      v27 = v91[0];
      v84.__begin_->__r_.__value_.__l.__data_ = v24;
      begin->__r_.__value_.__l.__size_ = v27;
      *(std::string::size_type *)((char *)&begin->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v91 + 7);
      *((_BYTE *)&begin->__r_.__value_.__s + 23) = v25;
      v28 = begin + 1;
    }
    v84.__begin_ = v28;
    if (SHIBYTE(v82.__end_) < 0)
      operator delete(v82.__first_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    v35 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&__v, "lrn");
    memset(&v57, 0, sizeof(v57));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v57, v75, v76, 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (char *)v75) >> 3));
    memset(&v56, 0, sizeof(v56));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v56, (__int128 *)v84.__first_, (__int128 *)v84.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)v84.__begin_ - (char *)v84.__first_) >> 3));
    Espresso::sequential_builder::add<Espresso::lrn_params>(&v58, v35, (uint64_t)&__v, (uint64_t)&v81, (uint64_t)&v66, (__int128 *)v57.__r_.__value_.__l.__data_, (__int128 *)v57.__r_.__value_.__l.__size_, (__int128 **)&v56);
    v36 = v59;
    if (v59)
    {
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v82.__first_ = &v56;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    v82.__first_ = &v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__begin_ + 4) = (std::__split_buffer<std::string>::pointer)0x358637BD00000000;
    HIDWORD(__v.__end_) = 0;
    LOBYTE(__v.__end_cap_.__value_) = 0;
    *(_QWORD *)((char *)&v89 + 4) = 0;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)1;
    LODWORD(__v.__begin_) = powf(v10, -*((float *)&v66 + 1));
    v39 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v82, "elementwise");
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
    else
      v40 = v81.__r_.__value_.__l.__size_;
    v41 = &v61;
    std::string::basic_string[abi:ne180100]((uint64_t)&v61, v40 + 4);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v41 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if (v40)
    {
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v81;
      else
        v42 = (std::string *)v81.__r_.__value_.__r.__words[0];
      memmove(v41, v42, v40);
    }
    strcpy((char *)v41 + v40, "_mul");
    memset(&v53, 0, sizeof(v53));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v53, (__int128 *)v84.__first_, (__int128 *)v84.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)v84.__begin_ - (char *)v84.__first_) >> 3));
    memset(&v52, 0, sizeof(v52));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v52, v78, v79, 0xAAAAAAAAAAAAAAABLL * (((char *)v79 - (char *)v78) >> 3));
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v54, v39, (uint64_t)&v82, (uint64_t)&v61, (uint64_t)&__v, (__int128 *)v53.__r_.__value_.__l.__data_, (__int128 *)v53.__r_.__value_.__l.__size_, (__int128 **)&v52);
    v43 = v55;
    if (v55)
    {
      v44 = (unint64_t *)&v55->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__end_) < 0)
      operator delete(v82.__first_);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v84;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
  else
  {
    v11 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&__v, "lrn");
    memset(&v63, 0, sizeof(v63));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v63, v75, v76, 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (char *)v75) >> 3));
    memset(&v62, 0, sizeof(v62));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v62, v78, v79, 0xAAAAAAAAAAAAAAABLL * (((char *)v79 - (char *)v78) >> 3));
    Espresso::sequential_builder::add<Espresso::lrn_params>(&v64, v11, (uint64_t)&__v, (uint64_t)&v81, (uint64_t)&v66, (__int128 *)v63.__r_.__value_.__l.__data_, (__int128 *)v63.__r_.__value_.__l.__size_, (__int128 **)&v62);
    v12 = v65;
    if (v65)
    {
      v13 = (unint64_t *)&v65->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v84.__first_ = &v62;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
    v84.__first_ = &v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
  }
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v78);
  }
  else
  {
    v46 = (uint64_t **)*((_QWORD *)this + 1);
    v47 = std::map<std::string,std::string>::at((uint64_t)v46, v75);
    __v = *(std::__split_buffer<std::string> *)v47;
    v89 = 0uLL;
    v90 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v89, *(const void **)(v47 + 40), *(_QWORD *)(v47 + 48), (uint64_t)(*(_QWORD *)(v47 + 48) - *(_QWORD *)(v47 + 40)) >> 2);
    v84 = __v;
    v48 = (void *)v89;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v85, (const void *)v89, *((uint64_t *)&v89 + 1), (uint64_t)(*((_QWORD *)&v89 + 1) - v89) >> 2);
    v82 = v84;
    v49 = v85;
    memset(__p, 0, sizeof(__p));
    v50 = v86;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v85, v86, (v86 - (uint64_t)v85) >> 2);
    EspressoConverter::validateShape((int *)&v82, *((_QWORD *)a2 + 14), (uint64_t)v78);
    if (__p[0])
      operator delete(__p[0]);
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
    v51 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v46, v78, (__int128 **)&v61);
    *(std::__split_buffer<std::string> *)(v51 + 56) = v84;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v51 + 96, v49, v50, (v50 - (uint64_t)v49) >> 2);
    if (v49)
      operator delete(v49);
    if (v48)
      operator delete(v48);
  }
  v70 = &off_1E3D4E9F0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v71);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
}

void sub_19C94116C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *__p;
  char a72;
  uint64_t *v72;
  uint64_t v73;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v73 - 192));
  if (a72 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a37 < 0)
    operator delete(a32);
  __p = (void *)(v73 - 256);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v72);
  *(_QWORD *)(v73 - 256) = &a55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 256));
  *(_QWORD *)(v73 - 256) = &a58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 256));
  if (a66 < 0)
    operator delete(a61);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::lrn_params>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C941580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addAverage(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  __int128 *v19;
  uint64_t v20;
  unint64_t i;
  std::string *v22;
  std::string *v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  __int128 v29;
  std::string::size_type v30;
  _QWORD *v31;
  std::string::size_type v32;
  __int128 *p_p;
  std::string *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  std::string::size_type v39;
  std::string *v40;
  std::string *v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  unint64_t *p_shared_owners;
  _QWORD *v47;
  uint64_t **v48;
  __int128 *v49;
  __int128 *v50;
  __int128 *v51;
  std::string::size_type v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *exception;
  const CoreML::Specification::NeuralNetworkLayer *v63;
  std::string v64;
  std::string v65;
  std::string v66;
  char v67;
  int v68;
  int v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::string v76;
  std::string v77;
  __int128 __p;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  std::string::size_type v83;
  std::string *v84;
  std::string *v85;
  unint64_t v86;
  __int128 *v87;
  __int128 *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  std::string v93;
  std::string *v94;
  _BYTE v95[32];
  uint64_t v96;
  void *v97;
  void *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  std::string v104;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v93.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v5;
  }
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v90, (uint64_t *)&v87, *((_QWORD *)this + 1));
  if (v91 - v90 != 24)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](exception, "Average Layer must have exactly 1 output");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v63 = a2;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v93.__r_.__value_.__r.__words[2]);
  else
    size = v93.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)&v66, size + 1);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v66;
  else
    v7 = (std::string *)v66.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v93;
    else
      v8 = (std::string *)v93.__r_.__value_.__r.__words[0];
    memmove(v7, v8, size);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + size) = 95;
  v9 = std::string::append(&v66, "sum_out");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(_QWORD *)&v95[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
  *(_OWORD *)v95 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append((std::string *)v95, "_");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(_QWORD *)&v101 = *((_QWORD *)&v11->__r_.__value_.__l + 2);
  v100 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v104, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v104;
  else
    v13 = (std::string *)v104.__r_.__value_.__r.__words[0];
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
  else
    v14 = v104.__r_.__value_.__l.__size_;
  v15 = std::string::append((std::string *)&v100, (const std::string::value_type *)v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v83 = v15->__r_.__value_.__r.__words[2];
  v82 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (SBYTE7(v101) < 0)
    operator delete((void *)v100);
  if ((v95[23] & 0x80000000) != 0)
    operator delete(*(void **)v95);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  v17 = v85;
  if ((unint64_t)v85 >= v86)
  {
    v19 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v84, &v82);
  }
  else
  {
    if (SHIBYTE(v83) < 0)
    {
      std::string::__init_copy_ctor_external(v85, (const std::string::value_type *)v82, *((std::string::size_type *)&v82 + 1));
    }
    else
    {
      v18 = v82;
      v85->__r_.__value_.__r.__words[2] = v83;
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    }
    v19 = (__int128 *)&v17[1];
  }
  v85 = (std::string *)v19;
  EspressoConverter::splitElementwiseLayer((uint64_t)&v80, &v87, (uint64_t)v84);
  v20 = v80;
  if (v81 != v80)
  {
    for (i = 0; i < 0x8E38E38E38E38E39 * ((v81 - v80) >> 3); ++i)
    {
      *(_QWORD *)&v101 = 897988541;
      BYTE8(v101) = 0;
      *(_QWORD *)((char *)&v103 + 4) = 0;
      *(_QWORD *)&v100 = 0;
      *((_QWORD *)&v100 + 1) = 1065353216;
      memset(v95, 0, 24);
      memset(&v66, 0, sizeof(v66));
      if ((char *)v88 - (char *)v87 == 24)
      {
        DWORD2(v100) = 0;
        *(_QWORD *)&v95[8] = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v95, v87);
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v66, v84, (__int128 *)v85, 0xAAAAAAAAAAAAAAABLL * (((char *)v85 - (char *)v84) >> 3));
      }
      else
      {
        v22 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v95, (__int128 *)(v20 + 72 * i));
        v23 = v22;
        *(_QWORD *)&v95[8] = v22;
        v24 = (__int128 *)(v80 + 72 * i + 24);
        if ((unint64_t)v22 >= *(_QWORD *)&v95[16])
        {
          v26 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v95, v24);
        }
        else
        {
          if (*(char *)(v80 + 72 * i + 47) < 0)
          {
            std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v24, *(_QWORD *)(v80 + 72 * i + 32));
          }
          else
          {
            v25 = *v24;
            v22->__r_.__value_.__r.__words[2] = *(_QWORD *)(v80 + 72 * i + 40);
            *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v25;
          }
          v26 = (uint64_t)&v23[1];
        }
        *(_QWORD *)&v95[8] = v26;
        v27 = (__int128 *)(v80 + 72 * i + 48);
        v28 = (_OWORD *)v66.__r_.__value_.__l.__size_;
        if (v66.__r_.__value_.__l.__size_ >= v66.__r_.__value_.__r.__words[2])
        {
          v30 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v66, v27);
        }
        else
        {
          if (*(char *)(v80 + 72 * i + 71) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v66.__r_.__value_.__l.__size_, *(const std::string::value_type **)v27, *(_QWORD *)(v80 + 72 * i + 56));
          }
          else
          {
            v29 = *v27;
            *(_QWORD *)(v66.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v80 + 72 * i + 64);
            *v28 = v29;
          }
          v30 = (std::string::size_type)v28 + 24;
        }
        v66.__r_.__value_.__l.__size_ = v30;
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v87) >> 3) > 2)
      {
        v38 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(&v104, "elementwise");
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
        else
          v39 = v93.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v73, v39 + 5);
        if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = &v73;
        else
          v40 = (std::string *)v73.__r_.__value_.__r.__words[0];
        if (v39)
        {
          if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = &v93;
          else
            v41 = (std::string *)v93.__r_.__value_.__r.__words[0];
          memmove(v40, v41, v39);
        }
        strcpy((char *)v40 + v39, "_sum_");
        std::to_string(&v72, i);
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &v72;
        else
          v42 = (std::string *)v72.__r_.__value_.__r.__words[0];
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
        else
          v43 = v72.__r_.__value_.__l.__size_;
        v44 = std::string::append(&v73, (const std::string::value_type *)v42, v43);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v79 = v44->__r_.__value_.__r.__words[2];
        __p = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        memset(&v71, 0, sizeof(v71));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v71, *(__int128 **)v95, *(__int128 **)&v95[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v95[8] - *(_QWORD *)v95) >> 3));
        memset(&v70, 0, sizeof(v70));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v70, (__int128 *)v66.__r_.__value_.__l.__data_, (__int128 *)v66.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66.__r_.__value_.__l.__size_ - v66.__r_.__value_.__r.__words[0]) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v74, v38, (uint64_t)&v104, (uint64_t)&__p, (uint64_t)&v100, (__int128 *)v71.__r_.__value_.__l.__data_, (__int128 *)v71.__r_.__value_.__l.__size_, (__int128 **)&v70);
        v94 = &v70;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
        v94 = &v71;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
        if (SHIBYTE(v79) < 0)
          operator delete((void *)__p);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v73.__r_.__value_.__l.__data_);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        v35 = v75;
        if (!v75)
          goto LABEL_103;
        p_shared_owners = (unint64_t *)&v75->__shared_owners_;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
      }
      else
      {
        v31 = *(_QWORD **)this;
        std::string::basic_string[abi:ne180100]<0>(&v104, "elementwise");
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
        else
          v32 = v93.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v32 + 4);
        if (v79 >= 0)
          p_p = &__p;
        else
          p_p = (__int128 *)__p;
        if (v32)
        {
          if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v34 = &v93;
          else
            v34 = (std::string *)v93.__r_.__value_.__r.__words[0];
          memmove(p_p, v34, v32);
        }
        strcpy((char *)p_p + v32, "_sum");
        memset(&v77, 0, sizeof(v77));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v77, *(__int128 **)v95, *(__int128 **)&v95[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v95[8] - *(_QWORD *)v95) >> 3));
        memset(&v76, 0, sizeof(v76));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v76, (__int128 *)v66.__r_.__value_.__l.__data_, (__int128 *)v66.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66.__r_.__value_.__l.__size_ - v66.__r_.__value_.__r.__words[0]) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v73, v31, (uint64_t)&v104, (uint64_t)&__p, (uint64_t)&v100, (__int128 *)v77.__r_.__value_.__l.__data_, (__int128 *)v77.__r_.__value_.__l.__size_, (__int128 **)&v76);
        v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
        v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
        if (SHIBYTE(v79) < 0)
          operator delete((void *)__p);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        v35 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
        if (!v73.__r_.__value_.__l.__size_)
          goto LABEL_103;
        v36 = (unint64_t *)(v73.__r_.__value_.__l.__size_ + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
      }
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
LABEL_103:
      v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      v20 = v80;
    }
  }
  *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 4) = 0x358637BD00000000;
  HIDWORD(v66.__r_.__value_.__r.__words[2]) = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v66.__r_.__value_.__r.__words[0] = 1;
  *(float *)&v66.__r_.__value_.__r.__words[1] = 1.0 / (float)(0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v87) >> 3));
  v47 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v100, "elementwise");
  memset(&v65, 0, sizeof(v65));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v65, (__int128 *)v84, (__int128 *)v85, 0xAAAAAAAAAAAAAAABLL * (((char *)v85 - (char *)v84) >> 3));
  memset(&v64, 0, sizeof(v64));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v64, (__int128 *)v90, (__int128 *)v91, 0xAAAAAAAAAAAAAAABLL * ((v91 - v90) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&__p, v47, (uint64_t)&v100, (uint64_t)&v93, (uint64_t)&v66, (__int128 *)v65.__r_.__value_.__l.__data_, (__int128 *)v65.__r_.__value_.__l.__size_, (__int128 **)&v64);
  *(_QWORD *)v95 = &v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v95);
  *(_QWORD *)v95 = &v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v95);
  if (SBYTE7(v101) < 0)
    operator delete((void *)v100);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v90);
  }
  else
  {
    v48 = (uint64_t **)*((_QWORD *)this + 1);
    memset(&v104, 0, sizeof(v104));
    v50 = v87;
    v49 = v88;
    if (v87 == v88)
    {
      v53 = 0;
      v54 = 0;
    }
    else
    {
      do
      {
        v51 = (__int128 *)std::map<std::string,std::string>::at((uint64_t)v48, v50);
        v52 = v104.__r_.__value_.__l.__size_;
        if (v104.__r_.__value_.__l.__size_ >= v104.__r_.__value_.__r.__words[2])
        {
          v53 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v104, v51);
        }
        else
        {
          std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v104, v51);
          v53 = v52 + 64;
        }
        v104.__r_.__value_.__l.__size_ = v53;
        v50 = (__int128 *)((char *)v50 + 24);
      }
      while (v50 != v49);
      v54 = v104.__r_.__value_.__r.__words[0];
    }
    EspressoConverter::computeMaxShape((uint64_t)&v100, v54, v53);
    *(_OWORD *)v95 = v100;
    *(_OWORD *)&v95[16] = v101;
    v55 = (char *)v103;
    v96 = v102;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v56 = *((_QWORD *)&v103 + 1);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v97, (const void *)v103, *((uint64_t *)&v103 + 1), (uint64_t)(*((_QWORD *)&v103 + 1) - v103) >> 2);
    EspressoConverter::validateShape((int *)v95, *((_QWORD *)v63 + 14), (uint64_t)v90);
    if (v97)
    {
      v98 = v97;
      operator delete(v97);
    }
    v73.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
    v57 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v48, v90, (__int128 **)&v73);
    v58 = v101;
    *(_OWORD *)(v57 + 56) = v100;
    *(_OWORD *)(v57 + 72) = v58;
    *((_QWORD *)v57 + 11) = v102;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v57 + 96, v55, v56, (v56 - (uint64_t)v55) >> 2);
    if (v55)
      operator delete(v55);
    *(_QWORD *)&v100 = &v104;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  *(_QWORD *)&v100 = &v80;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  *(_QWORD *)&v100 = &v84;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
  *(_QWORD *)&v100 = &v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
  *(_QWORD *)&v100 = &v90;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
}

void sub_19C942030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  uint64_t v69;

  if (a54 < 0)
    operator delete(__p);
  *(_QWORD *)(v69 - 208) = &a55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 208));
  *(_QWORD *)(v69 - 208) = &a58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 208));
  *(_QWORD *)(v69 - 208) = &a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 208));
  if (a69 < 0)
    operator delete(a64);
  _Unwind_Resume(a1);
}

void LayerTranslator::addNMS(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  unint64_t *inited;
  int v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  int v20;
  unint64_t *v21;
  int v22;
  std::string v23;
  std::string v24;
  void *__p;
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _BYTE v29[12];
  char v30;
  uint64_t v31;
  int v32;
  void *v33;
  void *v34;
  uint64_t v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 *v39;
  __int128 *v40;
  uint64_t v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::string *v49;

  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v42.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v5;
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v39, (uint64_t *)&v36, *((_QWORD *)this + 1));
  *(_DWORD *)v29 = 1;
  *(_QWORD *)&v29[4] = 1056964608;
  v30 = 0;
  v31 = 0x300000000;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v32 = 0;
  if (*((_DWORD *)a2 + 35) == 1400)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    *(_DWORD *)v29 = v7[3];
LABEL_8:
    *(_DWORD *)&v29[4] = *((_DWORD *)v7 + 4);
LABEL_9:
    *(_DWORD *)&v29[8] = *((_DWORD *)v7 + 5);
    goto LABEL_10;
  }
  inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
  v9 = *((_DWORD *)a2 + 35);
  *(_DWORD *)v29 = qword_1ED0061F8;
  if (v9 == 1400)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    goto LABEL_8;
  }
  v19 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
  v20 = *((_DWORD *)a2 + 35);
  *(_DWORD *)&v29[4] = qword_1ED0061F0;
  if (v20 == 1400)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    goto LABEL_9;
  }
  v21 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v19);
  v22 = *((_DWORD *)a2 + 35);
  *(_DWORD *)&v29[8] = HIDWORD(qword_1ED0061F0);
  if (v22 == 1400)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v21);
    v7 = &CoreML::Specification::_NonMaximumSuppressionLayerParams_default_instance_;
  }
LABEL_10:
  v30 = *((_BYTE *)v7 + 32);
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "non_maximum_suppression");
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, v36, v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
  memset(&v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, v39, v40, 0xAAAAAAAAAAAAAAABLL * (((char *)v40 - (char *)v39) >> 3));
  memset(&v44, 0, sizeof(v44));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v44, (__int128 *)v24.__r_.__value_.__l.__data_, (__int128 *)v24.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24.__r_.__value_.__l.__size_ - v24.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v43, 0, sizeof(v43));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v43, (__int128 *)v23.__r_.__value_.__l.__data_, (__int128 *)v23.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23.__r_.__value_.__l.__size_ - v23.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v46.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v10[14] + 8))(*(_QWORD *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v47 = v27;
  v48 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  memset(&v46, 0, sizeof(v46));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v46, (__int128 *)v44.__r_.__value_.__l.__data_, (__int128 *)v44.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44.__r_.__value_.__l.__size_ - v44.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v45, 0, sizeof(v45));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v45, (__int128 *)v43.__r_.__value_.__l.__data_, (__int128 *)v43.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43.__r_.__value_.__l.__size_ - v43.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v49 = &v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  v49 = &v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  v13 = v48;
  if (v48)
  {
    v14 = (unint64_t *)&v48->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*v10)
    Espresso::sequential_builder::add_shape_from_kernel();
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  v16 = v28;
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  if (v26 < 0)
    operator delete(__p);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v39);
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  *(_QWORD *)v29 = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
  *(_QWORD *)v29 = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
}

void sub_19C9426F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  *(_QWORD *)(v41 - 56) = v41 - 168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 56));
  *(_QWORD *)(v41 - 56) = v41 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 56));
  *(_QWORD *)(v41 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 56));
  *(_QWORD *)(v41 - 56) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 56));
  if (a20 < 0)
    operator delete(__p);
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  a23 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(a1);
}

void LayerTranslator::addSqueeze(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  unint64_t *inited;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string v18;
  std::string v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _BYTE v24[137];
  int v25;
  __int128 *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  std::string v32;
  std::string *v33;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v32.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v29, (uint64_t *)&v26, *((_QWORD *)this + 1));
  memset(v24, 0, sizeof(v24));
  v25 = 1;
  if (*((_DWORD *)a2 + 35) == 1120)
  {
    v7 = a2[16];
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v7 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
  }
  if (*((_BYTE *)v7 + 36))
  {
    v24[136] = 1;
  }
  else
  {
    if (*((_DWORD *)a2 + 35) == 1120)
    {
      v8 = a2[16];
    }
    else
    {
      inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v8 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
    }
    v9 = *((_DWORD *)v8 + 4);
    if (v9 >= 32)
      v10 = 32;
    else
      v10 = *((_DWORD *)v8 + 4);
    *(_DWORD *)&v24[4] = v10;
    if (v9 >= 1)
    {
      v11 = 0;
      if (v10 <= 1)
        v12 = 1;
      else
        v12 = v10;
      do
      {
        if (*((_DWORD *)a2 + 35) == 1120)
        {
          v13 = a2[16];
        }
        else
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v13 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
        }
        *(_DWORD *)&v24[4 * v11 + 8] = *(_QWORD *)(v13[3] + 8 * v11 + 8);
        ++v11;
      }
      while (v12 != v11);
    }
  }
  v14 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "squeeze");
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v26, v27, 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 3));
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, v29, v30, 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v29) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v22, v14, (uint64_t)__p, (uint64_t)&v32, (uint64_t)v24, (__int128 *)v19.__r_.__value_.__l.__data_, (__int128 *)v19.__r_.__value_.__l.__size_, (__int128 **)&v18);
  v15 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v33 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  v33 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  if (v21 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v29);
  *(_QWORD *)v24 = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  *(_QWORD *)v24 = &v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_19C942AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  a24 = v24 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = v24 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (*(char *)(v24 - 73) < 0)
    operator delete(*(void **)(v24 - 96));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::squeeze_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C942D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addSliceStatic(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  unint64_t *inited;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::runtime_error *exception;
  std::runtime_error *v27;
  std::string v28;
  std::string v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::string __p;
  void **v33[2];
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  int v38;
  _OWORD v39[2];
  unint64_t v40;
  __int128 *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 *v44;
  __int128 *v45;
  uint64_t v46;
  std::string v47;
  void **v48[3];

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v47, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v47.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v5;
  }
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v44, (uint64_t *)&v41, *((_QWORD *)this + 1));
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  v35 = xmmword_19CB31D34;
  v36 = 1;
  v38 = 1;
  v37 = xmmword_19CB31D34;
  memset(v39, 0, sizeof(v39));
  v40 = 0xFFFFFFFF00000000;
  if (*((_DWORD *)a2 + 35) == 995)
  {
    v7 = a2[16];
    v8 = *((_DWORD *)v7 + 4);
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v8 = qword_1ED004EE8;
    if (*((_DWORD *)a2 + 35) == 995)
    {
      v7 = a2[16];
    }
    else
    {
      inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v7 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_;
    }
  }
  if (v8 != *((_DWORD *)v7 + 16))
    goto LABEL_67;
  if (*((_DWORD *)a2 + 35) == 995)
  {
    v9 = a2[16];
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v9 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_;
  }
  if (v8 != *((_DWORD *)v9 + 28))
    goto LABEL_67;
  if (*((_DWORD *)a2 + 35) == 995)
  {
    v10 = a2[16];
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v10 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_;
  }
  if (v8 != *((_DWORD *)v10 + 10)
    || (*((_DWORD *)a2 + 35) != 995
      ? (inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited),
         v11 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_)
      : (v11 = a2[16]),
        v8 != *((_DWORD *)v11 + 22)
     || (*((_DWORD *)a2 + 35) != 995
       ? (inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited),
          v12 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_)
       : (v12 = a2[16]),
         *((_DWORD *)v12 + 34)
      && (*((_DWORD *)a2 + 35) != 995
        ? (inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited),
           v13 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_)
        : (v13 = a2[16]),
          v8 != *((_DWORD *)v13 + 34)))))
  {
LABEL_67:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Mismatched specLayer.slicestatic().*_size values.");
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v8 > 5)
  {
    v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "A params.* static array would be referenced out of bounds.");
    std::runtime_error::runtime_error(v27, &__p);
    __cxa_throw(v27, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v8 >= 1)
  {
    v14 = 0;
    v15 = 20;
    while (*((_DWORD *)a2 + 35) != 995)
    {
      inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v17 = *((_DWORD *)a2 + 35);
      *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + v15 + 4) = *(_QWORD *)(qword_1ED004EF0 + 8 * v14 + 8);
      if (v17 == 995)
      {
        v16 = a2[16];
        goto LABEL_37;
      }
      inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v18 = *((_DWORD *)a2 + 35);
      *(_DWORD *)((char *)v33 + v15) = *(_QWORD *)(qword_1ED004F20 + 8 * v14 + 8);
      if (v18 == 995)
      {
        v16 = a2[16];
        goto LABEL_38;
      }
      inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v19 = *((_DWORD *)a2 + 35);
      *(_DWORD *)((char *)&v35 + v15) = *(_QWORD *)(qword_1ED004F50 + 8 * v14 + 8);
      if (v19 == 995)
      {
        v16 = a2[16];
        goto LABEL_39;
      }
      inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v20 = *((_DWORD *)a2 + 35);
      *((_BYTE *)v39 + v14) = *(_BYTE *)(qword_1ED004F08 + v14 + 8);
      if (v20 != 995)
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v21 = *((_DWORD *)a2 + 35);
        *((_BYTE *)v39 + v14 + 5) = *(_BYTE *)(qword_1ED004F38 + v14 + 8);
        if (v21 == 995)
        {
          v16 = a2[16];
        }
        else
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v16 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_;
        }
        goto LABEL_41;
      }
      v16 = a2[16];
LABEL_40:
      *((_BYTE *)v39 + v14 + 5) = *(_BYTE *)(v16[12] + v14 + 8);
LABEL_41:
      LODWORD(v16) = *((_DWORD *)v16 + 34);
      if ((_DWORD)v16)
      {
        if (*((_DWORD *)a2 + 35) == 995)
        {
          v16 = a2[16];
        }
        else
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v16 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_;
        }
        LOBYTE(v16) = *(_BYTE *)(v16[18] + v14 + 8);
      }
      *((_BYTE *)v39 + v14++ + 10) = (_BYTE)v16;
      v15 += 4;
      if (v8 == v14)
        goto LABEL_57;
    }
    v16 = a2[16];
    *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + v15 + 4) = *(_QWORD *)(v16[3] + 8 * v14 + 8);
LABEL_37:
    *(_DWORD *)((char *)v33 + v15) = *(_QWORD *)(v16[9] + 8 * v14 + 8);
LABEL_38:
    *(_DWORD *)((char *)&v35 + v15) = *(_QWORD *)(v16[15] + 8 * v14 + 8);
LABEL_39:
    *((_BYTE *)v39 + v14) = *(_BYTE *)(v16[6] + v14 + 8);
    goto LABEL_40;
  }
LABEL_57:
  v22 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "general_slice");
  memset(&v29, 0, sizeof(v29));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, v41, v42, 0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (char *)v41) >> 3));
  memset(&v28, 0, sizeof(v28));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, v44, v45, 0xAAAAAAAAAAAAAAABLL * (((char *)v45 - (char *)v44) >> 3));
  Espresso::sequential_builder::add<Espresso::general_slice_params_t>(&v30, v22, (uint64_t)&__p, (uint64_t)&v47, (uint64_t)v33, (__int128 *)v29.__r_.__value_.__l.__data_, (__int128 *)v29.__r_.__value_.__l.__size_, (__int128 **)&v28);
  v23 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v48[0] = (void **)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v48);
  v48[0] = (void **)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v44);
  v33[0] = (void **)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v33);
  v33[0] = (void **)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v33);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
}

void sub_19C943360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      a23 = v25 - 176;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      a23 = v25 - 152;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      if (*(char *)(v25 - 105) < 0)
        operator delete(*(void **)(v25 - 128));
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void Espresso::sequential_builder::add<Espresso::general_slice_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C943620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addSliceDynamic(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  unint64_t *inited;
  int64_t v7;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t i;
  uint64_t *v39;
  uint64_t *v40;
  std::string v41;
  std::string v42;
  void *__p[2];
  char v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  void **v47[2];
  int v48;
  __int128 v49;
  int v50;
  __int128 v51;
  int v52;
  _BYTE v53[32];
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  __int128 *v58;
  __int128 *v59;
  uint64_t v60;
  std::string v61;
  void **v62[3];

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v61.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v5;
  }
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v58, (uint64_t *)&v55, *((_QWORD *)this + 1));
  v47[0] = 0;
  v47[1] = 0;
  v48 = 0;
  v49 = xmmword_19CB31D34;
  v50 = 1;
  v52 = 1;
  v51 = xmmword_19CB31D34;
  memset(v53, 0, sizeof(v53));
  v54 = 0xFFFFFFFF00000000;
  v7 = v56 - v55;
  if (0xAAAAAAAAAAAAAAABLL * ((v56 - v55) >> 3) <= 6)
  {
    if (*((_DWORD *)a2 + 35) == 1000)
    {
      v8 = a2[16];
    }
    else
    {
      inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v7 = v56 - v55;
      v8 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
    }
    v9 = *((_DWORD *)v8 + 16);
    if (v9 >= 5)
      v10 = 5;
    else
      v10 = *((_DWORD *)v8 + 16);
    switch(0xAAAAAAAAAAAAAAABLL * (v7 >> 3))
    {
      case 2uLL:
        if (v9 < 1)
          goto LABEL_94;
        v11 = 0;
        if (v10 <= 1)
          v12 = 1;
        else
          v12 = v10;
        v13 = 20;
        while (*((_DWORD *)a2 + 35) != 1000)
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v15 = *((_DWORD *)a2 + 35);
          *(_DWORD *)((char *)v47 + v13) = *(_QWORD *)(qword_1ED005318 + 8 * v11 + 8);
          if (v15 == 1000)
          {
            v14 = a2[16];
            goto LABEL_21;
          }
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v16 = *((_DWORD *)a2 + 35);
          *(_DWORD *)((char *)&v49 + v13) = *(_QWORD *)(qword_1ED005348 + 8 * v11 + 8);
          if (v16 == 1000)
          {
            v14 = a2[16];
            goto LABEL_22;
          }
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v17 = *((_DWORD *)a2 + 35);
          v53[v11] = *(_BYTE *)(qword_1ED005300 + v11 + 8);
          if (v17 != 1000)
          {
            inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            v18 = *((_DWORD *)a2 + 35);
            v53[v11 + 5] = *(_BYTE *)(qword_1ED005330 + v11 + 8);
            if (v18 == 1000)
            {
              v14 = a2[16];
            }
            else
            {
              inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              v14 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
            }
            goto LABEL_24;
          }
          v14 = a2[16];
LABEL_23:
          v53[v11 + 5] = *(_BYTE *)(v14[9] + v11 + 8);
LABEL_24:
          LODWORD(v14) = *((_DWORD *)v14 + 28);
          if ((_DWORD)v14)
          {
            if (*((_DWORD *)a2 + 35) == 1000)
            {
              v14 = a2[16];
            }
            else
            {
              inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              v14 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
            }
            LOBYTE(v14) = *(_BYTE *)(v14[15] + v11 + 8);
          }
          v53[v11++ + 10] = (_BYTE)v14;
          v13 += 4;
          if (v12 == v11)
            goto LABEL_94;
        }
        v14 = a2[16];
        *(_DWORD *)((char *)v47 + v13) = *(_QWORD *)(v14[6] + 8 * v11 + 8);
LABEL_21:
        *(_DWORD *)((char *)&v49 + v13) = *(_QWORD *)(v14[12] + 8 * v11 + 8);
LABEL_22:
        v53[v11] = *(_BYTE *)(v14[3] + v11 + 8);
        goto LABEL_23;
      case 3uLL:
        if (v9 < 1)
          goto LABEL_94;
        v19 = 0;
        if (v10 <= 1)
          v20 = 1;
        else
          v20 = v10;
        while (*((_DWORD *)a2 + 35) != 1000)
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v22 = *((_DWORD *)a2 + 35);
          *((_DWORD *)&v51 + v19) = *(_QWORD *)(qword_1ED005348 + 8 * v19 + 8);
          if (v22 == 1000)
          {
            v21 = a2[16];
            goto LABEL_46;
          }
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v23 = *((_DWORD *)a2 + 35);
          v53[v19] = *(_BYTE *)(qword_1ED005300 + v19 + 8);
          if (v23 != 1000)
          {
            inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            v24 = *((_DWORD *)a2 + 35);
            v53[v19 + 5] = *(_BYTE *)(qword_1ED005330 + v19 + 8);
            if (v24 == 1000)
            {
              v21 = a2[16];
            }
            else
            {
              inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              v21 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
            }
            goto LABEL_48;
          }
          v21 = a2[16];
LABEL_47:
          v53[v19 + 5] = *(_BYTE *)(v21[9] + v19 + 8);
LABEL_48:
          LODWORD(v21) = *((_DWORD *)v21 + 28);
          if ((_DWORD)v21)
          {
            if (*((_DWORD *)a2 + 35) == 1000)
            {
              v21 = a2[16];
            }
            else
            {
              inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              v21 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
            }
            LOBYTE(v21) = *(_BYTE *)(v21[15] + v19 + 8);
          }
          v53[v19++ + 10] = (_BYTE)v21;
          if (v20 == v19)
            goto LABEL_94;
        }
        v21 = a2[16];
        *((_DWORD *)&v51 + v19) = *(_QWORD *)(v21[12] + 8 * v19 + 8);
LABEL_46:
        v53[v19] = *(_BYTE *)(v21[3] + v19 + 8);
        goto LABEL_47;
      case 4uLL:
        if (v9 < 1)
          goto LABEL_94;
        v25 = 0;
        if (v10 <= 1)
          v26 = 1;
        else
          v26 = v10;
        break;
      case 5uLL:
        if (v9 >= 1)
        {
          v30 = 0;
          if (v10 <= 1)
            v31 = 1;
          else
            v31 = v10;
          do
          {
            if (*((_DWORD *)a2 + 35) == 1000)
            {
              v32 = a2[16];
              v53[v30 + 5] = *(_BYTE *)(v32[9] + v30 + 8);
            }
            else
            {
              inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              v33 = *((_DWORD *)a2 + 35);
              v53[v30 + 5] = *(_BYTE *)(qword_1ED005330 + v30 + 8);
              if (v33 == 1000)
              {
                v32 = a2[16];
              }
              else
              {
                inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
                v32 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
              }
            }
            LODWORD(v32) = *((_DWORD *)v32 + 28);
            if ((_DWORD)v32)
            {
              if (*((_DWORD *)a2 + 35) == 1000)
              {
                v32 = a2[16];
              }
              else
              {
                inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
                v32 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
              }
              LOBYTE(v32) = *(_BYTE *)(v32[15] + v30 + 8);
            }
            v53[v30++ + 10] = (_BYTE)v32;
          }
          while (v31 != v30);
        }
        goto LABEL_94;
      case 6uLL:
        for (i = 0; ; ++i)
        {
          if (*((_DWORD *)a2 + 35) == 1000)
          {
            v39 = a2[16];
          }
          else
          {
            inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            v39 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
          }
          if (i >= *((int *)v39 + 28))
            break;
          if (*((_DWORD *)a2 + 35) == 1000)
          {
            v40 = a2[16];
          }
          else
          {
            inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            v40 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
          }
          v53[i + 10] = *(_BYTE *)(v40[15] + i + 8);
        }
        goto LABEL_94;
      default:
        goto LABEL_94;
    }
    do
    {
      if (*((_DWORD *)a2 + 35) == 1000)
      {
        v27 = a2[16];
        v53[v25] = *(_BYTE *)(v27[3] + v25 + 8);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        v28 = *((_DWORD *)a2 + 35);
        v53[v25] = *(_BYTE *)(qword_1ED005300 + v25 + 8);
        if (v28 != 1000)
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v29 = *((_DWORD *)a2 + 35);
          v53[v25 + 5] = *(_BYTE *)(qword_1ED005330 + v25 + 8);
          if (v29 == 1000)
          {
            v27 = a2[16];
          }
          else
          {
            inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            v27 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
          }
          goto LABEL_69;
        }
        v27 = a2[16];
      }
      v53[v25 + 5] = *(_BYTE *)(v27[9] + v25 + 8);
LABEL_69:
      LODWORD(v27) = *((_DWORD *)v27 + 28);
      if ((_DWORD)v27)
      {
        if (*((_DWORD *)a2 + 35) == 1000)
        {
          v27 = a2[16];
        }
        else
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v27 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
        }
        LOBYTE(v27) = *(_BYTE *)(v27[15] + v25 + 8);
      }
      v53[v25++ + 10] = (_BYTE)v27;
    }
    while (v26 != v25);
  }
LABEL_94:
  v34 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice");
  memset(&v42, 0, sizeof(v42));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v42, (__int128 *)v55, (__int128 *)v56, 0xAAAAAAAAAAAAAAABLL * ((v56 - v55) >> 3));
  memset(&v41, 0, sizeof(v41));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v41, v58, v59, 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (char *)v58) >> 3));
  Espresso::sequential_builder::add<Espresso::general_slice_params_t>(&v45, v34, (uint64_t)__p, (uint64_t)&v61, (uint64_t)v47, (__int128 *)v42.__r_.__value_.__l.__data_, (__int128 *)v42.__r_.__value_.__l.__size_, (__int128 **)&v41);
  v35 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v62[0] = (void **)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v62);
  v62[0] = (void **)&v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v62);
  if (v44 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v58);
  v47[0] = (void **)&v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v47);
  v47[0] = (void **)&v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v47);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
}

void sub_19C943E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 176;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 105) < 0)
    operator delete(*(void **)(v23 - 128));
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addBatchnorm(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  CoreML::Specification::WeightParams *v9;
  CoreML::Specification::WeightParams *v10;
  CoreML::Specification::WeightParams *v11;
  CoreML::Specification::WeightParams *v12;
  float v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  BOOL v56;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  uint64_t v72;
  BOOL v73;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  BOOL v89;
  LayerTranslator *v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  BOOL v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t *v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  unint64_t *p_shared_owners;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t **v114;
  uint64_t v115;
  void *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  __int128 v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *size;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  int v135;
  int v136;
  _QWORD *v137;
  std::__shared_weak_count *v138;
  std::string v139;
  std::string v140;
  void *__p;
  std::__shared_weak_count *v142;
  char v143;
  __int128 v144;
  _BYTE v145[12];
  float v146;
  int v147;
  __int16 v148;
  __int128 v149;
  __int128 v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  void (**v154)(CoreML::Specification::BatchnormLayerParams *__hidden);
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t *v159;
  __int128 v160;
  int v161;
  __int128 *v162;
  __int128 *v163;
  uint64_t v164;
  __int128 *v165;
  __int128 *v166;
  uint64_t v167;
  std::string v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  void *v172;
  void *v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  std::string v187;
  __int128 v188;
  void **v189[3];

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v168.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v5;
  }
  v165 = 0;
  v166 = 0;
  v167 = 0;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v165, (uint64_t *)&v162, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 160)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
  }
  v154 = &off_1E3D52550;
  v155 = 0;
  v161 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v155, v8 & 0xFFFFFFFFFFFFFFFELL);
  if (v7 == &CoreML::Specification::_BatchnormLayerParams_default_instance_)
  {
    v10 = 0;
    v156 = 0;
    v157 = 0;
    v158 = 0;
  }
  else
  {
    if (v7[2])
    {
      v9 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v9, (const CoreML::Specification::WeightParams *)v7[2]);
    }
    else
    {
      v9 = 0;
    }
    v156 = (uint64_t *)v9;
    if (v7[3])
    {
      v11 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v11, (const CoreML::Specification::WeightParams *)v7[3]);
    }
    else
    {
      v11 = 0;
    }
    v157 = (uint64_t *)v11;
    if (v7[4])
    {
      v12 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v12, (const CoreML::Specification::WeightParams *)v7[4]);
    }
    else
    {
      v12 = 0;
    }
    v158 = (uint64_t *)v12;
    if (v7[5])
    {
      v10 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v10, (const CoreML::Specification::WeightParams *)v7[5]);
    }
    else
    {
      v10 = 0;
    }
  }
  v159 = (uint64_t *)v10;
  v160 = *((_OWORD *)v7 + 3);
  *(_QWORD *)&v145[4] = 0;
  v147 = 1063675494;
  v148 = 0;
  v149 = 0u;
  v150 = 0u;
  v151 = 1065353216;
  v152 = 0;
  v153 = 0x200000000;
  *(_DWORD *)v145 = v160;
  if (BYTE8(v160))
  {
    *(_DWORD *)&v145[4] = 1;
    if (BYTE9(v160))
      *(_DWORD *)&v145[8] = 1;
  }
  if (fabsf(*((float *)&v160 + 3)) >= 0.000001)
    v13 = *((float *)&v160 + 3);
  else
    v13 = 0.00001;
  v146 = v13;
  v14 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "batchnorm");
  memset(&v140, 0, sizeof(v140));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v140, v162, v163, 0xAAAAAAAAAAAAAAABLL * (((char *)v163 - (char *)v162) >> 3));
  memset(&v139, 0, sizeof(v139));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v139, v165, v166, 0xAAAAAAAAAAAAAAABLL * (((char *)v166 - (char *)v165) >> 3));
  *(_QWORD *)&v170 = 0;
  v169 = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v169, (__int128 *)v140.__r_.__value_.__l.__data_, (__int128 *)v140.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v140.__r_.__value_.__l.__size_ - v140.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v187, 0, sizeof(v187));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v187, (__int128 *)v139.__r_.__value_.__l.__data_, (__int128 *)v139.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v139.__r_.__value_.__l.__size_ - v139.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v181) = (***(uint64_t (****)(_QWORD))(v14[14] + 8))(*(_QWORD *)(v14[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v188 = v144;
  if (*((_QWORD *)&v144 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v181 = 0uLL;
  *(_QWORD *)&v182 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v181, (__int128 *)v169, *((__int128 **)&v169 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v169 + 1) - v169) >> 3));
  v175 = 0uLL;
  *(_QWORD *)&v176 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v175, (__int128 *)v187.__r_.__value_.__l.__data_, (__int128 *)v187.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v187.__r_.__value_.__l.__size_ - v187.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v189[0] = (void **)&v175;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v189);
  v189[0] = (void **)&v181;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v189);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
  if (*((_QWORD *)&v188 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (*v14)
    Espresso::sequential_builder::add_shape_from_kernel();
  *(_QWORD *)&v181 = &v187;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
  *(_QWORD *)&v181 = &v169;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
  *(_QWORD *)&v181 = &v139;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
  *(_QWORD *)&v181 = &v140;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
  if (v143 < 0)
    operator delete(__p);
  v20 = v144;
  *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v144;
  if (*((_QWORD *)&v144 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__p, 16 * v160, 1, 1, 1);
  if (v156)
    v23 = v156;
  else
    v23 = &CoreML::Specification::_WeightParams_default_instance_;
  v24 = v23[5];
  if (*(char *)(v24 + 23) < 0)
    v25 = *(_QWORD *)(v24 + 8);
  else
    v25 = *(unsigned __int8 *)(v24 + 23);
  v26 = v23[6];
  v27 = *(unsigned __int8 *)(v26 + 23);
  if (*(char *)(v26 + 23) < 0)
    v28 = *(_QWORD *)(v26 + 8);
  else
    v28 = *(unsigned __int8 *)(v26 + 23);
  v29 = *((_DWORD *)v23 + 4);
  v30 = v23[7];
  v31 = *(unsigned __int8 *)(v30 + 23);
  if (*(char *)(v30 + 23) < 0)
    v32 = *(_QWORD *)(v30 + 8);
  else
    v32 = *(unsigned __int8 *)(v30 + 23);
  if (v29 <= 0)
    v33 = 1;
  else
    v33 = 2;
  if (v25)
    v34 = v33;
  else
    v34 = v29 > 0;
  if (v28)
    ++v34;
  if (v32)
    ++v34;
  if (v34 > 1)
  {
    v35 = 4;
LABEL_98:
    v136 = v35;
    goto LABEL_99;
  }
  if (v34)
    v36 = 0;
  else
    v36 = 5;
  v136 = v36;
  if (v29 <= 0 && v34 != 0)
  {
    if ((*(_BYTE *)(v24 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v24 + 8))
        goto LABEL_77;
    }
    else if (*(_BYTE *)(v24 + 23))
    {
LABEL_77:
      v35 = 1;
      goto LABEL_98;
    }
    if ((v27 & 0x80) != 0)
      v27 = *(_QWORD *)(v26 + 8);
    v38 = v23[8];
    if (v23 == &CoreML::Specification::_WeightParams_default_instance_ || (v27 ? (v39 = v38 == 0) : (v39 = 1), v39))
    {
      if ((v31 & 0x80) != 0)
        v31 = *(_QWORD *)(v30 + 8);
      if (v38)
        v40 = v31 == 0;
      else
        v40 = 1;
      if (v40 || v23 == &CoreML::Specification::_WeightParams_default_instance_)
        v35 = 5;
      else
        v35 = 3;
    }
    else
    {
      v35 = 2;
    }
    goto LABEL_98;
  }
LABEL_99:
  v42 = v157;
  if (!v157)
    v42 = &CoreML::Specification::_WeightParams_default_instance_;
  v43 = v42[5];
  if (*(char *)(v43 + 23) < 0)
    v44 = *(_QWORD *)(v43 + 8);
  else
    v44 = *(unsigned __int8 *)(v43 + 23);
  v45 = v42[6];
  v46 = *(unsigned __int8 *)(v45 + 23);
  if (*(char *)(v45 + 23) < 0)
    v47 = *(_QWORD *)(v45 + 8);
  else
    v47 = *(unsigned __int8 *)(v45 + 23);
  v48 = *((_DWORD *)v42 + 4);
  v49 = v42[7];
  v50 = *(unsigned __int8 *)(v49 + 23);
  if (*(char *)(v49 + 23) < 0)
    v51 = *(_QWORD *)(v49 + 8);
  else
    v51 = *(unsigned __int8 *)(v49 + 23);
  if (v48 <= 0)
    v52 = 1;
  else
    v52 = 2;
  if (v44)
    v53 = v52;
  else
    v53 = v48 > 0;
  if (v47)
    ++v53;
  if (v51)
    ++v53;
  if (v53 > 1)
  {
    v54 = 4;
    goto LABEL_148;
  }
  if (v53)
    v54 = 0;
  else
    v54 = 5;
  if (v48 <= 0 && v53)
  {
    if ((*(_BYTE *)(v43 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v43 + 8))
        goto LABEL_129;
    }
    else if (*(_BYTE *)(v43 + 23))
    {
LABEL_129:
      v54 = 1;
      goto LABEL_148;
    }
    if ((v46 & 0x80) != 0)
      v46 = *(_QWORD *)(v45 + 8);
    v55 = v42[8];
    if (v42 != &CoreML::Specification::_WeightParams_default_instance_ && v46 && v55)
    {
      v54 = 2;
    }
    else
    {
      if ((v50 & 0x80) != 0)
        v50 = *(_QWORD *)(v49 + 8);
      if (v55)
        v56 = v50 == 0;
      else
        v56 = 1;
      if (v56 || v42 == &CoreML::Specification::_WeightParams_default_instance_)
        v54 = 5;
      else
        v54 = 3;
    }
  }
LABEL_148:
  v58 = v158;
  if (!v158)
    v58 = &CoreML::Specification::_WeightParams_default_instance_;
  v59 = v58[5];
  if (*(char *)(v59 + 23) < 0)
    v60 = *(_QWORD *)(v59 + 8);
  else
    v60 = *(unsigned __int8 *)(v59 + 23);
  v61 = v58[6];
  v62 = *(unsigned __int8 *)(v61 + 23);
  if (*(char *)(v61 + 23) < 0)
    v63 = *(_QWORD *)(v61 + 8);
  else
    v63 = *(unsigned __int8 *)(v61 + 23);
  v64 = *((_DWORD *)v58 + 4);
  v65 = v58[7];
  v66 = *(unsigned __int8 *)(v65 + 23);
  if (*(char *)(v65 + 23) < 0)
    v67 = *(_QWORD *)(v65 + 8);
  else
    v67 = *(unsigned __int8 *)(v65 + 23);
  if (v64 <= 0)
    v68 = 1;
  else
    v68 = 2;
  if (v60)
    v69 = v68;
  else
    v69 = v64 > 0;
  if (v63)
    ++v69;
  if (v67)
    ++v69;
  if (v69 > 1)
  {
    v70 = 4;
LABEL_197:
    v135 = v70;
    goto LABEL_198;
  }
  if (v69)
    v71 = 0;
  else
    v71 = 5;
  v135 = v71;
  if (v64 <= 0 && v69)
  {
    if ((*(_BYTE *)(v59 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v59 + 8))
        goto LABEL_178;
    }
    else if (*(_BYTE *)(v59 + 23))
    {
LABEL_178:
      v70 = 1;
      goto LABEL_197;
    }
    if ((v62 & 0x80) != 0)
      v62 = *(_QWORD *)(v61 + 8);
    v72 = v58[8];
    if (v58 != &CoreML::Specification::_WeightParams_default_instance_ && v62 && v72)
    {
      v70 = 2;
    }
    else
    {
      if ((v66 & 0x80) != 0)
        v66 = *(_QWORD *)(v65 + 8);
      if (v72)
        v73 = v66 == 0;
      else
        v73 = 1;
      if (v73 || v58 == &CoreML::Specification::_WeightParams_default_instance_)
        v70 = 5;
      else
        v70 = 3;
    }
    goto LABEL_197;
  }
LABEL_198:
  v75 = v159;
  if (!v159)
    v75 = &CoreML::Specification::_WeightParams_default_instance_;
  v76 = v75[5];
  if (*(char *)(v76 + 23) < 0)
    v77 = *(_QWORD *)(v76 + 8);
  else
    v77 = *(unsigned __int8 *)(v76 + 23);
  v78 = v75[6];
  v79 = *(unsigned __int8 *)(v78 + 23);
  if (*(char *)(v78 + 23) < 0)
    v80 = *(_QWORD *)(v78 + 8);
  else
    v80 = *(unsigned __int8 *)(v78 + 23);
  v81 = *((_DWORD *)v75 + 4);
  v82 = v75[7];
  v83 = *(unsigned __int8 *)(v82 + 23);
  if (*(char *)(v82 + 23) < 0)
    v84 = *(_QWORD *)(v82 + 8);
  else
    v84 = *(unsigned __int8 *)(v82 + 23);
  if (v81 <= 0)
    v85 = 1;
  else
    v85 = 2;
  if (v77)
    v86 = v85;
  else
    v86 = v81 > 0;
  if (v80)
    ++v86;
  if (v84)
    ++v86;
  if (v86 > 1)
  {
    v87 = 4;
    goto LABEL_247;
  }
  if (v86)
    v87 = 0;
  else
    v87 = 5;
  if (v81 <= 0 && v86)
  {
    if ((*(_BYTE *)(v76 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v76 + 8))
        goto LABEL_228;
    }
    else if (*(_BYTE *)(v76 + 23))
    {
LABEL_228:
      v87 = 1;
      goto LABEL_247;
    }
    if ((v79 & 0x80) != 0)
      v79 = *(_QWORD *)(v78 + 8);
    v88 = v75[8];
    if (v75 != &CoreML::Specification::_WeightParams_default_instance_ && v79 && v88)
    {
      v87 = 2;
    }
    else
    {
      if ((v83 & 0x80) != 0)
        v83 = *(_QWORD *)(v82 + 8);
      if (v88)
        v89 = v83 == 0;
      else
        v89 = 1;
      if (v89 || v75 == &CoreML::Specification::_WeightParams_default_instance_)
        v87 = 5;
      else
        v87 = 3;
    }
  }
LABEL_247:
  v91 = this;
  v92 = __p;
  v93 = *((_QWORD *)__p + 2);
  v94 = v160;
  std::string::basic_string[abi:ne180100]<0>(&v181, "gamma");
  batchNormAssignWeightToFloatBlob(v93, (uint64_t)v23, v136, v94, (uint64_t)&v168, (uint64_t)&v181, v13);
  if (SBYTE7(v182) < 0)
    operator delete((void *)v181);
  v95 = v157;
  v96 = v160;
  std::string::basic_string[abi:ne180100]<0>(&v181, "beta");
  if (v95)
    v97 = v95;
  else
    v97 = &CoreML::Specification::_WeightParams_default_instance_;
  batchNormAssignWeightToFloatBlob(v93 + 4, (uint64_t)v97, v54, v96, (uint64_t)&v168, (uint64_t)&v181, v13);
  if (SBYTE7(v182) < 0)
    operator delete((void *)v181);
  if (BYTE8(v160))
  {
    v98 = v160;
    if ((_QWORD)v160)
    {
      v99 = 0;
      v100 = v92[2] + 8;
      v101 = 1;
      do
      {
        *(_QWORD *)(v100 + 4 * v99) = 0x3F80000000000000;
        v102 = v98 > v101++;
        v99 += 4;
      }
      while (v102);
    }
  }
  else
  {
    v103 = v158;
    v104 = v160;
    std::string::basic_string[abi:ne180100]<0>(&v181, "mean");
    if (v103)
      v105 = v103;
    else
      v105 = &CoreML::Specification::_WeightParams_default_instance_;
    batchNormAssignWeightToFloatBlob(v93 + 8, (uint64_t)v105, v135, v104, (uint64_t)&v168, (uint64_t)&v181, v13);
    if (SBYTE7(v182) < 0)
      operator delete((void *)v181);
    v107 = v159;
    v106 = v160;
    std::string::basic_string[abi:ne180100]<0>(&v181, "variance");
    if (v107)
      v108 = v107;
    else
      v108 = &CoreML::Specification::_WeightParams_default_instance_;
    batchNormAssignWeightToFloatBlob(v93 + 12, (uint64_t)v108, v87, v106, (uint64_t)&v168, (uint64_t)&v181, v13);
    if (SBYTE7(v182) < 0)
      operator delete((void *)v181);
  }
  v137 = v92;
  v138 = v142;
  if (v142)
  {
    p_shared_owners = (unint64_t *)&v142->__shared_owners_;
    do
      v110 = __ldxr(p_shared_owners);
    while (__stxr(v110 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v20 + 392))(v20, &v137);
  v111 = v138;
  if (v138)
  {
    v112 = (unint64_t *)&v138->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (**((_BYTE **)v91 + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)v91, (uint64_t *)&v165);
  }
  else
  {
    v114 = (uint64_t **)*((_QWORD *)v91 + 1);
    v115 = std::map<std::string,std::string>::at((uint64_t)v114, v162);
    v181 = *(_OWORD *)v115;
    v182 = *(_OWORD *)(v115 + 16);
    v183 = *(_QWORD *)(v115 + 32);
    v184 = 0;
    v185 = 0;
    v186 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v184, *(const void **)(v115 + 40), *(_QWORD *)(v115 + 48), (uint64_t)(*(_QWORD *)(v115 + 48) - *(_QWORD *)(v115 + 40)) >> 2);
    v175 = v181;
    v176 = v182;
    v116 = v184;
    v177 = v183;
    v178 = 0;
    v179 = 0;
    v180 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v178, v184, v185, (v185 - (uint64_t)v184) >> 2);
    v169 = v175;
    v170 = v176;
    v117 = v178;
    v171 = v177;
    v172 = 0;
    v173 = 0;
    v174 = 0;
    v118 = v179;
    v119 = (v179 - (uint64_t)v178) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v172, v178, v179, v119);
    EspressoConverter::validateShape((int *)&v169, *((_QWORD *)a2 + 14), (uint64_t)v165);
    if (v172)
    {
      v173 = v172;
      operator delete(v172);
    }
    *(_QWORD *)&v188 = v165;
    v120 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, v165, (__int128 **)&v188);
    v121 = v176;
    *(_OWORD *)(v120 + 56) = v175;
    *(_OWORD *)(v120 + 72) = v121;
    *((_QWORD *)v120 + 11) = v177;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v120 + 96, v117, v118, v119);
    if (v117)
      operator delete(v117);
    if (v116)
      operator delete(v116);
  }
  v122 = v142;
  if (v142)
  {
    v123 = (unint64_t *)&v142->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  size = (std::__shared_weak_count *)v187.__r_.__value_.__l.__size_;
  if (v187.__r_.__value_.__l.__size_)
  {
    v126 = (unint64_t *)(v187.__r_.__value_.__l.__size_ + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v128 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v129 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  CoreML::Specification::BatchnormLayerParams::~BatchnormLayerParams((CoreML::Specification::BatchnormLayerParams *)&v154);
  *(_QWORD *)v145 = &v162;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v145);
  *(_QWORD *)v145 = &v165;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v145);
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  return v136 == 1 || v54 == 1 || v135 == 1 || v87 == 1;
}

void sub_19C944C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p)
{
  void *v61;
  void *v62;
  uint64_t v63;

  if (__p)
  {
    operator delete(__p);
    if (!v62)
    {
LABEL_3:
      if (!v61)
      {
LABEL_8:
        std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
        std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v63 - 160);
        std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
        CoreML::Specification::BatchnormLayerParams::~BatchnormLayerParams((CoreML::Specification::BatchnormLayerParams *)&a34);
        a24 = (uint64_t)&a43;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
        a24 = (uint64_t)&a46;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
        if (a54 < 0)
          operator delete(a49);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v61);
      goto LABEL_8;
    }
  }
  else if (!v62)
  {
    goto LABEL_3;
  }
  operator delete(v62);
  if (!v61)
    goto LABEL_8;
  goto LABEL_7;
}

void batchNormAssignWeightToFloatBlob(uint64_t a1, uint64_t a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int v13;
  const std::string::value_type *v14;
  _BOOL4 v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  float v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  float v25;
  float v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t WeightParamSizeInBytes;
  uint64_t v31;
  unsigned int v32;
  float v33;
  float v34;
  unint64_t v35;
  std::runtime_error *v36;
  std::runtime_error *exception;
  std::string *v38;
  __int128 v39;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::runtime_error *v47;
  unint64_t v48;
  std::runtime_error *v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string __p;

  v13 = *(char *)(a6 + 23);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = (const std::string::value_type *)a6;
    if (v13 != 8)
      goto LABEL_7;
LABEL_6:
    v15 = *(_QWORD *)v14 == 0x65636E6169726176;
    goto LABEL_8;
  }
  if (*(_QWORD *)(a6 + 8) == 8)
  {
    v14 = *(const std::string::value_type **)a6;
    goto LABEL_6;
  }
LABEL_7:
  v15 = 0;
LABEL_8:
  if (a3 == 2)
  {
    if (!CoreML::hasSufficientBytesInQuantizedWeightParam((uint64_t *)a2, a4))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v38 = std::string::append(&v50, "has insufficient bytes in quantized ");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      v40 = *(char *)(a6 + 23);
      if (v40 >= 0)
        v41 = (const std::string::value_type *)a6;
      else
        v41 = *(const std::string::value_type **)a6;
      if (v40 >= 0)
        v42 = *(unsigned __int8 *)(a6 + 23);
      else
        v42 = *(_QWORD *)(a6 + 8);
      v43 = std::string::append(&v51, v41, v42);
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v45 = std::string::append(&v52, ".");
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &__p);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v28 = &CoreML::Specification::_QuantizationParams_default_instance_;
    if (*(_QWORD *)(a2 + 64))
      v28 = *(uint64_t **)(a2 + 64);
    v29 = v28[2];
    WeightParamSizeInBytes = (int)EspressoConverter::getWeightParamSizeInBytes((uint64_t *)a2);
    if (WeightParamSizeInBytes > (v29 * a4 + 7) >> 3)
    {
      v48 = WeightParamSizeInBytes;
      v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      batchNormQuantizedWeightArrayTooShortErrorString(&__p, a5, a6, v48, v29);
      std::runtime_error::runtime_error(v49, &__p);
      __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    CoreML::dequantizeWeightParamSpec((CoreML *)&__p, (const CoreML::Specification::WeightParams *)a2, a4);
    v22 = (char *)__p.__r_.__value_.__r.__words[0];
    if (a4)
    {
      v31 = 0;
      v32 = 1;
      do
      {
        v33 = *(float *)&v22[v31];
        v34 = sqrtf(v33 + a7);
        if (v15)
          v33 = v34;
        *(float *)(a1 + 4 * v31) = v33;
        v35 = v32;
        v31 += 4;
        ++v32;
      }
      while (v35 < a4);
      goto LABEL_35;
    }
LABEL_34:
    if (!v22)
      return;
    goto LABEL_35;
  }
  if (a3 == 1)
  {
    EspressoConverter::readHalfPrecisionWeightsFromByteStream((uint64_t)&__p, *(void ***)(a2 + 40));
    v22 = (char *)__p.__r_.__value_.__r.__words[0];
    if (a4)
    {
      v23 = 0;
      v24 = 1;
      do
      {
        v25 = *(float *)&v22[v23];
        v26 = sqrtf(v25 + a7);
        if (v15)
          v25 = v26;
        *(float *)(a1 + 4 * v23) = v25;
        v27 = v24;
        v23 += 4;
        ++v24;
      }
      while (v27 < a4);
LABEL_35:
      operator delete(v22);
      return;
    }
    goto LABEL_34;
  }
  if (a3)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    batchNormUncompilableWeightTypeErrorString(&__p, a5);
    std::runtime_error::runtime_error(v36, &__p);
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((int)EspressoConverter::getWeightParamSize(a2) != a4)
  {
    v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    batchNormChannelMismatchErrorString(&__p, a5, a6);
    std::runtime_error::runtime_error(v47, &__p);
    __cxa_throw(v47, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (a4)
  {
    v16 = 0;
    v17 = *(_QWORD *)(a2 + 24);
    v18 = 1;
    do
    {
      v19 = *(float *)(v17 + 4 * (int)(v18 - 1) + 8);
      v20 = sqrtf(v19 + a7);
      if (v15)
        v19 = v20;
      *(float *)(a1 + 4 * v16) = v19;
      v21 = v18++;
      v16 += 4;
    }
    while (v21 < a4);
  }
}

void sub_19C945214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  char v36;

  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if ((v36 & 1) != 0)
    __cxa_free_exception(v35);
  _Unwind_Resume(exception_object);
}

void batchNormChannelMismatchErrorString(std::string *a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string v13;
  std::string v14;
  std::string v15;

  std::operator+<char>();
  v5 = std::string::append(&v13, " ,size of ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = *(char *)(a3 + 23);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)a3;
  else
    v8 = *(const std::string::value_type **)a3;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  v10 = std::string::append(&v14, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v15, " must be equal to the number of channels.");
  *a1 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_19C9453BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void batchNormQuantizedWeightArrayTooShortErrorString(std::string *a1, uint64_t a2, uint64_t a3, unint64_t __val, unint64_t a5)
{
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *p_p;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string __p;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;

  std::to_string(&v33, __val);
  v9 = std::string::insert(&v33, 0, "Size of quantized weights (in bytes) = ");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v34, " is smaller than the total bytes required for ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = *(char *)(a3 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a3;
  else
    v14 = *(const std::string::value_type **)a3;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  v16 = std::string::append(&v35, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v36, "for ");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v22 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v38, "-bit quantization in layer ");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = *(char *)(a2 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)a2;
  else
    v27 = *(const std::string::value_type **)a2;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a2 + 23);
  else
    v28 = *(_QWORD *)(a2 + 8);
  v29 = std::string::append(&v39, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v40, ".");
  *a1 = *v31;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_19C945668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(char *)(v47 - 57) < 0)
    operator delete(*(void **)(v47 - 80));
  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  if (*(char *)(v47 - 121) < 0)
    operator delete(*(void **)(v47 - 144));
  if (a14 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void batchNormUncompilableWeightTypeErrorString(std::string *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  std::string v14;

  std::operator+<char>();
  v4 = std::string::append(&v12, " of layer ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v13, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v14, " cannot be compiled.");
  *a1 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_19C945838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void LayerTranslator::addClip(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  unint64_t *inited;
  int v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 **v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  int v25;
  int v26;
  __int128 *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 *v30;
  __int128 *v31;
  uint64_t v32;
  std::string v33;
  std::string *v34;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v33.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v5;
  }
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v30, (uint64_t *)&v27, *((_QWORD *)this + 1));
  v23 = 897988541;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v20 = (__int128 **)119;
  if (*((_DWORD *)a2 + 35) == 660)
  {
    v7 = a2[16];
    v21 = *((_DWORD *)v7 + 4);
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v9 = *((_DWORD *)a2 + 35);
    v21 = qword_1ED002FD8;
    if (v9 == 660)
    {
      v7 = a2[16];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v7 = &CoreML::Specification::_ClipLayerParams_default_instance_;
    }
  }
  v22 = *((_DWORD *)v7 + 5);
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v18, v10, (uint64_t)__p, (uint64_t)&v33, (uint64_t)&v20, (__int128 *)v15.__r_.__value_.__l.__data_, (__int128 *)v15.__r_.__value_.__l.__size_, (__int128 **)&v14);
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v34 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (v17 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v30);
  v20 = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_19C945AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(_QWORD *)(v24 - 40) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a20 < 0)
    operator delete(__p);
  a23 = v24 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v24 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v24 - 41) < 0)
    operator delete(*(void **)(v24 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addExp2(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[2] = (void **)897988541;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v16[0] = (void **)35;
  v16[1] = (void **)1065353216;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C945D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addPooling3d(LayerTranslator *this, const CoreML::Specification::Pooling3DLayerParams **a2)
{
  const CoreML::Specification::Pooling3DLayerParams *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::Pooling3DLayerParams *v7;
  std::logic_error *exception;
  std::string *v9;
  __int128 v10;
  __int16 v11;
  __int128 v12;
  int8x8_t v13;
  __int16 v14;
  __int16 v15;
  unsigned int v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::logic_error *v21;
  std::string *v22;
  __int128 v23;
  std::string v24;
  std::string v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::string v28;
  std::string v29;
  _DWORD v30[2];
  __int128 v31;
  int v32;
  int v33;
  int v34;
  __int16 v35;
  __int16 v36;
  int v37;
  int8x8_t v38;
  __int16 v39;
  __int16 v40;
  int v41;
  __int128 **v42;
  uint64_t v43;
  int __val;
  int32x2_t v45;
  int v46;
  int v47;
  int32x2_t v48;
  int v49;
  int v50;
  int32x4_t v51;
  unsigned __int8 v52;
  int v53;
  __int128 *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 *v57;
  __int128 *v58;
  uint64_t v59;
  std::string v60;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v60.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v5;
  }
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v57, (uint64_t *)&v54, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1465)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::Pooling3DLayerParams *)&CoreML::Specification::_Pooling3DLayerParams_default_instance_;
  }
  CoreML::Specification::Pooling3DLayerParams::Pooling3DLayerParams((CoreML::Specification::Pooling3DLayerParams *)&v42, v7);
  v30[0] = 0;
  if (__val)
  {
    if (__val == 0x80000000 || __val == 0x7FFFFFFF)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v28, __val);
      v9 = std::string::insert(&v28, 0, "Unsupported Pooling Type: ");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v29);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E3D427E8, MEMORY[0x1E0DE4360]);
    }
  }
  else
  {
    v30[0] = 1;
  }
  v11 = 0;
  v30[1] = v46;
  *(int32x2_t *)&v12 = vrev64_s32(v45);
  *((int32x2_t *)&v12 + 1) = vrev64_s32(v48);
  v31 = v12;
  v32 = v47;
  v33 = v52;
  v13 = 0;
  v14 = 1;
  if (v53 > 0)
  {
    if (v53 == 1)
    {
      v11 = 0;
      v15 = 0;
      v14 = 2;
      goto LABEL_20;
    }
    v16 = 0x7FFFFFFF;
  }
  else
  {
    if (!v53)
    {
      v14 = 0;
      v11 = v49;
      v15 = v50;
      v13 = (int8x8_t)vmovn_s32(v51);
      goto LABEL_20;
    }
    v16 = 0x80000000;
  }
  v15 = 0;
  if (v53 == v16)
  {
    v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v28, v53);
    v22 = std::string::insert(&v28, 0, "Unsupported Padding Type: ");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v21, &v29);
    v21->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v21, (struct type_info *)off_1E3D427E8, MEMORY[0x1E0DE4360]);
  }
LABEL_20:
  v35 = v14;
  v36 = 0;
  v37 = 0;
  v38 = vext_s8(v13, v13, 4uLL);
  v39 = v11;
  v40 = v15;
  v41 = 0;
  v34 = 0;
  v17 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v29, "pool3d");
  memset(&v25, 0, sizeof(v25));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v25, v54, v55, 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v54) >> 3));
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, v57, v58, 0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (char *)v57) >> 3));
  Espresso::sequential_builder::add<Espresso::pool3d_params_t>(&v26, v17, (uint64_t)&v29, (uint64_t)&v60, (uint64_t)v30, (__int128 *)v25.__r_.__value_.__l.__data_, (__int128 *)v25.__r_.__value_.__l.__size_, (__int128 **)&v24);
  v18 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v57);
  v42 = (__int128 **)&off_1E3D52848;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v43);
  v42 = &v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  v42 = &v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
}

void sub_19C946158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void (**a39)(CoreML::Specification::Pooling3DLayerParams *__hidden this),uint64_t a40)
{
  void *v40;
  int v41;
  uint64_t v42;

  if (a29 < 0)
    operator delete(__p);
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v41 & 1) == 0)
    {
LABEL_8:
      a39 = &off_1E3D52848;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a40);
      a39 = (void (**)(CoreML::Specification::Pooling3DLayerParams *__hidden))(v42 - 112);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
      a39 = (void (**)(CoreML::Specification::Pooling3DLayerParams *__hidden))(v42 - 88);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
      if (*(char *)(v42 - 41) < 0)
        operator delete(*(void **)(v42 - 64));
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v40);
  goto LABEL_8;
}

void LayerTranslator::addRandomNormalLike(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  int v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  void (**v26)(CoreML::Specification::RandomNormalLikeLayerParams *__hidden);
  uint64_t v27;
  __int128 v28;
  int v29;
  __int128 *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  std::string v36;
  std::string *v37;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v36.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v5;
  }
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v33, (uint64_t *)&v30, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1170)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_RandomNormalLikeLayerParams_default_instance_;
  }
  v26 = &off_1E3D56018;
  v27 = 0;
  v29 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v27, v8 & 0xFFFFFFFFFFFFFFFELL);
  v28 = *((_OWORD *)v7 + 1);
  *(_QWORD *)&v9 = 0x100000001;
  *((_QWORD *)&v9 + 1) = 0x100000001;
  v22 = v9;
  v23 = 0x100000001;
  v24 = -1;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *((_QWORD *)&v28 + 1);
  v21 = v28;
  v25 = 0;
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v18, v10, (uint64_t)__p, (uint64_t)&v36, (uint64_t)v20, (__int128 *)v15.__r_.__value_.__l.__data_, (__int128 *)v15.__r_.__value_.__l.__size_, (__int128 **)&v14);
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v37 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v37 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (v17 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v33);
  v26 = &off_1E3D56018;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v27);
  *(_QWORD *)v20 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
  *(_QWORD *)v20 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_19C9464B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t *v29;
  uint64_t v30;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v29);
  a23 = v30 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v30 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v30 - 57) < 0)
    operator delete(*(void **)(v30 - 80));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::load_random_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C94674C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomNormalStatic(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  std::string v18;
  std::string v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  __int16 v34;
  __int128 **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  __int128 *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 *v44;
  __int128 *v45;
  uint64_t v46;
  std::string v47;
  std::string *v48;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v47, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v47.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v5;
  }
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v44, (uint64_t *)&v41, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1175)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_RandomNormalStaticLayerParams_default_instance_;
  }
  v37 = 0;
  v38 = 0;
  v35 = (__int128 **)&off_1E3D566A0;
  v36 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v37, v8);
    memcpy((void *)(v38 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    v9 = *((_DWORD *)v7 + 4);
    LODWORD(v37) = v9;
  }
  else
  {
    v9 = 0;
  }
  v40 = 0;
  v10 = v7[1];
  if ((v10 & 1) != 0)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v36, v10 & 0xFFFFFFFFFFFFFFFELL);
    v9 = v37;
  }
  v39 = *(_OWORD *)(v7 + 5);
  v24 = 1;
  v25 = *((_QWORD *)&v39 + 1);
  v32 = 1;
  v33 = v9;
  v26 = v39;
  v34 = 0;
  if (v9 <= 0)
  {
    v27 = 1;
    goto LABEL_20;
  }
  v27 = *(_QWORD *)(v38 + 8 * (v9 - 1) + 8);
  if (v9 == 1)
  {
LABEL_20:
    v28 = 1;
    goto LABEL_21;
  }
  v28 = *(_QWORD *)(v38 + 8 * (v9 - 2) + 8);
  if (v9 <= 2)
  {
LABEL_21:
    v29 = 1;
    goto LABEL_22;
  }
  v29 = *(_QWORD *)(v38 + 8 * (v9 - 3) + 8);
  if (v9 == 3)
  {
LABEL_22:
    v17 = 1;
    v30 = 1;
    goto LABEL_23;
  }
  v30 = *(_QWORD *)(v38 + 8 * (v9 - 4) + 8);
  v11 = v9 >= 5;
  v12 = v9 - 5;
  if (v11)
    v17 = *(_DWORD *)(v38 + 8 * v12 + 8);
  else
    v17 = 1;
LABEL_23:
  v31 = v17;
  v13 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v41, v42, 0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (char *)v41) >> 3));
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, v44, v45, 0xAAAAAAAAAAAAAAABLL * (((char *)v45 - (char *)v44) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v22, v13, (uint64_t)__p, (uint64_t)&v47, (uint64_t)&v24, (__int128 *)v19.__r_.__value_.__l.__data_, (__int128 *)v19.__r_.__value_.__l.__size_, (__int128 **)&v18);
  v14 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v48 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  v48 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  if (v21 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v44);
  CoreML::Specification::RandomNormalStaticLayerParams::~RandomNormalStaticLayerParams((CoreML::Specification::RandomNormalStaticLayerParams *)&v35);
  v35 = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  v35 = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
}

void sub_19C946AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *__p)
{
  uint64_t *v33;
  uint64_t v34;

  if (__p && !*__p)
    operator delete(__p);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v33);
  a30 = v34 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = v34 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (*(char *)(v34 - 57) < 0)
    operator delete(*(void **)(v34 - 80));
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomNormalDynamic(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void (**v20)(CoreML::Specification::RandomNormalDynamicLayerParams *__hidden);
  uint64_t v21;
  __int128 v22;
  int v23;
  _BYTE v24[12];
  int v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 *v34;
  __int128 *v35;
  uint64_t v36;
  std::string v37;
  std::string *v38;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v37, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v37.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v5;
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v34, (uint64_t *)&v31, *((_QWORD *)this + 1));
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  v26 = v7;
  v27 = 0x100000001;
  v28 = -1;
  v30 = 0;
  if (*((_DWORD *)a2 + 35) == 1180)
  {
    v8 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v8 = &CoreML::Specification::_RandomNormalDynamicLayerParams_default_instance_;
  }
  v20 = &off_1E3D56998;
  v21 = 0;
  v23 = 0;
  v9 = v8[1];
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v21, v9 & 0xFFFFFFFFFFFFFFFELL);
  v22 = *((_OWORD *)v8 + 1);
  v29 = 1;
  *(_DWORD *)v24 = 1;
  *(_QWORD *)&v24[4] = *((_QWORD *)&v22 + 1);
  v25 = v22;
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v31, v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, v34, v35, 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (char *)v34) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v18, v10, (uint64_t)__p, (uint64_t)&v37, (uint64_t)v24, (__int128 *)v15.__r_.__value_.__l.__data_, (__int128 *)v15.__r_.__value_.__l.__size_, (__int128 **)&v14);
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v38 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  if (v17 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v34);
  v20 = &off_1E3D56998;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v21);
  *(_QWORD *)v24 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  *(_QWORD *)v24 = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
}

void sub_19C946DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t *v28;
  uint64_t v29;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v28);
  a28 = v29 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = v29 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomUniformLike(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  int v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  void (**v26)(CoreML::Specification::RandomUniformLikeLayerParams *__hidden);
  uint64_t v27;
  __int128 v28;
  int v29;
  __int128 *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  std::string v36;
  std::string *v37;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v36.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v5;
  }
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v33, (uint64_t *)&v30, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1190)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_RandomUniformLikeLayerParams_default_instance_;
  }
  v26 = &off_1E3D56310;
  v27 = 0;
  v29 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v27, v8 & 0xFFFFFFFFFFFFFFFELL);
  v28 = *((_OWORD *)v7 + 1);
  *(_QWORD *)&v9 = 0x100000001;
  *((_QWORD *)&v9 + 1) = 0x100000001;
  v22 = v9;
  v23 = 0x100000001;
  v24 = -1;
  *(_DWORD *)v20 = 0;
  *(_QWORD *)&v20[4] = *((_QWORD *)&v28 + 1);
  v21 = v28;
  v25 = 0;
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v18, v10, (uint64_t)__p, (uint64_t)&v36, (uint64_t)v20, (__int128 *)v15.__r_.__value_.__l.__data_, (__int128 *)v15.__r_.__value_.__l.__size_, (__int128 **)&v14);
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v37 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v37 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (v17 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v33);
  v26 = &off_1E3D56310;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v27);
  *(_QWORD *)v20 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
  *(_QWORD *)v20 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_19C9470D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t *v29;
  uint64_t v30;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v29);
  a23 = v30 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v30 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v30 - 57) < 0)
    operator delete(*(void **)(v30 - 80));
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomUniformStatic(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  std::string v18;
  std::string v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  __int16 v34;
  __int128 **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  __int128 *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 *v44;
  __int128 *v45;
  uint64_t v46;
  std::string v47;
  std::string *v48;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v47, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v47.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v5;
  }
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v44, (uint64_t *)&v41, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1195)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_RandomUniformStaticLayerParams_default_instance_;
  }
  v37 = 0;
  v38 = 0;
  v35 = (__int128 **)&off_1E3D56A30;
  v36 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v37, v8);
    memcpy((void *)(v38 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    v9 = *((_DWORD *)v7 + 4);
    LODWORD(v37) = v9;
  }
  else
  {
    v9 = 0;
  }
  v40 = 0;
  v10 = v7[1];
  if ((v10 & 1) != 0)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v36, v10 & 0xFFFFFFFFFFFFFFFELL);
    v9 = v37;
  }
  v39 = *(_OWORD *)(v7 + 5);
  v24 = 0;
  v25 = *((_QWORD *)&v39 + 1);
  v32 = 1;
  v33 = v9;
  v26 = v39;
  v34 = 0;
  if (v9 <= 0)
  {
    v27 = 1;
    goto LABEL_20;
  }
  v27 = *(_QWORD *)(v38 + 8 * (v9 - 1) + 8);
  if (v9 == 1)
  {
LABEL_20:
    v28 = 1;
    goto LABEL_21;
  }
  v28 = *(_QWORD *)(v38 + 8 * (v9 - 2) + 8);
  if (v9 <= 2)
  {
LABEL_21:
    v29 = 1;
    goto LABEL_22;
  }
  v29 = *(_QWORD *)(v38 + 8 * (v9 - 3) + 8);
  if (v9 == 3)
  {
LABEL_22:
    v17 = 1;
    v30 = 1;
    goto LABEL_23;
  }
  v30 = *(_QWORD *)(v38 + 8 * (v9 - 4) + 8);
  v11 = v9 >= 5;
  v12 = v9 - 5;
  if (v11)
    v17 = *(_DWORD *)(v38 + 8 * v12 + 8);
  else
    v17 = 1;
LABEL_23:
  v31 = v17;
  v13 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v41, v42, 0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (char *)v41) >> 3));
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, v44, v45, 0xAAAAAAAAAAAAAAABLL * (((char *)v45 - (char *)v44) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v22, v13, (uint64_t)__p, (uint64_t)&v47, (uint64_t)&v24, (__int128 *)v19.__r_.__value_.__l.__data_, (__int128 *)v19.__r_.__value_.__l.__size_, (__int128 **)&v18);
  v14 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v48 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  v48 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  if (v21 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v44);
  CoreML::Specification::RandomUniformStaticLayerParams::~RandomUniformStaticLayerParams((CoreML::Specification::RandomUniformStaticLayerParams *)&v35);
  v35 = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  v35 = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
}

void sub_19C947480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *__p)
{
  uint64_t *v33;
  uint64_t v34;

  if (__p && !*__p)
    operator delete(__p);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v33);
  a30 = v34 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = v34 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (*(char *)(v34 - 57) < 0)
    operator delete(*(void **)(v34 - 80));
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomUniformDynamic(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void (**v20)(CoreML::Specification::RandomUniformDynamicLayerParams *__hidden);
  uint64_t v21;
  __int128 v22;
  int v23;
  _BYTE v24[12];
  int v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 *v34;
  __int128 *v35;
  uint64_t v36;
  std::string v37;
  std::string *v38;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v37, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v37.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v5;
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v34, (uint64_t *)&v31, *((_QWORD *)this + 1));
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  v26 = v7;
  v27 = 0x100000001;
  v28 = -1;
  v30 = 0;
  if (*((_DWORD *)a2 + 35) == 1200)
  {
    v8 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v8 = &CoreML::Specification::_RandomUniformDynamicLayerParams_default_instance_;
  }
  v20 = &off_1E3D56B60;
  v21 = 0;
  v23 = 0;
  v9 = v8[1];
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v21, v9 & 0xFFFFFFFFFFFFFFFELL);
  v22 = *((_OWORD *)v8 + 1);
  v29 = 1;
  *(_DWORD *)v24 = 0;
  *(_QWORD *)&v24[4] = *((_QWORD *)&v22 + 1);
  v25 = v22;
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v31, v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, v34, v35, 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (char *)v34) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v18, v10, (uint64_t)__p, (uint64_t)&v37, (uint64_t)v24, (__int128 *)v15.__r_.__value_.__l.__data_, (__int128 *)v15.__r_.__value_.__l.__size_, (__int128 **)&v14);
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v38 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  if (v17 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v34);
  v20 = &off_1E3D56B60;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v21);
  *(_QWORD *)v24 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  *(_QWORD *)v24 = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
}

void sub_19C947790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t *v28;
  uint64_t v29;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v28);
  a28 = v29 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = v29 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomBernoulliLike(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::string v15;
  std::string v16;
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 **v21;
  int v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  void (**v28)(CoreML::Specification::RandomBernoulliLikeLayerParams *__hidden);
  uint64_t v29[2];
  int v30;
  int v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 *v35;
  __int128 *v36;
  uint64_t v37;
  std::string v38;
  std::string *v39;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v38, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v38.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  }
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v35, (uint64_t *)&v32, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1210)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_RandomBernoulliLikeLayerParams_default_instance_;
  }
  v28 = &off_1E3D56900;
  v29[0] = 0;
  v31 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v29, v8 & 0xFFFFFFFFFFFFFFFELL);
  v9 = v7[2];
  v30 = *((_DWORD *)v7 + 6);
  v29[1] = v9;
  *(_QWORD *)&v10 = 0x100000001;
  *((_QWORD *)&v10 + 1) = 0x100000001;
  v24 = v10;
  v25 = 0x100000001;
  v26 = -1;
  LODWORD(v21) = 2;
  HIDWORD(v21) = v30;
  v22 = 0;
  v23 = v9;
  v27 = 0;
  v11 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v32, v33, 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v32) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v35, v36, 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v35) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v19, v11, (uint64_t)__p, (uint64_t)&v38, (uint64_t)&v21, (__int128 *)v16.__r_.__value_.__l.__data_, (__int128 *)v16.__r_.__value_.__l.__size_, (__int128 **)&v15);
  v12 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v39 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  v39 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (v18 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v35);
  v28 = &off_1E3D56900;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v29);
  v21 = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  v21 = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_19C947A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t *v30;
  uint64_t v31;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v30);
  a24 = v31 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = v31 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (*(char *)(v31 - 57) < 0)
    operator delete(*(void **)(v31 - 80));
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomBernoulliStatic(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  std::string v19;
  std::string v20;
  void *__p[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _DWORD v25[4];
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  __int16 v33;
  __int128 **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  __int128 *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 *v44;
  __int128 *v45;
  uint64_t v46;
  std::string v47;
  std::string *v48;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v47, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v47.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v5;
  }
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v44, (uint64_t *)&v41, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1215)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_RandomBernoulliStaticLayerParams_default_instance_;
  }
  v36 = 0;
  v37 = 0;
  v34 = (__int128 **)&off_1E3D57020;
  v35 = 0;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v36, v8);
    memcpy((void *)(v37 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    v9 = *((_DWORD *)v7 + 4);
    LODWORD(v36) = v9;
  }
  else
  {
    v9 = 0;
  }
  v40 = 0;
  v10 = v7[1];
  if ((v10 & 1) != 0)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v35, v10 & 0xFFFFFFFFFFFFFFFELL);
    v9 = v36;
  }
  v11 = v7[5];
  v39 = *((_DWORD *)v7 + 12);
  v38 = v11;
  v25[0] = 2;
  v25[1] = v39;
  v25[2] = 0;
  v25[3] = v11;
  v31 = 1;
  v32 = v9;
  v33 = 0;
  if (v9 <= 0)
  {
    v26 = 1;
    goto LABEL_20;
  }
  v26 = *(_QWORD *)(v37 + 8 * (v9 - 1) + 8);
  if (v9 == 1)
  {
LABEL_20:
    v27 = 1;
    goto LABEL_21;
  }
  v27 = *(_QWORD *)(v37 + 8 * (v9 - 2) + 8);
  if (v9 <= 2)
  {
LABEL_21:
    v28 = 1;
    goto LABEL_22;
  }
  v28 = *(_QWORD *)(v37 + 8 * (v9 - 3) + 8);
  if (v9 == 3)
  {
LABEL_22:
    v18 = 1;
    v29 = 1;
    goto LABEL_23;
  }
  v29 = *(_QWORD *)(v37 + 8 * (v9 - 4) + 8);
  v12 = v9 >= 5;
  v13 = v9 - 5;
  if (v12)
    v18 = *(_DWORD *)(v37 + 8 * v13 + 8);
  else
    v18 = 1;
LABEL_23:
  v30 = v18;
  v14 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, v41, v42, 0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (char *)v41) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v44, v45, 0xAAAAAAAAAAAAAAABLL * (((char *)v45 - (char *)v44) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v23, v14, (uint64_t)__p, (uint64_t)&v47, (uint64_t)v25, (__int128 *)v20.__r_.__value_.__l.__data_, (__int128 *)v20.__r_.__value_.__l.__size_, (__int128 **)&v19);
  v15 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v48 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  v48 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  if (v22 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v44);
  CoreML::Specification::RandomBernoulliStaticLayerParams::~RandomBernoulliStaticLayerParams((CoreML::Specification::RandomBernoulliStaticLayerParams *)&v34);
  v34 = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34 = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
}

void sub_19C947E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *__p)
{
  uint64_t *v32;
  uint64_t v33;

  if (__p && !*__p)
    operator delete(__p);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v32);
  a29 = v33 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = v33 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomBernoulliDynamic(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::string v15;
  std::string v16;
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void (**v21)(CoreML::Specification::RandomBernoulliDynamicLayerParams *__hidden);
  uint64_t v22[2];
  int v23;
  int v24;
  __int128 **v25;
  int v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  std::string v39;
  std::string *v40;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v39.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v5;
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v36, (uint64_t *)&v33, *((_QWORD *)this + 1));
  v26 = 0;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  v28 = v7;
  v29 = 0x100000001;
  v30 = -1;
  v32 = 0;
  if (*((_DWORD *)a2 + 35) == 1220)
  {
    v8 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v8 = &CoreML::Specification::_RandomBernoulliDynamicLayerParams_default_instance_;
  }
  v21 = &off_1E3D57318;
  v22[0] = 0;
  v24 = 0;
  v9 = v8[1];
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v22, v9 & 0xFFFFFFFFFFFFFFFELL);
  v10 = v8[2];
  v23 = *((_DWORD *)v8 + 6);
  v22[1] = v10;
  v31 = 1;
  LODWORD(v25) = 2;
  HIDWORD(v25) = v23;
  v27 = v10;
  v11 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v36, v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v19, v11, (uint64_t)__p, (uint64_t)&v39, (uint64_t)&v25, (__int128 *)v16.__r_.__value_.__l.__data_, (__int128 *)v16.__r_.__value_.__l.__size_, (__int128 **)&v15);
  v12 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v40 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v40 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (v18 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v36);
  v21 = &off_1E3D57318;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v22);
  v25 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  v25 = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
}

void sub_19C94814C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t *v28;
  uint64_t v29;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v28);
  a28 = v29 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = v29 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(a1);
}

void LayerTranslator::addCategoricalDistribution(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  __int128 *v12;
  size_t v13;
  std::string *v14;
  __int128 *v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  char *v26;
  char v27;
  std::vector<std::string>::pointer end;
  std::string *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::string *v33;
  std::string *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::string v48;
  std::string v49;
  __int128 v50;
  std::string v51;
  std::string v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::__split_buffer<std::string> v55;
  int v56;
  int v57;
  std::string v58;
  std::string v59;
  void (**v60)(CoreML::Specification::CategoricalDistributionLayerParams *__hidden);
  uint64_t v61;
  _BYTE v62[28];
  int v63;
  int v64;
  int v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  int v71;
  __int128 *v72;
  __int128 *v73;
  uint64_t v74;
  __int128 *v75;
  __int128 *v76;
  uint64_t v77;
  std::string v78;
  std::string v79;
  std::vector<std::string> v80;
  std::string v81;
  void **v82[3];

  v82[2] = *(void ***)MEMORY[0x1E0C80C00];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v78, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v78.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v5;
  }
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v75, (uint64_t *)&v72, *((_QWORD *)this + 1));
  v66 = 0;
  v68 = 0x3F80000000000000;
  v70 = 0;
  v71 = 0;
  if (*((_DWORD *)a2 + 35) == 1230)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_CategoricalDistributionLayerParams_default_instance_;
  }
  v60 = &off_1E3D573B0;
  v61 = 0;
  v63 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v61, v8 & 0xFFFFFFFFFFFFFFFELL);
  v9 = *(_OWORD *)((char *)v7 + 28);
  *(_OWORD *)v62 = *((_OWORD *)v7 + 1);
  *(_OWORD *)&v62[12] = v9;
  v67 = 1;
  v65 = *(_DWORD *)v62;
  v64 = *(_DWORD *)&v62[8];
  v69 = *((_QWORD *)&v9 + 1);
  if (!BYTE4(v9))
  {
    std::to_string((std::string *)&v55, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
    v10 = std::string::insert((std::string *)&v55, 0, "log_");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v55.__end_) < 0)
      operator delete(v55.__first_);
    memset(&v80, 0, sizeof(v80));
    v12 = v72;
    if (*((char *)v72 + 23) >= 0)
      v13 = *((unsigned __int8 *)v72 + 23);
    else
      v13 = *((_QWORD *)v72 + 1);
    v14 = &v58;
    std::string::basic_string[abi:ne180100]((uint64_t)&v58, v13 + 1);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = (std::string *)v58.__r_.__value_.__r.__words[0];
    if (v13)
    {
      if (*((char *)v12 + 23) >= 0)
        v15 = v12;
      else
        v15 = *(__int128 **)v12;
      memmove(v14, v15, v13);
    }
    *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 95;
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v81;
    else
      v16 = (std::string *)v81.__r_.__value_.__r.__words[0];
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
    else
      size = v81.__r_.__value_.__l.__size_;
    v18 = std::string::append(&v58, (const std::string::value_type *)v16, size);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v59, "_");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = *((char *)v75 + 23);
    if (v22 >= 0)
      v23 = (const std::string::value_type *)v75;
    else
      v23 = *(const std::string::value_type **)v75;
    if (v22 >= 0)
      v24 = *((unsigned __int8 *)v75 + 23);
    else
      v24 = *((_QWORD *)v75 + 1);
    v25 = std::string::append(&v79, v23, v24);
    v26 = (char *)v25->__r_.__value_.__r.__words[0];
    v82[0] = (void **)v25->__r_.__value_.__l.__size_;
    *(void ***)((char *)v82 + 7) = *(void ***)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
    v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    end = v80.__end_;
    if (v80.__end_ >= v80.__end_cap_.__value_)
    {
      v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v80.__end_ - (char *)v80.__begin_) >> 3);
      v31 = v30 + 1;
      if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v80.__end_cap_.__value_ - (char *)v80.__begin_) >> 3) > v31)
        v31 = 0x5555555555555556 * (((char *)v80.__end_cap_.__value_ - (char *)v80.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v80.__end_cap_.__value_ - (char *)v80.__begin_) >> 3) >= 0x555555555555555)
        v32 = 0xAAAAAAAAAAAAAAALL;
      else
        v32 = v31;
      v55.__end_cap_.__value_ = (std::allocator<std::string> *)&v80.__end_cap_;
      if (v32)
        v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v80.__end_cap_, v32);
      else
        v33 = 0;
      v34 = v33 + v30;
      v55.__first_ = v33;
      v55.__begin_ = v34;
      v55.__end_cap_.__value_ = &v33[v32];
      v34->__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      v34->__r_.__value_.__l.__size_ = (std::string::size_type)v82[0];
      *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v82 + 7);
      *((_BYTE *)&v34->__r_.__value_.__s + 23) = v27;
      memset(v82, 0, 15);
      v55.__end_ = v34 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v80, &v55);
      v29 = v80.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&v55);
    }
    else
    {
      v80.__end_->__r_.__value_.__l.__data_ = v26;
      end->__r_.__value_.__l.__size_ = (std::string::size_type)v82[0];
      *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v82 + 7);
      *((_BYTE *)&end->__r_.__value_.__s + 23) = v27;
      v29 = end + 1;
    }
    v80.__end_ = v29;
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v55.__end_ = (std::__split_buffer<std::string>::pointer)897988541;
    LOBYTE(v55.__end_cap_.__value_) = 0;
    v56 = 0;
    v57 = 0;
    v55.__first_ = (std::__split_buffer<std::string>::pointer)26;
    v55.__begin_ = (std::__split_buffer<std::string>::pointer)1065353216;
    v35 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v79, "elementwise");
    memset(&v52, 0, sizeof(v52));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v52, v72, v73, 0xAAAAAAAAAAAAAAABLL * (((char *)v73 - (char *)v72) >> 3));
    memset(&v51, 0, sizeof(v51));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v51, (__int128 *)v80.__begin_, (__int128 *)v80.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v80.__end_ - (char *)v80.__begin_) >> 3));
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v53, v35, (uint64_t)&v79, (uint64_t)&v81, (uint64_t)&v55, (__int128 *)v52.__r_.__value_.__l.__data_, (__int128 *)v52.__r_.__value_.__l.__size_, (__int128 **)&v51);
    v36 = v54;
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v72, v80.__begin_, (__int128 *)v80.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v80.__end_ - (char *)v80.__begin_) >> 3));
    v55.__first_ = (std::__split_buffer<std::string>::pointer)&v80;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
  }
  v39 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v59, "gumbel_max");
  memset(&v49, 0, sizeof(v49));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v49, v72, v73, 0xAAAAAAAAAAAAAAABLL * (((char *)v73 - (char *)v72) >> 3));
  memset(&v48, 0, sizeof(v48));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v48, v75, v76, 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (char *)v75) >> 3));
  memset(&v80, 0, sizeof(v80));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v80, (__int128 *)v49.__r_.__value_.__l.__data_, (__int128 *)v49.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49.__r_.__value_.__l.__size_ - v49.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v79, 0, sizeof(v79));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v79, (__int128 *)v48.__r_.__value_.__l.__data_, (__int128 *)v48.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48.__r_.__value_.__l.__size_ - v48.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v55.__first_) = (***(uint64_t (****)(_QWORD))(v39[14] + 8))(*(_QWORD *)(v39[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v50;
  if (*((_QWORD *)&v50 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  memset(&v55, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v55, (__int128 *)v80.__begin_, (__int128 *)v80.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v80.__end_ - (char *)v80.__begin_) >> 3));
  memset(&v81, 0, sizeof(v81));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v81, (__int128 *)v79.__r_.__value_.__l.__data_, (__int128 *)v79.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79.__r_.__value_.__l.__size_ - v79.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v82[0] = (void **)&v81;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v82);
  v82[0] = (void **)&v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v82);
  v42 = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
  if (v58.__r_.__value_.__l.__size_)
  {
    v43 = (unint64_t *)(v58.__r_.__value_.__l.__size_ + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (*v39)
    Espresso::sequential_builder::add_shape_from_kernel();
  v55.__first_ = &v79;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  v55.__first_ = (std::__split_buffer<std::string>::pointer)&v80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v55.__first_ = &v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  v55.__first_ = &v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v75);
  v60 = &off_1E3D573B0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v61);
  v55.__first_ = (std::__split_buffer<std::string>::pointer)&v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  v55.__first_ = (std::__split_buffer<std::string>::pointer)&v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
}

void sub_19C9489D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__split_buffer<std::string> *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__pa,uint64_t a45,int a46,__int16 a47,char a48,char a49,void **a50)
{
  uint64_t *v50;
  void **v51;
  uint64_t v52;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a28);
  if (*(char *)(v52 - 137) < 0)
    operator delete(*(void **)(v52 - 160));
  if (a49 < 0)
    operator delete(__pa);
  if (a43 < 0)
    operator delete(a38);
  *(_QWORD *)(v52 - 160) = v52 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 160));
  if (*(char *)(v52 - 89) < 0)
    operator delete(*(void **)(v52 - 112));
  a50 = v51;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v50);
  a50 = (void **)(v52 - 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a50);
  a50 = (void **)(v52 - 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a50);
  if (*(char *)(v52 - 169) < 0)
    operator delete(*(void **)(v52 - 192));
  _Unwind_Resume(a1);
}

void LayerTranslator::addCrop(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::CropLayerParams *v7;
  uint64_t *v8;
  int v9;
  char *v10;
  uint64_t **v11;
  int v12;
  uint64_t **v13;
  int v14;
  uint64_t **v15;
  int v16;
  uint64_t **v17;
  int v18;
  __int32 v19;
  _QWORD *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v26;
  uint64_t **v27;
  const CoreML::Specification::CropLayerParams *v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::runtime_error *exception;
  std::string *v48;
  __int128 v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  std::runtime_error *v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  std::runtime_error *v65;
  std::string v66;
  std::string v67;
  void *__p[2];
  char v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  _BYTE v72[32];
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  int32x4_t v77;
  _BYTE v78[16];
  int v79;
  uint64_t v80;
  uint64_t *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  __int128 *v85;
  __int128 *v86;
  uint64_t v87;
  std::string v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  _BYTE v95[32];
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  std::string v100;
  uint64_t *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  void **v104;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v88.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v5;
  }
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v85, (uint64_t *)&v82, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 190)
  {
    v7 = (const CoreML::Specification::CropLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::CropLayerParams *)&CoreML::Specification::_CropLayerParams_default_instance_;
  }
  CoreML::Specification::CropLayerParams::CropLayerParams((CoreML::Specification::CropLayerParams *)v78, v7);
  v77 = 0uLL;
  v8 = v81;
  if (!v81)
    v8 = &CoreML::Specification::_BorderAmounts_default_instance_;
  v9 = *((_DWORD *)v8 + 6);
  if (v9)
  {
    if (v9 != 2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v48 = std::string::append((std::string *)v95, " , crop border amounts must be specified for both height and width, if set");
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      *(_QWORD *)&v72[16] = *((_QWORD *)&v48->__r_.__value_.__l + 2);
      *(_OWORD *)v72 = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)v72);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v10 = v82;
    if (v83 - v82 == 24)
    {
      v77 = vuzp1q_s32(*(int32x4_t *)(*(_QWORD *)(v8[4] + 16) + 16), *(int32x4_t *)(*(_QWORD *)(v8[4] + 8) + 16));
      goto LABEL_17;
    }
  }
  else
  {
    v10 = v82;
    if (v83 - v82 == 24)
      goto LABEL_17;
  }
  if (v79 != 2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v72);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72[16], (uint64_t)"Crop Layer: ", 12);
    v51 = *((_QWORD *)a2 + 14);
    v52 = *(char *)(v51 + 23);
    if (v52 >= 0)
      v53 = *((_QWORD *)a2 + 14);
    else
      v53 = *(_QWORD *)v51;
    if (v52 >= 0)
      v54 = *(unsigned __int8 *)(v51 + 23);
    else
      v54 = *(_QWORD *)(v51 + 8);
    v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, v53, v54);
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" , must be provided exactly 2 offset values when it has 2 inputs", 64);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v56);
    v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v57, (const std::string *)v95);
    __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = (uint64_t **)*((_QWORD *)this + 1);
  *(_QWORD *)v72 = v10;
  v12 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, v10, (__int128 **)v72)+ 15);
  v13 = (uint64_t **)*((_QWORD *)this + 1);
  *(_QWORD *)v72 = v82;
  v14 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, v82, (__int128 **)v72)+ 14);
  v15 = (uint64_t **)*((_QWORD *)this + 1);
  *(_QWORD *)v72 = v82 + 24;
  v16 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, (_QWORD *)v82 + 3, (__int128 **)v72)+ 15);
  v17 = (uint64_t **)*((_QWORD *)this + 1);
  *(_QWORD *)v72 = v82 + 24;
  v18 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (_QWORD *)v82 + 3, (__int128 **)v72)+ 14);
  v19 = *(_DWORD *)(v80 + 16);
  v77.i32[2] = *(_DWORD *)(v80 + 8);
  v77.i32[3] = v12 - v77.i32[2] - v16;
  v77.i32[0] = v19;
  v77.i32[1] = v14 - v19 - v18;
  if (v16 == -1 || v18 == -1)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v72);
    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72[16], (uint64_t)"Crop Layer: '", 13);
    v59 = *((_QWORD *)a2 + 14);
    v60 = *(char *)(v59 + 23);
    if (v60 >= 0)
      v61 = *((_QWORD *)a2 + 14);
    else
      v61 = *(_QWORD *)v59;
    if (v60 >= 0)
      v62 = *(unsigned __int8 *)(v59 + 23);
    else
      v62 = *(_QWORD *)(v59 + 8);
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v61, v62);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"': unable to determine the spatial dimensions of the second input blob. ", 72);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v64);
    v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v65, (const std::string *)v95);
    __cxa_throw(v65, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_17:
  v20 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "crop");
  memset(&v67, 0, sizeof(v67));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v67, (__int128 *)v82, (__int128 *)v83, 0xAAAAAAAAAAAAAAABLL * ((v83 - v82) >> 3));
  memset(&v66, 0, sizeof(v66));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v66, v85, v86, 0xAAAAAAAAAAAAAAABLL * (((char *)v86 - (char *)v85) >> 3));
  *(_QWORD *)&v90 = 0;
  v89 = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v89, (__int128 *)v67.__r_.__value_.__l.__data_, (__int128 *)v67.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v100, 0, sizeof(v100));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v100, (__int128 *)v66.__r_.__value_.__l.__data_, (__int128 *)v66.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66.__r_.__value_.__l.__size_ - v66.__r_.__value_.__r.__words[0]) >> 3));
  *(_DWORD *)v72 = (***(uint64_t (****)(_QWORD))(v20[14] + 8))(*(_QWORD *)(v20[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v102 = v70;
  v103 = v71;
  if (v71)
  {
    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  memset(v72, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v72, (__int128 *)v89, *((__int128 **)&v89 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v89 + 1) - v89) >> 3));
  memset(v95, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v95, (__int128 *)v100.__r_.__value_.__l.__data_, (__int128 *)v100.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100.__r_.__value_.__l.__size_ - v100.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v104 = (void **)v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v104);
  v104 = (void **)v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v104);
  v23 = v103;
  if (v103)
  {
    v24 = (unint64_t *)&v103->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (*v20)
    Espresso::sequential_builder::add_shape_from_kernel();
  *(_QWORD *)v72 = &v100;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  *(_QWORD *)v72 = &v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  *(_QWORD *)v72 = &v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  *(_QWORD *)v72 = &v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  if (v69 < 0)
    operator delete(__p[0]);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v85);
    goto LABEL_53;
  }
  v27 = (uint64_t **)*((_QWORD *)this + 1);
  if (*((_DWORD *)a2 + 35) == 190)
  {
    v28 = (const CoreML::Specification::CropLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v26);
    v28 = (const CoreML::Specification::CropLayerParams *)&CoreML::Specification::_CropLayerParams_default_instance_;
  }
  CoreML::Specification::CropLayerParams::CropLayerParams((CoreML::Specification::CropLayerParams *)&v100, v28);
  v29 = std::map<std::string,std::string>::at((uint64_t)v27, v82);
  *(_OWORD *)v72 = *(_OWORD *)v29;
  *(_OWORD *)&v72[16] = *(_OWORD *)(v29 + 16);
  v73 = *(_QWORD *)(v29 + 32);
  v74 = 0;
  v75 = 0;
  v76 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v74, *(const void **)(v29 + 40), *(_QWORD *)(v29 + 48), (uint64_t)(*(_QWORD *)(v29 + 48) - *(_QWORD *)(v29 + 40)) >> 2);
  *(_OWORD *)v95 = *(_OWORD *)v72;
  *(_OWORD *)&v95[16] = *(_OWORD *)&v72[16];
  v30 = v74;
  v96 = v73;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v97, v74, v75, (v75 - (uint64_t)v74) >> 2);
  if (v83 - v82 == 24)
  {
    v31 = v101;
    if (!v101)
      v31 = &CoreML::Specification::_BorderAmounts_default_instance_;
    v32 = *((_DWORD *)v31 + 6);
    if (v32)
    {
      v33 = v31[4];
      v35 = *(_QWORD *)(v33 + 8);
      v34 = *(_QWORD *)(v33 + 16);
      v36 = *(_DWORD *)(v34 + 16);
      v37 = *(_DWORD *)(v34 + 24);
      v38 = *(_DWORD *)(v35 + 24) + *(_DWORD *)(v35 + 16);
      v32 = v37 + v36;
    }
    else
    {
      v38 = 0;
    }
    *(_DWORD *)v95 = *(_DWORD *)v72 - v32;
    *(_DWORD *)&v95[4] = *(_DWORD *)&v72[4] - v38;
    if (*(_DWORD *)&v72[4] == -1)
      *(_DWORD *)&v95[4] = -1;
    if (*(_DWORD *)v72 != -1)
      goto LABEL_46;
    v39 = -1;
  }
  else
  {
    *(_QWORD *)&v89 = v82 + 24;
    *(_DWORD *)&v95[4] = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (_QWORD *)v82 + 3, (__int128 **)&v89)+ 15);
    *(_QWORD *)&v89 = v82 + 24;
    v39 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (_QWORD *)v82 + 3, (__int128 **)&v89)+ 14);
  }
  *(_DWORD *)v95 = v39;
LABEL_46:
  v89 = *(_OWORD *)v95;
  v90 = *(_OWORD *)&v95[16];
  v40 = v97;
  v91 = v96;
  v92 = 0;
  v94 = 0;
  v93 = 0;
  v41 = v98;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v92, v97, v98, (v98 - (uint64_t)v97) >> 2);
  EspressoConverter::validateShape((int *)&v89, *((_QWORD *)a2 + 14), (uint64_t)v85);
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  __p[0] = v85;
  v42 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, v85, (__int128 **)__p);
  v43 = *(_OWORD *)&v95[16];
  *(_OWORD *)(v42 + 56) = *(_OWORD *)v95;
  *(_OWORD *)(v42 + 72) = v43;
  *((_QWORD *)v42 + 11) = v96;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v42 + 96, v40, v41, (v41 - (uint64_t)v40) >> 2);
  if (v40)
    operator delete(v40);
  if (v30)
    operator delete(v30);
  CoreML::Specification::CropLayerParams::~CropLayerParams((CoreML::Specification::CropLayerParams *)&v100);
LABEL_53:
  v44 = v71;
  if (v71)
  {
    v45 = (unint64_t *)&v71->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  CoreML::Specification::CropLayerParams::~CropLayerParams((CoreML::Specification::CropLayerParams *)v78);
  *(_QWORD *)v72 = &v82;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  *(_QWORD *)v72 = &v85;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
}

void sub_19C949448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a70;
  void *v70;
  int v71;
  uint64_t v72;

  if (*(char *)(v72 - 185) < 0)
  {
    operator delete(*(void **)(v72 - 208));
    if ((v71 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
      CoreML::Specification::CropLayerParams::~CropLayerParams((CoreML::Specification::CropLayerParams *)&a60);
      a60 = (uint64_t)&a67;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a60);
      a60 = (uint64_t)&a70;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a60);
      if (SLOBYTE(STACK[0x217]) < 0)
        operator delete((void *)STACK[0x200]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v71)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v70);
  goto LABEL_6;
}

void LayerTranslator::addRangeStatic(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  unint64_t *inited;
  int v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  int v15;
  std::string v16;
  std::string v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  int v22;
  int v23;
  int v24;
  void **v25;
  __int128 *v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  std::string v31;
  std::string *v32;

  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v31.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v5;
  }
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v28, (uint64_t *)&v25, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 635)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    v22 = *((_DWORD *)v7 + 4);
LABEL_8:
    v23 = *((_DWORD *)v7 + 5);
    goto LABEL_9;
  }
  inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
  v9 = *((_DWORD *)a2 + 35);
  v22 = qword_1ED004E70;
  if (v9 == 635)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    goto LABEL_8;
  }
  v14 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
  v15 = *((_DWORD *)a2 + 35);
  v23 = HIDWORD(qword_1ED004E70);
  if (v15 == 635)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v14);
    v7 = &CoreML::Specification::_RangeStaticLayerParams_default_instance_;
  }
LABEL_9:
  v24 = *((_DWORD *)v7 + 6);
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "range");
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, (__int128 *)v25, v26, 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v25) >> 3));
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v28, v29, 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
  Espresso::sequential_builder::add<Espresso::range_params_t>(&v20, v10, (uint64_t)__p, (uint64_t)&v31, (uint64_t)&v22, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, (__int128 **)&v16);
  v11 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v32 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v32 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (v19 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v28);
  __p[0] = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v25 = (void **)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_19C9498B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(_QWORD *)(v27 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a21 < 0)
    operator delete(__p);
  __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::range_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C949B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addRangeDynamic(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  unint64_t *inited;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  int v21;
  void **v22;
  char *v23;
  uint64_t v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  std::string v28;
  std::string *v29;

  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v28.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v5;
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v25, (uint64_t *)&v22, *((_QWORD *)this + 1));
  v20 = 1065353216;
  v21 = 1065353216;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (char *)v22) >> 3);
  if (v7 == 2)
  {
    v9 = *((_DWORD *)a2 + 35);
    goto LABEL_10;
  }
  if (v7 == 1)
  {
    if (*((_DWORD *)a2 + 35) == 640)
    {
      v8 = (uint64_t *)*((_QWORD *)a2 + 16);
      HIDWORD(v20) = *((_DWORD *)v8 + 4);
LABEL_13:
      v21 = *((_DWORD *)v8 + 5);
      goto LABEL_14;
    }
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v9 = *((_DWORD *)a2 + 35);
    HIDWORD(v20) = qword_1ED005298;
LABEL_10:
    if (v9 == 640)
    {
      v8 = (uint64_t *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v8 = &CoreML::Specification::_RangeDynamicLayerParams_default_instance_;
    }
    goto LABEL_13;
  }
LABEL_14:
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "range");
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (__int128 *)v22, (__int128 *)v23, 0xAAAAAAAAAAAAAAABLL * ((v23 - (char *)v22) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, v25, v26, 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v25) >> 3));
  Espresso::sequential_builder::add<Espresso::range_params_t>(&v18, v10, (uint64_t)__p, (uint64_t)&v28, (uint64_t)&v20, (__int128 *)v15.__r_.__value_.__l.__data_, (__int128 *)v15.__r_.__value_.__l.__size_, (__int128 **)&v14);
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v29 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v17 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v25);
  __p[0] = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v22 = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_19C949DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(_QWORD *)(v27 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a21 < 0)
    operator delete(__p);
  __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(a1);
}

uint64_t LayerTranslator::addBranch(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  CoreML::Specification::NeuralNetwork *v9;
  CoreML::Specification::NeuralNetwork *v10;
  _QWORD *v11;
  std::string::size_type size;
  std::string *v13;
  std::string *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  char *v21;
  char v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  std::string::size_type v27;
  void **v28;
  std::string *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  std::string::value_type v40;
  unsigned int v41;
  int v42;
  char v43;
  _QWORD *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 *v52[3];
  _QWORD v53[3];
  uint64_t v54;
  std::__shared_weak_count *v55;
  _QWORD v56[3];
  void *v57[3];
  void *__p[2];
  char v59;
  void *v60;
  char v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  _BYTE v64[4];
  int v65;
  int v66;
  int v67;
  __int128 *v68[3];
  std::string v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  void **v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  int v76;
  __int128 *v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80[3];
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::string *v88;

  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v81.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v5;
  }
  memset(v80, 0, sizeof(v80));
  v77 = 0;
  v78 = 0;
  v79 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, v80, (uint64_t *)&v77, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 605)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_BranchLayerParams_default_instance_;
  }
  v72 = (void **)&off_1E3D508D0;
  v73 = 0;
  v76 = 0;
  v8 = v7[1];
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v73, v8 & 0xFFFFFFFFFFFFFFFELL);
  if (v7 == &CoreML::Specification::_BranchLayerParams_default_instance_)
  {
    v10 = 0;
    v74 = 0;
  }
  else
  {
    if (v7[2])
    {
      v9 = (CoreML::Specification::NeuralNetwork *)operator new();
      CoreML::Specification::NeuralNetwork::NeuralNetwork(v9, (const CoreML::Specification::NeuralNetwork *)v7[2]);
    }
    else
    {
      v9 = 0;
    }
    v74 = (uint64_t *)v9;
    if (v7[3])
    {
      v10 = (CoreML::Specification::NeuralNetwork *)operator new();
      CoreML::Specification::NeuralNetwork::NeuralNetwork(v10, (const CoreML::Specification::NeuralNetwork *)v7[3]);
    }
    else
    {
      v10 = 0;
    }
  }
  v75 = (uint64_t *)v10;
  v11 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v85, "cf_if");
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  else
    size = v81.__r_.__value_.__l.__size_;
  v13 = &v84;
  std::string::basic_string[abi:ne180100]((uint64_t)&v84, size + 3);
  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = (std::string *)v84.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v81;
    else
      v14 = (std::string *)v81.__r_.__value_.__r.__words[0];
    memmove(v13, v14, size);
  }
  *(_DWORD *)((char *)&v13->__r_.__value_.__l.__data_ + size) = 6711647;
  memset(&v69, 0, sizeof(v69));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v69, v77, v78, 0xAAAAAAAAAAAAAAABLL * (((char *)v78 - (char *)v77) >> 3));
  memset(v68, 0, sizeof(v68));
  Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v70, v11, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v82, (__int128 *)v69.__r_.__value_.__l.__data_, (__int128 *)v69.__r_.__value_.__l.__size_, v68);
  v15 = v71;
  if (v71)
  {
    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  v18 = &CoreML::Specification::_NeuralNetwork_default_instance_;
  if (v74)
    v19 = v74;
  else
    v19 = &CoreML::Specification::_NeuralNetwork_default_instance_;
  v20 = (_QWORD *)*((_QWORD *)this + 1);
  v21 = (char *)*((_QWORD *)this + 2);
  v22 = *v21;
  v23 = *((_DWORD *)v21 + 1);
  v24 = *((_DWORD *)v21 + 2) + 1;
  LODWORD(v21) = *((_DWORD *)v21 + 3);
  v64[0] = v22;
  v65 = v23;
  v66 = v24;
  v67 = (int)v21;
  v25 = EspressoConverter::convertNeuralNetwork((uint64_t)v19, *(void **)this, v20, (uint64_t)v64);
  *(_DWORD *)(*((_QWORD *)this + 2) + 4) = v65;
  if (v75)
    v18 = v75;
  if (*((int *)v18 + 6) > 0)
  {
    v26 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&v60, "cf_else");
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
    else
      v27 = v81.__r_.__value_.__l.__size_;
    v28 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v27 + 5);
    if (v59 < 0)
      v28 = (void **)__p[0];
    if (v27)
    {
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v81;
      else
        v29 = (std::string *)v81.__r_.__value_.__r.__words[0];
      memmove(v28, v29, v27);
    }
    strcpy((char *)v28 + v27, "_else");
    memset(v57, 0, sizeof(v57));
    memset(v56, 0, sizeof(v56));
    memset(&v83, 0, sizeof(v83));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v83, 0, 0, 0);
    memset(&v82, 0, sizeof(v82));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v82, 0, 0, 0);
    LODWORD(v85.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v26[14] + 8))(*(_QWORD *)(v26[14] + 8));
    Espresso::abstract_engine_factory::make_kernel_priv();
    v86 = v62;
    v87 = v63;
    if (v63)
    {
      v30 = (unint64_t *)&v63->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    memset(&v85, 0, sizeof(v85));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v85, (__int128 *)v83.__r_.__value_.__l.__data_, (__int128 *)v83.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83.__r_.__value_.__l.__size_ - v83.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v84, 0, sizeof(v84));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v84, (__int128 *)v82.__r_.__value_.__l.__data_, (__int128 *)v82.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82.__r_.__value_.__l.__size_ - v82.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add_kernel_dbg();
    v88 = &v84;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
    v88 = &v85;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
    v32 = v87;
    if (v87)
    {
      v33 = (unint64_t *)&v87->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (*v26)
      Espresso::sequential_builder::add_shape_from_kernel();
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    v35 = v63;
    if (v63)
    {
      v36 = (unint64_t *)&v63->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    if (v59 < 0)
      operator delete(__p[0]);
    if (v61 < 0)
      operator delete(v60);
    v38 = (_QWORD *)*((_QWORD *)this + 1);
    v39 = *((_QWORD *)this + 2);
    v40 = *(_BYTE *)v39;
    v41 = *(_DWORD *)(v39 + 4);
    v42 = *(_DWORD *)(v39 + 8) + 1;
    LODWORD(v39) = *(_DWORD *)(v39 + 12);
    v85.__r_.__value_.__s.__data_[0] = v40;
    *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + 4) = __PAIR64__(v42, v41);
    HIDWORD(v85.__r_.__value_.__r.__words[1]) = v39;
    v43 = EspressoConverter::convertNeuralNetwork((uint64_t)v18, *(void **)this, v38, (uint64_t)&v85);
    *(_DWORD *)(*((_QWORD *)this + 2) + 4) = HIDWORD(v85.__r_.__value_.__r.__words[0]);
    if (v43)
      v25 = 1;
    else
      v25 = v25;
  }
  v44 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&v85, "cf_end");
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  else
    v45 = v81.__r_.__value_.__l.__size_;
  v46 = &v84;
  std::string::basic_string[abi:ne180100]((uint64_t)&v84, v45 + 4);
  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v46 = (std::string *)v84.__r_.__value_.__r.__words[0];
  if (v45)
  {
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &v81;
    else
      v47 = (std::string *)v81.__r_.__value_.__r.__words[0];
    memmove(v46, v47, v45);
  }
  strcpy((char *)v46 + v45, "_end");
  memset(v53, 0, sizeof(v53));
  memset(v52, 0, sizeof(v52));
  Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v54, v44, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v82, 0, 0, v52);
  v48 = v55;
  if (v55)
  {
    v49 = (unint64_t *)&v55->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  CoreML::Specification::BranchLayerParams::~BranchLayerParams((CoreML::Specification::BranchLayerParams *)&v72);
  v72 = (void **)&v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v72);
  v72 = (void **)v80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v72);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  return v25;
}

void sub_19C94A5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  *(_QWORD *)(v48 - 72) = v48 - 184;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 72));
  *(_QWORD *)(v48 - 72) = v48 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 72));
  *(_QWORD *)(v48 - 72) = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 72));
  *(_QWORD *)(v48 - 72) = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 72));
  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  CoreML::Specification::BranchLayerParams::~BranchLayerParams((CoreML::Specification::BranchLayerParams *)&a48);
  a48 = v48 - 256;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  a48 = v48 - 232;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  if (*(char *)(v48 - 185) < 0)
    operator delete(*(void **)(v48 - 208));
  _Unwind_Resume(a1);
}

void LayerTranslator::addPooling(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::PoolingLayerParams *v7;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v8;
  uint64_t *v9;
  int v10;
  int v11;
  int64x2_t v12;
  std::string::size_type v13;
  int64x2_t v14;
  int8x8_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  unint64_t *inited;
  _QWORD *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t **v37;
  uint64_t v38;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v39;
  const CoreML::Specification::PoolingLayerParams *v40;
  int v41;
  int v42;
  int32x2_t v43;
  void *v44;
  int32x2_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  void *v65;
  unsigned int v66;
  unsigned int v67;
  std::runtime_error *exception;
  std::string *v69;
  __int128 v70;
  std::runtime_error *v71;
  std::string *v72;
  __int128 v73;
  std::runtime_error *v74;
  std::string *v75;
  __int128 v76;
  std::runtime_error *v77;
  std::string *v78;
  __int128 v79;
  std::runtime_error *v80;
  std::string *v81;
  __int128 v82;
  std::runtime_error *v83;
  std::string *v84;
  __int128 v85;
  int32x2_t v86;
  std::string v87;
  std::string v88;
  void *__p[2];
  char v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  std::string v93;
  uint64_t v94;
  int v95;
  __int16 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE v104[16];
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  char v110;
  char v111;
  uint64_t v112;
  int v113;
  __int128 *v114;
  __int128 *v115;
  uint64_t v116;
  __int128 *v117;
  __int128 *v118;
  uint64_t v119;
  std::string v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  void *v124;
  void *v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  std::string v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  int v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  std::string *v148;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v120.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v5;
  }
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v114 = 0;
  v115 = 0;
  v116 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v117, (uint64_t *)&v114, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 120)
  {
    v7 = (const CoreML::Specification::PoolingLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::PoolingLayerParams *)&CoreML::Specification::_PoolingLayerParams_default_instance_;
  }
  v8 = CoreML::Specification::PoolingLayerParams::PoolingLayerParams((CoreML::Specification::PoolingLayerParams *)v104, v7);
  if (v105)
  {
    if (v105 != 2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v69 = std::string::append(&v133, " , if set, kernel size must be of length 2");
      v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v93);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!v111 && (!*(_QWORD *)(v106 + 8) || !*(_QWORD *)(v106 + 16)))
    {
      v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v75 = std::string::append(&v133, " , kernel size cannot be 0");
      v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v74, &v93);
      __cxa_throw(v74, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  if (v107)
  {
    if (v107 != 2)
    {
      v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v72 = std::string::append(&v133, " , if set, stride must be of length 2");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v71, &v93);
      __cxa_throw(v71, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!v111 && (!*(_QWORD *)(v108 + 8) || !*(_QWORD *)(v108 + 16)))
    {
      v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v78 = std::string::append(&v133, " , stride cannot be 0");
      v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v77, &v93);
      __cxa_throw(v77, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  if (v113 == 32)
  {
    if ((*(_DWORD *)(v112 + 16) | 2) != 2)
    {
      v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v84 = std::string::append(&v133, " , for include last pixel padding, padding amounts must be of length 2, if set");
      v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v83, &v93);
      __cxa_throw(v83, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v10 = 1;
  }
  else
  {
    if (v113 == 30)
    {
      v9 = *(uint64_t **)(v112 + 16);
      if (!v9)
        v9 = &CoreML::Specification::_BorderAmounts_default_instance_;
      if ((*((_DWORD *)v9 + 6) | 2) != 2)
      {
        v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v81 = std::string::append(&v133, " , for valid padding, padding border amounts must be specified for both height and width, if set");
        v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v82;
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v80, &v93);
        __cxa_throw(v80, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    v10 = 0;
  }
  LODWORD(v93.__r_.__value_.__l.__data_) = 0;
  HIDWORD(v93.__r_.__value_.__r.__words[1]) = 0;
  v94 = 1;
  v11 = 2;
  v95 = 2;
  v96 = 1;
  v97 = 0u;
  v98 = 0u;
  v99 = 0;
  v100 = 0;
  v101 = 0x100000001;
  v102 = 0;
  v103 = 0;
  if (v109 != 2)
  {
    if (v109)
      goto LABEL_29;
    v11 = 1;
  }
  LODWORD(v93.__r_.__value_.__l.__data_) = v11;
LABEL_29:
  if (v105)
  {
    v12 = (int64x2_t)vextq_s8(*(int8x16_t *)(v106 + 8), *(int8x16_t *)(v106 + 8), 8uLL);
    v13 = (std::string::size_type)vbsl_s8((int8x8_t)vmovn_s64(vceqzq_s64(v12)), (int8x8_t)0x300000003, (int8x8_t)vmovn_s64(v12));
  }
  else
  {
    v13 = 0x300000003;
  }
  *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = v13;
  if (v107)
  {
    v14 = (int64x2_t)vextq_s8(*(int8x16_t *)(v108 + 8), *(int8x16_t *)(v108 + 8), 8uLL);
    v15 = vbsl_s8((int8x8_t)vmovn_s64(vceqzq_s64(v14)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(v14));
  }
  else
  {
    v15 = (int8x8_t)0x100000001;
  }
  v93.__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
  if (v111)
    *(_DWORD *)((char *)&v98 + 2) = 1;
  if (v113 <= 30)
  {
    if (v113 != 30)
    {
      if (v113)
        goto LABEL_68;
      v28 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD5E28](v28, "Pooling padding type not set");
      goto LABEL_143;
    }
    v95 = 0;
    v18 = *(uint64_t **)(v112 + 16);
    if (!v18)
      v18 = &CoreML::Specification::_BorderAmounts_default_instance_;
    if (*((_DWORD *)v18 + 6))
    {
      v19 = v18[4];
      v20 = *(_QWORD *)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16);
      v23 = *(_QWORD *)(v20 + 16);
      v22 = *(_QWORD *)(v20 + 24);
      v24 = *(_QWORD *)(v21 + 16);
      v25 = *(_QWORD *)(v21 + 24);
      if (v24)
        goto LABEL_62;
    }
    else
    {
      LOWORD(v24) = 0;
      v25 = 0;
      v23 = 0;
      v22 = 0;
    }
    if (!v25 && !v22 && !v23)
    {
      v27 = 2;
      goto LABEL_61;
    }
LABEL_62:
    v96 = 0;
    WORD3(v97) = v24;
    WORD4(v97) = v25;
    WORD5(v97) = v23;
    WORD6(v97) = v22;
    goto LABEL_68;
  }
  if (v113 == 31)
  {
    v95 = 0;
    v26 = *(_DWORD *)(v112 + 16);
    if (v26 == 1)
    {
      v27 = 4;
      goto LABEL_61;
    }
    if (!v26)
    {
      v27 = 1;
LABEL_61:
      v96 = v27;
      goto LABEL_68;
    }
    v28 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v28, "Same Padding Mode not recognized");
LABEL_143:
    __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v113 == 32)
  {
    v95 = 2;
    v96 = 0;
    v16 = (uint64_t *)v112;
    if (*(_DWORD *)(v112 + 16))
    {
      if (v10)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(v112 + 24) + 8);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v8);
        v17 = *(_QWORD *)(qword_1ED0064C8 + 8);
        if (v113 == 32)
        {
          v16 = (uint64_t *)v112;
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          v16 = &CoreML::Specification::_PoolingLayerParams_ValidCompletePadding_default_instance_;
        }
      }
      v29 = *(_WORD *)(v16[3] + 16);
    }
    else
    {
      v29 = 0;
      LOWORD(v17) = 0;
    }
    WORD3(v97) = v29;
    WORD4(v97) = v29;
    WORD5(v97) = v17;
    WORD6(v97) = v17;
  }
LABEL_68:
  if (v110)
    HIDWORD(v94) = 1;
  v31 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "pool");
  memset(&v88, 0, sizeof(v88));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v88, v114, v115, 0xAAAAAAAAAAAAAAABLL * (((char *)v115 - (char *)v114) >> 3));
  memset(&v87, 0, sizeof(v87));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v87, v117, v118, 0xAAAAAAAAAAAAAAABLL * (((char *)v118 - (char *)v117) >> 3));
  *(_QWORD *)&v128 = 0;
  v127 = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v127, (__int128 *)v88.__r_.__value_.__l.__data_, (__int128 *)v88.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88.__r_.__value_.__l.__size_ - v88.__r_.__value_.__r.__words[0]) >> 3));
  v121 = 0uLL;
  *(_QWORD *)&v122 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v121, (__int128 *)v87.__r_.__value_.__l.__data_, (__int128 *)v87.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87.__r_.__value_.__l.__size_ - v87.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v133.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(v31[14] + 8))(*(_QWORD *)(v31[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v146 = v91;
  v147 = v92;
  if (v92)
  {
    p_shared_owners = (unint64_t *)&v92->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
  }
  memset(&v133, 0, sizeof(v133));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v133, (__int128 *)v127, *((__int128 **)&v127 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v127 + 1) - v127) >> 3));
  v140 = 0uLL;
  *(_QWORD *)&v141 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v140, (__int128 *)v121, *((__int128 **)&v121 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v121 + 1) - v121) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v148 = (std::string *)&v140;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
  v148 = &v133;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
  v34 = v147;
  if (v147)
  {
    v35 = (unint64_t *)&v147->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (*v31)
    Espresso::sequential_builder::add_shape_from_kernel();
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v127;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  if (v90 < 0)
    operator delete(__p[0]);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v117);
    goto LABEL_106;
  }
  v37 = (uint64_t **)*((_QWORD *)this + 1);
  v38 = std::map<std::string,std::string>::at((uint64_t)v37, v114);
  v140 = *(_OWORD *)v38;
  v141 = *(_OWORD *)(v38 + 16);
  v142 = *(_QWORD *)(v38 + 32);
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v39 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v143, *(const void **)(v38 + 40), *(_QWORD *)(v38 + 48), (uint64_t)(*(_QWORD *)(v38 + 48)- *(_QWORD *)(v38 + 40)) >> 2);
  if (*((_DWORD *)a2 + 35) == 120)
  {
    v40 = (const CoreML::Specification::PoolingLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v39);
    v40 = (const CoreML::Specification::PoolingLayerParams *)&CoreML::Specification::_PoolingLayerParams_default_instance_;
  }
  CoreML::Specification::PoolingLayerParams::PoolingLayerParams((CoreML::Specification::PoolingLayerParams *)&v133, v40);
  if (LODWORD(v133.__r_.__value_.__r.__words[2]))
  {
    v41 = *(_DWORD *)(v134 + 8);
    v42 = *(_DWORD *)(v134 + 16);
  }
  else
  {
    v41 = 3;
    v42 = 3;
  }
  if (v135)
    v43 = vmovn_s64(*(int64x2_t *)(v136 + 8));
  else
    v43 = (int32x2_t)0x100000001;
  v86 = v43;
  v127 = v140;
  v128 = v141;
  v44 = v143;
  v129 = v142;
  v130 = 0;
  v132 = 0;
  v131 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v130, v143, v144, (v144 - (uint64_t)v143) >> 2);
  if (v137)
  {
    v45 = (int32x2_t)0x100000001;
  }
  else
  {
    if (v139 <= 30)
    {
      if (v139 == 30)
      {
        v57 = *(uint64_t **)(v138 + 16);
        if (!v57)
          v57 = &CoreML::Specification::_BorderAmounts_default_instance_;
        v58 = *((_DWORD *)v57 + 6);
        if (v58)
        {
          v59 = v57[4];
          v60 = *(_QWORD *)(v59 + 8);
          v61 = *(_QWORD *)(v59 + 16);
          v62 = *(_DWORD *)(v60 + 16);
          v63 = *(_DWORD *)(v60 + 24);
          v64 = *(_DWORD *)(v61 + 16);
          v58 = *(_DWORD *)(v61 + 24);
        }
        else
        {
          v64 = 0;
          v63 = 0;
          v62 = 0;
        }
        DWORD1(v127) = (v63 - v41 + v62 + DWORD1(v140)) / v86.i32[0] + 1;
        LODWORD(v127) = (v64 - v42 + v58 + (int)v140) / v86.i32[1] + 1;
      }
      else if (!v139)
      {
        v65 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v65, "Pooling padding type not set");
        __cxa_throw(v65, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      goto LABEL_96;
    }
    if (v139 != 31)
    {
      if (v139 == 32)
      {
        v54 = *(_DWORD *)(v138 + 16);
        if (v54)
        {
          v55 = *(_QWORD *)(v138 + 24);
          v54 = *(_DWORD *)(v55 + 8);
          v56 = *(_DWORD *)(v55 + 16);
        }
        else
        {
          v56 = 0;
        }
        v66 = vcvtps_s32_f32((float)(DWORD1(v140) - v41 + 2 * v54) / (float)v86.i32[0]);
        DWORD1(v127) = v66 + 1;
        if (v54 | v56 && (int)(v86.i32[0] * v66) >= DWORD1(v140) + v54)
          DWORD1(v127) = v66;
        v67 = vcvtps_s32_f32((float)(v140 - v42 + 2 * v56) / (float)v86.i32[1]);
        LODWORD(v127) = v67 + 1;
        if (v54 | v56 && (int)(v86.i32[1] * v67) >= (int)v140 + v56)
          LODWORD(v127) = v67;
      }
      goto LABEL_96;
    }
    v45 = vcvt_s32_f32(vrndp_f32(vdiv_f32(vcvt_f32_s32(*(int32x2_t *)&v140), (float32x2_t)vrev64_s32((int32x2_t)vcvt_f32_s32(v86)))));
  }
  *(int32x2_t *)&v127 = v45;
LABEL_96:
  if (DWORD1(v140) == -1)
    DWORD1(v127) = -1;
  if ((_DWORD)v140 == -1)
    LODWORD(v127) = -1;
  v121 = v127;
  v122 = v128;
  v46 = v130;
  v123 = v129;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v47 = v131;
  v48 = (v131 - (uint64_t)v130) >> 2;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v124, v130, v131, v48);
  EspressoConverter::validateShape((int *)&v121, *((_QWORD *)a2 + 14), (uint64_t)v117);
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  __p[0] = v117;
  v49 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, v117, (__int128 **)__p);
  v50 = v128;
  *(_OWORD *)(v49 + 56) = v127;
  *(_OWORD *)(v49 + 72) = v50;
  *((_QWORD *)v49 + 11) = v129;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v49 + 96, v46, v47, v48);
  if (v46)
    operator delete(v46);
  CoreML::Specification::PoolingLayerParams::~PoolingLayerParams((CoreML::Specification::PoolingLayerParams *)&v133);
  if (v44)
    operator delete(v44);
LABEL_106:
  v51 = v92;
  if (v92)
  {
    v52 = (unint64_t *)&v92->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  CoreML::Specification::PoolingLayerParams::~PoolingLayerParams((CoreML::Specification::PoolingLayerParams *)v104);
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
}

void sub_19C94B4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  void *v72;
  void *v73;
  uint64_t v74;

  __cxa_free_exception(v73);
  if (__p)
    operator delete(__p);
  CoreML::Specification::PoolingLayerParams::~PoolingLayerParams((CoreML::Specification::PoolingLayerParams *)(v74 - 248));
  if (v72)
    operator delete(v72);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  CoreML::Specification::PoolingLayerParams::~PoolingLayerParams((CoreML::Specification::PoolingLayerParams *)&a38);
  a23 = &a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

void LayerTranslator::addModBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[2] = (void **)897988541;
  v18 = 0;
  v19 = 0;
  v16[0] = (void **)36;
  v16[1] = (void **)1065353216;
  v17 = 1;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C94B8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addActivationsIOS13(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::runtime_error *exception;
  std::string v28;
  std::string v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::string v32;
  void *__p[2];
  uint64_t v34;
  std::string *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 *v47;
  __int128 *v48;
  uint64_t v49;
  std::string v50;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v50.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v5;
  }
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v47, (uint64_t *)&v44, *((_QWORD *)this + 1));
  v39 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v40 = _D0;
  v41 = 0;
  v43 = 0;
  v42 = 0;
  v11 = *((_DWORD *)a2 + 35);
  if (v11 == 790)
  {
    v39 = 20;
  }
  else if (v11 == 795)
  {
    v12 = *((_QWORD *)a2 + 16);
    v35 = (std::string *)&off_1E3D4F408;
    v36 = 0;
    v38 = 0;
    v13 = *(_QWORD *)(v12 + 8);
    if ((v13 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v36, v13 & 0xFFFFFFFFFFFFFFFELL);
    v14 = *(_DWORD *)(v12 + 16);
    v37 = v14;
    if (v14 <= 0)
    {
      if (!v14)
      {
        v15 = 19;
        goto LABEL_16;
      }
      v16 = 0x80000000;
    }
    else
    {
      if (v14 == 1)
      {
        v15 = 21;
        goto LABEL_16;
      }
      if (v14 == 2)
      {
        v15 = 22;
LABEL_16:
        v39 = v15;
LABEL_20:
        v35 = (std::string *)&off_1E3D4F408;
        google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v36);
        goto LABEL_21;
      }
      v16 = 0x7FFFFFFF;
    }
    if (v14 == v16)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Gelu layer: '", 13);
      v22 = *((_QWORD *)a2 + 14);
      v23 = *(char *)(v22 + 23);
      if (v23 >= 0)
        v24 = *((_QWORD *)a2 + 14);
      else
        v24 = *(_QWORD *)v22;
      if (v23 >= 0)
        v25 = *(unsigned __int8 *)(v22 + 23);
      else
        v25 = *(_QWORD *)(v22 + 8);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"': unknown value for parameter 'mode'.", 38);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v32);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    goto LABEL_20;
  }
LABEL_21:
  v17 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  memset(&v29, 0, sizeof(v29));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, v44, v45, 0xAAAAAAAAAAAAAAABLL * (((char *)v45 - (char *)v44) >> 3));
  memset(&v28, 0, sizeof(v28));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, v47, v48, 0xAAAAAAAAAAAAAAABLL * (((char *)v48 - (char *)v47) >> 3));
  Espresso::sequential_builder::add<Espresso::activation_params>(&v30, v17, (uint64_t)__p, (uint64_t)&v50, (uint64_t)&v39, (__int128 *)v29.__r_.__value_.__l.__data_, (__int128 *)v29.__r_.__value_.__l.__size_, (__int128 **)&v28);
  v18 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v35 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  v35 = &v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v47);
  __p[0] = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
}

void sub_19C94BC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t *v28;
  void *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a23);
      *(_QWORD *)(v32 - 192) = v30;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v28);
      a23 = (void *)(v32 - 128);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      a23 = (void *)(v32 - 104);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      if (*(char *)(v32 - 57) < 0)
        operator delete(*(void **)(v32 - 80));
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

uint64_t LayerTranslator::addActivation(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  int v12;
  int v13;
  int v14;
  int v15;
  _QWORD *v16;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v17;
  int v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *WeightParamSize;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v47;
  int v48;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  _BOOL8 hasSufficientBytesInQuantizedWeightParam;
  uint64_t *v58;
  const CoreML::Specification::WeightParams *v59;
  const CoreML::Specification::WeightParams *v60;
  _DWORD *v61;
  void *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  int v67;
  uint64_t v68;
  uint64_t *v69;
  _DWORD *v70;
  void *v71;
  int v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int *v82;
  int v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v106;
  int v107;
  unsigned int v108;
  int v109;
  uint64_t v111;
  BOOL v112;
  BOOL v113;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v121;
  int v122;
  uint64_t *v123;
  uint64_t *v124;
  int v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v130;
  int v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *inited;
  _DWORD *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  int *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  _DWORD *v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148;
  int *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  int v167;
  uint64_t *v168;
  uint64_t *v169;
  _BOOL8 v170;
  int v171;
  uint64_t *v172;
  const CoreML::Specification::WeightParams *v173;
  const CoreML::Specification::WeightParams *v174;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v175;
  uint64_t *v176;
  const CoreML::Specification::WeightParams *v177;
  const CoreML::Specification::WeightParams *v178;
  _DWORD *v179;
  void *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  int *v184;
  int v185;
  _DWORD *v186;
  char *v187;
  int v188;
  uint64_t v189;
  uint64_t i;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  int v211;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t **v222;
  uint64_t v223;
  void *v224;
  char *v225;
  uint64_t v226;
  char *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::runtime_error *v232;
  std::string *v233;
  __int128 v234;
  std::runtime_error *v235;
  std::string *v236;
  __int128 v237;
  std::runtime_error *exception;
  std::string *v239;
  __int128 v240;
  std::string *v241;
  std::string::size_type size;
  std::string *v243;
  __int128 v244;
  std::string *v245;
  __int128 v246;
  uint64_t v247;
  std::string *v248;
  std::string::size_type v249;
  std::string *v250;
  __int128 v251;
  std::string *v252;
  __int128 v253;
  unsigned int v254;
  std::string v255;
  std::string v256;
  std::string v257;
  std::string v258;
  std::string v259;
  __int128 v260;
  std::string v261;
  std::string v262;
  __int128 v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  __int128 *v269;
  __int128 *v270;
  uint64_t v271;
  __int128 *v272;
  __int128 *v273;
  uint64_t v274;
  std::string v275;
  _BYTE v276[32];
  uint64_t v277;
  void *__p;
  void *v279;
  uint64_t v280;
  _BYTE v281[32];
  uint64_t v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  _BYTE v286[32];
  uint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v275, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v275.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v275.__r_.__value_.__l.__data_ = v5;
  }
  v272 = 0;
  v273 = 0;
  v274 = 0;
  v269 = 0;
  v270 = 0;
  v271 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v272, (uint64_t *)&v269, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 130)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_ActivationParams_default_instance_;
  }
  v264 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v265 = _D0;
  v268 = 0;
  v266 = 0;
  v267 = 0;
  v12 = *((_DWORD *)v7 + 7);
  if (v12 > 39)
  {
    if (v12 > 59)
    {
      switch(v12)
      {
        case '<':
          v15 = 12;
          break;
        case 'F':
          v15 = 10;
          break;
        case 'G':
          v15 = 11;
          break;
        default:
          goto LABEL_37;
      }
    }
    else
    {
      if (v12 != 40)
      {
        if (v12 != 41)
        {
          if (v12 != 50)
            goto LABEL_37;
          v13 = 8;
          goto LABEL_31;
        }
        v14 = 7;
        goto LABEL_33;
      }
      v15 = 3;
    }
  }
  else
  {
    if (v12 <= 24)
    {
      if (v12 != 5)
      {
        if (v12 == 15)
        {
          v13 = 2;
        }
        else
        {
          if (v12 != 20)
            goto LABEL_37;
          v13 = 9;
        }
LABEL_31:
        v264 = v13;
        LODWORD(v265) = *(_DWORD *)(v7[2] + 16);
        goto LABEL_37;
      }
      v14 = 6;
      goto LABEL_33;
    }
    switch(v12)
    {
      case 25:
        v15 = 4;
        break;
      case 30:
        v15 = 1;
        break;
      case 31:
        v14 = 5;
LABEL_33:
        v264 = v14;
        v265 = *(_QWORD *)(v7[2] + 16);
        goto LABEL_37;
      default:
        goto LABEL_37;
    }
  }
  v264 = v15;
LABEL_37:
  v16 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(v286, "activation");
  memset(&v262, 0, sizeof(v262));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v262, v269, v270, 0xAAAAAAAAAAAAAAABLL * (((char *)v270 - (char *)v269) >> 3));
  memset(&v261, 0, sizeof(v261));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v261, v272, v273, 0xAAAAAAAAAAAAAAABLL * (((char *)v273 - (char *)v272) >> 3));
  Espresso::sequential_builder::add<Espresso::activation_params>((uint64_t *)&v263, v16, (uint64_t)v286, (uint64_t)&v275, (uint64_t)&v264, (__int128 *)v262.__r_.__value_.__l.__data_, (__int128 *)v262.__r_.__value_.__l.__size_, (__int128 **)&v261);
  *(_QWORD *)v281 = &v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v281);
  *(_QWORD *)v281 = &v262;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v281);
  if ((v286[23] & 0x80000000) != 0)
    operator delete(*(void **)v286);
  v18 = *((_DWORD *)v7 + 7);
  if (v18 != 25)
  {
    v24 = 0;
    goto LABEL_189;
  }
  v19 = v263;
  v260 = v263;
  if (!*((_QWORD *)&v263 + 1))
    goto LABEL_44;
  v20 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  if (*((_DWORD *)v7 + 7) != 25)
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v17);
    v23 = *((_DWORD *)v7 + 7);
    v22 = &CoreML::Specification::_ActivationPReLU_default_instance_;
  }
  else
  {
LABEL_44:
    v22 = (uint64_t *)v7[2];
    v23 = 25;
  }
  v25 = (uint64_t *)v22[2];
  if (v25)
    v26 = v25;
  else
    v26 = &CoreML::Specification::_WeightParams_default_instance_;
  WeightParamSize = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)EspressoConverter::getWeightParamSize((uint64_t)v26);
  v28 = (uint64_t)WeightParamSize;
  if (v23 == 25)
  {
    v29 = (uint64_t *)v7[2];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(WeightParamSize);
    v29 = &CoreML::Specification::_ActivationPReLU_default_instance_;
  }
  v30 = (uint64_t *)v29[2];
  if (!v30)
    v30 = &CoreML::Specification::_WeightParams_default_instance_;
  v31 = v30[5];
  v32 = *(unsigned __int8 *)(v31 + 23);
  if (*(char *)(v31 + 23) < 0)
    v33 = *(_QWORD *)(v31 + 8);
  else
    v33 = *(unsigned __int8 *)(v31 + 23);
  v34 = v30[6];
  v35 = *(unsigned __int8 *)(v34 + 23);
  if (*(char *)(v34 + 23) < 0)
    v36 = *(_QWORD *)(v34 + 8);
  else
    v36 = *(unsigned __int8 *)(v34 + 23);
  v37 = *((_DWORD *)v30 + 4);
  v38 = v30[7];
  v39 = *(unsigned __int8 *)(v38 + 23);
  if (*(char *)(v38 + 23) < 0)
    v40 = *(_QWORD *)(v38 + 8);
  else
    v40 = *(unsigned __int8 *)(v38 + 23);
  if (v37 <= 0)
    v41 = 1;
  else
    v41 = 2;
  if (v33)
    v42 = v41;
  else
    v42 = v37 > 0;
  if (v36)
    ++v42;
  if (v40)
    ++v42;
  if (v42 <= 1)
  {
    if (v42)
      v43 = 0;
    else
      v43 = 5;
    if (v37 <= 0 && v42)
    {
      if ((v32 & 0x80) != 0)
        v32 = *(_QWORD *)(v31 + 8);
      if (v32)
      {
        v43 = 1;
      }
      else
      {
        if ((v35 & 0x80) != 0)
          v35 = *(_QWORD *)(v34 + 8);
        v44 = v30[8];
        if (v30 != &CoreML::Specification::_WeightParams_default_instance_ && v35 && v44)
        {
          v28 = 1;
          v43 = 2;
        }
        else
        {
          if ((v39 & 0x80) != 0)
            v39 = *(_QWORD *)(v38 + 8);
          if (v44)
            _ZF = v39 == 0;
          else
            _ZF = 1;
          if (_ZF || v30 == &CoreML::Specification::_WeightParams_default_instance_)
            v43 = 5;
          else
            v43 = 3;
        }
      }
    }
  }
  else
  {
    v43 = 4;
  }
  std::string::basic_string[abi:ne180100]<0>(v286, "PReLU");
  v47 = std::map<std::string,std::string>::at(*((_QWORD *)this + 1), v269);
  v48 = inferNumChannels((const void **)v286, (uint64_t)&v275, *(unsigned int *)(v47 + 8), v28, *((_DWORD *)a2 + 18), *((_QWORD *)a2 + 10));
  if ((v286[23] & 0x80000000) != 0)
    operator delete(*(void **)v286);
  if ((_DWORD)v28 != 1
    && *(_DWORD *)(std::map<std::string,std::string>::at(*((_QWORD *)this + 1), v269) + 8) != -1
    && (_DWORD)v28 != *(_DWORD *)(std::map<std::string,std::string>::at(*((_QWORD *)this + 1), v269) + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v239 = std::string::append(&v257, " , number of alpha parameters (");
    v240 = *(_OWORD *)&v239->__r_.__value_.__l.__data_;
    v258.__r_.__value_.__r.__words[2] = v239->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v240;
    v239->__r_.__value_.__l.__size_ = 0;
    v239->__r_.__value_.__r.__words[2] = 0;
    v239->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v256, v28);
    if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v241 = &v256;
    else
      v241 = (std::string *)v256.__r_.__value_.__r.__words[0];
    if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v256.__r_.__value_.__r.__words[2]);
    else
      size = v256.__r_.__value_.__l.__size_;
    v243 = std::string::append(&v258, (const std::string::value_type *)v241, size);
    v244 = *(_OWORD *)&v243->__r_.__value_.__l.__data_;
    v259.__r_.__value_.__r.__words[2] = v243->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v244;
    v243->__r_.__value_.__l.__size_ = 0;
    v243->__r_.__value_.__r.__words[2] = 0;
    v243->__r_.__value_.__r.__words[0] = 0;
    v245 = std::string::append(&v259, ") is not equal to the channel dimension (");
    v246 = *(_OWORD *)&v245->__r_.__value_.__l.__data_;
    *(_QWORD *)&v276[16] = *((_QWORD *)&v245->__r_.__value_.__l + 2);
    *(_OWORD *)v276 = v246;
    v245->__r_.__value_.__l.__size_ = 0;
    v245->__r_.__value_.__r.__words[2] = 0;
    v245->__r_.__value_.__r.__words[0] = 0;
    v247 = std::map<std::string,std::string>::at(*((_QWORD *)this + 1), v269);
    std::to_string(&v255, *(_DWORD *)(v247 + 8));
    if ((v255.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v248 = &v255;
    else
      v248 = (std::string *)v255.__r_.__value_.__r.__words[0];
    if ((v255.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v249 = HIBYTE(v255.__r_.__value_.__r.__words[2]);
    else
      v249 = v255.__r_.__value_.__l.__size_;
    v250 = std::string::append((std::string *)v276, (const std::string::value_type *)v248, v249);
    v251 = *(_OWORD *)&v250->__r_.__value_.__l.__data_;
    *(_QWORD *)&v281[16] = *((_QWORD *)&v250->__r_.__value_.__l + 2);
    *(_OWORD *)v281 = v251;
    v250->__r_.__value_.__l.__size_ = 0;
    v250->__r_.__value_.__r.__words[2] = 0;
    v250->__r_.__value_.__r.__words[0] = 0;
    v252 = std::string::append((std::string *)v281, ") of the input");
    v253 = *(_OWORD *)&v252->__r_.__value_.__l.__data_;
    *(_QWORD *)&v286[16] = *((_QWORD *)&v252->__r_.__value_.__l + 2);
    *(_OWORD *)v286 = v253;
    v252->__r_.__value_.__l.__size_ = 0;
    v252->__r_.__value_.__r.__words[2] = 0;
    v252->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v286);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v49 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v276, v48, 1, 1, 1);
  if (v43 > 1)
  {
    if (*((_DWORD *)v7 + 7) == 25)
    {
      v51 = (uint64_t *)v7[2];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v49);
      v51 = &CoreML::Specification::_ActivationPReLU_default_instance_;
    }
    v55 = (uint64_t *)v51[2];
    if (v55)
      v56 = v55;
    else
      v56 = &CoreML::Specification::_WeightParams_default_instance_;
    hasSufficientBytesInQuantizedWeightParam = CoreML::hasSufficientBytesInQuantizedWeightParam(v56, (int)v28);
    if (!hasSufficientBytesInQuantizedWeightParam)
    {
      v232 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v233 = std::string::append((std::string *)v281, " has insufficent bytes for quantized alpha parameters");
      v234 = *(_OWORD *)&v233->__r_.__value_.__l.__data_;
      *(_QWORD *)&v286[16] = *((_QWORD *)&v233->__r_.__value_.__l + 2);
      *(_OWORD *)v286 = v234;
      v233->__r_.__value_.__l.__size_ = 0;
      v233->__r_.__value_.__r.__words[2] = 0;
      v233->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v232, (const std::string *)v286);
      __cxa_throw(v232, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (*((_DWORD *)v7 + 7) == 25)
    {
      v58 = (uint64_t *)v7[2];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)hasSufficientBytesInQuantizedWeightParam);
      v58 = &CoreML::Specification::_ActivationPReLU_default_instance_;
    }
    v59 = (const CoreML::Specification::WeightParams *)v58[2];
    if (v59)
      v60 = v59;
    else
      v60 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::readFloatFromWeightParams((EspressoConverter *)v286, v60, (int)v28);
    v52 = *(_QWORD *)v276;
    v61 = *(_DWORD **)(*(_QWORD *)v276 + 16);
    v62 = *(void **)v286;
    if ((_DWORD)v28 == 1)
    {
      if (v48 < 1)
        goto LABEL_137;
      v63 = **(_DWORD **)v286;
      v64 = v48;
      do
      {
        *v61++ = v63;
        --v64;
      }
      while (v64);
    }
    else if (v48 == (_DWORD)v28 && v48 >= 1)
    {
      v65 = v28;
      v66 = *(int **)v286;
      do
      {
        v67 = *v66++;
        *v61++ = v67;
        --v65;
      }
      while (v65);
      goto LABEL_137;
    }
    if (!v62)
      goto LABEL_138;
LABEL_137:
    operator delete(v62);
    goto LABEL_138;
  }
  if (v43 == 1)
  {
    if (*((_DWORD *)v7 + 7) == 25)
    {
      v50 = (uint64_t *)v7[2];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v49);
      v50 = &CoreML::Specification::_ActivationPReLU_default_instance_;
    }
    v69 = (uint64_t *)v50[2];
    if (!v69)
      v69 = &CoreML::Specification::_WeightParams_default_instance_;
    EspressoConverter::readHalfPrecisionWeightsFromByteStream((uint64_t)v286, (void **)v69[5]);
    v52 = *(_QWORD *)v276;
    v70 = *(_DWORD **)(*(_QWORD *)v276 + 16);
    v71 = *(void **)v286;
    if ((_DWORD)v28 == 1)
    {
      if (v48 < 1)
        goto LABEL_169;
      v72 = **(_DWORD **)v286;
      v73 = v48;
      do
      {
        *v70++ = v72;
        --v73;
      }
      while (v73);
    }
    else if (v48 == (_DWORD)v28 && v48 >= 1)
    {
      v81 = v28;
      v82 = *(int **)v286;
      do
      {
        v83 = *v82++;
        *v70++ = v83;
        --v81;
      }
      while (v81);
      goto LABEL_169;
    }
    if (!v71)
    {
LABEL_170:
      v68 = 1;
      goto LABEL_171;
    }
LABEL_169:
    operator delete(v71);
    goto LABEL_170;
  }
  v52 = *(_QWORD *)v276;
  v53 = *(_DWORD **)(*(_QWORD *)v276 + 16);
  if (*((_DWORD *)v7 + 7) == 25)
  {
    v54 = (uint64_t *)v7[2];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v49);
    v54 = &CoreML::Specification::_ActivationPReLU_default_instance_;
  }
  v74 = (uint64_t *)v54[2];
  if (!v74)
    v74 = &CoreML::Specification::_WeightParams_default_instance_;
  v75 = v74[3];
  if (v75)
    v76 = (int *)(v75 + 8);
  else
    v76 = 0;
  if ((_DWORD)v28 == 1)
  {
    if (v48 >= 1)
    {
      v77 = *v76;
      v78 = v48;
      do
      {
        *v53++ = v77;
        --v78;
      }
      while (v78);
    }
  }
  else
  {
    v68 = 0;
    if (v48 != (_DWORD)v28 || v48 < 1)
      goto LABEL_171;
    v79 = v28;
    do
    {
      v80 = *v76++;
      *v53++ = v80;
      --v79;
    }
    while (v79);
  }
LABEL_138:
  v68 = 0;
LABEL_171:
  *(_OWORD *)v281 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v286, "params_prelu");
  v17 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)(*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v19 + 168))(v19, v281, v286, *(_QWORD *)(v52 + 16), 4 * *(int *)(v52 + 8), 0);
  v24 = v68;
  if ((v286[23] & 0x80000000) != 0)
    operator delete(*(void **)v286);
  v84 = *(std::__shared_weak_count **)&v281[8];
  if (*(_QWORD *)&v281[8])
  {
    v85 = (unint64_t *)(*(_QWORD *)&v281[8] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = *(std::__shared_weak_count **)&v276[8];
  if (*(_QWORD *)&v276[8])
  {
    v88 = (unint64_t *)(*(_QWORD *)&v276[8] + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (*((_QWORD *)&v260 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v260 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v260 + 1) + 16))(*((_QWORD *)&v260 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v260 + 1));
    }
  }
  v18 = *((_DWORD *)v7 + 7);
LABEL_189:
  if (v18 != 71)
    goto LABEL_452;
  v92 = v263;
  *(_OWORD *)v276 = v263;
  v254 = v24;
  if (!*((_QWORD *)&v263 + 1))
    goto LABEL_194;
  v93 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
  do
    v94 = __ldxr(v93);
  while (__stxr(v94 + 1, v93));
  if (*((_DWORD *)v7 + 7) != 71)
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v17);
    v95 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  else
  {
LABEL_194:
    v95 = (uint64_t *)v7[2];
  }
  v96 = (uint64_t *)v95[2];
  if (!v96)
    v96 = &CoreML::Specification::_WeightParams_default_instance_;
  v97 = v96[5];
  v98 = *(unsigned __int8 *)(v97 + 23);
  if (*(char *)(v97 + 23) < 0)
    v99 = *(_QWORD *)(v97 + 8);
  else
    v99 = *(unsigned __int8 *)(v97 + 23);
  v100 = v96[6];
  v101 = *(unsigned __int8 *)(v100 + 23);
  if (*(char *)(v100 + 23) < 0)
    v102 = *(_QWORD *)(v100 + 8);
  else
    v102 = *(unsigned __int8 *)(v100 + 23);
  v103 = *((_DWORD *)v96 + 4);
  v104 = v96[7];
  v105 = *(unsigned __int8 *)(v104 + 23);
  if (*(char *)(v104 + 23) < 0)
    v106 = *(CoreML::Specification::protobuf_NeuralNetwork_2eproto **)(v104 + 8);
  else
    v106 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)*(unsigned __int8 *)(v104 + 23);
  if (v103 <= 0)
    v107 = 1;
  else
    v107 = 2;
  if (v99)
    v108 = v107;
  else
    v108 = v103 > 0;
  if (v102)
    ++v108;
  if (v106)
    ++v108;
  if (v108 <= 1)
  {
    if (v108)
      v109 = 0;
    else
      v109 = 5;
    if (v103 <= 0 && v108 != 0)
    {
      if ((v98 & 0x80) != 0)
        v98 = *(_QWORD *)(v97 + 8);
      if (v98)
      {
        v109 = 1;
      }
      else
      {
        if ((v101 & 0x80) != 0)
          v101 = *(_QWORD *)(v100 + 8);
        v111 = v96[8];
        if (v96 == &CoreML::Specification::_WeightParams_default_instance_
          || (v101 ? (v112 = v111 == 0) : (v112 = 1), v112))
        {
          if ((v105 & 0x80) != 0)
            v105 = *(_QWORD *)(v104 + 8);
          if (v111)
            v113 = v105 == 0;
          else
            v113 = 1;
          if (v113 || v96 == &CoreML::Specification::_WeightParams_default_instance_)
            v109 = 5;
          else
            v109 = 3;
        }
        else
        {
          v109 = 2;
        }
      }
    }
  }
  else
  {
    v109 = 4;
  }
  if (*((_DWORD *)v7 + 7) == 71)
  {
    v115 = (uint64_t *)v7[2];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v106);
    v115 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  v116 = (uint64_t *)v115[2];
  if (v116)
    v117 = v116;
  else
    v117 = &CoreML::Specification::_WeightParams_default_instance_;
  v118 = EspressoConverter::getWeightParamSize((uint64_t)v117);
  std::string::basic_string[abi:ne180100]<0>(v286, "ParametricSoftplus");
  v119 = std::map<std::string,std::string>::at(*((_QWORD *)this + 1), v269);
  v120 = inferNumChannels((const void **)v286, (uint64_t)&v275, *(unsigned int *)(v119 + 8), v118, *((_DWORD *)a2 + 18), *((_QWORD *)a2 + 10));
  if ((v286[23] & 0x80000000) != 0)
    operator delete(*(void **)v286);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v259, v120, 1, 1, 1);
  v121 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v258, v120, 1, 1, 1);
  v122 = *((_DWORD *)v7 + 7);
  if (v109 != 2)
  {
    if (v122 == 71)
    {
      v124 = (uint64_t *)v7[2];
      v125 = 71;
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v121);
      v125 = *((_DWORD *)v7 + 7);
      v124 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
    }
    v128 = (uint64_t *)v124[2];
    if (v128)
      v129 = v128;
    else
      v129 = &CoreML::Specification::_WeightParams_default_instance_;
    v130 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)EspressoConverter::getWeightParamSize((uint64_t)v129);
    v131 = (int)v130;
    if (v125 == 71)
    {
      v132 = (uint64_t *)v7[2];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v130);
      v132 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
    }
    v133 = (uint64_t *)v132[3];
    if (v133)
      v134 = v133;
    else
      v134 = &CoreML::Specification::_WeightParams_default_instance_;
    inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)EspressoConverter::getWeightParamSize((uint64_t)v134);
    if (v131 == (_DWORD)inited)
    {
      if ((_DWORD)v118 != 1 && (_DWORD)v118 != v120)
      {
        v235 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v236 = std::string::append((std::string *)v281, "' has invalid alpha/beta size");
        v237 = *(_OWORD *)&v236->__r_.__value_.__l.__data_;
        *(_QWORD *)&v286[16] = *((_QWORD *)&v236->__r_.__value_.__l + 2);
        *(_OWORD *)v286 = v237;
        v236->__r_.__value_.__l.__size_ = 0;
        v236->__r_.__value_.__r.__words[2] = 0;
        v236->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v235, (const std::string *)v286);
        __cxa_throw(v235, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v136 = *(_DWORD **)(v259.__r_.__value_.__r.__words[0] + 16);
      if (*((_DWORD *)v7 + 7) == 71)
      {
        v137 = (uint64_t *)v7[2];
      }
      else
      {
        inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
        v137 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
      }
      v138 = (uint64_t *)v137[2];
      if (!v138)
        v138 = &CoreML::Specification::_WeightParams_default_instance_;
      v139 = v138[3];
      if (v139)
        v140 = (int *)(v139 + 8);
      else
        v140 = 0;
      if ((_DWORD)v118 == 1)
      {
        if (v120 >= 1)
        {
          v141 = *v140;
          v142 = v120;
          do
          {
            *v136++ = v141;
            --v142;
          }
          while (v142);
        }
      }
      else if ((_DWORD)v118 == v120 && v120 >= 1)
      {
        v143 = v118;
        do
        {
          v144 = *v140++;
          *v136++ = v144;
          --v143;
        }
        while (v143);
      }
      v145 = *(_DWORD **)(v258.__r_.__value_.__r.__words[0] + 16);
      if (*((_DWORD *)v7 + 7) == 71)
      {
        v146 = (uint64_t *)v7[2];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
        v146 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
      }
      v147 = (uint64_t *)v146[3];
      if (!v147)
        v147 = &CoreML::Specification::_WeightParams_default_instance_;
      v148 = v147[3];
      if (v148)
        v149 = (int *)(v148 + 8);
      else
        v149 = 0;
      if ((_DWORD)v118 == 1)
      {
        if (v120 >= 1)
        {
          v150 = *v149;
          v151 = v120;
          do
          {
            *v145++ = v150;
            --v151;
          }
          while (v151);
        }
      }
      else if ((_DWORD)v118 == v120 && v120 >= 1)
      {
        v152 = v118;
        do
        {
          v153 = *v149++;
          *v145++ = v153;
          --v152;
        }
        while (v152);
      }
      goto LABEL_388;
    }
LABEL_471:
    v161 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v161, "Parametric Softplus: alpha and beta parameters must have the same size");
LABEL_472:
    __cxa_throw(v161, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v122 == 71)
  {
    v123 = (uint64_t *)v7[2];
  }
  else
  {
    v121 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v121);
    v123 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  v126 = (uint64_t *)v123[2];
  if (!v126)
    v126 = &CoreML::Specification::_WeightParams_default_instance_;
  v127 = v126[6];
  if (*(char *)(v127 + 23) < 0)
  {
    if (!*(_QWORD *)(v127 + 8))
      goto LABEL_332;
  }
  else if (!*(_BYTE *)(v127 + 23))
  {
    goto LABEL_332;
  }
  if (*((_DWORD *)v7 + 7) == 71)
  {
    v154 = (uint64_t *)v7[2];
  }
  else
  {
    v121 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v121);
    v154 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  v155 = (uint64_t *)v154[3];
  if (!v155)
    v155 = &CoreML::Specification::_WeightParams_default_instance_;
  v156 = v155[6];
  if ((*(char *)(v156 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v156 + 23))
      goto LABEL_324;
LABEL_332:
    v161 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD5E28](v161, "Parametric Softplus: alpha and beta parameters are not provided");
    goto LABEL_472;
  }
  if (!*(_QWORD *)(v156 + 8))
    goto LABEL_332;
LABEL_324:
  if (*((_DWORD *)v7 + 7) == 71)
  {
    v157 = (uint64_t *)v7[2];
  }
  else
  {
    v121 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v121);
    v157 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  v158 = (uint64_t *)v157[2];
  if (!v158)
    v158 = &CoreML::Specification::_WeightParams_default_instance_;
  v159 = v158[6];
  if (*(char *)(v159 + 23) < 0)
    v160 = *(_QWORD *)(v159 + 8);
  else
    v160 = *(unsigned __int8 *)(v159 + 23);
  if (*((_DWORD *)v7 + 7) == 71)
  {
    v162 = (uint64_t *)v7[2];
  }
  else
  {
    v121 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v121);
    v162 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  v163 = (uint64_t *)v162[3];
  if (!v163)
    v163 = &CoreML::Specification::_WeightParams_default_instance_;
  v164 = v163[6];
  if (*(char *)(v164 + 23) < 0)
    v165 = *(_QWORD *)(v164 + 8);
  else
    v165 = *(unsigned __int8 *)(v164 + 23);
  if (v160 != v165)
    goto LABEL_471;
  if (*((_DWORD *)v7 + 7) == 71)
  {
    v166 = (uint64_t *)v7[2];
    v167 = 71;
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v121);
    v167 = *((_DWORD *)v7 + 7);
    v166 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  v168 = (uint64_t *)v166[2];
  if (v168)
    v169 = v168;
  else
    v169 = &CoreML::Specification::_WeightParams_default_instance_;
  v170 = CoreML::hasSufficientBytesInQuantizedWeightParam(v169, (int)v118);
  if (v170)
    v171 = v118;
  else
    v171 = 1;
  if (v167 == 71)
  {
    v172 = (uint64_t *)v7[2];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v170);
    v172 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  v173 = (const CoreML::Specification::WeightParams *)v172[2];
  if (v173)
    v174 = v173;
  else
    v174 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
  EspressoConverter::readFloatFromWeightParams((EspressoConverter *)v286, v174, v171);
  if (*((_DWORD *)v7 + 7) == 71)
  {
    v176 = (uint64_t *)v7[2];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v175);
    v176 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  v177 = (const CoreML::Specification::WeightParams *)v176[3];
  if (v177)
    v178 = v177;
  else
    v178 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
  EspressoConverter::readFloatFromWeightParams((EspressoConverter *)v281, v178, v171);
  v179 = *(_DWORD **)(v259.__r_.__value_.__r.__words[0] + 16);
  v180 = *(void **)v286;
  if (v171 == 1)
  {
    if (v120 <= 0)
    {
      v187 = *(char **)v281;
      goto LABEL_384;
    }
    v181 = **(_DWORD **)v286;
    v182 = v120;
    do
    {
      *v179++ = v181;
      --v182;
    }
    while (v182);
  }
  else
  {
    if (v120 != v171 || v120 <= 0)
    {
      v186 = *(_DWORD **)(v258.__r_.__value_.__r.__words[0] + 16);
      v187 = *(char **)v281;
      goto LABEL_378;
    }
    v183 = v120;
    v184 = *(int **)v286;
    do
    {
      v185 = *v184++;
      *v179++ = v185;
      --v183;
    }
    while (v183);
  }
  v186 = *(_DWORD **)(v258.__r_.__value_.__r.__words[0] + 16);
  v187 = *(char **)v281;
  if (v171 == 1)
  {
    v188 = **(_DWORD **)v281;
    v189 = v120;
    do
    {
      *v186++ = v188;
      --v189;
    }
    while (v189);
    goto LABEL_384;
  }
LABEL_378:
  if (v120 != v171 || v120 < 1)
  {
LABEL_384:
    if (!v187)
      goto LABEL_386;
    goto LABEL_385;
  }
  for (i = 0; i != v120; ++i)
    v186[i] = *(_DWORD *)&v187[i * 4];
LABEL_385:
  *(_QWORD *)&v281[8] = v187;
  operator delete(v187);
  v180 = *(void **)v286;
LABEL_386:
  if (v180)
    operator delete(v180);
LABEL_388:
  *(_OWORD *)v281 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v286, "softplus_alphas");
  (*(void (**)(uint64_t, _BYTE *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v92 + 168))(v92, v281, v286, *(_QWORD *)(v259.__r_.__value_.__r.__words[0] + 16), 4 * *(int *)(v259.__r_.__value_.__r.__words[0] + 8), 0);
  if ((v286[23] & 0x80000000) != 0)
    operator delete(*(void **)v286);
  v191 = *(std::__shared_weak_count **)&v281[8];
  if (*(_QWORD *)&v281[8])
  {
    v192 = (unint64_t *)(*(_QWORD *)&v281[8] + 8);
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = *(_QWORD *)v276;
  *(_OWORD *)v281 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v286, "softplus_betas");
  v195 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)(*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v194 + 168))(v194, v281, v286, *(_QWORD *)(v258.__r_.__value_.__r.__words[0] + 16), 4* *(int *)(v258.__r_.__value_.__r.__words[0] + 8), 0);
  if ((v286[23] & 0x80000000) != 0)
    operator delete(*(void **)v286);
  v196 = *(std::__shared_weak_count **)&v281[8];
  if (*(_QWORD *)&v281[8])
  {
    v197 = (unint64_t *)(*(_QWORD *)&v281[8] + 8);
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  if (*((_DWORD *)v7 + 7) == 71)
  {
    v199 = (uint64_t *)v7[2];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v195);
    v199 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  v200 = (uint64_t *)v199[2];
  if (v200)
    v201 = v200;
  else
    v201 = &CoreML::Specification::_WeightParams_default_instance_;
  v202 = v201[5];
  v203 = *(unsigned __int8 *)(v202 + 23);
  if (*(char *)(v202 + 23) < 0)
    v204 = *(_QWORD *)(v202 + 8);
  else
    v204 = *(unsigned __int8 *)(v202 + 23);
  v24 = v254;
  v205 = v201[6];
  if (*(char *)(v205 + 23) < 0)
    v206 = *(_QWORD *)(v205 + 8);
  else
    v206 = *(unsigned __int8 *)(v205 + 23);
  v207 = *((_DWORD *)v201 + 4);
  v208 = v201[7];
  if (*(char *)(v208 + 23) < 0)
    v209 = *(_QWORD *)(v208 + 8);
  else
    v209 = *(unsigned __int8 *)(v208 + 23);
  if (v207 <= 0)
    v210 = 1;
  else
    v210 = 2;
  if (v204)
    v211 = v210;
  else
    v211 = v207 > 0;
  if (v206)
    ++v211;
  if (v209)
    ++v211;
  if (v207 <= 0 && v211 == 1)
  {
    if ((v203 & 0x80) != 0)
      v203 = *(_QWORD *)(v202 + 8);
    if (v203)
      v24 = 1;
    else
      v24 = v254;
  }
  v213 = (std::__shared_weak_count *)v258.__r_.__value_.__l.__size_;
  if (v258.__r_.__value_.__l.__size_)
  {
    v214 = (unint64_t *)(v258.__r_.__value_.__l.__size_ + 8);
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = (std::__shared_weak_count *)v259.__r_.__value_.__l.__size_;
  if (v259.__r_.__value_.__l.__size_)
  {
    v217 = (unint64_t *)(v259.__r_.__value_.__l.__size_ + 8);
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  v219 = *(std::__shared_weak_count **)&v276[8];
  if (*(_QWORD *)&v276[8])
  {
    v220 = (unint64_t *)(*(_QWORD *)&v276[8] + 8);
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
LABEL_452:
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v272);
  }
  else
  {
    v222 = (uint64_t **)*((_QWORD *)this + 1);
    v223 = std::map<std::string,std::string>::at((uint64_t)v222, v269);
    *(_OWORD *)v286 = *(_OWORD *)v223;
    *(_OWORD *)&v286[16] = *(_OWORD *)(v223 + 16);
    v287 = *(_QWORD *)(v223 + 32);
    v288 = 0;
    v289 = 0;
    v290 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v288, *(const void **)(v223 + 40), *(_QWORD *)(v223 + 48), (uint64_t)(*(_QWORD *)(v223 + 48) - *(_QWORD *)(v223 + 40)) >> 2);
    *(_OWORD *)v281 = *(_OWORD *)v286;
    *(_OWORD *)&v281[16] = *(_OWORD *)&v286[16];
    v224 = v288;
    v282 = v287;
    v283 = 0;
    v284 = 0;
    v285 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v283, v288, v289, (v289 - (uint64_t)v288) >> 2);
    *(_OWORD *)v276 = *(_OWORD *)v281;
    *(_OWORD *)&v276[16] = *(_OWORD *)&v281[16];
    v225 = v283;
    v277 = v282;
    __p = 0;
    v279 = 0;
    v280 = 0;
    v226 = v284;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v283, v284, (v284 - (uint64_t)v283) >> 2);
    EspressoConverter::validateShape((int *)v276, *((_QWORD *)a2 + 14), (uint64_t)v272);
    if (__p)
    {
      v279 = __p;
      operator delete(__p);
    }
    v259.__r_.__value_.__r.__words[0] = (std::string::size_type)v272;
    v227 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v222, v272, (__int128 **)&v259);
    *(_OWORD *)(v227 + 56) = *(_OWORD *)v281;
    *(_OWORD *)(v227 + 72) = *(_OWORD *)&v281[16];
    *((_QWORD *)v227 + 11) = v282;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v227 + 96, v225, v226, (v226 - (uint64_t)v225) >> 2);
    if (v225)
      operator delete(v225);
    if (v224)
      operator delete(v224);
  }
  v228 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
  if (*((_QWORD *)&v263 + 1))
  {
    v229 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  *(_QWORD *)v286 = &v269;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v286);
  *(_QWORD *)v286 = &v272;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v286);
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
  return v24;
}

void sub_19C94D298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *a69;
  char a72;
  int v72;
  void *v73;
  uint64_t v74;

  if (*(char *)(v74 - 137) < 0)
    operator delete(*(void **)(v74 - 160));
  if (*(char *)(v74 - 201) < 0)
    operator delete(*(void **)(v74 - 224));
  if (a15 < 0)
    operator delete(__p);
  if (a72 < 0)
    operator delete(a69);
  if (a40 < 0)
    operator delete(a35);
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v72 & 1) == 0)
    {
LABEL_20:
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
      *(_QWORD *)(v74 - 224) = &a56;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v74 - 224));
      *(_QWORD *)(v74 - 224) = &a59;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v74 - 224));
      if (a67 < 0)
        operator delete(a62);
      _Unwind_Resume(a1);
    }
  }
  else if (!v72)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v73);
  goto LABEL_20;
}

uint64_t inferNumChannels(const void **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7;
  int v8;
  std::runtime_error *exception;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::runtime_error *v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::runtime_error *v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string v37;
  std::string v38;
  std::string v39;

  if ((_DWORD)a3 == -1)
  {
    a3 = a4;
    if ((_DWORD)a4 == 1)
    {
      if (a5 < 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v37.__r_.__value_.__l.__data_, a1, " layer '");
        v12 = *(char *)(a2 + 23);
        if (v12 >= 0)
          v13 = (const std::string::value_type *)a2;
        else
          v13 = *(const std::string::value_type **)a2;
        if (v12 >= 0)
          v14 = *(unsigned __int8 *)(a2 + 23);
        else
          v14 = *(_QWORD *)(a2 + 8);
        v15 = std::string::append(&v37, v13, v14);
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        v17 = std::string::append(&v38, "' is unable to infer the size of the channels dimension (axis=-3) because inputtensor field is not set in this model. inputtensor describing the rank and shape of the layer input should be specified in the protobuf definition of the model.");
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v39);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v7 = *(_QWORD *)(a6 + 8);
      v8 = *(_DWORD *)(v7 + 16);
      if (v8 <= 2)
      {
        v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v37.__r_.__value_.__l.__data_, a1, " layer '");
        v21 = *(char *)(a2 + 23);
        if (v21 >= 0)
          v22 = (const std::string::value_type *)a2;
        else
          v22 = *(const std::string::value_type **)a2;
        if (v21 >= 0)
          v23 = *(unsigned __int8 *)(a2 + 23);
        else
          v23 = *(_QWORD *)(a2 + 8);
        v24 = std::string::append(&v37, v22, v23);
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        v26 = std::string::append(&v38, "' is unable to infer the size of channels dimension (axis=-3) in the input, which is required when the weight size is 1 or when weights are quantized to lower than equal to 8 bits.");
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v20, &v39);
        __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      a3 = *(unsigned int *)(*(_QWORD *)(v7 + 24) + 8 * (v8 - 3) + 8);
      if ((_DWORD)a3 == -1)
      {
        v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v37.__r_.__value_.__l.__data_, a1, " layer '");
        v30 = *(char *)(a2 + 23);
        if (v30 >= 0)
          v31 = (const std::string::value_type *)a2;
        else
          v31 = *(const std::string::value_type **)a2;
        if (v30 >= 0)
          v32 = *(unsigned __int8 *)(a2 + 23);
        else
          v32 = *(_QWORD *)(a2 + 8);
        v33 = std::string::append(&v37, v31, v32);
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        v35 = std::string::append(&v38, "' is unable to infer the size of channels dimension (axis=-3) in the input, which is required when the weight size is 1 or when weights are quantized to lower than equal to 8 bits.");
        v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v29, &v39);
        __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
  }
  return a3;
}

void sub_19C94D8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  char v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if ((v29 & 1) != 0)
    __cxa_free_exception(v28);
  _Unwind_Resume(exception_object);
}

void LayerTranslator::addWhere(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void **v16[3];
  char v17;
  int v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string v26;
  std::string *v27;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((_QWORD *)this + 1));
  v16[2] = (void **)897988541;
  v18 = 0;
  v19 = 0;
  v16[0] = (void **)101;
  v16[1] = (void **)1065353216;
  v17 = 1;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v14, v6, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v16, (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, (__int128 **)&v10);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v16[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_19C94DB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addFlattenTo2D(LayerTranslator *this, const CoreML::Specification::FlattenLayerParams **a2)
{
  const CoreML::Specification::FlattenLayerParams *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::FlattenLayerParams *v7;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v8;
  uint64_t *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _DWORD v20[2];
  void ***v21;
  uint64_t v22;
  void **v23;
  __int128 *v24;
  uint64_t v25;
  __int128 *v26;
  __int128 *v27;
  uint64_t v28;
  std::string v29;
  std::string *v30;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v29.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v5;
  }
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v26, (uint64_t *)&v23, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 301)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::FlattenLayerParams *)&CoreML::Specification::_FlattenLayerParams_default_instance_;
  }
  v8 = CoreML::Specification::FlattenLayerParams::FlattenLayerParams((CoreML::Specification::FlattenLayerParams *)&v21, v7);
  v20[0] = 2;
  if (*((_DWORD *)a2 + 35) == 1130)
  {
    v9 = (uint64_t *)a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v8);
    v9 = &CoreML::Specification::_FlattenTo2DLayerParams_default_instance_;
  }
  v20[1] = v9[2];
  v10 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "flatten");
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (__int128 *)v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, v26, v27, 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 3));
  Espresso::sequential_builder::add<Espresso::flatten_params>(&v18, v10, (uint64_t)__p, (uint64_t)&v29, (uint64_t)v20, (__int128 *)v15.__r_.__value_.__l.__data_, (__int128 *)v15.__r_.__value_.__l.__size_, (__int128 **)&v14);
  v30 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  v30 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (v17 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v26);
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v21 = (void ***)&off_1E3D514B0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v22);
  v21 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  v23 = (void **)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v23);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_19C94DDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void (**a25)(CoreML::Specification::FlattenLayerParams *__hidden this),uint64_t a26)
{
  uint64_t v26;

  a25 = &off_1E3D514B0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a26);
  a25 = (void (**)(CoreML::Specification::FlattenLayerParams *__hidden))(v26 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  *(_QWORD *)(v26 - 112) = v26 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 112));
  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addArgMaxMin(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t i;
  _QWORD *v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type size;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  int v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  std::string *v56;
  __int128 v57;
  int v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t j;
  std::string v70;
  std::string v71;
  std::string v72;
  __int128 *v73;
  __int128 *v74;
  char *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  std::string v78;
  std::string v79;
  std::string *v80;
  std::string *v81;
  __int128 *v82;
  std::string v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string *v89;
  std::string *v90;
  __int128 *v91;
  std::string v92;
  void *__p[2];
  char v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  char v101;
  __int128 *v102;
  __int128 *v103;
  uint64_t v104;
  __int128 *v105;
  __int128 *v106;
  uint64_t v107;
  std::string v108;
  __int128 **v109;
  char v110;
  _BYTE v111[52];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _BYTE v116[21];
  int v117;
  std::string v118;
  __int128 v119;

  *(_QWORD *)&v119 = *MEMORY[0x1E0C80C00];
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v108, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v108.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v5;
  }
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v105, (uint64_t *)&v102, *((_QWORD *)this + 1));
  v98 = 256;
  v100 = 256;
  v101 = 1;
  v97 = 1;
  v6 = *((_DWORD *)a2 + 35);
  if (v6 == 1020)
  {
    v10 = *((_QWORD *)a2 + 16);
    v8 = *(_DWORD *)(v10 + 16);
    LOBYTE(v100) = 1;
    v9 = *(unsigned __int8 *)(v10 + 24);
  }
  else
  {
    if (v6 != 1025)
    {
      v99 = 0;
      goto LABEL_78;
    }
    v7 = *((_QWORD *)a2 + 16);
    v8 = *(_DWORD *)(v7 + 16);
    v9 = *(unsigned __int8 *)(v7 + 24);
  }
  v99 = v8;
  if (v9)
  {
    v11 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(__p, "topk");
    memset(&v83, 0, sizeof(v83));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v83, v102, v103, 0xAAAAAAAAAAAAAAABLL * (((char *)v103 - (char *)v102) >> 3));
    std::to_string(&v86, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
    v12 = std::string::append(&v86, "_");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = *((char *)v105 + 23);
    if (v14 >= 0)
      v15 = (const std::string::value_type *)v105;
    else
      v15 = *(const std::string::value_type **)v105;
    if (v14 >= 0)
      v16 = *((unsigned __int8 *)v105 + 23);
    else
      v16 = *((_QWORD *)v105 + 1);
    v17 = std::string::append(&v87, v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v88, "_value");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(_QWORD *)&v111[16] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)v111 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v78, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
    v21 = std::string::append(&v78, "_");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v118.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = *((char *)v105 + 23);
    if (v23 >= 0)
      v24 = (const std::string::value_type *)v105;
    else
      v24 = *(const std::string::value_type **)v105;
    if (v23 >= 0)
      v25 = *((unsigned __int8 *)v105 + 23);
    else
      v25 = *((_QWORD *)v105 + 1);
    v26 = std::string::append(&v118, v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = std::string::append(&v79, "_index_rank_preserved");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    *(_QWORD *)&v111[40] = *((_QWORD *)&v28->__r_.__value_.__l + 2);
    *(_OWORD *)&v111[24] = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
    v72.__r_.__value_.__s.__data_[8] = 0;
    v80 = (std::string *)operator new(0x30uLL);
    v81 = v80;
    v82 = (__int128 *)&v80[2];
    v81 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v82, (__int128 *)v111, (__int128 *)&v111[48], v80);
    Espresso::sequential_builder::add<Espresso::topk_params_t>(&v84, v11, (uint64_t)__p, (uint64_t)&v108, (uint64_t)&v97, (__int128 *)v83.__r_.__value_.__l.__data_, (__int128 *)v83.__r_.__value_.__l.__size_, (__int128 **)&v80);
    v30 = v85;
    if (v85)
    {
      p_shared_owners = (unint64_t *)&v85->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    for (i = 0; i != -48; i -= 24)
    {
      if ((char)v111[i + 47] < 0)
        operator delete(*(void **)&v111[i + 24]);
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v118.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__r_.__value_.__l.__data_);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    *(_QWORD *)v111 = &v83;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v111);
    if (v94 < 0)
      operator delete(__p[0]);
    memset(v116, 0, sizeof(v116));
    v115 = 0u;
    v114 = 0u;
    v113 = 0u;
    v112 = 0u;
    memset(&v111[4], 0, 48);
    v117 = 1;
    *(_DWORD *)v111 = v8;
    v34 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(__p, "squeeze");
    std::to_string(&v79, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
    v35 = std::string::append(&v79, "_");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v108;
    else
      v37 = (std::string *)v108.__r_.__value_.__r.__words[0];
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    else
      size = v108.__r_.__value_.__l.__size_;
    v39 = std::string::append(&v86, (const std::string::value_type *)v37, size);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    v41 = std::string::append(&v87, "_squeeze_after_arg");
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v71, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
    v43 = std::string::append(&v71, "_");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v45 = *((char *)v105 + 23);
    if (v45 >= 0)
      v46 = (const std::string::value_type *)v105;
    else
      v46 = *(const std::string::value_type **)v105;
    if (v45 >= 0)
      v47 = *((unsigned __int8 *)v105 + 23);
    else
      v47 = *((_QWORD *)v105 + 1);
    v48 = std::string::append(&v72, v46, v47);
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v50 = std::string::append(&v78, "_index_rank_preserved");
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v118.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v109 = &v73;
    v110 = 0;
    v73 = (__int128 *)operator new(0x18uLL);
    v74 = v73;
    v75 = (char *)v73 + 24;
    v74 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v75, (__int128 *)&v118, &v119, (std::string *)v73);
    memset(&v70, 0, sizeof(v70));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v70, v105, v106, 0xAAAAAAAAAAAAAAABLL * (((char *)v106 - (char *)v105) >> 3));
    Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v76, v34, (uint64_t)__p, (uint64_t)&v88, (uint64_t)v111, v73, v74, (__int128 **)&v70);
    v52 = v77;
    if (v77)
    {
      v53 = (unint64_t *)&v77->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v109 = (__int128 **)&v70;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
    v109 = &v73;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v118.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__r_.__value_.__l.__data_);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    goto LABEL_103;
  }
LABEL_78:
  v55 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "topk");
  memset(&v92, 0, sizeof(v92));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v92, v102, v103, 0xAAAAAAAAAAAAAAABLL * (((char *)v103 - (char *)v102) >> 3));
  std::to_string(&v86, *(_DWORD *)(*((_QWORD *)this + 2) + 4));
  v56 = std::string::append(&v86, "_");
  v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v87.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  v58 = *((char *)v105 + 23);
  if (v58 >= 0)
    v59 = (const std::string::value_type *)v105;
  else
    v59 = *(const std::string::value_type **)v105;
  if (v58 >= 0)
    v60 = *((unsigned __int8 *)v105 + 23);
  else
    v60 = *((_QWORD *)v105 + 1);
  v61 = std::string::append(&v87, v59, v60);
  v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  v63 = std::string::append(&v88, "_value");
  v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  *(_QWORD *)&v111[16] = *((_QWORD *)&v63->__r_.__value_.__l + 2);
  *(_OWORD *)v111 = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)v105 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v111[24], *(const std::string::value_type **)v105, *((_QWORD *)v105 + 1));
  }
  else
  {
    v65 = *v105;
    *(_QWORD *)&v111[40] = *((_QWORD *)v105 + 2);
    *(_OWORD *)&v111[24] = v65;
  }
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
  v79.__r_.__value_.__s.__data_[8] = 0;
  v89 = (std::string *)operator new(0x30uLL);
  v90 = v89;
  v91 = (__int128 *)&v89[2];
  v90 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v91, (__int128 *)v111, (__int128 *)&v111[48], v89);
  Espresso::sequential_builder::add<Espresso::topk_params_t>(&v95, v55, (uint64_t)__p, (uint64_t)&v108, (uint64_t)&v97, (__int128 *)v92.__r_.__value_.__l.__data_, (__int128 *)v92.__r_.__value_.__l.__size_, (__int128 **)&v89);
  v66 = v96;
  if (v96)
  {
    v67 = (unint64_t *)&v96->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  for (j = 0; j != -48; j -= 24)
  {
    if ((char)v111[j + 47] < 0)
      operator delete(*(void **)&v111[j + 24]);
  }
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  *(_QWORD *)v111 = &v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v111);
LABEL_103:
  if (v94 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v105);
  *(_QWORD *)v111 = &v102;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v111);
  *(_QWORD *)v111 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v111);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
}

void sub_19C94E800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  char a74;
  char a75;
  void *a76;
  char a77;
  uint64_t v77;
  uint64_t v78;

  *(_QWORD *)(v78 - 256) = v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 256));
  *(_QWORD *)(v78 - 256) = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 256));
  if (*(char *)(v78 - 73) < 0)
    operator delete(*(void **)(v78 - 96));
  if (a34 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a17 < 0)
    operator delete(a12);
  if (a70 < 0)
    operator delete(a65);
  if (a63 < 0)
    operator delete(a58);
  if (a56 < 0)
    operator delete(a51);
  if (a41 < 0)
    operator delete(a36);
  if (a73 < 0)
    operator delete(a72);
  *(_QWORD *)(v78 - 240) = &a74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 240));
  *(_QWORD *)(v78 - 240) = &a75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 240));
  if (a77 < 0)
    operator delete(a76);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::topk_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C94EDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addConvolution3D(LayerTranslator *this, uint64_t **a2)
{
  uint64_t *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  CoreML::Specification::WeightParams *v10;
  CoreML::Specification::WeightParams *v11;
  __int128 v12;
  int32x4_t v14;
  int v18;
  uint64_t v19;
  __int128 v20;
  const void *v21;
  int v22;
  int v23;
  int32x4_t v24;
  __int16 v25;
  __int16 v26;
  int8x8_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  std::string::size_type v33;
  std::string::size_type v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  std::string::size_type size;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  int WeightParamSize;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  std::string::size_type v59;
  uint64_t *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v83;
  uint64_t v84;
  void **v85;
  std::string::size_type v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  _BOOL8 v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::runtime_error *exception;
  std::string *v123;
  __int128 v124;
  std::runtime_error *v125;
  std::string *v126;
  __int128 v127;
  std::runtime_error *v128;
  std::string *v129;
  __int128 v130;
  std::runtime_error *v131;
  std::string *v132;
  __int128 v133;
  std::runtime_error *v134;
  std::string *v135;
  __int128 v136;
  std::runtime_error *v137;
  std::string *v138;
  __int128 v139;
  void *v140;
  std::runtime_error *v141;
  std::string *v142;
  __int128 v143;
  std::runtime_error *v144;
  std::string *v145;
  __int128 v146;
  std::runtime_error *v147;
  std::string *v148;
  __int128 v149;
  void **v150;
  std::__shared_weak_count *v151;
  void **p_data;
  std::__shared_weak_count *v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  std::string v156;
  std::string v157;
  std::string v158;
  std::string v159;
  std::string::size_type v160;
  std::__shared_weak_count *v161;
  std::string v162;
  std::string __p;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  void *v167[4];
  std::string v168;
  unint64_t v169;
  uint64_t v170;
  int v171;
  __int16 v172;
  __int128 v173;
  __int16 v174;
  __int128 v175;
  int v176;
  unint64_t v177;
  uint64_t v178;
  std::string v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t *v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  int32x4_t v187;
  int v188;
  char *v189;
  char *v190;
  uint64_t v191;
  __int128 *v192;
  __int128 *v193;
  uint64_t v194;
  std::string v195;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v195, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v195.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v5;
  }
  v192 = 0;
  v193 = 0;
  v194 = 0;
  v189 = 0;
  v190 = 0;
  v191 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v192, (uint64_t *)&v189, *((_QWORD *)this + 1));
  if (v190 - v189 == 48)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v123 = std::string::append(&v168, "', convolution3D does not support weight as input tensor.");
    v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
    v179.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v124;
    v123->__r_.__value_.__l.__size_ = 0;
    v123->__r_.__value_.__r.__words[2] = 0;
    v123->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v179);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*((_DWORD *)a2 + 35) == 1471)
  {
    v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = &CoreML::Specification::_Convolution3DLayerParams_default_instance_;
  }
  v180 = 0;
  v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E3D54988;
  *(_OWORD *)&v179.__r_.__value_.__r.__words[1] = 0uLL;
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v179.__r_.__value_.__r.__words[2], v8);
    memcpy(v180 + 1, (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v179.__r_.__value_.__r.__words[2]) = *((_DWORD *)v7 + 4);
  }
  v188 = 0;
  v9 = v7[1];
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&v179.__r_.__value_.__l.__size_, v9 & 0xFFFFFFFFFFFFFFFELL);
  if (v7 == &CoreML::Specification::_Convolution3DLayerParams_default_instance_)
  {
    v11 = 0;
    v181 = 0;
  }
  else
  {
    if (v7[5])
    {
      v10 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v10, (const CoreML::Specification::WeightParams *)v7[5]);
    }
    else
    {
      v10 = 0;
    }
    v181 = (uint64_t *)v10;
    if (v7[6])
    {
      v11 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v11, (const CoreML::Specification::WeightParams *)v7[6]);
    }
    else
    {
      v11 = 0;
    }
  }
  v182 = (uint64_t *)v11;
  v183 = *(_OWORD *)(v7 + 7);
  v12 = *(_OWORD *)(v7 + 11);
  _Q1 = *(_OWORD *)(v7 + 13);
  v14 = *(int32x4_t *)(v7 + 15);
  v184 = *(_OWORD *)(v7 + 9);
  v187 = v14;
  v186 = _Q1;
  v185 = v12;
  v168.__r_.__value_.__r.__words[0] = 1;
  *(_QWORD *)&v12 = 0x100000001;
  *((_QWORD *)&v12 + 1) = 0x100000001;
  *(_OWORD *)&v168.__r_.__value_.__r.__words[1] = v12;
  __asm { FMOV            V1.2S, #1.0 }
  v169 = 0xFFFFFFFF00000001;
  v170 = _Q1;
  v171 = 0;
  v172 = 1;
  v173 = 0uLL;
  v174 = 0;
  WORD1(v12) = 1;
  WORD3(v12) = 1;
  *(_QWORD *)&v175 = v12;
  *((_QWORD *)&v175 + 1) = 65537;
  v178 = 0;
  v177 = 0;
  v18 = DWORD2(v183);
  if (DWORD2(v183) <= 1)
    v18 = 1;
  v176 = v18;
  v19 = std::map<std::string,std::string>::at(*((_QWORD *)this + 1), v189);
  v20 = *(_OWORD *)(v19 + 16);
  v164 = *(_OWORD *)v19;
  v165 = v20;
  v21 = *(const void **)(v19 + 40);
  v166 = *(_QWORD *)(v19 + 32);
  memset(v167, 0, 24);
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v167, v21, *(_QWORD *)(v19 + 48), (uint64_t)(*(_QWORD *)(v19 + 48) - (_QWORD)v21) >> 2);
  if (DWORD2(v164) != -1 && SDWORD2(v164) % v176)
  {
    v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v135 = std::string::append(&v162, "', input channels must be divisible by the number of groups.");
    v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v136;
    v135->__r_.__value_.__l.__size_ = 0;
    v135->__r_.__value_.__r.__words[2] = 0;
    v135->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v134, &__p);
    __cxa_throw(v134, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v22 = v183;
  if (!(_DWORD)v183)
  {
    v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v126 = std::string::append(&v162, "', output channels cannot be 0");
    v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v127;
    v126->__r_.__value_.__l.__size_ = 0;
    v126->__r_.__value_.__r.__words[2] = 0;
    v126->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v125, &__p);
    __cxa_throw(v125, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v23 = DWORD1(v183);
  if (!DWORD1(v183))
  {
    v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v129 = std::string::append(&v162, "', input channels cannot be 0");
    v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v130;
    v129->__r_.__value_.__l.__size_ = 0;
    v129->__r_.__value_.__r.__words[2] = 0;
    v129->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v128, &__p);
    __cxa_throw(v128, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (BYTE1(v186) && LODWORD(v179.__r_.__value_.__r.__words[2]) && LODWORD(v179.__r_.__value_.__r.__words[2]) != 3)
  {
    v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v142 = std::string::append(&v162, "' , if set, output shape must be of length 3");
    v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v143;
    v142->__r_.__value_.__l.__size_ = 0;
    v142->__r_.__value_.__r.__words[2] = 0;
    v142->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v141, &__p);
    __cxa_throw(v141, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v168.__r_.__value_.__l.__size_ = v183;
  LODWORD(v168.__r_.__value_.__l.__data_) = v186;
  LODWORD(v169) = HIDWORD(v183);
  LOWORD(v175) = v185;
  v168.__r_.__value_.__r.__words[2] = (std::string::size_type)vrev64_s32(*(int32x2_t *)&v184);
  WORD5(v175) = WORD2(v185);
  *(int32x2_t *)v24.i8 = vrev64_s32(*(int32x2_t *)((char *)&v184 + 8));
  v24.u64[1] = (unint64_t)vrev64_s32(*(int32x2_t *)((char *)&v185 + 8));
  *(int16x4_t *)((char *)&v175 + 2) = vmovn_s32(v24);
  if (DWORD1(v186))
  {
    if (DWORD1(v186) == 1)
    {
      v25 = 0;
      v26 = 0;
      v172 = 0;
    }
    else
    {
      if (DWORD1(v186) != 2)
      {
        v140 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](v140, "Convolution3D padding type not set");
        __cxa_throw(v140, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v25 = 0;
      v26 = 0;
      v172 = 1;
    }
    v27 = 0;
  }
  else
  {
    v172 = 0;
    v25 = WORD4(v186);
    v26 = WORD6(v186);
    v27 = (int8x8_t)vmovn_s32(v187);
  }
  HIWORD(v173) = v25;
  v174 = v26;
  *(int8x8_t *)((char *)&v173 + 6) = vext_s8(v27, v27, 4uLL);
  v28 = v176;
  v160 = 0;
  v161 = 0;
  if (BYTE1(v186))
  {
    if (LODWORD(v179.__r_.__value_.__r.__words[2]))
    {
      v30 = v180[1];
      v29 = v180[2];
      v31 = v180[3];
    }
    else
    {
      LODWORD(v30) = 0;
      LODWORD(v29) = 0;
      LODWORD(v31) = 0;
    }
    LODWORD(v178) = v30;
    v177 = __PAIR64__(v29, v31);
    v40 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100]<0>(&__p, "deconv3d");
    memset(&v159, 0, sizeof(v159));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v159, (__int128 *)v189, (__int128 *)v190, 0xAAAAAAAAAAAAAAABLL * ((v190 - v189) >> 3));
    memset(&v158, 0, sizeof(v158));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v158, v192, v193, 0xAAAAAAAAAAAAAAABLL * (((char *)v193 - (char *)v192) >> 3));
    Espresso::sequential_builder::add<Espresso::conv3d_params_t>((uint64_t *)&v162, v40, (uint64_t)&__p, (uint64_t)&v195, (uint64_t)&v168, (__int128 *)v159.__r_.__value_.__l.__data_, (__int128 *)v159.__r_.__value_.__l.__size_, (__int128 **)&v158);
    v154 = &v158;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v154);
    v154 = &v159;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v154);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    size = v162.__r_.__value_.__l.__size_;
    v33 = v162.__r_.__value_.__r.__words[0];
    v22 /= v28;
    if (v162.__r_.__value_.__l.__size_)
    {
      v42 = (unint64_t *)(v162.__r_.__value_.__l.__size_ + 8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
      v37 = (std::__shared_weak_count *)v162.__r_.__value_.__l.__size_;
      v160 = v33;
      v161 = (std::__shared_weak_count *)size;
      if (!v162.__r_.__value_.__l.__size_)
        goto LABEL_60;
      v44 = (unint64_t *)(v162.__r_.__value_.__l.__size_ + 8);
      do
        v39 = __ldaxr(v44);
      while (__stlxr(v39 - 1, v44));
      goto LABEL_57;
    }
LABEL_59:
    v160 = v33;
    v161 = 0;
    goto LABEL_60;
  }
  v32 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "conv3d");
  memset(&v157, 0, sizeof(v157));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v157, (__int128 *)v189, (__int128 *)v190, 0xAAAAAAAAAAAAAAABLL * ((v190 - v189) >> 3));
  memset(&v156, 0, sizeof(v156));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v156, v192, v193, 0xAAAAAAAAAAAAAAABLL * (((char *)v193 - (char *)v192) >> 3));
  Espresso::sequential_builder::add<Espresso::conv3d_params_t>((uint64_t *)&v162, v32, (uint64_t)&__p, (uint64_t)&v195, (uint64_t)&v168, (__int128 *)v157.__r_.__value_.__l.__data_, (__int128 *)v157.__r_.__value_.__l.__size_, (__int128 **)&v156);
  v154 = &v156;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v154);
  v154 = &v157;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v154);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v34 = v162.__r_.__value_.__l.__size_;
  v33 = v162.__r_.__value_.__r.__words[0];
  v23 /= v28;
  if (!v162.__r_.__value_.__l.__size_)
    goto LABEL_59;
  v35 = (unint64_t *)(v162.__r_.__value_.__l.__size_ + 8);
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  v37 = (std::__shared_weak_count *)v162.__r_.__value_.__l.__size_;
  v160 = v33;
  v161 = (std::__shared_weak_count *)v34;
  if (!v162.__r_.__value_.__l.__size_)
    goto LABEL_60;
  v38 = (unint64_t *)(v162.__r_.__value_.__l.__size_ + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
LABEL_57:
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
LABEL_60:
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v192);
  if (v181)
    v45 = v181;
  else
    v45 = &CoreML::Specification::_WeightParams_default_instance_;
  WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v45);
  v47 = v45[5];
  if (*(char *)(v47 + 23) < 0)
    v48 = *(_QWORD *)(v47 + 8);
  else
    v48 = *(unsigned __int8 *)(v47 + 23);
  v49 = v45[6];
  v50 = *(unsigned __int8 *)(v49 + 23);
  if (*(char *)(v49 + 23) < 0)
    v51 = *(_QWORD *)(v49 + 8);
  else
    v51 = *(unsigned __int8 *)(v49 + 23);
  v52 = *((_DWORD *)v45 + 4);
  v53 = v45[7];
  if (*(char *)(v53 + 23) < 0)
    v54 = *(_QWORD *)(v53 + 8);
  else
    v54 = *(unsigned __int8 *)(v53 + 23);
  if (v52 <= 0)
    v55 = 1;
  else
    v55 = 2;
  if (v48)
    v56 = v55;
  else
    v56 = v52 > 0;
  if (v51)
    ++v56;
  if (v54)
    ++v56;
  if (v52 <= 0 && v56 == 1)
  {
    if ((*(_BYTE *)(v47 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v47 + 8))
        goto LABEL_99;
    }
    else if (*(_BYTE *)(v47 + 23))
    {
      goto LABEL_99;
    }
    if ((v50 & 0x80) != 0)
      v50 = *(_QWORD *)(v49 + 8);
    if (v45 != &CoreML::Specification::_WeightParams_default_instance_ && v50 && v45[8] != 0)
    {
      v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v145 = std::string::append(&v162, "' quantized weights are not currently supported");
      v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v146;
      v145->__r_.__value_.__l.__size_ = 0;
      v145->__r_.__value_.__r.__words[2] = 0;
      v145->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v144, &__p);
      __cxa_throw(v144, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
LABEL_99:
  v59 = v160;
  (*(void (**)(std::string **__return_ptr, std::string::size_type))(*(_QWORD *)v160 + 456))(&v154, v160);
  if (WeightParamSize != v22
                        * v23
                        * (_DWORD)v169
                        * HIDWORD(v168.__r_.__value_.__r.__words[2])
                        * LODWORD(v168.__r_.__value_.__r.__words[2]))
  {
    v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v132 = std::string::append(&v162, "' , size of weight parameter not equal to the product of kernel sizes, number of kernels, and kernel channels");
    v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v133;
    v132->__r_.__value_.__l.__size_ = 0;
    v132->__r_.__value_.__r.__words[2] = 0;
    v132->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v131, &__p);
    __cxa_throw(v131, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v181)
    v60 = v181;
  else
    v60 = &CoreML::Specification::_WeightParams_default_instance_;
  EspressoConverter::copyWeightsToDataBlob((EspressoConverter *)v154[1].__r_.__value_.__l.__size_, v60, 4 * WeightParamSize);
  p_data = (void **)&v154->__r_.__value_.__l.__data_;
  v153 = v155;
  if (v155)
  {
    p_shared_owners = (unint64_t *)&v155->__shared_owners_;
    do
      v62 = __ldxr(p_shared_owners);
    while (__stxr(v62 + 1, p_shared_owners));
  }
  (*(void (**)(std::string::size_type, void ***))(*(_QWORD *)v59 + 400))(v59, &p_data);
  v63 = v153;
  if (v153)
  {
    v64 = (unint64_t *)&v153->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v155;
  if (v155)
  {
    v67 = (unint64_t *)&v155->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (LODWORD(v168.__r_.__value_.__l.__data_))
  {
    v69 = v168.__r_.__value_.__r.__words[1];
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v154, v168.__r_.__value_.__r.__words[1], 1, 1, 1);
    if (v182)
      v70 = v182;
    else
      v70 = &CoreML::Specification::_WeightParams_default_instance_;
    v71 = v70[5];
    if (*(char *)(v71 + 23) < 0)
      v72 = *(_QWORD *)(v71 + 8);
    else
      v72 = *(unsigned __int8 *)(v71 + 23);
    v73 = v70[6];
    v74 = *(unsigned __int8 *)(v73 + 23);
    if (*(char *)(v73 + 23) < 0)
      v75 = *(_QWORD *)(v73 + 8);
    else
      v75 = *(unsigned __int8 *)(v73 + 23);
    v76 = *((_DWORD *)v70 + 4);
    v77 = v70[7];
    if (*(char *)(v77 + 23) < 0)
      v78 = *(_QWORD *)(v77 + 8);
    else
      v78 = *(unsigned __int8 *)(v77 + 23);
    if (v76 <= 0)
      v79 = 1;
    else
      v79 = 2;
    if (v72)
      v80 = v79;
    else
      v80 = v76 > 0;
    if (v75)
      ++v80;
    if (v78)
      ++v80;
    if (v76 > 0 || v80 != 1)
      goto LABEL_156;
    if ((*(_BYTE *)(v71 + 23) & 0x80) != 0)
    {
      if (!*(_QWORD *)(v71 + 8))
      {
LABEL_148:
        if ((v74 & 0x80) != 0)
          v74 = *(_QWORD *)(v73 + 8);
        if (v70 != &CoreML::Specification::_WeightParams_default_instance_ && v74 && v70[8] != 0)
        {
          v147 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v148 = std::string::append(&v162, "' quantized bias is not currently supported");
          v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v149;
          v148->__r_.__value_.__l.__size_ = 0;
          v148->__r_.__value_.__r.__words[2] = 0;
          v148->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v147, &__p);
          __cxa_throw(v147, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
    }
    else if (!*(_BYTE *)(v71 + 23))
    {
      goto LABEL_148;
    }
LABEL_156:
    v83 = EspressoConverter::getWeightParamSize((uint64_t)v70);
    if (v83 != LODWORD(v168.__r_.__value_.__r.__words[1]))
    {
      v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v138 = std::string::append(&v162, "' , size of bias parameter not equal to the number of output channels");
      v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v139;
      v138->__r_.__value_.__l.__size_ = 0;
      v138->__r_.__value_.__r.__words[2] = 0;
      v138->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v137, &__p);
      __cxa_throw(v137, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v84 = v69;
    v85 = (void **)&v154->__r_.__value_.__l.__data_;
    EspressoConverter::copyWeightsToDataBlob((EspressoConverter *)v154->__r_.__value_.__r.__words[2], v70, 4 * v84);
    v86 = v160;
    v150 = v85;
    v151 = v155;
    if (v155)
    {
      v87 = (unint64_t *)&v155->__shared_owners_;
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    (*(void (**)(std::string::size_type, void ***))(*(_QWORD *)v86 + 392))(v86, &v150);
    v89 = v151;
    if (v151)
    {
      v90 = (unint64_t *)&v151->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v92 = v155;
    if (v155)
    {
      v93 = (unint64_t *)&v155->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
  }
  if (v181)
    v95 = v181;
  else
    v95 = &CoreML::Specification::_WeightParams_default_instance_;
  v96 = v95[5];
  if (*(char *)(v96 + 23) < 0)
    v97 = *(_QWORD *)(v96 + 8);
  else
    v97 = *(unsigned __int8 *)(v96 + 23);
  v98 = v95[6];
  if (*(char *)(v98 + 23) < 0)
    v99 = *(_QWORD *)(v98 + 8);
  else
    v99 = *(unsigned __int8 *)(v98 + 23);
  v100 = *((_DWORD *)v95 + 4);
  v101 = v95[7];
  if (*(char *)(v101 + 23) < 0)
    v102 = *(_QWORD *)(v101 + 8);
  else
    v102 = *(unsigned __int8 *)(v101 + 23);
  if (v100 <= 0)
    v103 = 1;
  else
    v103 = 2;
  if (v97)
    v104 = v103;
  else
    v104 = v100 > 0;
  if (v99)
    ++v104;
  if (v102)
    ++v104;
  if (v100 > 0 || v104 != 1)
    goto LABEL_201;
  if ((*(_BYTE *)(v96 + 23) & 0x80) != 0)
  {
    if (*(_QWORD *)(v96 + 8))
      goto LABEL_199;
  }
  else if (*(_BYTE *)(v96 + 23))
  {
LABEL_199:
    v106 = 1;
    goto LABEL_230;
  }
LABEL_201:
  if ((_BYTE)v186)
  {
    if (v182)
      v107 = v182;
    else
      v107 = &CoreML::Specification::_WeightParams_default_instance_;
    v108 = v107[5];
    v109 = *(unsigned __int8 *)(v108 + 23);
    if (*(char *)(v108 + 23) < 0)
      v110 = *(_QWORD *)(v108 + 8);
    else
      v110 = *(unsigned __int8 *)(v108 + 23);
    v111 = v107[6];
    if (*(char *)(v111 + 23) < 0)
      v112 = *(_QWORD *)(v111 + 8);
    else
      v112 = *(unsigned __int8 *)(v111 + 23);
    v113 = *((_DWORD *)v107 + 4);
    v114 = v107[7];
    if (*(char *)(v114 + 23) < 0)
      v115 = *(_QWORD *)(v114 + 8);
    else
      v115 = *(unsigned __int8 *)(v114 + 23);
    v106 = 0;
    if (v113 <= 0)
      v116 = 1;
    else
      v116 = 2;
    if (v110)
      v117 = v116;
    else
      v117 = v113 > 0;
    if (v112)
      ++v117;
    if (v115)
      ++v117;
    if (v113 <= 0 && v117 == 1)
    {
      if ((v109 & 0x80) != 0)
        v109 = *(_QWORD *)(v108 + 8);
      v106 = v109 != 0;
    }
  }
  else
  {
    v106 = 0;
  }
LABEL_230:
  v118 = v161;
  if (v161)
  {
    v119 = (unint64_t *)&v161->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  if (v167[0])
    operator delete(v167[0]);
  CoreML::Specification::Convolution3DLayerParams::~Convolution3DLayerParams((CoreML::Specification::Convolution3DLayerParams *)&v179);
  v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v179);
  v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v179);
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v195.__r_.__value_.__l.__data_);
  return v106;
}

void sub_19C94FDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  void *v65;
  int v66;
  uint64_t v67;

  if (a41 < 0)
    operator delete(__p);
  if (a35 < 0)
  {
    operator delete(a30);
    if ((v66 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
      if (a48)
        operator delete(a48);
      CoreML::Specification::Convolution3DLayerParams::~Convolution3DLayerParams((CoreML::Specification::Convolution3DLayerParams *)&a65);
      a65 = (void *)(v67 - 144);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
      a65 = (void *)(v67 - 120);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
      if (*(char *)(v67 - 73) < 0)
        operator delete(*(void **)(v67 - 96));
      _Unwind_Resume(a1);
    }
  }
  else if (!v66)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v65);
  goto LABEL_8;
}

void Espresso::sequential_builder::add<Espresso::conv3d_params_t>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, __int128 **a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;

  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v20.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v11 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (__int128 *)v18.__r_.__value_.__l.__data_, (__int128 *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v23 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_19C95033C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduce(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v6;
  const CoreML::Specification::ReduceLayerParams *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  std::runtime_error *exception;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  std::runtime_error *v24;
  _QWORD *v25;
  uint64_t **v26;
  uint64_t v27;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v28;
  const CoreML::Specification::ReduceLayerParams *v29;
  void *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  std::runtime_error *v44;
  std::string v45;
  std::string v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void *__p[2];
  __int128 v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  void (**v61)(CoreML::Specification::ReduceLayerParams *__hidden);
  uint64_t v62;
  int v63;
  float v64;
  int v65;
  __int128 *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 *v69;
  __int128 *v70;
  uint64_t v71;
  std::string v72;
  _OWORD v73[2];
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  _BYTE v78[32];
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void (**v83)(CoreML::Specification::ReduceLayerParams *__hidden);
  uint64_t v84;
  int v85;
  __int128 *v86;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v72.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v5;
  }
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v69, (uint64_t *)&v66, *((_QWORD *)this + 1));
  if (*((_DWORD *)a2 + 35) == 280)
  {
    v7 = (const CoreML::Specification::ReduceLayerParams *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    v7 = (const CoreML::Specification::ReduceLayerParams *)&CoreML::Specification::_ReduceLayerParams_default_instance_;
  }
  CoreML::Specification::ReduceLayerParams::ReduceLayerParams((CoreML::Specification::ReduceLayerParams *)&v61, v7);
  v55 = 0x358637BD00000000;
  v56 = 0x100000007;
  v57 = 0;
  v58 = 0;
  v59 = 0xFFFFFFFF00000000;
  v60 = 0;
  switch(v63)
  {
    case 1:
      v8 = 1;
      goto LABEL_27;
    case 2:
      v8 = 2;
      goto LABEL_27;
    case 3:
      LODWORD(v55) = 3;
      if (v64 != 0.0)
        *((float *)&v55 + 1) = v64;
      break;
    case 4:
      v8 = 4;
      goto LABEL_27;
    case 5:
      v8 = 8;
      goto LABEL_27;
    case 6:
      v8 = 5;
      goto LABEL_27;
    case 7:
      v8 = 9;
      goto LABEL_27;
    case 8:
      v8 = 10;
      goto LABEL_27;
    case 9:
      v8 = 11;
LABEL_27:
      LODWORD(v55) = v8;
      break;
    default:
      if (v63 == 0x80000000 || v63 == 0x7FFFFFFF)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Reduce layer: '", 15);
        v10 = *((_QWORD *)a2 + 14);
        v11 = *(char *)(v10 + 23);
        if (v11 >= 0)
          v12 = *((_QWORD *)a2 + 14);
        else
          v12 = *(_QWORD *)v10;
        if (v11 >= 0)
          v13 = *(unsigned __int8 *)(v10 + 23);
        else
          v13 = *(_QWORD *)(v10 + 8);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v12, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"': unknown value for parameter 'mode'.", 38);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, (const std::string *)v78);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      return;
  }
  v16 = 2;
  switch(v65)
  {
    case 0:
      v17 = 7;
      goto LABEL_43;
    case 1:
      v17 = 3;
LABEL_43:
      LODWORD(v56) = v17;
      if (v63 == 9)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Reduce layer: '", 15);
        v39 = *((_QWORD *)a2 + 14);
        v40 = *(char *)(v39 + 23);
        if (v40 >= 0)
          v41 = *((_QWORD *)a2 + 14);
        else
          v41 = *(_QWORD *)v39;
        if (v40 >= 0)
          v42 = *(unsigned __int8 *)(v39 + 23);
        else
          v42 = *(_QWORD *)(v39 + 8);
        v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v41, v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"': argmax reduction operation is only supported along single dimensions C, H or W.", 82);
        v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v44, (const std::string *)v78);
        __cxa_throw(v44, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      break;
    case 2:
      v16 = 4;
      goto LABEL_41;
    case 3:
      goto LABEL_41;
    case 4:
      v16 = 1;
LABEL_41:
      LODWORD(v56) = v16;
      break;
    default:
      if (v65 == 0x80000000 || v65 == 0x7FFFFFFF)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Reduce layer: '", 15);
        v19 = *((_QWORD *)a2 + 14);
        v20 = *(char *)(v19 + 23);
        if (v20 >= 0)
          v21 = *((_QWORD *)a2 + 14);
        else
          v21 = *(_QWORD *)v19;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(v19 + 23);
        else
          v22 = *(_QWORD *)(v19 + 8);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"': unknown value for parameter 'axis'.", 38);
        v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v24, (const std::string *)v78);
        __cxa_throw(v24, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      return;
  }
  v25 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "reduce");
  memset(&v46, 0, sizeof(v46));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v46, v66, v67, 0xAAAAAAAAAAAAAAABLL * (((char *)v67 - (char *)v66) >> 3));
  memset(&v45, 0, sizeof(v45));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v45, v69, v70, 0xAAAAAAAAAAAAAAABLL * (((char *)v70 - (char *)v69) >> 3));
  Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v47, v25, (uint64_t)__p, (uint64_t)&v72, (uint64_t)&v55, (__int128 *)v46.__r_.__value_.__l.__data_, (__int128 *)v46.__r_.__value_.__l.__size_, (__int128 **)&v45);
  *(_QWORD *)v78 = &v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v78);
  *(_QWORD *)v78 = &v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v78);
  if (SBYTE7(v50) < 0)
    operator delete(__p[0]);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v69);
  }
  else
  {
    v26 = (uint64_t **)*((_QWORD *)this + 1);
    v27 = std::map<std::string,std::string>::at((uint64_t)v26, v66);
    *(_OWORD *)__p = *(_OWORD *)v27;
    v50 = *(_OWORD *)(v27 + 16);
    v51 = *(_QWORD *)(v27 + 32);
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v28 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v52, *(const void **)(v27 + 40), *(_QWORD *)(v27 + 48), (uint64_t)(*(_QWORD *)(v27 + 48)- *(_QWORD *)(v27 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 280)
    {
      v29 = (const CoreML::Specification::ReduceLayerParams *)*((_QWORD *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v28);
      v29 = (const CoreML::Specification::ReduceLayerParams *)&CoreML::Specification::_ReduceLayerParams_default_instance_;
    }
    CoreML::Specification::ReduceLayerParams::ReduceLayerParams((CoreML::Specification::ReduceLayerParams *)&v83, v29);
    *(_OWORD *)v78 = *(_OWORD *)__p;
    *(_OWORD *)&v78[16] = v50;
    v30 = v52;
    v79 = v51;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v80, v52, v53, (v53 - (uint64_t)v52) >> 2);
    switch(v85)
    {
      case 0:
        *(_DWORD *)&v78[8] = 1;
        goto LABEL_53;
      case 1:
LABEL_53:
        *(_QWORD *)v78 = 0x100000001;
        break;
      case 2:
        *(_DWORD *)&v78[8] = 1;
        break;
      case 3:
        *(_DWORD *)&v78[4] = 1;
        break;
      case 4:
        *(_DWORD *)v78 = 1;
        break;
      default:
        break;
    }
    v73[0] = *(_OWORD *)v78;
    v73[1] = *(_OWORD *)&v78[16];
    v31 = v80;
    v74 = v79;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v32 = v81;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v75, v80, v81, (v81 - (uint64_t)v80) >> 2);
    EspressoConverter::validateShape((int *)v73, *((_QWORD *)a2 + 14), (uint64_t)v69);
    if (v75)
    {
      v76 = v75;
      operator delete(v75);
    }
    v86 = v69;
    v33 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, v69, &v86);
    v34 = *(_OWORD *)&v78[16];
    *(_OWORD *)(v33 + 56) = *(_OWORD *)v78;
    *(_OWORD *)(v33 + 72) = v34;
    *((_QWORD *)v33 + 11) = v79;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v33 + 96, v31, v32, (v32 - (uint64_t)v31) >> 2);
    if (v31)
      operator delete(v31);
    v83 = &off_1E3D50E28;
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v84);
    if (v30)
      operator delete(v30);
  }
  v35 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v61 = &off_1E3D50E28;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v62);
  __p[0] = &v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
}

void sub_19C950A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a66;
  void *__p;
  char a72;
  void *v72;
  int v73;
  uint64_t v74;

  if (*(char *)(v74 - 153) < 0)
  {
    operator delete(*(void **)(v74 - 176));
    if ((v73 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a60);
      *(_QWORD *)(v74 - 176) = &a63;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v74 - 176));
      *(_QWORD *)(v74 - 176) = &a66;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v74 - 176));
      if (a72 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v72);
  goto LABEL_6;
}

void LayerTranslator::addTopK(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  unint64_t *inited;
  uint64_t *v7;
  int v8;
  int v9;
  unint64_t *v10;
  int v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string v16;
  std::string v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  int v22;
  char v23;
  char v24;
  int v25;
  __int16 v26;
  char v27;
  void **v28;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  std::string v34;
  std::string *v35;

  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v34.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v5;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v31, (uint64_t *)&v28, *((_QWORD *)this + 1));
  v23 = 0;
  v26 = 256;
  v27 = 1;
  if (*((_DWORD *)a2 + 35) == 1015)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    if (!*((_DWORD *)v7 + 6))
    {
      v22 = 1;
      v24 = 1;
LABEL_16:
      v25 = v7[2];
      goto LABEL_20;
    }
    v8 = 1015;
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    v8 = *((_DWORD *)a2 + 35);
    if (!dword_1ED003258)
    {
      v9 = 1;
      goto LABEL_14;
    }
    if (v8 == 1015)
    {
      v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    }
    else
    {
      inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      v8 = *((_DWORD *)a2 + 35);
      v7 = &CoreML::Specification::_TopKLayerParams_default_instance_;
    }
  }
  v9 = *((_DWORD *)v7 + 6);
LABEL_14:
  v22 = v9;
  v24 = 1;
  if (v8 == 1015)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
    goto LABEL_16;
  }
  v10 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
  v11 = *((_DWORD *)a2 + 35);
  v25 = qword_1ED003250;
  if (v11 == 1015)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v10);
    v7 = &CoreML::Specification::_TopKLayerParams_default_instance_;
  }
LABEL_20:
  LOBYTE(v26) = *((_BYTE *)v7 + 32);
  v12 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "topk");
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, (__int128 *)v28, v29, 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v31, v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3));
  Espresso::sequential_builder::add<Espresso::topk_params_t>(&v20, v12, (uint64_t)__p, (uint64_t)&v34, (uint64_t)&v22, (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, (__int128 **)&v16);
  v13 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v35 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  v35 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (v19 < 0)
    operator delete(__p[0]);
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v31);
  __p[0] = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v28 = (void **)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
}

void sub_19C950E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(_QWORD *)(v27 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a21 < 0)
    operator delete(__p);
  __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(a1);
}

void LayerTranslator::addSoftmax(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string v22;
  std::string v23;
  void *__p;
  char v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 *v34;
  __int128 *v35;
  uint64_t v36;
  std::string v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  std::string v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  void **v59;

  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  v4 = (__int128 *)*((_QWORD *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v37.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v5;
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v34, (uint64_t *)&v31, *((_QWORD *)this + 1));
  v30 = 256;
  v28 = xmmword_19CB39970;
  v29 = 1;
  v6 = *(_QWORD **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "softmax");
  memset(&v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, v31, v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3));
  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, v34, v35, 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (char *)v34) >> 3));
  *(_QWORD *)&v39 = 0;
  v38 = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v38, (__int128 *)v23.__r_.__value_.__l.__data_, (__int128 *)v23.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23.__r_.__value_.__l.__size_ - v23.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v56, 0, sizeof(v56));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v56, (__int128 *)v22.__r_.__value_.__l.__data_, (__int128 *)v22.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22.__r_.__value_.__l.__size_ - v22.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v50) = (***(uint64_t (****)(_QWORD))(v6[14] + 8))(*(_QWORD *)(v6[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v57 = v26;
  v58 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v50 = 0uLL;
  *(_QWORD *)&v51 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v50, (__int128 *)v38, *((__int128 **)&v38 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v38 + 1) - v38) >> 3));
  v44 = 0uLL;
  *(_QWORD *)&v45 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v44, (__int128 *)v56.__r_.__value_.__l.__data_, (__int128 *)v56.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v59 = (void **)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v59);
  v59 = (void **)&v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v59);
  v9 = v58;
  if (v58)
  {
    v10 = (unint64_t *)&v58->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (*v6)
    Espresso::sequential_builder::add_shape_from_kernel();
  *(_QWORD *)&v50 = &v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  *(_QWORD *)&v50 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  *(_QWORD *)&v50 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  *(_QWORD *)&v50 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  if (v25 < 0)
    operator delete(__p);
  if (**((_BYTE **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v34);
  }
  else
  {
    v12 = (uint64_t **)*((_QWORD *)this + 1);
    v13 = std::map<std::string,std::string>::at((uint64_t)v12, v31);
    v50 = *(_OWORD *)v13;
    v51 = *(_OWORD *)(v13 + 16);
    v52 = *(_QWORD *)(v13 + 32);
    v53 = 0;
    v54 = 0;
    v55 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v53, *(const void **)(v13 + 40), *(_QWORD *)(v13 + 48), (uint64_t)(*(_QWORD *)(v13 + 48) - *(_QWORD *)(v13 + 40)) >> 2);
    v44 = v50;
    v45 = v51;
    v14 = v53;
    v46 = v52;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v47, v53, v54, (v54 - (uint64_t)v53) >> 2);
    v38 = v44;
    v39 = v45;
    v15 = v47;
    v40 = v46;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v16 = v48;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v41, v47, v48, (v48 - (uint64_t)v47) >> 2);
    EspressoConverter::validateShape((int *)&v38, *((_QWORD *)a2 + 14), (uint64_t)v34);
    if (v41)
    {
      v42 = v41;
      operator delete(v41);
    }
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
    v17 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, v34, (__int128 **)&v56);
    v18 = v45;
    *(_OWORD *)(v17 + 56) = v44;
    *(_OWORD *)(v17 + 72) = v18;
    *((_QWORD *)v17 + 11) = v46;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v17 + 96, v15, v16, (v16 - (uint64_t)v15) >> 2);
    if (v15)
      operator delete(v15);
    if (v14)
      operator delete(v14);
  }
  v19 = v27;
  if (v27)
  {
    v20 = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_QWORD *)&v50 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  *(_QWORD *)&v50 = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
}

void sub_19C951384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p)
{
  void *v46;
  void *v47;

  if (__p)
  {
    operator delete(__p);
    if (!v47)
    {
LABEL_3:
      if (!v46)
      {
LABEL_8:
        std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
        a24 = &a28;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
        a24 = &a31;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v46);
      goto LABEL_8;
    }
  }
  else if (!v47)
  {
    goto LABEL_3;
  }
  operator delete(v47);
  if (!v46)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t EspressoConverter::convertNeuralNetwork(uint64_t a1, void *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  const void *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;

  v8 = a3 + 1;
  v9 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    do
    {
      *(_QWORD *)((char *)v9 + 68) = -1;
      v10 = *(_OWORD *)(v9 + 9);
      v18 = *(_OWORD *)(v9 + 7);
      v19 = v10;
      v11 = (const void *)v9[12];
      v20 = v9[11];
      v21 = 0;
      v22 = 0;
      v23 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v21, v11, v9[13], (uint64_t)(v9[13] - (_QWORD)v11) >> 2);
      v26[0] = v18;
      v26[1] = v19;
      v27 = v20;
      v29 = 0;
      v30 = 0;
      v28 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v28, v21, v22, (v22 - (uint64_t)v21) >> 2);
      std::string::basic_string[abi:ne180100]<0>(__p, "Input");
      EspressoConverter::validateShape((int *)v26, (uint64_t)__p, (uint64_t)(v9 + 4));
      if (SHIBYTE(v25) < 0)
        operator delete(__p[0]);
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      if (v21)
        operator delete(v21);
      v12 = (_QWORD *)v9[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v9[2];
          v14 = *v13 == (_QWORD)v9;
          v9 = v13;
        }
        while (!v14);
      }
      v9 = v13;
    }
    while (v13 != v8);
  }
  __p[0] = a2;
  __p[1] = a3;
  v25 = a4;
  if (*(int *)(a1 + 24) < 1)
    return 0;
  v15 = 0;
  LODWORD(v16) = 0;
  do
  {
    ++*(_DWORD *)(a4 + 4);
    CoreML::Specification::NeuralNetworkLayer::NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&v18, *(const CoreML::Specification::NeuralNetworkLayer **)(*(_QWORD *)(a1 + 32) + 8 * v15 + 8));
    if ((LayerTranslator::layerTranslateFn((LayerTranslator *)__p, (const CoreML::Specification::NeuralNetworkLayer *)&v18) & 1) != 0)v16 = 1;
    else
      v16 = v16;
    CoreML::Specification::NeuralNetworkLayer::~NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&v18);
    ++v15;
  }
  while (v15 < *(int *)(a1 + 24));
  return v16;
}

void sub_19C9516B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v35;

  if (a33 < 0)
    operator delete(__p);
  v35 = *(void **)(v33 - 104);
  if (v35)
    operator delete(v35);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

int *EspressoConverter::validateShape(int *result, uint64_t a2, uint64_t a3)
{
  int v4;
  BOOL v5;
  int v6;
  BOOL v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  std::runtime_error *exception;
  std::string v24;
  _BYTE v25[16];
  _QWORD v26[33];

  if (result[4] != -1
    || result[3] != -1
    || ((v4 = result[2], v4 <= 0) ? (v5 = v4 == -1) : (v5 = 1),
        !v5 || ((v6 = result[1], v6 <= 0) ? (v7 = v6 == -1) : (v7 = 1), !v7 || *result <= 0 && *result != -1)))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v25);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Invalid data blob: '", 20);
    v9 = *(char *)(a3 + 23);
    if (v9 >= 0)
      v10 = a3;
    else
      v10 = *(_QWORD *)a3;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a3 + 23);
    else
      v11 = *(_QWORD *)(a3 + 8);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"' shape (C,H,W = ", 17);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)",", 1);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)",", 1);
    v15 = (_QWORD *)std::ostream::operator<<();
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") for output of layer: '", 24);
    v17 = *(char *)(a2 + 23);
    if (v17 >= 0)
      v18 = a2;
    else
      v18 = *(_QWORD *)a2;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a2 + 23);
    else
      v19 = *(_QWORD *)(a2 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"'.", 2);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v21);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v24);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_19C9518B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t EspressoConverter::convertToEspresso(const CoreML::Specification::NeuralNetwork *a1, int a2, _QWORD *a3, uint64_t **a4, char a5)
{
  uint64_t **v5;
  void *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 v9;
  const void *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  std::string *p_s;
  std::string *v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 *v23;
  __int128 v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string *v28;
  std::string *v29;
  uint64_t v30;
  std::string *begin;
  __int128 v32;
  const std::string::value_type *v33;
  std::string *v34;
  std::__split_buffer<std::string>::pointer v35;
  __int128 v36;
  std::string *first;
  std::__split_buffer<std::string>::pointer v38;
  _OWORD *v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  std::string *v44;
  std::string *v45;
  __int128 v46;
  std::string::size_type v47;
  char *v48;
  int v49;
  int v50;
  int v51;
  uint64_t *v52;
  int v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *inited;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  float v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::vector<std::string>::pointer end;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  std::string *v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  _OWORD *v76;
  __int128 v77;
  std::string::size_type v78;
  uint64_t v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  __int128 v99;
  const void *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  __int128 v104;
  std::string::size_type v105;
  std::string *v106;
  std::string *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  __int128 *v112;
  __int128 v113;
  std::string::size_type v114;
  std::string::size_type v115;
  std::string::size_type v116;
  std::string *v117;
  std::string *v118;
  uint64_t v119;
  std::string *v120;
  __int128 v121;
  const std::string::value_type *v122;
  std::string *v123;
  std::__split_buffer<std::string>::pointer v124;
  __int128 v125;
  std::string *v126;
  std::__split_buffer<std::string>::pointer v127;
  _OWORD *v128;
  __int128 v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  std::string *v133;
  std::string *v134;
  __int128 v135;
  std::string::size_type v136;
  char *v137;
  int v138;
  int v139;
  int v140;
  uint64_t *v141;
  int v142;
  unint64_t *v143;
  unint64_t v144;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  float v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::vector<std::string>::pointer v156;
  __int128 v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  std::string *v161;
  std::string *v162;
  __int128 v163;
  std::string *v164;
  _OWORD *v165;
  __int128 v166;
  std::string::size_type v167;
  uint64_t v168;
  char *v169;
  __int128 v170;
  __int128 v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t *v186;
  __int128 v187;
  const void *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t v191;
  __int128 v192;
  std::string::size_type v193;
  std::string *v194;
  std::string *v195;
  uint64_t j;
  uint64_t v197;
  uint64_t v198;
  char v199;
  __int128 *v200;
  __int128 v201;
  std::string::size_type v202;
  std::string::size_type v203;
  std::string::size_type v204;
  std::string *v205;
  std::string *v206;
  uint64_t v207;
  std::__split_buffer<std::string>::pointer v208;
  __int128 v209;
  const std::string::value_type *v210;
  std::string *v211;
  std::__split_buffer<std::string>::pointer v212;
  __int128 v213;
  std::string *v214;
  std::__split_buffer<std::string>::pointer v215;
  _OWORD *v216;
  __int128 v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  std::string *v221;
  std::string *v222;
  __int128 v223;
  std::string::size_type v224;
  char *v225;
  int v226;
  int v227;
  int v228;
  uint64_t *v229;
  int v230;
  unint64_t *v231;
  unint64_t v232;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  float v237;
  uint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::vector<std::string>::pointer v244;
  __int128 v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  std::string *v249;
  std::string *v250;
  __int128 v251;
  std::string *v252;
  _OWORD *v253;
  __int128 v254;
  std::string::size_type v255;
  uint64_t v256;
  char *v257;
  __int128 v258;
  __int128 v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  uint64_t v272;
  _QWORD *v274;
  std::string *v275;
  std::string::size_type v276;
  _QWORD *v277;
  _QWORD *v278;
  std::runtime_error *v279;
  _QWORD *v280;
  std::string *v281;
  std::string::size_type v282;
  _QWORD *v283;
  _QWORD *v284;
  std::runtime_error *v285;
  _QWORD *v286;
  std::string *v287;
  std::string::size_type size;
  _QWORD *v289;
  _QWORD *v290;
  std::runtime_error *v291;
  _QWORD *v292;
  std::runtime_error *v293;
  _QWORD *v294;
  std::runtime_error *v295;
  _QWORD *v296;
  std::runtime_error *v297;
  void *exception;
  uint64_t *v300;
  uint64_t *v301;
  uint64_t *v302;
  _BYTE v305[24];
  int v306;
  uint64_t v307;
  int v308;
  uint64_t v309;
  _BYTE v310[24];
  int v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  _BYTE v315[24];
  int v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  void *__p;
  uint64_t **v321;
  _BYTE *v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  _BYTE v326[36];
  int v327;
  std::__split_buffer<std::string> v328;
  void *v329;
  void *v330;
  uint64_t v331;
  std::string v332;
  std::string v333;
  void *v334[2];
  char v335;
  uint64_t v336;
  std::__shared_weak_count *v337;
  __int128 v338;
  std::string::size_type v339;
  std::vector<std::string> v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  uint64_t v343;
  std::__shared_weak_count *v344;
  uint64_t v345;
  std::__shared_weak_count *v346;
  std::string v347;
  std::string v348;
  uint64_t v349;
  std::__shared_weak_count *v350;
  std::string v351;
  __int128 v352;
  unint64_t v353;
  __int128 *v354;
  __int128 *v355;
  uint64_t v356;
  std::string v357;
  std::string __s;
  std::__split_buffer<std::string> __v;
  __int128 v360;
  uint64_t v361;
  std::string v362;
  _BYTE v363[4];
  uint64_t v364;
  int v365;
  __int128 *v366;
  uint64_t *v367;
  int v368;
  void **v369[3];

  v5 = a4;
  v6 = a3;
  if (a2 != 303)
  {
    if (a2 != 403)
    {
      if (a2 != 500)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD5E28](exception, "Unrecognizable Neural Network type.");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      CoreML::Specification::NeuralNetwork::NeuralNetwork((CoreML::Specification::NeuralNetwork *)v315, a1);
      v8 = (uint64_t *)(v5 + 1);
      v7 = *v5;
      if (*v5 != (uint64_t *)(v5 + 1))
      {
        do
        {
          *(uint64_t *)((char *)v7 + 68) = -1;
          v9 = *(_OWORD *)(v7 + 9);
          *(_OWORD *)&__v.__first_ = *(_OWORD *)(v7 + 7);
          *(_OWORD *)&__v.__end_ = v9;
          v10 = (const void *)v7[12];
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)v7[11];
          v360 = 0uLL;
          v361 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v360, v10, v7[13], (v7[13] - (uint64_t)v10) >> 2);
          v328 = __v;
          v330 = 0;
          v331 = 0;
          v329 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v329, (const void *)v360, *((uint64_t *)&v360 + 1), (uint64_t)(*((_QWORD *)&v360 + 1) - v360) >> 2);
          std::string::basic_string[abi:ne180100]<0>(&__p, "Input");
          EspressoConverter::validateShape((int *)&v328, (uint64_t)&__p, (uint64_t)(v7 + 4));
          if (SHIBYTE(v322) < 0)
            operator delete(__p);
          if (v329)
          {
            v330 = v329;
            operator delete(v329);
          }
          if ((_QWORD)v360)
            operator delete((void *)v360);
          v11 = (uint64_t *)v7[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (uint64_t *)v7[2];
              v13 = *v12 == (_QWORD)v7;
              v7 = v12;
            }
            while (!v13);
          }
          v7 = v12;
        }
        while (v12 != v8);
      }
      if (v318 < 1)
        goto LABEL_172;
      v14 = 0;
      v300 = (uint64_t *)(v5 + 1);
      while (1)
      {
        CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v326, *(const CoreML::Specification::NeuralNetworkPreprocessing **)(v319 + 8 * v14 + 8));
        if (v327 != 11)
          goto LABEL_171;
        CoreML::Specification::NeuralNetwork::NeuralNetwork((CoreML::Specification::NeuralNetwork *)&__p, (const CoreML::Specification::NeuralNetwork *)v315);
        CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v363, *(const CoreML::Specification::NeuralNetworkPreprocessing **)(v325 + 8 * v14 + 8));
        if (*((char *)v366 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v362, *(const std::string::value_type **)v366, *((_QWORD *)v366 + 1));
        }
        else
        {
          v15 = *v366;
          v362.__r_.__value_.__r.__words[2] = *((_QWORD *)v366 + 2);
          *(_OWORD *)&v362.__r_.__value_.__l.__data_ = v15;
        }
        if (v8 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v5, &v362))
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
          v286 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"Mean image preprocessor input blob ('", 37);
          if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v287 = &v362;
          else
            v287 = (std::string *)v362.__r_.__value_.__r.__words[0];
          if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v362.__r_.__value_.__r.__words[2]);
          else
            size = v362.__r_.__value_.__l.__size_;
          v289 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v286, (uint64_t)v287, size);
          v290 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v289, (uint64_t)"') not found. ", 14);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v290);
          v291 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::runtime_error::runtime_error(v291, &__s);
          __cxa_throw(v291, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = HIBYTE(v362.__r_.__value_.__r.__words[2]);
        else
          v16 = v362.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&__s, v16 + 13);
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_s = &__s;
        else
          p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        if (v16)
        {
          if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v18 = &v362;
          else
            v18 = (std::string *)v362.__r_.__value_.__r.__words[0];
          memmove(p_s, v18, v16);
        }
        strcpy((char *)p_s + v16, "_preprocessed");
        if (v323 < 1)
          goto LABEL_81;
        for (i = 0; i < v323; ++i)
        {
          v20 = *(_QWORD *)(v324 + 8 * i + 8);
          memset(&__v, 0, 24);
          if (*(int *)(v20 + 24) < 1)
            goto LABEL_80;
          v21 = 0;
          v22 = 0;
          do
          {
            v23 = *(__int128 **)(*(_QWORD *)(v20 + 32) + 8 * v21 + 8);
            if (*((char *)v23 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v357, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
            }
            else
            {
              v24 = *v23;
              v357.__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
              *(_OWORD *)&v357.__r_.__value_.__l.__data_ = v24;
            }
            v25 = v357.__r_.__value_.__l.__size_;
            if ((v357.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v26 = HIBYTE(v357.__r_.__value_.__r.__words[2]);
            else
              v26 = v357.__r_.__value_.__l.__size_;
            v27 = HIBYTE(v362.__r_.__value_.__r.__words[2]);
            if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v27 = v362.__r_.__value_.__l.__size_;
            if (v26 != v27)
              goto LABEL_57;
            if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v28 = &v362;
            else
              v28 = (std::string *)v362.__r_.__value_.__r.__words[0];
            if ((*((_BYTE *)&v357.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v33 = (const std::string::value_type *)v357.__r_.__value_.__r.__words[0];
              if (memcmp(v357.__r_.__value_.__l.__data_, v28, v357.__r_.__value_.__l.__size_))
              {
                begin = __v.__begin_;
                if (__v.__begin_ >= __v.__end_)
                {
LABEL_62:
                  v34 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (__int128 *)&v357);
                  goto LABEL_73;
                }
LABEL_68:
                std::string::__init_copy_ctor_external(begin, v33, v25);
                goto LABEL_69;
              }
            }
            else if (*((_BYTE *)&v357.__r_.__value_.__s + 23))
            {
              v29 = &v357;
              v30 = HIBYTE(v357.__r_.__value_.__r.__words[2]);
              while (v29->__r_.__value_.__s.__data_[0] == v28->__r_.__value_.__s.__data_[0])
              {
                v29 = (std::string *)((char *)v29 + 1);
                v28 = (std::string *)((char *)v28 + 1);
                if (!--v30)
                  goto LABEL_63;
              }
LABEL_57:
              begin = __v.__begin_;
              if (__v.__begin_ >= __v.__end_)
                goto LABEL_62;
              if ((*((_BYTE *)&v357.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                v33 = (const std::string::value_type *)v357.__r_.__value_.__r.__words[0];
                goto LABEL_68;
              }
              v32 = *(_OWORD *)&v357.__r_.__value_.__l.__data_;
              __v.__begin_->__r_.__value_.__r.__words[2] = v357.__r_.__value_.__r.__words[2];
              *(_OWORD *)&begin->__r_.__value_.__l.__data_ = v32;
LABEL_69:
              v34 = begin + 1;
              goto LABEL_73;
            }
LABEL_63:
            v35 = __v.__begin_;
            if (__v.__begin_ >= __v.__end_)
            {
              v34 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (__int128 *)&__s);
            }
            else
            {
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(__v.__begin_, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              }
              else
              {
                v36 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                __v.__begin_->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
              }
              v34 = v35 + 1;
            }
            v22 = 1;
LABEL_73:
            __v.__begin_ = v34;
            if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v357.__r_.__value_.__l.__data_);
            ++v21;
          }
          while (v21 < *(int *)(v20 + 24));
          if ((v22 & 1) != 0)
          {
            google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v20 + 16);
            first = __v.__first_;
            v38 = __v.__begin_;
            while (first != v38)
              CoreML::Specification::NeuralNetworkLayer::add_input(v20, first++);
          }
LABEL_80:
          v357.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v357);
        }
LABEL_81:
        memset(&v357, 0, sizeof(v357));
        v355 = 0;
        v354 = 0;
        v356 = 0;
        std::operator+<char>();
        v39 = (_OWORD *)v357.__r_.__value_.__l.__size_;
        v6 = a3;
        v5 = a4;
        if (v357.__r_.__value_.__l.__size_ >= v357.__r_.__value_.__r.__words[2])
        {
          v41 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v357.__r_.__value_.__l.__size_ - v357.__r_.__value_.__r.__words[0]) >> 3);
          v42 = v41 + 1;
          if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556
             * ((uint64_t)(v357.__r_.__value_.__r.__words[2] - v357.__r_.__value_.__r.__words[0]) >> 3) > v42)
            v42 = 0x5555555555555556
                * ((uint64_t)(v357.__r_.__value_.__r.__words[2] - v357.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v357.__r_.__value_.__r.__words[2] - v357.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            v43 = 0xAAAAAAAAAAAAAAALL;
          else
            v43 = v42;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v357.__r_.__value_.__r.__words[2];
          v8 = v300;
          if (v43)
            v44 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v357.__r_.__value_.__r.__words[2], v43);
          else
            v44 = 0;
          v45 = v44 + v41;
          __v.__first_ = v44;
          __v.__begin_ = v45;
          __v.__end_cap_.__value_ = &v44[v43];
          v46 = v352;
          v45->__r_.__value_.__r.__words[2] = v353;
          *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
          v353 = 0;
          v352 = 0uLL;
          __v.__end_ = v45 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v357, &__v);
          v47 = v357.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v357.__r_.__value_.__l.__size_ = v47;
          if (SHIBYTE(v353) < 0)
            operator delete((void *)v352);
        }
        else
        {
          v40 = v352;
          *(_QWORD *)(v357.__r_.__value_.__l.__size_ + 16) = v353;
          *v39 = v40;
          v357.__r_.__value_.__l.__size_ = (std::string::size_type)v39 + 24;
          v8 = v300;
        }
        v353 = 0xFFFFFFFF00000001;
        v352 = xmmword_19CB39920;
        __v.__first_ = &v362;
        DWORD2(v352) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v362, (__int128 **)&__v)+ 16);
        __v.__first_ = &v362;
        DWORD1(v352) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v362, (__int128 **)&__v)+ 15);
        __v.__first_ = &v362;
        v48 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v362, (__int128 **)&__v);
        v49 = *((_DWORD *)v48 + 14);
        LODWORD(v352) = v49;
        v50 = DWORD2(v352);
        v51 = DWORD1(v352);
        if (v368 == 11)
        {
          v52 = v367;
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v48);
          v52 = &CoreML::Specification::_NeuralNetworkMeanImage_default_instance_;
        }
        v53 = v50 * v49 * v51;
        if (*((_DWORD *)v52 + 4) != v53)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
          v296 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"Mean Image Preprocessing: mean image size must be same as input image size.", 75);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v296);
          v297 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::runtime_error::runtime_error(v297, &v351);
          __cxa_throw(v297, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "load_constant");
        std::operator+<char>();
        memset(&v348, 0, sizeof(v348));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v348, v354, v355, 0xAAAAAAAAAAAAAAABLL * (((char *)v355 - (char *)v354) >> 3));
        memset(&v347, 0, sizeof(v347));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v347, (__int128 *)v357.__r_.__value_.__l.__data_, (__int128 *)v357.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v357.__r_.__value_.__l.__size_ - v357.__r_.__value_.__r.__words[0]) >> 3));
        Espresso::sequential_builder::add<Espresso::load_constant_params>(&v349, a3, (uint64_t)&__v, (uint64_t)&v351, (uint64_t)&v352, (__int128 *)v348.__r_.__value_.__l.__data_, (__int128 *)v348.__r_.__value_.__l.__size_, (__int128 **)&v347);
        v340.__begin_ = &v347;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v340);
        v340.__begin_ = &v348;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v340);
        if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v351.__r_.__value_.__l.__data_);
        if (SHIBYTE(__v.__end_) < 0)
          operator delete(__v.__first_);
        v345 = v349;
        v346 = v350;
        if (v350)
        {
          p_shared_owners = (unint64_t *)&v350->__shared_owners_;
          do
            v55 = __ldxr(p_shared_owners);
          while (__stxr(v55 + 1, p_shared_owners));
        }
        inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v343, v352, SDWORD1(v352), SDWORD2(v352), SHIDWORD(v352));
        if (v53 <= 0)
        {
          v61 = v343;
        }
        else
        {
          v57 = 0;
          v58 = 4 * v53;
          do
          {
            if (v368 == 11)
            {
              v59 = v367;
            }
            else
            {
              inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
              v59 = &CoreML::Specification::_NeuralNetworkMeanImage_default_instance_;
            }
            v60 = -*(float *)(v59[3] + v57 + 8);
            v61 = v343;
            *(float *)(*(_QWORD *)(v343 + 24) + v57) = v60;
            v57 += 4;
          }
          while (v58 != v57);
        }
        v341 = v61;
        v342 = v344;
        if (v344)
        {
          v62 = (unint64_t *)&v344->__shared_owners_;
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        Espresso::generic_load_constant_kernel::set_constant_blob();
        v64 = v342;
        if (v342)
        {
          v65 = (unint64_t *)&v342->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        memset(&v351, 0, sizeof(v351));
        memset(&v340, 0, sizeof(v340));
        v340.__end_ = (std::vector<std::string>::pointer)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v340, (__int128 *)&v362);
        std::operator+<char>();
        end = v340.__end_;
        if (v340.__end_ >= v340.__end_cap_.__value_)
        {
          v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v340.__end_ - (char *)v340.__begin_) >> 3);
          v70 = v69 + 1;
          if (v69 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v340.__end_cap_.__value_ - (char *)v340.__begin_) >> 3) > v70)
            v70 = 0x5555555555555556 * (((char *)v340.__end_cap_.__value_ - (char *)v340.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v340.__end_cap_.__value_ - (char *)v340.__begin_) >> 3) >= 0x555555555555555)
            v71 = 0xAAAAAAAAAAAAAAALL;
          else
            v71 = v70;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v340.__end_cap_;
          if (v71)
            v72 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v340.__end_cap_, v71);
          else
            v72 = 0;
          v73 = v72 + v69;
          __v.__first_ = v72;
          __v.__begin_ = v73;
          __v.__end_cap_.__value_ = &v72[v71];
          v74 = v338;
          v73->__r_.__value_.__r.__words[2] = v339;
          *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
          v339 = 0;
          v338 = 0uLL;
          __v.__end_ = v73 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v340, &__v);
          v75 = v340.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v340.__end_ = v75;
          if (SHIBYTE(v339) < 0)
            operator delete((void *)v338);
        }
        else
        {
          v68 = v338;
          v340.__end_->__r_.__value_.__r.__words[2] = v339;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v68;
          v340.__end_ = end + 1;
        }
        v76 = (_OWORD *)v351.__r_.__value_.__l.__size_;
        if (v351.__r_.__value_.__l.__size_ >= v351.__r_.__value_.__r.__words[2])
        {
          v78 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v351, (__int128 *)&__s);
        }
        else
        {
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v351.__r_.__value_.__l.__size_, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else
          {
            v77 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
            *(_QWORD *)(v351.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
            *v76 = v77;
          }
          v78 = (std::string::size_type)v76 + 24;
        }
        v351.__r_.__value_.__l.__size_ = v78;
        __v.__end_ = (std::__split_buffer<std::string>::pointer)897988541;
        LOBYTE(__v.__end_cap_.__value_) = 0;
        *(_QWORD *)((char *)&v360 + 4) = 0;
        __v.__begin_ = (std::__split_buffer<std::string>::pointer)1065353216;
        __v.__first_ = 0;
        std::string::basic_string[abi:ne180100]<0>(&v338, "elementwise");
        std::operator+<char>();
        memset(&v333, 0, sizeof(v333));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v333, (__int128 *)v340.__begin_, (__int128 *)v340.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v340.__end_ - (char *)v340.__begin_) >> 3));
        memset(&v332, 0, sizeof(v332));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v332, (__int128 *)v351.__r_.__value_.__l.__data_, (__int128 *)v351.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v351.__r_.__value_.__l.__size_ - v351.__r_.__value_.__r.__words[0]) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v336, a3, (uint64_t)&v338, (uint64_t)v334, (uint64_t)&__v, (__int128 *)v333.__r_.__value_.__l.__data_, (__int128 *)v333.__r_.__value_.__l.__size_, (__int128 **)&v332);
        v369[0] = (void **)&v332;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v369);
        v369[0] = (void **)&v333;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v369);
        if (v335 < 0)
          operator delete(v334[0]);
        if (SHIBYTE(v339) < 0)
          operator delete((void *)v338);
        v79 = std::map<std::string,std::string>::at((uint64_t)a4, &v362);
        v334[0] = &__s;
        v80 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &__s, (__int128 **)v334);
        v81 = *(_OWORD *)v79;
        v82 = *(_OWORD *)(v79 + 16);
        *((_QWORD *)v80 + 11) = *(_QWORD *)(v79 + 32);
        *(_OWORD *)(v80 + 72) = v82;
        *(_OWORD *)(v80 + 56) = v81;
        if (v80 + 56 != (char *)v79)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v80 + 96, *(char **)(v79 + 40), *(_QWORD *)(v79 + 48), (uint64_t)(*(_QWORD *)(v79 + 48) - *(_QWORD *)(v79 + 40)) >> 2);
        v83 = v337;
        if (v337)
        {
          v84 = (unint64_t *)&v337->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v340;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        __v.__first_ = &v351;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        v86 = v344;
        if (v344)
        {
          v87 = (unint64_t *)&v344->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v89 = v346;
        if (v346)
        {
          v90 = (unint64_t *)&v346->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v92 = v350;
        if (v350)
        {
          v93 = (unint64_t *)&v350->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v354;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        __v.__first_ = &v357;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v362.__r_.__value_.__l.__data_);
        CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v363);
        CoreML::Specification::NeuralNetwork::Clear((CoreML::Specification::NeuralNetwork *)v315);
        CoreML::Specification::NeuralNetwork::MergeFrom((CoreML::Specification::NeuralNetwork *)v315, (const CoreML::Specification::NeuralNetwork *)&__p);
        CoreML::Specification::NeuralNetwork::~NeuralNetwork((CoreML::Specification::NeuralNetwork *)&__p);
LABEL_171:
        CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v326);
        if (++v14 >= v318)
        {
LABEL_172:
          v363[0] = a5;
          v364 = 0;
          v365 = 0;
          __p = v6;
          v321 = v5;
          v322 = v363;
          if (v316 < 1)
          {
            v96 = 0;
          }
          else
          {
            v95 = 0;
            LODWORD(v96) = 0;
            do
            {
              ++*((_DWORD *)v322 + 1);
              CoreML::Specification::NeuralNetworkLayer::NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&__v, *(const CoreML::Specification::NeuralNetworkLayer **)(v317 + 8 * v95 + 8));
              if ((LayerTranslator::layerTranslateFn((LayerTranslator *)&__p, (const std::string **)&__v.__first_) & 1) != 0)v96 = 1;
              else
                v96 = v96;
              CoreML::Specification::NeuralNetworkLayer::~NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&__v);
              ++v95;
            }
            while (v95 < v316);
          }
          CoreML::Specification::NeuralNetwork::~NeuralNetwork((CoreML::Specification::NeuralNetwork *)v315);
          return v96;
        }
      }
    }
    CoreML::Specification::NeuralNetworkClassifier::NeuralNetworkClassifier((CoreML::Specification::NeuralNetworkClassifier *)v305, a1);
    v98 = (uint64_t *)(v5 + 1);
    v97 = *v5;
    if (*v5 != (uint64_t *)(v5 + 1))
    {
      do
      {
        *(uint64_t *)((char *)v97 + 68) = -1;
        v99 = *(_OWORD *)(v97 + 9);
        *(_OWORD *)&__v.__first_ = *(_OWORD *)(v97 + 7);
        *(_OWORD *)&__v.__end_ = v99;
        v100 = (const void *)v97[12];
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)v97[11];
        v360 = 0uLL;
        v361 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v360, v100, v97[13], (v97[13] - (uint64_t)v100) >> 2);
        v328 = __v;
        v330 = 0;
        v331 = 0;
        v329 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v329, (const void *)v360, *((uint64_t *)&v360 + 1), (uint64_t)(*((_QWORD *)&v360 + 1) - v360) >> 2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Input");
        EspressoConverter::validateShape((int *)&v328, (uint64_t)&__p, (uint64_t)(v97 + 4));
        if (SHIBYTE(v322) < 0)
          operator delete(__p);
        if (v329)
        {
          v330 = v329;
          operator delete(v329);
        }
        if ((_QWORD)v360)
          operator delete((void *)v360);
        v101 = (uint64_t *)v97[1];
        if (v101)
        {
          do
          {
            v102 = v101;
            v101 = (uint64_t *)*v101;
          }
          while (v101);
        }
        else
        {
          do
          {
            v102 = (uint64_t *)v97[2];
            v13 = *v102 == (_QWORD)v97;
            v97 = v102;
          }
          while (!v13);
        }
        v97 = v102;
      }
      while (v102 != v98);
    }
    if (v308 < 1)
      goto LABEL_347;
    v103 = 0;
    v301 = (uint64_t *)(v5 + 1);
LABEL_194:
    CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v326, *(const CoreML::Specification::NeuralNetworkPreprocessing **)(v309 + 8 * v103 + 8));
    if (v327 != 11)
      goto LABEL_346;
    CoreML::Specification::NeuralNetworkClassifier::NeuralNetworkClassifier((CoreML::Specification::NeuralNetworkClassifier *)&__p, (const CoreML::Specification::NeuralNetworkClassifier *)v305);
    CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v363, *(const CoreML::Specification::NeuralNetworkPreprocessing **)(v325 + 8 * v103 + 8));
    if (*((char *)v366 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v362, *(const std::string::value_type **)v366, *((_QWORD *)v366 + 1));
    }
    else
    {
      v104 = *v366;
      v362.__r_.__value_.__r.__words[2] = *((_QWORD *)v366 + 2);
      *(_OWORD *)&v362.__r_.__value_.__l.__data_ = v104;
    }
    if (v98 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v5, &v362))
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
      v274 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"Mean image preprocessor input blob ('", 37);
      if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v275 = &v362;
      else
        v275 = (std::string *)v362.__r_.__value_.__r.__words[0];
      if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v276 = HIBYTE(v362.__r_.__value_.__r.__words[2]);
      else
        v276 = v362.__r_.__value_.__l.__size_;
      v277 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v274, (uint64_t)v275, v276);
      v278 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v277, (uint64_t)"') not found. ", 14);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v278);
      v279 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v279, &__s);
      __cxa_throw(v279, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v105 = HIBYTE(v362.__r_.__value_.__r.__words[2]);
    else
      v105 = v362.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, v105 + 13);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v106 = &__s;
    else
      v106 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (v105)
    {
      if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v107 = &v362;
      else
        v107 = (std::string *)v362.__r_.__value_.__r.__words[0];
      memmove(v106, v107, v105);
    }
    strcpy((char *)v106 + v105, "_preprocessed");
    if (v323 < 1)
      goto LABEL_256;
    v108 = 0;
LABEL_212:
    v109 = *(_QWORD *)(v324 + 8 * v108 + 8);
    memset(&__v, 0, 24);
    if (*(int *)(v109 + 24) < 1)
      goto LABEL_255;
    v110 = 0;
    v111 = 0;
    while (1)
    {
      v112 = *(__int128 **)(*(_QWORD *)(v109 + 32) + 8 * v110 + 8);
      if (*((char *)v112 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v357, *(const std::string::value_type **)v112, *((_QWORD *)v112 + 1));
      }
      else
      {
        v113 = *v112;
        v357.__r_.__value_.__r.__words[2] = *((_QWORD *)v112 + 2);
        *(_OWORD *)&v357.__r_.__value_.__l.__data_ = v113;
      }
      v114 = v357.__r_.__value_.__l.__size_;
      if ((v357.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v115 = HIBYTE(v357.__r_.__value_.__r.__words[2]);
      else
        v115 = v357.__r_.__value_.__l.__size_;
      v116 = HIBYTE(v362.__r_.__value_.__r.__words[2]);
      if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v116 = v362.__r_.__value_.__l.__size_;
      if (v115 == v116)
      {
        if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v117 = &v362;
        else
          v117 = (std::string *)v362.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v357.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v122 = (const std::string::value_type *)v357.__r_.__value_.__r.__words[0];
          if (!memcmp(v357.__r_.__value_.__l.__data_, v117, v357.__r_.__value_.__l.__size_))
          {
LABEL_238:
            v124 = __v.__begin_;
            if (__v.__begin_ >= __v.__end_)
            {
              v123 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (__int128 *)&__s);
            }
            else
            {
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(__v.__begin_, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              }
              else
              {
                v125 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                __v.__begin_->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v124->__r_.__value_.__l.__data_ = v125;
              }
              v123 = v124 + 1;
            }
            v111 = 1;
            goto LABEL_248;
          }
          v120 = __v.__begin_;
          if (__v.__begin_ < __v.__end_)
            goto LABEL_243;
          goto LABEL_237;
        }
        if (!*((_BYTE *)&v357.__r_.__value_.__s + 23))
          goto LABEL_238;
        v118 = &v357;
        v119 = HIBYTE(v357.__r_.__value_.__r.__words[2]);
        while (v118->__r_.__value_.__s.__data_[0] == v117->__r_.__value_.__s.__data_[0])
        {
          v118 = (std::string *)((char *)v118 + 1);
          v117 = (std::string *)((char *)v117 + 1);
          if (!--v119)
            goto LABEL_238;
        }
      }
      v120 = __v.__begin_;
      if (__v.__begin_ < __v.__end_)
      {
        if ((*((_BYTE *)&v357.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v122 = (const std::string::value_type *)v357.__r_.__value_.__r.__words[0];
LABEL_243:
          std::string::__init_copy_ctor_external(v120, v122, v114);
        }
        else
        {
          v121 = *(_OWORD *)&v357.__r_.__value_.__l.__data_;
          __v.__begin_->__r_.__value_.__r.__words[2] = v357.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v120->__r_.__value_.__l.__data_ = v121;
        }
        v123 = v120 + 1;
        goto LABEL_248;
      }
LABEL_237:
      v123 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (__int128 *)&v357);
LABEL_248:
      __v.__begin_ = v123;
      if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v357.__r_.__value_.__l.__data_);
      if (++v110 >= *(int *)(v109 + 24))
      {
        if ((v111 & 1) != 0)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v109 + 16);
          v126 = __v.__first_;
          v127 = __v.__begin_;
          while (v126 != v127)
            CoreML::Specification::NeuralNetworkLayer::add_input(v109, v126++);
        }
LABEL_255:
        v357.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v357);
        if (++v108 >= v323)
        {
LABEL_256:
          memset(&v357, 0, sizeof(v357));
          v355 = 0;
          v354 = 0;
          v356 = 0;
          std::operator+<char>();
          v128 = (_OWORD *)v357.__r_.__value_.__l.__size_;
          v6 = a3;
          v5 = a4;
          if (v357.__r_.__value_.__l.__size_ >= v357.__r_.__value_.__r.__words[2])
          {
            v130 = 0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(v357.__r_.__value_.__l.__size_ - v357.__r_.__value_.__r.__words[0]) >> 3);
            v131 = v130 + 1;
            if (v130 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556
               * ((uint64_t)(v357.__r_.__value_.__r.__words[2] - v357.__r_.__value_.__r.__words[0]) >> 3) > v131)
              v131 = 0x5555555555555556
                   * ((uint64_t)(v357.__r_.__value_.__r.__words[2] - v357.__r_.__value_.__r.__words[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v357.__r_.__value_.__r.__words[2] - v357.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
              v132 = 0xAAAAAAAAAAAAAAALL;
            else
              v132 = v131;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v357.__r_.__value_.__r.__words[2];
            v98 = v301;
            if (v132)
              v133 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v357.__r_.__value_.__r.__words[2], v132);
            else
              v133 = 0;
            v134 = v133 + v130;
            __v.__first_ = v133;
            __v.__begin_ = v134;
            __v.__end_cap_.__value_ = &v133[v132];
            v135 = v352;
            v134->__r_.__value_.__r.__words[2] = v353;
            *(_OWORD *)&v134->__r_.__value_.__l.__data_ = v135;
            v353 = 0;
            v352 = 0uLL;
            __v.__end_ = v134 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v357, &__v);
            v136 = v357.__r_.__value_.__l.__size_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v357.__r_.__value_.__l.__size_ = v136;
            if (SHIBYTE(v353) < 0)
              operator delete((void *)v352);
          }
          else
          {
            v129 = v352;
            *(_QWORD *)(v357.__r_.__value_.__l.__size_ + 16) = v353;
            *v128 = v129;
            v357.__r_.__value_.__l.__size_ = (std::string::size_type)v128 + 24;
            v98 = v301;
          }
          v353 = 0xFFFFFFFF00000001;
          v352 = xmmword_19CB39920;
          __v.__first_ = &v362;
          DWORD2(v352) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v362, (__int128 **)&__v)+ 16);
          __v.__first_ = &v362;
          DWORD1(v352) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v362, (__int128 **)&__v)+ 15);
          __v.__first_ = &v362;
          v137 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v362, (__int128 **)&__v);
          v138 = *((_DWORD *)v137 + 14);
          LODWORD(v352) = v138;
          v139 = DWORD2(v352);
          v140 = DWORD1(v352);
          if (v368 == 11)
          {
            v141 = v367;
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v137);
            v141 = &CoreML::Specification::_NeuralNetworkMeanImage_default_instance_;
          }
          v142 = v139 * v138 * v140;
          if (*((_DWORD *)v141 + 4) != v142)
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
            v292 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"Mean Image Preprocessing: mean image size must be same as input image size.", 75);
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v292);
            v293 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::stringbuf::str();
            std::runtime_error::runtime_error(v293, &v351);
            __cxa_throw(v293, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          std::string::basic_string[abi:ne180100]<0>(&__v, "load_constant");
          std::operator+<char>();
          memset(&v348, 0, sizeof(v348));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v348, v354, v355, 0xAAAAAAAAAAAAAAABLL * (((char *)v355 - (char *)v354) >> 3));
          memset(&v347, 0, sizeof(v347));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v347, (__int128 *)v357.__r_.__value_.__l.__data_, (__int128 *)v357.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v357.__r_.__value_.__l.__size_ - v357.__r_.__value_.__r.__words[0]) >> 3));
          Espresso::sequential_builder::add<Espresso::load_constant_params>(&v349, a3, (uint64_t)&__v, (uint64_t)&v351, (uint64_t)&v352, (__int128 *)v348.__r_.__value_.__l.__data_, (__int128 *)v348.__r_.__value_.__l.__size_, (__int128 **)&v347);
          v340.__begin_ = &v347;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v340);
          v340.__begin_ = &v348;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v340);
          if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v351.__r_.__value_.__l.__data_);
          if (SHIBYTE(__v.__end_) < 0)
            operator delete(__v.__first_);
          v345 = v349;
          v346 = v350;
          if (v350)
          {
            v143 = (unint64_t *)&v350->__shared_owners_;
            do
              v144 = __ldxr(v143);
            while (__stxr(v144 + 1, v143));
          }
          v145 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v343, v352, SDWORD1(v352), SDWORD2(v352), SHIDWORD(v352));
          if (v142 <= 0)
          {
            v150 = v343;
          }
          else
          {
            v146 = 0;
            v147 = 4 * v142;
            do
            {
              if (v368 == 11)
              {
                v148 = v367;
              }
              else
              {
                v145 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v145);
                v148 = &CoreML::Specification::_NeuralNetworkMeanImage_default_instance_;
              }
              v149 = -*(float *)(v148[3] + v146 + 8);
              v150 = v343;
              *(float *)(*(_QWORD *)(v343 + 24) + v146) = v149;
              v146 += 4;
            }
            while (v147 != v146);
          }
          v341 = v150;
          v342 = v344;
          if (v344)
          {
            v151 = (unint64_t *)&v344->__shared_owners_;
            do
              v152 = __ldxr(v151);
            while (__stxr(v152 + 1, v151));
          }
          Espresso::generic_load_constant_kernel::set_constant_blob();
          v153 = v342;
          if (v342)
          {
            v154 = (unint64_t *)&v342->__shared_owners_;
            do
              v155 = __ldaxr(v154);
            while (__stlxr(v155 - 1, v154));
            if (!v155)
            {
              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
              std::__shared_weak_count::__release_weak(v153);
            }
          }
          memset(&v351, 0, sizeof(v351));
          memset(&v340, 0, sizeof(v340));
          v340.__end_ = (std::vector<std::string>::pointer)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v340, (__int128 *)&v362);
          std::operator+<char>();
          v156 = v340.__end_;
          if (v340.__end_ >= v340.__end_cap_.__value_)
          {
            v158 = 0xAAAAAAAAAAAAAAABLL * (((char *)v340.__end_ - (char *)v340.__begin_) >> 3);
            v159 = v158 + 1;
            if (v158 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v340.__end_cap_.__value_ - (char *)v340.__begin_) >> 3) > v159)
              v159 = 0x5555555555555556 * (((char *)v340.__end_cap_.__value_ - (char *)v340.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v340.__end_cap_.__value_ - (char *)v340.__begin_) >> 3) >= 0x555555555555555)
              v160 = 0xAAAAAAAAAAAAAAALL;
            else
              v160 = v159;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v340.__end_cap_;
            if (v160)
              v161 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v340.__end_cap_, v160);
            else
              v161 = 0;
            v162 = v161 + v158;
            __v.__first_ = v161;
            __v.__begin_ = v162;
            __v.__end_cap_.__value_ = &v161[v160];
            v163 = v338;
            v162->__r_.__value_.__r.__words[2] = v339;
            *(_OWORD *)&v162->__r_.__value_.__l.__data_ = v163;
            v339 = 0;
            v338 = 0uLL;
            __v.__end_ = v162 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v340, &__v);
            v164 = v340.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v340.__end_ = v164;
            if (SHIBYTE(v339) < 0)
              operator delete((void *)v338);
          }
          else
          {
            v157 = v338;
            v340.__end_->__r_.__value_.__r.__words[2] = v339;
            *(_OWORD *)&v156->__r_.__value_.__l.__data_ = v157;
            v340.__end_ = v156 + 1;
          }
          v165 = (_OWORD *)v351.__r_.__value_.__l.__size_;
          if (v351.__r_.__value_.__l.__size_ >= v351.__r_.__value_.__r.__words[2])
          {
            v167 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v351, (__int128 *)&__s);
          }
          else
          {
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v351.__r_.__value_.__l.__size_, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else
            {
              v166 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
              *(_QWORD *)(v351.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
              *v165 = v166;
            }
            v167 = (std::string::size_type)v165 + 24;
          }
          v351.__r_.__value_.__l.__size_ = v167;
          __v.__end_ = (std::__split_buffer<std::string>::pointer)897988541;
          LOBYTE(__v.__end_cap_.__value_) = 0;
          *(_QWORD *)((char *)&v360 + 4) = 0;
          __v.__begin_ = (std::__split_buffer<std::string>::pointer)1065353216;
          __v.__first_ = 0;
          std::string::basic_string[abi:ne180100]<0>(&v338, "elementwise");
          std::operator+<char>();
          memset(&v333, 0, sizeof(v333));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v333, (__int128 *)v340.__begin_, (__int128 *)v340.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v340.__end_ - (char *)v340.__begin_) >> 3));
          memset(&v332, 0, sizeof(v332));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v332, (__int128 *)v351.__r_.__value_.__l.__data_, (__int128 *)v351.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v351.__r_.__value_.__l.__size_ - v351.__r_.__value_.__r.__words[0]) >> 3));
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v336, a3, (uint64_t)&v338, (uint64_t)v334, (uint64_t)&__v, (__int128 *)v333.__r_.__value_.__l.__data_, (__int128 *)v333.__r_.__value_.__l.__size_, (__int128 **)&v332);
          v369[0] = (void **)&v332;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v369);
          v369[0] = (void **)&v333;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v369);
          if (v335 < 0)
            operator delete(v334[0]);
          if (SHIBYTE(v339) < 0)
            operator delete((void *)v338);
          v168 = std::map<std::string,std::string>::at((uint64_t)a4, &v362);
          v334[0] = &__s;
          v169 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &__s, (__int128 **)v334);
          v170 = *(_OWORD *)v168;
          v171 = *(_OWORD *)(v168 + 16);
          *((_QWORD *)v169 + 11) = *(_QWORD *)(v168 + 32);
          *(_OWORD *)(v169 + 72) = v171;
          *(_OWORD *)(v169 + 56) = v170;
          if (v169 + 56 != (char *)v168)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v169 + 96, *(char **)(v168 + 40), *(_QWORD *)(v168 + 48), (uint64_t)(*(_QWORD *)(v168 + 48) - *(_QWORD *)(v168 + 40)) >> 2);
          v172 = v337;
          if (v337)
          {
            v173 = (unint64_t *)&v337->__shared_owners_;
            do
              v174 = __ldaxr(v173);
            while (__stlxr(v174 - 1, v173));
            if (!v174)
            {
              ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
              std::__shared_weak_count::__release_weak(v172);
            }
          }
          __v.__first_ = (std::__split_buffer<std::string>::pointer)&v340;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          __v.__first_ = &v351;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          v175 = v344;
          if (v344)
          {
            v176 = (unint64_t *)&v344->__shared_owners_;
            do
              v177 = __ldaxr(v176);
            while (__stlxr(v177 - 1, v176));
            if (!v177)
            {
              ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
              std::__shared_weak_count::__release_weak(v175);
            }
          }
          v178 = v346;
          if (v346)
          {
            v179 = (unint64_t *)&v346->__shared_owners_;
            do
              v180 = __ldaxr(v179);
            while (__stlxr(v180 - 1, v179));
            if (!v180)
            {
              ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
              std::__shared_weak_count::__release_weak(v178);
            }
          }
          v181 = v350;
          if (v350)
          {
            v182 = (unint64_t *)&v350->__shared_owners_;
            do
              v183 = __ldaxr(v182);
            while (__stlxr(v183 - 1, v182));
            if (!v183)
            {
              ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
              std::__shared_weak_count::__release_weak(v181);
            }
          }
          __v.__first_ = (std::__split_buffer<std::string>::pointer)&v354;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          __v.__first_ = &v357;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v362.__r_.__value_.__l.__data_);
          CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v363);
          CoreML::Specification::NeuralNetworkClassifier::Clear((CoreML::Specification::NeuralNetworkClassifier *)v305);
          CoreML::Specification::NeuralNetworkClassifier::MergeFrom((CoreML::Specification::NeuralNetworkClassifier *)v305, (const CoreML::Specification::NeuralNetworkClassifier *)&__p);
          CoreML::Specification::NeuralNetworkClassifier::~NeuralNetworkClassifier((CoreML::Specification::NeuralNetworkClassifier *)&__p);
LABEL_346:
          CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v326);
          if (++v103 >= v308)
          {
LABEL_347:
            v363[0] = a5;
            v364 = 0;
            v365 = 0;
            __p = v6;
            v321 = v5;
            v322 = v363;
            if (v306 < 1)
            {
              v96 = 0;
            }
            else
            {
              v184 = 0;
              LODWORD(v96) = 0;
              do
              {
                ++*((_DWORD *)v322 + 1);
                CoreML::Specification::NeuralNetworkLayer::NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&__v, *(const CoreML::Specification::NeuralNetworkLayer **)(v307 + 8 * v184 + 8));
                if ((LayerTranslator::layerTranslateFn((LayerTranslator *)&__p, (const std::string **)&__v.__first_) & 1) != 0)v96 = 1;
                else
                  v96 = v96;
                CoreML::Specification::NeuralNetworkLayer::~NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&__v);
                ++v184;
              }
              while (v184 < v306);
            }
            CoreML::Specification::NeuralNetworkClassifier::~NeuralNetworkClassifier((CoreML::Specification::NeuralNetworkClassifier *)v305);
            return v96;
          }
          goto LABEL_194;
        }
        goto LABEL_212;
      }
    }
  }
  CoreML::Specification::NeuralNetworkRegressor::NeuralNetworkRegressor((CoreML::Specification::NeuralNetworkRegressor *)v310, a1);
  v186 = (uint64_t *)(v5 + 1);
  v185 = *v5;
  if (*v5 != (uint64_t *)(v5 + 1))
  {
    do
    {
      *(uint64_t *)((char *)v185 + 68) = -1;
      v187 = *(_OWORD *)(v185 + 9);
      *(_OWORD *)&__v.__first_ = *(_OWORD *)(v185 + 7);
      *(_OWORD *)&__v.__end_ = v187;
      v188 = (const void *)v185[12];
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)v185[11];
      v360 = 0uLL;
      v361 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v360, v188, v185[13], (v185[13] - (uint64_t)v188) >> 2);
      v328 = __v;
      v330 = 0;
      v331 = 0;
      v329 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v329, (const void *)v360, *((uint64_t *)&v360 + 1), (uint64_t)(*((_QWORD *)&v360 + 1) - v360) >> 2);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Input");
      EspressoConverter::validateShape((int *)&v328, (uint64_t)&__p, (uint64_t)(v185 + 4));
      if (SHIBYTE(v322) < 0)
        operator delete(__p);
      if (v329)
      {
        v330 = v329;
        operator delete(v329);
      }
      if ((_QWORD)v360)
        operator delete((void *)v360);
      v189 = (uint64_t *)v185[1];
      if (v189)
      {
        do
        {
          v190 = v189;
          v189 = (uint64_t *)*v189;
        }
        while (v189);
      }
      else
      {
        do
        {
          v190 = (uint64_t *)v185[2];
          v13 = *v190 == (_QWORD)v185;
          v185 = v190;
        }
        while (!v13);
      }
      v185 = v190;
    }
    while (v190 != v186);
  }
  if (v313 < 1)
    goto LABEL_522;
  v191 = 0;
  v302 = (uint64_t *)(v5 + 1);
  do
  {
    CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v326, *(const CoreML::Specification::NeuralNetworkPreprocessing **)(v314 + 8 * v191 + 8));
    if (v327 != 11)
      goto LABEL_521;
    CoreML::Specification::NeuralNetworkRegressor::NeuralNetworkRegressor((CoreML::Specification::NeuralNetworkRegressor *)&__p, (const CoreML::Specification::NeuralNetworkRegressor *)v310);
    CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v363, *(const CoreML::Specification::NeuralNetworkPreprocessing **)(v325 + 8 * v191 + 8));
    if (*((char *)v366 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v362, *(const std::string::value_type **)v366, *((_QWORD *)v366 + 1));
    }
    else
    {
      v192 = *v366;
      v362.__r_.__value_.__r.__words[2] = *((_QWORD *)v366 + 2);
      *(_OWORD *)&v362.__r_.__value_.__l.__data_ = v192;
    }
    if (v186 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v5, &v362))
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
      v280 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"Mean image preprocessor input blob ('", 37);
      if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v281 = &v362;
      else
        v281 = (std::string *)v362.__r_.__value_.__r.__words[0];
      if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v282 = HIBYTE(v362.__r_.__value_.__r.__words[2]);
      else
        v282 = v362.__r_.__value_.__l.__size_;
      v283 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)v281, v282);
      v284 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v283, (uint64_t)"') not found. ", 14);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v284);
      v285 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v285, &__s);
      __cxa_throw(v285, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v193 = HIBYTE(v362.__r_.__value_.__r.__words[2]);
    else
      v193 = v362.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, v193 + 13);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v194 = &__s;
    else
      v194 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (v193)
    {
      if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v195 = &v362;
      else
        v195 = (std::string *)v362.__r_.__value_.__r.__words[0];
      memmove(v194, v195, v193);
    }
    strcpy((char *)v194 + v193, "_preprocessed");
    if (v323 < 1)
      goto LABEL_431;
    for (j = 0; j < v323; ++j)
    {
      v197 = *(_QWORD *)(v324 + 8 * j + 8);
      memset(&__v, 0, 24);
      if (*(int *)(v197 + 24) < 1)
        goto LABEL_430;
      v198 = 0;
      v199 = 0;
      do
      {
        v200 = *(__int128 **)(*(_QWORD *)(v197 + 32) + 8 * v198 + 8);
        if (*((char *)v200 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v357, *(const std::string::value_type **)v200, *((_QWORD *)v200 + 1));
        }
        else
        {
          v201 = *v200;
          v357.__r_.__value_.__r.__words[2] = *((_QWORD *)v200 + 2);
          *(_OWORD *)&v357.__r_.__value_.__l.__data_ = v201;
        }
        v202 = v357.__r_.__value_.__l.__size_;
        if ((v357.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v203 = HIBYTE(v357.__r_.__value_.__r.__words[2]);
        else
          v203 = v357.__r_.__value_.__l.__size_;
        v204 = HIBYTE(v362.__r_.__value_.__r.__words[2]);
        if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v204 = v362.__r_.__value_.__l.__size_;
        if (v203 != v204)
          goto LABEL_407;
        if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v205 = &v362;
        else
          v205 = (std::string *)v362.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v357.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v210 = (const std::string::value_type *)v357.__r_.__value_.__r.__words[0];
          if (memcmp(v357.__r_.__value_.__l.__data_, v205, v357.__r_.__value_.__l.__size_))
          {
            v208 = __v.__begin_;
            if (__v.__begin_ >= __v.__end_)
            {
LABEL_412:
              v211 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (__int128 *)&v357);
              goto LABEL_423;
            }
            goto LABEL_418;
          }
        }
        else if (*((_BYTE *)&v357.__r_.__value_.__s + 23))
        {
          v206 = &v357;
          v207 = HIBYTE(v357.__r_.__value_.__r.__words[2]);
          while (v206->__r_.__value_.__s.__data_[0] == v205->__r_.__value_.__s.__data_[0])
          {
            v206 = (std::string *)((char *)v206 + 1);
            v205 = (std::string *)((char *)v205 + 1);
            if (!--v207)
              goto LABEL_413;
          }
LABEL_407:
          v208 = __v.__begin_;
          if (__v.__begin_ >= __v.__end_)
            goto LABEL_412;
          if ((*((_BYTE *)&v357.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            v209 = *(_OWORD *)&v357.__r_.__value_.__l.__data_;
            __v.__begin_->__r_.__value_.__r.__words[2] = v357.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v208->__r_.__value_.__l.__data_ = v209;
LABEL_419:
            v211 = v208 + 1;
            goto LABEL_423;
          }
          v210 = (const std::string::value_type *)v357.__r_.__value_.__r.__words[0];
LABEL_418:
          std::string::__init_copy_ctor_external(v208, v210, v202);
          goto LABEL_419;
        }
LABEL_413:
        v212 = __v.__begin_;
        if (__v.__begin_ >= __v.__end_)
        {
          v211 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (__int128 *)&__s);
        }
        else
        {
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(__v.__begin_, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else
          {
            v213 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
            __v.__begin_->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v212->__r_.__value_.__l.__data_ = v213;
          }
          v211 = v212 + 1;
        }
        v199 = 1;
LABEL_423:
        __v.__begin_ = v211;
        if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v357.__r_.__value_.__l.__data_);
        ++v198;
      }
      while (v198 < *(int *)(v197 + 24));
      if ((v199 & 1) != 0)
      {
        google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v197 + 16);
        v214 = __v.__first_;
        v215 = __v.__begin_;
        while (v214 != v215)
          CoreML::Specification::NeuralNetworkLayer::add_input(v197, v214++);
      }
LABEL_430:
      v357.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v357);
    }
LABEL_431:
    memset(&v357, 0, sizeof(v357));
    v355 = 0;
    v354 = 0;
    v356 = 0;
    std::operator+<char>();
    v216 = (_OWORD *)v357.__r_.__value_.__l.__size_;
    v6 = a3;
    v5 = a4;
    if (v357.__r_.__value_.__l.__size_ >= v357.__r_.__value_.__r.__words[2])
    {
      v218 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v357.__r_.__value_.__l.__size_ - v357.__r_.__value_.__r.__words[0]) >> 3);
      v219 = v218 + 1;
      if (v218 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556
         * ((uint64_t)(v357.__r_.__value_.__r.__words[2] - v357.__r_.__value_.__r.__words[0]) >> 3) > v219)
        v219 = 0x5555555555555556
             * ((uint64_t)(v357.__r_.__value_.__r.__words[2] - v357.__r_.__value_.__r.__words[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v357.__r_.__value_.__r.__words[2] - v357.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
        v220 = 0xAAAAAAAAAAAAAAALL;
      else
        v220 = v219;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v357.__r_.__value_.__r.__words[2];
      v186 = v302;
      if (v220)
        v221 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v357.__r_.__value_.__r.__words[2], v220);
      else
        v221 = 0;
      v222 = v221 + v218;
      __v.__first_ = v221;
      __v.__begin_ = v222;
      __v.__end_cap_.__value_ = &v221[v220];
      v223 = v352;
      v222->__r_.__value_.__r.__words[2] = v353;
      *(_OWORD *)&v222->__r_.__value_.__l.__data_ = v223;
      v353 = 0;
      v352 = 0uLL;
      __v.__end_ = v222 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v357, &__v);
      v224 = v357.__r_.__value_.__l.__size_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v357.__r_.__value_.__l.__size_ = v224;
      if (SHIBYTE(v353) < 0)
        operator delete((void *)v352);
    }
    else
    {
      v217 = v352;
      *(_QWORD *)(v357.__r_.__value_.__l.__size_ + 16) = v353;
      *v216 = v217;
      v357.__r_.__value_.__l.__size_ = (std::string::size_type)v216 + 24;
      v186 = v302;
    }
    v353 = 0xFFFFFFFF00000001;
    v352 = xmmword_19CB39920;
    __v.__first_ = &v362;
    DWORD2(v352) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v362, (__int128 **)&__v)+ 16);
    __v.__first_ = &v362;
    DWORD1(v352) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v362, (__int128 **)&__v)+ 15);
    __v.__first_ = &v362;
    v225 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v362, (__int128 **)&__v);
    v226 = *((_DWORD *)v225 + 14);
    LODWORD(v352) = v226;
    v227 = DWORD2(v352);
    v228 = DWORD1(v352);
    if (v368 == 11)
    {
      v229 = v367;
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v225);
      v229 = &CoreML::Specification::_NeuralNetworkMeanImage_default_instance_;
    }
    v230 = v227 * v226 * v228;
    if (*((_DWORD *)v229 + 4) != v230)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
      v294 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"Mean Image Preprocessing: mean image size must be same as input image size.", 75);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v294);
      v295 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v295, &v351);
      __cxa_throw(v295, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::string::basic_string[abi:ne180100]<0>(&__v, "load_constant");
    std::operator+<char>();
    memset(&v348, 0, sizeof(v348));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v348, v354, v355, 0xAAAAAAAAAAAAAAABLL * (((char *)v355 - (char *)v354) >> 3));
    memset(&v347, 0, sizeof(v347));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v347, (__int128 *)v357.__r_.__value_.__l.__data_, (__int128 *)v357.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v357.__r_.__value_.__l.__size_ - v357.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add<Espresso::load_constant_params>(&v349, a3, (uint64_t)&__v, (uint64_t)&v351, (uint64_t)&v352, (__int128 *)v348.__r_.__value_.__l.__data_, (__int128 *)v348.__r_.__value_.__l.__size_, (__int128 **)&v347);
    v340.__begin_ = &v347;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v340);
    v340.__begin_ = &v348;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v340);
    if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v351.__r_.__value_.__l.__data_);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    v345 = v349;
    v346 = v350;
    if (v350)
    {
      v231 = (unint64_t *)&v350->__shared_owners_;
      do
        v232 = __ldxr(v231);
      while (__stxr(v232 + 1, v231));
    }
    v233 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v343, v352, SDWORD1(v352), SDWORD2(v352), SHIDWORD(v352));
    if (v230 <= 0)
    {
      v238 = v343;
    }
    else
    {
      v234 = 0;
      v235 = 4 * v230;
      do
      {
        if (v368 == 11)
        {
          v236 = v367;
        }
        else
        {
          v233 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v233);
          v236 = &CoreML::Specification::_NeuralNetworkMeanImage_default_instance_;
        }
        v237 = -*(float *)(v236[3] + v234 + 8);
        v238 = v343;
        *(float *)(*(_QWORD *)(v343 + 24) + v234) = v237;
        v234 += 4;
      }
      while (v235 != v234);
    }
    v341 = v238;
    v342 = v344;
    if (v344)
    {
      v239 = (unint64_t *)&v344->__shared_owners_;
      do
        v240 = __ldxr(v239);
      while (__stxr(v240 + 1, v239));
    }
    Espresso::generic_load_constant_kernel::set_constant_blob();
    v241 = v342;
    if (v342)
    {
      v242 = (unint64_t *)&v342->__shared_owners_;
      do
        v243 = __ldaxr(v242);
      while (__stlxr(v243 - 1, v242));
      if (!v243)
      {
        ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
        std::__shared_weak_count::__release_weak(v241);
      }
    }
    memset(&v351, 0, sizeof(v351));
    memset(&v340, 0, sizeof(v340));
    v340.__end_ = (std::vector<std::string>::pointer)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v340, (__int128 *)&v362);
    std::operator+<char>();
    v244 = v340.__end_;
    if (v340.__end_ >= v340.__end_cap_.__value_)
    {
      v246 = 0xAAAAAAAAAAAAAAABLL * (((char *)v340.__end_ - (char *)v340.__begin_) >> 3);
      v247 = v246 + 1;
      if (v246 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v340.__end_cap_.__value_ - (char *)v340.__begin_) >> 3) > v247)
        v247 = 0x5555555555555556 * (((char *)v340.__end_cap_.__value_ - (char *)v340.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v340.__end_cap_.__value_ - (char *)v340.__begin_) >> 3) >= 0x555555555555555)
        v248 = 0xAAAAAAAAAAAAAAALL;
      else
        v248 = v247;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v340.__end_cap_;
      if (v248)
        v249 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v340.__end_cap_, v248);
      else
        v249 = 0;
      v250 = v249 + v246;
      __v.__first_ = v249;
      __v.__begin_ = v250;
      __v.__end_cap_.__value_ = &v249[v248];
      v251 = v338;
      v250->__r_.__value_.__r.__words[2] = v339;
      *(_OWORD *)&v250->__r_.__value_.__l.__data_ = v251;
      v339 = 0;
      v338 = 0uLL;
      __v.__end_ = v250 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v340, &__v);
      v252 = v340.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v340.__end_ = v252;
      if (SHIBYTE(v339) < 0)
        operator delete((void *)v338);
    }
    else
    {
      v245 = v338;
      v340.__end_->__r_.__value_.__r.__words[2] = v339;
      *(_OWORD *)&v244->__r_.__value_.__l.__data_ = v245;
      v340.__end_ = v244 + 1;
    }
    v253 = (_OWORD *)v351.__r_.__value_.__l.__size_;
    if (v351.__r_.__value_.__l.__size_ >= v351.__r_.__value_.__r.__words[2])
    {
      v255 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v351, (__int128 *)&__s);
    }
    else
    {
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v351.__r_.__value_.__l.__size_, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else
      {
        v254 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
        *(_QWORD *)(v351.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
        *v253 = v254;
      }
      v255 = (std::string::size_type)v253 + 24;
    }
    v351.__r_.__value_.__l.__size_ = v255;
    __v.__end_ = (std::__split_buffer<std::string>::pointer)897988541;
    LOBYTE(__v.__end_cap_.__value_) = 0;
    *(_QWORD *)((char *)&v360 + 4) = 0;
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)1065353216;
    __v.__first_ = 0;
    std::string::basic_string[abi:ne180100]<0>(&v338, "elementwise");
    std::operator+<char>();
    memset(&v333, 0, sizeof(v333));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v333, (__int128 *)v340.__begin_, (__int128 *)v340.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v340.__end_ - (char *)v340.__begin_) >> 3));
    memset(&v332, 0, sizeof(v332));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v332, (__int128 *)v351.__r_.__value_.__l.__data_, (__int128 *)v351.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v351.__r_.__value_.__l.__size_ - v351.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v336, a3, (uint64_t)&v338, (uint64_t)v334, (uint64_t)&__v, (__int128 *)v333.__r_.__value_.__l.__data_, (__int128 *)v333.__r_.__value_.__l.__size_, (__int128 **)&v332);
    v369[0] = (void **)&v332;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v369);
    v369[0] = (void **)&v333;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v369);
    if (v335 < 0)
      operator delete(v334[0]);
    if (SHIBYTE(v339) < 0)
      operator delete((void *)v338);
    v256 = std::map<std::string,std::string>::at((uint64_t)a4, &v362);
    v334[0] = &__s;
    v257 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &__s, (__int128 **)v334);
    v258 = *(_OWORD *)v256;
    v259 = *(_OWORD *)(v256 + 16);
    *((_QWORD *)v257 + 11) = *(_QWORD *)(v256 + 32);
    *(_OWORD *)(v257 + 72) = v259;
    *(_OWORD *)(v257 + 56) = v258;
    if (v257 + 56 != (char *)v256)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v257 + 96, *(char **)(v256 + 40), *(_QWORD *)(v256 + 48), (uint64_t)(*(_QWORD *)(v256 + 48) - *(_QWORD *)(v256 + 40)) >> 2);
    v260 = v337;
    if (v337)
    {
      v261 = (unint64_t *)&v337->__shared_owners_;
      do
        v262 = __ldaxr(v261);
      while (__stlxr(v262 - 1, v261));
      if (!v262)
      {
        ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
        std::__shared_weak_count::__release_weak(v260);
      }
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v340;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    __v.__first_ = &v351;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    v263 = v344;
    if (v344)
    {
      v264 = (unint64_t *)&v344->__shared_owners_;
      do
        v265 = __ldaxr(v264);
      while (__stlxr(v265 - 1, v264));
      if (!v265)
      {
        ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
        std::__shared_weak_count::__release_weak(v263);
      }
    }
    v266 = v346;
    if (v346)
    {
      v267 = (unint64_t *)&v346->__shared_owners_;
      do
        v268 = __ldaxr(v267);
      while (__stlxr(v268 - 1, v267));
      if (!v268)
      {
        ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
        std::__shared_weak_count::__release_weak(v266);
      }
    }
    v269 = v350;
    if (v350)
    {
      v270 = (unint64_t *)&v350->__shared_owners_;
      do
        v271 = __ldaxr(v270);
      while (__stlxr(v271 - 1, v270));
      if (!v271)
      {
        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
        std::__shared_weak_count::__release_weak(v269);
      }
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v354;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    __v.__first_ = &v357;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v362.__r_.__value_.__l.__data_);
    CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v363);
    CoreML::Specification::NeuralNetworkRegressor::Clear((CoreML::Specification::NeuralNetworkRegressor *)v310);
    CoreML::Specification::NeuralNetworkRegressor::MergeFrom((CoreML::Specification::NeuralNetworkRegressor *)v310, (const CoreML::Specification::NeuralNetworkRegressor *)&__p);
    CoreML::Specification::NeuralNetworkRegressor::~NeuralNetworkRegressor((CoreML::Specification::NeuralNetworkRegressor *)&__p);
LABEL_521:
    CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v326);
    ++v191;
  }
  while (v191 < v313);
LABEL_522:
  v363[0] = a5;
  v364 = 0;
  v365 = 0;
  __p = v6;
  v321 = v5;
  v322 = v363;
  if (v311 < 1)
  {
    v96 = 0;
  }
  else
  {
    v272 = 0;
    LODWORD(v96) = 0;
    do
    {
      ++*((_DWORD *)v322 + 1);
      CoreML::Specification::NeuralNetworkLayer::NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&__v, *(const CoreML::Specification::NeuralNetworkLayer **)(v312 + 8 * v272 + 8));
      if ((LayerTranslator::layerTranslateFn((LayerTranslator *)&__p, (const std::string **)&__v.__first_) & 1) != 0)v96 = 1;
      else
        v96 = v96;
      CoreML::Specification::NeuralNetworkLayer::~NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&__v);
      ++v272;
    }
    while (v272 < v311);
  }
  CoreML::Specification::NeuralNetworkRegressor::~NeuralNetworkRegressor((CoreML::Specification::NeuralNetworkRegressor *)v310);
  return v96;
}

