@implementation HMHome

- (HMHomeAccessControl)homeAccessControlForUser:(HMUser *)user
{
  return -[HMUser homeAccessControl](user, "homeAccessControl");
}

void __95__HMHome_HMAccessory____responseHandlerForRequests_progressHandler_completionHandler_activity___block_invoke(uint64_t a1, void *a2, char a3, void *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  char v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id WeakRetained;
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  void *v58;
  _BYTE v59[128];
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v40 = a2;
  v6 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v45 = a1;
  objc_msgSend(*(id *)(a1 + 32), "begin");
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v7 = v6;
  v43 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
  if (v43)
  {
    v41 = *(_QWORD *)v52;
    v42 = v7;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v52 != v41)
          objc_enumerationMutation(v7);
        v46 = v8;
        v44 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * v8);
        objc_msgSend(v44, "request");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v12 = *(id *)(v45 + 40);
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v47, v59, 16);
        if (v13)
        {
          v14 = v13;
          v15 = *(_QWORD *)v48;
LABEL_11:
          v16 = 0;
          while (1)
          {
            if (*(_QWORD *)v48 != v15)
              objc_enumerationMutation(v12);
            v17 = *(id *)(*((_QWORD *)&v47 + 1) + 8 * v16);
            objc_opt_class();
            v18 = (objc_opt_isKindOfClass() & 1) != 0 ? v17 : 0;
            v19 = v18;

            objc_msgSend(v19, "characteristic");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "characteristic");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            v22 = objc_msgSend(v20, "isEqual:", v21);

            if ((v22 & 1) != 0)
              break;

            if (v14 == ++v16)
            {
              v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v47, v59, 16);
              if (v14)
                goto LABEL_11;
              goto LABEL_20;
            }
          }

          if (!v19)
            goto LABEL_23;
          objc_msgSend(v44, "setRequest:", v19);
          objc_msgSend(v19, "characteristic");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "service");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = *(id *)(v45 + 32);
          objc_msgSend(v24, "accessory");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "uuid");

          objc_msgSend(v23, "instanceID");
          objc_msgSend(v44, "error");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "domain");

          objc_msgSend(v44, "error");
          v28 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v28, "code");
        }
        else
        {
LABEL_20:

LABEL_23:
          objc_msgSend(v11, "characteristic");
          v17 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "service");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = (void *)MEMORY[0x1A1AC1AAC]();
          HMFGetOSLogHandle();
          v30 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "uniqueIdentifier");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v56 = v31;
            v57 = 2112;
            v58 = v32;
            _os_log_impl(&dword_19B1B0000, v30, OS_LOG_TYPE_INFO, "%{public}@Unable to match the response characteristic %@ with request", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v29);
          objc_msgSend(v23, "accessory");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "uuid");

          objc_msgSend(v17, "instanceID");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
        }
        v7 = v42;

        v8 = v46 + 1;
      }
      while (v46 + 1 != v43);
      v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
    }
    while (v43);
  }

  if (objc_msgSend(v7, "count"))
  {
    objc_msgSend(*(id *)(v45 + 32), "markWithReason:", CFSTR("Calling progress handler"));
    objc_msgSend(WeakRetained, "context");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "delegateCaller");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "callCompletion:array:", *(_QWORD *)(v45 + 48), v7);

  }
  if ((a3 & 1) == 0)
  {
    objc_msgSend(*(id *)(v45 + 32), "markWithReason:", CFSTR("Calling completion handler"));
    objc_msgSend(v7, "count");
    objc_msgSend(v40, "domain");

    objc_msgSend(v40, "code");
    objc_msgSend(WeakRetained, "context");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "delegateCaller");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "callCompletion:error:", *(_QWORD *)(v45 + 56), v40);

  }
  objc_msgSend(*(id *)(v45 + 32), "end");

}

- (HMUser)currentUser
{
  os_unfair_lock_s *p_lock;
  HMUser *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_currentUser;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (HMApplicationData)applicationData
{
  os_unfair_lock_s *p_lock;
  HMApplicationData *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_applicationData;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (OS_dispatch_queue)messageReceiveQueue
{
  void *v2;
  void *v3;

  -[HMHome context](self, "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "queue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (OS_dispatch_queue *)v3;
}

- (_HMContext)context
{
  return self->_context;
}

id __62__HMHome_Light__fetchSettingsForLightProfiles_withCompletion___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "lightProfile");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "profileUniqueIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)fetchSettingsForLightProfiles:(id)a3 withCompletion:(id)a4
{
  id v6;
  id v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  HMHome *v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  HMHome *v28;
  NSObject *v29;
  void *v30;
  id v31;
  void *v32;
  _QWORD v33[5];
  id v34;
  id v35;
  void (**v36)(_QWORD, _QWORD, _QWORD);
  const __CFString *v37;
  void *v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(Light) fetchSettingsForLightProfiles:withCompletion:]", CFSTR("completion"));
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = (void *)MEMORY[0x1A1AC1AAC]();
    v28 = self;
    HMFGetOSLogHandle();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v30;
      v41 = 2112;
      v42 = (const char *)v26;
      _os_log_impl(&dword_19B1B0000, v29, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v27);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v26, 0);
    v31 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v31);
  }
  v8 = (void (**)(_QWORD, _QWORD, _QWORD))v7;
  -[HMHome context](self, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](self, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_msgSend(v10, "initWithTarget:", v11);

    v32 = v6;
    objc_msgSend(v6, "na_map:", &__block_literal_global_16511);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = CFSTR("HMHomeMessageKeyLightProfileUUIDs");
    v38 = v13;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMHomeFetchLightProfilesSettingsMessage"), v12, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v40 = v19;
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_INFO, "%{public}@Fetching settings...", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = __62__HMHome_Light__fetchSettingsForLightProfiles_withCompletion___block_invoke_9;
    v33[3] = &unk_1E3AB4B08;
    v33[4] = v17;
    v6 = v32;
    v34 = v32;
    v20 = v9;
    v35 = v20;
    v36 = v8;
    objc_msgSend(v15, "setResponseHandler:", v33);
    objc_msgSend(v20, "messageDispatcher");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "sendMessage:", v15);

  }
  else
  {
    v22 = (void *)MEMORY[0x1A1AC1AAC]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v25;
      v41 = 2080;
      v42 = "-[HMHome(Light) fetchSettingsForLightProfiles:withCompletion:]";
      _os_log_impl(&dword_19B1B0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, void *))v8)[2](v8, 0, v12);
  }

}

- (void)fetchWalletKeyDeviceStateWithCompletion:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  _QWORD v20[5];
  id v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v24 = v8;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Fetching wallet key device state", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMHome context](v6, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](v6, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_msgSend(v10, "initWithTarget:", v11);

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMHomeWalletKeyManagerFetchDeviceStateMessage"), v12, 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __58__HMHome_Wallet__fetchWalletKeyDeviceStateWithCompletion___block_invoke;
    v20[3] = &unk_1E3AB60C8;
    v20[4] = v6;
    v14 = v9;
    v21 = v14;
    v22 = v4;
    objc_msgSend(v13, "setResponseHandler:", v20);
    objc_msgSend(v14, "messageDispatcher");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "sendMessage:", v13);

LABEL_9:
    goto LABEL_10;
  }
  v16 = (void *)MEMORY[0x1A1AC1AAC]();
  v17 = v6;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v24 = v19;
    v25 = 2080;
    v26 = "-[HMHome(Wallet) fetchWalletKeyDeviceStateWithCompletion:]";
    _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v16);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v4 + 2))(v4, 0, v12);
    goto LABEL_9;
  }
LABEL_10:

}

- (void)_registerNotificationHandlers
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;

  -[HMHome context](self, "context");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "messageDispatcher");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "registerForMessage:receiver:selector:", CFSTR("kHomeLocationUpdatedNotificationKey"), self, sel__handleHomeLocationUpdateNotification_);

  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "messageDispatcher");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "registerForMessage:receiver:selector:", CFSTR("HM.accessoryAdded"), self, sel__handleAccessoryAddedNotification_);

  -[HMHome context](self, "context");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "messageDispatcher");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "registerForMessage:receiver:selector:", CFSTR("kAddAccessoryProgressNotificationKey"), self, sel__handleAddAccessoryProgressNotification_);

  -[HMHome context](self, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "messageDispatcher");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "registerForMessage:receiver:selector:", CFSTR("kUserAddedNotificationKey"), self, sel__handleUserAddedNotification_);

  -[HMHome context](self, "context");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "messageDispatcher");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "registerForMessage:receiver:selector:", CFSTR("kUserInvitationsUpdatedNotificationKey"), self, sel__handleUserInvitationsUpdatedNotification_);

  -[HMHome context](self, "context");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "messageDispatcher");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "registerForMessage:receiver:selector:", CFSTR("HM.ae"), self, sel__handleAccessoryErrorNotification_);

  -[HMHome context](self, "context");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "messageDispatcher");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "registerForMessage:receiver:selector:", CFSTR("kMultipleCharacteristicValuesUpdatedNotificationKey"), self, sel__handleMultipleCharacteristicValuesUpdated_);

  -[HMHome context](self, "context");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "messageDispatcher");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "registerForMessage:receiver:selector:", CFSTR("HMHomeAccessorySetupCodeFailureMessage"), self, sel__handleAccessorySetupCodeFailureMessage_);

  -[HMHome context](self, "context");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "messageDispatcher");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "registerForMessage:receiver:selector:", CFSTR("HM.enabledNotifications"), self, sel__handleNotificationsEnabled_);

  -[HMHome context](self, "context");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "messageDispatcher");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "registerForMessage:receiver:selector:", CFSTR("kAccessoryInfoUpdatedNotificationKey"), self, sel__handleAccessoryInfoUpdatedNotification_);

  -[HMHome context](self, "context");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "messageDispatcher");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "registerForMessage:receiver:selector:", CFSTR("kAccessoryReprovisionedNotificationKey"), self, sel__handleAccessoryReprovisionedNotification_);

  -[HMHome context](self, "context");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "messageDispatcher");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "registerForMessage:receiver:selector:", CFSTR("kAccessoryReprovisionStateUpdateNotificationKey"), self, sel__handleAccessoryReprovisionStateUpdate_);

  -[HMHome context](self, "context");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "messageDispatcher");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "registerForMessage:receiver:selector:", CFSTR("HM.homeHubStateUpdated"), self, sel__handleHomeHubStateUpdatedNotification_);

  -[HMHome context](self, "context");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "messageDispatcher");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "registerForMessage:receiver:selector:", CFSTR("HM.nsdrUpdated"), self, sel__handleHomeNetworkRouterSupportUpdated_);

  -[HMHome context](self, "context");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "messageDispatcher");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "registerForMessage:receiver:selector:", CFSTR("HMAccessoryNetworkProtectionGroupAddedNotification"), self, sel__handleAccessoryNetworkProtectionGroupAddedNotification_);

  -[HMHome context](self, "context");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "messageDispatcher");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "registerForMessage:receiver:selector:", CFSTR("HMAccessoryNetworkProtectionGroupRemovedNotification"), self, sel__handleAccessoryNetworkProtectionGroupRemovedNotification_);

  -[HMHome context](self, "context");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "messageDispatcher");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "registerForMessage:receiver:selector:", CFSTR("HMHomeLocationStatusUpdateNotificationKey"), self, sel__handleHomeLocationStatusUpdateNotification_);

  -[HMHome context](self, "context");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "messageDispatcher");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "registerForMessage:receiver:selector:", CFSTR("HMHomeMultiUserEnabledChangeNotificationKey"), self, sel__handleMultiUserEnabledChangeNotification_);

  -[HMHome context](self, "context");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "messageDispatcher");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "registerForMessage:receiver:selector:", CFSTR("HM.accessoryConnectivityChanged"), self, sel__handleAccessoryConnectivityChangedNotification_);

  -[HMHome context](self, "context");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "messageDispatcher");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "registerForMessage:receiver:selector:", CFSTR("HMHomeDidAddWalletKeyMessage"), self, sel__handleDidAddWalletKeyMessage_);

  -[HMHome context](self, "context");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "messageDispatcher");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "registerForMessage:receiver:selector:", CFSTR("HMHomeDidRemoveWalletKeyMessage"), self, sel__handleDidRemoveWalletKeyMessage_);

  -[HMHome context](self, "context");
  v46 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "messageDispatcher");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "registerForMessage:receiver:selector:", CFSTR("HMMM.request.received"), self, sel__handleHMMMRequestReceivedMessage_);

}

- (void)startDiscoveringSymptomsForNearbyDevices
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  HMHome *v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[HMHome context](self, "context");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0D285D0], "messageWithName:messagePayload:", CFSTR("kStartDiscoveringSymptomsForNearbyDevicesRequestKey"), 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "messageDispatcher");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome uuid](self, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "sendMessage:target:", v4, v6);

  }
  else
  {
    v7 = (void *)MEMORY[0x1A1AC1AAC]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v10;
      v13 = 2080;
      v14 = "-[HMHome(HMAccessory) startDiscoveringSymptomsForNearbyDevices]";
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }

}

- (void)_retrieveLocation
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMHome *v11;
  NSObject *v12;
  void *v13;
  _QWORD v14[5];
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  -[HMHome context](self, "context");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = objc_alloc(MEMORY[0x1E0D285F8]);
    v5 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](self, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v5, "initWithTarget:", v6);
    v8 = (void *)objc_msgSend(v4, "initWithName:destination:payload:", CFSTR("kRetrieveHomeLocationRequestKey"), v7, 0);

    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __27__HMHome__retrieveLocation__block_invoke;
    v14[3] = &unk_1E3AB4808;
    v14[4] = self;
    objc_msgSend(v8, "setResponseHandler:", v14);
    objc_msgSend(v3, "messageDispatcher");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "sendMessage:", v8);

  }
  else
  {
    v10 = (void *)MEMORY[0x1A1AC1AAC]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v16 = v13;
      v17 = 2080;
      v18 = "-[HMHome _retrieveLocation]";
      _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
  }

}

- (HMAccessorySoftwareUpdateControllerV2)softwareUpdateController
{
  os_unfair_lock_s *p_lock;
  HMAccessorySoftwareUpdateControllerV2 *softwareUpdateController;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  HMAccessorySoftwareUpdateControllerV2 *v9;
  void *v10;
  HMAccessorySoftwareUpdateControllerV2 *v11;
  HMAccessorySoftwareUpdateControllerV2 *v12;
  HMAccessorySoftwareUpdateControllerV2 *v13;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  softwareUpdateController = self->_softwareUpdateController;
  if (!softwareUpdateController)
  {
    -[HMHome homeManager](self, "homeManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "softwareUpdateDocumentationManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "eventRouter");
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v7;
    if (v6 && v7)
    {
      v9 = [HMAccessorySoftwareUpdateControllerV2 alloc];
      -[HMHome context](self, "context");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = -[HMAccessorySoftwareUpdateControllerV2 initWithContext:home:subscriptionProvider:documentationManager:](v9, "initWithContext:home:subscriptionProvider:documentationManager:", v10, self, v8, v6);
      v12 = self->_softwareUpdateController;
      self->_softwareUpdateController = v11;

    }
    softwareUpdateController = self->_softwareUpdateController;
  }
  v13 = softwareUpdateController;
  os_unfair_lock_unlock(p_lock);
  return v13;
}

- (id)logIdentifier
{
  void *v2;
  void *v3;

  -[HMHome uniqueIdentifier](self, "uniqueIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "UUIDString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (NSString)description
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = objc_opt_class();
  -[HMHome uniqueIdentifier](self, "uniqueIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome uuid](self, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome name](self, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome isPrimary](self, "isPrimary");
  HMFBooleanToString();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("<%@ identifier = %@, uuid = %@, name = %@, primary = %@>"), v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSString *)v9;
}

- (NSUUID)uniqueIdentifier
{
  os_unfair_lock_s *p_lock;
  NSUUID *uniqueIdentifier;
  NSUUID *v5;
  NSUUID *v6;
  NSUUID *v7;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  uniqueIdentifier = self->_uniqueIdentifier;
  if (!uniqueIdentifier)
  {
    objc_msgSend(MEMORY[0x1E0CB3A28], "hm_deriveUUIDFromBaseUUID:", self->_uuid);
    v5 = (NSUUID *)objc_claimAutoreleasedReturnValue();
    v6 = self->_uniqueIdentifier;
    self->_uniqueIdentifier = v5;

    uniqueIdentifier = self->_uniqueIdentifier;
  }
  v7 = uniqueIdentifier;
  os_unfair_lock_unlock(p_lock);
  return v7;
}

- (NSString)name
{
  os_unfair_lock_s *p_lock;
  NSString *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_name;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (NSUUID)uuid
{
  return self->_uuid;
}

- (BOOL)isPrimary
{
  HMHome *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_primary;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (id)userActionPredictionController
{
  void *v3;
  void *v4;
  HMUserActionPredictionController *v5;
  void *v6;
  HMUserActionPredictionController *v7;
  void *v8;

  -[HMHome homeManager](self, "homeManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "predictionProvider");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v5 = [HMUserActionPredictionController alloc];
    -[HMHome uniqueIdentifier](self, "uniqueIdentifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[HMUserActionPredictionController initWithHomeIdentifier:predictionProvider:](v5, "initWithHomeIdentifier:predictionProvider:", v6, v4);

    -[HMHome context](self, "context");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMUserActionPredictionController configureWithContext:](v7, "configureWithContext:", v8);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (HMHomeManager)homeManager
{
  return (HMHomeManager *)objc_loadWeakRetained((id *)&self->_homeManager);
}

- (void)_enableNotifications:(BOOL)a3 includeAppleMediaAccessoryNotifications:(BOOL)a4 completionHandler:(id)a5
{
  _BOOL4 v5;
  _BOOL8 v6;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  HMHome *v26;
  NSObject *v27;
  void *v28;
  _QWORD v29[4];
  id v30;
  id v31;
  id v32;
  _QWORD v33[2];
  _QWORD v34[2];
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  const char *v38;
  uint64_t v39;

  v5 = a4;
  v6 = a3;
  v39 = *MEMORY[0x1E0C80C00];
  v8 = a5;
  -[HMHome context](self, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v33[0] = CFSTR("kCharacteristicNotificationEnableKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v33[1] = CFSTR("HMHomeEnableHomeAppleMediaNotificationsKey");
    v34[0] = v10;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v6 & v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v34[1] = v11;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, v33, 2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v13 = objc_alloc(MEMORY[0x1E0D285F8]);
    v14 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](self, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(v14, "initWithTarget:", v15);
    v17 = (void *)objc_msgSend(v13, "initWithName:destination:payload:", CFSTR("HM.notificationEnable"), v16, v12);

    objc_msgSend(v9, "pendingRequests");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "identifier");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = _Block_copy(v8);
    objc_msgSend(v18, "addCompletionBlock:forIdentifier:", v20, v19);

    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __89__HMHome__enableNotifications_includeAppleMediaAccessoryNotifications_completionHandler___block_invoke;
    v29[3] = &unk_1E3AB5C08;
    v30 = v18;
    v31 = v19;
    v21 = v9;
    v32 = v21;
    v22 = v19;
    v23 = v18;
    objc_msgSend(v17, "setResponseHandler:", v29);
    objc_msgSend(v21, "messageDispatcher");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "sendMessage:", v17);

  }
  else
  {
    v25 = (void *)MEMORY[0x1A1AC1AAC]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v28;
      v37 = 2080;
      v38 = "-[HMHome _enableNotifications:includeAppleMediaAccessoryNotifications:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v27, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
  }

}

- (NSDate)notificationsUpdatedTime
{
  os_unfair_lock_s *p_lock;
  NSDate *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_notificationsUpdatedTime;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (BOOL)didOnboardAudioAnalysis
{
  return self->_didOnboardAudioAnalysis;
}

- (void)__configureWithContext:(id)a3 homeManager:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  HMUser *currentUser;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _BYTE v144[128];
  _BYTE v145[128];
  _BYTE v146[128];
  _BYTE v147[128];
  _BYTE v148[128];
  _BYTE v149[128];
  _BYTE v150[128];
  _BYTE v151[128];
  _BYTE v152[128];
  _BYTE v153[128];
  uint8_t v154[128];
  uint8_t buf[4];
  void *v156;
  __int16 v157;
  HMHome *v158;
  __int16 v159;
  id v160;
  __int16 v161;
  const __CFString *v162;
  __int16 v163;
  void *v164;
  uint64_t v165;

  v165 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1A1AC1AAC]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome isLocationServicesEnabled](v9, "isLocationServicesEnabled");
    HMFBooleanToString();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v156 = v11;
    v157 = 2112;
    v158 = v9;
    v159 = 2112;
    v160 = v6;
    v161 = 2112;
    v162 = CFSTR(" location services enabled: ");
    v163 = 2112;
    v164 = v12;
    _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Configuring home: %@ with context: %@%@%@", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v8);
  -[HMHome setContext:](v9, "setContext:", v6);
  objc_msgSend(v6, "queue");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome shareWithHomeOwnerOperationQueue](v9, "shareWithHomeOwnerOperationQueue");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setUnderlyingQueue:", v13);

  -[HMHome setHomeManager:](v9, "setHomeManager:", v7);
  objc_msgSend(v7, "configuration");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "locationAuthorization");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "addObserver:selector:name:object:", v9, sel__handleLocationAuthorizationUpdatedNotification_, *MEMORY[0x1E0D27FF8], v16);

  objc_msgSend(v16, "registerObserver:", v9);
  if ((objc_msgSend(v16, "isAuthorized") & 1) == 0)
    -[HMHome setLocationAuthorization:](v9, "setLocationAuthorization:", 2);

  -[HMHome(HMRoom) roomForEntireHome](v9, "roomForEntireHome");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome context](v9, "context");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "__configureWithContext:home:", v19, v9);

  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  -[HMHome accessories](v9, "accessories");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v140, v154, 16);
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)v141;
    do
    {
      v24 = 0;
      do
      {
        if (*(_QWORD *)v141 != v23)
          objc_enumerationMutation(v20);
        objc_msgSend(*(id *)(*((_QWORD *)&v140 + 1) + 8 * v24++), "__configureWithContext:home:", v6, v9);
      }
      while (v22 != v24);
      v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v140, v154, 16);
    }
    while (v22);
  }

  v138 = 0u;
  v139 = 0u;
  v136 = 0u;
  v137 = 0u;
  -[HMHome rooms](v9, "rooms");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v136, v153, 16);
  if (v26)
  {
    v27 = v26;
    v28 = *(_QWORD *)v137;
    do
    {
      v29 = 0;
      do
      {
        if (*(_QWORD *)v137 != v28)
          objc_enumerationMutation(v25);
        v30 = *(void **)(*((_QWORD *)&v136 + 1) + 8 * v29);
        -[HMHome context](v9, "context");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "__configureWithContext:home:", v31, v9);

        ++v29;
      }
      while (v27 != v29);
      v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v136, v153, 16);
    }
    while (v27);
  }

  v134 = 0u;
  v135 = 0u;
  v132 = 0u;
  v133 = 0u;
  -[HMHome zones](v9, "zones");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v132, v152, 16);
  if (v33)
  {
    v34 = v33;
    v35 = *(_QWORD *)v133;
    do
    {
      v36 = 0;
      do
      {
        if (*(_QWORD *)v133 != v35)
          objc_enumerationMutation(v32);
        v37 = *(void **)(*((_QWORD *)&v132 + 1) + 8 * v36);
        -[HMHome context](v9, "context");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "__configureWithContext:home:", v38, v9);

        ++v36;
      }
      while (v34 != v36);
      v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v132, v152, 16);
    }
    while (v34);
  }

  v130 = 0u;
  v131 = 0u;
  v128 = 0u;
  v129 = 0u;
  -[HMHome serviceGroups](v9, "serviceGroups");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v128, v151, 16);
  if (v40)
  {
    v41 = v40;
    v42 = *(_QWORD *)v129;
    do
    {
      v43 = 0;
      do
      {
        if (*(_QWORD *)v129 != v42)
          objc_enumerationMutation(v39);
        v44 = *(void **)(*((_QWORD *)&v128 + 1) + 8 * v43);
        -[HMHome context](v9, "context");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "__configureWithContext:home:", v45, v9);

        ++v43;
      }
      while (v41 != v43);
      v41 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v128, v151, 16);
    }
    while (v41);
  }

  v126 = 0u;
  v127 = 0u;
  v124 = 0u;
  v125 = 0u;
  -[HMHome actionSets](v9, "actionSets");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v124, v150, 16);
  if (v47)
  {
    v48 = v47;
    v49 = *(_QWORD *)v125;
    do
    {
      v50 = 0;
      do
      {
        if (*(_QWORD *)v125 != v49)
          objc_enumerationMutation(v46);
        v51 = *(void **)(*((_QWORD *)&v124 + 1) + 8 * v50);
        -[HMHome context](v9, "context");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "__configureWithContext:home:", v52, v9);

        ++v50;
      }
      while (v48 != v50);
      v48 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v124, v150, 16);
    }
    while (v48);
  }

  v122 = 0u;
  v123 = 0u;
  v120 = 0u;
  v121 = 0u;
  -[HMHome triggerOwnedActionSets](v9, "triggerOwnedActionSets");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v120, v149, 16);
  if (v54)
  {
    v55 = v54;
    v56 = *(_QWORD *)v121;
    do
    {
      v57 = 0;
      do
      {
        if (*(_QWORD *)v121 != v56)
          objc_enumerationMutation(v53);
        v58 = *(void **)(*((_QWORD *)&v120 + 1) + 8 * v57);
        -[HMHome context](v9, "context");
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v58, "__configureWithContext:home:", v59, v9);

        ++v57;
      }
      while (v55 != v57);
      v55 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v120, v149, 16);
    }
    while (v55);
  }

  v118 = 0u;
  v119 = 0u;
  v116 = 0u;
  v117 = 0u;
  -[HMHome currentUsers](v9, "currentUsers");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v60, "array");
  v61 = (void *)objc_claimAutoreleasedReturnValue();

  v62 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v116, v148, 16);
  if (v62)
  {
    v63 = v62;
    v64 = *(_QWORD *)v117;
    do
    {
      v65 = 0;
      do
      {
        if (*(_QWORD *)v117 != v64)
          objc_enumerationMutation(v61);
        v66 = *(void **)(*((_QWORD *)&v116 + 1) + 8 * v65);
        -[HMHome context](v9, "context");
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v66, "__configureWithContext:home:", v67, v9);

        ++v65;
      }
      while (v63 != v65);
      v63 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v116, v148, 16);
    }
    while (v63);
  }

  currentUser = v9->_currentUser;
  -[HMHome context](v9, "context");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMUser __configureWithContext:home:](currentUser, "__configureWithContext:home:", v69, v9);

  v114 = 0u;
  v115 = 0u;
  v112 = 0u;
  v113 = 0u;
  -[HMHome triggers](v9, "triggers");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  v71 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v112, v147, 16);
  if (v71)
  {
    v72 = v71;
    v73 = *(_QWORD *)v113;
    do
    {
      v74 = 0;
      do
      {
        if (*(_QWORD *)v113 != v73)
          objc_enumerationMutation(v70);
        v75 = *(void **)(*((_QWORD *)&v112 + 1) + 8 * v74);
        -[HMHome context](v9, "context");
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v75, "__configureWithContext:home:", v76, v9);

        ++v74;
      }
      while (v72 != v74);
      v72 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v112, v147, 16);
    }
    while (v72);
  }

  v110 = 0u;
  v111 = 0u;
  v108 = 0u;
  v109 = 0u;
  -[HMHome currentResidentDevices](v9, "currentResidentDevices");
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v77, "array");
  v78 = (void *)objc_claimAutoreleasedReturnValue();

  v79 = objc_msgSend(v78, "countByEnumeratingWithState:objects:count:", &v108, v146, 16);
  if (v79)
  {
    v80 = v79;
    v81 = *(_QWORD *)v109;
    do
    {
      v82 = 0;
      do
      {
        if (*(_QWORD *)v109 != v81)
          objc_enumerationMutation(v78);
        v83 = *(void **)(*((_QWORD *)&v108 + 1) + 8 * v82);
        -[HMHome context](v9, "context");
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v83, "__configureWithContext:home:", v84, v9);

        ++v82;
      }
      while (v80 != v82);
      v80 = objc_msgSend(v78, "countByEnumeratingWithState:objects:count:", &v108, v146, 16);
    }
    while (v80);
  }

  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  -[HMHome outgoingInvitations](v9, "outgoingInvitations");
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = objc_msgSend(v85, "countByEnumeratingWithState:objects:count:", &v104, v145, 16);
  if (v86)
  {
    v87 = v86;
    v88 = *(_QWORD *)v105;
    do
    {
      v89 = 0;
      do
      {
        if (*(_QWORD *)v105 != v88)
          objc_enumerationMutation(v85);
        v90 = *(void **)(*((_QWORD *)&v104 + 1) + 8 * v89);
        -[HMHome context](v9, "context");
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v90, "__configureWithContext:home:", v91, v9);

        ++v89;
      }
      while (v87 != v89);
      v87 = objc_msgSend(v85, "countByEnumeratingWithState:objects:count:", &v104, v145, 16);
    }
    while (v87);
  }

  -[HMHome mediaSystemStageManager](v9, "mediaSystemStageManager");
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome context](v9, "context");
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v92, "configureWithHome:context:", v9, v93);

  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  -[HMHome accessoryProtectionGroups](v9, "accessoryProtectionGroups", 0);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  v95 = objc_msgSend(v94, "countByEnumeratingWithState:objects:count:", &v100, v144, 16);
  if (v95)
  {
    v96 = v95;
    v97 = *(_QWORD *)v101;
    do
    {
      v98 = 0;
      do
      {
        if (*(_QWORD *)v101 != v97)
          objc_enumerationMutation(v94);
        objc_msgSend(*(id *)(*((_QWORD *)&v100 + 1) + 8 * v98++), "_configureWithHome:", v9);
      }
      while (v96 != v98);
      v96 = objc_msgSend(v94, "countByEnumeratingWithState:objects:count:", &v100, v144, 16);
    }
    while (v96);
  }

  -[HMHome _registerNotificationHandlers](v9, "_registerNotificationHandlers");
  -[HMHome personManagerSettings](v9, "personManagerSettings");
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome configurePersonManagerWithSettings:](v9, "configurePersonManagerWithSettings:", v99);

}

- (id)residentDevices
{
  void *v2;
  void *v3;

  -[HMHome currentResidentDevices](self, "currentResidentDevices");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (HMMutableArray)currentResidentDevices
{
  return self->_currentResidentDevices;
}

- (NSArray)serviceGroups
{
  void *v2;
  void *v3;

  -[HMHome currentServiceGroups](self, "currentServiceGroups");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (HMMutableArray)currentServiceGroups
{
  return self->_currentServiceGroups;
}

- (NSArray)rooms
{
  void *v2;
  void *v3;

  -[HMHome currentRooms](self, "currentRooms");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (HMMutableArray)currentRooms
{
  return self->_currentRooms;
}

- (NSArray)actionSets
{
  void *v2;
  void *v3;

  -[HMHome currentActionSets](self, "currentActionSets");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (HMMutableArray)currentActionSets
{
  return self->_currentActionSets;
}

- (NSArray)triggers
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMHome currentTriggers](self, "currentTriggers", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if (objc_msgSend(v10, "compatibleWithApp"))
          objc_msgSend(v3, "addObject:", v10);
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v7);
  }

  v11 = (void *)objc_msgSend(v3, "copy");
  return (NSArray *)v11;
}

- (HMMutableArray)currentTriggers
{
  return self->_currentTriggers;
}

- (NSArray)users
{
  void *v2;
  void *v3;

  -[HMHome currentUsers](self, "currentUsers");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (HMMutableArray)currentUsers
{
  return self->_currentUsers;
}

- (void)setLocationAuthorization:(int64_t)a3
{
  self->_locationAuthorization = a3;
}

- (int64_t)homeLocationStatus
{
  os_unfair_lock_s *p_lock;
  int64_t homeLocationStatus;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  homeLocationStatus = self->_homeLocationStatus;
  os_unfair_lock_unlock(p_lock);
  return homeLocationStatus;
}

- (void)__updateLocation:(id)a3 locationStatus:(int64_t)a4
{
  __CFString *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  __CFString *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMHome *v26;
  NSObject *v27;
  void *v28;
  unint64_t v29;
  const __CFString *v30;
  void *v31;
  HMHome *v32;
  NSObject *v33;
  void *v34;
  const __CFString *v35;
  _QWORD v36[4];
  id v37;
  HMHome *v38;
  __CFString *v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  const __CFString *v43;
  __int16 v44;
  const __CFString *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = (__CFString *)a3;
  -[HMHome context](self, "context");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "queue");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    -[HMHome context](self, "context");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v10);

    if (-[HMHome locationAuthorization](self, "locationAuthorization") == 2)
    {
      v11 = (void *)MEMORY[0x1A1AC1AAC]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v41 = v14;
        _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_INFO, "%{public}@Treating updated location as nil because location authorization is not allowed", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v11);

      v6 = 0;
    }
    -[HMHome homeLocation](self, "homeLocation");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = HMFEqualObjects();

    if ((v16 & 1) == 0)
    {
      v17 = (void *)MEMORY[0x1A1AC1AAC]();
      v18 = self;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMHome homeLocation](v18, "homeLocation");
        v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v41 = v20;
        v42 = 2112;
        v43 = v21;
        v44 = 2112;
        v45 = v6;
        _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_INFO, "%{public}@Updating home location from %@ to %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v17);
      -[HMHome setHomeLocation:](v18, "setHomeLocation:", v6);
      -[HMHome _privateDelegate](v18, "_privateDelegate");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[HMHome context](v18, "context");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "delegateCaller");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v36[0] = MEMORY[0x1E0C809B0];
        v36[1] = 3221225472;
        v36[2] = __42__HMHome___updateLocation_locationStatus___block_invoke;
        v36[3] = &unk_1E3AB5CD0;
        v37 = v22;
        v38 = v18;
        v39 = v6;
        objc_msgSend(v24, "invokeBlock:", v36);

      }
    }
    if (-[HMHome homeLocationStatus](self, "homeLocationStatus") != a4)
    {
      v25 = (void *)MEMORY[0x1A1AC1AAC]();
      v26 = self;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = -[HMHome homeLocationStatus](v26, "homeLocationStatus");
        if (v29 > 3)
          v30 = CFSTR("HMHomeLocationAway");
        else
          v30 = off_1E3AB1B98[v29];
        if ((unint64_t)a4 > 3)
          v35 = CFSTR("HMHomeLocationAway");
        else
          v35 = off_1E3AB1B98[a4];
        *(_DWORD *)buf = 138543874;
        v41 = v28;
        v42 = 2112;
        v43 = v30;
        v44 = 2112;
        v45 = v35;
        _os_log_impl(&dword_19B1B0000, v27, OS_LOG_TYPE_INFO, "%{public}@Updating home location status from %@ to %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v25);
      -[HMHome setHomeLocationStatus:](v26, "setHomeLocationStatus:", a4);
      -[HMHome _notifyDelegateOfUpdatedHomeLocationStatus](v26, "_notifyDelegateOfUpdatedHomeLocationStatus");
    }
  }
  else
  {
    v31 = (void *)MEMORY[0x1A1AC1AAC]();
    v32 = self;
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v41 = v34;
      _os_log_impl(&dword_19B1B0000, v33, OS_LOG_TYPE_ERROR, "%{public}@Cannot update location as HMContext is invalid.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v31);
  }

}

- (int64_t)locationAuthorization
{
  return self->_locationAuthorization;
}

- (void)_handleMultipleCharacteristicValuesUpdated:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  unsigned int v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t v19;
  BOOL v20;
  void *v21;
  id v22;
  HMHome *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t i;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  void *v34;
  HMHome *v35;
  NSObject *v36;
  void *v37;
  id v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  void *j;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  unsigned int v48;
  void *v49;
  void (**v50)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v51;
  id v52;
  HMHome *v53;
  _BOOL4 v54;
  void *v55;
  uint64_t v56;
  id v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  unsigned __int8 v66;
  _BYTE v67[128];
  uint8_t v68[128];
  uint8_t buf[4];
  void *v70;
  __int16 v71;
  void *v72;
  __int16 v73;
  void *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pendingRequests");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v66 = 0;
  v7 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kMultiPartResponseKey"), &v66);
  v8 = (void *)MEMORY[0x1A1AC1AAC]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "shortDescription");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messagePayload");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v70 = v11;
    v71 = 2112;
    v72 = v12;
    v73 = 2112;
    v74 = v13;
    _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Handling multiple characteristic values updated message %@ with payload: %@", buf, 0x20u);

  }
  v53 = v9;

  objc_autoreleasePoolPop(v8);
  v51 = v6;
  v48 = v7;
  if (v7)
  {
    objc_msgSend(v4, "identifier");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "retrieveCompletionBlockForIdentifier:", v14);
    v15 = objc_claimAutoreleasedReturnValue();

    v16 = 0;
  }
  else
  {
    v17 = v66;
    objc_msgSend(v4, "identifier");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "removeCompletionBlockForIdentifier:", v18);
    v19 = objc_claimAutoreleasedReturnValue();

    v20 = v17 == 0;
    if (v17)
      v15 = v19;
    else
      v15 = 0;
    if (v20)
      v16 = v19;
    else
      v16 = 0;
  }
  v49 = (void *)v16;
  v50 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))v15;
  v54 = (v16 | v15) == 0;
  objc_msgSend(v4, "dictionaryForKey:", CFSTR("kModifiedCharacteristicsForAccessoryKey"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v22 = v21;
  v52 = v4;
  v23 = v9;
  v56 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v62, v68, 16);
  if (v56)
  {
    v24 = *(_QWORD *)v63;
    v25 = 0x1E0CB3000uLL;
    do
    {
      for (i = 0; i != v56; ++i)
      {
        if (*(_QWORD *)v63 != v24)
          objc_enumerationMutation(v22);
        v27 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * i);
        objc_msgSend(v22, "hmf_dictionaryForKey:", v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = (void *)objc_msgSend(objc_alloc(*(Class *)(v25 + 2600)), "initWithUUIDString:", v27);
        -[HMHome accessoryWithUUID:](v23, "accessoryWithUUID:", v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();

        if (v30)
        {
          objc_msgSend(v30, "_handleMultipleCharacteristicsUpdated:message:informDelegate:", v28, v4, v54);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v55, "addObjectsFromArray:", v31);

        }
        else
        {
          v32 = v24;
          v33 = v22;
          v34 = (void *)MEMORY[0x1A1AC1AAC]();
          v35 = v23;
          HMFGetOSLogHandle();
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v70 = v37;
            v71 = 2112;
            v72 = v27;
            _os_log_impl(&dword_19B1B0000, v36, OS_LOG_TYPE_DEFAULT, "%{public}@Could not find accessory for characteristic updated accessory UUID: %@", buf, 0x16u);

            v4 = v52;
          }

          objc_autoreleasePoolPop(v34);
          v23 = v53;
          v22 = v33;
          v24 = v32;
          v25 = 0x1E0CB3000;
        }

      }
      v56 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v62, v68, 16);
    }
    while (v56);
  }

  if (!v54)
  {
    v57 = v22;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v38 = v55;
    v39 = (void *)objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v58, v67, 16);
    if (v39)
    {
      v40 = 0;
      v41 = *(_QWORD *)v59;
      do
      {
        for (j = 0; j != v39; j = (char *)j + 1)
        {
          if (*(_QWORD *)v59 != v41)
            objc_enumerationMutation(v38);
          objc_msgSend(*(id *)(*((_QWORD *)&v58 + 1) + 8 * (_QWORD)j), "error");
          v43 = (void *)objc_claimAutoreleasedReturnValue();

          if (v43)
            ++v40;
        }
        v39 = (void *)objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v58, v67, 16);
      }
      while (v39);

      v44 = v48;
      if (v40)
      {
        if (v40 >= objc_msgSend(v38, "count"))
          v45 = 74;
        else
          v45 = 73;
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), v45, 0);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        if (v49)
          goto LABEL_43;
LABEL_39:
        if (v50)
          ((void (**)(_QWORD, void *, uint64_t, id))v50)[2](v50, v39, v44, v38);
        goto LABEL_44;
      }
      v39 = 0;
      if (!v49)
        goto LABEL_39;
    }
    else
    {

      v44 = v48;
      if (!v49)
        goto LABEL_39;
    }
LABEL_43:
    -[HMHome context](v23, "context");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "delegateCaller");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "callCompletion:error:array:", v49, v39, v38);

LABEL_44:
    v4 = v52;
    v22 = v57;
  }

}

- (id)accessoryWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMHome currentAccessories](self, "currentAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstItemWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (NSArray)accessories
{
  void *v2;
  void *v3;

  -[HMHome currentAccessories](self, "currentAccessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (HMMutableArray)currentAccessories
{
  return self->_currentAccessories;
}

- (NSArray)accessoryProtectionGroups
{
  void *v2;
  void *v3;

  -[HMHome currentAccessoryProtectionGroups](self, "currentAccessoryProtectionGroups");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (NSArray)zones
{
  void *v2;
  void *v3;

  -[HMHome currentZones](self, "currentZones");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (id)location
{
  void *v2;
  void *v3;

  -[HMHome homeLocation](self, "homeLocation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  return v3;
}

- (CLLocation)homeLocation
{
  os_unfair_lock_s *p_lock;
  CLLocation *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_homeLocation;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (NSArray)triggerOwnedActionSets
{
  void *v2;
  void *v3;

  -[HMHome currentTriggerOwnedActionSets](self, "currentTriggerOwnedActionSets");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (NSOperationQueue)shareWithHomeOwnerOperationQueue
{
  return self->_shareWithHomeOwnerOperationQueue;
}

- (void)setPrimary:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_primary = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)setHomeManager:(id)a3
{
  objc_storeWeak((id *)&self->_homeManager, a3);
}

- (void)setContext:(id)a3
{
  objc_storeStrong((id *)&self->_context, a3);
}

- (HMHomePersonManagerSettings)personManagerSettings
{
  os_unfair_lock_s *p_lock;
  HMHomePersonManagerSettings *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_personManagerSettings;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (BOOL)isLocationServicesEnabled
{
  return self->_locationServicesEnabled;
}

- (void)handleRuntimeStateUpdate:(id)a3 reason:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  _QWORD block[5];
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __42__HMHome_handleRuntimeStateUpdate_reason___block_invoke;
    block[3] = &unk_1E3AB5CD0;
    block[4] = self;
    v16 = v6;
    v17 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v19 = v14;
      v20 = 2080;
      v21 = "-[HMHome handleRuntimeStateUpdate:reason:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
  }

}

- (HMMutableArray)currentZones
{
  return self->_currentZones;
}

- (HMMutableArray)currentTriggerOwnedActionSets
{
  return self->_currentTriggerOwnedActionSets;
}

- (HMMutableArray)currentAccessoryProtectionGroups
{
  return self->_currentAccessoryProtectionGroups;
}

+ (id)passSerialNumberWithHomeUUID:(id)a3 userUUID:(id)a4
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v5 = (void *)MEMORY[0x1E0CB3A28];
  v6 = a3;
  objc_msgSend(a4, "UUIDString");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "dataUsingEncoding:", 4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_UUIDWithNamespace:data:", v6, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = (void *)MEMORY[0x1E0CB3A28];
  objc_msgSend(CFSTR("F8ADC5C9-15AC-424D-AD82-6D43424B7461"), "dataUsingEncoding:", 4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "hmf_UUIDWithNamespace:data:", v9, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "UUIDString");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

- (void)_handleRuntimeStateUpdate:(id)a3 reason:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "hmf_dictionaryForKey:", CFSTR("kAccessoriesListKey"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v7;
  objc_msgSend(CFSTR("Home-"), "stringByAppendingString:", v7);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = v8;
  __handleAccessoryRuntimeStateUpdate(self, v8, v20);
  v23 = v6;
  objc_msgSend(v6, "hmf_dictionaryForKey:", CFSTR("residentDevicesList"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome residentDevices](self, "residentDevices");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  objc_msgSend(v9, "allKeys");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v25;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v25 != v14)
          objc_enumerationMutation(v11);
        v16 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * v15);
        v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v16, v20, v21);
        objc_msgSend(v10, "hmf_firstObjectWithUUID:", v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "hmf_dictionaryForKey:", v16);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "handleRuntimeStateUpdate:", v19);

        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v13);
  }

}

- (void)_performBatchRequest:(id)a3 activity:(id)a4
{
  id v7;
  id v8;
  void (**v9)(_QWORD, _QWORD);
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  __CFString *v15;
  uint64_t v16;
  id v17;
  void *v18;
  char *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  HMCharacteristicResponse *v34;
  void *v35;
  HMHome *v36;
  NSObject *v37;
  void *v38;
  NSObject *v39;
  const char *v40;
  int v41;
  void (**v42)(_QWORD, _QWORD);
  void *v43;
  __CFString *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  __CFString *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  id v74;
  id v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  __CFString *v82;
  void *v83;
  id v84;
  id v85;
  void *v86;
  void *v87;
  HMHome *v88;
  NSObject *v89;
  id v90;
  void *v91;
  void *v92;
  void *v93;
  HMHome *v94;
  NSObject *v95;
  void *v96;
  void (**v97)(_QWORD, _QWORD);
  void *v98;
  uint64_t v99;
  SEL v100;
  void *v101;
  void *v102;
  HMHome *v103;
  void *v104;
  void *v105;
  void *v106;
  void (**v107)(_QWORD, _QWORD);
  id obj;
  uint64_t v109;
  uint64_t v110;
  const __CFString *v111;
  void *v112;
  void *v113;
  id v114;
  _QWORD v115[4];
  id v116;
  id v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _QWORD v122[3];
  _QWORD v123[3];
  uint8_t v124[128];
  uint8_t buf[4];
  void *v126;
  __int16 v127;
  const char *v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  -[HMHome context](self, "context");
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  if (v104)
  {
    v100 = a2;
    v103 = self;
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v9 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "requests");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "count");

    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "clientContext");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "metricIdentifier");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v101 = v8;
    objc_msgSend(v8, "setClientMetricIdentifier:", v14);

    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    objc_msgSend(v7, "requests");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v107 = v9;
    v109 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v118, v124, 16);
    v15 = 0;
    if (!v109)
      goto LABEL_56;
    v110 = *(_QWORD *)v119;
    v105 = v12;
    v102 = v7;
LABEL_4:
    v16 = 0;
    while (1)
    {
      if (*(_QWORD *)v119 != v110)
        objc_enumerationMutation(obj);
      v17 = *(id *)(*((_QWORD *)&v118 + 1) + 8 * v16);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v18 = v17;
      else
        v18 = 0;
      v19 = v18;

      if (v19)
      {
        v93 = (void *)MEMORY[0x1A1AC1AAC]();
        v94 = v103;
        HMFGetOSLogHandle();
        v95 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v96 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v126 = v96;
          v127 = 2112;
          v128 = v19;
          _os_log_impl(&dword_19B1B0000, v95, OS_LOG_TYPE_ERROR, "%{public}@Attribute requests not yet supported %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v93);
        v7 = v102;
        objc_msgSend(v102, "completionHandler");
        v97 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *))v97)[2](v97, v98);

        goto LABEL_69;
      }
      v20 = v17;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v21 = v20;
      else
        v21 = 0;
      v19 = v21;

      if (v19)
      {
        v7 = v102;
        -[HMHome __handleExecuteRequest:activity:batchRequest:](v103, "__handleExecuteRequest:activity:batchRequest:", v19, v101, v102);
        goto LABEL_70;
      }
      v22 = v20;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v23 = v22;
      else
        v23 = 0;
      v24 = v23;

      v25 = v24;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v26 = v25;
      else
        v26 = 0;
      v27 = v26;

      v28 = v25;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v29 = v28;
      else
        v29 = 0;
      v114 = v29;

      objc_msgSend(v28, "characteristic");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "service");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "accessoryUUID");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = v32;
      v113 = v27;
      if (!v32)
      {
        v34 = -[HMCharacteristicResponse initWithRequest:value:error:]([HMCharacteristicResponse alloc], "initWithRequest:value:error:", v28, 0, v106);
        objc_msgSend(v12, "addObject:", v34);
        v41 = 5;
        goto LABEL_52;
      }
      objc_msgSend(v32, "UUIDString");
      v34 = (HMCharacteristicResponse *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "hmf_mutableDictionaryForKey:", v34);
      v112 = (void *)objc_claimAutoreleasedReturnValue();
      if (v112)
      {
        if (v27)
          goto LABEL_27;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "setObject:forKey:");
        if (v27)
        {
LABEL_27:
          if (v15)
          {
            v111 = v15;
            if ((-[__CFString isEqual:](v15, "isEqual:", CFSTR("kMultipleCharacteristicReadRequestKey")) & 1) == 0)
            {
              v35 = (void *)MEMORY[0x1A1AC1AAC]();
              v36 = v103;
              HMFGetOSLogHandle();
              v37 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
              {
                HMFGetLogIdentifier();
                v38 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v126 = v38;
                v127 = 2112;
                v128 = (const char *)v111;
                v39 = v37;
                v40 = "%{public}@Batch request does not support combining read requests with other request types - %@";
                goto LABEL_38;
              }
LABEL_39:

              objc_autoreleasePoolPop(v35);
              objc_msgSend(v102, "completionHandler");
              v42 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              ((void (**)(_QWORD, void *))v42)[2](v42, v43);
              v41 = 1;
              goto LABEL_50;
            }
          }
          else
          {
            v44 = CFSTR("kMultipleCharacteristicReadRequestKey");
            v111 = CFSTR("kMultipleCharacteristicReadRequestKey");
          }
          objc_msgSend(v31, "instanceID");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "stringValue");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v112, "hmf_mutableArrayForKey:", v46);
          v42 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

          if (!v42)
          {
            objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v42 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "instanceID");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v47, "stringValue");
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v112, "setObject:forKey:", v42, v48);

          }
          objc_msgSend(v30, "instanceID");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v42, "addObject:", v43);
          goto LABEL_49;
        }
      }
      if (v114)
      {
        if (v15)
        {
          v111 = v15;
          if ((-[__CFString isEqual:](v15, "isEqual:", CFSTR("kMultipleCharacteristicWriteRequestKey")) & 1) == 0)
          {
            v35 = (void *)MEMORY[0x1A1AC1AAC]();
            v36 = v103;
            HMFGetOSLogHandle();
            v37 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v126 = v38;
              v127 = 2112;
              v128 = (const char *)v111;
              v39 = v37;
              v40 = "%{public}@Batch request does not support combining write requests with other request types - %@";
LABEL_38:
              _os_log_impl(&dword_19B1B0000, v39, OS_LOG_TYPE_ERROR, v40, buf, 0x16u);

              v9 = v107;
            }
            goto LABEL_39;
          }
        }
        else
        {
          v49 = CFSTR("kMultipleCharacteristicWriteRequestKey");
          v111 = CFSTR("kMultipleCharacteristicWriteRequestKey");
        }
        objc_msgSend(v31, "instanceID");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "stringValue");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v112, "hmf_mutableDictionaryForKey:", v51);
        v42 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

        if (!v42)
        {
          objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          v42 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "instanceID");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "stringValue");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v112, "setObject:forKey:", v42, v53);

        }
        objc_msgSend(v114, "value");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "instanceID");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "stringValue");
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "setObject:forKey:", v43, v55);

LABEL_49:
        v41 = 0;
        v9 = v107;
LABEL_50:

        v12 = v105;
        v15 = (__CFString *)v111;
        goto LABEL_51;
      }
      v41 = 0;
LABEL_51:

LABEL_52:
      if (v41 != 5 && v41)
      {
        v7 = v102;
        goto LABEL_71;
      }
      if (v109 == ++v16)
      {
        v7 = v102;
        v109 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v118, v124, 16);
        if (v109)
          goto LABEL_4;
LABEL_56:

        if (objc_msgSend(v12, "count"))
        {
          objc_msgSend(v104, "delegateCaller");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "progressHandler");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v56, "callCompletion:array:", v57, v12);

        }
        if (objc_msgSend(v9, "count"))
        {
          v58 = objc_alloc(MEMORY[0x1E0D28540]);
          v59 = (void *)MEMORY[0x1E0CB3940];
          MEMORY[0x1A1AC1500](v103, v100);
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v59, "stringWithFormat:", CFSTR("%@, %s:%ld"), v60, "/Library/Caches/com.apple.xbs/Sources/HomeKit/Sources/HomeKit/HMHome.m", 7960);
          v61 = v7;
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          v63 = (void *)objc_msgSend(v58, "initWithName:", v62);

          objc_msgSend(v61, "requests");
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v64, "count");

          objc_msgSend(v61, "requests");
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v61, "progressHandler");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v61, "completionHandler");
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMHome __responseHandlerForRequests:progressHandler:completionHandler:activity:](v103, "__responseHandlerForRequests:progressHandler:completionHandler:activity:", v65, v66, v67, v63);
          v68 = (void *)objc_claimAutoreleasedReturnValue();

          v123[0] = v107;
          v122[0] = CFSTR("kAccessoriesListKey");
          v122[1] = CFSTR("kHomeUUID");
          -[HMHome uuid](v103, "uuid");
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "UUIDString");
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          v122[2] = CFSTR("kMultiPartResponseKey");
          v123[1] = v70;
          v123[2] = MEMORY[0x1E0C9AAB0];
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v123, v122, 3);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = (char *)objc_msgSend(v71, "mutableCopy");

          objc_msgSend(v61, "reportContext");
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          _dictionaryRepresentationForReportContext(v72);
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "addEntriesFromDictionary:", v73);

          v74 = objc_alloc(MEMORY[0x1E0D285F8]);
          v75 = objc_alloc(MEMORY[0x1E0D285D8]);
          -[HMHome uuid](v103, "uuid");
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          v77 = (void *)objc_msgSend(v75, "initWithTarget:", v76);
          v78 = (void *)objc_msgSend(v74, "initWithName:destination:payload:", v15, v77, v19);

          objc_msgSend(v78, "setActivity:", v63);
          objc_msgSend(v104, "pendingRequests");
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v78, "identifier");
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          obj = v68;
          v81 = _Block_copy(v68);
          v82 = v15;
          v83 = v81;
          objc_msgSend(v79, "addCompletionBlock:forIdentifier:", v81, v80);

          v115[0] = MEMORY[0x1E0C809B0];
          v115[1] = 3221225472;
          v115[2] = __53__HMHome_HMAccessory___performBatchRequest_activity___block_invoke;
          v115[3] = &unk_1E3AB6200;
          v116 = v79;
          v117 = v80;
          v84 = v80;
          v85 = v79;
          objc_msgSend(v78, "setResponseHandler:", v115);
          objc_msgSend(v104, "messageDispatcher");
          v86 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v86, "sendMessage:", v78);

          v15 = v82;
          objc_msgSend(v63, "end");

          v7 = v61;
          v9 = v107;

          v101 = v63;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
          v99 = objc_claimAutoreleasedReturnValue();
          objc_msgSend(v104, "delegateCaller");
          v19 = (char *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "completionHandler");
          v97 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          obj = (id)v99;
          objc_msgSend(v19, "callCompletion:error:", v97, v99);
LABEL_69:

        }
LABEL_70:

LABEL_71:
        v8 = v101;
LABEL_72:

        goto LABEL_73;
      }
    }
  }
  v87 = (void *)MEMORY[0x1A1AC1AAC]();
  v88 = self;
  HMFGetOSLogHandle();
  v89 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v90 = v7;
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v126 = v91;
    v127 = 2080;
    v128 = "-[HMHome(HMAccessory) _performBatchRequest:activity:]";
    _os_log_impl(&dword_19B1B0000, v89, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    v7 = v90;
  }

  objc_autoreleasePoolPop(v87);
  objc_msgSend(v7, "completionHandler");
  v92 = (void *)objc_claimAutoreleasedReturnValue();

  if (v92)
  {
    objc_msgSend(v7, "completionHandler");
    v9 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v9)[2](v9, v12);
    goto LABEL_72;
  }
LABEL_73:

}

- (void)performBatchCharacteristicRequest:(id)a3
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void (**v21)(_QWORD, _QWORD);
  void *v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = objc_alloc(MEMORY[0x1E0D28540]);
  v7 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1A1AC1500](self, a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringWithFormat:", CFSTR("%@, %s:%ld"), v8, "/Library/Caches/com.apple.xbs/Sources/HomeKit/Sources/HomeKit/HMHome.m", 7724);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v6, "initWithName:", v9);

  objc_msgSend(v5, "completionHandler");
  v11 = objc_claimAutoreleasedReturnValue();
  if (!v11
    || (v12 = (void *)v11,
        objc_msgSend(v5, "progressHandler"),
        v13 = (void *)objc_claimAutoreleasedReturnValue(),
        v13,
        v12,
        !v13))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("You must provide a completion handler"), 0);
    v23 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v23);
  }
  -[HMHome context](self, "context");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    objc_msgSend(v10, "begin");
    objc_msgSend(v5, "batchRequest");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome _performBatchRequest:activity:](self, "_performBatchRequest:activity:", v15, v10);

    objc_msgSend(v10, "end");
  }
  else
  {
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v19;
      v26 = 2080;
      v27 = "-[HMHome(HMAccessory) performBatchCharacteristicRequest:]";
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(v5, "completionHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
    {
      objc_msgSend(v5, "completionHandler");
      v21 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *))v21)[2](v21, v22);

    }
  }

}

- (id)__responseHandlerForRequests:(id)a3 progressHandler:(id)a4 completionHandler:(id)a5 activity:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id location;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  objc_initWeak(&location, self);
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __95__HMHome_HMAccessory____responseHandlerForRequests_progressHandler_completionHandler_activity___block_invoke;
  v20[3] = &unk_1E3AB18B8;
  objc_copyWeak(&v25, &location);
  v21 = v13;
  v22 = v10;
  v23 = v11;
  v24 = v12;
  v14 = v12;
  v15 = v11;
  v16 = v10;
  v17 = v13;
  v18 = _Block_copy(v20);

  objc_destroyWeak(&v25);
  objc_destroyWeak(&location);
  return v18;
}

+ (id)logCategory
{
  if (logCategory__hmf_once_t363 != -1)
    dispatch_once(&logCategory__hmf_once_t363, &__block_literal_global_873);
  return (id)logCategory__hmf_once_v364;
}

- (void)postConfigure
{
  void *v3;
  HMHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t v17[128];
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1A1AC1AAC](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v19 = v6;
    _os_log_impl(&dword_19B1B0000, v5, OS_LOG_TYPE_INFO, "%{public}@Post-configuring home", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMHome accessories](v4, "accessories", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v11++), "postConfigure");
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v9);
  }

  -[HMHome mediaSystemStageManager](v4, "mediaSystemStageManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "postConfigure");

}

- (id)mediaSystems
{
  void *v2;
  void *v3;

  -[HMHome mediaSystemStageManager](self, "mediaSystemStageManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "mediaSystems");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (HMMediaSystemStageManager)mediaSystemStageManager
{
  return (HMMediaSystemStageManager *)objc_getProperty(self, a2, 360, 1);
}

- (HMHome)initWithCoder:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  HMHome *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  HMHome *v31;
  NSObject *v32;
  void *v33;
  HMHome *v34;
  HMHome *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t i;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t j;
  void *v76;
  _BOOL4 ownerUser;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  HMHome *v83;
  NSObject *v84;
  void *v85;
  HMHomeAccessControl *v86;
  uint64_t v87;
  void *v88;
  HMHome *v89;
  NSObject *v90;
  void *v91;
  void *v92;
  HMUser *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  HMUser *currentUser;
  void *v101;
  HMHome *v102;
  NSObject *v103;
  void *v104;
  HMUser *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  HMRoom *roomForEntireHome;
  uint64_t v113;
  CLLocation *homeLocation;
  HMMutableArray *currentOutgoingInvitations;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t k;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  uint64_t v130;
  NSNumber *matterFabricID;
  HMApplicationData *v132;
  HMApplicationData *applicationData;
  void *v134;
  NSDate *v135;
  NSDate *notificationsUpdatedTime;
  uint64_t v137;
  NSString *mediaPassword;
  unint64_t v139;
  uint64_t v140;
  void *v141;
  void *v142;
  id v143;
  uint64_t v144;
  void *v145;
  void *v146;
  id v147;
  uint64_t v148;
  void *v149;
  unint64_t v150;
  uint64_t v151;
  NSSet *supportedFeatures;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  HMMutableArray *currentAccessoryProtectionGroups;
  void *v158;
  uint64_t v159;
  HMFVersion *supportedSiriEndPointVersion;
  uint64_t v161;
  NSString *threadNetworkID;
  void *v163;
  void *v164;
  HMHomePersonManagerSettings *v165;
  HMHomePersonManagerSettings *personManagerSettings;
  void *v167;
  uint64_t v168;
  NSTimeZone *timeZone;
  uint64_t v170;
  NSNumber *numberOfCameras;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  HMHome *v178;
  NSObject *v179;
  void *v180;
  void *v181;
  void *v182;
  uint64_t v183;
  HMResidentDevice *userSelectedPreferredResident;
  void *v185;
  void *v186;
  void *v187;
  uint64_t v188;
  NSArray *autoSelectedPreferredResidents;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  HMHome *v202;
  id v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  id v208;
  id obj;
  void *v210;
  void *v211;
  HMHome *v212;
  _QWORD v213[4];
  HMHome *v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  _QWORD v227[2];
  _QWORD v228[2];
  _BYTE v229[128];
  _QWORD v230[2];
  _QWORD v231[2];
  _BYTE v232[128];
  _QWORD v233[2];
  _BYTE v234[128];
  _QWORD v235[3];
  _QWORD v236[2];
  _QWORD v237[2];
  _QWORD v238[3];
  _QWORD v239[2];
  _QWORD v240[2];
  uint8_t buf[4];
  void *v242;
  __int16 v243;
  unint64_t v244;
  __int16 v245;
  void *v246;
  _QWORD v247[2];
  _QWORD v248[5];

  v248[2] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "hm_decodeAndCacheStringForKey:", CFSTR("homeName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "hm_decodeAndCacheUUIDFromStringForKey:", CFSTR("homeUUID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0C99E60];
  v248[0] = objc_opt_class();
  v248[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v248, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setWithArray:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v9, kMediaSystemsCodingKey);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  v12 = (void *)MEMORY[0x1E0C9AA60];
  if (v10)
    v12 = (void *)v10;
  v13 = v12;

  if (v6)
  {
    v14 = -[HMHome initWithName:uuid:mediaSystems:](self, "initWithName:uuid:mediaSystems:", v5, v6, v13);
    if (!v14)
    {
LABEL_91:
      v31 = v14;
      v34 = v31;
      goto LABEL_92;
    }
    v203 = v13;
    v205 = v5;
    v15 = (void *)MEMORY[0x1E0C99E60];
    v247[0] = objc_opt_class();
    v247[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v247, 2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setWithArray:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v17, CFSTR("accessories"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = (void *)MEMORY[0x1A1AC1AAC]();
    v202 = v14;
    v20 = v14;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v18, "count"));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v242 = v22;
      v243 = 2112;
      v244 = (unint64_t)v23;
      v245 = 2112;
      v246 = v18;
      _os_log_impl(&dword_19B1B0000, v21, OS_LOG_TYPE_DEBUG, "%{public}@decoded accessories: %@, %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v19);
    v24 = (void *)MEMORY[0x1E0C99E60];
    v240[0] = objc_opt_class();
    v240[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v240, 2);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "setWithArray:", v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v26, CFSTR("accessories.airplay"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    v212 = v20;
    v20->_homeLocationStatus = objc_msgSend(v4, "decodeIntegerForKey:", CFSTR("HMHomeLocationStatusValueCodingKey"));
    v200 = v27;
    if (objc_msgSend(v27, "count"))
    {
      objc_msgSend(v18, "arrayByAddingObjectsFromArray:", v27);
      v28 = objc_claimAutoreleasedReturnValue();

      v29 = (void *)v28;
    }
    else
    {
      v29 = v18;
    }
    v35 = v20;
    v201 = v29;
    -[HMMutableArray setArray:](v20->_currentAccessories, "setArray:");
    v36 = (void *)MEMORY[0x1E0C99E60];
    v239[0] = objc_opt_class();
    v239[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v239, 2);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "setWithArray:", v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v38, CFSTR("rooms"));
    v39 = objc_claimAutoreleasedReturnValue();

    v199 = (void *)v39;
    -[HMMutableArray setArray:](v20->_currentRooms, "setArray:", v39);
    v40 = (void *)MEMORY[0x1E0C99E60];
    v238[0] = objc_opt_class();
    v238[1] = objc_opt_class();
    v238[2] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v238, 3);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "setWithArray:", v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v42, CFSTR("zones"));
    v43 = objc_claimAutoreleasedReturnValue();

    v198 = (void *)v43;
    -[HMMutableArray setArray:](v20->_currentZones, "setArray:", v43);
    v44 = (void *)MEMORY[0x1E0C99E60];
    v237[0] = objc_opt_class();
    v237[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v237, 2);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "setWithArray:", v45);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v46, CFSTR("serviceGroups"));
    v47 = objc_claimAutoreleasedReturnValue();

    v197 = (void *)v47;
    -[HMMutableArray setArray:](v20->_currentServiceGroups, "setArray:", v47);
    v48 = (void *)MEMORY[0x1E0C99E60];
    v236[0] = objc_opt_class();
    v236[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v236, 2);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "setWithArray:", v49);
    v50 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v50, CFSTR("actionSets"));
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMutableArray setArray:](v20->_currentActionSets, "setArray:", v51);
    v20->_homeHubState = objc_msgSend(v4, "decodeIntegerForKey:", CFSTR("HM.homeHubState"));
    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v50, CFSTR("builtinActionSets"));
    v52 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMMutableArray addObjectsFromArray:](v20->_currentActionSets, "addObjectsFromArray:", v52);
    v196 = (void *)v50;
    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v50, CFSTR("HM.triggerOwnedActionSets"));
    v53 = objc_claimAutoreleasedReturnValue();

    v195 = (void *)v53;
    -[HMMutableArray setArray:](v20->_currentTriggerOwnedActionSets, "setArray:", v53);
    v54 = (void *)MEMORY[0x1E0C99E60];
    v235[0] = objc_opt_class();
    v235[1] = objc_opt_class();
    v235[2] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v235, 3);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "setWithArray:", v55);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v56, CFSTR("triggers"));
    v57 = (void *)objc_claimAutoreleasedReturnValue();

    v225 = 0u;
    v226 = 0u;
    v223 = 0u;
    v224 = 0u;
    v58 = v57;
    v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v223, v234, 16);
    if (v59)
    {
      v60 = v59;
      v61 = *(_QWORD *)v224;
      do
      {
        for (i = 0; i != v60; ++i)
        {
          if (*(_QWORD *)v224 != v61)
            objc_enumerationMutation(v58);
          v63 = *(void **)(*((_QWORD *)&v223 + 1) + 8 * i);
          if (objc_msgSend(v63, "compatibleWithApp"))
            -[HMMutableArray addObject:](v212->_currentTriggers, "addObject:", v63);
        }
        v60 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v223, v234, 16);
      }
      while (v60);
    }
    v208 = v58;

    v204 = v6;
    if (objc_msgSend(v4, "containsValueForKey:", CFSTR("HM.userAccessAllowed")))
      v64 = objc_msgSend(v4, "decodeBoolForKey:", CFSTR("HM.userAccessAllowed"));
    else
      v64 = 1;
    v212->_ownerUser = objc_msgSend(v4, "decodeBoolForKey:", CFSTR("HM.isOwnerUser"));
    v212->_adminUser = objc_msgSend(v4, "decodeBoolForKey:", CFSTR("isAdminUser"));
    v212->_supportsResidentActionSetStateEvaluation = objc_msgSend(v4, "decodeBoolForKey:", CFSTR("HMHomeSupportsResidentActionSetStateEvaluationCodingKey"));
    v65 = (void *)MEMORY[0x1E0C99DE8];
    v66 = (void *)MEMORY[0x1E0C99E60];
    v233[0] = objc_opt_class();
    v233[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v233, 2);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "setWithArray:", v67);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v68, CFSTR("users"));
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v65, "arrayWithArray:", v69);
    v70 = (void *)objc_claimAutoreleasedReturnValue();

    v221 = 0u;
    v222 = 0u;
    v219 = 0u;
    v220 = 0u;
    v71 = v70;
    v72 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v219, v232, 16);
    obj = v71;
    if (v72)
    {
      v73 = v72;
      v74 = *(_QWORD *)v220;
      while (2)
      {
        for (j = 0; j != v73; ++j)
        {
          if (*(_QWORD *)v220 != v74)
            objc_enumerationMutation(obj);
          v76 = *(void **)(*((_QWORD *)&v219 + 1) + 8 * j);
          if (objc_msgSend(v76, "isCurrentUser"))
          {
            objc_storeStrong((id *)&v212->_currentUser, v76);
            v71 = obj;
            goto LABEL_35;
          }
        }
        v71 = obj;
        v73 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v219, v232, 16);
        if (v73)
          continue;
        break;
      }
    }
LABEL_35:

    if (v212->_currentUser)
    {
      objc_msgSend(v71, "removeObject:");
    }
    else
    {
      ownerUser = v212->_ownerUser;
      LOBYTE(v78) = v212->_ownerUser;
      v79 = 1;
      if (v212->_ownerUser)
        v80 = 2;
      else
        v80 = 1;
      +[HMUserCameraAccess accessWithValue:](HMUserCameraAccess, "accessWithValue:", v80);
      v210 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v4, "containsValueForKey:", CFSTR("HMHomeAccessControlOverrideCodingKey")))
      {
        v81 = objc_msgSend(v4, "decodeIntegerForKey:", CFSTR("HMHomeAccessControlOverrideCodingKey"));
        v82 = (void *)MEMORY[0x1A1AC1AAC]();
        v83 = v212;
        HMFGetOSLogHandle();
        v84 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v85 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v242 = v85;
          v243 = 2048;
          v244 = v81;
          _os_log_impl(&dword_19B1B0000, v84, OS_LOG_TYPE_INFO, "%{public}@Overriding Home Access Control for current user to 0x%08lx", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v82);
        v212->_ownerUser = (v81 & 4) != 0;
        v212->_adminUser = (v81 & 2) != 0;
        v79 = (v81 >> 3) & 1;
        v78 = (v81 >> 4) & 1;
        v64 = v81 & 1;
      }
      LOBYTE(v192) = 0;
      LOBYTE(v191) = v78;
      v86 = -[HMHomeAccessControl initWithUser:allowAccess:owner:administratorPrivilege:remoteAccess:presenceAuthStatus:presenceComputeStatus:announceAccess:camerasAccess:audioAnalysisUserDropInAccessLevel:restrictedGuest:restrictedGuestAccessSettings:]([HMHomeAccessControl alloc], "initWithUser:allowAccess:owner:administratorPrivilege:remoteAccess:presenceAuthStatus:presenceComputeStatus:announceAccess:camerasAccess:audioAnalysisUserDropInAccessLevel:restrictedGuest:restrictedGuestAccessSettings:", 0, v64, ownerUser, v212->_adminUser, v79, 0, 0, v191, v210, 0, v192, 0);
      if ((v64 & 1) == 0)
      {
        if (objc_msgSend(v4, "containsValueForKey:", CFSTR("HMHomeAccessNotAllowedReasonCodeCodingKey")))
          v87 = objc_msgSend(v4, "decodeIntegerForKey:", CFSTR("HMHomeAccessNotAllowedReasonCodeCodingKey"));
        else
          v87 = 1;
        v88 = (void *)MEMORY[0x1A1AC1AAC]();
        v89 = v212;
        HMFGetOSLogHandle();
        v90 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v91 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v87);
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v242 = v91;
          v243 = 2112;
          v244 = (unint64_t)v92;
          _os_log_impl(&dword_19B1B0000, v90, OS_LOG_TYPE_INFO, "%{public}@Access to the home is not allowed due to : %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v88);
        -[HMHomeAccessControl setAccessNotAllowedReasonCode:](v86, "setAccessNotAllowedReasonCode:", v87);
        v35 = v212;
      }
      v93 = [HMUser alloc];
      +[HMLocalization sharedManager](HMLocalization, "sharedManager");
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v94, "getLocalizedString:", CFSTR("CURRENT_USER"));
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      v96 = (void *)MEMORY[0x1E0CB3A28];
      -[HMHome uniqueIdentifier](v35, "uniqueIdentifier");
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v96, "hm_deriveUUIDFromBaseUUID:", v97);
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      v99 = -[HMUser initWithUserID:name:uuid:home:homeAccessControl:](v93, "initWithUserID:name:uuid:home:homeAccessControl:", 0, v95, v98, v35, v86);
      currentUser = v35->_currentUser;
      v35->_currentUser = (HMUser *)v99;

      v101 = (void *)MEMORY[0x1A1AC1AAC]();
      v102 = v35;
      HMFGetOSLogHandle();
      v103 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        v105 = v35->_currentUser;
        -[HMUser uuid](v105, "uuid");
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v242 = v104;
        v243 = 2112;
        v244 = (unint64_t)v105;
        v245 = 2112;
        v246 = v106;
        _os_log_impl(&dword_19B1B0000, v103, OS_LOG_TYPE_INFO, "%{public}@Created a random user in framework: %@ / %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v101);
      -[HMUser setCurrentUser:](v35->_currentUser, "setCurrentUser:", 1);

      v71 = obj;
    }
    -[HMMutableArray setArray:](v35->_currentUsers, "setArray:", v71);
    v107 = (void *)MEMORY[0x1E0C99E60];
    v231[0] = objc_opt_class();
    v231[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v231, 2);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v107, "setWithArray:", v108);
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v109, CFSTR("residentDevices"));
    v110 = objc_claimAutoreleasedReturnValue();

    v207 = (void *)v110;
    -[HMMutableArray setArray:](v35->_currentResidentDevices, "setArray:", v110);
    objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("roomForEntireHome"));
    v111 = objc_claimAutoreleasedReturnValue();
    roomForEntireHome = v35->_roomForEntireHome;
    v35->_roomForEntireHome = (HMRoom *)v111;

    objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("homeLocation"));
    v113 = objc_claimAutoreleasedReturnValue();
    homeLocation = v35->_homeLocation;
    v35->_homeLocation = (CLLocation *)v113;

    currentOutgoingInvitations = v35->_currentOutgoingInvitations;
    v116 = (void *)MEMORY[0x1E0C99E60];
    v230[0] = objc_opt_class();
    v230[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v230, 2);
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v116, "setWithArray:", v117);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    v206 = v4;
    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v118, CFSTR("HM.invitations"));
    v119 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMutableArray setArray:](currentOutgoingInvitations, "setArray:", v119);

    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", -[HMMutableArray count](v35->_currentOutgoingInvitations, "count"));
    v211 = (void *)objc_claimAutoreleasedReturnValue();
    v215 = 0u;
    v216 = 0u;
    v217 = 0u;
    v218 = 0u;
    -[HMMutableArray array](v35->_currentOutgoingInvitations, "array");
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    v121 = objc_msgSend(v120, "countByEnumeratingWithState:objects:count:", &v215, v229, 16);
    if (v121)
    {
      v122 = v121;
      v123 = *(_QWORD *)v216;
      do
      {
        for (k = 0; k != v122; ++k)
        {
          if (*(_QWORD *)v216 != v123)
            objc_enumerationMutation(v120);
          v125 = *(void **)(*((_QWORD *)&v215 + 1) + 8 * k);
          objc_msgSend(v125, "invitee");
          v126 = (void *)objc_claimAutoreleasedReturnValue();
          if (v126)
          {
            -[HMMutableArray array](v35->_currentUsers, "array");
            v127 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v126, "userID");
            v128 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v127, "hmf_firstObjectWithValue:forKeyPath:", v128, CFSTR("userID"));
            v129 = (void *)objc_claimAutoreleasedReturnValue();

            if (v129)
            {
              objc_msgSend(v129, "setPendingAccessoryInvitationsWithOutgoingInvitation:", v125);
              objc_msgSend(v211, "addObject:", v125);
            }

            v35 = v212;
          }

        }
        v122 = objc_msgSend(v120, "countByEnumeratingWithState:objects:count:", &v215, v229, 16);
      }
      while (v122);
    }

    -[HMMutableArray removeObjectsInArray:](v35->_currentOutgoingInvitations, "removeObjectsInArray:", v211);
    v4 = v206;
    objc_msgSend(v206, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HM.matterFabricID"));
    v130 = objc_claimAutoreleasedReturnValue();
    matterFabricID = v35->_matterFabricID;
    v35->_matterFabricID = (NSNumber *)v130;

    v132 = -[HMApplicationData initWithDictionaryFromCoder:key:]([HMApplicationData alloc], "initWithDictionaryFromCoder:key:", v206, CFSTR("HM.appData"));
    applicationData = v35->_applicationData;
    v35->_applicationData = v132;

    v35->_notificationsEnabled = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("kCharacteristicNotificationEnableKey"));
    objc_msgSend(v206, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("kCharacteristicNotificationEnableTime"));
    v134 = (void *)objc_claimAutoreleasedReturnValue();
    v194 = v134;
    if (v134)
    {
      v135 = v134;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
      v135 = (NSDate *)objc_claimAutoreleasedReturnValue();
    }
    notificationsUpdatedTime = v35->_notificationsUpdatedTime;
    v35->_notificationsUpdatedTime = v135;

    v35->_automaticSoftwareUpdateEnabled = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HM.automaticSoftwareUpdateEnabled"));
    v35->_automaticThirdPartyAccessorySoftwareUpdateEnabled = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HM.automaticThirdPartyAccessorySoftwareUpdateEnabled"));
    v35->_minimumMediaUserPrivilege = objc_msgSend(v206, "decodeIntegerForKey:", CFSTR("HM.mediaMinimumUserPrivilege"));
    v35->_mediaPeerToPeerEnabled = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HM.mediaPeerToPeerEnabled"));
    objc_msgSend(v206, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HM.mediaPassword"));
    v137 = objc_claimAutoreleasedReturnValue();
    mediaPassword = v35->_mediaPassword;
    v35->_mediaPassword = (NSString *)v137;

    v35->_protectionMode = objc_msgSend(v206, "decodeIntegerForKey:", CFSTR("HMHM.networkProtectionMode"));
    v139 = objc_msgSend(v206, "decodeIntegerForKey:", CFSTR("HMHM.networkRouterSupportDisableReason"));
    v140 = ((uint64_t)(v139 << 60) >> 63) & 3;
    if ((v139 & 7) != 0)
      v140 = 7;
    v35->_networkRouterSupport = v140 | (v139 >> 3) & 2;
    v35->_networkRouterSupportDisableReason = v139;
    v35->_multiUserEnabled = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HMHomeMultiUserEnabledValueCodingKey"));
    objc_msgSend(v206, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHomeAudioAnalysisClassifierOptionsCodingKey"));
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v142 = v141;
    else
      v142 = 0;
    v143 = v142;

    v144 = objc_msgSend(v143, "unsignedIntegerValue");
    v35->_audioAnalysisClassifierOptions = v144;
    v35->_didOnboardAudioAnalysis = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HMHomeAudioAnalysisHomeOnboardingCodingKey"));
    objc_msgSend(v206, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHomeSiriPhraseOptionsCodingKey"));
    v145 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v146 = v145;
    else
      v146 = 0;
    v147 = v146;

    v148 = objc_msgSend(v147, "unsignedIntegerValue");
    v35->_siriPhraseOptions = v148;
    v35->_soundCheckEnabled = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HMHomeSoundCheckCodingKey"));
    v35->_locationServicesEnabled = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HMHomeLocationServicesEnabledCodingKey"));
    v35->_didOnboardLocationServices = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HMHomeDidOnboardLocationServicesCodingKey"));
    v35->_hasAnyUserAcknowledgedCameraRecordingOnboarding = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HMHomeHasAnyUserAcknowledgedCameraRecordingOnboardingValueCodingKey"));
    v35->_hasOnboardedForAccessCode = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HMHomeHasOnboardedForAccessCodeCodingKey"));
    v35->_hasOnboardedForWalletKey = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HMHomeHasOnboardedForWalletKeyCodingKey"));
    v35->_dismissedWalletKeyUWBUnlockOnboarding = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HMHomeDismissedWalletKeyUWBUnlockOnboardingCodingKey"));
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v149 = (void *)objc_claimAutoreleasedReturnValue();
    v150 = 0x1E0C99000uLL;
    if (objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HMHM.addNetworkRouterEnabled")))
      objc_msgSend(v149, "addObject:", &unk_1E3B2E5D8);
    v151 = objc_msgSend(v149, "copy");
    supportedFeatures = v35->_supportedFeatures;
    v35->_supportedFeatures = (NSSet *)v151;

    v153 = (void *)MEMORY[0x1E0C99E60];
    v228[0] = objc_opt_class();
    v228[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v228, 2);
    v154 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v153, "setWithArray:", v154);
    v155 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v206, "decodeObjectOfClasses:forKey:", v155, CFSTR("HMHomeAccessoryNetworkProtectionGroupsCodingKey"));
    v156 = (void *)objc_claimAutoreleasedReturnValue();

    currentAccessoryProtectionGroups = v35->_currentAccessoryProtectionGroups;
    objc_msgSend(v156, "allObjects");
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMMutableArray setArray:](currentAccessoryProtectionGroups, "setArray:", v158);

    v35->_isFeatureHomeTheaterQFAEnabled = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HMHomeTheaterQFAEnabledCodingKey"));
    objc_msgSend(v206, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHomeSiriEndpointSupportedCodingKey"));
    v159 = objc_claimAutoreleasedReturnValue();
    supportedSiriEndPointVersion = v35->_supportedSiriEndPointVersion;
    v35->_supportedSiriEndPointVersion = (HMFVersion *)v159;

    objc_msgSend(v206, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHM.threadNetworkID"));
    v161 = objc_claimAutoreleasedReturnValue();
    threadNetworkID = v35->_threadNetworkID;
    v35->_threadNetworkID = (NSString *)v161;

    objc_msgSend(v206, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHomePersonManagerSettingsCodingKey"));
    v163 = (void *)objc_claimAutoreleasedReturnValue();
    v164 = v163;
    if (v163)
      v165 = v163;
    else
      v165 = objc_alloc_init(HMHomePersonManagerSettings);
    personManagerSettings = v35->_personManagerSettings;
    v35->_personManagerSettings = v165;
    v167 = v208;

    v35->_bulletinNotificationsSupported = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HMHomeBulletinNotificationsSupportedCodingKey"));
    v35->_didOnboardEventLog = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HM.EL.onboarded"));
    v35->_eventLogEnabled = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HM.EL.enabled"));
    v35->_eventLogDuration = objc_msgSend(v206, "decodeIntegerForKey:", CFSTR("HM.EL.duration"));
    objc_msgSend(v206, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHomeTimeZoneCodingKey"));
    v168 = objc_claimAutoreleasedReturnValue();
    timeZone = v35->_timeZone;
    v35->_timeZone = (NSTimeZone *)v168;

    objc_msgSend(v206, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHomeNumberOfCamerasCodingKey"));
    v170 = objc_claimAutoreleasedReturnValue();
    numberOfCameras = v35->_numberOfCameras;
    v35->_numberOfCameras = (NSNumber *)v170;

    if (_os_feature_enabled_impl())
    {
      -[HMUser homeAccessControl](v35->_currentUser, "homeAccessControl");
      v172 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v172, "isRestrictedGuest"))
      {
LABEL_89:

        v167 = v208;
        goto LABEL_90;
      }
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v173 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v173, "bundleIdentifier");
      v174 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v174, "isEqualToString:", CFSTR("com.apple.rapportd")))
      {

        v150 = 0x1E0C99000;
LABEL_86:
        v177 = (void *)MEMORY[0x1A1AC1AAC]();
        v178 = v35;
        HMFGetOSLogHandle();
        v179 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v179, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v193 = v177;
          v180 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
          v181 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v181, "bundleIdentifier");
          v182 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v242 = v180;
          v243 = 2112;
          v244 = (unint64_t)v182;
          _os_log_impl(&dword_19B1B0000, v179, OS_LOG_TYPE_INFO, "%{public}@Creating dummy accessories for Rapport: %@", buf, 0x16u);

          v35 = v212;
          v177 = v193;
        }

        objc_autoreleasePoolPop(v177);
        v213[0] = MEMORY[0x1E0C809B0];
        v213[1] = 3221225472;
        v213[2] = __24__HMHome_initWithCoder___block_invoke;
        v213[3] = &unk_1E3AB1650;
        v214 = v178;
        objc_msgSend(v207, "na_each:", v213);
        v172 = v214;
        goto LABEL_89;
      }
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v175 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v175, "bundleIdentifier");
      v176 = (void *)objc_claimAutoreleasedReturnValue();

      v150 = 0x1E0C99000uLL;
      v167 = v208;
      if (!v176)
        goto LABEL_86;
    }
LABEL_90:
    v35->_supportsResidentSelection = objc_msgSend(v206, "decodeBoolForKey:", CFSTR("HMHomeResidentSelectionSupported"));
    objc_msgSend(v206, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHomeUserSelectedPreferredResident"));
    v183 = objc_claimAutoreleasedReturnValue();
    userSelectedPreferredResident = v35->_userSelectedPreferredResident;
    v35->_userSelectedPreferredResident = (HMResidentDevice *)v183;

    v185 = (void *)MEMORY[0x1E0C99E60];
    v227[0] = objc_opt_class();
    v227[1] = objc_opt_class();
    objc_msgSend(*(id *)(v150 + 3360), "arrayWithObjects:count:", v227, 2);
    v186 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v185, "setWithArray:", v186);
    v187 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v206, "decodeObjectOfClasses:forKey:", v187, CFSTR("HMHomeAutoSelectedPreferredResidents"));
    v188 = objc_claimAutoreleasedReturnValue();
    autoSelectedPreferredResidents = v35->_autoSelectedPreferredResidents;
    v35->_autoSelectedPreferredResidents = (NSArray *)v188;

    v6 = v204;
    v5 = v205;
    v14 = v202;
    v13 = v203;
    goto LABEL_91;
  }
  v30 = (void *)MEMORY[0x1A1AC1AAC]();
  v31 = self;
  HMFGetOSLogHandle();
  v32 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v242 = v33;
    _os_log_impl(&dword_19B1B0000, v32, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode home due to no uuid", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v30);
  v34 = 0;
LABEL_92:

  return v34;
}

- (HMHome)initWithName:(id)a3 uuid:(id)a4 mediaSystems:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMHome *v12;
  uint64_t v13;
  NSString *name;
  uint64_t v15;
  NSUUID *uuid;
  uint64_t v17;
  HMMutableArray *currentAccessories;
  uint64_t v19;
  HMMutableArray *currentRooms;
  uint64_t v21;
  HMMutableArray *currentZones;
  uint64_t v23;
  HMMutableArray *currentServiceGroups;
  uint64_t v25;
  HMMutableArray *currentActionSets;
  uint64_t v27;
  HMMutableArray *currentTriggerOwnedActionSets;
  uint64_t v29;
  HMMutableArray *currentTriggers;
  uint64_t v31;
  HMMutableArray *currentUsers;
  uint64_t v33;
  HMMutableArray *currentResidentDevices;
  uint64_t v35;
  HMMutableArray *currentOutgoingInvitations;
  HMMediaSystemStageManager *v37;
  HMMediaSystemStageManager *mediaSystemStageManager;
  HMApplicationData *v39;
  HMApplicationData *applicationData;
  uint64_t v41;
  NSDate *notificationsUpdatedTime;
  NSOperationQueue *v43;
  NSOperationQueue *shareWithHomeOwnerOperationQueue;
  uint64_t v45;
  NSSet *supportedFeatures;
  uint64_t v47;
  HMMutableArray *currentAccessoryProtectionGroups;
  NSArray *managedTriggers;
  uint64_t v50;
  NSMutableDictionary *hmModernMessagingRequestHandlersByMessageName;
  uint64_t v52;
  NSMutableDictionary *hmModernMessagingOptionsByMessageName;
  HMHome *result;
  HMMediaSystemStageManager *v55;
  SEL v56;
  id v57;
  objc_super v58;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (v9)
  {
    v11 = v10;
    v58.receiver = self;
    v58.super_class = (Class)HMHome;
    v12 = -[HMHome init](&v58, sel_init);
    if (v12)
    {
      objc_msgSend(MEMORY[0x1E0D28630], "hmf_cachedInstanceForString:", v8);
      v13 = objc_claimAutoreleasedReturnValue();
      name = v12->_name;
      v12->_name = (NSString *)v13;

      objc_msgSend(MEMORY[0x1E0D28638], "hmf_cachedInstanceForNSUUID:", v9);
      v15 = objc_claimAutoreleasedReturnValue();
      uuid = v12->_uuid;
      v12->_uuid = (NSUUID *)v15;

      +[HMMutableArray array](HMMutableArray, "array");
      v17 = objc_claimAutoreleasedReturnValue();
      currentAccessories = v12->_currentAccessories;
      v12->_currentAccessories = (HMMutableArray *)v17;

      +[HMMutableArray array](HMMutableArray, "array");
      v19 = objc_claimAutoreleasedReturnValue();
      currentRooms = v12->_currentRooms;
      v12->_currentRooms = (HMMutableArray *)v19;

      +[HMMutableArray array](HMMutableArray, "array");
      v21 = objc_claimAutoreleasedReturnValue();
      currentZones = v12->_currentZones;
      v12->_currentZones = (HMMutableArray *)v21;

      +[HMMutableArray array](HMMutableArray, "array");
      v23 = objc_claimAutoreleasedReturnValue();
      currentServiceGroups = v12->_currentServiceGroups;
      v12->_currentServiceGroups = (HMMutableArray *)v23;

      +[HMMutableArray array](HMMutableArray, "array");
      v25 = objc_claimAutoreleasedReturnValue();
      currentActionSets = v12->_currentActionSets;
      v12->_currentActionSets = (HMMutableArray *)v25;

      +[HMMutableArray array](HMMutableArray, "array");
      v27 = objc_claimAutoreleasedReturnValue();
      currentTriggerOwnedActionSets = v12->_currentTriggerOwnedActionSets;
      v12->_currentTriggerOwnedActionSets = (HMMutableArray *)v27;

      +[HMMutableArray array](HMMutableArray, "array");
      v29 = objc_claimAutoreleasedReturnValue();
      currentTriggers = v12->_currentTriggers;
      v12->_currentTriggers = (HMMutableArray *)v29;

      +[HMMutableArray array](HMMutableArray, "array");
      v31 = objc_claimAutoreleasedReturnValue();
      currentUsers = v12->_currentUsers;
      v12->_currentUsers = (HMMutableArray *)v31;

      +[HMMutableArray array](HMMutableArray, "array");
      v33 = objc_claimAutoreleasedReturnValue();
      currentResidentDevices = v12->_currentResidentDevices;
      v12->_currentResidentDevices = (HMMutableArray *)v33;

      +[HMMutableArray array](HMMutableArray, "array");
      v35 = objc_claimAutoreleasedReturnValue();
      currentOutgoingInvitations = v12->_currentOutgoingInvitations;
      v12->_currentOutgoingInvitations = (HMMutableArray *)v35;

      v37 = -[HMMediaSystemStageManager initWithIdentifier:mediaSystems:]([HMMediaSystemStageManager alloc], "initWithIdentifier:mediaSystems:", v12->_uuid, v11);
      mediaSystemStageManager = v12->_mediaSystemStageManager;
      v12->_mediaSystemStageManager = v37;

      -[HMMediaSystemStageManager setDataSource:](v12->_mediaSystemStageManager, "setDataSource:", v12);
      v12->_locationAuthorization = 1;
      v39 = objc_alloc_init(HMApplicationData);
      applicationData = v12->_applicationData;
      v12->_applicationData = v39;

      objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
      v41 = objc_claimAutoreleasedReturnValue();
      notificationsUpdatedTime = v12->_notificationsUpdatedTime;
      v12->_notificationsUpdatedTime = (NSDate *)v41;

      v12->_homeLocationStatus = 0;
      v43 = (NSOperationQueue *)objc_alloc_init(MEMORY[0x1E0CB3828]);
      shareWithHomeOwnerOperationQueue = v12->_shareWithHomeOwnerOperationQueue;
      v12->_shareWithHomeOwnerOperationQueue = v43;

      -[NSOperationQueue setMaxConcurrentOperationCount:](v12->_shareWithHomeOwnerOperationQueue, "setMaxConcurrentOperationCount:", 1);
      v12->_networkRouterSupport = 0;
      v12->_networkRouterSupportDisableReason = 0;
      objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", &unk_1E3B2E5D8);
      v45 = objc_claimAutoreleasedReturnValue();
      supportedFeatures = v12->_supportedFeatures;
      v12->_supportedFeatures = (NSSet *)v45;

      +[HMMutableArray array](HMMutableArray, "array");
      v47 = objc_claimAutoreleasedReturnValue();
      currentAccessoryProtectionGroups = v12->_currentAccessoryProtectionGroups;
      v12->_currentAccessoryProtectionGroups = (HMMutableArray *)v47;

      managedTriggers = v12->_managedTriggers;
      v12->_managedTriggers = (NSArray *)MEMORY[0x1E0C9AA60];

      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v50 = objc_claimAutoreleasedReturnValue();
      hmModernMessagingRequestHandlersByMessageName = v12->_hmModernMessagingRequestHandlersByMessageName;
      v12->_hmModernMessagingRequestHandlersByMessageName = (NSMutableDictionary *)v50;

      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v52 = objc_claimAutoreleasedReturnValue();
      hmModernMessagingOptionsByMessageName = v12->_hmModernMessagingOptionsByMessageName;
      v12->_hmModernMessagingOptionsByMessageName = (NSMutableDictionary *)v52;

    }
    return v12;
  }
  else
  {
    v55 = (HMMediaSystemStageManager *)_HMFPreconditionFailure();
    -[HMMediaSystemStageManager setDataSource:](v55, v56, v57);
  }
  return result;
}

- (BOOL)hasOnboardedForWalletKey
{
  HMHome *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_hasOnboardedForWalletKey;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (BOOL)hasOnboardedForAccessCode
{
  HMHome *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_hasOnboardedForAccessCode;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

void __58__HMHome_Wallet__fetchWalletKeyDeviceStateWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v22[0] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_unarchivedObjectForKey:ofClasses:", CFSTR("HMHomeWalletKeyManagerMessageKeyDeviceState"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)MEMORY[0x1A1AC1AAC]();
  v10 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v8)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v13;
      v20 = 2112;
      v21 = v8;
      v14 = "%{public}@Successfully fetched wallet key device state: %@";
      v15 = v12;
      v16 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl(&dword_19B1B0000, v15, v16, v14, (uint8_t *)&v18, 0x16u);

    }
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v13;
    v20 = 2112;
    v21 = 0;
    v14 = "%{public}@Failed to fetch wallet key device state: %@";
    v15 = v12;
    v16 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v9);
  objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "callCompletion:obj:error:", *(_QWORD *)(a1 + 48), v8, v5);

}

- (BOOL)isMultiUserEnabled
{
  HMHome *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_multiUserEnabled;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

+ (BOOL)supportsSecureCoding
{
  return 1;
}

- (BOOL)supportsResidentSelection
{
  HMHome *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_supportsResidentSelection;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

uint64_t __42__HMHome_handleRuntimeStateUpdate_reason___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleRuntimeStateUpdate:reason:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __88__HMHome_enableNotifications_includeAppleMediaAccessoryNotifications_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_enableNotifications:includeAppleMediaAccessoryNotifications:completionHandler:", *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(_QWORD *)(a1 + 40));
}

- (id)outgoingInvitations
{
  void *v2;
  void *v3;

  -[HMHome currentOutgoingInvitations](self, "currentOutgoingInvitations");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (HMMutableArray)currentOutgoingInvitations
{
  return self->_currentOutgoingInvitations;
}

void __53__HMHome_HMAccessory___performBatchRequest_activity___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  if (v3)
  {
    v6 = v3;
    objc_msgSend(*(id *)(a1 + 32), "removeCompletionBlockForIdentifier:", *(_QWORD *)(a1 + 40));
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)v4;
    if (v4)
      (*(void (**)(uint64_t, id, _QWORD, _QWORD))(v4 + 16))(v4, v6, 0, 0);

    v3 = v6;
  }

}

- (void)configurePersonManagerWithSettings:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  HMHomePersonManager *v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "isFaceClassificationEnabled")
    && (-[HMHome personManager](self, "personManager"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v5,
        !v5))
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v14;
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_INFO, "%{public}@Creating person manager because face classification is enabled", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    v15 = -[HMHomePersonManager initWithHome:]([HMHomePersonManager alloc], "initWithHome:", v12);
    -[HMHome setPersonManager:](v12, "setPersonManager:", v15);

    -[HMHome personManager](v12, "personManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "configure");

  }
  else if ((objc_msgSend(v4, "isFaceClassificationEnabled") & 1) == 0)
  {
    -[HMHome personManager](self, "personManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      v7 = (void *)MEMORY[0x1A1AC1AAC]();
      v8 = self;
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 138543362;
        v18 = v10;
        _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Destroying person manager because face classification is disabled", (uint8_t *)&v17, 0xCu);

      }
      objc_autoreleasePoolPop(v7);
      -[HMHome setPersonManager:](v8, "setPersonManager:", 0);
    }
  }

}

- (HMHomePersonManager)personManager
{
  os_unfair_lock_s *p_lock;
  HMHomePersonManager *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_personManager;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (BOOL)isAutomaticSoftwareUpdateEnabled
{
  HMHome *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_automaticSoftwareUpdateEnabled;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

void __21__HMHome_logCategory__block_invoke()
{
  uint64_t v0;
  void *v1;

  HMFCreateOSLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)logCategory__hmf_once_v364;
  logCategory__hmf_once_v364 = v0;

}

- (void)_handleNotificationsEnabled:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  HMHome *v22;
  char v23;
  char v24;
  char v25;

  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pendingRequests");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeCompletionBlockForIdentifier:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = 0;
  v9 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kCharacteristicNotificationEnableKey"), &v25);
  if (v25)
  {
    objc_msgSend(v4, "dateForKey:", CFSTR("kCharacteristicNotificationEnableTime"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome setNotificationsEnabled:](self, "setNotificationsEnabled:", v9);
    -[HMHome setNotificationsUpdatedTime:](self, "setNotificationsUpdatedTime:", v10);

  }
  v24 = 0;
  v11 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("HMHomeEnableHomeAppleMediaNotificationsKey"), &v24);
  if (v8)
  {
    v12 = v11;
    -[HMHome setNotificationEnableRequested:](self, "setNotificationEnableRequested:", v9);
    if (v24)
      v13 = v12;
    else
      v13 = 0;
    -[HMHome setNotificationEnableRequestedForAppleMediaAccessories:](self, "setNotificationEnableRequestedForAppleMediaAccessories:", v13);
    -[HMHome context](self, "context");
    v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "delegateCaller");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "callCompletion:error:", v8, 0);
    goto LABEL_8;
  }
  if (!v25)
    goto LABEL_10;
  -[HMHome delegate](self, "delegate");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v16, "conformsToProtocol:", &unk_1EE45A110))
    v17 = v16;
  else
    v17 = 0;
  v14 = v17;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "delegateCaller");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __38__HMHome__handleNotificationsEnabled___block_invoke;
    v20[3] = &unk_1E3AB57F8;
    v14 = v14;
    v21 = v14;
    v22 = self;
    v23 = v9;
    objc_msgSend(v19, "invokeBlock:", v20);

    v15 = v21;
LABEL_8:

  }
LABEL_10:

}

- (void)setNotificationsUpdatedTime:(id)a3
{
  NSDate *v4;
  NSDate *notificationsUpdatedTime;

  v4 = (NSDate *)a3;
  os_unfair_lock_lock_with_options();
  notificationsUpdatedTime = self->_notificationsUpdatedTime;
  self->_notificationsUpdatedTime = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)setNotificationsEnabled:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_notificationsEnabled = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)setNotificationEnableRequestedForAppleMediaAccessories:(BOOL)a3
{
  self->_notificationEnableRequestedForAppleMediaAccessories = a3;
}

- (void)setNotificationEnableRequested:(BOOL)a3
{
  self->_notificationEnableRequested = a3;
}

- (HMResidentDevice)userSelectedPreferredResident
{
  os_unfair_lock_s *p_lock;
  HMResidentDevice *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_userSelectedPreferredResident;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (void)setDelegate:(id)delegate
{
  os_unfair_lock_s *p_lock;
  id v5;

  p_lock = &self->_lock;
  v5 = delegate;
  os_unfair_lock_lock_with_options();
  objc_storeWeak((id *)&self->_delegate, v5);

  os_unfair_lock_unlock(p_lock);
}

void __27__HMHome__retrieveLocation__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x1A1AC1AAC]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v10;
      v13 = 2112;
      v14 = v5;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Retrieving location failed with error %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_handleHomeLocationUpdate:", v6);
  }

}

- (void)_handleHomeLocationUpdate:(id)a3
{
  id v4;

  objc_msgSend(a3, "hm_locationFromDataForKey:", CFSTR("kHomeLocationKey"));
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[HMHome __updateLocation:locationStatus:](self, "__updateLocation:locationStatus:", v4, -[HMHome homeLocationStatus](self, "homeLocationStatus"));

}

void __89__HMHome__enableNotifications_includeAppleMediaAccessoryNotifications_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = a2;
    objc_msgSend(v3, "removeCompletionBlockForIdentifier:", v4);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "delegateCaller");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "callCompletion:error:obj:", v7, v5, 0);

  }
}

- (void)enableNotifications:(BOOL)a3 includeAppleMediaAccessoryNotifications:(BOOL)a4 completionHandler:(id)a5
{
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  HMHome *v19;
  NSObject *v20;
  void *v21;
  id v22;
  _QWORD block[5];
  id v24;
  BOOL v25;
  BOOL v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v8 = a5;
  -[HMHome context](self, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome enableNotifications:includeAppleMediaAccessoryNotifications:completionHandler:]", CFSTR("completion"));
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)MEMORY[0x1A1AC1AAC]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v21;
      v29 = 2112;
      v30 = (const char *)v17;
      _os_log_impl(&dword_19B1B0000, v20, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v17, 0);
    v22 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v22);
  }
  v10 = v9;
  if (v9)
  {
    objc_msgSend(v9, "queue");
    v11 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __88__HMHome_enableNotifications_includeAppleMediaAccessoryNotifications_completionHandler___block_invoke;
    block[3] = &unk_1E3AB15F8;
    block[4] = self;
    v25 = a3;
    v26 = a4;
    v24 = v8;
    dispatch_async(v11, block);

  }
  else
  {
    v12 = (void *)MEMORY[0x1A1AC1AAC]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v15;
      v29 = 2080;
      v30 = "-[HMHome enableNotifications:includeAppleMediaAccessoryNotifications:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v8 + 2))(v8, v16);

  }
}

- (id)createAccessCodeManager
{
  void *v3;
  void *v4;
  HMHome *v5;
  NSObject *v6;
  void *v7;
  HMAccessCodeManager *v8;
  void *v9;
  HMHome *v10;
  void *v11;
  void *v12;
  void *v13;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  -[HMHome accessCodeManager](self, "accessCodeManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = (void *)MEMORY[0x1A1AC1AAC]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v7;
      _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Client requested to create access code manager, but one already exists for home.", (uint8_t *)&v15, 0xCu);

    }
  }
  else
  {
    v8 = -[HMAccessCodeManager initWithHome:]([HMAccessCodeManager alloc], "initWithHome:", self);
    -[HMHome setAccessCodeManager:](self, "setAccessCodeManager:", v8);

    -[HMHome accessCodeManager](self, "accessCodeManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "configure");

    v4 = (void *)MEMORY[0x1A1AC1AAC]();
    v10 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome accessCodeManager](v10, "accessCodeManager");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome uuid](v10, "uuid");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v11;
      v17 = 2112;
      v18 = v12;
      v19 = 2112;
      v20 = v13;
      _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Created new Access Code Manager %@ for home UUID %@", (uint8_t *)&v15, 0x20u);

    }
  }

  objc_autoreleasePoolPop(v4);
  -[HMHome accessCodeManager](self, "accessCodeManager");
  return (id)objc_claimAutoreleasedReturnValue();
}

- (void)setHasOnboardedForAccessCodeWithCompletion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMHome *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, void *, void *);
  void *v20;
  HMHome *v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1A1AC1AAC]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v24 = v10;
      v25 = 2112;
      v26 = (const char *)v7;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Client requested to onboard home for access code: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    v11 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](v7, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v11, "initWithTarget:", v12);

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMHomeSetHasOnboardedForAccessCodeMessage"), v13, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = MEMORY[0x1E0C809B0];
    v18 = 3221225472;
    v19 = __65__HMHome_AccessCode__setHasOnboardedForAccessCodeWithCompletion___block_invoke;
    v20 = &unk_1E3AB59B8;
    v21 = v7;
    v22 = v4;
    objc_msgSend(v14, "setResponseHandler:", &v17);
    objc_msgSend(v5, "messageDispatcher", v17, v18, v19, v20, v21);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "sendMessage:", v14);

    goto LABEL_9;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v24 = v16;
    v25 = 2080;
    v26 = "-[HMHome(AccessCode) setHasOnboardedForAccessCodeWithCompletion:]";
    _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v4 + 2))(v4, v13);
LABEL_9:

  }
}

void __65__HMHome_AccessCode__setHasOnboardedForAccessCodeWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  int v22;
  void *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x1A1AC1AAC]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 32);
      v22 = 138543874;
      v23 = v10;
      v24 = 2112;
      v25 = v11;
      v26 = 2112;
      v27 = v5;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to onboard home for access code %@:%@", (uint8_t *)&v22, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 32), "context");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "delegateCaller");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    v15 = *(_QWORD *)(a1 + 40);
    v16 = v5;
  }
  else
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC](objc_msgSend(*(id *)(a1 + 32), "setHasOnboardedForAccessCode:", 1));
    v18 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = *(_QWORD *)(a1 + 32);
      v22 = 138543618;
      v23 = v20;
      v24 = 2112;
      v25 = v21;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_INFO, "%{public}@Successfully onboarded home for access code: %@", (uint8_t *)&v22, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(*(id *)(a1 + 32), "context");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "delegateCaller");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    v15 = *(_QWORD *)(a1 + 40);
    v16 = 0;
  }
  objc_msgSend(v13, "callCompletion:error:", v15, v16);

}

- (NSString)walletKeyPassSerialNumber
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  -[HMHome uuid](self, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentUser](self, "currentUser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMHome passSerialNumberWithHomeUUID:userUUID:](HMHome, "passSerialNumberWithHomeUUID:userUUID:", v3, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSString *)v6;
}

- (void)setHasOnboardedForWalletKeyWithCompletion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMHome *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, void *, void *);
  void *v20;
  HMHome *v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1A1AC1AAC]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v24 = v10;
      v25 = 2112;
      v26 = (const char *)v7;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Client requested to onboard home for wallet key: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    v11 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](v7, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v11, "initWithTarget:", v12);

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMHomeSetHasOnboardedForWalletKeyMessage"), v13, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = MEMORY[0x1E0C809B0];
    v18 = 3221225472;
    v19 = __60__HMHome_Wallet__setHasOnboardedForWalletKeyWithCompletion___block_invoke;
    v20 = &unk_1E3AB59B8;
    v21 = v7;
    v22 = v4;
    objc_msgSend(v14, "setResponseHandler:", &v17);
    objc_msgSend(v5, "messageDispatcher", v17, v18, v19, v20, v21);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "sendMessage:", v14);

    goto LABEL_9;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v24 = v16;
    v25 = 2080;
    v26 = "-[HMHome(Wallet) setHasOnboardedForWalletKeyWithCompletion:]";
    _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v4 + 2))(v4, v13);
LABEL_9:

  }
}

- (void)addWalletKeyWithOptions:(int64_t)a3 completion:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMHome *v11;
  NSObject *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMHome context](self, "context");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __53__HMHome_Wallet__addWalletKeyWithOptions_completion___block_invoke;
    v14[3] = &unk_1E3AAE268;
    v15 = v7;
    v16 = v6;
    -[HMHome addWalletKeyWithOptions:completionHandler:](self, "addWalletKeyWithOptions:completionHandler:", a3, v14);

    v9 = v15;
LABEL_7:

    goto LABEL_8;
  }
  v10 = (void *)MEMORY[0x1A1AC1AAC]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v18 = v13;
    v19 = 2080;
    v20 = "-[HMHome(Wallet) addWalletKeyWithOptions:completion:]";
    _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v9);
    goto LABEL_7;
  }
LABEL_8:

}

- (void)addWalletKeyWithOptions:(int64_t)a3 completionHandler:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  char *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  _QWORD v23[5];
  id v24;
  id v25;
  const __CFString *v26;
  void *v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMHome context](self, "context");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1A1AC1AAC]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      HMHomeAddWalletKeyOptionsDescription(a3);
      v13 = (char *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v12;
      v30 = 2112;
      v31 = v13;
      _os_log_impl(&dword_19B1B0000, v11, OS_LOG_TYPE_INFO, "%{public}@Adding wallet key with options: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v14 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](v9, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(v14, "initWithTarget:", v15);

    v26 = CFSTR("HMHomeAddWalletKeyMessageKeyOptions");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = v17;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMHomeAddWalletKeyMessage"), v16, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __60__HMHome_Wallet__addWalletKeyWithOptions_completionHandler___block_invoke;
    v23[3] = &unk_1E3AB60C8;
    v23[4] = v9;
    v20 = v7;
    v24 = v20;
    v25 = v6;
    objc_msgSend(v19, "setResponseHandler:", v23);
    objc_msgSend(v20, "messageDispatcher");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "sendMessage:", v19);

    goto LABEL_9;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v29 = v22;
    v30 = 2080;
    v31 = "-[HMHome(Wallet) addWalletKeyWithOptions:completionHandler:]";
    _os_log_impl(&dword_19B1B0000, v11, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v6 + 2))(v6, 0, v16);
LABEL_9:

  }
}

- (void)fetchHasWalletKeyWithCompletion:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v20 = v8;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Fetching has wallet key...", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMHome context](v6, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __50__HMHome_Wallet__fetchHasWalletKeyWithCompletion___block_invoke;
    v16[3] = &unk_1E3AAE268;
    v17 = v9;
    v18 = v4;
    -[HMHome fetchExistingWalletKeyUUIDWithCompletion:](v6, "fetchExistingWalletKeyUUIDWithCompletion:", v16);

    v11 = v17;
LABEL_9:

    goto LABEL_10;
  }
  v12 = (void *)MEMORY[0x1A1AC1AAC]();
  v13 = v6;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v20 = v15;
    v21 = 2080;
    v22 = "-[HMHome(Wallet) fetchHasWalletKeyWithCompletion:]";
    _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v4 + 2))(v4, 0, v11);
    goto LABEL_9;
  }
LABEL_10:

}

- (void)addWalletKeyToPairedWatchesWithOptions:(int64_t)a3 completion:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  char *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  _QWORD v23[5];
  id v24;
  id v25;
  const __CFString *v26;
  void *v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMHome context](self, "context");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1A1AC1AAC]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      HMHomeAddWalletKeyOptionsDescription(a3);
      v13 = (char *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v12;
      v30 = 2112;
      v31 = v13;
      _os_log_impl(&dword_19B1B0000, v11, OS_LOG_TYPE_INFO, "%{public}@Adding wallet key to paired watches with options: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v14 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](v9, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(v14, "initWithTarget:", v15);

    v26 = CFSTR("HMHomeAddWalletKeyMessageKeyOptions");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = v17;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMHomeAddWalletKeyToPairedWatchesMessage"), v16, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __68__HMHome_Wallet__addWalletKeyToPairedWatchesWithOptions_completion___block_invoke;
    v23[3] = &unk_1E3AB60C8;
    v23[4] = v9;
    v20 = v7;
    v24 = v20;
    v25 = v6;
    objc_msgSend(v19, "setResponseHandler:", v23);
    objc_msgSend(v20, "messageDispatcher");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "sendMessage:", v19);

  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v22;
      v30 = 2080;
      v31 = "-[HMHome(Wallet) addWalletKeyToPairedWatchesWithOptions:completion:]";
      _os_log_impl(&dword_19B1B0000, v11, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

- (void)enableExpressForWalletKeyWithAuthData:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMHome *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  _QWORD v22[5];
  id v23;
  id v24;
  const __CFString *v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x1A1AC1AAC]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v8)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v28 = v13;
      _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_INFO, "%{public}@Enabling express for wallet key", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    v25 = CFSTR("HMHomeMessageKeyAuthData");
    v26 = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](v10, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (void *)objc_msgSend(v15, "initWithTarget:", v16);

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMHomeEnableExpressForWalletKeyMessage"), v17, v14);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __67__HMHome_Wallet__enableExpressForWalletKeyWithAuthData_completion___block_invoke;
    v22[3] = &unk_1E3AB60C8;
    v22[4] = v10;
    v19 = v8;
    v23 = v19;
    v24 = v7;
    objc_msgSend(v18, "setResponseHandler:", v22);
    objc_msgSend(v19, "messageDispatcher");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "sendMessage:", v18);

  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v21;
      v29 = 2080;
      v30 = "-[HMHome(Wallet) enableExpressForWalletKeyWithAuthData:completion:]";
      _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
  }

}

- (void)enableUWBUnlockWithAuthData:(id)a3 completion:(id)a4
{
  -[HMHome setExpressSettingsAuthData:enableUWB:enableNFCExpress:completion:](self, "setExpressSettingsAuthData:enableUWB:enableNFCExpress:completion:", a3, 1, 1, a4);
}

- (void)setExpressSettingsAuthData:(id)a3 enableUWB:(BOOL)a4 enableNFCExpress:(BOOL)a5 completion:(id)a6
{
  _BOOL8 v7;
  _BOOL8 v8;
  id v10;
  id v11;
  void *v12;
  void *v13;
  HMHome *v14;
  NSObject *v15;
  NSObject *v16;
  id v17;
  void *v18;
  char *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  _QWORD v32[5];
  id v33;
  id v34;
  _QWORD v35[3];
  _QWORD v36[3];
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v7 = a5;
  v8 = a4;
  v43 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a6;
  -[HMHome context](self, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1A1AC1AAC]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (v12)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = v11;
      v17 = v10;
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v19 = (char *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v38 = v18;
      v39 = 2112;
      v40 = v19;
      v41 = 2112;
      v42 = v20;
      _os_log_impl(&dword_19B1B0000, v16, OS_LOG_TYPE_INFO, "%{public}@Setting express settings. enableUWB: %@, enableNFCExpress: %@", buf, 0x20u);

      v10 = v17;
      v11 = v31;
    }

    objc_autoreleasePoolPop(v13);
    v36[0] = v10;
    v35[0] = CFSTR("HMHomeMessageKeyAuthData");
    v35[1] = CFSTR("HMHomeMessageKeyEnableUWB");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v8);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v36[1] = v21;
    v35[2] = CFSTR("HMHomeMessageKeyEnableNFCExpress");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v7);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v36[2] = v22;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v36, v35, 3);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    v24 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](v14, "uuid");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = (void *)objc_msgSend(v24, "initWithTarget:", v25);

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMHomeSetHomeKeyExpressSettingsMessage"), v26, v23);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = __83__HMHome_Wallet__setExpressSettingsAuthData_enableUWB_enableNFCExpress_completion___block_invoke;
    v32[3] = &unk_1E3AB60C8;
    v32[4] = v14;
    v28 = v12;
    v33 = v28;
    v34 = v11;
    objc_msgSend(v27, "setResponseHandler:", v32);
    objc_msgSend(v28, "messageDispatcher");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "sendMessage:", v27);

  }
  else
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v30;
      v39 = 2080;
      v40 = "-[HMHome(Wallet) setExpressSettingsAuthData:enableUWB:enableNFCExpress:completion:]";
      _os_log_impl(&dword_19B1B0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
  }

}

- (void)fetchWalletKeyCustomURLWithCompletion:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v20 = v8;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Fetching wallet key custom URL...", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMHome context](v6, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __56__HMHome_Wallet__fetchWalletKeyCustomURLWithCompletion___block_invoke;
    v16[3] = &unk_1E3AAE290;
    v17 = v9;
    v18 = v4;
    -[HMHome fetchWalletKeyDeviceStateWithCompletion:](v6, "fetchWalletKeyDeviceStateWithCompletion:", v16);

    v11 = v17;
LABEL_9:

    goto LABEL_10;
  }
  v12 = (void *)MEMORY[0x1A1AC1AAC]();
  v13 = v6;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v20 = v15;
    v21 = 2080;
    v22 = "-[HMHome(Wallet) fetchWalletKeyCustomURLWithCompletion:]";
    _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v4 + 2))(v4, 0, v11);
    goto LABEL_9;
  }
LABEL_10:

}

- (void)fetchWalletKeyEncodedPKPass:(id)a3
{
  void *v4;
  id v5;
  id v6;

  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = a3;
  objc_msgSend(v4, "setWithArray:", &unk_1E3B306B8);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[HMHome fetchWalletKeyEncodedPKPassWithIgnoredErrorCodes:completion:](self, "fetchWalletKeyEncodedPKPassWithIgnoredErrorCodes:completion:", v6, v5);

}

- (void)fetchAvailableWalletKeyEncodedPKPass:(id)a3
{
  void *v4;
  id v5;
  id v6;

  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = a3;
  objc_msgSend(v4, "set");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[HMHome fetchWalletKeyEncodedPKPassWithIgnoredErrorCodes:completion:](self, "fetchWalletKeyEncodedPKPassWithIgnoredErrorCodes:completion:", v6, v5);

}

- (void)fetchWalletKeyEncodedPKPassWithIgnoredErrorCodes:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;
  HMHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  HMHome *v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  HMHome *v27;
  NSObject *v28;
  void *v29;
  id v30;
  _QWORD v31[5];
  id v32;
  void (**v33)(_QWORD, _QWORD, _QWORD);
  const __CFString *v34;
  id v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(Wallet) fetchWalletKeyEncodedPKPassWithIgnoredErrorCodes:completion:]", CFSTR("completion"));
    v25 = objc_claimAutoreleasedReturnValue();
    v26 = (void *)MEMORY[0x1A1AC1AAC]();
    v27 = self;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v37 = v29;
      v38 = 2112;
      v39 = v25;
      _os_log_impl(&dword_19B1B0000, v28, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v25, 0);
    v30 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v30);
  }
  v8 = (void (**)(_QWORD, _QWORD, _QWORD))v7;
  v9 = (void *)MEMORY[0x1A1AC1AAC]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v37 = v12;
    _os_log_impl(&dword_19B1B0000, v11, OS_LOG_TYPE_INFO, "%{public}@Fetching encoded PKPass for available wallet key...", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v9);
  -[HMHome context](v10, "context");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    v14 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](v10, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(v14, "initWithTarget:", v15);

    v34 = CFSTR("HMHomeWalletKeyManagerMessageKeyIgnoredErrorCodes");
    v35 = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMHomeFetchAvailableWalletKeyEncodedPKPassMessage"), v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 3221225472;
    v31[2] = __78__HMHome_Wallet__fetchWalletKeyEncodedPKPassWithIgnoredErrorCodes_completion___block_invoke;
    v31[3] = &unk_1E3AB60C8;
    v31[4] = v10;
    v19 = v13;
    v32 = v19;
    v33 = v8;
    objc_msgSend(v18, "setResponseHandler:", v31);
    objc_msgSend(v19, "messageDispatcher");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "sendMessage:", v18);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 12, 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (void *)MEMORY[0x1A1AC1AAC]();
    v22 = v10;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v37 = v24;
      v38 = 2112;
      v39 = (uint64_t)v16;
      _os_log_impl(&dword_19B1B0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch encoded PK Pass: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    ((void (**)(_QWORD, _QWORD, void *))v8)[2](v8, 0, v16);
  }

}

- (void)fetchIsExpressEnabledForWalletKeyWithCompletion:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v20 = v8;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Fetching express enabled for wallet key", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMHome context](v6, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __66__HMHome_Wallet__fetchIsExpressEnabledForWalletKeyWithCompletion___block_invoke;
    v16[3] = &unk_1E3AAE290;
    v17 = v9;
    v18 = v4;
    -[HMHome fetchWalletKeyDeviceStateWithCompletion:](v6, "fetchWalletKeyDeviceStateWithCompletion:", v16);

    v11 = v17;
LABEL_9:

    goto LABEL_10;
  }
  v12 = (void *)MEMORY[0x1A1AC1AAC]();
  v13 = v6;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v20 = v15;
    v21 = 2080;
    v22 = "-[HMHome(Wallet) fetchIsExpressEnabledForWalletKeyWithCompletion:]";
    _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v4 + 2))(v4, 0, v11);
    goto LABEL_9;
  }
LABEL_10:

}

- (void)fetchWalleKeyExpressEnablementConflictingPassDescription:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v20 = v8;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Fetching description of the conflicting pass...", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMHome context](v6, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __75__HMHome_Wallet__fetchWalleKeyExpressEnablementConflictingPassDescription___block_invoke;
    v16[3] = &unk_1E3AAE290;
    v17 = v9;
    v18 = v4;
    -[HMHome fetchWalletKeyDeviceStateWithCompletion:](v6, "fetchWalletKeyDeviceStateWithCompletion:", v16);

    v11 = v17;
LABEL_9:

    goto LABEL_10;
  }
  v12 = (void *)MEMORY[0x1A1AC1AAC]();
  v13 = v6;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v20 = v15;
    v21 = 2080;
    v22 = "-[HMHome(Wallet) fetchWalleKeyExpressEnablementConflictingPassDescription:]";
    _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v4 + 2))(v4, 0, v11);
    goto LABEL_9;
  }
LABEL_10:

}

- (void)fetchWalletKeyColorWithCompletion:(id)a3
{
  id v4;
  void (**v5)(_QWORD, _QWORD);
  void *v6;
  HMHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  HMHome *v22;
  NSObject *v23;
  void *v24;
  id v25;
  _QWORD v26[5];
  void (**v27)(_QWORD, _QWORD);
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  const __CFString *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(Wallet) fetchWalletKeyColorWithCompletion:]", CFSTR("completion"));
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)MEMORY[0x1A1AC1AAC]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v24;
      v30 = 2112;
      v31 = (const __CFString *)v20;
      _os_log_impl(&dword_19B1B0000, v23, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v20, 0);
    v25 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v25);
  }
  v5 = (void (**)(_QWORD, _QWORD))v4;
  v6 = (void *)MEMORY[0x1A1AC1AAC]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v29 = v9;
    _os_log_impl(&dword_19B1B0000, v8, OS_LOG_TYPE_INFO, "%{public}@Fetching wallet key color...", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  -[HMHome context](v7, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    v11 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](v7, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v11, "initWithTarget:", v12);

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMHomeFetchWalletKeyColorMessage"), v13, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __52__HMHome_Wallet__fetchWalletKeyColorWithCompletion___block_invoke;
    v26[3] = &unk_1E3AB59B8;
    v26[4] = v7;
    v27 = v5;
    objc_msgSend(v14, "setResponseHandler:", v26);
    objc_msgSend(v10, "messageDispatcher");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "sendMessage:", v14);

  }
  else
  {
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = v7;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v19;
      v30 = 2112;
      v31 = CFSTR("SatinNickel");
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch wallet key color, context not specified, returning default color %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    v5[2](v5, 14341582);
  }

}

- (void)fetchExistingWalletKeyUUIDWithCompletion:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v20 = v8;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Fetching wallet key uuid...", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMHome context](v6, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __59__HMHome_Wallet__fetchExistingWalletKeyUUIDWithCompletion___block_invoke;
    v16[3] = &unk_1E3AAE290;
    v17 = v9;
    v18 = v4;
    -[HMHome fetchWalletKeyDeviceStateWithCompletion:](v6, "fetchWalletKeyDeviceStateWithCompletion:", v16);

    v11 = v17;
LABEL_9:

    goto LABEL_10;
  }
  v12 = (void *)MEMORY[0x1A1AC1AAC]();
  v13 = v6;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v20 = v15;
    v21 = 2080;
    v22 = "-[HMHome(Wallet) fetchExistingWalletKeyUUIDWithCompletion:]";
    _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v4 + 2))(v4, 0, v11);
    goto LABEL_9;
  }
LABEL_10:

}

- (void)fetchIsWalletKeySupportedWithCompletion:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v20 = v8;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Fetching is wallet key supported...", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMHome context](v6, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __58__HMHome_Wallet__fetchIsWalletKeySupportedWithCompletion___block_invoke;
    v16[3] = &unk_1E3AAE290;
    v17 = v9;
    v18 = v4;
    -[HMHome fetchWalletKeyDeviceStateWithCompletion:](v6, "fetchWalletKeyDeviceStateWithCompletion:", v16);

    v11 = v17;
LABEL_9:

    goto LABEL_10;
  }
  v12 = (void *)MEMORY[0x1A1AC1AAC]();
  v13 = v6;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v20 = v15;
    v21 = 2080;
    v22 = "-[HMHome(Wallet) fetchIsWalletKeySupportedWithCompletion:]";
    _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v4 + 2))(v4, 0, v11);
    goto LABEL_9;
  }
LABEL_10:

}

- (void)fetchIsWalletKeySupportedOnAnyPairedWatchWithCompletion:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v20 = v8;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Fetching is wallet key supported for paired watches...", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMHome context](v6, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __74__HMHome_Wallet__fetchIsWalletKeySupportedOnAnyPairedWatchWithCompletion___block_invoke;
    v16[3] = &unk_1E3AAE2B8;
    v17 = v9;
    v18 = v4;
    -[HMHome fetchWalletKeyDeviceStateForPairedWatchesWithCompletion:](v6, "fetchWalletKeyDeviceStateForPairedWatchesWithCompletion:", v16);

    v11 = v17;
LABEL_9:

    goto LABEL_10;
  }
  v12 = (void *)MEMORY[0x1A1AC1AAC]();
  v13 = v6;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v20 = v15;
    v21 = 2080;
    v22 = "-[HMHome(Wallet) fetchIsWalletKeySupportedOnAnyPairedWatchWithCompletion:]";
    _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v4 + 2))(v4, 0, v11);
    goto LABEL_9;
  }
LABEL_10:

}

- (void)fetchWalletKeyDeviceStateForPairedWatchesWithCompletion:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  _QWORD v20[5];
  id v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v24 = v8;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Fetching wallet key device state for paired watches", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMHome context](v6, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](v6, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_msgSend(v10, "initWithTarget:", v11);

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMHomeWalletKeyManagerFetchDeviceStateForPairedWatchesMessage"), v12, 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __74__HMHome_Wallet__fetchWalletKeyDeviceStateForPairedWatchesWithCompletion___block_invoke;
    v20[3] = &unk_1E3AB60C8;
    v20[4] = v6;
    v14 = v9;
    v21 = v14;
    v22 = v4;
    objc_msgSend(v13, "setResponseHandler:", v20);
    objc_msgSend(v14, "messageDispatcher");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "sendMessage:", v13);

LABEL_9:
    goto LABEL_10;
  }
  v16 = (void *)MEMORY[0x1A1AC1AAC]();
  v17 = v6;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v24 = v19;
    v25 = 2080;
    v26 = "-[HMHome(Wallet) fetchWalletKeyDeviceStateForPairedWatchesWithCompletion:]";
    _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v16);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v4 + 2))(v4, 0, v12);
    goto LABEL_9;
  }
LABEL_10:

}

- (void)fetchMissingWalletKeysForAccessory:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  HMHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  HMHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  _QWORD v35[4];
  id v36;
  HMHome *v37;
  id v38;
  id v39;
  _QWORD v40[4];
  id v41;
  const __CFString *v42;
  void *v43;
  uint8_t buf[4];
  void *v45;
  __int16 v46;
  id v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1A1AC1AAC]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v45 = v11;
    v46 = 2112;
    v47 = v6;
    _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Fetching missing wallet keys for accessory: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  -[HMHome context](v9, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    if (objc_msgSend(v6, "supportsCHIP") && (objc_msgSend(v6, "supportsWalletKey") & 1) != 0)
    {
      v13 = objc_alloc(MEMORY[0x1E0D285D8]);
      -[HMHome uuid](v9, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)objc_msgSend(v13, "initWithTarget:", v14);

      v16 = (void *)MEMORY[0x1E0D285F8];
      v42 = CFSTR("HMHomeWalletKeyManagerMessageKeyAccessoryUUIDString");
      objc_msgSend(v6, "uuid");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "UUIDString");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = v18;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "messageWithName:destination:payload:", CFSTR("HMHomeWalletKeyManagerFetchMissingWalletKeysMessage"), v15, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 3221225472;
      v35[2] = __64__HMHome_Wallet__fetchMissingWalletKeysForAccessory_completion___block_invoke_43;
      v35[3] = &unk_1E3AB4B08;
      v21 = v12;
      v36 = v21;
      v37 = v9;
      v38 = v6;
      v39 = v7;
      objc_msgSend(v20, "setResponseHandler:", v35);
      objc_msgSend(v21, "messageDispatcher");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "sendMessage:", v20);

    }
    else
    {
      v23 = (void *)MEMORY[0x1A1AC1AAC]();
      v24 = v9;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "uuid");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "supportsCHIP");
        HMFBooleanToString();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "supportsWalletKey");
        HMFBooleanToString();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v45 = v26;
        v46 = 2112;
        v47 = v27;
        v48 = 2112;
        v49 = v28;
        v50 = 2112;
        v51 = v29;
        _os_log_impl(&dword_19B1B0000, v25, OS_LOG_TYPE_INFO, "%{public}@Not fetching missing wallet keys for accessory accessory: %@, supportsCHIP: %@, supportsWalletKey: %@", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v23);
      objc_msgSend(MEMORY[0x1E0C99E60], "set");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void *))v7 + 2))(v7, v15);
    }
  }
  else
  {
    v30 = (void *)MEMORY[0x1A1AC1AAC]();
    v31 = v9;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v45 = v33;
      _os_log_impl(&dword_19B1B0000, v32, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch missing wallet keys for accessory, context not specified, returning empty list", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v30);
    objc_msgSend(0, "delegateCaller");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 3221225472;
    v40[2] = __64__HMHome_Wallet__fetchMissingWalletKeysForAccessory_completion___block_invoke;
    v40[3] = &unk_1E3AB6078;
    v41 = v7;
    objc_msgSend(v34, "invokeBlock:", v40);

    v15 = v41;
  }

}

- (void)fetchMissingWalletKeysForUser:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  HMHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  _QWORD v29[4];
  id v30;
  HMHome *v31;
  id v32;
  id v33;
  _QWORD v34[4];
  id v35;
  const __CFString *v36;
  void *v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1A1AC1AAC]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v39 = v11;
    v40 = 2112;
    v41 = v6;
    _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Fetching missing wallet keys for user: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  -[HMHome context](v9, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    v13 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](v9, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (id)objc_msgSend(v13, "initWithTarget:", v14);

    v16 = (void *)MEMORY[0x1E0D285F8];
    v36 = CFSTR("HMHomeWalletKeyManagerMessageKeyUserUUIDString");
    objc_msgSend(v6, "uuid");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "UUIDString");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = v18;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "messageWithName:destination:payload:", CFSTR("HMHomeWalletKeyManagerFetchMissingWalletKeysMessage"), v15, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __59__HMHome_Wallet__fetchMissingWalletKeysForUser_completion___block_invoke_2;
    v29[3] = &unk_1E3AB4B08;
    v21 = v12;
    v30 = v21;
    v31 = v9;
    v32 = v6;
    v33 = v7;
    v22 = v7;
    objc_msgSend(v20, "setResponseHandler:", v29);
    objc_msgSend(v21, "messageDispatcher");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "sendMessage:", v20);

  }
  else
  {
    v24 = (void *)MEMORY[0x1A1AC1AAC]();
    v25 = v9;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v39 = v27;
      _os_log_impl(&dword_19B1B0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch missing wallet keys for user, context not specified, returning empty list", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v24);
    objc_msgSend(0, "delegateCaller");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 3221225472;
    v34[2] = __59__HMHome_Wallet__fetchMissingWalletKeysForUser_completion___block_invoke;
    v34[3] = &unk_1E3AB6078;
    v35 = v7;
    v15 = v7;
    objc_msgSend(v28, "invokeBlock:", v34);

    v20 = v35;
  }

}

- (void)restoreMissingWalletKeys:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  HMHome *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  _QWORD v31[4];
  id v32;
  HMHome *v33;
  id v34;
  id v35;
  id v36;
  _QWORD v37[4];
  id v38;
  id v39;
  const __CFString *v40;
  void *v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  id v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1A1AC1AAC]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v43 = v11;
    v44 = 2112;
    v45 = v6;
    _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Restoring missing wallet keys: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  -[HMHome context](v9, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    objc_msgSend(v6, "na_map:", &__block_literal_global_7512);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](v9, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (id)objc_msgSend(v14, "initWithTarget:", v15);

    v17 = (void *)MEMORY[0x1E0D285F8];
    v40 = CFSTR("HMHomeWalletKeyManagerMessageKeyMissingWalletKeys");
    encodeRootObject(v13);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = v18;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "messageWithName:destination:payload:", CFSTR("HMHomeWalletKeyManagerRestoreMissingWalletKeysMessage"), v16, v19);
    v20 = (id)objc_claimAutoreleasedReturnValue();

    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 3221225472;
    v31[2] = __54__HMHome_Wallet__restoreMissingWalletKeys_completion___block_invoke_3;
    v31[3] = &unk_1E3AB2FA8;
    v21 = v12;
    v32 = v21;
    v33 = v9;
    v35 = v6;
    v36 = v7;
    v34 = v13;
    v22 = v6;
    v23 = v7;
    v24 = v13;
    objc_msgSend(v20, "setResponseHandler:", v31);
    objc_msgSend(v21, "messageDispatcher");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "sendMessage:", v20);

  }
  else
  {
    v26 = (void *)MEMORY[0x1A1AC1AAC]();
    v27 = v9;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v43 = v29;
      _os_log_impl(&dword_19B1B0000, v28, OS_LOG_TYPE_ERROR, "%{public}@Failed to restore missing wallet keys, context not specified", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v26);
    objc_msgSend(0, "delegateCaller");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 3221225472;
    v37[2] = __54__HMHome_Wallet__restoreMissingWalletKeys_completion___block_invoke;
    v37[3] = &unk_1E3AB60A0;
    v38 = v6;
    v39 = v7;
    v20 = v6;
    v16 = v7;
    objc_msgSend(v30, "invokeBlock:", v37);

    v24 = v39;
  }

}

void __54__HMHome_Wallet__restoreMissingWalletKeys_completion___block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);

}

void __54__HMHome_Wallet__restoreMissingWalletKeys_completion___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  _QWORD v15[5];
  id v16;
  id v17;
  _QWORD v18[5];
  _QWORD v19[5];
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v24[0] = objc_opt_class();
  v24[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v24, 2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_unarchivedObjectForKey:ofClasses:", CFSTR("HMHomeWalletKeyManagerMessageKeyMissingWalletKeys"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v9 = MEMORY[0x1E0C809B0];
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __54__HMHome_Wallet__restoreMissingWalletKeys_completion___block_invoke_52;
    v18[3] = &unk_1E3AAE2E0;
    v18[4] = *(_QWORD *)(a1 + 40);
    objc_msgSend(v8, "na_map:", v18);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = v9;
    v15[1] = 3221225472;
    v15[2] = __54__HMHome_Wallet__restoreMissingWalletKeys_completion___block_invoke_2_53;
    v15[3] = &unk_1E3AB5C58;
    v15[4] = *(_QWORD *)(a1 + 40);
    v16 = v10;
    v17 = *(id *)(a1 + 64);
    v12 = v10;
    objc_msgSend(v11, "invokeBlock:", v15);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __54__HMHome_Wallet__restoreMissingWalletKeys_completion___block_invoke_4;
    v19[3] = &unk_1E3AB52E0;
    v14 = *(void **)(a1 + 48);
    v19[4] = *(_QWORD *)(a1 + 40);
    v20 = v14;
    v21 = v5;
    v23 = *(id *)(a1 + 64);
    v22 = *(id *)(a1 + 56);
    objc_msgSend(v13, "invokeBlock:", v19);

    v12 = v20;
  }

}

uint64_t __54__HMHome_Wallet__restoreMissingWalletKeys_completion___block_invoke_4(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v9 = 138543874;
    v10 = v5;
    v11 = 2112;
    v12 = v6;
    v13 = 2112;
    v14 = v7;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_ERROR, "%{public}@Failed to restore missing wallet keys: %@ with error: %@", (uint8_t *)&v9, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

HMMissingWalletKey *__54__HMHome_Wallet__restoreMissingWalletKeys_completion___block_invoke_52(uint64_t a1, uint64_t a2)
{
  return +[HMMissingWalletKey missingWalletKeyWithValue:home:](HMMissingWalletKey, "missingWalletKeyWithValue:home:", a2, *(_QWORD *)(a1 + 32));
}

uint64_t __54__HMHome_Wallet__restoreMissingWalletKeys_completion___block_invoke_2_53(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@After restored missing wallet keys, the remaining missing wallet keys are: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

id __54__HMHome_Wallet__restoreMissingWalletKeys_completion___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return +[HMMissingWalletKeyValue valueForMissingWalletKey:](HMMissingWalletKeyValue, "valueForMissingWalletKey:", a2);
}

void __59__HMHome_Wallet__fetchMissingWalletKeysForUser_completion___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0C99E60], "set");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void __59__HMHome_Wallet__fetchMissingWalletKeysForUser_completion___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[5];
  id v18;
  id v19;
  id v20;
  _QWORD v21[5];
  _QWORD v22[5];
  id v23;
  id v24;
  id v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v26[0] = objc_opt_class();
  v26[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_unarchivedObjectForKey:ofClasses:", CFSTR("HMHomeWalletKeyManagerMessageKeyMissingWalletKeys"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = MEMORY[0x1E0C809B0];
  if (!v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = v9;
    v22[1] = 3221225472;
    v22[2] = __59__HMHome_Wallet__fetchMissingWalletKeysForUser_completion___block_invoke_3;
    v22[3] = &unk_1E3AB4D20;
    v11 = *(void **)(a1 + 48);
    v22[4] = *(_QWORD *)(a1 + 40);
    v23 = v11;
    v24 = v5;
    v25 = *(id *)(a1 + 56);
    objc_msgSend(v10, "invokeBlock:", v22);

  }
  v21[0] = v9;
  v21[1] = 3221225472;
  v21[2] = __59__HMHome_Wallet__fetchMissingWalletKeysForUser_completion___block_invoke_49;
  v21[3] = &unk_1E3AAE2E0;
  v21[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v8, "na_map:", v21);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v9;
  v17[1] = 3221225472;
  v17[2] = __59__HMHome_Wallet__fetchMissingWalletKeysForUser_completion___block_invoke_2_50;
  v17[3] = &unk_1E3AB4D20;
  v17[4] = *(_QWORD *)(a1 + 40);
  v18 = v8;
  v14 = *(id *)(a1 + 56);
  v19 = v12;
  v20 = v14;
  v15 = v12;
  v16 = v8;
  objc_msgSend(v13, "invokeBlock:", v17);

}

void __59__HMHome_Wallet__fetchMissingWalletKeysForUser_completion___block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(a1 + 48);
    v10 = 138543874;
    v11 = v5;
    v12 = 2112;
    v13 = v6;
    v14 = 2112;
    v15 = v7;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch missing wallet keys for user: %@ with error: %@", (uint8_t *)&v10, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  v8 = *(_QWORD *)(a1 + 56);
  objc_msgSend(MEMORY[0x1E0C99E60], "set");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);

}

HMMissingWalletKey *__59__HMHome_Wallet__fetchMissingWalletKeysForUser_completion___block_invoke_49(uint64_t a1, uint64_t a2)
{
  return +[HMMissingWalletKey missingWalletKeyWithValue:home:](HMMissingWalletKey, "missingWalletKeyWithValue:home:", a2, *(_QWORD *)(a1 + 32));
}

uint64_t __59__HMHome_Wallet__fetchMissingWalletKeysForUser_completion___block_invoke_2_50(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Successfully fetched missing wallet keys: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void __64__HMHome_Wallet__fetchMissingWalletKeysForAccessory_completion___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0C99E60], "set");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void __64__HMHome_Wallet__fetchMissingWalletKeysForAccessory_completion___block_invoke_43(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[5];
  id v18;
  id v19;
  id v20;
  _QWORD v21[5];
  _QWORD v22[5];
  id v23;
  id v24;
  id v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v26[0] = objc_opt_class();
  v26[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_unarchivedObjectForKey:ofClasses:", CFSTR("HMHomeWalletKeyManagerMessageKeyMissingWalletKeys"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = MEMORY[0x1E0C809B0];
  if (!v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = v9;
    v22[1] = 3221225472;
    v22[2] = __64__HMHome_Wallet__fetchMissingWalletKeysForAccessory_completion___block_invoke_2;
    v22[3] = &unk_1E3AB4D20;
    v11 = *(void **)(a1 + 48);
    v22[4] = *(_QWORD *)(a1 + 40);
    v23 = v11;
    v24 = v5;
    v25 = *(id *)(a1 + 56);
    objc_msgSend(v10, "invokeBlock:", v22);

  }
  v21[0] = v9;
  v21[1] = 3221225472;
  v21[2] = __64__HMHome_Wallet__fetchMissingWalletKeysForAccessory_completion___block_invoke_45;
  v21[3] = &unk_1E3AAE2E0;
  v21[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v8, "na_map:", v21);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v9;
  v17[1] = 3221225472;
  v17[2] = __64__HMHome_Wallet__fetchMissingWalletKeysForAccessory_completion___block_invoke_2_48;
  v17[3] = &unk_1E3AB4D20;
  v17[4] = *(_QWORD *)(a1 + 40);
  v18 = v8;
  v14 = *(id *)(a1 + 56);
  v19 = v12;
  v20 = v14;
  v15 = v12;
  v16 = v8;
  objc_msgSend(v13, "invokeBlock:", v17);

}

void __64__HMHome_Wallet__fetchMissingWalletKeysForAccessory_completion___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(a1 + 48);
    v10 = 138543874;
    v11 = v5;
    v12 = 2112;
    v13 = v6;
    v14 = 2112;
    v15 = v7;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch missing wallet keys for accessory: %@ with error: %@", (uint8_t *)&v10, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  v8 = *(_QWORD *)(a1 + 56);
  objc_msgSend(MEMORY[0x1E0C99E60], "set");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);

}

HMMissingWalletKey *__64__HMHome_Wallet__fetchMissingWalletKeysForAccessory_completion___block_invoke_45(uint64_t a1, uint64_t a2)
{
  return +[HMMissingWalletKey missingWalletKeyWithValue:home:](HMMissingWalletKey, "missingWalletKeyWithValue:home:", a2, *(_QWORD *)(a1 + 32));
}

uint64_t __64__HMHome_Wallet__fetchMissingWalletKeysForAccessory_completion___block_invoke_2_48(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Successfully fetched missing wallet keys: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void __74__HMHome_Wallet__fetchWalletKeyDeviceStateForPairedWatchesWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  _QWORD v22[4];

  v22[3] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v22[0] = objc_opt_class();
  v22[1] = objc_opt_class();
  v22[2] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_unarchivedObjectForKey:ofClasses:", CFSTR("HMHomeWalletKeyManagerMessageKeyDeviceStateForPairedWatches"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)MEMORY[0x1A1AC1AAC]();
  v10 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v8)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v13;
      v20 = 2112;
      v21 = v8;
      v14 = "%{public}@Successfully fetched wallet key device state: %@";
      v15 = v12;
      v16 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl(&dword_19B1B0000, v15, v16, v14, (uint8_t *)&v18, 0x16u);

    }
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v13;
    v20 = 2112;
    v21 = 0;
    v14 = "%{public}@Failed to fetch wallet key device state: %@";
    v15 = v12;
    v16 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v9);
  objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "callCompletion:obj:error:", *(_QWORD *)(a1 + 48), v8, v5);

}

void __74__HMHome_Wallet__fetchIsWalletKeySupportedOnAnyPairedWatchWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  char v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(v7);
        objc_msgSend(v7, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i), (_QWORD)v14);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "canAddWalletKey");

        if ((v12 & 1) != 0)
        {
          v8 = 1;
          goto LABEL_11;
        }
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v8)
        continue;
      break;
    }
  }
LABEL_11:

  objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "callCompletion:value:error:", *(_QWORD *)(a1 + 40), v8, v6);

}

void __58__HMHome_Wallet__fetchIsWalletKeySupportedWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  objc_msgSend(v5, "delegateCaller");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(a1 + 40);
  v9 = objc_msgSend(v7, "canAddWalletKey");

  objc_msgSend(v10, "callCompletion:value:error:", v8, v9, v6);
}

void __59__HMHome_Wallet__fetchExistingWalletKeyUUIDWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  objc_msgSend(v5, "delegateCaller");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v7, "walletKey");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "UUID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "callCompletion:obj:error:", v8, v10, v6);

}

void __52__HMHome_Wallet__fetchWalletKeyColorWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  const __CFString *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(v6, "hmf_numberForKey:", CFSTR("HMHomeFetchWalletKeyColorMessageKeyColor"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1A1AC1AAC]();
  v9 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v12;
      v16 = 2112;
      v17 = CFSTR("SatinNickel");
      _os_log_impl(&dword_19B1B0000, v11, OS_LOG_TYPE_INFO, "%{public}@Successfully fetched wallet key color: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(v7, "intValue");
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v13;
      v16 = 2112;
      v17 = CFSTR("SatinNickel");
      v18 = 2112;
      v19 = v5;
      _os_log_impl(&dword_19B1B0000, v11, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch wallet key color, returning default color %@:%@", (uint8_t *)&v14, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void __75__HMHome_Wallet__fetchWalleKeyExpressEnablementConflictingPassDescription___block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  objc_msgSend(v5, "delegateCaller");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v7, "expressEnablementConflictingPassDescription");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "callCompletion:obj:error:", v8, v9, v6);
}

void __66__HMHome_Wallet__fetchIsExpressEnabledForWalletKeyWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  objc_msgSend(v5, "delegateCaller");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v7, "walletKey");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "callCompletion:value:error:", v8, objc_msgSend(v9, "isExpressEnabled"), v6);
}

void __78__HMHome_Wallet__fetchWalletKeyEncodedPKPassWithIgnoredErrorCodes_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(v6, "hmf_fileHandleForKey:", CFSTR("HMHomeFetchAvailableWalletKeyEncodedPKPassMessageKeyFileHandle"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "availableData");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)MEMORY[0x1A1AC1AAC]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543362;
      v17 = v13;
      _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_INFO, "%{public}@Successfully fetched encoded PK Pass", (uint8_t *)&v16, 0xCu);

    }
  }
  else
  {
    v10 = (void *)MEMORY[0x1A1AC1AAC]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v14;
      v18 = 2112;
      v19 = v5;
      _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch encoded PK pass: %@", (uint8_t *)&v16, 0x16u);

    }
    v9 = 0;
  }

  objc_autoreleasePoolPop(v10);
  objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "callCompletion:obj:error:", *(_QWORD *)(a1 + 48), v9, v5);

}

void __56__HMHome_Wallet__fetchWalletKeyCustomURLWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  objc_msgSend(v5, "delegateCaller");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v7, "walletKey");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "customURL");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "callCompletion:obj:error:", v8, v10, v6);

}

void __83__HMHome_Wallet__setExpressSettingsAuthData_enableUWB_enableNFCExpress_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v11;
      v12 = "%{public}@Successfully set express settings for wallet key";
      v13 = v10;
      v14 = OS_LOG_TYPE_INFO;
      v15 = 12;
LABEL_6:
      _os_log_impl(&dword_19B1B0000, v13, v14, v12, (uint8_t *)&v17, v15);

    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543618;
    v18 = v11;
    v19 = 2112;
    v20 = v5;
    v12 = "%{public}@Failed to set express settings for wallet key %@";
    v13 = v10;
    v14 = OS_LOG_TYPE_ERROR;
    v15 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v7);
  objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "callCompletion:error:", *(_QWORD *)(a1 + 48), v5);

}

void __67__HMHome_Wallet__enableExpressForWalletKeyWithAuthData_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v11;
      v12 = "%{public}@Successfully enabled express for wallet key";
      v13 = v10;
      v14 = OS_LOG_TYPE_INFO;
      v15 = 12;
LABEL_6:
      _os_log_impl(&dword_19B1B0000, v13, v14, v12, (uint8_t *)&v17, v15);

    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543618;
    v18 = v11;
    v19 = 2112;
    v20 = v5;
    v12 = "%{public}@Failed to enable express for wallet key %@";
    v13 = v10;
    v14 = OS_LOG_TYPE_ERROR;
    v15 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v7);
  objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "callCompletion:error:", *(_QWORD *)(a1 + 48), v5);

}

void __68__HMHome_Wallet__addWalletKeyToPairedWatchesWithOptions_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543362;
      v15 = v11;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Successfully added wallet key to paired watches", (uint8_t *)&v14, 0xCu);
LABEL_6:

    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMHome errorByDeviceWithOverallError:](HMHome, "errorByDeviceWithOverallError:", v5);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543874;
    v15 = v11;
    v16 = 2112;
    v17 = v5;
    v18 = 2112;
    v19 = v12;
    _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to add wallet key to paired watches overall error %@, error by device: %@", (uint8_t *)&v14, 0x20u);

    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v7);
  objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "callCompletion:error:", *(_QWORD *)(a1 + 48), v5);

}

void __50__HMHome_Wallet__fetchHasWalletKeyWithCompletion___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "delegateCaller");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "callCompletion:value:error:", *(_QWORD *)(a1 + 40), a2 != 0, v6);

}

void __60__HMHome_Wallet__addWalletKeyWithOptions_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(v6, "hmf_UUIDForKey:", CFSTR("HMHomeWalletKeyManagerMessageKeyWalletKeyUUID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1A1AC1AAC]();
  v9 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v12;
      v19 = 2112;
      v20 = v7;
      v13 = "%{public}@Successfully added wallet key: %@";
      v14 = v11;
      v15 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl(&dword_19B1B0000, v14, v15, v13, (uint8_t *)&v17, 0x16u);

    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543618;
    v18 = v12;
    v19 = 2112;
    v20 = v5;
    v13 = "%{public}@Failed to add wallet key: %@";
    v14 = v11;
    v15 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v8);
  objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "callCompletion:obj:error:", *(_QWORD *)(a1 + 48), v7, v5);

}

void __53__HMHome_Wallet__addWalletKeyWithOptions_completion___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  id v6;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  objc_msgSend(v4, "delegateCaller");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "callCompletion:error:", *(_QWORD *)(a1 + 40), v5);

}

void __60__HMHome_Wallet__setHasOnboardedForWalletKeyWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  int v22;
  void *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x1A1AC1AAC]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 32);
      v22 = 138543874;
      v23 = v10;
      v24 = 2112;
      v25 = v11;
      v26 = 2112;
      v27 = v5;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to onboard home for wallet key %@:%@", (uint8_t *)&v22, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 32), "context");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "delegateCaller");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    v15 = *(_QWORD *)(a1 + 40);
    v16 = v5;
  }
  else
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC](objc_msgSend(*(id *)(a1 + 32), "setHasOnboardedForWalletKey:", 1));
    v18 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = *(_QWORD *)(a1 + 32);
      v22 = 138543618;
      v23 = v20;
      v24 = 2112;
      v25 = v21;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_INFO, "%{public}@Successfully onboarded home for wallet key: %@", (uint8_t *)&v22, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(*(id *)(a1 + 32), "context");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "delegateCaller");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    v15 = *(_QWORD *)(a1 + 40);
    v16 = 0;
  }
  objc_msgSend(v13, "callCompletion:error:", v15, v16);

}

+ (id)errorByDeviceWithOverallError:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  __CFString *v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  id v20;
  _QWORD v21[3];
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  const __CFString *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(v3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "hmf_dataForKey:", CFSTR("HMHomeWalletKeyErrorUserInfoKeyErrorByDevice"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v6 = (void *)MEMORY[0x1E0C99E60];
    v21[0] = objc_opt_class();
    v21[1] = objc_opt_class();
    v21[2] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setWithArray:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = 0;
    objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v8, v5, &v20);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (__CFString *)v20;
    if (v9)
    {
      v11 = v9;
    }
    else
    {
      v16 = (void *)MEMORY[0x1A1AC1AAC]();
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v23 = v18;
        v24 = 2112;
        v25 = v5;
        v26 = 2112;
        v27 = v10;
        _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode error by device %@:%@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v16);
    }

  }
  else
  {
    v12 = (void *)MEMORY[0x1A1AC1AAC]();
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "userInfo");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v23 = v14;
      v24 = 2112;
      v25 = v15;
      v26 = 2112;
      v27 = CFSTR("HMHomeWalletKeyErrorUserInfoKeyErrorByDevice");
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_INFO, "%{public}@Missing error by device key in error userInfo %@:%@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v12);
    v9 = 0;
  }

  return v9;
}

void __62__HMHome_Light__fetchSettingsForLightProfiles_withCompletion___block_invoke_9(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  id v47;
  _BYTE v48[128];
  _QWORD v49[3];
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  id v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "hmf_dataForKey:", CFSTR("HMHomeMessageKeySettingsByLightProfileUUIDs"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x1E0C99E60];
    v49[0] = objc_opt_class();
    v49[1] = objc_opt_class();
    v49[2] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v49, 3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setWithArray:", v10);
    v11 = objc_claimAutoreleasedReturnValue();

    v47 = 0;
    v42 = (void *)v11;
    objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v11, v8, &v47);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v47;
    v14 = (void *)MEMORY[0x1A1AC1AAC]();
    v15 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = v16;
    if (v12)
    {
      v41 = v7;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v51 = v18;
        v52 = 2112;
        v53 = v12;
        _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_INFO, "%{public}@Successfully fetched settings: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = 0u;
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v40 = a1;
      v20 = *(id *)(a1 + 40);
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
      if (v21)
      {
        v22 = v21;
        v37 = v13;
        v38 = v8;
        v39 = v5;
        v23 = *(_QWORD *)v44;
        do
        {
          for (i = 0; i != v22; ++i)
          {
            if (*(_QWORD *)v44 != v23)
              objc_enumerationMutation(v20);
            v25 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
            objc_msgSend(v25, "lightProfile", v37, v38, v39);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "profileUniqueIdentifier");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "objectForKeyedSubscript:", v27);
            v28 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v19, "setObject:forKey:", v28, v25);
            objc_msgSend(v28, "settings");
            v29 = (void *)objc_claimAutoreleasedReturnValue();

            if (v29)
            {
              objc_msgSend(v28, "settings");
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v25, "updateSettings:withReason:", v30, CFSTR("home fetch of light profile settings"));

            }
          }
          v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
        }
        while (v22);
        v5 = v39;
        a1 = v40;
        v7 = v41;
        v13 = v37;
        v8 = v38;
      }
    }
    else
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v51 = v35;
        v52 = 2112;
        v53 = v13;
        _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode light profile settings: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      v19 = 0;
      v20 = v5;
      v5 = v13;
    }

  }
  else
  {
    v31 = (void *)MEMORY[0x1A1AC1AAC]();
    v32 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v51 = v34;
      v52 = 2112;
      v53 = v5;
      _os_log_impl(&dword_19B1B0000, v33, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch the settings: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v31);
    v19 = 0;
  }
  objc_msgSend(*(id *)(a1 + 48), "delegateCaller");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "callCompletion:obj:error:", *(_QWORD *)(a1 + 56), v19, v5);

}

- (void)joinThreadNetworkWithCompletion:(id)a3
{
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, void *);
  void *v24;
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = objc_alloc(MEMORY[0x1E0D285F8]);
    v7 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](self, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v7, "initWithTarget:", v8);
    v10 = (void *)objc_msgSend(v6, "initWithName:destination:payload:", CFSTR("HMH.joftn"), v9, 0);

    v21 = MEMORY[0x1E0C809B0];
    v22 = 3221225472;
    v23 = __71__HMHome_ThreadResidentCommissioning__joinThreadNetworkWithCompletion___block_invoke;
    v24 = &unk_1E3AB59B8;
    v11 = v5;
    v25 = v11;
    v26 = v4;
    v12 = (void *)MEMORY[0x1A1AC1AAC](objc_msgSend(v10, "setResponseHandler:", &v21));
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v15;
      v29 = 2112;
      v30 = (const char *)v10;
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Request to join thread network using message %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(v11, "messageDispatcher", v21, v22, v23, v24);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "sendMessage:", v10);

  }
  else
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v20;
      v29 = 2080;
      v30 = "-[HMHome(ThreadResidentCommissioning) joinThreadNetworkWithCompletion:]";
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
  }

}

- (void)joinThreadNetwork:(id)a3 withCompletion:(id)a4
{
  char *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  HMHome *v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, void *);
  void *v28;
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  void *v36;
  const __CFString *v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x1E0C80C00];
  v6 = (char *)a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v37 = CFSTR("HMHM.threadNetworkID");
    v38[0] = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v38, &v37, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_alloc(MEMORY[0x1E0D285F8]);
    v11 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](self, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v11, "initWithTarget:", v12);
    v14 = (void *)objc_msgSend(v10, "initWithName:destination:payload:", CFSTR("HMH.joftn"), v13, v9);

    v25 = MEMORY[0x1E0C809B0];
    v26 = 3221225472;
    v27 = __72__HMHome_ThreadResidentCommissioning__joinThreadNetwork_withCompletion___block_invoke;
    v28 = &unk_1E3AB59B8;
    v15 = v8;
    v29 = v15;
    v30 = v7;
    v16 = (void *)MEMORY[0x1A1AC1AAC](objc_msgSend(v14, "setResponseHandler:", &v25));
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v32 = v19;
      v33 = 2112;
      v34 = v6;
      v35 = 2112;
      v36 = v14;
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@Request to join thread network with UUID %@ using message %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(v15, "messageDispatcher", v25, v26, v27, v28);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "sendMessage:", v14);

  }
  else
  {
    v21 = (void *)MEMORY[0x1A1AC1AAC]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v24;
      v33 = 2080;
      v34 = "-[HMHome(ThreadResidentCommissioning) joinThreadNetwork:withCompletion:]";
      _os_log_impl(&dword_19B1B0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
  }

}

- (void)unjoinThreadNetworkWithCompletion:(id)a3
{
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, void *);
  void *v24;
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = objc_alloc(MEMORY[0x1E0D285F8]);
    v7 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](self, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v7, "initWithTarget:", v8);
    v10 = (void *)objc_msgSend(v6, "initWithName:destination:payload:", CFSTR("HMH.unjoftn"), v9, 0);

    v21 = MEMORY[0x1E0C809B0];
    v22 = 3221225472;
    v23 = __73__HMHome_ThreadResidentCommissioning__unjoinThreadNetworkWithCompletion___block_invoke;
    v24 = &unk_1E3AB59B8;
    v11 = v5;
    v25 = v11;
    v26 = v4;
    v12 = (void *)MEMORY[0x1A1AC1AAC](objc_msgSend(v10, "setResponseHandler:", &v21));
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v15;
      v29 = 2112;
      v30 = (const char *)v10;
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Request to unjoin thread network using message %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(v11, "messageDispatcher", v21, v22, v23, v24);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "sendMessage:", v10);

  }
  else
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v20;
      v29 = 2080;
      v30 = "-[HMHome(ThreadResidentCommissioning) unjoinThreadNetworkWithCompletion:]";
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
  }

}

void __73__HMHome_ThreadResidentCommissioning__unjoinThreadNetworkWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "delegateCaller");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 40), v4);

}

void __72__HMHome_ThreadResidentCommissioning__joinThreadNetwork_withCompletion___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "delegateCaller");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 40), v4);

}

void __71__HMHome_ThreadResidentCommissioning__joinThreadNetworkWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "delegateCaller");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 40), v4);

}

- (HMHome)init
{

  return 0;
}

- (HMHome)initWithName:(id)a3 uuid:(id)a4
{
  return -[HMHome initWithName:uuid:mediaSystems:](self, "initWithName:uuid:mediaSystems:", a3, a4, MEMORY[0x1E0C9AA60]);
}

- (void)_unconfigureContext
{
  void *v3;
  void *v4;
  _HMContext *context;

  -[_HMContext messageDispatcher](self->_context, "messageDispatcher");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "deregisterReceiver:", self);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeObserver:", self);

  context = self->_context;
  self->_context = 0;

}

- (void)_unconfigure
{
  void *v3;
  HMHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[128];
  _BYTE v101[128];
  _BYTE v102[128];
  _BYTE v103[128];
  _BYTE v104[128];
  _BYTE v105[128];
  _BYTE v106[128];
  _BYTE v107[128];
  uint8_t v108[128];
  uint8_t buf[4];
  void *v110;
  __int16 v111;
  void *v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1A1AC1AAC](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome name](v4, "name");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v110 = v6;
    v111 = 2112;
    v112 = v7;
    _os_log_impl(&dword_19B1B0000, v5, OS_LOG_TYPE_INFO, "%{public}@Unconfiguring home [%@] and its child objects", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  -[HMHome rooms](v4, "rooms");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v96, v108, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v97;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v97 != v11)
          objc_enumerationMutation(v8);
        objc_msgSend(*(id *)(*((_QWORD *)&v96 + 1) + 8 * v12++), "_unconfigure");
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v96, v108, 16);
    }
    while (v10);
  }

  -[HMHome currentRooms](v4, "currentRooms");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setArray:", 0);

  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  -[HMHome zones](v4, "zones");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v92, v107, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v93;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v93 != v17)
          objc_enumerationMutation(v14);
        objc_msgSend(*(id *)(*((_QWORD *)&v92 + 1) + 8 * v18++), "_unconfigure");
      }
      while (v16 != v18);
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v92, v107, 16);
    }
    while (v16);
  }

  -[HMHome currentZones](v4, "currentZones");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setArray:", 0);

  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  -[HMHome actionSets](v4, "actionSets");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v88, v106, 16);
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)v89;
    do
    {
      v24 = 0;
      do
      {
        if (*(_QWORD *)v89 != v23)
          objc_enumerationMutation(v20);
        objc_msgSend(*(id *)(*((_QWORD *)&v88 + 1) + 8 * v24++), "_unconfigure");
      }
      while (v22 != v24);
      v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v88, v106, 16);
    }
    while (v22);
  }

  -[HMHome currentActionSets](v4, "currentActionSets");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setArray:", 0);

  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  -[HMHome triggerOwnedActionSets](v4, "triggerOwnedActionSets");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v84, v105, 16);
  if (v27)
  {
    v28 = v27;
    v29 = *(_QWORD *)v85;
    do
    {
      v30 = 0;
      do
      {
        if (*(_QWORD *)v85 != v29)
          objc_enumerationMutation(v26);
        objc_msgSend(*(id *)(*((_QWORD *)&v84 + 1) + 8 * v30++), "_unconfigure");
      }
      while (v28 != v30);
      v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v84, v105, 16);
    }
    while (v28);
  }

  -[HMHome currentTriggerOwnedActionSets](v4, "currentTriggerOwnedActionSets");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setArray:", 0);

  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  -[HMHome triggers](v4, "triggers");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v80, v104, 16);
  if (v33)
  {
    v34 = v33;
    v35 = *(_QWORD *)v81;
    do
    {
      v36 = 0;
      do
      {
        if (*(_QWORD *)v81 != v35)
          objc_enumerationMutation(v32);
        objc_msgSend(*(id *)(*((_QWORD *)&v80 + 1) + 8 * v36++), "_unconfigure");
      }
      while (v34 != v36);
      v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v80, v104, 16);
    }
    while (v34);
  }

  -[HMHome currentTriggers](v4, "currentTriggers");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "setArray:", 0);

  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  -[HMHome serviceGroups](v4, "serviceGroups");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v76, v103, 16);
  if (v39)
  {
    v40 = v39;
    v41 = *(_QWORD *)v77;
    do
    {
      v42 = 0;
      do
      {
        if (*(_QWORD *)v77 != v41)
          objc_enumerationMutation(v38);
        objc_msgSend(*(id *)(*((_QWORD *)&v76 + 1) + 8 * v42++), "_unconfigure");
      }
      while (v40 != v42);
      v40 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v76, v103, 16);
    }
    while (v40);
  }

  -[HMHome currentServiceGroups](v4, "currentServiceGroups");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "setArray:", 0);

  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  -[HMHome accessories](v4, "accessories");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v72, v102, 16);
  if (v45)
  {
    v46 = v45;
    v47 = *(_QWORD *)v73;
    do
    {
      v48 = 0;
      do
      {
        if (*(_QWORD *)v73 != v47)
          objc_enumerationMutation(v44);
        objc_msgSend(*(id *)(*((_QWORD *)&v72 + 1) + 8 * v48++), "_unconfigure");
      }
      while (v46 != v48);
      v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v72, v102, 16);
    }
    while (v46);
  }

  -[HMHome currentAccessories](v4, "currentAccessories");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "setArray:", 0);

  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  -[HMHome users](v4, "users");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v68, v101, 16);
  if (v51)
  {
    v52 = v51;
    v53 = *(_QWORD *)v69;
    do
    {
      v54 = 0;
      do
      {
        if (*(_QWORD *)v69 != v53)
          objc_enumerationMutation(v50);
        objc_msgSend(*(id *)(*((_QWORD *)&v68 + 1) + 8 * v54++), "_unconfigure");
      }
      while (v52 != v54);
      v52 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v68, v101, 16);
    }
    while (v52);
  }

  -[HMHome currentUsers](v4, "currentUsers");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v55, "setArray:", 0);

  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  -[HMHome residentDevices](v4, "residentDevices", 0);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v64, v100, 16);
  if (v57)
  {
    v58 = v57;
    v59 = *(_QWORD *)v65;
    do
    {
      v60 = 0;
      do
      {
        if (*(_QWORD *)v65 != v59)
          objc_enumerationMutation(v56);
        objc_msgSend(*(id *)(*((_QWORD *)&v64 + 1) + 8 * v60++), "_unconfigure");
      }
      while (v58 != v60);
      v58 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v64, v100, 16);
    }
    while (v58);
  }

  -[HMHome currentResidentDevices](v4, "currentResidentDevices");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "setArray:", 0);

  -[HMHome mediaSystemStageManager](v4, "mediaSystemStageManager");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v62, "unconfigure");

  -[HMHome accessCodeManager](v4, "accessCodeManager");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v63, "unconfigure");

  -[HMHome setHomeManager:](v4, "setHomeManager:", 0);
  -[HMHome _unconfigureContext](v4, "_unconfigureContext");
}

- (void)unconfigure
{
  void *v3;
  NSObject *v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  _QWORD block[5];
  uint8_t buf[4];
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  -[HMHome context](self, "context");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "queue");
  v4 = objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __21__HMHome_unconfigure__block_invoke;
    block[3] = &unk_1E3AB5E18;
    block[4] = self;
    dispatch_async(v4, block);
  }
  else
  {
    v5 = (void *)MEMORY[0x1A1AC1AAC]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v11 = v8;
      _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempted to unconfigure already unconfigured home", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
  }

}

- (void)dealloc
{
  void *v3;
  NSObject *v4;
  void *v5;
  NSString *name;
  NSUUID *uuid;
  objc_super v8;
  uint8_t buf[4];
  void *v10;
  __int16 v11;
  NSString *v12;
  __int16 v13;
  NSUUID *v14;
  __int16 v15;
  HMHome *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1A1AC1AAC](self, a2);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    name = self->_name;
    uuid = self->_uuid;
    *(_DWORD *)buf = 138544130;
    v10 = v5;
    v11 = 2112;
    v12 = name;
    v13 = 2112;
    v14 = uuid;
    v15 = 2048;
    v16 = self;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Deallocating HMDHome(name=%@, uuid=%@); %p",
      buf,
      0x2Au);

  }
  objc_autoreleasePoolPop(v3);
  v8.receiver = self;
  v8.super_class = (Class)HMHome;
  -[HMHome dealloc](&v8, sel_dealloc);
}

- (id)delegate
{
  os_unfair_lock_s *p_lock;
  id WeakRetained;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  os_unfair_lock_unlock(p_lock);
  return WeakRetained;
}

- (void)setHomeLocationStatus:(int64_t)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_homeLocationStatus = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)setName:(id)a3
{
  NSString *v4;
  NSString *name;
  id v6;

  v6 = a3;
  os_unfair_lock_lock_with_options();
  objc_msgSend(MEMORY[0x1E0D28630], "hmf_cachedInstanceForString:", v6);
  v4 = (NSString *)objc_claimAutoreleasedReturnValue();
  name = self->_name;
  self->_name = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)setHomeLocation:(id)a3
{
  CLLocation *v4;
  CLLocation *homeLocation;

  v4 = (CLLocation *)a3;
  os_unfair_lock_lock_with_options();
  homeLocation = self->_homeLocation;
  self->_homeLocation = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)setCurrentUser:(id)a3
{
  HMUser *v4;
  HMUser *currentUser;

  v4 = (HMUser *)a3;
  os_unfair_lock_lock_with_options();
  currentUser = self->_currentUser;
  self->_currentUser = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)setApplicationData:(id)a3
{
  HMApplicationData *v4;
  HMApplicationData *applicationData;

  v4 = (HMApplicationData *)a3;
  os_unfair_lock_lock_with_options();
  applicationData = self->_applicationData;
  self->_applicationData = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)setSupportedFeatures:(id)a3
{
  NSSet *v4;
  NSSet *supportedFeatures;
  id v6;

  v6 = a3;
  os_unfair_lock_lock_with_options();
  v4 = (NSSet *)objc_msgSend(v6, "copy");
  supportedFeatures = self->_supportedFeatures;
  self->_supportedFeatures = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (NSSet)supportedFeatures
{
  os_unfair_lock_s *p_lock;
  NSSet *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_supportedFeatures;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (BOOL)_setSupportedFeature:(int64_t)a3 enabled:(BOOL)a4
{
  _BOOL4 v4;
  os_unfair_lock_s *p_lock;
  NSSet *v8;
  void *v9;
  void *v10;
  BOOL v11;
  NSSet *v12;
  NSSet *supportedFeatures;

  v4 = a4;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v8 = self->_supportedFeatures;
  v9 = (void *)-[NSSet mutableCopy](v8, "mutableCopy");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    objc_msgSend(v9, "addObject:", v10);
  else
    objc_msgSend(v9, "removeObject:", v10);

  v11 = -[NSSet isEqualToSet:](v8, "isEqualToSet:", v9);
  if (!v11)
  {
    v12 = (NSSet *)objc_msgSend(v9, "copy");
    supportedFeatures = self->_supportedFeatures;
    self->_supportedFeatures = v12;

  }
  os_unfair_lock_unlock(p_lock);
  return !v11;
}

- (BOOL)supportsAddingNetworkRouter
{
  void *v2;
  char v3;

  -[HMHome supportedFeatures](self, "supportedFeatures");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "containsObject:", &unk_1E3B2E5D8);

  return v3;
}

- (void)stageAddedMediaSystem:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMHome mediaSystemStageManager](self, "mediaSystemStageManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stageAddedMediaSystem:", v4);

}

- (void)stageRemovedMediaSystemUUID:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMHome mediaSystemStageManager](self, "mediaSystemStageManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stageRemovedMediaSystemUUID:", v4);

}

- (id)controlTargets
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  -[HMHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v2, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if (objc_msgSend(v9, "supportsTargetControl", (_QWORD)v11))
          objc_msgSend(v3, "addObject:", v9);
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

  return v3;
}

- (id)targetControllers
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  -[HMHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v2, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v9, "supportsTargetController", (_QWORD)v12))
          objc_msgSend(v3, "addObject:", v9);
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

  v10 = (void *)objc_msgSend(v3, "copy");
  return v10;
}

- (BOOL)areNotificationsEnabled
{
  HMHome *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_notificationsEnabled;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (int64_t)protectionMode
{
  os_unfair_lock_s *p_lock;
  int64_t protectionMode;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  protectionMode = self->_protectionMode;
  os_unfair_lock_unlock(p_lock);
  return protectionMode;
}

- (void)setProtectionMode:(int64_t)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_protectionMode = a3;
  os_unfair_lock_unlock(p_lock);
}

- (unint64_t)networkRouterSupport
{
  os_unfair_lock_s *p_lock;
  unint64_t networkRouterSupport;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  networkRouterSupport = self->_networkRouterSupport;
  os_unfair_lock_unlock(p_lock);
  return networkRouterSupport;
}

- (void)setNetworkRouterSupport:(unint64_t)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_networkRouterSupport = a3;
  os_unfair_lock_unlock(p_lock);
}

- (unint64_t)networkRouterSupportDisableReason
{
  os_unfair_lock_s *p_lock;
  unint64_t networkRouterSupportDisableReason;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  networkRouterSupportDisableReason = self->_networkRouterSupportDisableReason;
  os_unfair_lock_unlock(p_lock);
  return networkRouterSupportDisableReason;
}

- (void)setNetworkRouterSupportDisableReason:(unint64_t)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_networkRouterSupportDisableReason = a3;
  os_unfair_lock_unlock(p_lock);
}

- (BOOL)areBulletinNotificationsSupported
{
  HMHome *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_bulletinNotificationsSupported;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (void)setBulletinNotificationsSupported:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_bulletinNotificationsSupported = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)setAccessoryInfoFetch:(id)a3
{
  id v4;
  id accessoryInfoFetch;

  v4 = a3;
  os_unfair_lock_lock_with_options();
  accessoryInfoFetch = self->_accessoryInfoFetch;
  self->_accessoryInfoFetch = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (id)accessoryInfoFetch
{
  os_unfair_lock_s *p_lock;
  id v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_accessoryInfoFetch;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (id)createAndAddActionSetWithName:(id)a3 type:(id)a4 uuid:(id)a5
{
  void *v6;
  void *v7;

  -[HMHome createActionSetWithName:type:uuid:](self, "createActionSetWithName:type:uuid:", a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentTriggerOwnedActionSets](self, "currentTriggerOwnedActionSets");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v6);

  return v6;
}

- (BOOL)adoptTriggerOwnedActionSet:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;

  v4 = a3;
  -[HMHome currentTriggerOwnedActionSets](self, "currentTriggerOwnedActionSets");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "addObjectIfNotPresent:", v4);

  if (v6)
  {
    -[HMHome context](self, "context");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "__configureWithContext:home:", v7, self);

  }
  return v6;
}

- (id)createActionSetWithName:(id)a3 type:(id)a4 uuid:(id)a5
{
  id v8;
  id v9;
  id v10;
  HMActionSet *v11;
  void *v12;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = -[HMActionSet initWithName:type:uuid:]([HMActionSet alloc], "initWithName:type:uuid:", v10, v9, v8);

  -[HMHome context](self, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMActionSet __configureWithContext:home:](v11, "__configureWithContext:home:", v12, self);

  return v11;
}

- (void)_recomputeAssistantIdentifier
{
  NSString *v3;
  NSString *assistantIdentifier;

  hm_assistantIdentifierWithSalts(CFSTR("HM"), (uint64_t)self->_uuid, 0);
  v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  assistantIdentifier = self->_assistantIdentifier;
  self->_assistantIdentifier = v3;

}

- (NSString)assistantIdentifier
{
  os_unfair_lock_s *p_lock;
  NSString *assistantIdentifier;
  NSString *v5;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  assistantIdentifier = self->_assistantIdentifier;
  if (!assistantIdentifier)
  {
    -[HMHome _recomputeAssistantIdentifier](self, "_recomputeAssistantIdentifier");
    assistantIdentifier = self->_assistantIdentifier;
  }
  v5 = assistantIdentifier;
  os_unfair_lock_unlock(p_lock);
  return v5;
}

- (void)recomputeAssistantIdentifier
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  -[HMHome _recomputeAssistantIdentifier](self, "_recomputeAssistantIdentifier");
  os_unfair_lock_unlock(p_lock);
}

- (void)recomputeAssistantIdentifiersWithCompletion:(id)a3
{
  void (**v4)(_QWORD);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  HMHome *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  _QWORD v42[4];
  id v43;
  HMHome *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint8_t buf[4];
  void *v70;
  _BYTE v71[128];
  _BYTE v72[128];
  _BYTE v73[128];
  _BYTE v74[128];
  _BYTE v75[128];
  _BYTE v76[128];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v4 = (void (**)(_QWORD))a3;
  -[HMHome recomputeAssistantIdentifier](self, "recomputeAssistantIdentifier");
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  -[HMHome rooms](self, "rooms");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v65, v76, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v66;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v66 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v65 + 1) + 8 * v9++), "recomputeAssistantIdentifier");
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v65, v76, 16);
    }
    while (v7);
  }

  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  -[HMHome zones](self, "zones");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v61, v75, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v62;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v62 != v13)
          objc_enumerationMutation(v10);
        objc_msgSend(*(id *)(*((_QWORD *)&v61 + 1) + 8 * v14++), "recomputeAssistantIdentifier");
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v61, v75, 16);
    }
    while (v12);
  }

  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  -[HMHome accessories](self, "accessories");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v57, v74, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v58;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v58 != v18)
          objc_enumerationMutation(v15);
        objc_msgSend(*(id *)(*((_QWORD *)&v57 + 1) + 8 * v19++), "recomputeAssistantIdentifier");
      }
      while (v17 != v19);
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v57, v74, 16);
    }
    while (v17);
  }

  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  -[HMHome serviceGroups](self, "serviceGroups");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v53, v73, 16);
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)v54;
    do
    {
      v24 = 0;
      do
      {
        if (*(_QWORD *)v54 != v23)
          objc_enumerationMutation(v20);
        objc_msgSend(*(id *)(*((_QWORD *)&v53 + 1) + 8 * v24++), "recomputeAssistantIdentifier");
      }
      while (v22 != v24);
      v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v53, v73, 16);
    }
    while (v22);
  }

  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  -[HMHome actionSets](self, "actionSets");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v49, v72, 16);
  if (v26)
  {
    v27 = v26;
    v28 = *(_QWORD *)v50;
    do
    {
      v29 = 0;
      do
      {
        if (*(_QWORD *)v50 != v28)
          objc_enumerationMutation(v25);
        objc_msgSend(*(id *)(*((_QWORD *)&v49 + 1) + 8 * v29++), "recomputeAssistantIdentifier");
      }
      while (v27 != v29);
      v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v49, v72, 16);
    }
    while (v27);
  }

  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  -[HMHome triggers](self, "triggers");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v45, v71, 16);
  if (v31)
  {
    v32 = v31;
    v33 = *(_QWORD *)v46;
    do
    {
      v34 = 0;
      do
      {
        if (*(_QWORD *)v46 != v33)
          objc_enumerationMutation(v30);
        objc_msgSend(*(id *)(*((_QWORD *)&v45 + 1) + 8 * v34++), "recomputeAssistantIdentifier");
      }
      while (v32 != v34);
      v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v45, v71, 16);
    }
    while (v32);
  }

  -[HMHome context](self, "context");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome _privateDelegate](self, "_privateDelegate");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v37 = (void *)MEMORY[0x1A1AC1AAC]();
    v38 = self;
    HMFGetOSLogHandle();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v70 = v40;
      _os_log_impl(&dword_19B1B0000, v39, OS_LOG_TYPE_INFO, "%{public}@Notifying client of assistant identifier update", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v37);
    objc_msgSend(v35, "delegateCaller");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42[0] = MEMORY[0x1E0C809B0];
    v42[1] = 3221225472;
    v42[2] = __54__HMHome_recomputeAssistantIdentifiersWithCompletion___block_invoke;
    v42[3] = &unk_1E3AB5ED8;
    v43 = v36;
    v44 = v38;
    objc_msgSend(v41, "invokeBlock:", v42);

  }
  if (v4)
    v4[2](v4);

}

- (void)mergeFromNewObjectNoMergeCount:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  id v14;
  void *v15;
  HMHome *v16;
  NSObject *v17;
  void *v18;
  _QWORD v19[5];
  id v20;
  _QWORD block[5];
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)MEMORY[0x1E0CB3940];
    -[HMHome uuid](self, "uuid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringWithFormat:", CFSTR("Merge-HM-%@-%@"), v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = MEMORY[0x1E0C809B0];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __41__HMHome_mergeFromNewObjectNoMergeCount___block_invoke;
    block[3] = &unk_1E3AB5ED8;
    block[4] = self;
    v12 = v9;
    v22 = v12;
    dispatch_async(v10, block);

    -[HMHome mergeFromNewObject:](self, "mergeFromNewObject:", v4);
    objc_msgSend(v5, "queue");
    v13 = objc_claimAutoreleasedReturnValue();
    v19[0] = v11;
    v19[1] = 3221225472;
    v19[2] = __41__HMHome_mergeFromNewObjectNoMergeCount___block_invoke_2;
    v19[3] = &unk_1E3AB5ED8;
    v19[4] = self;
    v20 = v12;
    v14 = v12;
    dispatch_async(v13, v19);

  }
  else
  {
    v15 = (void *)MEMORY[0x1A1AC1AAC]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v24 = v18;
      v25 = 2080;
      v26 = "-[HMHome mergeFromNewObjectNoMergeCount:]";
      _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
  }

}

- (BOOL)mergeFromNewObject:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  BOOL v16;
  void *v17;
  BOOL v18;
  BOOL v19;
  void *v20;
  void *v21;
  void *v22;
  char v23;
  void *v24;
  BOOL v25;
  void *v26;
  void *v27;
  char v28;
  char v29;
  void *v30;
  HMHome *v31;
  NSObject *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  int v40;
  void *v41;
  HMHome *v42;
  NSObject *v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  NSObject *v48;
  int v49;
  void *v50;
  HMHome *v51;
  NSObject *v52;
  id v53;
  id v54;
  void *v55;
  void *v56;
  NSObject *v57;
  unint64_t v58;
  void *v59;
  HMHome *v60;
  NSObject *v61;
  id v62;
  uint64_t v63;
  void *v64;
  void *v65;
  NSObject *v66;
  int v67;
  void *v68;
  HMHome *v69;
  NSObject *v70;
  id v71;
  _BOOL4 v72;
  void *v73;
  void *v74;
  NSObject *v75;
  unint64_t v76;
  void *v77;
  HMHome *v78;
  NSObject *v79;
  id v80;
  void *v81;
  void *v82;
  NSObject *v83;
  int v84;
  void *v85;
  HMHome *v86;
  NSObject *v87;
  id v88;
  id v89;
  void *v90;
  NSObject *v91;
  int v92;
  void *v93;
  HMHome *v94;
  NSObject *v95;
  id v96;
  id v97;
  void *v98;
  NSObject *v99;
  int v100;
  char v101;
  void *v102;
  HMHome *v103;
  NSObject *v104;
  NSObject *v105;
  id v106;
  int v107;
  const __CFString *v108;
  void *v109;
  void *v110;
  NSObject *v111;
  id v112;
  int v113;
  char v114;
  void *v115;
  HMHome *v116;
  NSObject *v117;
  NSObject *v118;
  id v119;
  int v120;
  const __CFString *v121;
  void *v122;
  void *v123;
  NSObject *v124;
  id v125;
  void *v126;
  HMHome *v127;
  NSObject *v128;
  id v129;
  void *v130;
  void *v131;
  HMHome *v132;
  NSObject *v133;
  id v134;
  void *v135;
  NSObject *v136;
  void *v137;
  HMHome *v138;
  NSObject *v139;
  id v140;
  void *v141;
  void *v142;
  HMHome *v143;
  NSObject *v144;
  id v145;
  id v146;
  void *v147;
  NSObject *v148;
  void *v149;
  HMHome *v150;
  NSObject *v151;
  id v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  char v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  char v163;
  void *v164;
  void *v165;
  NSObject *v166;
  void *v167;
  void *v168;
  char v169;
  HMHomeHubState v170;
  void *v171;
  NSObject *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  uint64_t v177;
  void *v178;
  NSObject *v179;
  uint64_t v180;
  void *v181;
  void *v182;
  id v183;
  void *v184;
  NSObject *v185;
  unint64_t v186;
  void *v187;
  HMHome *v188;
  NSObject *v189;
  id v190;
  void *v191;
  const __CFString *v192;
  void *v193;
  void *v194;
  id v195;
  void *v196;
  HMHome *v197;
  NSObject *v198;
  id v199;
  void *v200;
  NSObject *v201;
  uint64_t v202;
  void *v203;
  HMHome *v204;
  NSObject *v205;
  id v206;
  void *v207;
  const __CFString *v208;
  void *v209;
  void *v210;
  id v211;
  void *v212;
  HMHome *v213;
  NSObject *v214;
  id v215;
  void *v216;
  NSObject *v217;
  void *v218;
  void *v219;
  char v220;
  void *v221;
  HMHome *v222;
  NSObject *v223;
  id v224;
  void *v225;
  void *v226;
  id v227;
  void *v228;
  HMHome *v229;
  NSObject *v230;
  id v231;
  void *v232;
  NSObject *v233;
  uint64_t v234;
  void *v235;
  NSObject *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  NSObject *v242;
  void *v243;
  void *v244;
  char v245;
  void *v246;
  NSObject *v247;
  void *v248;
  void *v249;
  char v250;
  void *v251;
  HMHome *v252;
  NSObject *v253;
  id v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  NSObject *v259;
  void *v260;
  void *v261;
  char v262;
  void *v263;
  int v264;
  void *v265;
  HMHome *v266;
  NSObject *v267;
  id v268;
  id v269;
  id v270;
  void *v271;
  NSObject *v272;
  int v273;
  void *v274;
  HMHome *v275;
  NSObject *v276;
  id v277;
  id v278;
  id v279;
  int v280;
  void *v281;
  HMHome *v282;
  NSObject *v283;
  id v284;
  _BOOL4 v285;
  int v286;
  unint64_t v287;
  void *v288;
  HMHome *v289;
  NSObject *v290;
  id v291;
  uint64_t v292;
  uint64_t v293;
  void *v294;
  void *v295;
  NSObject *v296;
  void *v297;
  void *v298;
  char v299;
  void *v300;
  HMHome *v301;
  NSObject *v302;
  id v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  NSObject *v309;
  void *v310;
  void *v311;
  char v312;
  void *v313;
  HMHome *v314;
  NSObject *v315;
  id v316;
  void *v317;
  int v318;
  void *v319;
  int v320;
  void *v321;
  int v322;
  void *v323;
  NSObject *v324;
  void *v325;
  void *v326;
  char v327;
  void *v328;
  HMHome *v329;
  NSObject *v330;
  id v331;
  void *v332;
  void *v333;
  void *v334;
  void *v335;
  NSObject *v336;
  void *v337;
  void *v338;
  char v339;
  void *v340;
  HMHome *v341;
  NSObject *v342;
  id v343;
  void *v344;
  void *v345;
  void *v346;
  void *v347;
  NSObject *v348;
  int64_t v349;
  void *v350;
  HMHome *v351;
  NSObject *v352;
  id v353;
  unint64_t v354;
  const __CFString *v355;
  unint64_t v356;
  const __CFString *v357;
  void *v358;
  NSObject *v359;
  void *v360;
  HMHome *v361;
  NSObject *v362;
  id v363;
  id v364;
  BOOL v366;
  BOOL v367;
  BOOL v368;
  BOOL v369;
  BOOL v370;
  BOOL v371;
  BOOL v372;
  BOOL v373;
  void *v374;
  id v375;
  _QWORD v376[5];
  _QWORD v377[4];
  id v378;
  HMHome *v379;
  _QWORD v380[4];
  id v381;
  HMHome *v382;
  _QWORD v383[4];
  id v384;
  HMHome *v385;
  _QWORD v386[4];
  id v387;
  id v388;
  HMHome *v389;
  _QWORD v390[4];
  id v391;
  id v392;
  HMHome *v393;
  _QWORD v394[5];
  id v395;
  _QWORD v396[5];
  id v397;
  _QWORD v398[5];
  _QWORD v399[5];
  _QWORD v400[5];
  id v401;
  _QWORD v402[5];
  id v403;
  id v404;
  _QWORD v405[5];
  id v406;
  char v407;
  _QWORD v408[5];
  id v409;
  unint64_t v410;
  _QWORD v411[5];
  id v412;
  char v413;
  _QWORD v414[5];
  id v415;
  char v416;
  _QWORD v417[5];
  _QWORD v418[5];
  _QWORD v419[5];
  id v420;
  _QWORD v421[5];
  id v422;
  _QWORD v423[5];
  id v424;
  _QWORD v425[5];
  id v426;
  _QWORD v427[5];
  _QWORD v428[5];
  _QWORD v429[5];
  _QWORD v430[5];
  id v431;
  _QWORD v432[5];
  id v433;
  _QWORD v434[5];
  id v435;
  _QWORD v436[5];
  id v437;
  _QWORD block[5];
  id v439;
  uint8_t buf[4];
  id v441;
  __int16 v442;
  _BYTE v443[10];
  uint64_t v444;
  uint64_t v445;

  v445 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  if (v6)
  {
    v375 = v4;
    objc_msgSend(v6, "rooms");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v373 = -[HMHome _mergeRooms:](self, "_mergeRooms:", v7);

    objc_msgSend(v6, "zones");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v372 = -[HMHome _mergeZones:](self, "_mergeZones:", v8);

    objc_msgSend(v6, "accessories");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v371 = -[HMHome _mergeAccessories:](self, "_mergeAccessories:", v9);

    objc_msgSend(v6, "serviceGroups");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v370 = -[HMHome _mergeServiceGroups:](self, "_mergeServiceGroups:", v10);

    objc_msgSend(v6, "actionSets");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v369 = -[HMHome _mergeActionSets:](self, "_mergeActionSets:", v11);

    objc_msgSend(v6, "triggerOwnedActionSets");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v368 = -[HMHome _mergeTriggerOwnedActionSets:](self, "_mergeTriggerOwnedActionSets:", v12);

    objc_msgSend(v6, "triggers");
    v13 = objc_claimAutoreleasedReturnValue();
    v367 = -[HMHome _mergeTriggers:](self, "_mergeTriggers:", v13);

    objc_msgSend(v6, "users");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v366 = -[HMHome _mergeUsers:](self, "_mergeUsers:", v14);

    objc_msgSend(v6, "residentDevices");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = -[HMHome _mergeResidentDevices:](self, "_mergeResidentDevices:", v15);

    objc_msgSend(v6, "outgoingInvitations");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = -[HMHome _mergeOutgoingInvitations:](self, "_mergeOutgoingInvitations:", v17);

    v19 = -[HMHome _mergeIsFeatureHomeTheaterQFAEnabled:](self, "_mergeIsFeatureHomeTheaterQFAEnabled:", objc_msgSend(v6, "isFeatureHomeTheaterQFAEnabled"));
    -[HMHome mediaSystemStageManager](self, "mediaSystemStageManager");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "mediaSystems");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome context](self, "context");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v20, "mergeMediaSystems:withHome:context:", v21, self, v22);

    objc_msgSend(v6, "accessoryProtectionGroups");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = -[HMHome _mergeAccessoryProtectionGroups:](self, "_mergeAccessoryProtectionGroups:", v24);

    -[HMHome name](self, "name");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "name");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v13) = objc_msgSend(v26, "isEqualToString:", v27);

    if ((v13 & 1) != 0)
    {
      v28 = (v373 || v372 || v371 || v370 || v369 || v368 || v367 || v366 || v16 || v18 || v19) | v23 | v25;
    }
    else
    {
      v30 = (void *)MEMORY[0x1A1AC1AAC]();
      v31 = self;
      HMFGetOSLogHandle();
      v32 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v33 = (id)objc_claimAutoreleasedReturnValue();
        -[HMHome name](v31, "name");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "name");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v441 = v33;
        v442 = 2112;
        *(_QWORD *)v443 = v34;
        *(_WORD *)&v443[8] = 2112;
        v444 = (uint64_t)v35;
        _os_log_impl(&dword_19B1B0000, v32, OS_LOG_TYPE_INFO, "%{public}@Name updated from %@ to %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v30);
      objc_msgSend(v6, "name");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome setName:](v31, "setName:", v36);

      -[HMHome delegate](v31, "delegate");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[HMHome context](v31, "context");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "queue");
        v39 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __29__HMHome_mergeFromNewObject___block_invoke;
        block[3] = &unk_1E3AB5ED8;
        block[4] = v31;
        v439 = v37;
        dispatch_async(v39, block);

      }
      v28 = 1;
    }
    v40 = -[HMHome soundCheckEnabled](self, "soundCheckEnabled");
    if (v40 != objc_msgSend(v6, "soundCheckEnabled"))
    {
      v41 = (void *)MEMORY[0x1A1AC1AAC](-[HMHome setSoundCheckEnabled:](self, "setSoundCheckEnabled:", objc_msgSend(v6, "soundCheckEnabled")));
      v42 = self;
      HMFGetOSLogHandle();
      v43 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v44 = (id)objc_claimAutoreleasedReturnValue();
        -[HMHome soundCheckEnabled](v42, "soundCheckEnabled");
        HMFBooleanToString();
        v45 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v441 = v44;
        v442 = 2112;
        *(_QWORD *)v443 = v45;
        _os_log_impl(&dword_19B1B0000, v43, OS_LOG_TYPE_INFO, "%{public}@sound check value updated to %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v41);
      -[HMHome _privateDelegate](v42, "_privateDelegate");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[HMHome context](v42, "context");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "queue");
        v48 = objc_claimAutoreleasedReturnValue();
        v436[0] = MEMORY[0x1E0C809B0];
        v436[1] = 3221225472;
        v436[2] = __29__HMHome_mergeFromNewObject___block_invoke_414;
        v436[3] = &unk_1E3AB5ED8;
        v436[4] = v42;
        v437 = v46;
        dispatch_async(v48, v436);

      }
    }
    v49 = -[HMHome supportsResidentActionSetStateEvaluation](self, "supportsResidentActionSetStateEvaluation");
    if (v49 != objc_msgSend(v6, "supportsResidentActionSetStateEvaluation"))
    {
      v50 = (void *)MEMORY[0x1A1AC1AAC](-[HMHome setSupportsResidentActionSetStateEvaluation:](self, "setSupportsResidentActionSetStateEvaluation:", objc_msgSend(v6, "supportsResidentActionSetStateEvaluation")));
      v51 = self;
      HMFGetOSLogHandle();
      v52 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v53 = (id)objc_claimAutoreleasedReturnValue();
        -[HMHome supportsResidentActionSetStateEvaluation](v51, "supportsResidentActionSetStateEvaluation");
        HMFBooleanToString();
        v54 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v441 = v53;
        v442 = 2112;
        *(_QWORD *)v443 = v54;
        _os_log_impl(&dword_19B1B0000, v52, OS_LOG_TYPE_INFO, "%{public}@supportsResidentActionSetStateEvaluation value updated to %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v50);
      -[HMHome _privateDelegate](v51, "_privateDelegate");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[HMHome context](v51, "context");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "queue");
        v57 = objc_claimAutoreleasedReturnValue();
        v434[0] = MEMORY[0x1E0C809B0];
        v434[1] = 3221225472;
        v434[2] = __29__HMHome_mergeFromNewObject___block_invoke_418;
        v434[3] = &unk_1E3AB5ED8;
        v434[4] = v51;
        v435 = v55;
        dispatch_async(v57, v434);

      }
    }
    v58 = -[HMHome audioAnalysisClassifierOptions](self, "audioAnalysisClassifierOptions");
    if (v58 != objc_msgSend(v6, "audioAnalysisClassifierOptions"))
    {
      v59 = (void *)MEMORY[0x1A1AC1AAC](-[HMHome setAudioAnalysisClassifierOptions:](self, "setAudioAnalysisClassifierOptions:", objc_msgSend(v6, "audioAnalysisClassifierOptions")));
      v60 = self;
      HMFGetOSLogHandle();
      v61 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v62 = (id)objc_claimAutoreleasedReturnValue();
        v63 = -[HMHome audioAnalysisClassifierOptions](v60, "audioAnalysisClassifierOptions");
        *(_DWORD *)buf = 138543618;
        v441 = v62;
        v442 = 2048;
        *(_QWORD *)v443 = v63;
        _os_log_impl(&dword_19B1B0000, v61, OS_LOG_TYPE_INFO, "%{public}@Audio analysis classifier options updated to %lu", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v59);
      -[HMHome _privateDelegate](v60, "_privateDelegate");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[HMHome context](v60, "context");
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v65, "queue");
        v66 = objc_claimAutoreleasedReturnValue();
        v432[0] = MEMORY[0x1E0C809B0];
        v432[1] = 3221225472;
        v432[2] = __29__HMHome_mergeFromNewObject___block_invoke_422;
        v432[3] = &unk_1E3AB5ED8;
        v432[4] = v60;
        v433 = v64;
        dispatch_async(v66, v432);

      }
    }
    v67 = -[HMHome didOnboardAudioAnalysis](self, "didOnboardAudioAnalysis");
    if (v67 != objc_msgSend(v6, "didOnboardAudioAnalysis"))
    {
      v68 = (void *)MEMORY[0x1A1AC1AAC](-[HMHome setDidOnboardAudioAnalysis:](self, "setDidOnboardAudioAnalysis:", objc_msgSend(v6, "didOnboardAudioAnalysis")));
      v69 = self;
      HMFGetOSLogHandle();
      v70 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v71 = (id)objc_claimAutoreleasedReturnValue();
        v72 = -[HMHome didOnboardAudioAnalysis](v69, "didOnboardAudioAnalysis");
        *(_DWORD *)buf = 138543618;
        v441 = v71;
        v442 = 2048;
        *(_QWORD *)v443 = v72;
        _os_log_impl(&dword_19B1B0000, v70, OS_LOG_TYPE_INFO, "%{public}@Did onboard audio analysis updated to %lu", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v68);
      -[HMHome _privateDelegate](v69, "_privateDelegate");
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[HMHome context](v69, "context");
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v74, "queue");
        v75 = objc_claimAutoreleasedReturnValue();
        v430[0] = MEMORY[0x1E0C809B0];
        v430[1] = 3221225472;
        v430[2] = __29__HMHome_mergeFromNewObject___block_invoke_426;
        v430[3] = &unk_1E3AB5ED8;
        v430[4] = v69;
        v431 = v73;
        dispatch_async(v75, v430);

      }
    }
    v76 = -[HMHome siriPhraseOptions](self, "siriPhraseOptions");
    if (v76 != objc_msgSend(v6, "siriPhraseOptions"))
    {
      v77 = (void *)MEMORY[0x1A1AC1AAC](-[HMHome setSiriPhraseOptions:](self, "setSiriPhraseOptions:", objc_msgSend(v6, "siriPhraseOptions")));
      v78 = self;
      HMFGetOSLogHandle();
      v79 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v80 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[HMHome siriPhraseOptions](v78, "siriPhraseOptions"));
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v441 = v80;
        v442 = 2112;
        *(_QWORD *)v443 = v81;
        _os_log_impl(&dword_19B1B0000, v79, OS_LOG_TYPE_INFO, "%{public}@Siri phrase options updated to %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v77);
      -[HMHome context](v78, "context");
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v82, "queue");
      v83 = objc_claimAutoreleasedReturnValue();
      v429[0] = MEMORY[0x1E0C809B0];
      v429[1] = 3221225472;
      v429[2] = __29__HMHome_mergeFromNewObject___block_invoke_428;
      v429[3] = &unk_1E3AB5E18;
      v429[4] = v78;
      dispatch_async(v83, v429);

    }
    v84 = -[HMHome isLocationServicesEnabled](self, "isLocationServicesEnabled");
    if (v84 != objc_msgSend(v6, "isLocationServicesEnabled"))
    {
      v85 = (void *)MEMORY[0x1A1AC1AAC]();
      v86 = self;
      HMFGetOSLogHandle();
      v87 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v88 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "isLocationServicesEnabled");
        HMFBooleanToString();
        v89 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v441 = v88;
        v442 = 2112;
        *(_QWORD *)v443 = v89;
        _os_log_impl(&dword_19B1B0000, v87, OS_LOG_TYPE_INFO, "%{public}@Updating location services: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v85);
      -[HMHome setLocationServicesEnabled:](v86, "setLocationServicesEnabled:", objc_msgSend(v6, "isLocationServicesEnabled"));
      -[HMHome context](v86, "context");
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v90, "queue");
      v91 = objc_claimAutoreleasedReturnValue();
      v428[0] = MEMORY[0x1E0C809B0];
      v428[1] = 3221225472;
      v428[2] = __29__HMHome_mergeFromNewObject___block_invoke_432;
      v428[3] = &unk_1E3AB5E18;
      v428[4] = v86;
      dispatch_async(v91, v428);

    }
    v92 = -[HMHome didOnboardLocationServices](self, "didOnboardLocationServices");
    if (v92 != objc_msgSend(v6, "didOnboardLocationServices"))
    {
      v93 = (void *)MEMORY[0x1A1AC1AAC]();
      v94 = self;
      HMFGetOSLogHandle();
      v95 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v96 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "didOnboardLocationServices");
        HMFBooleanToString();
        v97 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v441 = v96;
        v442 = 2112;
        *(_QWORD *)v443 = v97;
        _os_log_impl(&dword_19B1B0000, v95, OS_LOG_TYPE_INFO, "%{public}@Updating did onboard location services: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v93);
      -[HMHome setDidOnboardLocationServices:](v94, "setDidOnboardLocationServices:", objc_msgSend(v6, "didOnboardLocationServices"));
      -[HMHome context](v94, "context");
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v98, "queue");
      v99 = objc_claimAutoreleasedReturnValue();
      v427[0] = MEMORY[0x1E0C809B0];
      v427[1] = 3221225472;
      v427[2] = __29__HMHome_mergeFromNewObject___block_invoke_436;
      v427[3] = &unk_1E3AB5E18;
      v427[4] = v94;
      dispatch_async(v99, v427);

    }
    v100 = -[HMHome multiUserEnabled](self, "multiUserEnabled");
    if (v100 != objc_msgSend(v6, "multiUserEnabled"))
    {
      v101 = objc_msgSend(v6, "multiUserEnabled");
      v102 = (void *)MEMORY[0x1A1AC1AAC]();
      v103 = self;
      HMFGetOSLogHandle();
      v104 = (id)objc_claimAutoreleasedReturnValue();
      v105 = v104;
      if ((v101 & 1) != 0)
      {
        if (os_log_type_enabled(v104, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v106 = (id)objc_claimAutoreleasedReturnValue();
          v107 = objc_msgSend(v6, "multiUserEnabled");
          v108 = CFSTR("NO");
          *(_DWORD *)buf = 138543874;
          v441 = v106;
          v442 = 2112;
          if (v107)
            v108 = CFSTR("YES");
          *(_QWORD *)v443 = v108;
          *(_WORD *)&v443[8] = 2112;
          v444 = (uint64_t)v103;
          _os_log_impl(&dword_19B1B0000, v105, OS_LOG_TYPE_INFO, "%{public}@multiUserEnabled value %@ is merging into home: %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v102);
        -[HMHome setMultiUserEnabled:](v103, "setMultiUserEnabled:", objc_msgSend(v6, "multiUserEnabled"));
        -[HMHome _privateDelegate](v103, "_privateDelegate");
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          -[HMHome context](v103, "context");
          v110 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v110, "queue");
          v111 = objc_claimAutoreleasedReturnValue();
          v425[0] = MEMORY[0x1E0C809B0];
          v425[1] = 3221225472;
          v425[2] = __29__HMHome_mergeFromNewObject___block_invoke_446;
          v425[3] = &unk_1E3AB5ED8;
          v425[4] = v103;
          v426 = v109;
          dispatch_async(v111, v425);

        }
        v28 = 1;
      }
      else
      {
        if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v112 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v441 = v112;
          v442 = 2112;
          *(_QWORD *)v443 = v103;
          _os_log_impl(&dword_19B1B0000, v105, OS_LOG_TYPE_ERROR, "%{public}@multiUserEnabled value (NO) will not be merged into home: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v102);
      }
    }
    v113 = -[HMHome hasAnyUserAcknowledgedCameraRecordingOnboarding](self, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
    if (v113 != objc_msgSend(v6, "hasAnyUserAcknowledgedCameraRecordingOnboarding"))
    {
      v114 = objc_msgSend(v6, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
      v115 = (void *)MEMORY[0x1A1AC1AAC]();
      v116 = self;
      HMFGetOSLogHandle();
      v117 = (id)objc_claimAutoreleasedReturnValue();
      v118 = v117;
      if ((v114 & 1) != 0)
      {
        if (os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v119 = (id)objc_claimAutoreleasedReturnValue();
          v120 = objc_msgSend(v6, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
          v121 = CFSTR("NO");
          *(_DWORD *)buf = 138543874;
          v441 = v119;
          v442 = 2112;
          if (v120)
            v121 = CFSTR("YES");
          *(_QWORD *)v443 = v121;
          *(_WORD *)&v443[8] = 2112;
          v444 = (uint64_t)v116;
          _os_log_impl(&dword_19B1B0000, v118, OS_LOG_TYPE_INFO, "%{public}@hasAnyUserAcknowledgedCameraRecordingOnboarding value %@ is merging into home: %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v115);
        -[HMHome setHasAnyUserAcknowledgedCameraRecordingOnboarding:](v116, "setHasAnyUserAcknowledgedCameraRecordingOnboarding:", objc_msgSend(v6, "hasAnyUserAcknowledgedCameraRecordingOnboarding"));
        -[HMHome _privateDelegate](v116, "_privateDelegate");
        v122 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          -[HMHome context](v116, "context");
          v123 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v123, "queue");
          v124 = objc_claimAutoreleasedReturnValue();
          v423[0] = MEMORY[0x1E0C809B0];
          v423[1] = 3221225472;
          v423[2] = __29__HMHome_mergeFromNewObject___block_invoke_450;
          v423[3] = &unk_1E3AB5ED8;
          v423[4] = v116;
          v424 = v122;
          dispatch_async(v124, v423);

        }
        v28 = 1;
      }
      else
      {
        if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v125 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v441 = v125;
          v442 = 2112;
          *(_QWORD *)v443 = v116;
          _os_log_impl(&dword_19B1B0000, v118, OS_LOG_TYPE_ERROR, "%{public}@hasAnyUserAcknowledgedCameraRecordingOnboarding value (NO) will not be merged into home: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v115);
      }
    }
    if (objc_msgSend(v6, "hasOnboardedForAccessCode")
      && !-[HMHome hasOnboardedForAccessCode](self, "hasOnboardedForAccessCode"))
    {
      v126 = (void *)MEMORY[0x1A1AC1AAC]();
      v127 = self;
      HMFGetOSLogHandle();
      v128 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v128, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v129 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v441 = v129;
        _os_log_impl(&dword_19B1B0000, v128, OS_LOG_TYPE_INFO, "%{public}@Updating has onboarded home for access code", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v126);
      -[HMHome setHasOnboardedForAccessCode:](v127, "setHasOnboardedForAccessCode:", 1);
      -[HMHome _privateDelegate](v127, "_privateDelegate");
      v130 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v131 = (void *)MEMORY[0x1A1AC1AAC]();
        v132 = v127;
        HMFGetOSLogHandle();
        v133 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v134 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v441 = v134;
          v442 = 2112;
          *(_QWORD *)v443 = v130;
          _os_log_impl(&dword_19B1B0000, v133, OS_LOG_TYPE_INFO, "%{public}@Notifying delegate of updated has onboarded home for access code: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v131);
        -[HMHome context](v132, "context");
        v135 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v135, "queue");
        v136 = objc_claimAutoreleasedReturnValue();
        v421[0] = MEMORY[0x1E0C809B0];
        v421[1] = 3221225472;
        v421[2] = __29__HMHome_mergeFromNewObject___block_invoke_454;
        v421[3] = &unk_1E3AB5ED8;
        v421[4] = v132;
        v422 = v130;
        dispatch_async(v136, v421);

      }
      v28 = 1;
    }
    if (objc_msgSend(v6, "hasOnboardedForWalletKey")
      && !-[HMHome hasOnboardedForWalletKey](self, "hasOnboardedForWalletKey"))
    {
      v137 = (void *)MEMORY[0x1A1AC1AAC]();
      v138 = self;
      HMFGetOSLogHandle();
      v139 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v139, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v140 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v441 = v140;
        _os_log_impl(&dword_19B1B0000, v139, OS_LOG_TYPE_INFO, "%{public}@Updating has onboarded home for wallet key", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v137);
      -[HMHome setHasOnboardedForWalletKey:](v138, "setHasOnboardedForWalletKey:", 1);
      -[HMHome _privateDelegate](v138, "_privateDelegate");
      v141 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v142 = (void *)MEMORY[0x1A1AC1AAC]();
        v143 = v138;
        HMFGetOSLogHandle();
        v144 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v144, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v145 = (id)objc_claimAutoreleasedReturnValue();
          -[HMHome hasOnboardedForWalletKey](v143, "hasOnboardedForWalletKey");
          HMFBooleanToString();
          v146 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v441 = v145;
          v442 = 2112;
          *(_QWORD *)v443 = v141;
          *(_WORD *)&v443[8] = 2112;
          v444 = (uint64_t)v146;
          _os_log_impl(&dword_19B1B0000, v144, OS_LOG_TYPE_INFO, "%{public}@Notifying delegate %@ of updated has onboarded for wallet key: %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v142);
        -[HMHome context](v143, "context");
        v147 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v147, "queue");
        v148 = objc_claimAutoreleasedReturnValue();
        v419[0] = MEMORY[0x1E0C809B0];
        v419[1] = 3221225472;
        v419[2] = __29__HMHome_mergeFromNewObject___block_invoke_458;
        v419[3] = &unk_1E3AB5ED8;
        v419[4] = v143;
        v420 = v141;
        dispatch_async(v148, v419);

      }
      v28 = 1;
    }
    if (objc_msgSend(v6, "dismissedWalletKeyUWBUnlockOnboarding")
      && !-[HMHome dismissedWalletKeyUWBUnlockOnboarding](self, "dismissedWalletKeyUWBUnlockOnboarding"))
    {
      v149 = (void *)MEMORY[0x1A1AC1AAC]();
      v150 = self;
      HMFGetOSLogHandle();
      v151 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v151, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v152 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v441 = v152;
        _os_log_impl(&dword_19B1B0000, v151, OS_LOG_TYPE_INFO, "%{public}@Updating dismissedWalletKeyUWBUnlockOnboarding", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v149);
      -[HMHome setDismissedWalletKeyUWBUnlockOnboarding:](v150, "setDismissedWalletKeyUWBUnlockOnboarding:", objc_msgSend(v6, "dismissedWalletKeyUWBUnlockOnboarding"));
      v28 = 1;
    }
    -[HMHome(HMRoom) roomForEntireHome](self, "roomForEntireHome");
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v153, "name");
    v154 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "roomForEntireHome");
    v155 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v155, "name");
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    v157 = objc_msgSend(v154, "isEqual:", v156);

    if ((v157 & 1) == 0)
    {
      -[HMHome(HMRoom) roomForEntireHome](self, "roomForEntireHome");
      v158 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "roomForEntireHome");
      v159 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v159, "name");
      v160 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v158, "_updateName:completionHandler:", v160, 0);

    }
    -[HMHome applicationData](self, "applicationData");
    v161 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "applicationData");
    v162 = (void *)objc_claimAutoreleasedReturnValue();
    v163 = HMFEqualObjects();

    if ((v163 & 1) == 0)
    {
      objc_msgSend(v6, "applicationData");
      v164 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome setApplicationData:](self, "setApplicationData:", v164);

      -[HMHome context](self, "context");
      v165 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v165, "queue");
      v166 = objc_claimAutoreleasedReturnValue();
      v418[0] = MEMORY[0x1E0C809B0];
      v418[1] = 3221225472;
      v418[2] = __29__HMHome_mergeFromNewObject___block_invoke_460;
      v418[3] = &unk_1E3AB5E18;
      v418[4] = self;
      dispatch_async(v166, v418);

      v28 = 1;
    }
    -[HMHome(HMRoom) roomForEntireHome](self, "roomForEntireHome");
    v167 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "roomForEntireHome");
    v168 = (void *)objc_claimAutoreleasedReturnValue();
    v169 = objc_msgSend(v167, "mergeFromNewObject:", v168);

    v170 = -[HMHome homeHubState](self, "homeHubState");
    if (v170 == objc_msgSend(v6, "homeHubState"))
    {
      v29 = v169 | v28;
    }
    else
    {
      self->_homeHubState = objc_msgSend(v6, "homeHubState");
      -[HMHome context](self, "context");
      v171 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v171, "queue");
      v172 = objc_claimAutoreleasedReturnValue();
      v417[0] = MEMORY[0x1E0C809B0];
      v417[1] = 3221225472;
      v417[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_461;
      v417[3] = &unk_1E3AB5E18;
      v417[4] = self;
      dispatch_async(v172, v417);

      v29 = 1;
    }
    -[HMHome setAdminUser:](self, "setAdminUser:", objc_msgSend(v6, "isAdminUser"));
    -[HMHome setOwnerUser:](self, "setOwnerUser:", objc_msgSend(v6, "isOwnerUser"));
    -[HMHome setNotificationsEnabled:](self, "setNotificationsEnabled:", objc_msgSend(v6, "areNotificationsEnabled"));
    objc_msgSend(v6, "notificationsUpdatedTime");
    v173 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome setNotificationsUpdatedTime:](self, "setNotificationsUpdatedTime:", v173);

    -[HMHome currentUser](self, "currentUser");
    v174 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "currentUser");
    v175 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v174, "mergeFromNewObject:", v175);

    -[HMHome _privateDelegate](self, "_privateDelegate");
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    v177 = objc_msgSend(v6, "isAutomaticSoftwareUpdateEnabled");
    if ((_DWORD)v177 != -[HMHome isAutomaticSoftwareUpdateEnabled](self, "isAutomaticSoftwareUpdateEnabled"))
    {
      -[HMHome setAutomaticSoftwareUpdateEnabled:](self, "setAutomaticSoftwareUpdateEnabled:", v177);
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[HMHome context](self, "context");
        v178 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v178, "queue");
        v179 = objc_claimAutoreleasedReturnValue();
        v414[0] = MEMORY[0x1E0C809B0];
        v414[1] = 3221225472;
        v414[2] = __29__HMHome_mergeFromNewObject___block_invoke_3;
        v414[3] = &unk_1E3AB57F8;
        v414[4] = self;
        v415 = v176;
        v416 = v177;
        dispatch_async(v179, v414);

      }
      v29 = 1;
    }
    v180 = objc_msgSend(v6, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled");
    if ((_DWORD)v180 != -[HMHome isAutomaticThirdPartyAccessorySoftwareUpdateEnabled](self, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled"))
    {
      -[HMHome setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:](self, "setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:", v180);
      -[HMHome delegate](self, "delegate");
      v181 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v181, "conformsToProtocol:", &unk_1EE45A110))
        v182 = v181;
      else
        v182 = 0;
      v183 = v182;

      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[HMHome context](self, "context");
        v184 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v184, "queue");
        v185 = objc_claimAutoreleasedReturnValue();
        v411[0] = MEMORY[0x1E0C809B0];
        v411[1] = 3221225472;
        v411[2] = __29__HMHome_mergeFromNewObject___block_invoke_5;
        v411[3] = &unk_1E3AB57F8;
        v411[4] = self;
        v412 = v183;
        v413 = v180;
        dispatch_async(v185, v411);

      }
      v29 = 1;
    }
    v186 = objc_msgSend(v6, "minimumMediaUserPrivilege");
    if (-[HMHome minimumMediaUserPrivilege](self, "minimumMediaUserPrivilege") != v186)
    {
      v187 = (void *)MEMORY[0x1A1AC1AAC]();
      v188 = self;
      HMFGetOSLogHandle();
      v189 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v190 = (id)objc_claimAutoreleasedReturnValue();
        v191 = v190;
        if (v186 > 3)
          v192 = CFSTR("Unknown");
        else
          v192 = off_1E3AB1B78[v186];
        *(_DWORD *)buf = 138543618;
        v441 = v190;
        v442 = 2112;
        *(_QWORD *)v443 = v192;
        _os_log_impl(&dword_19B1B0000, v189, OS_LOG_TYPE_DEFAULT, "%{public}@Updating minimum media user privilege: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v187);
      -[HMHome setMinimumMediaUserPrivilege:](v188, "setMinimumMediaUserPrivilege:", v186);
      -[HMHome delegate](v188, "delegate");
      v193 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v193, "conformsToProtocol:", &unk_1EE45A110))
        v194 = v193;
      else
        v194 = 0;
      v195 = v194;

      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v196 = (void *)MEMORY[0x1A1AC1AAC]();
        v197 = v188;
        HMFGetOSLogHandle();
        v198 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v198, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v199 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v441 = v199;
          _os_log_impl(&dword_19B1B0000, v198, OS_LOG_TYPE_INFO, "%{public}@Notifying delegate of updated minimum media user privilege", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v196);
        -[HMHome context](v197, "context");
        v200 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v200, "queue");
        v201 = objc_claimAutoreleasedReturnValue();
        v408[0] = MEMORY[0x1E0C809B0];
        v408[1] = 3221225472;
        v408[2] = __29__HMHome_mergeFromNewObject___block_invoke_608;
        v408[3] = &unk_1E3AB5C80;
        v408[4] = v197;
        v409 = v195;
        v410 = v186;
        dispatch_async(v201, v408);

      }
      v29 = 1;
    }
    v202 = objc_msgSend(v6, "isMediaPeerToPeerEnabled");
    if ((_DWORD)v202 != -[HMHome isMediaPeerToPeerEnabled](self, "isMediaPeerToPeerEnabled"))
    {
      v203 = (void *)MEMORY[0x1A1AC1AAC]();
      v204 = self;
      HMFGetOSLogHandle();
      v205 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v206 = (id)objc_claimAutoreleasedReturnValue();
        v207 = v206;
        v208 = CFSTR("disabled");
        if ((_DWORD)v202)
          v208 = CFSTR("enabled");
        *(_DWORD *)buf = 138543618;
        v441 = v206;
        v442 = 2112;
        *(_QWORD *)v443 = v208;
        _os_log_impl(&dword_19B1B0000, v205, OS_LOG_TYPE_DEFAULT, "%{public}@Updating media peer-to-peer to '%@'", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v203);
      -[HMHome setMediaPeerToPeerEnabled:](v204, "setMediaPeerToPeerEnabled:", v202);
      -[HMHome delegate](v204, "delegate");
      v209 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v209, "conformsToProtocol:", &unk_1EE45A110))
        v210 = v209;
      else
        v210 = 0;
      v211 = v210;

      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v212 = (void *)MEMORY[0x1A1AC1AAC]();
        v213 = v204;
        HMFGetOSLogHandle();
        v214 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v214, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v215 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v441 = v215;
          _os_log_impl(&dword_19B1B0000, v214, OS_LOG_TYPE_INFO, "%{public}@Notifying delegate of updated media peer-to-peer enabled", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v212);
        -[HMHome context](v213, "context");
        v216 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v216, "queue");
        v217 = objc_claimAutoreleasedReturnValue();
        v405[0] = MEMORY[0x1E0C809B0];
        v405[1] = 3221225472;
        v405[2] = __29__HMHome_mergeFromNewObject___block_invoke_615;
        v405[3] = &unk_1E3AB57F8;
        v405[4] = v213;
        v406 = v211;
        v407 = v202;
        dispatch_async(v217, v405);

      }
      v29 = 1;
    }
    objc_msgSend(v6, "mediaPassword");
    v218 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome mediaPassword](self, "mediaPassword");
    v219 = (void *)objc_claimAutoreleasedReturnValue();
    v220 = HMFEqualObjects();

    if ((v220 & 1) == 0)
    {
      v221 = (void *)MEMORY[0x1A1AC1AAC]();
      v222 = self;
      HMFGetOSLogHandle();
      v223 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v223, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v224 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v441 = v224;
        v442 = 2112;
        *(_QWORD *)v443 = v218;
        _os_log_impl(&dword_19B1B0000, v223, OS_LOG_TYPE_DEFAULT, "%{public}@Updating media password to: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v221);
      -[HMHome setMediaPassword:](v222, "setMediaPassword:", v218);
      -[HMHome delegate](v222, "delegate");
      v225 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v225, "conformsToProtocol:", &unk_1EE45A110))
        v226 = v225;
      else
        v226 = 0;
      v227 = v226;

      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v228 = (void *)MEMORY[0x1A1AC1AAC]();
        v229 = v222;
        HMFGetOSLogHandle();
        v230 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v230, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v231 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v441 = v231;
          _os_log_impl(&dword_19B1B0000, v230, OS_LOG_TYPE_INFO, "%{public}@Notifying delegate of updated media password", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v228);
        -[HMHome context](v229, "context");
        v232 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v232, "queue");
        v233 = objc_claimAutoreleasedReturnValue();
        v402[0] = MEMORY[0x1E0C809B0];
        v402[1] = 3221225472;
        v402[2] = __29__HMHome_mergeFromNewObject___block_invoke_618;
        v402[3] = &unk_1E3AB5CD0;
        v402[4] = v229;
        v403 = v227;
        v404 = v218;
        dispatch_async(v233, v402);

      }
      v29 = 1;
    }

    v234 = objc_msgSend(v6, "protectionMode");
    if (v234 != -[HMHome protectionMode](self, "protectionMode"))
    {
      -[HMHome setProtectionMode:](self, "setProtectionMode:", objc_msgSend(v6, "protectionMode"));
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[HMHome context](self, "context");
        v235 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v235, "queue");
        v236 = objc_claimAutoreleasedReturnValue();
        v400[0] = MEMORY[0x1E0C809B0];
        v400[1] = 3221225472;
        v400[2] = __29__HMHome_mergeFromNewObject___block_invoke_3_621;
        v400[3] = &unk_1E3AB5ED8;
        v400[4] = self;
        v401 = v176;
        dispatch_async(v236, v400);

      }
      v29 = 1;
    }
    v237 = objc_msgSend(v6, "networkRouterSupportDisableReason");
    if (v237 != -[HMHome networkRouterSupportDisableReason](self, "networkRouterSupportDisableReason"))
    {
      -[HMHome setNetworkRouterSupportDisableReason:](self, "setNetworkRouterSupportDisableReason:", objc_msgSend(v6, "networkRouterSupportDisableReason"));
      v238 = -[HMHome networkRouterSupportDisableReason](self, "networkRouterSupportDisableReason");
      v239 = ((uint64_t)(v238 << 60) >> 63) & 3;
      if ((v238 & 7) != 0)
        v239 = 7;
      v240 = v239 | (v238 >> 3) & 2;
      if (-[HMHome networkRouterSupport](self, "networkRouterSupport") != v240)
      {
        -[HMHome setNetworkRouterSupport:](self, "setNetworkRouterSupport:", v240);
        -[HMHome context](self, "context");
        v241 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v241, "queue");
        v242 = objc_claimAutoreleasedReturnValue();
        v399[0] = MEMORY[0x1E0C809B0];
        v399[1] = 3221225472;
        v399[2] = __29__HMHome_mergeFromNewObject___block_invoke_5_623;
        v399[3] = &unk_1E3AB5E18;
        v399[4] = self;
        dispatch_async(v242, v399);

      }
      v29 = 1;
    }
    objc_msgSend(v6, "supportedFeatures");
    v243 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome supportedFeatures](self, "supportedFeatures");
    v244 = (void *)objc_claimAutoreleasedReturnValue();
    v245 = objc_msgSend(v243, "isEqualToSet:", v244);

    if ((v245 & 1) == 0)
    {
      -[HMHome setSupportedFeatures:](self, "setSupportedFeatures:", v243);
      -[HMHome context](self, "context");
      v246 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v246, "queue");
      v247 = objc_claimAutoreleasedReturnValue();
      v398[0] = MEMORY[0x1E0C809B0];
      v398[1] = 3221225472;
      v398[2] = __29__HMHome_mergeFromNewObject___block_invoke_6_624;
      v398[3] = &unk_1E3AB5E18;
      v398[4] = self;
      dispatch_async(v247, v398);

      v29 = 1;
    }
    -[HMHome personManagerSettings](self, "personManagerSettings");
    v248 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "personManagerSettings");
    v249 = (void *)objc_claimAutoreleasedReturnValue();
    v250 = HMFEqualObjects();

    if ((v250 & 1) == 0)
    {
      v251 = (void *)MEMORY[0x1A1AC1AAC]();
      v252 = self;
      HMFGetOSLogHandle();
      v253 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v253, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v254 = (id)objc_claimAutoreleasedReturnValue();
        -[HMHome personManagerSettings](v252, "personManagerSettings");
        v255 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "personManagerSettings");
        v256 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v441 = v254;
        v442 = 2112;
        *(_QWORD *)v443 = v255;
        *(_WORD *)&v443[8] = 2112;
        v444 = (uint64_t)v256;
        _os_log_impl(&dword_19B1B0000, v253, OS_LOG_TYPE_INFO, "%{public}@Person manager settings updated from %@ to %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v251);
      objc_msgSend(v6, "personManagerSettings");
      v257 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome setPersonManagerSettings:](v252, "setPersonManagerSettings:", v257);

      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[HMHome context](v252, "context");
        v258 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v258, "queue");
        v259 = objc_claimAutoreleasedReturnValue();
        v396[0] = MEMORY[0x1E0C809B0];
        v396[1] = 3221225472;
        v396[2] = __29__HMHome_mergeFromNewObject___block_invoke_626;
        v396[3] = &unk_1E3AB5ED8;
        v396[4] = v252;
        v397 = v176;
        dispatch_async(v259, v396);

      }
      v29 = 1;
    }
    -[HMHome supportedSiriEndPointVersion](self, "supportedSiriEndPointVersion");
    v260 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "supportedSiriEndPointVersion");
    v261 = (void *)objc_claimAutoreleasedReturnValue();
    v262 = objc_msgSend(v260, "isEqualToVersion:", v261);

    if ((v262 & 1) == 0)
    {
      objc_msgSend(v6, "supportedSiriEndPointVersion");
      v263 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome setSupportedSiriEndPointVersion:](self, "setSupportedSiriEndPointVersion:", v263);

      v29 = 1;
    }
    v264 = -[HMHome areBulletinNotificationsSupported](self, "areBulletinNotificationsSupported");
    if (v264 != objc_msgSend(v6, "areBulletinNotificationsSupported"))
    {
      v265 = (void *)MEMORY[0x1A1AC1AAC]();
      v266 = self;
      HMFGetOSLogHandle();
      v267 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v267, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v268 = (id)objc_claimAutoreleasedReturnValue();
        -[HMHome areBulletinNotificationsSupported](v266, "areBulletinNotificationsSupported");
        HMFBooleanToString();
        v269 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "areBulletinNotificationsSupported");
        HMFBooleanToString();
        v270 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v441 = v268;
        v442 = 2112;
        *(_QWORD *)v443 = v269;
        *(_WORD *)&v443[8] = 2112;
        v444 = (uint64_t)v270;
        _os_log_impl(&dword_19B1B0000, v267, OS_LOG_TYPE_INFO, "%{public}@Bulletin notifications supported updated from %@ to %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v265);
      -[HMHome setBulletinNotificationsSupported:](v266, "setBulletinNotificationsSupported:", objc_msgSend(v6, "areBulletinNotificationsSupported"));
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[HMHome context](v266, "context");
        v271 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v271, "queue");
        v272 = objc_claimAutoreleasedReturnValue();
        v394[0] = MEMORY[0x1E0C809B0];
        v394[1] = 3221225472;
        v394[2] = __29__HMHome_mergeFromNewObject___block_invoke_629;
        v394[3] = &unk_1E3AB5ED8;
        v394[4] = v266;
        v395 = v176;
        dispatch_async(v272, v394);

      }
      v29 = 1;
    }
    v273 = -[HMHome didOnboardEventLog](self, "didOnboardEventLog");
    if (v273 != objc_msgSend(v6, "didOnboardEventLog"))
    {
      v274 = (void *)MEMORY[0x1A1AC1AAC]();
      v275 = self;
      HMFGetOSLogHandle();
      v276 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v276, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v277 = (id)objc_claimAutoreleasedReturnValue();
        -[HMHome didOnboardEventLog](v275, "didOnboardEventLog");
        HMFBooleanToString();
        v278 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "didOnboardEventLog");
        HMFBooleanToString();
        v279 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v441 = v277;
        v442 = 2112;
        *(_QWORD *)v443 = v278;
        *(_WORD *)&v443[8] = 2112;
        v444 = (uint64_t)v279;
        _os_log_impl(&dword_19B1B0000, v276, OS_LOG_TYPE_INFO, "%{public}@Activity history onboarding changed from %@ to %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v274);
      -[HMHome setDidOnboardEventLog:](v275, "setDidOnboardEventLog:", objc_msgSend(v6, "didOnboardEventLog"));
      if (objc_msgSend(v6, "didOnboardEventLog"))
        -[HMHome _callDelegateDidOnboardEventLog](v275, "_callDelegateDidOnboardEventLog");
      v29 = 1;
    }
    v280 = -[HMHome isEventLogEnabled](self, "isEventLogEnabled");
    if (v280 != objc_msgSend(v6, "isEventLogEnabled"))
    {
      v281 = (void *)MEMORY[0x1A1AC1AAC]();
      v282 = self;
      HMFGetOSLogHandle();
      v283 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v283, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v284 = (id)objc_claimAutoreleasedReturnValue();
        v285 = -[HMHome isEventLogEnabled](v282, "isEventLogEnabled");
        v286 = objc_msgSend(v6, "isEventLogEnabled");
        *(_DWORD *)buf = 138543874;
        v441 = v284;
        v442 = 1024;
        *(_DWORD *)v443 = v285;
        *(_WORD *)&v443[4] = 1024;
        *(_DWORD *)&v443[6] = v286;
        _os_log_impl(&dword_19B1B0000, v283, OS_LOG_TYPE_INFO, "%{public}@Activity history home setting enabled changed from %{BOOL}d to %{BOOL}d", buf, 0x18u);

      }
      objc_autoreleasePoolPop(v281);
      -[HMHome setEventLogEnabled:](v282, "setEventLogEnabled:", objc_msgSend(v6, "isEventLogEnabled"));
      -[HMHome _callDelegateDidUpdateEventLogEnabled](v282, "_callDelegateDidUpdateEventLogEnabled");
      v29 = 1;
    }
    v287 = -[HMHome eventLogDuration](self, "eventLogDuration");
    if (v287 != objc_msgSend(v6, "eventLogDuration"))
    {
      v288 = (void *)MEMORY[0x1A1AC1AAC]();
      v289 = self;
      HMFGetOSLogHandle();
      v290 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v290, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v291 = (id)objc_claimAutoreleasedReturnValue();
        v292 = -[HMHome eventLogDuration](v289, "eventLogDuration");
        v293 = objc_msgSend(v6, "eventLogDuration");
        *(_DWORD *)buf = 138543874;
        v441 = v291;
        v442 = 2048;
        *(_QWORD *)v443 = v292;
        *(_WORD *)&v443[8] = 2048;
        v444 = v293;
        _os_log_impl(&dword_19B1B0000, v290, OS_LOG_TYPE_INFO, "%{public}@Activity history duration changed from %lu to %lu", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v288);
      -[HMHome setEventLogDuration:](v289, "setEventLogDuration:", objc_msgSend(v6, "eventLogDuration"));
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[HMHome context](v289, "context");
        v294 = (void *)objc_claimAutoreleasedReturnValue();
        v295 = v294;
        if (v294)
        {
          objc_msgSend(v294, "queue");
          v296 = objc_claimAutoreleasedReturnValue();
          v390[0] = MEMORY[0x1E0C809B0];
          v390[1] = 3221225472;
          v390[2] = __29__HMHome_mergeFromNewObject___block_invoke_632;
          v390[3] = &unk_1E3AB5CD0;
          v391 = v295;
          v392 = v176;
          v393 = v289;
          dispatch_async(v296, v390);

        }
      }
      v29 = 1;
    }
    -[HMHome timeZone](self, "timeZone");
    v297 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "timeZone");
    v298 = (void *)objc_claimAutoreleasedReturnValue();
    v299 = HMFEqualObjects();

    if ((v299 & 1) == 0)
    {
      v300 = (void *)MEMORY[0x1A1AC1AAC]();
      v301 = self;
      HMFGetOSLogHandle();
      v302 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v302, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v303 = (id)objc_claimAutoreleasedReturnValue();
        -[HMHome timeZone](v301, "timeZone");
        v304 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "timeZone");
        v305 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v441 = v303;
        v442 = 2112;
        *(_QWORD *)v443 = v304;
        *(_WORD *)&v443[8] = 2112;
        v444 = (uint64_t)v305;
        _os_log_impl(&dword_19B1B0000, v302, OS_LOG_TYPE_INFO, "%{public}@Home timeZone changed from %@ to %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v300);
      objc_msgSend(v6, "timeZone");
      v306 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome setTimeZone:](v301, "setTimeZone:", v306);

      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[HMHome context](v301, "context");
        v307 = (void *)objc_claimAutoreleasedReturnValue();
        v308 = v307;
        if (v307)
        {
          objc_msgSend(v307, "queue");
          v309 = objc_claimAutoreleasedReturnValue();
          v386[0] = MEMORY[0x1E0C809B0];
          v386[1] = 3221225472;
          v386[2] = __29__HMHome_mergeFromNewObject___block_invoke_635;
          v386[3] = &unk_1E3AB5CD0;
          v387 = v308;
          v388 = v176;
          v389 = v301;
          dispatch_async(v309, v386);

        }
      }
      v29 = 1;
    }
    v374 = v243;
    -[HMHome numberOfCameras](self, "numberOfCameras");
    v310 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "numberOfCameras");
    v311 = (void *)objc_claimAutoreleasedReturnValue();
    v312 = HMFEqualObjects();

    if ((v312 & 1) == 0)
    {
      v313 = (void *)MEMORY[0x1A1AC1AAC]();
      v314 = self;
      HMFGetOSLogHandle();
      v315 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v315, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v316 = (id)objc_claimAutoreleasedReturnValue();
        -[HMHome numberOfCameras](v314, "numberOfCameras");
        v317 = (void *)objc_claimAutoreleasedReturnValue();
        v318 = objc_msgSend(v317, "unsignedIntValue");
        objc_msgSend(v6, "numberOfCameras");
        v319 = (void *)objc_claimAutoreleasedReturnValue();
        v320 = objc_msgSend(v319, "unsignedIntValue");
        *(_DWORD *)buf = 138543874;
        v441 = v316;
        v442 = 1024;
        *(_DWORD *)v443 = v318;
        *(_WORD *)&v443[4] = 1024;
        *(_DWORD *)&v443[6] = v320;
        _os_log_impl(&dword_19B1B0000, v315, OS_LOG_TYPE_INFO, "%{public}@Home numberOfCameras changed from %u to %u", buf, 0x18u);

      }
      objc_autoreleasePoolPop(v313);
      objc_msgSend(v6, "numberOfCameras");
      v321 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome setNumberOfCameras:](v314, "setNumberOfCameras:", v321);

      v29 = 1;
    }
    v322 = -[HMHome supportsResidentSelection](self, "supportsResidentSelection");
    if (v322 != objc_msgSend(v6, "supportsResidentSelection"))
    {
      -[HMHome setSupportsResidentSelection:](self, "setSupportsResidentSelection:", objc_msgSend(v6, "supportsResidentSelection"));
      -[HMHome context](self, "context");
      v323 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v323, "queue");
      v324 = objc_claimAutoreleasedReturnValue();
      v383[0] = MEMORY[0x1E0C809B0];
      v383[1] = 3221225472;
      v383[2] = __29__HMHome_mergeFromNewObject___block_invoke_637;
      v383[3] = &unk_1E3AB5ED8;
      v384 = v176;
      v385 = self;
      dispatch_async(v324, v383);

      v29 = 1;
    }
    -[HMHome userSelectedPreferredResident](self, "userSelectedPreferredResident");
    v325 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "userSelectedPreferredResident");
    v326 = (void *)objc_claimAutoreleasedReturnValue();
    v327 = HMFEqualObjects();

    if ((v327 & 1) == 0)
    {
      v328 = (void *)MEMORY[0x1A1AC1AAC]();
      v329 = self;
      HMFGetOSLogHandle();
      v330 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v330, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v331 = (id)objc_claimAutoreleasedReturnValue();
        -[HMHome userSelectedPreferredResident](v329, "userSelectedPreferredResident");
        v332 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "userSelectedPreferredResident");
        v333 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v441 = v331;
        v442 = 2112;
        *(_QWORD *)v443 = v332;
        *(_WORD *)&v443[8] = 2112;
        v444 = (uint64_t)v333;
        _os_log_impl(&dword_19B1B0000, v330, OS_LOG_TYPE_INFO, "%{public}@User selected preferred resident is changing from [%@] to [%@]", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v328);
      objc_msgSend(v6, "userSelectedPreferredResident");
      v334 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome setUserSelectedPreferredResident:](v329, "setUserSelectedPreferredResident:", v334);

      -[HMHome context](v329, "context");
      v335 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v335, "queue");
      v336 = objc_claimAutoreleasedReturnValue();
      v380[0] = MEMORY[0x1E0C809B0];
      v380[1] = 3221225472;
      v380[2] = __29__HMHome_mergeFromNewObject___block_invoke_640;
      v380[3] = &unk_1E3AB5ED8;
      v381 = v176;
      v382 = v329;
      dispatch_async(v336, v380);

      v29 = 1;
    }
    -[HMHome autoSelectedPreferredResidents](self, "autoSelectedPreferredResidents");
    v337 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "autoSelectedPreferredResidents");
    v338 = (void *)objc_claimAutoreleasedReturnValue();
    v339 = HMFEqualObjects();

    if ((v339 & 1) == 0)
    {
      v340 = (void *)MEMORY[0x1A1AC1AAC]();
      v341 = self;
      HMFGetOSLogHandle();
      v342 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v342, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v343 = (id)objc_claimAutoreleasedReturnValue();
        -[HMHome autoSelectedPreferredResidents](v341, "autoSelectedPreferredResidents");
        v344 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "autoSelectedPreferredResidents");
        v345 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v441 = v343;
        v442 = 2112;
        *(_QWORD *)v443 = v344;
        *(_WORD *)&v443[8] = 2112;
        v444 = (uint64_t)v345;
        _os_log_impl(&dword_19B1B0000, v342, OS_LOG_TYPE_INFO, "%{public}@auto selected preferred resident is changing from [%@] to [%@]", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v340);
      objc_msgSend(v6, "autoSelectedPreferredResidents");
      v346 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome setAutoSelectedPreferredResidents:](v341, "setAutoSelectedPreferredResidents:", v346);

      -[HMHome context](v341, "context");
      v347 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v347, "queue");
      v348 = objc_claimAutoreleasedReturnValue();
      v377[0] = MEMORY[0x1E0C809B0];
      v377[1] = 3221225472;
      v377[2] = __29__HMHome_mergeFromNewObject___block_invoke_643;
      v377[3] = &unk_1E3AB5ED8;
      v378 = v176;
      v379 = v341;
      dispatch_async(v348, v377);

      v29 = 1;
    }
    v349 = -[HMHome homeLocationStatus](self, "homeLocationStatus");
    if (v349 != objc_msgSend(v6, "homeLocationStatus"))
    {
      v350 = (void *)MEMORY[0x1A1AC1AAC]();
      v351 = self;
      HMFGetOSLogHandle();
      v352 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v352, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v353 = (id)objc_claimAutoreleasedReturnValue();
        v354 = -[HMHome homeLocationStatus](v351, "homeLocationStatus");
        if (v354 > 3)
          v355 = CFSTR("HMHomeLocationAway");
        else
          v355 = off_1E3AB1B98[v354];
        v356 = objc_msgSend(v6, "homeLocationStatus");
        if (v356 > 3)
          v357 = CFSTR("HMHomeLocationAway");
        else
          v357 = off_1E3AB1B98[v356];
        *(_DWORD *)buf = 138543874;
        v441 = v353;
        v442 = 2112;
        *(_QWORD *)v443 = v355;
        *(_WORD *)&v443[8] = 2112;
        v444 = (uint64_t)v357;
        _os_log_impl(&dword_19B1B0000, v352, OS_LOG_TYPE_INFO, "%{public}@Updating home location status from %@ to %@ via merge", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v350);
      -[HMHome setHomeLocationStatus:](v351, "setHomeLocationStatus:", objc_msgSend(v6, "homeLocationStatus"));
      -[HMHome context](v351, "context");
      v358 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v358, "queue");
      v359 = objc_claimAutoreleasedReturnValue();
      v376[0] = MEMORY[0x1E0C809B0];
      v376[1] = 3221225472;
      v376[2] = __29__HMHome_mergeFromNewObject___block_invoke_646;
      v376[3] = &unk_1E3AB5E18;
      v376[4] = v351;
      dispatch_async(v359, v376);

      v29 = 1;
    }
    v360 = (void *)MEMORY[0x1A1AC1AAC]();
    v361 = self;
    HMFGetOSLogHandle();
    v362 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v362, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v363 = (id)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v364 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v441 = v363;
      v442 = 2112;
      *(_QWORD *)v443 = v364;
      _os_log_impl(&dword_19B1B0000, v362, OS_LOG_TYPE_INFO, "%{public}@Finished home merge with modified=%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v360);

    v4 = v375;
  }
  else
  {
    v29 = 0;
  }

  return v29 & 1;
}

- (BOOL)_mergeRooms:(id)a3
{
  id v4;
  HMObjectMergeCollection *v5;
  void *v6;
  void *v7;
  HMObjectMergeCollection *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];

  v4 = a3;
  v5 = [HMObjectMergeCollection alloc];
  -[HMHome currentRooms](self, "currentRooms");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[HMObjectMergeCollection initWithCurrentObjects:newObjects:](v5, "initWithCurrentObjects:newObjects:", v7, v4);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __22__HMHome__mergeRooms___block_invoke;
  v20[3] = &unk_1E3AB38A8;
  v20[4] = self;
  objc_msgSend(v9, "enumerateObjectsUsingBlock:", v20);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v10;
  v19[1] = 3221225472;
  v19[2] = __22__HMHome__mergeRooms___block_invoke_649;
  v19[3] = &unk_1E3AB38A8;
  v19[4] = self;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v19);

  -[HMObjectMergeCollection mergeCommonObjects](v8, "mergeCommonObjects");
  -[HMObjectMergeCollection finalObjects](v8, "finalObjects");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentRooms](self, "currentRooms");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setArray:", v12);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v10;
  v18[1] = 3221225472;
  v18[2] = __22__HMHome__mergeRooms___block_invoke_650;
  v18[3] = &unk_1E3AB38A8;
  v18[4] = self;
  objc_msgSend(v14, "enumerateObjectsUsingBlock:", v18);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v10;
  v17[1] = 3221225472;
  v17[2] = __22__HMHome__mergeRooms___block_invoke_652;
  v17[3] = &unk_1E3AB38A8;
  v17[4] = self;
  objc_msgSend(v15, "enumerateObjectsUsingBlock:", v17);

  LOBYTE(self) = -[HMObjectMergeCollection isModified](v8, "isModified");
  return (char)self;
}

- (BOOL)_mergeIsFeatureHomeTheaterQFAEnabled:(BOOL)a3
{
  _BOOL8 v3;
  _BOOL4 v5;
  void *v6;
  HMHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v3 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  v5 = -[HMHome isFeatureHomeTheaterQFAEnabled](self, "isFeatureHomeTheaterQFAEnabled") ^ a3;
  if (v5)
  {
    v6 = (void *)MEMORY[0x1A1AC1AAC]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome isFeatureHomeTheaterQFAEnabled](v7, "isFeatureHomeTheaterQFAEnabled");
      HMFBooleanToString();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543874;
      v14 = v9;
      v15 = 2112;
      v16 = v10;
      v17 = 2112;
      v18 = v11;
      _os_log_impl(&dword_19B1B0000, v8, OS_LOG_TYPE_INFO, "%{public}@Updating is feature home theater QFA enabled from %@ to %@ via merge", (uint8_t *)&v13, 0x20u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMHome setIsFeatureHomeTheaterQFAEnabled:](v7, "setIsFeatureHomeTheaterQFAEnabled:", v3);
  }
  return v5;
}

- (BOOL)_mergeZones:(id)a3
{
  id v4;
  HMObjectMergeCollection *v5;
  void *v6;
  void *v7;
  HMObjectMergeCollection *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];

  v4 = a3;
  v5 = [HMObjectMergeCollection alloc];
  -[HMHome currentZones](self, "currentZones");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[HMObjectMergeCollection initWithCurrentObjects:newObjects:](v5, "initWithCurrentObjects:newObjects:", v7, v4);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __22__HMHome__mergeZones___block_invoke;
  v20[3] = &unk_1E3AB1340;
  v20[4] = self;
  objc_msgSend(v9, "enumerateObjectsUsingBlock:", v20);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v10;
  v19[1] = 3221225472;
  v19[2] = __22__HMHome__mergeZones___block_invoke_657;
  v19[3] = &unk_1E3AB1340;
  v19[4] = self;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v19);

  -[HMObjectMergeCollection mergeCommonObjects](v8, "mergeCommonObjects");
  -[HMObjectMergeCollection finalObjects](v8, "finalObjects");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentZones](self, "currentZones");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setArray:", v12);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v10;
  v18[1] = 3221225472;
  v18[2] = __22__HMHome__mergeZones___block_invoke_658;
  v18[3] = &unk_1E3AB1340;
  v18[4] = self;
  objc_msgSend(v14, "enumerateObjectsUsingBlock:", v18);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v10;
  v17[1] = 3221225472;
  v17[2] = __22__HMHome__mergeZones___block_invoke_660;
  v17[3] = &unk_1E3AB1340;
  v17[4] = self;
  objc_msgSend(v15, "enumerateObjectsUsingBlock:", v17);

  LOBYTE(self) = -[HMObjectMergeCollection isModified](v8, "isModified");
  return (char)self;
}

- (BOOL)_mergeAccessories:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMObjectMergeCollection *v13;
  void *v14;
  void *v15;
  HMObjectMergeCollection *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  BOOL v24;
  _QWORD v26[5];
  _QWORD v27[5];
  _QWORD v28[5];
  _QWORD v29[5];
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x1E0CB37E8];
    -[HMHome currentAccessories](v6, "currentAccessories");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "numberWithUnsignedInteger:", objc_msgSend(v10, "count"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v4, "count"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v31 = v8;
    v32 = 2112;
    v33 = v11;
    v34 = 2112;
    v35 = v12;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_DEBUG, "%{public}@New Accessories Before Merge: %@ -> %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v5);
  v13 = [HMObjectMergeCollection alloc];
  -[HMHome currentAccessories](v6, "currentAccessories");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "array");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[HMObjectMergeCollection initWithCurrentObjects:newObjects:](v13, "initWithCurrentObjects:newObjects:", v15, v4);

  -[HMObjectMergeCollection removedObjects](v16, "removedObjects");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = MEMORY[0x1E0C809B0];
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = __28__HMHome__mergeAccessories___block_invoke;
  v29[3] = &unk_1E3AB3FF0;
  v29[4] = v6;
  objc_msgSend(v17, "enumerateObjectsUsingBlock:", v29);

  -[HMObjectMergeCollection addedObjects](v16, "addedObjects");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = v18;
  v28[1] = 3221225472;
  v28[2] = __28__HMHome__mergeAccessories___block_invoke_665;
  v28[3] = &unk_1E3AB3FF0;
  v28[4] = v6;
  objc_msgSend(v19, "enumerateObjectsUsingBlock:", v28);

  -[HMObjectMergeCollection mergeCommonObjects](v16, "mergeCommonObjects");
  -[HMObjectMergeCollection finalObjects](v16, "finalObjects");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentAccessories](v6, "currentAccessories");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setArray:", v20);

  -[HMObjectMergeCollection removedObjects](v16, "removedObjects");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = v18;
  v27[1] = 3221225472;
  v27[2] = __28__HMHome__mergeAccessories___block_invoke_666;
  v27[3] = &unk_1E3AB3FF0;
  v27[4] = v6;
  objc_msgSend(v22, "enumerateObjectsUsingBlock:", v27);

  -[HMObjectMergeCollection addedObjects](v16, "addedObjects");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v26[0] = v18;
  v26[1] = 3221225472;
  v26[2] = __28__HMHome__mergeAccessories___block_invoke_669;
  v26[3] = &unk_1E3AB3FF0;
  v26[4] = v6;
  objc_msgSend(v23, "enumerateObjectsUsingBlock:", v26);

  v24 = -[HMObjectMergeCollection isModified](v16, "isModified");
  return v24;
}

- (BOOL)_mergeServiceGroups:(id)a3
{
  id v4;
  HMObjectMergeCollection *v5;
  void *v6;
  void *v7;
  HMObjectMergeCollection *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];

  v4 = a3;
  v5 = [HMObjectMergeCollection alloc];
  -[HMHome currentServiceGroups](self, "currentServiceGroups");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[HMObjectMergeCollection initWithCurrentObjects:newObjects:](v5, "initWithCurrentObjects:newObjects:", v7, v4);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __30__HMHome__mergeServiceGroups___block_invoke;
  v20[3] = &unk_1E3AB1368;
  v20[4] = self;
  objc_msgSend(v9, "enumerateObjectsUsingBlock:", v20);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v10;
  v19[1] = 3221225472;
  v19[2] = __30__HMHome__mergeServiceGroups___block_invoke_674;
  v19[3] = &unk_1E3AB1368;
  v19[4] = self;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v19);

  -[HMObjectMergeCollection mergeCommonObjects](v8, "mergeCommonObjects");
  -[HMObjectMergeCollection finalObjects](v8, "finalObjects");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentServiceGroups](self, "currentServiceGroups");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setArray:", v12);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v10;
  v18[1] = 3221225472;
  v18[2] = __30__HMHome__mergeServiceGroups___block_invoke_675;
  v18[3] = &unk_1E3AB1368;
  v18[4] = self;
  objc_msgSend(v14, "enumerateObjectsUsingBlock:", v18);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v10;
  v17[1] = 3221225472;
  v17[2] = __30__HMHome__mergeServiceGroups___block_invoke_677;
  v17[3] = &unk_1E3AB1368;
  v17[4] = self;
  objc_msgSend(v15, "enumerateObjectsUsingBlock:", v17);

  LOBYTE(self) = -[HMObjectMergeCollection isModified](v8, "isModified");
  return (char)self;
}

- (BOOL)_mergeActionSets:(id)a3
{
  id v4;
  HMObjectMergeCollection *v5;
  void *v6;
  void *v7;
  HMObjectMergeCollection *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];

  v4 = a3;
  v5 = [HMObjectMergeCollection alloc];
  -[HMHome currentActionSets](self, "currentActionSets");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[HMObjectMergeCollection initWithCurrentObjects:newObjects:](v5, "initWithCurrentObjects:newObjects:", v7, v4);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __27__HMHome__mergeActionSets___block_invoke;
  v20[3] = &unk_1E3AB1390;
  v20[4] = self;
  objc_msgSend(v9, "enumerateObjectsUsingBlock:", v20);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v10;
  v19[1] = 3221225472;
  v19[2] = __27__HMHome__mergeActionSets___block_invoke_682;
  v19[3] = &unk_1E3AB1390;
  v19[4] = self;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v19);

  -[HMObjectMergeCollection mergeCommonObjects](v8, "mergeCommonObjects");
  -[HMObjectMergeCollection finalObjects](v8, "finalObjects");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentActionSets](self, "currentActionSets");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setArray:", v12);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v10;
  v18[1] = 3221225472;
  v18[2] = __27__HMHome__mergeActionSets___block_invoke_683;
  v18[3] = &unk_1E3AB1390;
  v18[4] = self;
  objc_msgSend(v14, "enumerateObjectsUsingBlock:", v18);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v10;
  v17[1] = 3221225472;
  v17[2] = __27__HMHome__mergeActionSets___block_invoke_685;
  v17[3] = &unk_1E3AB1390;
  v17[4] = self;
  objc_msgSend(v15, "enumerateObjectsUsingBlock:", v17);

  LOBYTE(self) = -[HMObjectMergeCollection isModified](v8, "isModified");
  return (char)self;
}

- (BOOL)_mergeTriggerOwnedActionSets:(id)a3
{
  id v4;
  HMObjectMergeCollection *v5;
  void *v6;
  void *v7;
  HMObjectMergeCollection *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v15[5];
  _QWORD v16[5];

  v4 = a3;
  v5 = [HMObjectMergeCollection alloc];
  -[HMHome currentTriggerOwnedActionSets](self, "currentTriggerOwnedActionSets");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[HMObjectMergeCollection initWithCurrentObjects:newObjects:](v5, "initWithCurrentObjects:newObjects:", v7, v4);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __39__HMHome__mergeTriggerOwnedActionSets___block_invoke;
  v16[3] = &unk_1E3AB1390;
  v16[4] = self;
  objc_msgSend(v9, "enumerateObjectsUsingBlock:", v16);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v10;
  v15[1] = 3221225472;
  v15[2] = __39__HMHome__mergeTriggerOwnedActionSets___block_invoke_689;
  v15[3] = &unk_1E3AB1390;
  v15[4] = self;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v15);

  -[HMObjectMergeCollection mergeCommonObjects](v8, "mergeCommonObjects");
  -[HMObjectMergeCollection finalObjects](v8, "finalObjects");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentTriggerOwnedActionSets](self, "currentTriggerOwnedActionSets");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setArray:", v12);

  LOBYTE(v13) = -[HMObjectMergeCollection isModified](v8, "isModified");
  return (char)v13;
}

- (BOOL)_mergeTriggers:(id)a3
{
  id v4;
  HMObjectMergeCollection *v5;
  void *v6;
  void *v7;
  HMObjectMergeCollection *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];

  v4 = a3;
  v5 = [HMObjectMergeCollection alloc];
  -[HMHome currentTriggers](self, "currentTriggers");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[HMObjectMergeCollection initWithCurrentObjects:newObjects:](v5, "initWithCurrentObjects:newObjects:", v7, v4);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __25__HMHome__mergeTriggers___block_invoke;
  v20[3] = &unk_1E3AB13B8;
  v20[4] = self;
  objc_msgSend(v9, "enumerateObjectsUsingBlock:", v20);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v10;
  v19[1] = 3221225472;
  v19[2] = __25__HMHome__mergeTriggers___block_invoke_691;
  v19[3] = &unk_1E3AB13B8;
  v19[4] = self;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v19);

  -[HMObjectMergeCollection mergeCommonObjects](v8, "mergeCommonObjects");
  -[HMObjectMergeCollection finalObjects](v8, "finalObjects");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentTriggers](self, "currentTriggers");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setArray:", v12);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v10;
  v18[1] = 3221225472;
  v18[2] = __25__HMHome__mergeTriggers___block_invoke_693;
  v18[3] = &unk_1E3AB13B8;
  v18[4] = self;
  objc_msgSend(v14, "enumerateObjectsUsingBlock:", v18);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v10;
  v17[1] = 3221225472;
  v17[2] = __25__HMHome__mergeTriggers___block_invoke_3;
  v17[3] = &unk_1E3AB13B8;
  v17[4] = self;
  objc_msgSend(v15, "enumerateObjectsUsingBlock:", v17);

  LOBYTE(self) = -[HMObjectMergeCollection isModified](v8, "isModified");
  return (char)self;
}

- (BOOL)_mergeUsers:(id)a3
{
  id v4;
  HMObjectMergeCollection *v5;
  void *v6;
  void *v7;
  HMObjectMergeCollection *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];

  v4 = a3;
  v5 = [HMObjectMergeCollection alloc];
  -[HMHome currentUsers](self, "currentUsers");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[HMObjectMergeCollection initWithCurrentObjects:newObjects:](v5, "initWithCurrentObjects:newObjects:", v7, v4);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __22__HMHome__mergeUsers___block_invoke;
  v20[3] = &unk_1E3AB4198;
  v20[4] = self;
  objc_msgSend(v9, "enumerateObjectsUsingBlock:", v20);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v10;
  v19[1] = 3221225472;
  v19[2] = __22__HMHome__mergeUsers___block_invoke_695;
  v19[3] = &unk_1E3AB4198;
  v19[4] = self;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v19);

  -[HMObjectMergeCollection mergeCommonObjects](v8, "mergeCommonObjects");
  -[HMObjectMergeCollection finalObjects](v8, "finalObjects");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentUsers](self, "currentUsers");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setArray:", v12);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v10;
  v18[1] = 3221225472;
  v18[2] = __22__HMHome__mergeUsers___block_invoke_696;
  v18[3] = &unk_1E3AB4198;
  v18[4] = self;
  objc_msgSend(v14, "enumerateObjectsUsingBlock:", v18);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v10;
  v17[1] = 3221225472;
  v17[2] = __22__HMHome__mergeUsers___block_invoke_698;
  v17[3] = &unk_1E3AB4198;
  v17[4] = self;
  objc_msgSend(v15, "enumerateObjectsUsingBlock:", v17);

  LOBYTE(self) = -[HMObjectMergeCollection isModified](v8, "isModified");
  return (char)self;
}

- (BOOL)_mergeResidentDevices:(id)a3
{
  id v4;
  HMObjectMergeCollection *v5;
  void *v6;
  void *v7;
  HMObjectMergeCollection *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];

  v4 = a3;
  v5 = [HMObjectMergeCollection alloc];
  -[HMHome currentResidentDevices](self, "currentResidentDevices");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[HMObjectMergeCollection initWithCurrentObjects:newObjects:](v5, "initWithCurrentObjects:newObjects:", v7, v4);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __32__HMHome__mergeResidentDevices___block_invoke;
  v20[3] = &unk_1E3AB13E0;
  v20[4] = self;
  objc_msgSend(v9, "enumerateObjectsUsingBlock:", v20);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v10;
  v19[1] = 3221225472;
  v19[2] = __32__HMHome__mergeResidentDevices___block_invoke_703;
  v19[3] = &unk_1E3AB13E0;
  v19[4] = self;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v19);

  -[HMObjectMergeCollection mergeCommonObjects](v8, "mergeCommonObjects");
  -[HMObjectMergeCollection finalObjects](v8, "finalObjects");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentResidentDevices](self, "currentResidentDevices");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setArray:", v12);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v10;
  v18[1] = 3221225472;
  v18[2] = __32__HMHome__mergeResidentDevices___block_invoke_704;
  v18[3] = &unk_1E3AB13E0;
  v18[4] = self;
  objc_msgSend(v14, "enumerateObjectsUsingBlock:", v18);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v10;
  v17[1] = 3221225472;
  v17[2] = __32__HMHome__mergeResidentDevices___block_invoke_706;
  v17[3] = &unk_1E3AB13E0;
  v17[4] = self;
  objc_msgSend(v15, "enumerateObjectsUsingBlock:", v17);

  LOBYTE(self) = -[HMObjectMergeCollection isModified](v8, "isModified");
  return (char)self;
}

- (void)_configureOutgoingInvitation:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "__configureWithContext:home:", v5, self);

}

- (BOOL)_mergeOutgoingInvitations:(id)a3
{
  id v4;
  HMObjectMergeCollection *v5;
  void *v6;
  void *v7;
  HMObjectMergeCollection *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  BOOL v21;
  _QWORD block[5];
  id v24;
  id v25;
  _QWORD v26[5];
  _QWORD v27[5];

  v4 = a3;
  v5 = [HMObjectMergeCollection alloc];
  -[HMHome currentOutgoingInvitations](self, "currentOutgoingInvitations");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[HMObjectMergeCollection initWithCurrentObjects:newObjects:](v5, "initWithCurrentObjects:newObjects:", v7, v4);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __36__HMHome__mergeOutgoingInvitations___block_invoke;
  v27[3] = &unk_1E3AB1408;
  v27[4] = self;
  objc_msgSend(v9, "enumerateObjectsUsingBlock:", v27);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v26[0] = v10;
  v26[1] = 3221225472;
  v26[2] = __36__HMHome__mergeOutgoingInvitations___block_invoke_711;
  v26[3] = &unk_1E3AB1408;
  v26[4] = self;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v26);

  -[HMObjectMergeCollection mergeCommonObjects](v8, "mergeCommonObjects");
  -[HMObjectMergeCollection finalObjects](v8, "finalObjects");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentOutgoingInvitations](self, "currentOutgoingInvitations");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setArray:", v12);

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObjectsFromArray:", v15);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObjectsFromArray:", v16);

  -[HMObjectMergeCollection updatedObjects](v8, "updatedObjects");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObjectsFromArray:", v17);

  -[HMHome _privateDelegate](self, "_privateDelegate");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v14, "count") && (objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "queue");
    v20 = objc_claimAutoreleasedReturnValue();
    block[0] = v10;
    block[1] = 3221225472;
    block[2] = __36__HMHome__mergeOutgoingInvitations___block_invoke_713;
    block[3] = &unk_1E3AB5CD0;
    block[4] = self;
    v24 = v18;
    v25 = v14;
    dispatch_async(v20, block);

  }
  v21 = -[HMObjectMergeCollection isModified](v8, "isModified");

  return v21;
}

- (BOOL)_mergeAccessoryProtectionGroups:(id)a3
{
  id v4;
  HMObjectMergeCollection *v5;
  void *v6;
  void *v7;
  HMObjectMergeCollection *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[5];
  _QWORD v22[5];

  v4 = a3;
  v5 = [HMObjectMergeCollection alloc];
  -[HMHome currentAccessoryProtectionGroups](self, "currentAccessoryProtectionGroups");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[HMObjectMergeCollection initWithCurrentObjects:newObjects:](v5, "initWithCurrentObjects:newObjects:", v7, v4);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __42__HMHome__mergeAccessoryProtectionGroups___block_invoke;
  v22[3] = &unk_1E3AB1430;
  v22[4] = self;
  objc_msgSend(v9, "enumerateObjectsUsingBlock:", v22);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v21[0] = v10;
  v21[1] = 3221225472;
  v21[2] = __42__HMHome__mergeAccessoryProtectionGroups___block_invoke_715;
  v21[3] = &unk_1E3AB1430;
  v21[4] = self;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v21);

  -[HMObjectMergeCollection mergeCommonObjects](v8, "mergeCommonObjects");
  -[HMObjectMergeCollection finalObjects](v8, "finalObjects");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentAccessoryProtectionGroups](self, "currentAccessoryProtectionGroups");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setArray:", v12);

  -[HMObjectMergeCollection removedObjects](v8, "removedObjects");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = v10;
  v20[1] = 3221225472;
  v20[2] = __42__HMHome__mergeAccessoryProtectionGroups___block_invoke_716;
  v20[3] = &unk_1E3AB1430;
  v20[4] = self;
  objc_msgSend(v14, "enumerateObjectsUsingBlock:", v20);

  -[HMObjectMergeCollection addedObjects](v8, "addedObjects");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v10;
  v19[1] = 3221225472;
  v19[2] = __42__HMHome__mergeAccessoryProtectionGroups___block_invoke_2;
  v19[3] = &unk_1E3AB1430;
  v19[4] = self;
  objc_msgSend(v15, "enumerateObjectsUsingBlock:", v19);

  -[HMObjectMergeCollection updatedObjects](v8, "updatedObjects");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v10;
  v18[1] = 3221225472;
  v18[2] = __42__HMHome__mergeAccessoryProtectionGroups___block_invoke_2_719;
  v18[3] = &unk_1E3AB1430;
  v18[4] = self;
  objc_msgSend(v16, "enumerateObjectsUsingBlock:", v18);

  LOBYTE(self) = -[HMObjectMergeCollection isModified](v8, "isModified");
  return (char)self;
}

- (void)fetchPresenceForUsers:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMHome *v14;
  NSObject *v15;
  void *v16;
  const char *v17;
  id v18;
  _QWORD v19[5];
  id v20;
  void (**v21)(_QWORD, _QWORD, _QWORD);
  const __CFString *v22;
  void *v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("You must provide a completion handler"), 0);
    v18 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v18);
  }
  v8 = (void (**)(_QWORD, _QWORD, _QWORD))v7;
  -[HMHome context](self, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    v13 = (void *)MEMORY[0x1A1AC1AAC]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v16;
      v17 = "%{public}@presence map fetch error: no context";
LABEL_9:
      _os_log_impl(&dword_19B1B0000, v15, OS_LOG_TYPE_ERROR, v17, buf, 0xCu);

    }
LABEL_10:

    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, void *))v8)[2](v8, 0, v10);
    goto LABEL_11;
  }
  if (!objc_msgSend(v6, "count"))
  {
    v13 = (void *)MEMORY[0x1A1AC1AAC]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v16;
      v17 = "%{public}@presence map fetch error: no user count";
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  objc_msgSend(v6, "na_map:", &__block_literal_global_26545);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome uuid](self, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = CFSTR("HMHomeUserUUIDsMessageKey");
  v23 = v10;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __43__HMHome_fetchPresenceForUsers_completion___block_invoke_2;
  v19[3] = &unk_1E3AB60C8;
  v19[4] = self;
  v21 = v8;
  v20 = v6;
  -[_HMContext sendMessage:target:payload:responseHandler:](v9, CFSTR("HMFetchPresenceMapMessage"), v11, v12, v19);

LABEL_11:
}

- (id)_getUserWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;

  v4 = a3;
  -[HMHome currentUsers](self, "currentUsers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstItemWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    -[HMHome currentUser](self, "currentUser");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v4, "isEqual:", v8);

    if (v9)
    {
      -[HMHome currentUser](self, "currentUser");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = 0;
    }
  }

  return v6;
}

- (void)updateName:(NSString *)name completionHandler:(void *)completion
{
  NSString *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  HMHome *v19;
  NSObject *v20;
  void *v21;
  id v22;
  _QWORD block[5];
  NSString *v24;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  const char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = name;
  v7 = completion;
  -[HMHome context](self, "context");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateName:completionHandler:]", CFSTR("completion"));
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)MEMORY[0x1A1AC1AAC]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v21;
      v28 = 2112;
      v29 = (const char *)v17;
      _os_log_impl(&dword_19B1B0000, v20, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v17, 0);
    v22 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v22);
  }
  v9 = (void *)v8;
  -[HMHome context](self, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    objc_msgSend(v9, "queue");
    v11 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __39__HMHome_updateName_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v24 = v6;
    v25 = v7;
    dispatch_async(v11, block);

  }
  else
  {
    v12 = (void *)MEMORY[0x1A1AC1AAC]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v15;
      v28 = 2080;
      v29 = "-[HMHome updateName:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, void *))v7 + 2))(v7, v16);

  }
}

- (void)_updateName:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  HMHome *v28;
  id v29;
  const __CFString *v30;
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  const char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    if (v6)
    {
      v10 = objc_msgSend(v6, "length");
      if (HMMaxLengthForNaming__hmf_once_t5 != -1)
        dispatch_once(&HMMaxLengthForNaming__hmf_once_t5, &__block_literal_global_40);
      if (v10 <= HMMaxLengthForNaming__hmf_once_v6)
      {
        -[HMHome name](self, "name");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = objc_msgSend(v22, "isEqualToString:", v6);

        if (!v23)
        {
          -[HMHome uuid](self, "uuid");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = CFSTR("kHomeName");
          v31 = v6;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26[0] = MEMORY[0x1E0C809B0];
          v26[1] = 3221225472;
          v26[2] = __40__HMHome__updateName_completionHandler___block_invoke;
          v26[3] = &unk_1E3AB60C8;
          v27 = v9;
          v28 = self;
          v29 = v7;
          -[_HMContext sendMessage:target:payload:responseHandler:](v27, CFSTR("kRenameHomeRequestKey"), v24, v25, v26);

          goto LABEL_16;
        }
        objc_msgSend(v9, "delegateCaller");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "callCompletion:error:", v7, 0);
        goto LABEL_15;
      }
      v11 = (void *)MEMORY[0x1A1AC1AAC]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v33 = v14;
        _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
      objc_msgSend(v9, "delegateCaller");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 46);
      v16 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(v8, "delegateCaller");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 20, 0);
      v16 = objc_claimAutoreleasedReturnValue();
    }
    v21 = (void *)v16;
    objc_msgSend(v15, "callCompletion:error:", v7, v16);

LABEL_15:
    goto LABEL_16;
  }
  v17 = (void *)MEMORY[0x1A1AC1AAC]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v33 = v20;
    v34 = 2080;
    v35 = "-[HMHome _updateName:completionHandler:]";
    _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v17);
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v7 + 2))(v7, v15);
    goto LABEL_15;
  }
LABEL_16:

}

- (void)startHomeDataSyncWithCompletionHandler:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD v22[5];
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome startHomeDataSyncWithCompletionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v6 = (void *)v5;
  -[HMHome context](self, "context");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (void *)MEMORY[0x1A1AC1AAC]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v26 = v12;
      _os_log_impl(&dword_19B1B0000, v11, OS_LOG_TYPE_INFO, "%{public}@Sending start home data sync request", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    -[HMHome uuid](v9, "uuid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __49__HMHome_startHomeDataSyncWithCompletionHandler___block_invoke;
    v22[3] = &unk_1E3AB60C8;
    v22[4] = v9;
    v23 = v6;
    v24 = v4;
    -[_HMContext sendMessage:target:payload:responseHandler:](v23, CFSTR("HM.syncHomeDataMessage"), v13, MEMORY[0x1E0C9AA70], v22);

  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2080;
      v28 = "-[HMHome startHomeDataSyncWithCompletionHandler:]";
      _os_log_impl(&dword_19B1B0000, v11, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v4 + 2))(v4, v15);

  }
}

- (void)setMultiUserEnabled:(BOOL)a3
{
  _BOOL4 v3;
  os_unfair_lock_s *p_lock;
  void *v6;
  id v7;

  v3 = a3;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_multiUserEnabled = v3;
  os_unfair_lock_unlock(p_lock);
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    -[HMHome uuid](self, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "postNotificationName:object:", CFSTR("HMHomeMultiUserEnabledChangeNotificationKey"), v6);

  }
}

- (void)enableMultiUserWithCompletionHandler:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  HMHome *v25;
  NSObject *v26;
  void *v27;
  id v28;
  _QWORD v29[4];
  id v30;
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v34 = v8;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Sending enable multi-user request", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMHome context](v6, "context");
  v9 = objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome enableMultiUserWithCompletionHandler:]", CFSTR("completion"));
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = (void *)MEMORY[0x1A1AC1AAC]();
    v25 = v6;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v27;
      v35 = 2112;
      v36 = (const char *)v23;
      _os_log_impl(&dword_19B1B0000, v26, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v24);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v23, 0);
    v28 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v28);
  }
  v10 = (void *)v9;
  if (v9)
  {
    if (-[HMHome multiUserEnabled](v6, "multiUserEnabled"))
    {
      v11 = (void *)MEMORY[0x1A1AC1AAC]();
      v12 = v6;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v34 = v14;
        _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_INFO, "%{public}@multiUserEnabled is already set, skipping request", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
      objc_msgSend(v10, "delegateCaller");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "callCompletion:error:", v4, 0);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0D285D0], "messageWithName:messagePayload:", CFSTR("HMHomeEnableMultiUserRequestKey"), MEMORY[0x1E0C9AA70]);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_initWeak((id *)buf, v6);
      objc_msgSend(v10, "messageDispatcher");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome uuid](v6, "uuid");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "queue");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v29[0] = MEMORY[0x1E0C809B0];
      v29[1] = 3221225472;
      v29[2] = __47__HMHome_enableMultiUserWithCompletionHandler___block_invoke;
      v29[3] = &unk_1E3AB4B30;
      objc_copyWeak(&v32, (id *)buf);
      v30 = v10;
      v31 = v4;
      objc_msgSend(v20, "sendMessage:target:responseQueue:responseHandler:", v15, v21, v22, v29);

      objc_destroyWeak(&v32);
      objc_destroyWeak((id *)buf);
    }
  }
  else
  {
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = v6;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v19;
      v35 = 2080;
      v36 = "-[HMHome enableMultiUserWithCompletionHandler:]";
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v4 + 2))(v4, v15);
  }

}

- (void)_handleMultiUserEnabledChangeNotification:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  HMHome *v20;
  uint8_t buf[4];
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v22 = v8;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Received multi-user enabled change notification", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMHome context](v6, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "pendingRequests");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "identifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "removeCompletionBlockForIdentifier:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMHome setMultiUserEnabled:](v6, "setMultiUserEnabled:", 1);
  if (v12)
  {
    -[HMHome context](v6, "context");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "delegateCaller");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "callCompletion:error:", v12, 0);

  }
  -[HMHome _privateDelegate](v6, "_privateDelegate");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](v6, "context");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "delegateCaller");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __52__HMHome__handleMultiUserEnabledChangeNotification___block_invoke;
    v18[3] = &unk_1E3AB5ED8;
    v19 = v15;
    v20 = v6;
    objc_msgSend(v17, "invokeBlock:", v18);

  }
}

- (BOOL)hasAnyUserAcknowledgedCameraRecordingOnboarding
{
  HMHome *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_hasAnyUserAcknowledgedCameraRecordingOnboarding;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (void)setHasAnyUserAcknowledgedCameraRecordingOnboarding:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_hasAnyUserAcknowledgedCameraRecordingOnboarding = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)setHasAnyUserAcknowledgedCameraRecordingOnboardingWithCompletionHandler:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  _BOOL4 v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  void *v14;
  HMHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  HMHome *v22;
  NSObject *v23;
  void *v24;
  id v25;
  _QWORD v26[4];
  id v27;
  HMHome *v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome setHasAnyUserAcknowledgedCameraRecordingOnboardingWithCompletionHandler:]", CFSTR("completion"));
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)MEMORY[0x1A1AC1AAC]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v24;
      v32 = 2112;
      v33 = (const char *)v20;
      _os_log_impl(&dword_19B1B0000, v23, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v20, 0);
    v25 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v25);
  }
  v6 = (void *)v5;
  if (v5)
  {
    v7 = -[HMHome hasAnyUserAcknowledgedCameraRecordingOnboarding](self, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
    v8 = (void *)MEMORY[0x1A1AC1AAC]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
    if (v7)
    {
      if (v11)
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v31 = v12;
        _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@setHasAnyUserAcknowledgedCameraRecordingOnboardingHandler is already set, skipping send message notification", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v8);
      objc_msgSend(v6, "delegateCaller");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "callCompletion:error:", v4, 0);
    }
    else
    {
      if (v11)
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v31 = v18;
        _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Sending set any user has acknowledged camera recording onboarding request", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v8);
      -[HMHome uuid](v9, "uuid");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = __82__HMHome_setHasAnyUserAcknowledgedCameraRecordingOnboardingWithCompletionHandler___block_invoke;
      v26[3] = &unk_1E3AB60C8;
      v27 = v6;
      v28 = v9;
      v29 = v4;
      -[_HMContext sendMessage:target:payload:responseHandler:](v27, CFSTR("HMHomeSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequestKey"), v19, 0, v26);

      v13 = v27;
    }
  }
  else
  {
    v14 = (void *)MEMORY[0x1A1AC1AAC]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v17;
      v32 = 2080;
      v33 = "-[HMHome setHasAnyUserAcknowledgedCameraRecordingOnboardingWithCompletionHandler:]";
      _os_log_impl(&dword_19B1B0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v4 + 2))(v4, v13);
  }

}

- (void)setDismissedWalletKeyUWBUnlockOnboardingWithCompletion:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  _BOOL4 v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  void *v14;
  HMHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  HMHome *v22;
  NSObject *v23;
  void *v24;
  id v25;
  _QWORD v26[4];
  id v27;
  HMHome *v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome setDismissedWalletKeyUWBUnlockOnboardingWithCompletion:]", CFSTR("completion"));
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)MEMORY[0x1A1AC1AAC]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v24;
      v32 = 2112;
      v33 = (const char *)v20;
      _os_log_impl(&dword_19B1B0000, v23, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v20, 0);
    v25 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v25);
  }
  v6 = (void *)v5;
  if (v5)
  {
    v7 = -[HMHome dismissedWalletKeyUWBUnlockOnboarding](self, "dismissedWalletKeyUWBUnlockOnboarding");
    v8 = (void *)MEMORY[0x1A1AC1AAC]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
    if (v7)
    {
      if (v11)
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v31 = v12;
        _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@dismissedWalletKeyUWBUnlockOnboarding is already set, skipping send message notification", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v8);
      objc_msgSend(v6, "delegateCaller");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "callCompletion:error:", v4, 0);
    }
    else
    {
      if (v11)
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v31 = v18;
        _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Sending dismissed Wallet Key UWB Unlock Onboarding request", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v8);
      -[HMHome uuid](v9, "uuid");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = __65__HMHome_setDismissedWalletKeyUWBUnlockOnboardingWithCompletion___block_invoke;
      v26[3] = &unk_1E3AB60C8;
      v27 = v6;
      v28 = v9;
      v29 = v4;
      -[_HMContext sendMessage:target:payload:responseHandler:](v27, CFSTR("HMHomeSetDismissedWalletKeyUWBUnlockOnboardingRequestKey"), v19, 0, v26);

      v13 = v27;
    }
  }
  else
  {
    v14 = (void *)MEMORY[0x1A1AC1AAC]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v17;
      v32 = 2080;
      v33 = "-[HMHome setDismissedWalletKeyUWBUnlockOnboardingWithCompletion:]";
      _os_log_impl(&dword_19B1B0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v4 + 2))(v4, v13);
  }

}

- (void)updateSoundCheckEnabled:(BOOL)a3 completion:(id)a4
{
  _BOOL8 v4;
  void (**v6)(id, void *);
  void *v7;
  HMHome *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  HMHome *v22;
  NSObject *v23;
  void *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  HMHome *v28;
  NSObject *v29;
  void *v30;
  id v31;
  _QWORD v32[5];
  id v33;
  void (**v34)(id, void *);
  BOOL v35;
  const __CFString *v36;
  void *v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  const char *v41;
  uint64_t v42;

  v4 = a3;
  v42 = *MEMORY[0x1E0C80C00];
  v6 = (void (**)(id, void *))a4;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v39 = v10;
    _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Sending setSoundCheck request", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v7);
  -[HMHome context](v8, "context");
  v11 = objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateSoundCheckEnabled:completion:]", CFSTR("completion"));
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = (void *)MEMORY[0x1A1AC1AAC]();
    v28 = v8;
    HMFGetOSLogHandle();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v39 = v30;
      v40 = 2112;
      v41 = (const char *)v26;
      _os_log_impl(&dword_19B1B0000, v29, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v27);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v26, 0);
    v31 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v31);
  }
  v12 = (void *)v11;
  if (!v11)
  {
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = v8;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v39 = v19;
      v40 = 2080;
      v41 = "-[HMHome updateSoundCheckEnabled:completion:]";
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v6[2](v6, v20);
    goto LABEL_13;
  }
  if (-[HMHome soundCheckEnabled](v8, "soundCheckEnabled") == v4)
  {
    v21 = (void *)MEMORY[0x1A1AC1AAC]();
    v22 = v8;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v25 = (char *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v39 = v24;
      v40 = 2112;
      v41 = v25;
      _os_log_impl(&dword_19B1B0000, v23, OS_LOG_TYPE_INFO, "%{public}@soundCheck is already set to:%@, skipping request", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(v12, "delegateCaller");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "callCompletion:error:", v6, 0);
LABEL_13:

    goto LABEL_14;
  }
  -[HMHome uuid](v8, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = CFSTR("HMHomeSoundCheckCodingKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = __45__HMHome_updateSoundCheckEnabled_completion___block_invoke;
  v32[3] = &unk_1E3AB3E78;
  v32[4] = v8;
  v33 = v12;
  v34 = v6;
  v35 = v4;
  -[_HMContext sendMessage:target:payload:responseHandler:](v33, CFSTR("HMHomeSetSoundCheckRequestKey"), v13, v15, v32);

LABEL_14:
}

- (void)updateAudioAnalysisClassifierOptions:(unint64_t)a3 completion:(id)a4
{
  id v6;
  void *v7;
  HMHome *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  HMHome *v14;
  NSObject *v15;
  void *v16;
  char *v17;
  void *v18;
  void *v19;
  HMHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  HMHome *v28;
  NSObject *v29;
  void *v30;
  id v31;
  _QWORD v32[5];
  id v33;
  id v34;
  unint64_t v35;
  const __CFString *v36;
  void *v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  const char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v39 = v10;
    _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Sending audio analysis classifier options update request", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v7);
  -[HMHome context](v8, "context");
  v11 = objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateAudioAnalysisClassifierOptions:completion:]", CFSTR("completion"));
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = (void *)MEMORY[0x1A1AC1AAC]();
    v28 = v8;
    HMFGetOSLogHandle();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v39 = v30;
      v40 = 2112;
      v41 = (const char *)v26;
      _os_log_impl(&dword_19B1B0000, v29, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v27);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v26, 0);
    v31 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v31);
  }
  v12 = (void *)v11;
  if (v11)
  {
    if (-[HMHome audioAnalysisClassifierOptions](v8, "audioAnalysisClassifierOptions") != a3)
    {
      -[HMHome uuid](v8, "uuid");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = CFSTR("HMHomeAudioAnalysisClassifierOptionsCodingKey");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = v24;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 3221225472;
      v32[2] = __58__HMHome_updateAudioAnalysisClassifierOptions_completion___block_invoke;
      v32[3] = &unk_1E3AB14C0;
      v32[4] = v8;
      v33 = v12;
      v34 = v6;
      v35 = a3;
      -[_HMContext sendMessage:target:payload:responseHandler:](v33, CFSTR("HMHomeAudioAnalysisClassifierOptionsRequestKey"), v23, v25, v32);

      goto LABEL_14;
    }
    v13 = (void *)MEMORY[0x1A1AC1AAC]();
    v14 = v8;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[HMHome audioAnalysisClassifierOptions](v14, "audioAnalysisClassifierOptions"));
      v17 = (char *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v39 = v16;
      v40 = 2112;
      v41 = v17;
      _os_log_impl(&dword_19B1B0000, v15, OS_LOG_TYPE_INFO, "%{public}@options already equal to %@, skipping", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(v12, "delegateCaller");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "callCompletion:error:", v6, 0);
  }
  else
  {
    v19 = (void *)MEMORY[0x1A1AC1AAC]();
    v20 = v8;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v39 = v22;
      v40 = 2080;
      v41 = "-[HMHome updateAudioAnalysisClassifierOptions:completion:]";
      _os_log_impl(&dword_19B1B0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v18);
  }

LABEL_14:
}

- (void)updateDidOnboardAudioAnalysis:(BOOL)a3 completion:(id)a4
{
  _BOOL8 v4;
  void (**v6)(id, void *);
  void *v7;
  HMHome *v8;
  NSObject *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void (**v17)(id, void *);
  void *v18;
  HMHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  HMHome *v24;
  NSObject *v25;
  void *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  HMHome *v30;
  NSObject *v31;
  void *v32;
  id v33;
  _QWORD v34[5];
  id v35;
  void (**v36)(id, void *);
  BOOL v37;
  const __CFString *v38;
  void *v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v4 = a3;
  v44 = *MEMORY[0x1E0C80C00];
  v6 = (void (**)(id, void *))a4;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v11 = (char *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v41 = v10;
    v42 = 2112;
    v43 = v11;
    _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Sending update did onboard home audio analysis request with value: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  -[HMHome context](v8, "context");
  v12 = objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateDidOnboardAudioAnalysis:completion:]", CFSTR("completion"));
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = (void *)MEMORY[0x1A1AC1AAC]();
    v30 = v8;
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v32;
      v42 = 2112;
      v43 = (const char *)v28;
      _os_log_impl(&dword_19B1B0000, v31, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v29);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v28, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v33);
  }
  v13 = (void *)v12;
  if (!v12)
  {
    v18 = (void *)MEMORY[0x1A1AC1AAC]();
    v19 = v8;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v21;
      v42 = 2080;
      v43 = "-[HMHome updateDidOnboardAudioAnalysis:completion:]";
      _os_log_impl(&dword_19B1B0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v6[2](v6, v22);
    goto LABEL_13;
  }
  if (-[HMHome didOnboardAudioAnalysis](v8, "didOnboardAudioAnalysis") == v4)
  {
    v23 = (void *)MEMORY[0x1A1AC1AAC]();
    v24 = v8;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome didOnboardAudioAnalysis](v24, "didOnboardAudioAnalysis");
      HMFBooleanToString();
      v27 = (char *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v26;
      v42 = 2112;
      v43 = v27;
      _os_log_impl(&dword_19B1B0000, v25, OS_LOG_TYPE_INFO, "%{public}@value already equal to %@, skipping", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(v13, "delegateCaller");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "callCompletion:error:", v6, 0);
LABEL_13:

    goto LABEL_14;
  }
  -[HMHome uuid](v8, "uuid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = CFSTR("HMHomeAudioAnalysisHomeOnboardingCodingKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = __51__HMHome_updateDidOnboardAudioAnalysis_completion___block_invoke;
  v34[3] = &unk_1E3AB3E78;
  v34[4] = v8;
  v35 = v13;
  v17 = v6;
  v36 = v17;
  v37 = v4;
  -[_HMContext sendMessage:target:payload:responseHandler:](v35, CFSTR("HMHomeAudioAnalysisHomeOnboardingRequestKey"), v14, v16, v34);

  v17[2](v17, 0);
LABEL_14:

}

- (id)createHomeAudioAnalysisEventSubscriber
{
  HMAudioAnalysisLastKnownEventSubscriber *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMAudioAnalysisLastKnownEventSubscriber *v9;

  v3 = [HMAudioAnalysisLastKnownEventSubscriber alloc];
  -[HMHome context](self, "context");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "eventRouter");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome context](self, "context");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "queue");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HMAudioAnalysisLastKnownEventSubscriber initWithContext:subscriptionProvider:dataSource:workQueue:](v3, "initWithContext:subscriptionProvider:dataSource:workQueue:", v4, v6, self, v8);

  return v9;
}

- (void)updateSiriPhraseOptions:(unint64_t)a3 completion:(id)a4
{
  id v6;
  void *v7;
  HMHome *v8;
  NSObject *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  HMHome *v15;
  NSObject *v16;
  void *v17;
  char *v18;
  void *v19;
  void *v20;
  HMHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  HMHome *v29;
  NSObject *v30;
  void *v31;
  id v32;
  _QWORD v33[5];
  id v34;
  id v35;
  unint64_t v36;
  const __CFString *v37;
  void *v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v11 = (char *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v40 = v10;
    v41 = 2112;
    v42 = v11;
    _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Sending Siri phrase options update request: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  -[HMHome context](v8, "context");
  v12 = objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateSiriPhraseOptions:completion:]", CFSTR("completion"));
    v27 = objc_claimAutoreleasedReturnValue();
    v28 = (void *)MEMORY[0x1A1AC1AAC]();
    v29 = v8;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v31;
      v41 = 2112;
      v42 = (const char *)v27;
      _os_log_impl(&dword_19B1B0000, v30, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v28);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v27, 0);
    v32 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v32);
  }
  v13 = (void *)v12;
  if (v12)
  {
    if (-[HMHome siriPhraseOptions](v8, "siriPhraseOptions") != a3)
    {
      -[HMHome uuid](v8, "uuid");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = CFSTR("HMHomeSiriPhraseOptionsCodingKey");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = v25;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v33[0] = MEMORY[0x1E0C809B0];
      v33[1] = 3221225472;
      v33[2] = __45__HMHome_updateSiriPhraseOptions_completion___block_invoke;
      v33[3] = &unk_1E3AB14C0;
      v33[4] = v8;
      v34 = v13;
      v35 = v6;
      v36 = a3;
      -[_HMContext sendMessage:target:payload:responseHandler:](v34, CFSTR("HMHomeSiriPhraseOptionsRequestKey"), v24, v26, v33);

      goto LABEL_14;
    }
    v14 = (void *)MEMORY[0x1A1AC1AAC]();
    v15 = v8;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[HMHome siriPhraseOptions](v15, "siriPhraseOptions"));
      v18 = (char *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v17;
      v41 = 2112;
      v42 = v18;
      _os_log_impl(&dword_19B1B0000, v16, OS_LOG_TYPE_INFO, "%{public}@Siri phrase options already equal to %@, skipping", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(v13, "delegateCaller");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "callCompletion:error:", v6, 0);
  }
  else
  {
    v20 = (void *)MEMORY[0x1A1AC1AAC]();
    v21 = v8;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v23;
      v41 = 2080;
      v42 = "-[HMHome updateSiriPhraseOptions:completion:]";
      _os_log_impl(&dword_19B1B0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v19);
  }

LABEL_14:
}

- (void)updateLocationServicesEnabled:(BOOL)a3 completion:(id)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  HMHome *v8;
  NSObject *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  HMHome *v24;
  NSObject *v25;
  void *v26;
  id v27;
  _QWORD v28[5];
  id v29;
  id v30;
  const __CFString *v31;
  void *v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v4 = a3;
  v37 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v11 = (char *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v34 = v10;
    v35 = 2112;
    v36 = v11;
    _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Sending update location services enabled request with value: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  -[HMHome context](v8, "context");
  v12 = objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateLocationServicesEnabled:completion:]", CFSTR("completion"));
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)MEMORY[0x1A1AC1AAC]();
    v24 = v8;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v26;
      v35 = 2112;
      v36 = (const char *)v22;
      _os_log_impl(&dword_19B1B0000, v25, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v22, 0);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v27);
  }
  v13 = (void *)v12;
  if (v12)
  {
    -[HMHome uuid](v8, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = CFSTR("HMHomeLocationServicesEnabledCodingKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v4);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v15;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __51__HMHome_updateLocationServicesEnabled_completion___block_invoke;
    v28[3] = &unk_1E3AB60C8;
    v28[4] = v8;
    v29 = v13;
    v30 = v6;
    -[_HMContext sendMessage:target:payload:responseHandler:](v29, CFSTR("HMHomeUpdateLocationServicesEnabledRequestKey"), v14, v16, v28);

  }
  else
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = v8;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v20;
      v35 = 2080;
      v36 = "-[HMHome updateLocationServicesEnabled:completion:]";
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v21);

  }
}

- (void)updateDidOnboardLocationServices:(BOOL)a3 completion:(id)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  HMHome *v8;
  NSObject *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  HMHome *v24;
  NSObject *v25;
  void *v26;
  id v27;
  _QWORD v28[5];
  id v29;
  id v30;
  const __CFString *v31;
  void *v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v4 = a3;
  v37 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v11 = (char *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v34 = v10;
    v35 = 2112;
    v36 = v11;
    _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Sending update did onboard location services request with value: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  -[HMHome context](v8, "context");
  v12 = objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateDidOnboardLocationServices:completion:]", CFSTR("completion"));
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)MEMORY[0x1A1AC1AAC]();
    v24 = v8;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v26;
      v35 = 2112;
      v36 = (const char *)v22;
      _os_log_impl(&dword_19B1B0000, v25, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v22, 0);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v27);
  }
  v13 = (void *)v12;
  if (v12)
  {
    -[HMHome uuid](v8, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = CFSTR("HMHomeDidOnboardLocationServicesCodingKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v4);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v15;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __54__HMHome_updateDidOnboardLocationServices_completion___block_invoke;
    v28[3] = &unk_1E3AB60C8;
    v28[4] = v8;
    v29 = v13;
    v30 = v6;
    -[_HMContext sendMessage:target:payload:responseHandler:](v29, CFSTR("HMHomeUpdateDidOnboardLocationServicesRequestKey"), v14, v16, v28);

  }
  else
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = v8;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v20;
      v35 = 2080;
      v36 = "-[HMHome updateDidOnboardLocationServices:completion:]";
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v21);

  }
}

- (NSTimeZone)timeZone
{
  os_unfair_lock_s *p_lock;
  NSTimeZone *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_timeZone;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (void)setTimeZone:(id)a3
{
  NSTimeZone *v4;
  NSTimeZone *timeZone;

  v4 = (NSTimeZone *)a3;
  os_unfair_lock_lock_with_options();
  timeZone = self->_timeZone;
  self->_timeZone = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (BOOL)isEventLogEnabled
{
  HMHome *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_eventLogEnabled;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (void)setEventLogEnabled:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_eventLogEnabled = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)updateEventLogEnabled:(BOOL)a3 completionHandler:(id)a4
{
  _BOOL8 v4;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  HMHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  HMHome *v27;
  NSObject *v28;
  void *v29;
  id v30;
  _QWORD aBlock[5];
  id v32;
  id v33;
  BOOL v34;
  const __CFString *v35;
  void *v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v4 = a3;
  v41 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMHome context](self, "context");
  v7 = objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateEventLogEnabled:completionHandler:]", CFSTR("completion"));
    v25 = objc_claimAutoreleasedReturnValue();
    v26 = (void *)MEMORY[0x1A1AC1AAC]();
    v27 = self;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v29;
      v39 = 2112;
      v40 = (const char *)v25;
      _os_log_impl(&dword_19B1B0000, v28, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v25, 0);
    v30 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v30);
  }
  v8 = (void *)v7;
  if (v7)
  {
    -[HMHome homeManager](self, "homeManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isDaemonRunningWithROARFramework");

    if ((v10 & 1) != 0)
    {
      v35 = CFSTR("HM.EL.enabled");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v4);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = v11;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __50__HMHome_updateEventLogEnabled_completionHandler___block_invoke;
      aBlock[3] = &unk_1E3AB3E78;
      aBlock[4] = self;
      v13 = v8;
      v32 = v13;
      v33 = v6;
      v34 = v4;
      v14 = _Block_copy(aBlock);
      -[HMHome uuid](self, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[_HMContext sendMessage:target:payload:responseHandler:](v13, CFSTR("HM.EL.setEnabled"), v15, v12, v14);

    }
    else
    {
      v20 = (void *)MEMORY[0x1A1AC1AAC]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v38 = v23;
        _os_log_impl(&dword_19B1B0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Activity history is only supported in HH2 mode", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
      objc_msgSend(v8, "delegateCaller");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "callCompletion:error:", v6, v24);

    }
  }
  else
  {
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v19;
      v39 = 2080;
      v40 = "-[HMHome updateEventLogEnabled:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v12);
  }

}

- (BOOL)didOnboardEventLog
{
  HMHome *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_didOnboardEventLog;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (void)setDidOnboardEventLog:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_didOnboardEventLog = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)updateDidOnboardEventLogWithCompletionHandler:(id)a3
{
  -[HMHome _updateDidOnboardEventLog:completion:](self, 1, a3);
}

- (void)resetDidOnboardEventLogWithCompletionHandler:(id)a3
{
  -[HMHome _updateDidOnboardEventLog:completion:](self, 0, a3);
}

- (void)_callDelegateDidUpdateEventLogEnabled
{
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[4];
  id v8;
  id v9;
  HMHome *v10;

  -[HMHome _privateDelegate](self, "_privateDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4)
    {
      objc_msgSend(v4, "queue");
      v6 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __47__HMHome__callDelegateDidUpdateEventLogEnabled__block_invoke;
      block[3] = &unk_1E3AB5CD0;
      v8 = v5;
      v9 = v3;
      v10 = self;
      dispatch_async(v6, block);

    }
  }

}

- (void)_callDelegateDidOnboardEventLog
{
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[4];
  id v8;
  id v9;
  HMHome *v10;

  -[HMHome _privateDelegate](self, "_privateDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4)
    {
      objc_msgSend(v4, "queue");
      v6 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __41__HMHome__callDelegateDidOnboardEventLog__block_invoke;
      block[3] = &unk_1E3AB5CD0;
      v8 = v5;
      v9 = v3;
      v10 = self;
      dispatch_async(v6, block);

    }
  }

}

- (void)updateEventLogDuration:(unint64_t)a3 completionHandler:(id)a4
{
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  HMHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  HMHome *v27;
  NSObject *v28;
  void *v29;
  id v30;
  _QWORD aBlock[5];
  id v32;
  id v33;
  unint64_t v34;
  const __CFString *v35;
  void *v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMHome context](self, "context");
  v7 = objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateEventLogDuration:completionHandler:]", CFSTR("completion"));
    v25 = objc_claimAutoreleasedReturnValue();
    v26 = (void *)MEMORY[0x1A1AC1AAC]();
    v27 = self;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v29;
      v39 = 2112;
      v40 = (const char *)v25;
      _os_log_impl(&dword_19B1B0000, v28, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v25, 0);
    v30 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v30);
  }
  v8 = (void *)v7;
  if (v7)
  {
    -[HMHome homeManager](self, "homeManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isDaemonRunningWithROARFramework");

    if ((v10 & 1) != 0)
    {
      v35 = CFSTR("HM.EL.duration");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = v11;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __51__HMHome_updateEventLogDuration_completionHandler___block_invoke;
      aBlock[3] = &unk_1E3AB14C0;
      aBlock[4] = self;
      v13 = v8;
      v32 = v13;
      v33 = v6;
      v34 = a3;
      v14 = _Block_copy(aBlock);
      -[HMHome uuid](self, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[_HMContext sendMessage:target:payload:responseHandler:](v13, CFSTR("HM.EL.setDuration"), v15, v12, v14);

    }
    else
    {
      v20 = (void *)MEMORY[0x1A1AC1AAC]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v38 = v23;
        _os_log_impl(&dword_19B1B0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Activity history is only supported in HH2 mode", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
      objc_msgSend(v8, "delegateCaller");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "callCompletion:error:", v6, v24);

    }
  }
  else
  {
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v19;
      v39 = 2080;
      v40 = "-[HMHome updateEventLogDuration:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v12);
  }

}

- (void)clearEventLogWithCompletionHandler:(id)a3
{
  void (**v4)(id, void *);
  uint64_t v5;
  void *v6;
  void *v7;
  char v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  HMHome *v24;
  NSObject *v25;
  void *v26;
  id v27;
  _QWORD aBlock[5];
  id v29;
  void (**v30)(id, void *);
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = (void (**)(id, void *))a3;
  -[HMHome context](self, "context");
  v5 = objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome clearEventLogWithCompletionHandler:]", CFSTR("completion"));
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)MEMORY[0x1A1AC1AAC]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v26;
      v33 = 2112;
      v34 = (const char *)v22;
      _os_log_impl(&dword_19B1B0000, v25, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v22, 0);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v27);
  }
  v6 = (void *)v5;
  if (!v5)
  {
    v12 = (void *)MEMORY[0x1A1AC1AAC]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v15;
      v33 = 2080;
      v34 = "-[HMHome clearEventLogWithCompletionHandler:]";
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v4[2](v4, v16);
    goto LABEL_11;
  }
  -[HMHome homeManager](self, "homeManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isDaemonRunningWithROARFramework");

  if ((v8 & 1) == 0)
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v32 = v20;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Activity history is only supported in HH2 mode", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(v6, "delegateCaller");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "callCompletion:error:", v4, v21);

LABEL_11:
    goto LABEL_12;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __45__HMHome_clearEventLogWithCompletionHandler___block_invoke;
  aBlock[3] = &unk_1E3AB60C8;
  aBlock[4] = self;
  v9 = v6;
  v29 = v9;
  v30 = v4;
  v10 = _Block_copy(aBlock);
  -[HMHome uuid](self, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[_HMContext sendMessage:target:payload:responseHandler:](v9, CFSTR("HM.EL.clear"), v11, 0, v10);

LABEL_12:
}

- (void)setHasOnboardedForAccessCode:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_hasOnboardedForAccessCode = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)setHasOnboardedForWalletKey:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_hasOnboardedForWalletKey = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)_handleDidAddWalletKeyMessage:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  HMHome *v9;

  -[HMHome _privateDelegate](self, "_privateDelegate", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "delegateCaller");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __40__HMHome__handleDidAddWalletKeyMessage___block_invoke;
    v7[3] = &unk_1E3AB5ED8;
    v8 = v4;
    v9 = self;
    objc_msgSend(v6, "invokeBlock:", v7);

  }
}

- (void)_handleDidRemoveWalletKeyMessage:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  HMHome *v9;

  -[HMHome _privateDelegate](self, "_privateDelegate", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "delegateCaller");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __43__HMHome__handleDidRemoveWalletKeyMessage___block_invoke;
    v7[3] = &unk_1E3AB5ED8;
    v8 = v4;
    v9 = self;
    objc_msgSend(v6, "invokeBlock:", v7);

  }
}

- (void)_handleHMMMRequestReceivedMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  int v10;
  os_unfair_lock_s *p_lock;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD, _QWORD);
  HMMMClientRequestHandlerOptions *v14;
  HMMMMessageDestination *v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  HMMMClientRequestHandlerOptions *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD aBlock[5];
  id v33;
  id v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome uuid](self, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMMMLogOrigin originWithLogIdentifier:](HMMMLogOrigin, "originWithLogIdentifier:", v6);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "messagePayload");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "hmf_stringForKey:", CFSTR("HMMM.payload.key.message.name"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "hmf_dataForKey:", CFSTR("HMMM.payload.key.payload"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "hmf_stringForKey:", CFSTR("HMMM.payload.key.destination.identifier"));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "hmf_stringForKey:", CFSTR("HMMM.payload.key.destination.uri"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome userFromPayload:](self, "userFromPayload:", v7);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v7, "hmf_BOOLForKey:", CFSTR("HMMM.payload.key.oneway"));
  if (!v8)
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC](v9);
    v18 = v31;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v20;
      v37 = 2112;
      v38 = v7;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Error during _handleHMMMRequestReceivedMessage: No message name in HMMT payload: %@", buf, 0x16u);

    }
    goto LABEL_7;
  }
  v10 = v9;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  -[HMHome hmModernMessagingRequestHandlersByMessageName](self, "hmModernMessagingRequestHandlersByMessageName");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "objectForKeyedSubscript:", v8);
  v13 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock(p_lock);
  if (!v13)
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = v31;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v21;
      v37 = 2112;
      v38 = v8;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Error during _handleHMMMRequestReceivedMessage: Did not find request handler for message name: %@", buf, 0x16u);

    }
LABEL_7:

    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v13 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v13);
    goto LABEL_17;
  }
  v14 = [HMMMClientRequestHandlerOptions alloc];
  v15 = -[HMMMMessageDestination initWithIDSIdentifier:idsTokenURI:]([HMMMMessageDestination alloc], "initWithIDSIdentifier:idsTokenURI:", v30, v29);
  v26 = -[HMMMClientRequestHandlerOptions initWithPeerDestination:messageName:user:](v14, "initWithPeerDestination:messageName:user:", v15, v8, v28);

  if ((v10 & 1) != 0)
  {
    v16 = 0;
  }
  else
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __44__HMHome__handleHMMMRequestReceivedMessage___block_invoke;
    aBlock[3] = &unk_1E3AB1510;
    aBlock[4] = v31;
    v33 = v8;
    v34 = v4;
    v16 = _Block_copy(aBlock);

  }
  v22 = (void *)MEMORY[0x1A1AC1AAC]();
  v23 = v31;
  HMFGetOSLogHandle();
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v36 = v25;
    v37 = 2112;
    v38 = v8;
    _os_log_impl(&dword_19B1B0000, v24, OS_LOG_TYPE_INFO, "%{public}@Delivering HMMM request to request handler with message name: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v22);
  ((void (**)(_QWORD, void *, HMMMClientRequestHandlerOptions *, void *))v13)[2](v13, v27, v26, v16);
  if (v10)
    objc_msgSend(v4, "respondWithSuccess");

LABEL_17:
}

- (void)setDismissedWalletKeyUWBUnlockOnboarding:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_dismissedWalletKeyUWBUnlockOnboarding = a3;
  os_unfair_lock_unlock(p_lock);
}

- (BOOL)dismissedWalletKeyUWBUnlockOnboarding
{
  HMHome *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_dismissedWalletKeyUWBUnlockOnboarding;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (BOOL)isUpdatedToROAR
{
  HMHome *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_isUpdatedToROAR;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (void)_handleAccessoryConnectivityChangedNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v4 = a3;
  objc_msgSend(v4, "dictionaryForKey:", CFSTR("kAccessoriesListKey"));
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(v4, "name");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "UUIDString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringWithFormat:", CFSTR("Home-%@%@"), v6, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  __handleAccessoryRuntimeStateUpdate(self, v10, v9);
}

- (HMHomeDelegatePrivate)_privateDelegate
{
  void *v2;
  id v3;

  -[HMHome delegate](self, "delegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "conformsToProtocol:", &unk_1EE45A110))
    v3 = v2;
  else
    v3 = 0;

  return (HMHomeDelegatePrivate *)v3;
}

- (id)roomWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;

  v4 = a3;
  -[HMHome(HMRoom) roomForEntireHome](self, "roomForEntireHome");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isEqual:", v4);

  if (v7)
  {
    -[HMHome(HMRoom) roomForEntireHome](self, "roomForEntireHome");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[HMHome currentRooms](self, "currentRooms");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "firstItemWithUUID:", v4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v8;
}

- (id)roomWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMHome currentRooms](self, "currentRooms");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstItemWithName:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)zoneWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMHome currentZones](self, "currentZones");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstItemWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)zoneWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMHome currentZones](self, "currentZones");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstItemWithName:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)serviceGroupWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMHome currentServiceGroups](self, "currentServiceGroups");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstItemWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)serviceGroupWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMHome currentServiceGroups](self, "currentServiceGroups");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstItemWithName:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)actionSetWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMHome currentActionSets](self, "currentActionSets");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstItemWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)triggerOwnedActionSetWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMHome currentTriggerOwnedActionSets](self, "currentTriggerOwnedActionSets");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstItemWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)actionSetWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMHome currentActionSets](self, "currentActionSets");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstItemWithName:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)triggerWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMHome currentTriggers](self, "currentTriggers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstItemWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)triggerWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMHome currentTriggers](self, "currentTriggers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstItemWithName:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)userWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;

  v4 = a3;
  -[HMHome users](self, "users");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    -[HMHome currentUser](self, "currentUser");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isEqual:", v4);

    if (v9)
    {
      -[HMHome currentUser](self, "currentUser");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = 0;
    }
  }

  return v6;
}

- (id)accessoryWithUniqueIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  char v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMHome accessories](self, "accessories", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v14;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v9, "uniqueIdentifier");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "isEqual:", v4);

        if ((v11 & 1) != 0)
        {
          v6 = v9;
          goto LABEL_11;
        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  return v6;
}

- (id)mediaSystemWithUniqueIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMHome mediaSystemStageManager](self, "mediaSystemStageManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "mediaSystemWithUniqueIdentifier:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)mediaSystemWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMHome mediaSystemStageManager](self, "mediaSystemStageManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "mediaSystemWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (void)_notifySetupFailedIfInHomeUIService:(id)a3
{
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  void *v7;
  HMHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  HMHome *v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = (void (**)(_QWORD))a3;
  -[HMHome _privateDelegate](self, "_privateDelegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v4[2](v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)MEMORY[0x1A1AC1AAC]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v19 = v10;
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Notifying HomeUIService of failed accessory setup with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    -[HMHome context](v8, "context");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __46__HMHome__notifySetupFailedIfInHomeUIService___block_invoke;
    v14[3] = &unk_1E3AB5CD0;
    v15 = v5;
    v16 = v8;
    v17 = v6;
    v13 = v6;
    objc_msgSend(v12, "invokeBlock:", v14);

  }
}

- (id)mediaProfileWithUUID:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  char v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMHome accessories](self, "accessories", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v15;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v15 != v8)
        objc_enumerationMutation(v5);
      objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v9), "mediaProfile");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "uniqueIdentifier");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "isEqual:", v4);

      if ((v12 & 1) != 0)
        break;

      if (v7 == ++v9)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v7)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v10 = 0;
  }

  return v10;
}

- (id)mediaProfileWithProfileUUID:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  char v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMHome accessories](self, "accessories", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v15;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v15 != v8)
        objc_enumerationMutation(v5);
      objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v9), "mediaProfile");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "profileUniqueIdentifier");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "isEqual:", v4);

      if ((v12 & 1) != 0)
        break;

      if (v7 == ++v9)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v7)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v10 = 0;
  }

  return v10;
}

- (id)profileWithUniqueIdentifier:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  void *v15;
  void *v16;
  char v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  -[HMHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
  if (v21)
  {
    v6 = *(_QWORD *)v27;
    v20 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v21; ++i)
      {
        if (*(_QWORD *)v27 != v6)
          objc_enumerationMutation(v5);
        v8 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
        v22 = 0u;
        v23 = 0u;
        v24 = 0u;
        v25 = 0u;
        objc_msgSend(v8, "accessoryProfiles", v20);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "array");
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v23;
          while (2)
          {
            for (j = 0; j != v12; ++j)
            {
              if (*(_QWORD *)v23 != v13)
                objc_enumerationMutation(v10);
              v15 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * j);
              objc_msgSend(v15, "uniqueIdentifier");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = objc_msgSend(v16, "isEqual:", v4);

              if ((v17 & 1) != 0)
              {
                v18 = v15;

                goto LABEL_19;
              }
            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
            if (v12)
              continue;
            break;
          }
        }

        v6 = v20;
      }
      v18 = 0;
      v21 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    }
    while (v21);
  }
  else
  {
    v18 = 0;
  }
LABEL_19:

  return v18;
}

- (id)lightProfileWithProfileUUID:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  void *v14;
  void *v15;
  char v16;
  id v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  -[HMHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v20)
  {
    v6 = *(_QWORD *)v26;
    v19 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v26 != v6)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * i), "lightProfiles", v19);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v24 = 0u;
        v9 = v8;
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v22;
          while (2)
          {
            for (j = 0; j != v11; ++j)
            {
              if (*(_QWORD *)v22 != v12)
                objc_enumerationMutation(v9);
              v14 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * j);
              objc_msgSend(v14, "profileUniqueIdentifier");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              v16 = objc_msgSend(v15, "isEqual:", v4);

              if ((v16 & 1) != 0)
              {
                v17 = v14;

                goto LABEL_19;
              }
            }
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
            if (v11)
              continue;
            break;
          }
        }

        v6 = v19;
      }
      v17 = 0;
      v20 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v20);
  }
  else
  {
    v17 = 0;
  }
LABEL_19:

  return v17;
}

- (void)_handleHomeLocationUpdateNotification:(id)a3
{
  id v4;

  objc_msgSend(a3, "messagePayload");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[HMHome _handleHomeLocationUpdate:](self, "_handleHomeLocationUpdate:", v4);

}

- (BOOL)_addActionSetFromResponse:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  char v22;
  void *v23;
  void *v25;
  _QWORD v26[4];
  id v27;
  HMHome *v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "hmf_UUIDForKey:", CFSTR("kActionSetUUID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_stringForKey:", CFSTR("kActionSetName"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_stringForKey:", CFSTR("kActionSetType"));
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  if (v8 && v9 && v10)
  {
    -[HMHome createActionSetWithName:type:uuid:](self, "createActionSetWithName:type:uuid:", v9, v10, v8);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome currentActionSets](self, "currentActionSets");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "addObject:", v12);

    if (v7)
    {
      -[HMHome context](self, "context");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "delegateCaller");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "callCompletion:actionSet:error:", v7, v12, 0);

      v16 = 0;
    }
    else
    {
      -[HMHome delegate](self, "delegate");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_opt_respondsToSelector();
      if ((v22 & 1) != 0)
      {
        -[HMHome context](self, "context");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "delegateCaller");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v26[0] = MEMORY[0x1E0C809B0];
        v26[1] = 3221225472;
        v26[2] = __47__HMHome__addActionSetFromResponse_completion___block_invoke;
        v26[3] = &unk_1E3AB5CD0;
        v27 = v21;
        v28 = self;
        v29 = v12;
        objc_msgSend(v23, "invokeBlock:", v26);

      }
      v16 = v22 ^ 1;

    }
  }
  else
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v31 = v20;
      v32 = 2112;
      v33 = v8;
      v34 = 2112;
      v35 = v9;
      v36 = 2112;
      v37 = v11;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Received a new actionSet without uuid %@ or name %@ or type %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v17);
    v16 = 1;
  }

  return v16 & 1;
}

- (BOOL)_handleActionSetRemovedFromResponse:(id)a3 responsePayload:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  HMHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  char v20;
  void *v21;
  void *v22;
  _QWORD v24[4];
  id v25;
  HMHome *v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = _Block_copy(v6);
  objc_msgSend(v7, "hmf_UUIDForKey:", CFSTR("kActionSetUUID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    -[HMHome actionSetWithUUID:](self, "actionSetWithUUID:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      -[HMHome currentActionSets](self, "currentActionSets");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "removeObject:", v10);

      objc_msgSend(v10, "_unconfigure");
      if (v8)
      {
        -[HMHome context](self, "context");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "delegateCaller");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "callCompletion:error:", v8, 0);

        v14 = 0;
      }
      else
      {
        -[HMHome delegate](self, "delegate");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_opt_respondsToSelector();
        if ((v20 & 1) != 0)
        {
          -[HMHome context](self, "context");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "delegateCaller");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v24[0] = MEMORY[0x1E0C809B0];
          v24[1] = 3221225472;
          v24[2] = __62__HMHome__handleActionSetRemovedFromResponse_responsePayload___block_invoke;
          v24[3] = &unk_1E3AB5CD0;
          v25 = v19;
          v26 = self;
          v27 = v10;
          objc_msgSend(v22, "invokeBlock:", v24);

        }
        v14 = v20 ^ 1;

      }
    }
    else
    {
      v14 = 1;
    }

  }
  else
  {
    v15 = (void *)MEMORY[0x1A1AC1AAC]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v18;
      _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Response for API removeActionSet does not contain UUID.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    v14 = 1;
  }

  return v14 & 1;
}

- (void)notifyDelegatesOfExecutionForActionSet:(id)a3 atDate:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  _QWORD v15[5];
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __56__HMHome_notifyDelegatesOfExecutionForActionSet_atDate___block_invoke;
    v15[3] = &unk_1E3AB5ED8;
    v15[4] = self;
    v16 = v6;
    dispatch_async(v10, v15);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v18 = v14;
      v19 = 2080;
      v20 = "-[HMHome notifyDelegatesOfExecutionForActionSet:atDate:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
  }

}

- (BOOL)_addEventTriggerFromResponse:(id)a3 withEventTrigger:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  NSObject *v17;
  HMHome *v18;
  char *v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  void *v38;
  NSObject *v39;
  void *v40;
  BOOL v41;
  void *v42;
  void *v43;
  NSObject *v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  NSObject *v49;
  void *v50;
  void *v52;
  void *v53;
  _QWORD block[5];
  id v55;
  _QWORD v56[4];
  NSObject *v57;
  _QWORD v58[4];
  NSObject *v59;
  uint8_t buf[4];
  void *v61;
  __int16 v62;
  const char *v63;
  __int16 v64;
  id v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v8, "hmf_stringForKey:", CFSTR("kTriggerName"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "hmf_UUIDForKey:", CFSTR("kTriggerUUID"));
  v12 = (char *)objc_claimAutoreleasedReturnValue();
  v13 = v9;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v14 = v13;
  else
    v14 = 0;
  v15 = v14;

  v16 = (void *)MEMORY[0x1A1AC1AAC]();
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v18 = self;
    v19 = v12;
    v20 = v11;
    v21 = v10;
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v61 = v22;
    v62 = 2112;
    v63 = (const char *)v8;
    _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@Received a new trigger added with message %@", buf, 0x16u);

    v10 = v21;
    v11 = v20;
    v12 = v19;
    self = v18;
  }

  objc_autoreleasePoolPop(v16);
  if (!v12 || !v11)
  {
    v38 = (void *)MEMORY[0x1A1AC1AAC]();
    HMFGetOSLogHandle();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v61 = v40;
      v62 = 2112;
      v63 = v12;
      v64 = 2112;
      v65 = v11;
      _os_log_impl(&dword_19B1B0000, v39, OS_LOG_TYPE_DEFAULT, "%{public}@Received a new trigger without uuid %@ or name %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v38);
    goto LABEL_18;
  }
  if (v15)
  {
    v53 = v10;
    objc_msgSend(v8, "hmf_stringForKey:", CFSTR("HMT.triggerConfiguredNameKey"));
    v23 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setUuid:", v12);
    v52 = (void *)v23;
    objc_msgSend(v15, "setConfiguredName:", v23);
    -[HMHome context](self, "context");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "__configureWithContext:home:", v24, self);

    -[HMHome currentTriggers](self, "currentTriggers");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "addObject:", v15);

    v26 = dispatch_group_create();
    objc_msgSend(v15, "events");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v27, "count");

    v29 = MEMORY[0x1E0C809B0];
    if (v28)
    {
      dispatch_group_enter(v26);
      objc_msgSend(v15, "events");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v58[0] = MEMORY[0x1E0C809B0];
      v58[1] = 3221225472;
      v58[2] = __67__HMHome__addEventTriggerFromResponse_withEventTrigger_completion___block_invoke;
      v58[3] = &unk_1E3AB5CA8;
      v59 = v26;
      objc_msgSend(v15, "updateEvents:completionHandler:", v30, v58);

      v29 = MEMORY[0x1E0C809B0];
    }
    v31 = v29;
    objc_msgSend(v15, "endEvents");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend(v32, "count");

    if (v33)
    {
      dispatch_group_enter(v26);
      objc_msgSend(v15, "endEvents");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v56[0] = v31;
      v56[1] = 3221225472;
      v56[2] = __67__HMHome__addEventTriggerFromResponse_withEventTrigger_completion___block_invoke_2;
      v56[3] = &unk_1E3AB5CA8;
      v57 = v26;
      objc_msgSend(v15, "updateEndEvents:completionHandler:", v34, v56);

    }
    -[HMHome context](self, "context");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    if (v35)
    {
      v36 = v35;
      objc_msgSend(v35, "queue");
      v37 = objc_claimAutoreleasedReturnValue();
      block[0] = v31;
      block[1] = 3221225472;
      block[2] = __67__HMHome__addEventTriggerFromResponse_withEventTrigger_completion___block_invoke_795;
      block[3] = &unk_1E3AB60A0;
      block[4] = self;
      v10 = v53;
      v55 = v53;
      dispatch_group_notify(v26, v37, block);

    }
    else
    {
      v48 = (void *)MEMORY[0x1A1AC1AAC]();
      HMFGetOSLogHandle();
      v49 = objc_claimAutoreleasedReturnValue();
      v10 = v53;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v61 = v50;
        v62 = 2080;
        v63 = "-[HMHome _addEventTriggerFromResponse:withEventTrigger:completion:]";
        _os_log_impl(&dword_19B1B0000, v49, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v48);
    }

    v41 = 0;
    v15 = v13;
    goto LABEL_27;
  }
  +[HMEventTrigger createWithDictionary:home:](HMEventTrigger, "createWithDictionary:home:", v8, self);
  v15 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setUuid:", v12);
  -[HMHome context](self, "context");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "__configureWithContext:home:", v42, self);

  if (!objc_msgSend(v15, "compatibleWithApp"))
  {
LABEL_18:
    v41 = 1;
    goto LABEL_27;
  }
  v43 = (void *)MEMORY[0x1A1AC1AAC]();
  HMFGetOSLogHandle();
  v44 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v45 = v10;
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v61 = v46;
    v62 = 2112;
    v63 = (const char *)v15;
    v64 = 2112;
    v65 = v8;
    _os_log_impl(&dword_19B1B0000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Created new event trigger %@ from response Payload %@", buf, 0x20u);

    v10 = v45;
  }

  objc_autoreleasePoolPop(v43);
  -[HMHome currentTriggers](self, "currentTriggers");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v47, "addObject:", v15);

  -[HMHome _notifyDelegateOfTriggerAdded:](self, "_notifyDelegateOfTriggerAdded:", v15);
  v41 = 0;
LABEL_27:

  return v41;
}

- (BOOL)_addTimerTriggerFromResponse:(id)a3 withTimerTrigger:(id)a4 completion:(id)a5
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  HMTimerTrigger *v14;
  HMTimerTrigger *v15;
  HMTimerTrigger *v16;
  BOOL v17;
  HMTimerTrigger *v18;
  HMTimerTrigger *v19;
  HMTimerTrigger *v20;
  void *v21;
  id v23;
  void *v24;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v7 = a3;
  v8 = a4;
  v9 = a5;
  objc_msgSend(v7, "hmf_stringForKey:", CFSTR("kTriggerName"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "hmf_UUIDForKey:", CFSTR("kTriggerUUID"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "hmf_dateForKey:", CFSTR("kTimerTriggerInitialFireDateKey"));
  v12 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "hmf_timeZoneForKey:", CFSTR("kTimerTriggerTimeZoneDataKey"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "dateComponentsForKey:", CFSTR("kTimerTriggerRecurrenceDataKey"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "arrayOfDateComponentsFromDataForKey:", CFSTR("kTimerTriggerRecurrencesKey"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "dateComponentsForKey:", CFSTR("kTimerTriggerSignificantEventOffsetKey"));
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "hmf_stringForKey:", CFSTR("kTimerTriggerSignificantEventKey"));
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (HMTimerTrigger *)v8;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v15 = v14;
  else
    v15 = 0;
  v16 = v15;

  v17 = 1;
  if (v11 && v10 && v12 | v13)
  {
    v23 = v9;
    v18 = v14;
    if (v16)
    {
LABEL_15:
      objc_msgSend(v7, "hmf_stringForKey:", CFSTR("HMT.triggerConfiguredNameKey"), v23);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMTrigger setConfiguredName:](v18, "setConfiguredName:", v21);
      v17 = -[HMHome _addTrigger:triggerUUID:completion:](self, "_addTrigger:triggerUUID:completion:", v18, v11, v24);

      v16 = v18;
      v9 = v24;
      goto LABEL_16;
    }
    if (v12)
    {
      v19 = [HMTimerTrigger alloc];
      if (v28)
        v20 = -[HMTimerTrigger initWithName:fireDate:timeZone:recurrence:recurrenceCalendar:](v19, "initWithName:fireDate:timeZone:recurrence:recurrenceCalendar:", v10, v12, v29, v28, 0);
      else
        v20 = -[HMTimerTrigger initWithName:fireDate:timeZone:recurrences:](v19, "initWithName:fireDate:timeZone:recurrences:", v10, v12, v29, v27);
    }
    else
    {
      if (!v13)
        goto LABEL_17;
      v20 = -[HMTimerTrigger initWithName:significantEvent:significantEventOffset:recurrences:]([HMTimerTrigger alloc], "initWithName:significantEvent:significantEventOffset:recurrences:", v10, v13, v26, 0);
    }
    v18 = v20;
    if (v20)
      goto LABEL_15;
LABEL_17:
    v16 = 0;
    v9 = v23;
  }
LABEL_16:

  return v17;
}

- (BOOL)_addTrigger:(id)a3 triggerUUID:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  int v27;
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x1A1AC1AAC]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 138543618;
    v28 = v14;
    v29 = 2112;
    v30 = v8;
    _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_INFO, "%{public}@Adding a new trigger: %@", (uint8_t *)&v27, 0x16u);

  }
  objc_autoreleasePoolPop(v11);
  objc_msgSend(v8, "setUuid:", v9);
  -[HMHome context](v12, "context");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "__configureWithContext:home:", v15, v12);

  -[HMHome currentTriggers](v12, "currentTriggers");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "addObject:", v8);

  v17 = (void *)MEMORY[0x1A1AC1AAC]();
  if (v10)
  {
    v18 = v12;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = _Block_copy(v10);
      v27 = 138543618;
      v28 = v20;
      v29 = 2112;
      v30 = v21;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_INFO, "%{public}@_addTrigger : Calling completion : %@", (uint8_t *)&v27, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    -[HMHome context](v18, "context");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "delegateCaller");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "callCompletion:error:", v10, 0);

  }
  else
  {
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138543362;
      v28 = v25;
      _os_log_impl(&dword_19B1B0000, v24, OS_LOG_TYPE_DEFAULT, "%{public}@_addTrigger : Calling delegate", (uint8_t *)&v27, 0xCu);

    }
    objc_autoreleasePoolPop(v17);
    -[HMHome _notifyDelegateOfTriggerAdded:](v12, "_notifyDelegateOfTriggerAdded:", v8);
  }

  return 0;
}

- (BOOL)_removeTriggerFromResponse:(id)a3 completion:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  BOOL v9;
  void *v10;
  void *v11;
  void *v12;

  v6 = a4;
  objc_msgSend(a3, "hmf_UUIDForKey:", CFSTR("kTriggerUUID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    -[HMHome triggerWithUUID:](self, "triggerWithUUID:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8 == 0;
    if (v8)
    {
      -[HMHome currentTriggers](self, "currentTriggers");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "removeObject:", v8);

      objc_msgSend(v8, "_unconfigure");
      if (v6)
      {
        -[HMHome context](self, "context");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "delegateCaller");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "callCompletion:error:", v6, 0);

      }
      else
      {
        -[HMHome _notifyDelegateOfTriggerRemoved:](self, "_notifyDelegateOfTriggerRemoved:", v8);
      }
    }

  }
  else
  {
    v9 = 1;
  }

  return v9;
}

- (void)_handleAccessoryAddedNotification:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  BOOL v28;
  void *v29;
  HMHome *v30;
  NSObject *v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  int v41;
  void *v42;
  HMHome *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  HMHome *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  HMHome *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  HMHome *v63;
  NSObject *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  HMHome *v69;
  NSObject *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  HMHome *v83;
  NSObject *v84;
  void *v85;
  HMAccessorySetupCompletedInfo *v86;
  void *v87;
  void *v88;
  void *v89;
  HMAccessorySetupCompletedInfo *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  HMHome *v95;
  NSObject *v96;
  void *v97;
  void *v98;
  void *v99;
  HMAccessorySetupCompletedInfo *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t j;
  void *v104;
  void *v105;
  void *v106;
  int v107;
  BOOL v108;
  void *v109;
  HMHome *v110;
  NSObject *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  HMHome *v116;
  NSObject *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  id v123;
  void *v124;
  void *v125;
  id v126;
  void *v127;
  void *v128;
  void *v129;
  uint64_t v130;
  int v131;
  void *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  HMAccessorySetupCompletedInfo *v136;
  id obj;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  id v142;
  void *v143;
  id v144;
  HMHome *v145;
  _QWORD v146[6];
  id v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  id v156;
  id v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint8_t buf[4];
  void *v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  id v167;
  __int16 v168;
  void *v169;
  _BYTE v170[128];
  _BYTE v171[128];
  _BYTE v172[128];
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "shortDescription");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v163 = v8;
    v164 = 2112;
    v165 = (uint64_t)v9;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling accessory added message: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMHome context](v6, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "pendingRequests");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "identifier");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "removeCompletionBlockForIdentifier:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "identifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "removeAccessoryForIdentifier:", v14);
  v140 = objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "identifier");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "removeAccessoryDescriptionForIdentifier:", v15);
  v130 = objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "identifier");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v127 = v11;
  v17 = (id)objc_msgSend(v11, "removeProgressBlockForIdentifier:", v16);

  objc_msgSend(v4, "arrayForKey:", CFSTR("kAccessoriesListKey"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v18)
  {
    v93 = 0;
    v94 = (void *)MEMORY[0x1A1AC1AAC]();
    v95 = v6;
    HMFGetOSLogHandle();
    v96 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v163 = v97;
      v164 = 2112;
      v165 = (uint64_t)v98;
      _os_log_impl(&dword_19B1B0000, v96, OS_LOG_TYPE_ERROR, "%{public}@Received accessory added message with no accessories list: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v94);
    v99 = v127;
    goto LABEL_90;
  }
  v133 = v13;
  v126 = v4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  v158 = 0u;
  v159 = 0u;
  v160 = 0u;
  v161 = 0u;
  v125 = v18;
  obj = v18;
  v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v158, v172, 16);
  v145 = v6;
  if (!v19)
    goto LABEL_53;
  v20 = v19;
  if (v140 | v130)
    v21 = v13 == 0;
  else
    v21 = 1;
  v138 = *(_QWORD *)v159;
  v135 = *MEMORY[0x1E0CB2CD0];
  v22 = !v21;
  v131 = v22;
  do
  {
    v23 = 0;
    v134 = v20;
    do
    {
      if (*(_QWORD *)v159 != v138)
        objc_enumerationMutation(obj);
      v24 = *(void **)(*((_QWORD *)&v158 + 1) + 8 * v23);
      objc_msgSend(v24, "hmf_UUIDForKey:", CFSTR("kAccessoryUUID"), v125);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "hmf_dataForKey:", CFSTR("kAccessoryDataKey"));
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = (void *)v26;
      if (v25)
        v28 = v26 == 0;
      else
        v28 = 1;
      if (!v28)
      {
        -[HMHome accessoryWithUUID:](v6, "accessoryWithUUID:", v25);
        v143 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_alloc(MEMORY[0x1E0CB3710]);
        v157 = 0;
        v34 = (void *)objc_msgSend(v33, "initForReadingFromData:error:", v27, &v157);
        v35 = v157;
        objc_msgSend(v34, "_allowDecodingCyclesInSecureMode");
        v36 = objc_opt_class();
        v156 = v35;
        objc_msgSend(v34, "decodeTopLevelObjectOfClass:forKey:error:", v36, v135, &v156);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v141 = v156;

        if (v37)
        {
          v38 = v37;
          objc_msgSend((id)v140, "uuid");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "uuid");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v41 = objc_msgSend(v39, "isEqual:", v40);

          if (v41)
          {
            v42 = (void *)MEMORY[0x1A1AC1AAC]();
            v43 = v145;
            HMFGetOSLogHandle();
            v44 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v45 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v163 = v45;
              v164 = 2112;
              v165 = v140;
              _os_log_impl(&dword_19B1B0000, v44, OS_LOG_TYPE_INFO, "%{public}@Adding queued accessory: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v42);
            -[HMHome context](v43, "context");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend((id)v140, "__configureWithContext:home:", v46, v43);

            -[HMHome currentAccessories](v43, "currentAccessories");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v47, "addObject:", v140);

            objc_msgSend((id)v140, "mergeFromNewObject:", v38);
            v48 = v38;
            v38 = (id)v140;
            goto LABEL_28;
          }
          if (v143)
          {
            v56 = (void *)MEMORY[0x1A1AC1AAC]();
            v57 = v145;
            HMFGetOSLogHandle();
            v58 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v59 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v163 = v59;
              v164 = 2112;
              v165 = (uint64_t)v38;
              v166 = 2112;
              v167 = v143;
              _os_log_impl(&dword_19B1B0000, v58, OS_LOG_TYPE_INFO, "%{public}@Skipping adding unarchived accessory %@ because the home already has an existing matching accessory: %@", buf, 0x20u);

              v20 = v134;
            }

            objc_autoreleasePoolPop(v56);
            objc_msgSend(v143, "mergeFromNewObject:", v38);
            v48 = v38;
            v38 = v143;
            goto LABEL_38;
          }
          objc_msgSend(v38, "room");
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v60, "uuid");
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMHome roomWithUUID:](v145, "roomWithUUID:", v61);
          v48 = (void *)objc_claimAutoreleasedReturnValue();

          if (v48)
          {
            v62 = (void *)MEMORY[0x1A1AC1AAC](objc_msgSend(v38, "setRoom:", v48));
            v63 = v145;
            HMFGetOSLogHandle();
            v64 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v128 = v62;
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v163 = v65;
              v164 = 2112;
              v165 = (uint64_t)v38;
              _os_log_impl(&dword_19B1B0000, v64, OS_LOG_TYPE_INFO, "%{public}@Adding unarchived accessory: %@", buf, 0x16u);

              v62 = v128;
            }

            objc_autoreleasePoolPop(v62);
            -[HMHome context](v63, "context");
            v66 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "__configureWithContext:home:", v66, v63);

            -[HMHome currentAccessories](v63, "currentAccessories");
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v67, "addObject:", v38);

LABEL_28:
            v20 = v134;
LABEL_38:

            objc_msgSend(v38, "postConfigure");
            objc_msgSend(v132, "addObject:", v38);
LABEL_39:
            v6 = v145;
          }
          else
          {
            v68 = (void *)MEMORY[0x1A1AC1AAC]();
            v69 = v145;
            HMFGetOSLogHandle();
            v70 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v129 = v68;
              v71 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(0, "uuid");
              v72 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v163 = v71;
              v164 = 2112;
              v165 = (uint64_t)v72;
              _os_log_impl(&dword_19B1B0000, v70, OS_LOG_TYPE_ERROR, "%{public}@Could not find room with UUID %@ for added accessory", buf, 0x16u);

              v68 = v129;
            }

            objc_autoreleasePoolPop(v68);
            v6 = v145;
            v20 = v134;
          }

        }
        else
        {
          v49 = (void *)MEMORY[0x1A1AC1AAC]();
          v50 = v6;
          HMFGetOSLogHandle();
          v51 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v163 = v52;
            v164 = 2112;
            v165 = (uint64_t)v141;
            _os_log_impl(&dword_19B1B0000, v51, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive accessory from accessory data: %@", buf, 0x16u);

            v20 = v134;
          }

          objc_autoreleasePoolPop(v49);
          if (v131)
          {
            objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 79);
            v38 = (id)objc_claimAutoreleasedReturnValue();
            -[HMHome context](v50, "context");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v53, "delegateCaller");
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            v55 = v54;
            if (v130)
            {
              objc_msgSend(v54, "callCompletion:array:additionalAccessoryInfo:error:", v133, 0, 0, v38);

            }
            else
            {
              objc_msgSend(v54, "callCompletion:error:", v133, v38);

              -[HMHome removeAccessory:completionHandler:](v50, "removeAccessory:completionHandler:", v140, &__block_literal_global_799);
            }
            goto LABEL_39;
          }
        }

        goto LABEL_42;
      }
      v29 = (void *)MEMORY[0x1A1AC1AAC]();
      v30 = v6;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v163 = v32;
        v164 = 2112;
        v165 = (uint64_t)v25;
        v166 = 2112;
        v167 = v27;
        _os_log_impl(&dword_19B1B0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Received added accessory info with invalid accessoryUUID: %@, accessoryData: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v29);
LABEL_42:

      ++v23;
    }
    while (v20 != v23);
    v73 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v158, v172, 16);
    v20 = v73;
  }
  while (v73);
LABEL_53:

  v144 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v152 = 0u;
  v153 = 0u;
  v154 = 0u;
  v155 = 0u;
  v74 = v132;
  v75 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", &v152, v171, 16);
  v142 = v74;
  if (v75)
  {
    v76 = v75;
    v77 = *(_QWORD *)v153;
    do
    {
      for (i = 0; i != v76; ++i)
      {
        if (*(_QWORD *)v153 != v77)
          objc_enumerationMutation(v142);
        v79 = *(void **)(*((_QWORD *)&v152 + 1) + 8 * i);
        objc_msgSend(v79, "uuid", v125);
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v80, "UUIDString");
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v144, "addObject:", v81);

        v82 = (void *)MEMORY[0x1A1AC1AAC]();
        v83 = v6;
        HMFGetOSLogHandle();
        v84 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v85 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v163 = v85;
          v164 = 2112;
          v165 = (uint64_t)v79;
          _os_log_impl(&dword_19B1B0000, v84, OS_LOG_TYPE_DEFAULT, "%{public}@Added accessory: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v82);
        v6 = v145;
      }
      v74 = v142;
      v76 = objc_msgSend(v142, "countByEnumeratingWithState:objects:count:", &v152, v171, 16);
    }
    while (v76);
  }

  v13 = v133;
  if (!v140 && v133)
  {
    v86 = [HMAccessorySetupCompletedInfo alloc];
    -[HMHome uuid](v6, "uuid");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v87, "UUIDString");
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    v89 = v144;
    v90 = -[HMAccessorySetupCompletedInfo initWithHomeUUID:addedAccessoryUUIDs:](v86, "initWithHomeUUID:addedAccessoryUUIDs:", v88, v144);

    -[HMHome context](v6, "context");
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v91, "delegateCaller");
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v92, "callCompletion:array:additionalAccessoryInfo:error:", v133, v74, v90, 0);

    goto LABEL_88;
  }
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v100 = (HMAccessorySetupCompletedInfo *)v74;
  v101 = -[HMAccessorySetupCompletedInfo countByEnumeratingWithState:objects:count:](v100, "countByEnumeratingWithState:objects:count:", &v148, v170, 16);
  v99 = v127;
  if (v101)
  {
    v102 = v101;
    v139 = *(_QWORD *)v149;
    v136 = v100;
    do
    {
      for (j = 0; j != v102; ++j)
      {
        if (*(_QWORD *)v149 != v139)
          objc_enumerationMutation(v100);
        v104 = *(void **)(*((_QWORD *)&v148 + 1) + 8 * j);
        objc_msgSend((id)v140, "uuid", v125);
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v104, "uuid");
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        v107 = objc_msgSend(v105, "isEqual:", v106);

        if (v107)
          v108 = v13 == 0;
        else
          v108 = 1;
        if (v108)
        {
          -[HMHome delegate](v6, "delegate");
          v123 = (id)objc_claimAutoreleasedReturnValue();
          v109 = (void *)MEMORY[0x1A1AC1AAC]();
          v110 = v6;
          HMFGetOSLogHandle();
          v111 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v112 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v104, "debugDescription");
            v113 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMHome debugDescription](v110, "debugDescription");
            v114 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v163 = v112;
            v164 = 2112;
            v165 = (uint64_t)v113;
            v166 = 2112;
            v167 = v123;
            v168 = 2112;
            v169 = v114;
            _os_log_impl(&dword_19B1B0000, v111, OS_LOG_TYPE_INFO, "%{public}@Notifying client of did add accessory: %@ delegate: %@, home: %@", buf, 0x2Au);

            v100 = v136;
            v6 = v145;

          }
          objc_autoreleasePoolPop(v109);
          if ((objc_opt_respondsToSelector() & 1) != 0)
          {
            v115 = (void *)MEMORY[0x1A1AC1AAC]();
            v116 = v110;
            HMFGetOSLogHandle();
            v117 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v118 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v104, "debugDescription");
              v119 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMHome debugDescription](v116, "debugDescription");
              v120 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v163 = v118;
              v164 = 2112;
              v165 = (uint64_t)v119;
              v166 = 2112;
              v167 = v120;
              _os_log_impl(&dword_19B1B0000, v117, OS_LOG_TYPE_INFO, "%{public}@Client has registered for didAddAccessory delegate callback : %@, home: %@", buf, 0x20u);

              v6 = v145;
            }

            objc_autoreleasePoolPop(v115);
            -[HMHome context](v116, "context");
            v121 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v121, "delegateCaller");
            v122 = (void *)objc_claimAutoreleasedReturnValue();
            v146[0] = MEMORY[0x1E0C809B0];
            v146[1] = 3221225472;
            v146[2] = __44__HMHome__handleAccessoryAddedNotification___block_invoke_801;
            v146[3] = &unk_1E3AB5CD0;
            v146[4] = v116;
            v146[5] = v104;
            v123 = v123;
            v147 = v123;
            objc_msgSend(v122, "invokeBlock:", v146);

            v13 = v133;
            v100 = v136;
          }
          else
          {
            v13 = v133;
          }
        }
        else
        {
          -[HMHome context](v6, "context");
          v123 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v123, "delegateCaller");
          v124 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v124, "callCompletion:error:", v13, 0);

        }
      }
      v102 = -[HMAccessorySetupCompletedInfo countByEnumeratingWithState:objects:count:](v100, "countByEnumeratingWithState:objects:count:", &v148, v170, 16);
    }
    while (v102);
    v90 = v100;
    v74 = v142;
    v89 = v144;
LABEL_88:
    v99 = v127;
  }
  else
  {
    v90 = v100;
    v74 = v142;
    v89 = v144;
  }

  v93 = v125;
  v4 = v126;
LABEL_90:

}

- (void)_callProgressHandler:(id)a3 updatingAccessoryDescription:(id)a4 fromMessage:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  HMHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  HMHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  HMHome *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  HMHome *v51;
  HMHome *v52;
  unint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  _QWORD v59[4];
  id v60;
  id v61;
  unint64_t v62;
  id v63;
  uint8_t buf[4];
  void *v65;
  __int16 v66;
  id v67;
  __int16 v68;
  id v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v58 = a3;
  v8 = a4;
  v9 = a5;
  objc_msgSend(v9, "stringForKey:", CFSTR("kAccessoryName"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
    objc_msgSend(v8, "setAccessoryName:", v10);
  objc_msgSend(v9, "messagePayload");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hmf_UUIDForKey:", CFSTR("kAccessoryUUID"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "accessoryUUID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v13 && v12)
    objc_msgSend(v8, "setAccessoryUUID:", v12);
  objc_msgSend(v9, "stringForKey:", CFSTR("kAccessoryInfoManufacturerKey"));
  v14 = objc_claimAutoreleasedReturnValue();
  if (v14)
    objc_msgSend(v8, "setManufacturerName:", v14);
  objc_msgSend(v9, "dataForKey:", CFSTR("kAccessoryCategory"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = (void *)v14;
  v57 = v15;
  if (v15)
  {
    v63 = 0;
    objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v15, &v63);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v63;
    if (v16)
    {
      objc_msgSend(v8, "setCategory:", v16);
    }
    else
    {
      v18 = (void *)MEMORY[0x1A1AC1AAC]();
      v51 = self;
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v65 = v21;
        v66 = 2112;
        v67 = v17;
        _os_log_impl(&dword_19B1B0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive accessory category from category data: %@", buf, 0x16u);

        v15 = v57;
      }

      objc_autoreleasePoolPop(v18);
      self = v51;
    }

  }
  objc_msgSend(v9, "messagePayload");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "hmf_numberForKey:", CFSTR("kAccessoryCertificationStatusKey"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (v23)
    objc_msgSend(v8, "setCertificationStatus:", objc_msgSend(v23, "unsignedIntegerValue"));
  v55 = v23;
  objc_msgSend(v9, "stringForKey:", CFSTR("kAccessoryVendorInfoStoreIDKey"));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "stringForKey:", CFSTR("kAccessoryVendorInfoBundleIDKey"));
  v25 = objc_claimAutoreleasedReturnValue();
  v26 = (void *)v25;
  if (v24 && v25)
  {
    objc_msgSend(v8, "setStoreID:", v24);
    objc_msgSend(v8, "setBundleID:", v26);
  }
  v54 = v26;
  objc_msgSend(v9, "uuidForKey:", CFSTR("HMHomeReplacedAccessoryUUIDMessageKey"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (v27)
  {
    -[HMHome accessoryWithUUID:](self, "accessoryWithUUID:", v27);
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = (void *)v28;
    if (v28)
      v28 = objc_msgSend(v8, "setAccessoryBeingReplaced:", v28);
    v30 = (void *)MEMORY[0x1A1AC1AAC](v28);
    v52 = self;
    v31 = self;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v46 = v10;
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "name");
      v49 = v24;
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "UUIDString");
      v47 = v12;
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v65 = v33;
      v66 = 2112;
      v67 = v34;
      v68 = 2112;
      v69 = v35;
      _os_log_impl(&dword_19B1B0000, v32, OS_LOG_TYPE_INFO, "%{public}@Progress handler to request user consent for replacing accessory %@/%@", buf, 0x20u);

      v24 = v49;
      v12 = v47;

      v10 = v46;
    }

    objc_autoreleasePoolPop(v30);
    v15 = v57;
    self = v52;
  }
  objc_msgSend(v9, "numberForKey:", CFSTR("kAccessorySetupProgressKey"));
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = v36;
  if (v58 && v36)
  {
    v50 = v24;
    v53 = objc_msgSend(v36, "unsignedIntegerValue");
    v38 = (void *)MEMORY[0x1A1AC1AAC]();
    v39 = self;
    HMFGetOSLogHandle();
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      HMSetupAccessoryProgressAsString(v53);
      v48 = v12;
      v42 = v10;
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v65 = v41;
      v66 = 2112;
      v67 = v43;
      v68 = 2112;
      v69 = v8;
      _os_log_impl(&dword_19B1B0000, v40, OS_LOG_TYPE_INFO, "%{public}@Calling Progress handler with progress '%@' with description: %@", buf, 0x20u);

      v10 = v42;
      v12 = v48;

    }
    objc_autoreleasePoolPop(v38);
    -[HMHome context](v39, "context");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "delegateCaller");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v59[0] = MEMORY[0x1E0C809B0];
    v59[1] = 3221225472;
    v59[2] = __72__HMHome__callProgressHandler_updatingAccessoryDescription_fromMessage___block_invoke;
    v59[3] = &unk_1E3AB5668;
    v61 = v58;
    v60 = v8;
    v62 = v53;
    objc_msgSend(v45, "invokeBlock:", v59);

    v15 = v57;
    v24 = v50;
  }

}

- (void)_handleAddAccessoryProgressNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  unint64_t v21;
  void *v22;
  HMHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  HMHome *v28;
  NSObject *v29;
  void *v30;
  int v31;
  void *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pendingRequests");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "retrieveAccessoryDescriptionForIdentifier:", v7);
  v8 = objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(v4, "identifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "retrieveProgressBlockForIdentifier:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_4:
    if (v10)
    {
      v17 = (void *)MEMORY[0x1A1AC1AAC]();
      v18 = self;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = 138543618;
        v32 = v20;
        v33 = 2112;
        v34 = v8;
        _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Invoking progress handler block for add accessory progress notification with accessoryDescription %@", (uint8_t *)&v31, 0x16u);

      }
      objc_autoreleasePoolPop(v17);
      -[HMHome _callProgressHandler:updatingAccessoryDescription:fromMessage:](v18, "_callProgressHandler:updatingAccessoryDescription:fromMessage:", v10, v8, v4);
    }
    else
    {
      objc_msgSend(v4, "numberForKey:", CFSTR("kAccessorySetupProgressKey"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v10, "unsignedIntegerValue");
      v22 = (void *)MEMORY[0x1A1AC1AAC]();
      v23 = self;
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        HMSetupAccessoryProgressAsString(v21);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = 138543618;
        v32 = v25;
        v33 = 2112;
        v34 = (uint64_t)v26;
        _os_log_impl(&dword_19B1B0000, v24, OS_LOG_TYPE_INFO, "%{public}@No progress handler block for add accessory progress notification with progress '%@'", (uint8_t *)&v31, 0x16u);

      }
      objc_autoreleasePoolPop(v22);
    }

    v10 = (void *)v8;
    goto LABEL_12;
  }
  objc_msgSend(v4, "messagePayload");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hmf_UUIDForKey:", CFSTR("kAccessoryUUID"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMHome context](self, "context");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "pendingRequests");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "retrieveAccessoryDescriptionForIdentifier:", v12);
  v8 = objc_claimAutoreleasedReturnValue();

  -[HMHome context](self, "context");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "pendingRequests");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "retrieveProgressBlockForIdentifier:", v12);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
    goto LABEL_4;
  v27 = (void *)MEMORY[0x1A1AC1AAC]();
  v28 = self;
  HMFGetOSLogHandle();
  v29 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = 138543362;
    v32 = v30;
    _os_log_impl(&dword_19B1B0000, v29, OS_LOG_TYPE_INFO, "%{public}@No accessory description for add accessory progress notification", (uint8_t *)&v31, 0xCu);

  }
  objc_autoreleasePoolPop(v27);
LABEL_12:

}

- (void)_handleAccessoryRemovedResponse:(id)a3
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  const __CFString *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  HMHome *v22;
  id obj;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v21 = a3;
  objc_msgSend(v21, "hmf_arrayForKey:", CFSTR("kAccessoriesListKey"));
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v25;
    v7 = CFSTR("kAccessoryUUID");
    v22 = self;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v25 != v6)
          objc_enumerationMutation(obj);
        objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * i), "hmf_UUIDForKey:", v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMHome currentAccessories](self, "currentAccessories");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "firstItemWithUUID:", v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (v11)
        {
          v12 = (void *)MEMORY[0x1A1AC1AAC]();
          v13 = self;
          HMFGetOSLogHandle();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v15 = v5;
            v16 = v6;
            v17 = v7;
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v29 = v18;
            v30 = 2112;
            v31 = v11;
            _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Removed accessory: %@", buf, 0x16u);

            v7 = v17;
            v6 = v16;
            v5 = v15;
            self = v22;
          }

          objc_autoreleasePoolPop(v12);
          objc_msgSend(v11, "services");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMHome _removeServices:](v13, "_removeServices:", v19);

          -[HMHome _removeActionSetsForAccessory:](v13, "_removeActionSetsForAccessory:", v11);
          -[HMHome _removeEventsForAccessory:](v13, "_removeEventsForAccessory:", v11);
          -[HMHome _removeResidentDevicesForAccessory:](v13, "_removeResidentDevicesForAccessory:", v11);
          -[HMHome currentAccessories](v13, "currentAccessories");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "removeObject:", v11);

        }
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    }
    while (v5);
  }

}

- (void)_removeActionSetsForAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMHome currentActionSets](self, "currentActionSets", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v10++), "_removeActionsForAccessory:", v4);
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }

}

- (void)_removeEventsForAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMHome currentTriggers](self, "currentTriggers", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v15;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(v6);
        v11 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * v10);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v12 = v11;
        else
          v12 = 0;
        v13 = v12;

        if (v13)
          objc_msgSend(v13, "_removeEventsForAccessory:", v4);

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v8);
  }

}

- (void)_removeResidentDevicesForAccessory:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v10 = a3;
  objc_msgSend(v10, "device");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    -[HMHome autoSelectedPreferredResidents](self, "autoSelectedPreferredResidents");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __45__HMHome__removeResidentDevicesForAccessory___block_invoke;
    v11[3] = &unk_1E3AB1580;
    v12 = v10;
    objc_msgSend(v5, "indexesOfObjectsPassingTest:", v11);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v6, "count"))
    {
      -[HMHome autoSelectedPreferredResidents](self, "autoSelectedPreferredResidents");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = (void *)objc_msgSend(v7, "mutableCopy");

      objc_msgSend(v8, "removeObjectsAtIndexes:", v6);
      v9 = (void *)objc_msgSend(v8, "copy");
      -[HMHome setAutoSelectedPreferredResidents:](self, "setAutoSelectedPreferredResidents:", v9);

    }
  }

}

- (void)removeServices:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[5];
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "queue");
    v7 = objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __25__HMHome_removeServices___block_invoke;
    v12[3] = &unk_1E3AB5ED8;
    v12[4] = self;
    v13 = v4;
    dispatch_async(v7, v12);

  }
  else
  {
    v8 = (void *)MEMORY[0x1A1AC1AAC]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v15 = v11;
      v16 = 2080;
      v17 = "-[HMHome removeServices:]";
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

- (void)_removeServices:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[HMHome serviceGroups](self, "serviceGroups", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9++), "_removeServices:", v4);
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v7);
  }

}

- (id)_findService:(id)a3 accessoryUUID:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = v7;
  v9 = 0;
  if (v6 && v7)
  {
    -[HMHome accessoryWithUUID:](self, "accessoryWithUUID:", v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v10)
    {
      objc_msgSend(v10, "_findService:", v6);
      v9 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      -[HMHome accessories](self, "accessories");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
      if (v27)
      {
        v13 = *(_QWORD *)v35;
        v29 = v12;
        v26 = *(_QWORD *)v35;
        do
        {
          v14 = 0;
          do
          {
            if (*(_QWORD *)v35 != v13)
              objc_enumerationMutation(v12);
            v28 = v14;
            v15 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * v14);
            v30 = 0u;
            v31 = 0u;
            v32 = 0u;
            v33 = 0u;
            objc_msgSend(v15, "services");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
            if (v17)
            {
              v18 = v17;
              v19 = *(_QWORD *)v31;
              do
              {
                for (i = 0; i != v18; ++i)
                {
                  if (*(_QWORD *)v31 != v19)
                    objc_enumerationMutation(v16);
                  v21 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
                  objc_msgSend(v21, "instanceID");
                  v22 = (void *)objc_claimAutoreleasedReturnValue();
                  if ((objc_msgSend(v6, "isEqualToNumber:", v22) & 1) != 0)
                  {
                    objc_msgSend(v21, "accessoryUUID");
                    v23 = (void *)objc_claimAutoreleasedReturnValue();
                    v24 = objc_msgSend(v8, "isEqual:", v23);

                    if ((v24 & 1) != 0)
                    {
                      v9 = v21;

                      v11 = 0;
                      goto LABEL_24;
                    }
                  }
                  else
                  {

                  }
                }
                v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
              }
              while (v18);
            }

            v14 = v28 + 1;
            v12 = v29;
            v11 = 0;
            v13 = v26;
          }
          while (v28 + 1 != v27);
          v27 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
        }
        while (v27);
      }

      v9 = 0;
    }
LABEL_24:

  }
  return v9;
}

- (id)_findCharacteristic:(id)a3 forService:(id)a4 accessoryUUID:(id)a5
{
  void *v5;
  id v9;
  void *v10;

  v5 = 0;
  if (a3 && a4 && a5)
  {
    v9 = a3;
    -[HMHome _findService:accessoryUUID:](self, "_findService:accessoryUUID:", a4, a5);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "_findCharacteristic:", v9);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v5;
}

- (void)startSearchForAccessoriesNeedingReprovisioning
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  const __CFString *v15;
  uint64_t v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  -[HMHome context](self, "context");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = (void *)MEMORY[0x1E0D285D0];
    v5 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](self, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v5, "initWithTarget:", v6);
    v15 = CFSTR("kStartSearch");
    v16 = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messageWithName:destination:payload:", CFSTR("kSearchForAccessoriesNeedingReprovisioningRequestKey"), v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "messageDispatcher");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "sendMessage:", v9);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v18 = v14;
      v19 = 2080;
      v20 = "-[HMHome startSearchForAccessoriesNeedingReprovisioning]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
  }

}

- (void)_handleAccessoryReprovisionStateUpdate:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMHome *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  HMHome *v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kAccessoryUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentAccessories](self, "currentAccessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "firstItemWithUUID:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend(v4, "numberForKey:", CFSTR("kAccessoryReprovisonStateKey"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x1A1AC1AAC]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v8, "integerValue");
      objc_msgSend(v7, "name");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v25 = v12;
      v26 = 2048;
      v27 = v13;
      v28 = 2112;
      v29 = v14;
      _os_log_impl(&dword_19B1B0000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Updating the reprovision state to: %lu for accessory: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(v7, "setAccessoryReprovisionState:", objc_msgSend(v8, "integerValue"));
    -[HMHome delegate](v10, "delegate");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v15, "conformsToProtocol:", &unk_1EE45A110))
      v16 = v15;
    else
      v16 = 0;
    v17 = v16;

    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      -[HMHome context](v10, "context");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "delegateCaller");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __49__HMHome__handleAccessoryReprovisionStateUpdate___block_invoke;
      v20[3] = &unk_1E3AB5CD0;
      v21 = v17;
      v22 = v10;
      v23 = v7;
      objc_msgSend(v19, "invokeBlock:", v20);

    }
  }

}

- (void)reprovisionAccessory:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[5];
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome reprovisionAccessory:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __49__HMHome_reprovisionAccessory_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v23 = v6;
    v24 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2080;
      v28 = "-[HMHome reprovisionAccessory:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v7 + 2))(v7, v15);

  }
}

- (void)_reprovisionAccessory:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  HMHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, void *);
  void *v33;
  id v34;
  id v35;
  HMHome *v36;
  id v37;
  const __CFString *v38;
  void *v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    if (v6)
    {
      v38 = CFSTR("kAccessoryUUID");
      objc_msgSend(v6, "uuid");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "UUIDString");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = v10;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      v12 = objc_alloc(MEMORY[0x1E0D285F8]);
      v13 = objc_alloc(MEMORY[0x1E0D285D8]);
      -[HMHome uuid](self, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)objc_msgSend(v13, "initWithTarget:", v14);
      v16 = (void *)objc_msgSend(v12, "initWithName:destination:payload:", CFSTR("kReprovisionAccessoryRequestKey"), v15, v11);

      -[HMHome context](self, "context");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "pendingRequests");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v16, "identifier");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = _Block_copy(v7);
      objc_msgSend(v18, "addCompletionBlock:forIdentifier:", v20, v19);

      v30 = MEMORY[0x1E0C809B0];
      v31 = 3221225472;
      v32 = __50__HMHome__reprovisionAccessory_completionHandler___block_invoke;
      v33 = &unk_1E3AB4B08;
      v34 = v18;
      v35 = v19;
      v36 = self;
      v37 = v7;
      v21 = v19;
      v22 = v18;
      objc_msgSend(v16, "setResponseHandler:", &v30);
      objc_msgSend(v8, "messageDispatcher", v30, v31, v32, v33);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "sendMessage:", v16);

    }
    else
    {
      -[HMHome context](self, "context");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "delegateCaller");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "callCompletion:error:", v7, v29);

    }
  }
  else
  {
    v24 = (void *)MEMORY[0x1A1AC1AAC]();
    v25 = self;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v27;
      v42 = 2080;
      v43 = "-[HMHome _reprovisionAccessory:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v24);
  }

}

- (void)_handleAccessoryReprovisionedNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  HMHome *v22;
  id v23;

  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kAccessoryUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentAccessories](self, "currentAccessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "firstItemWithUUID:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend(v7, "setAccessoryReprovisionState:", 0);
    objc_msgSend(v4, "errorForKey:", CFSTR("kPairedAccessoryErrorDataKey"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome context](self, "context");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "pendingRequests");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "identifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "removeCompletionBlockForIdentifier:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      -[HMHome context](self, "context");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "delegateCaller");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "callCompletion:error:", v12, v8);

    }
    -[HMHome delegate](self, "delegate");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v15, "conformsToProtocol:", &unk_1EE45A110))
      v16 = v15;
    else
      v16 = 0;
    v17 = v16;

    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      -[HMHome context](self, "context");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "delegateCaller");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __52__HMHome__handleAccessoryReprovisionedNotification___block_invoke;
      v20[3] = &unk_1E3AB5CD0;
      v21 = v17;
      v22 = self;
      v23 = v7;
      objc_msgSend(v19, "invokeBlock:", v20);

    }
  }

}

- (void)_notifyUpdatedSupportedFeatures
{
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  HMHome *v8;

  -[HMHome delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __41__HMHome__notifyUpdatedSupportedFeatures__block_invoke;
    v6[3] = &unk_1E3AB5ED8;
    v7 = v3;
    v8 = self;
    objc_msgSend(v5, "invokeBlock:", v6);

  }
}

- (void)_handleUserInvitationsUpdatedNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMHome *v30;
  NSObject *v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  uint64_t j;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t k;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  HMAccessoryInvitation *v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t m;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  id v75;
  uint64_t v76;
  void *v77;
  id obj;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  void *v85;
  HMHome *v86;
  _QWORD v87[4];
  id v88;
  HMHome *v89;
  id v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  id v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _BYTE v108[128];
  _BYTE v109[128];
  uint8_t v110[128];
  uint8_t buf[4];
  void *v112;
  __int16 v113;
  id v114;
  _QWORD v115[4];
  _BYTE v116[128];
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pendingRequests");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = v6;
  objc_msgSend(v6, "removeCompletionBlockForIdentifier:", v7);
  v76 = objc_claimAutoreleasedReturnValue();

  v77 = v4;
  objc_msgSend(v4, "dataForKey:", CFSTR("kInvitationsDataKey"));
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = self;
  +[HMOutgoingHomeInvitation homeInvitationsFromEncodedData:home:](HMOutgoingHomeInvitation, "homeInvitationsFromEncodedData:home:");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "mutableCopy");

  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  v79 = v9;
  v10 = (void *)objc_msgSend(v9, "copy");
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v104, v116, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v105;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v105 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v104 + 1) + 8 * i);
        v16 = objc_msgSend(v15, "invitationState");
        -[HMHome currentOutgoingInvitations](v86, "currentOutgoingInvitations");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "identifier");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "firstItemWithValue:forKey:", v18, CFSTR("identifier"));
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((v16 & 0xFFFFFFFFFFFFFFFDLL) == 1)
          {
            -[HMHome currentOutgoingInvitations](v86, "currentOutgoingInvitations");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "removeObject:", v19);

          }
          objc_msgSend(v19, "_updateInvitationState:", v16);
          objc_msgSend(v9, "removeObject:", v15);
          objc_msgSend(v9, "addObject:", v19);
        }
        else if (v16 == 2)
        {
          -[HMHome context](v86, "context");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "__configureWithContext:home:", v21, v86);

          -[HMHome currentOutgoingInvitations](v86, "currentOutgoingInvitations");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "addObject:", v15);

        }
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v104, v116, 16);
    }
    while (v12);
  }

  objc_msgSend(v77, "dataForKey:", CFSTR("kAccessoryInvitationsDataKey"));
  v23 = objc_claimAutoreleasedReturnValue();
  v24 = (void *)MEMORY[0x1E0CB3710];
  v25 = (void *)MEMORY[0x1E0C99E60];
  v115[0] = objc_opt_class();
  v115[1] = objc_opt_class();
  v115[2] = objc_opt_class();
  v115[3] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v115, 4);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setWithArray:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v103 = 0;
  v72 = (void *)v23;
  objc_msgSend(v24, "unarchivedObjectOfClasses:fromData:error:", v27, v23, &v103);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = v103;

  if (!v28)
  {
    v29 = (void *)MEMORY[0x1A1AC1AAC]();
    v30 = v86;
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v112 = v32;
      v113 = 2112;
      v114 = v75;
      _os_log_impl(&dword_19B1B0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive accessory invitations data from encoded accessory invitation data: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v29);
  }
  v33 = v28;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v34 = v33;
  else
    v34 = 0;
  v35 = v34;
  v71 = v33;

  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  obj = v35;
  v81 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v99, v110, 16);
  if (v81)
  {
    v80 = *(_QWORD *)v100;
    do
    {
      for (j = 0; j != v81; ++j)
      {
        if (*(_QWORD *)v100 != v80)
          objc_enumerationMutation(obj);
        v37 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * j);
        objc_msgSend(v37, "hmf_UUIDForKey:", CFSTR("kInvitationIdentifierKey"), v71);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMHome outgoingInvitations](v86, "outgoingInvitations");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "hmf_firstObjectWithValue:forKeyPath:", v38, CFSTR("identifier"));
        v40 = (void *)objc_claimAutoreleasedReturnValue();

        if (v40)
        {
          v82 = v40;
          v83 = v38;
          v84 = j;
          objc_msgSend(v37, "hmf_arrayForKey:", CFSTR("kAccessoryInvitationsKey"));
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v41, "count"));
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v95 = 0u;
          v96 = 0u;
          v97 = 0u;
          v98 = 0u;
          v43 = v41;
          v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v95, v109, 16);
          if (v44)
          {
            v45 = v44;
            v46 = *(_QWORD *)v96;
            do
            {
              for (k = 0; k != v45; ++k)
              {
                if (*(_QWORD *)v96 != v46)
                  objc_enumerationMutation(v43);
                v48 = *(void **)(*((_QWORD *)&v95 + 1) + 8 * k);
                objc_msgSend(v48, "hmf_UUIDForKey:", CFSTR("HM.accessoryInvitationIdentifier"));
                v49 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v48, "hmf_numberForKey:", CFSTR("HM.accessoryInvitationState"));
                v50 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v48, "hmf_UUIDForKey:", CFSTR("HM.accessoryInvitationAccessoryUUID"));
                v51 = (void *)objc_claimAutoreleasedReturnValue();
                -[HMHome accessories](v86, "accessories");
                v52 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v52, "hmf_firstObjectWithUUID:", v51);
                v53 = (void *)objc_claimAutoreleasedReturnValue();

                if (v53)
                {
                  v54 = -[HMAccessoryInvitation initWithAccessory:identifier:state:]([HMAccessoryInvitation alloc], "initWithAccessory:identifier:state:", v53, v49, objc_msgSend(v50, "integerValue"));
                  if (v54)
                    objc_msgSend(v42, "addObject:", v54);

                }
              }
              v45 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v95, v109, 16);
            }
            while (v45);
          }

          v40 = v82;
          objc_msgSend(v82, "_mergeWithNewAccessoryInvitations:", v42);

          v38 = v83;
          j = v84;
        }

      }
      v81 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v99, v110, 16);
    }
    while (v81);
  }

  v55 = (void *)v76;
  if (v76)
  {
    if (v79)
    {
      v56 = 0;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 52, 0);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
    }
    -[HMHome context](v86, "context", v71);
    v67 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v67, "delegateCaller");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v70, "callCompletion:invitations:error:", v76, v79, v56);
    goto LABEL_60;
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v79, "count"));
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v57 = v79;
  v58 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v91, v108, 16);
  if (v58)
  {
    v59 = v58;
    v60 = *(_QWORD *)v92;
    do
    {
      for (m = 0; m != v59; ++m)
      {
        if (*(_QWORD *)v92 != v60)
          objc_enumerationMutation(v57);
        v62 = *(void **)(*((_QWORD *)&v91 + 1) + 8 * m);
        objc_msgSend(v62, "invitee", v71);
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMHome users](v86, "users");
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v63, "userID");
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v64, "hmf_firstObjectWithValue:forKeyPath:", v65, CFSTR("userID"));
        v66 = (void *)objc_claimAutoreleasedReturnValue();

        if (v66)
          objc_msgSend(v66, "mergePendingAccessoryInvitationsWithOutgoingInvitation:", v62);
        else
          objc_msgSend(v85, "addObject:", v62);

      }
      v59 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v91, v108, 16);
    }
    while (v59);
  }

  v56 = v85;
  if (!objc_msgSend(v85, "count"))
  {
    v55 = 0;
    goto LABEL_62;
  }
  -[HMHome _privateDelegate](v86, "_privateDelegate");
  v67 = (id)objc_claimAutoreleasedReturnValue();
  v55 = 0;
  if (objc_msgSend(v57, "count") && (objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](v86, "context");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v68, "delegateCaller");
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    v87[0] = MEMORY[0x1E0C809B0];
    v87[1] = 3221225472;
    v87[2] = __52__HMHome__handleUserInvitationsUpdatedNotification___block_invoke;
    v87[3] = &unk_1E3AB5CD0;
    v67 = v67;
    v88 = v67;
    v89 = v86;
    v90 = v57;
    objc_msgSend(v69, "invokeBlock:", v87);

    v70 = v88;
LABEL_60:

  }
LABEL_62:

}

- (void)_handleUserAddedNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  HMUser *v14;
  id v15;
  void *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  char v21;
  void *v22;
  void *v23;
  void *v24;
  void *context;
  void *v26;
  _QWORD v27[5];
  HMUser *v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pendingRequests");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeCompletionBlockForIdentifier:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "uuidForKey:", CFSTR("kUserUUIDKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", CFSTR("kUserIDKey"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", CFSTR("kUserDisplayNameKey"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 && v9)
  {
    v26 = v10;
    -[HMHome currentUsers](self, "currentUsers");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "firstItemWithUUID:", v9);
    v13 = objc_claimAutoreleasedReturnValue();

    v14 = (HMUser *)v13;
    if (v13)
    {
      if (v8)
      {
LABEL_5:
        -[HMHome context](self, "context", v24);
        v15 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "delegateCaller");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "callCompletion:user:error:", v8, v14, 0);

LABEL_12:
        v10 = v26;
        goto LABEL_13;
      }
    }
    else
    {
      v14 = -[HMUser initWithUserID:name:uuid:home:]([HMUser alloc], "initWithUserID:name:uuid:home:", v26, v11, v9, self);
      -[HMHome context](self, "context");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMUser __configureWithContext:home:](v14, "__configureWithContext:home:", v17, self);

      context = (void *)MEMORY[0x1A1AC1AAC]();
      v18 = self;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v31 = v24;
        _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_INFO, "%{public}@Adding user via notification", buf, 0xCu);

      }
      objc_autoreleasePoolPop(context);
      -[HMHome currentUsers](v18, "currentUsers");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "addObject:", v14);

      if (v8)
        goto LABEL_5;
    }
    -[HMHome delegate](self, "delegate", v24);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    v21 = objc_opt_respondsToSelector();
    if (!v13 && (v21 & 1) != 0)
    {
      -[HMHome context](self, "context");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "delegateCaller");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 3221225472;
      v27[2] = __39__HMHome__handleUserAddedNotification___block_invoke;
      v27[3] = &unk_1E3AB5CD0;
      v27[4] = self;
      v28 = v14;
      v15 = v15;
      v29 = v15;
      objc_msgSend(v23, "invokeBlock:", v27);

    }
    goto LABEL_12;
  }
LABEL_13:

}

- (id)_findUserWithID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  HMHome *v11;
  NSObject *v12;
  void *v13;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome currentUsers](self, "currentUsers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstItemWithValue:forKey:", v4, CFSTR("userID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    -[HMHome currentUser](self, "currentUser");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "userID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isEqualToString:", v4);

    if (v9)
    {
      -[HMHome currentUser](self, "currentUser");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v10 = (void *)MEMORY[0x1A1AC1AAC]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138543618;
        v16 = v13;
        v17 = 2112;
        v18 = v4;
        _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Cannot find the user with ID %@", (uint8_t *)&v15, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
      v6 = 0;
    }
  }

  return v6;
}

- (void)_handleAccessoryErrorNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  HMHome *v14;
  id v15;
  id v16;

  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kAccessoryUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentAccessories](self, "currentAccessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "firstItemWithUUID:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend(v4, "errorForKey:", CFSTR("error"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      -[HMHome delegate](self, "delegate");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[HMHome context](self, "context");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "delegateCaller");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 3221225472;
        v12[2] = __44__HMHome__handleAccessoryErrorNotification___block_invoke;
        v12[3] = &unk_1E3AB59E8;
        v13 = v9;
        v14 = self;
        v15 = v8;
        v16 = v7;
        objc_msgSend(v11, "invokeBlock:", v12);

      }
    }

  }
}

- (void)__updateHomeAccessControlFromResponsePayload:(id)a3 forUser:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome _findUserWithID:](self, "_findUserWithID:", v7);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)v8;
  if (v6 && v8)
  {
    objc_msgSend(v6, "hmf_numberForKey:", CFSTR("kUserAdministratorInformationKey"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      objc_msgSend(v9, "homeAccessControl");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setAdministrator:", objc_msgSend(v10, "BOOLValue"));

    }
    objc_msgSend(v6, "hmf_numberForKey:", CFSTR("kUserRemoteAccessInformationKey"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      objc_msgSend(v9, "homeAccessControl");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setRemoteAccessAllowed:", objc_msgSend(v12, "BOOLValue"));

    }
    objc_msgSend(v6, "hmf_numberForKey:", CFSTR("kUserCamerasAccessLevelInformationKey"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      objc_msgSend(v9, "homeAccessControl");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMUserCameraAccess accessWithNumber:](HMUserCameraAccess, "accessWithNumber:", v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setCamerasAccess:", v16);

    }
    objc_msgSend(v6, "hmf_numberForKey:", CFSTR("HMHomeUserAnnounceAccessInformationKey"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      objc_msgSend(v9, "homeAccessControl");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setAnnounceAccessAllowed:", objc_msgSend(v17, "BOOLValue"));

    }
    objc_msgSend(v6, "hmf_numberForKey:", CFSTR("HMHomeAudioAnalysisDropInAccessLevelInformationKey"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      v20 = (void *)MEMORY[0x1A1AC1AAC]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "uuid");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = 138543874;
        v27 = v23;
        v28 = 2112;
        v29 = v19;
        v30 = 2112;
        v31 = v24;
        _os_log_impl(&dword_19B1B0000, v22, OS_LOG_TYPE_INFO, "%{public}@Updated audio analysis drop in access: %@ for userID: %@", (uint8_t *)&v26, 0x20u);

      }
      objc_autoreleasePoolPop(v20);
      objc_msgSend(v9, "homeAccessControl");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "setAudioAnalysisUserDropInAccessLevel:", objc_msgSend(v19, "unsignedIntegerValue"));

    }
  }

}

- (void)updateAccessForUser:(id)a3 administrator:(BOOL)a4 completionHandler:(id)a5
{
  _BOOL8 v6;
  id v8;
  void (**v9)(id, void *);
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  HMHome *v24;
  NSObject *v25;
  void *v26;
  id v27;
  _QWORD v28[4];
  id v29;
  HMHome *v30;
  id v31;
  void (**v32)(id, void *);
  _QWORD v33[2];
  _QWORD v34[2];
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  const char *v38;
  uint64_t v39;

  v6 = a4;
  v39 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = (void (**)(id, void *))a5;
  -[HMHome context](self, "context");
  v10 = objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateAccessForUser:administrator:completionHandler:]", CFSTR("completion"));
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)MEMORY[0x1A1AC1AAC]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v26;
      v37 = 2112;
      v38 = (const char *)v22;
      _os_log_impl(&dword_19B1B0000, v25, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v22, 0);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v27);
  }
  v11 = (void *)v10;
  -[HMHome context](self, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
  {
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v19;
      v37 = 2080;
      v38 = "-[HMHome updateAccessForUser:administrator:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v9[2](v9, v20);
    goto LABEL_9;
  }
  if (!v8)
  {
    objc_msgSend(v11, "delegateCaller");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "callCompletion:error:", v9, v21);

LABEL_9:
    goto LABEL_10;
  }
  v33[0] = CFSTR("kUserIDKey");
  v33[1] = CFSTR("kUserAdministratorInformationKey");
  v34[0] = v8;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v6);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v34[1] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, v33, 2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMHome uuid](self, "uuid");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = __62__HMHome_updateAccessForUser_administrator_completionHandler___block_invoke;
  v28[3] = &unk_1E3AB4B08;
  v29 = v11;
  v32 = v9;
  v30 = self;
  v31 = v8;
  -[_HMContext sendMessage:target:payload:responseHandler:](v29, CFSTR("kUpdateUserAccessRequestKey"), v15, v14, v28);

LABEL_10:
}

- (void)updateAccessForUser:(id)a3 remoteAccess:(BOOL)a4 completionHandler:(id)a5
{
  _BOOL8 v6;
  id v8;
  void (**v9)(id, void *);
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  HMHome *v24;
  NSObject *v25;
  void *v26;
  id v27;
  _QWORD v28[4];
  id v29;
  HMHome *v30;
  id v31;
  void (**v32)(id, void *);
  _QWORD v33[2];
  _QWORD v34[2];
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  const char *v38;
  uint64_t v39;

  v6 = a4;
  v39 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = (void (**)(id, void *))a5;
  -[HMHome context](self, "context");
  v10 = objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateAccessForUser:remoteAccess:completionHandler:]", CFSTR("completion"));
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)MEMORY[0x1A1AC1AAC]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v26;
      v37 = 2112;
      v38 = (const char *)v22;
      _os_log_impl(&dword_19B1B0000, v25, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v22, 0);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v27);
  }
  v11 = (void *)v10;
  -[HMHome context](self, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
  {
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v19;
      v37 = 2080;
      v38 = "-[HMHome updateAccessForUser:remoteAccess:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v9[2](v9, v20);
    goto LABEL_9;
  }
  if (!v8)
  {
    objc_msgSend(v11, "delegateCaller");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "callCompletion:error:", v9, v21);

LABEL_9:
    goto LABEL_10;
  }
  v33[0] = CFSTR("kUserIDKey");
  v33[1] = CFSTR("kUserRemoteAccessInformationKey");
  v34[0] = v8;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v6);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v34[1] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, v33, 2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMHome uuid](self, "uuid");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = __61__HMHome_updateAccessForUser_remoteAccess_completionHandler___block_invoke;
  v28[3] = &unk_1E3AB4B08;
  v29 = v11;
  v32 = v9;
  v30 = self;
  v31 = v8;
  -[_HMContext sendMessage:target:payload:responseHandler:](v29, CFSTR("kUpdateUserAccessRequestKey"), v15, v14, v28);

LABEL_10:
}

- (void)updateForUser:(id)a3 presenceAuthorizationStatus:(unint64_t)a4 completionHandler:(id)a5
{
  id v8;
  void (**v9)(id, void *);
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  HMHome *v24;
  NSObject *v25;
  void *v26;
  id v27;
  _QWORD v28[4];
  id v29;
  HMHome *v30;
  id v31;
  void (**v32)(id, void *);
  _QWORD v33[2];
  _QWORD v34[2];
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  const char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = (void (**)(id, void *))a5;
  -[HMHome context](self, "context");
  v10 = objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateForUser:presenceAuthorizationStatus:completionHandler:]", CFSTR("completion"));
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)MEMORY[0x1A1AC1AAC]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v26;
      v37 = 2112;
      v38 = (const char *)v22;
      _os_log_impl(&dword_19B1B0000, v25, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v22, 0);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v27);
  }
  v11 = (void *)v10;
  if (!v10)
  {
    v15 = (void *)MEMORY[0x1A1AC1AAC]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v18;
      v37 = 2080;
      v38 = "-[HMHome updateForUser:presenceAuthorizationStatus:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v9[2](v9, v19);
    goto LABEL_9;
  }
  if (!v8)
  {
    -[HMHome context](self, "context");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "delegateCaller");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 3, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "callCompletion:error:", v9, v21);

LABEL_9:
    goto LABEL_10;
  }
  v33[0] = CFSTR("kUserIDKey");
  v33[1] = CFSTR("kUserPresenceAuthorizationStatusKey");
  v34[0] = v8;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v34[1] = v12;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, v33, 2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMHome uuid](self, "uuid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = __70__HMHome_updateForUser_presenceAuthorizationStatus_completionHandler___block_invoke;
  v28[3] = &unk_1E3AB4B08;
  v29 = v11;
  v32 = v9;
  v30 = self;
  v31 = v8;
  -[_HMContext sendMessage:target:payload:responseHandler:](v29, CFSTR("kUpdateUserPresenceStatusConsentRequestKey"), v14, v13, v28);

LABEL_10:
}

- (void)updateAccessForUser:(id)a3 camerasAccessLevel:(unint64_t)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  HMHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  HMHome *v26;
  NSObject *v27;
  void *v28;
  id v29;
  _QWORD v30[4];
  id v31;
  HMHome *v32;
  id v33;
  id v34;
  _QWORD v35[2];
  _QWORD v36[2];
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  -[HMHome context](self, "context");
  v10 = objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateAccessForUser:camerasAccessLevel:completionHandler:]", CFSTR("completion"));
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = (void *)MEMORY[0x1A1AC1AAC]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v28;
      v39 = 2112;
      v40 = (const char *)v24;
      _os_log_impl(&dword_19B1B0000, v27, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v24, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v29);
  }
  v11 = (void *)v10;
  if (v10)
  {
    if (v8)
    {
      v35[0] = CFSTR("kUserIDKey");
      v35[1] = CFSTR("kUserCamerasAccessLevelInformationKey");
      v36[0] = v8;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a4);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v36[1] = v12;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v36, v35, 2);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      -[HMHome uuid](self, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v30[0] = MEMORY[0x1E0C809B0];
      v30[1] = 3221225472;
      v30[2] = __67__HMHome_updateAccessForUser_camerasAccessLevel_completionHandler___block_invoke;
      v30[3] = &unk_1E3AB4B08;
      v31 = v11;
      v34 = v9;
      v32 = self;
      v33 = v8;
      -[_HMContext sendMessage:target:payload:responseHandler:](v31, CFSTR("kUpdateUserCamerasAccessLevelRequestKey"), v14, v13, v30);

    }
    else
    {
      v19 = (void *)MEMORY[0x1A1AC1AAC]();
      v20 = self;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v38 = v22;
        _os_log_impl(&dword_19B1B0000, v21, OS_LOG_TYPE_ERROR, "%{public}@User id not present", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
      objc_msgSend(v11, "delegateCaller");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 3, 0);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "callCompletion:error:", v9, v23);

    }
  }
  else
  {
    v15 = (void *)MEMORY[0x1A1AC1AAC]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v18;
      v39 = 2080;
      v40 = "-[HMHome updateAccessForUser:camerasAccessLevel:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v9 + 2))(v9, v13);
  }

}

- (void)updateAccessForUser:(id)a3 announceAccess:(BOOL)a4 completionHandler:(id)a5
{
  _BOOL8 v6;
  id v8;
  void (**v9)(id, void *);
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  HMHome *v23;
  NSObject *v24;
  void *v25;
  id v26;
  _QWORD v27[4];
  id v28;
  HMHome *v29;
  id v30;
  void (**v31)(id, void *);
  _QWORD v32[2];
  _QWORD v33[2];
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v6 = a4;
  v38 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = (void (**)(id, void *))a5;
  -[HMHome context](self, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateAccessForUser:announceAccess:completionHandler:]", CFSTR("completion"));
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = (void *)MEMORY[0x1A1AC1AAC]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v35 = v25;
      v36 = 2112;
      v37 = (const char *)v21;
      _os_log_impl(&dword_19B1B0000, v24, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v21, 0);
    v26 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v26);
  }
  v11 = v10;
  if (!v10)
  {
    v15 = (void *)MEMORY[0x1A1AC1AAC]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v35 = v18;
      v36 = 2080;
      v37 = "-[HMHome updateAccessForUser:announceAccess:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v9[2](v9, v19);
    goto LABEL_9;
  }
  if (!v8)
  {
    objc_msgSend(v10, "delegateCaller");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 3, 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "callCompletion:error:", v9, v20);

LABEL_9:
    goto LABEL_10;
  }
  v32[0] = CFSTR("kUserIDKey");
  v32[1] = CFSTR("HMHomeUserAnnounceAccessInformationKey");
  v33[0] = v8;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v6);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v33[1] = v12;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v33, v32, 2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMHome uuid](self, "uuid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __63__HMHome_updateAccessForUser_announceAccess_completionHandler___block_invoke;
  v27[3] = &unk_1E3AB4B08;
  v28 = v11;
  v31 = v9;
  v29 = self;
  v30 = v8;
  -[_HMContext sendMessage:target:payload:responseHandler:](v28, CFSTR("HMHomeUpdateUserAnnounceAccessRequestKey"), v14, v13, v27);

LABEL_10:
}

- (void)updateAccessForUser:(id)a3 audioAnalysisUserDropinAccessLevel:(unint64_t)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMHome *v15;
  NSObject *v16;
  void *v17;
  char *v18;
  void *v19;
  void *v20;
  HMHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  HMHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  HMHome *v31;
  NSObject *v32;
  void *v33;
  id v34;
  _QWORD v35[5];
  id v36;
  id v37;
  id v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  id v44;
  _QWORD v45[2];
  _QWORD v46[4];

  v46[2] = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  -[HMHome context](self, "context");
  v10 = objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateAccessForUser:audioAnalysisUserDropinAccessLevel:completionHandler:]", CFSTR("completion"));
    v29 = objc_claimAutoreleasedReturnValue();
    v30 = (void *)MEMORY[0x1A1AC1AAC]();
    v31 = self;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v33;
      v41 = 2112;
      v42 = (const char *)v29;
      _os_log_impl(&dword_19B1B0000, v32, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v30);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v29, 0);
    v34 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v34);
  }
  v11 = (void *)v10;
  if (v10)
  {
    if (v8)
    {
      v46[0] = v8;
      v45[0] = CFSTR("kUserIDKey");
      v45[1] = CFSTR("HMHomeAudioAnalysisDropInAccessLevelInformationKey");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a4);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v46[1] = v12;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v46, v45, 2);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      v14 = (void *)MEMORY[0x1A1AC1AAC]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a4);
        v18 = (char *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v40 = v17;
        v41 = 2112;
        v42 = v18;
        v43 = 2112;
        v44 = v8;
        _os_log_impl(&dword_19B1B0000, v16, OS_LOG_TYPE_INFO, "%{public}@Updating audio analysis drop in access: %@ for userID: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v14);
      -[HMHome uuid](v15, "uuid");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 3221225472;
      v35[2] = __83__HMHome_updateAccessForUser_audioAnalysisUserDropinAccessLevel_completionHandler___block_invoke;
      v35[3] = &unk_1E3AB4B08;
      v35[4] = v15;
      v36 = v11;
      v38 = v9;
      v37 = v8;
      -[_HMContext sendMessage:target:payload:responseHandler:](v36, CFSTR("HMHomeAudioAnalysisDropInUpdateAccessLevelRequestKey"), v19, v13, v35);

    }
    else
    {
      v24 = (void *)MEMORY[0x1A1AC1AAC]();
      v25 = self;
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v40 = v27;
        _os_log_impl(&dword_19B1B0000, v26, OS_LOG_TYPE_ERROR, "%{public}@nil user UUID for audio analysis drop in access update request", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v24);
      objc_msgSend(v11, "delegateCaller");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 3, 0);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "callCompletion:error:", v9, v28);

    }
  }
  else
  {
    v20 = (void *)MEMORY[0x1A1AC1AAC]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v23;
      v41 = 2080;
      v42 = "-[HMHome updateAccessForUser:audioAnalysisUserDropinAccessLevel:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v9 + 2))(v9, v13);
  }

}

- (void)_handleLocationAuthorizationUpdatedNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  char v12;
  NSObject *v13;
  void *v14;
  HMHome *v15;
  NSObject *v16;
  void *v17;
  _QWORD v18[5];
  char v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  -[HMHome homeManager](self, "homeManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "configuration");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "locationAuthorization");
  v10 = (id)objc_claimAutoreleasedReturnValue();

  if (v7 == v10)
  {
    -[HMHome context](self, "context");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      v12 = objc_msgSend(v7, "isAuthorized");
      objc_msgSend(v11, "queue");
      v13 = objc_claimAutoreleasedReturnValue();
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = __58__HMHome__handleLocationAuthorizationUpdatedNotification___block_invoke;
      v18[3] = &unk_1E3AB15A8;
      v19 = v12;
      v18[4] = self;
      dispatch_async(v13, v18);

    }
    else
    {
      v14 = (void *)MEMORY[0x1A1AC1AAC]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v21 = v17;
        v22 = 2080;
        v23 = "-[HMHome _handleLocationAuthorizationUpdatedNotification:]";
        _os_log_impl(&dword_19B1B0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
    }

  }
}

- (void)_cancelInvitation:(id)a3 completionHandler:(id)a4
{
  -[HMHome _updateInvitation:invitationState:completionHandler:](self, "_updateInvitation:invitationState:completionHandler:", a3, 1, a4);
}

- (void)_acceptInvitation:(id)a3 completionHandler:(id)a4
{
  -[HMHome _updateInvitation:invitationState:completionHandler:](self, "_updateInvitation:invitationState:completionHandler:", a3, 3, a4);
}

- (void)_updateInvitation:(id)a3 invitationState:(int64_t)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  HMHome *v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, void *);
  void *v29;
  id v30;
  id v31;
  _QWORD v32[2];
  _QWORD v33[2];
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  -[HMHome context](self, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    v32[0] = CFSTR("kInvitationIdentifierKey");
    objc_msgSend(v8, "identifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "UUIDString");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v32[1] = CFSTR("kInvitationStateKey");
    v33[0] = v12;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v33[1] = v13;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v33, v32, 2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v15 = objc_alloc(MEMORY[0x1E0D285F8]);
    v16 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](self, "uuid");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)objc_msgSend(v16, "initWithTarget:", v17);
    v19 = (void *)objc_msgSend(v15, "initWithName:destination:payload:", CFSTR("kUpdateInvitationStateRequestKey"), v18, v14);

    v26 = MEMORY[0x1E0C809B0];
    v27 = 3221225472;
    v28 = __62__HMHome__updateInvitation_invitationState_completionHandler___block_invoke;
    v29 = &unk_1E3AB59B8;
    v20 = v10;
    v30 = v20;
    v31 = v9;
    objc_msgSend(v19, "setResponseHandler:", &v26);
    objc_msgSend(v20, "messageDispatcher", v26, v27, v28, v29);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "sendMessage:", v19);

  }
  else
  {
    v22 = (void *)MEMORY[0x1A1AC1AAC]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v35 = v25;
      v36 = 2080;
      v37 = "-[HMHome _updateInvitation:invitationState:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
  }

}

- (void)enableNotifications:(BOOL)a3 completionHandler:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  HMHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  id v20;
  _QWORD block[5];
  id v22;
  BOOL v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMHome context](self, "context");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome enableNotifications:completionHandler:]", CFSTR("completion"));
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v19;
      v26 = 2112;
      v27 = (const char *)v15;
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v15, 0);
    v20 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v20);
  }
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "queue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __48__HMHome_enableNotifications_completionHandler___block_invoke;
    block[3] = &unk_1E3AB15D0;
    block[4] = self;
    v23 = a3;
    v22 = v6;
    dispatch_async(v9, block);

  }
  else
  {
    v10 = (void *)MEMORY[0x1A1AC1AAC]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v13;
      v26 = 2080;
      v27 = "-[HMHome enableNotifications:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v14);

  }
}

- (void)reEnableNotifications
{
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  HMHome *v7;
  NSObject *v8;
  void *v9;
  _QWORD block[5];
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[HMHome context](self, "context");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "queue");
    v5 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __31__HMHome_reEnableNotifications__block_invoke;
    block[3] = &unk_1E3AB5E18;
    block[4] = self;
    dispatch_async(v5, block);

  }
  else
  {
    v6 = (void *)MEMORY[0x1A1AC1AAC]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v12 = v9;
      v13 = 2080;
      v14 = "-[HMHome reEnableNotifications]";
      _os_log_impl(&dword_19B1B0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }

}

- (void)enableNotification:(BOOL)a3 forCharacteristics:(id)a4 completionHandler:(id)a5
{
  id v8;
  void (**v9)(id, void *);
  uint64_t v10;
  void *v11;
  NSObject *v12;
  void *v13;
  HMHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  HMHome *v22;
  NSObject *v23;
  void *v24;
  id v25;
  _QWORD block[5];
  id v27;
  void (**v28)(id, void *);
  BOOL v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = (void (**)(id, void *))a5;
  -[HMHome context](self, "context");
  v10 = objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome enableNotification:forCharacteristics:completionHandler:]", CFSTR("completion"));
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)MEMORY[0x1A1AC1AAC]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v24;
      v32 = 2112;
      v33 = (const char *)v20;
      _os_log_impl(&dword_19B1B0000, v23, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v20, 0);
    v25 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v25);
  }
  v11 = (void *)v10;
  if (!v10)
  {
    v13 = (void *)MEMORY[0x1A1AC1AAC]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v16;
      v32 = 2080;
      v33 = "-[HMHome enableNotification:forCharacteristics:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v9[2](v9, v17);
    goto LABEL_9;
  }
  if (!objc_msgSend(v8, "count"))
  {
    -[HMHome context](self, "context");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "delegateCaller");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 20, 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "callCompletion:error:", v9, v19);

LABEL_9:
    goto LABEL_10;
  }
  objc_msgSend(v11, "queue");
  v12 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __66__HMHome_enableNotification_forCharacteristics_completionHandler___block_invoke;
  block[3] = &unk_1E3AB19C0;
  block[4] = self;
  v29 = a3;
  v27 = v8;
  v28 = v9;
  dispatch_async(v12, block);

LABEL_10:
}

- (void)_enableNotification:(BOOL)a3 forCharacteristics:(id)a4 completionHandler:(id)a5
{
  _BOOL4 v6;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  char *v28;
  void *v29;
  void **v30;
  const __CFString **v31;
  void *v32;
  HMHome *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  void *v51;
  _BOOL4 v52;
  void *v53;
  id v54;
  HMHome *v55;
  void *v56;
  void *v57;
  _QWORD v58[4];
  id v59;
  id v60;
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  const __CFString *v66;
  void *v67;
  const __CFString *v68;
  void *v69;
  uint8_t v70[128];
  uint8_t buf[4];
  void *v72;
  __int16 v73;
  const char *v74;
  uint64_t v75;

  v6 = a3;
  v75 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = a5;
  -[HMHome context](self, "context");
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  if (v10)
  {
    v56 = (void *)v10;
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v8, "count"));
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v12 = v8;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v62, v70, 16);
    if (v13)
    {
      v14 = v13;
      v52 = v6;
      v54 = v8;
      v55 = self;
      v53 = v9;
      v15 = 0;
      v16 = *(_QWORD *)v63;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v63 != v16)
            objc_enumerationMutation(v12);
          v18 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * i);
          objc_msgSend(v18, "service");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "accessory");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "uuid");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "UUIDString");
          v22 = (void *)objc_claimAutoreleasedReturnValue();

          if (v22)
          {
            objc_msgSend(v57, "objectForKeyedSubscript:", v22);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v23)
            {
              objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v12, "count"));
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v57, "setObject:forKeyedSubscript:", v23, v22);
            }
            objc_msgSend(v18, "instanceID");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "addObject:", v24);

            v15 = 1;
          }
          else
          {
            v25 = (void *)MEMORY[0x1A1AC1AAC]();
            HMFGetOSLogHandle();
            v26 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18, "instanceID");
              v28 = (char *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v72 = v27;
              v73 = 2112;
              v74 = v28;
              _os_log_impl(&dword_19B1B0000, v26, OS_LOG_TYPE_INFO, "%{public}@Skipping enabling notification for characteristic %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v25);
          }

        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v62, v70, 16);
      }
      while (v14);

      v9 = v53;
      v8 = v54;
      self = v55;
      if ((v15 & 1) != 0)
      {
        v11 = v56;
        if (v52)
        {
          v68 = CFSTR("kNotificationEnablePayloadKey");
          v69 = v57;
          v29 = (void *)MEMORY[0x1E0C99D80];
          v30 = &v69;
          v31 = &v68;
        }
        else
        {
          v66 = CFSTR("kNotificationDisablePayloadKey");
          v67 = v57;
          v29 = (void *)MEMORY[0x1E0C99D80];
          v30 = &v67;
          v31 = &v66;
        }
        objc_msgSend(v29, "dictionaryWithObjects:forKeys:count:", v30, v31, 1);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = objc_alloc(MEMORY[0x1E0D285F8]);
        v43 = objc_alloc(MEMORY[0x1E0D285D8]);
        -[HMHome uuid](v55, "uuid");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = (void *)objc_msgSend(v43, "initWithTarget:", v44);
        v40 = (void *)objc_msgSend(v42, "initWithName:destination:payload:", CFSTR("kCharacteristicEnableNotificationRequestKey"), v45, v39);

        objc_msgSend(v56, "pendingRequests");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "identifier");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = _Block_copy(v53);
        objc_msgSend(v46, "addCompletionBlock:forIdentifier:", v48, v47);

        v58[0] = MEMORY[0x1E0C809B0];
        v58[1] = 3221225472;
        v58[2] = __67__HMHome__enableNotification_forCharacteristics_completionHandler___block_invoke;
        v58[3] = &unk_1E3AB5C08;
        v59 = v46;
        v60 = v47;
        v49 = v56;
        v61 = v49;
        v50 = v47;
        v41 = v46;
        objc_msgSend(v40, "setResponseHandler:", v58);
        objc_msgSend(v49, "messageDispatcher");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "sendMessage:", v40);

LABEL_28:
        goto LABEL_29;
      }
    }
    else
    {

    }
    v36 = (void *)MEMORY[0x1A1AC1AAC]();
    HMFGetOSLogHandle();
    v37 = objc_claimAutoreleasedReturnValue();
    v11 = v56;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v72 = v38;
      _os_log_impl(&dword_19B1B0000, v37, OS_LOG_TYPE_INFO, "%{public}@No valid characteristics to enable notifications", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v36);
    -[HMHome context](self, "context");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "delegateCaller");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v41 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "callCompletion:error:", v9, v41);
    goto LABEL_28;
  }
  v32 = (void *)MEMORY[0x1A1AC1AAC]();
  v33 = self;
  HMFGetOSLogHandle();
  v34 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v72 = v35;
    v73 = 2080;
    v74 = "-[HMHome _enableNotification:forCharacteristics:completionHandler:]";
    _os_log_impl(&dword_19B1B0000, v34, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v32);
LABEL_29:

}

- (void)confirmResidentWithCompletion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  _QWORD block[5];
  id v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "queue");
    v7 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __40__HMHome_confirmResidentWithCompletion___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v14 = v4;
    v13 = v6;
    dispatch_async(v7, block);

  }
  else
  {
    v8 = (void *)MEMORY[0x1A1AC1AAC]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v16 = v11;
      v17 = 2080;
      v18 = "-[HMHome confirmResidentWithCompletion:]";
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

- (void)updateResidentSelectionVersion:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  HMHome *v22;
  NSObject *v23;
  void *v24;
  id v25;
  _QWORD v26[4];
  id v27;
  id v28;
  const __CFString *v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome updateResidentSelectionVersion:completion:]", CFSTR("completion"));
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)MEMORY[0x1A1AC1AAC]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v24;
      v33 = 2112;
      v34 = (const char *)v20;
      _os_log_impl(&dword_19B1B0000, v23, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v20, 0);
    v25 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v25);
  }
  v9 = (void *)v8;
  if (v8)
  {
    v10 = (void *)MEMORY[0x1E0D285D0];
    -[HMHome messageDestination](self, "messageDestination");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = CFSTR("HM.v");
    v30 = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "messageWithName:qualityOfService:destination:payload:", CFSTR("HM.SetResidentSelectionVersion"), 25, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __52__HMHome_updateResidentSelectionVersion_completion___block_invoke;
    v26[3] = &unk_1E3AB59B8;
    v28 = v7;
    v14 = v9;
    v27 = v14;
    objc_msgSend(v13, "setResponseHandler:", v26);
    objc_msgSend(v14, "messageDispatcher");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "sendMessage:completionHandler:", v13, 0);

  }
  else
  {
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v19;
      v33 = 2080;
      v34 = "-[HMHome updateResidentSelectionVersion:completion:]";
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v7 + 2))(v7, v13);
  }

}

- (void)_handleAccessoryInfoUpdatedNotification:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t i;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  unint64_t v16;
  void *v17;
  NSObject *v18;
  HMHome *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  id v24;
  uint64_t v25;
  id obj;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  void *v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (v27)
  {
    v24 = v4;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    objc_msgSend(v27, "allKeys");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v38, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v29;
      v8 = 0x1E0CB3000uLL;
      v25 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v29 != v7)
            objc_enumerationMutation(obj);
          v10 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * i);
          v11 = (void *)objc_msgSend(objc_alloc(*(Class *)(v8 + 2600)), "initWithUUIDString:", v10);
          -[HMHome accessoryWithUUID:](self, "accessoryWithUUID:", v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v27, "hmf_dictionaryForKey:", v10);
          v13 = objc_claimAutoreleasedReturnValue();
          v14 = (void *)v13;
          if (v12)
            v15 = v13 == 0;
          else
            v15 = 1;
          if (v15)
          {
            v16 = v8;
            v17 = (void *)MEMORY[0x1A1AC1AAC]();
            HMFGetOSLogHandle();
            v18 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v19 = self;
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v33 = v20;
              v34 = 2112;
              v35 = v10;
              v36 = 2112;
              v37 = v14;
              _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_INFO, "%{public}@Couldn't find the accessory for UUID %@ or dict (%@) is nil.", buf, 0x20u);

              self = v19;
              v7 = v25;
            }

            objc_autoreleasePoolPop(v17);
            v8 = v16;
          }
          else
          {
            objc_msgSend(v12, "updateAccessoryInfo:", v13);
          }

        }
        v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v38, 16);
      }
      while (v6);
    }

    v4 = v24;
  }
  else
  {
    v21 = (void *)MEMORY[0x1A1AC1AAC]();
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v33 = v23;
      _os_log_impl(&dword_19B1B0000, v22, OS_LOG_TYPE_INFO, "%{public}@Received invalid accessory information payload.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v21);
  }

}

- (void)_handleAccessorySetupCodeFailureMessage:(id)a3
{
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  objc_msgSend(a3, "stringForKey:", CFSTR("kAccessorySetupCodeReasonKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __50__HMHome__handleAccessorySetupCodeFailureMessage___block_invoke;
  v6[3] = &unk_1E3AB1620;
  v7 = v4;
  v5 = v4;
  -[HMHome _notifySetupFailedIfInHomeUIService:](self, "_notifySetupFailedIfInHomeUIService:", v6);

}

- (void)_handleHomeLocationStatusUpdateNotification:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome name](v6, "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v8;
    v20 = 2112;
    v21 = v9;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Start handling home location status update notification in home %@", (uint8_t *)&v18, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMHome context](v6, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "pendingRequests");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "identifier");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "removeCompletionBlockForIdentifier:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "numberForKey:", CFSTR("HMHomeLocationStatusValueKey"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (v14)
  {
    -[HMHome setHomeLocationStatus:](v6, "setHomeLocationStatus:", objc_msgSend(v14, "integerValue"));
    if (v13)
    {
      -[HMHome context](v6, "context");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "delegateCaller");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "callCompletion:error:", v13, 0);

    }
    else
    {
      -[HMHome _notifyDelegateOfUpdatedHomeLocationStatus](v6, "_notifyDelegateOfUpdatedHomeLocationStatus");
    }
  }

}

- (void)_handleHomeHubStateUpdatedNotification:(id)a3
{
  void *v4;
  unint64_t v5;
  BOOL v6;
  id v7;

  objc_msgSend(a3, "numberForKey:", CFSTR("homeHubState"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v7 = v4;
    v5 = objc_msgSend(v4, "integerValue");
    v6 = -[HMHome homeHubState](self, "homeHubState") == v5;
    v4 = v7;
    if (!v6)
    {
      self->_homeHubState = v5;
      -[HMHome _notifyDelegateOfHomeHubStateUpdate](self, "_notifyDelegateOfHomeHubStateUpdate");
      v4 = v7;
    }
  }

}

- (id)_getContainerForAppData:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMHome *v9;

  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kRoomUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMHome roomWithUUID:](self, "roomWithUUID:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v4, "uuidForKey:", CFSTR("kServiceGroupUUID"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      -[HMHome serviceGroupWithUUID:](self, "serviceGroupWithUUID:", v7);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(v4, "uuidForKey:", CFSTR("kActionSetUUID"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8)
      {
        -[HMHome actionSetWithUUID:](self, "actionSetWithUUID:", v8);
        v9 = (HMHome *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v9 = self;
      }
      v6 = v9;

    }
  }

  return v6;
}

- (void)notifyDelegateOfAppDataUpdateForRoom:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[5];
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "queue");
    v7 = objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __47__HMHome_notifyDelegateOfAppDataUpdateForRoom___block_invoke;
    v12[3] = &unk_1E3AB5ED8;
    v12[4] = self;
    v13 = v4;
    dispatch_async(v7, v12);

  }
  else
  {
    v8 = (void *)MEMORY[0x1A1AC1AAC]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v15 = v11;
      v16 = 2080;
      v17 = "-[HMHome notifyDelegateOfAppDataUpdateForRoom:]";
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

- (void)_notifyDelegateOfAppDataUpdateForRoom:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  HMHome *v13;
  id v14;

  v4 = a3;
  if (v4)
  {
    -[HMHome delegate](self, "delegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_opt_respondsToSelector();

    if ((v6 & 1) != 0)
    {
      -[HMHome _privateDelegate](self, "_privateDelegate");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome context](self, "context");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "delegateCaller");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __48__HMHome__notifyDelegateOfAppDataUpdateForRoom___block_invoke;
      v11[3] = &unk_1E3AB5CD0;
      v12 = v7;
      v13 = self;
      v14 = v4;
      v10 = v7;
      objc_msgSend(v9, "invokeBlock:", v11);

    }
  }

}

- (void)notifyDelegateOfAppDataUpdateForServiceGroup:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[5];
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "queue");
    v7 = objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __55__HMHome_notifyDelegateOfAppDataUpdateForServiceGroup___block_invoke;
    v12[3] = &unk_1E3AB5ED8;
    v12[4] = self;
    v13 = v4;
    dispatch_async(v7, v12);

  }
  else
  {
    v8 = (void *)MEMORY[0x1A1AC1AAC]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v15 = v11;
      v16 = 2080;
      v17 = "-[HMHome notifyDelegateOfAppDataUpdateForServiceGroup:]";
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

- (void)_notifyDelegateOfAppDataUpdateForServiceGroup:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  HMHome *v13;
  id v14;

  v4 = a3;
  if (v4)
  {
    -[HMHome delegate](self, "delegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_opt_respondsToSelector();

    if ((v6 & 1) != 0)
    {
      -[HMHome _privateDelegate](self, "_privateDelegate");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome context](self, "context");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "delegateCaller");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __56__HMHome__notifyDelegateOfAppDataUpdateForServiceGroup___block_invoke;
      v11[3] = &unk_1E3AB5CD0;
      v12 = v7;
      v13 = self;
      v14 = v4;
      v10 = v7;
      objc_msgSend(v9, "invokeBlock:", v11);

    }
  }

}

- (void)notifyDelegateOfAppDataUpdateForActionSet:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[5];
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "queue");
    v7 = objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __52__HMHome_notifyDelegateOfAppDataUpdateForActionSet___block_invoke;
    v12[3] = &unk_1E3AB5ED8;
    v12[4] = self;
    v13 = v4;
    dispatch_async(v7, v12);

  }
  else
  {
    v8 = (void *)MEMORY[0x1A1AC1AAC]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v15 = v11;
      v16 = 2080;
      v17 = "-[HMHome notifyDelegateOfAppDataUpdateForActionSet:]";
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

- (void)_notifyDelegateOfAppDataUpdateForActionSet:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  HMHome *v13;
  id v14;

  v4 = a3;
  if (v4)
  {
    -[HMHome delegate](self, "delegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_opt_respondsToSelector();

    if ((v6 & 1) != 0)
    {
      -[HMHome _privateDelegate](self, "_privateDelegate");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome context](self, "context");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "delegateCaller");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __53__HMHome__notifyDelegateOfAppDataUpdateForActionSet___block_invoke;
      v11[3] = &unk_1E3AB5CD0;
      v12 = v7;
      v13 = self;
      v14 = v4;
      v10 = v7;
      objc_msgSend(v9, "invokeBlock:", v11);

    }
  }

}

- (void)_notifyDelegateOfAppDataUpdate
{
  void *v3;
  char v4;
  void *v5;
  void *v6;
  _QWORD v7[5];

  -[HMHome delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    -[HMHome context](self, "context");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "delegateCaller");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __40__HMHome__notifyDelegateOfAppDataUpdate__block_invoke;
    v7[3] = &unk_1E3AB5E18;
    v7[4] = self;
    objc_msgSend(v6, "invokeBlock:", v7);

  }
}

- (void)_invokeDelegateForAppData:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  objc_msgSend(v8, "uuidForKey:", CFSTR("kRoomUUID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[HMHome roomWithUUID:](self, "roomWithUUID:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome _notifyDelegateOfAppDataUpdateForRoom:](self, "_notifyDelegateOfAppDataUpdateForRoom:", v5);
  }
  else
  {
    objc_msgSend(v8, "uuidForKey:", CFSTR("kServiceGroupUUID"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      -[HMHome serviceGroupWithUUID:](self, "serviceGroupWithUUID:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome _notifyDelegateOfAppDataUpdateForServiceGroup:](self, "_notifyDelegateOfAppDataUpdateForServiceGroup:", v6);
    }
    else
    {
      objc_msgSend(v8, "uuidForKey:", CFSTR("kActionSetUUID"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (v6)
      {
        -[HMHome actionSetWithUUID:](self, "actionSetWithUUID:", v6);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMHome _notifyDelegateOfAppDataUpdateForActionSet:](self, "_notifyDelegateOfAppDataUpdateForActionSet:", v7);

      }
      else
      {
        -[HMHome _notifyDelegateOfAppDataUpdate](self, "_notifyDelegateOfAppDataUpdate");
      }
    }

  }
}

- (void)notifyDelegateOfAccessControlUpdateForUser:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[5];
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "queue");
    v7 = objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __53__HMHome_notifyDelegateOfAccessControlUpdateForUser___block_invoke;
    v12[3] = &unk_1E3AB5ED8;
    v12[4] = self;
    v13 = v4;
    dispatch_async(v7, v12);

  }
  else
  {
    v8 = (void *)MEMORY[0x1A1AC1AAC]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v15 = v11;
      v16 = 2080;
      v17 = "-[HMHome notifyDelegateOfAccessControlUpdateForUser:]";
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

- (void)_notifyDelegateOfAccessControlUpdateForUser:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  HMHome *v16;
  _QWORD v17[5];
  id v18;
  id v19;

  v4 = a3;
  -[HMHome delegate](self, "delegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    v6 = v5;
    if (objc_msgSend(v6, "conformsToProtocol:", &unk_1EE45A110))
      v7 = v6;
    else
      v7 = 0;
    v8 = v7;

    -[HMHome context](self, "context");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "delegateCaller");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __54__HMHome__notifyDelegateOfAccessControlUpdateForUser___block_invoke;
    v17[3] = &unk_1E3AB5CD0;
    v17[4] = self;
    v18 = v4;
    v19 = v8;
    v11 = v8;
    objc_msgSend(v10, "invokeBlock:", v17);

  }
  if (objc_msgSend(v4, "isCurrentUser") && (objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "delegateCaller");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __54__HMHome__notifyDelegateOfAccessControlUpdateForUser___block_invoke_831;
    v14[3] = &unk_1E3AB5ED8;
    v15 = v5;
    v16 = self;
    objc_msgSend(v13, "invokeBlock:", v14);

  }
}

- (void)notifyDelegateOfAccesoryInvitationsUpdateForUser:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[5];
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "queue");
    v7 = objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __59__HMHome_notifyDelegateOfAccesoryInvitationsUpdateForUser___block_invoke;
    v12[3] = &unk_1E3AB5ED8;
    v12[4] = self;
    v13 = v4;
    dispatch_async(v7, v12);

  }
  else
  {
    v8 = (void *)MEMORY[0x1A1AC1AAC]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v15 = v11;
      v16 = 2080;
      v17 = "-[HMHome notifyDelegateOfAccesoryInvitationsUpdateForUser:]";
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

- (void)_notifyDelegateOfAccesoryInvitationsUpdateForUser:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  HMHome *v15;
  id v16;

  v4 = a3;
  if (v4)
  {
    -[HMHome delegate](self, "delegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_opt_respondsToSelector();

    if ((v6 & 1) != 0)
    {
      -[HMHome delegate](self, "delegate");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v7, "conformsToProtocol:", &unk_1EE45A110))
        v8 = v7;
      else
        v8 = 0;
      v9 = v8;

      -[HMHome context](self, "context");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "delegateCaller");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __60__HMHome__notifyDelegateOfAccesoryInvitationsUpdateForUser___block_invoke;
      v13[3] = &unk_1E3AB5CD0;
      v14 = v9;
      v15 = self;
      v16 = v4;
      v12 = v9;
      objc_msgSend(v11, "invokeBlock:", v13);

    }
  }

}

- (void)_notifyDelegateOfTriggerAdded:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  id v10;

  v4 = a3;
  -[HMHome delegate](self, "delegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "delegateCaller");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __40__HMHome__notifyDelegateOfTriggerAdded___block_invoke;
    v8[3] = &unk_1E3AB5CD0;
    v8[4] = self;
    v9 = v4;
    v10 = v5;
    objc_msgSend(v7, "invokeBlock:", v8);

  }
}

- (void)_notifyDelegateOfTriggerRemoved:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  id v10;

  v4 = a3;
  -[HMHome delegate](self, "delegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "delegateCaller");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __42__HMHome__notifyDelegateOfTriggerRemoved___block_invoke;
    v8[3] = &unk_1E3AB5CD0;
    v8[4] = self;
    v9 = v4;
    v10 = v5;
    objc_msgSend(v7, "invokeBlock:", v8);

  }
}

- (void)_notifyDelegateOfTriggerUpdated:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  HMHome *v15;
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((objc_msgSend(v4, "compatibleWithApp") & 1) != 0)
  {
    -[HMHome delegate](self, "delegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      -[HMHome context](self, "context");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "delegateCaller");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __42__HMHome__notifyDelegateOfTriggerUpdated___block_invoke;
      v13[3] = &unk_1E3AB5CD0;
      v14 = v5;
      v15 = self;
      v16 = v4;
      objc_msgSend(v7, "invokeBlock:", v13);

    }
  }
  else
  {
    v8 = (void *)MEMORY[0x1A1AC1AAC]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v18 = v11;
      v19 = 2112;
      v20 = v12;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Updated trigger %@ is no longer compatible", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    -[HMHome _removeIncompatibleTrigger:](v9, "_removeIncompatibleTrigger:", v4);
  }

}

- (void)_notifyDelegateOfHomeHubStateUpdate
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  HMHome *v10;

  -[HMHome delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "conformsToProtocol:", &unk_1EE453568))
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "delegateCaller");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __45__HMHome__notifyDelegateOfHomeHubStateUpdate__block_invoke;
    v8[3] = &unk_1E3AB5ED8;
    v9 = v5;
    v10 = self;
    objc_msgSend(v7, "invokeBlock:", v8);

  }
}

- (void)_removeIncompatibleTrigger:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  objc_msgSend(v5, "_unconfigure");
  -[HMHome currentTriggers](self, "currentTriggers");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeObject:", v5);

  -[HMHome _notifyDelegateOfTriggerRemoved:](self, "_notifyDelegateOfTriggerRemoved:", v5);
}

- (void)_notifyDelegateOfUpdatedHomeLocationStatus
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  HMHome *v10;

  -[HMHome delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "conformsToProtocol:", &unk_1EE45A110))
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "delegateCaller");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __52__HMHome__notifyDelegateOfUpdatedHomeLocationStatus__block_invoke;
    v8[3] = &unk_1E3AB5ED8;
    v9 = v5;
    v10 = self;
    objc_msgSend(v7, "invokeBlock:", v8);

  }
}

- (void)_notifyDelegateOfBulletinNotificationsSupportedUpdate
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  HMHome *v10;

  -[HMHome delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "conformsToProtocol:", &unk_1EE45A110))
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "delegateCaller");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __63__HMHome__notifyDelegateOfBulletinNotificationsSupportedUpdate__block_invoke;
    v8[3] = &unk_1E3AB5ED8;
    v9 = v5;
    v10 = self;
    objc_msgSend(v7, "invokeBlock:", v8);

  }
}

- (HMFMessageDestination)messageDestination
{
  id v3;
  void *v4;
  void *v5;

  v3 = objc_alloc(MEMORY[0x1E0D285D8]);
  -[HMHome messageTargetUUID](self, "messageTargetUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v3, "initWithTarget:", v4);

  return (HMFMessageDestination *)v5;
}

- (void)updateApplicationData:(id)a3 completionHandler:(id)a4
{
  -[HMHome updateApplicationData:forAppDataContainer:appDataContainerUUIDKeyName:completionHandler:](self, "updateApplicationData:forAppDataContainer:appDataContainerUUIDKeyName:completionHandler:", a3, self, 0, a4);
}

- (void)updateApplicationData:(id)a3 forRoom:(id)a4 completionHandler:(id)a5
{
  -[HMHome updateApplicationData:forAppDataContainer:appDataContainerUUIDKeyName:completionHandler:](self, "updateApplicationData:forAppDataContainer:appDataContainerUUIDKeyName:completionHandler:", a3, a4, CFSTR("kRoomUUID"), a5);
}

- (void)updateApplicationData:(id)a3 forServiceGroup:(id)a4 completionHandler:(id)a5
{
  -[HMHome updateApplicationData:forAppDataContainer:appDataContainerUUIDKeyName:completionHandler:](self, "updateApplicationData:forAppDataContainer:appDataContainerUUIDKeyName:completionHandler:", a3, a4, CFSTR("kServiceGroupUUID"), a5);
}

- (void)updateApplicationData:(id)a3 forActionSet:(id)a4 completionHandler:(id)a5
{
  -[HMHome updateApplicationData:forAppDataContainer:appDataContainerUUIDKeyName:completionHandler:](self, "updateApplicationData:forAppDataContainer:appDataContainerUUIDKeyName:completionHandler:", a3, a4, CFSTR("kActionSetUUID"), a5);
}

- (void)updateApplicationData:(id)a3 forAppDataContainer:(id)a4 appDataContainerUUIDKeyName:(id)a5 completionHandler:(id)a6
{
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  HMHome *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  _QWORD v40[4];
  id v41;
  id v42;
  id v43;
  _QWORD aBlock[4];
  id v45;
  id v46;
  id v47;
  id v48;
  _BYTE location[12];
  __int16 v50;
  const char *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v39 = a3;
  v10 = a4;
  v38 = a5;
  v37 = a6;
  -[HMHome context](self, "context");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    if (!v10)
      _HMFPreconditionFailure();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v39)
    {
      objc_msgSend(v39, "dictionaryRepresentation");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setObject:forKeyedSubscript:", v13, CFSTR("kAppDataInformationKey"));

    }
    if (v38)
    {
      objc_msgSend(v10, "applicationDataIdentifier");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "UUIDString");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setObject:forKey:", v15, v38);

    }
    v16 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome messageTargetUUID](self, "messageTargetUUID");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v16, "initWithTarget:", v17);

    v19 = (void *)MEMORY[0x1E0D285F8];
    v20 = (void *)objc_msgSend(v12, "copy");
    v36 = (void *)v18;
    objc_msgSend(v19, "messageWithName:destination:payload:", CFSTR("kSetAppDataRequestKey"), v18, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak((id *)location, self);
    v22 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __98__HMHome_updateApplicationData_forAppDataContainer_appDataContainerUUIDKeyName_completionHandler___block_invoke;
    aBlock[3] = &unk_1E3AB5510;
    objc_copyWeak(&v48, (id *)location);
    v45 = v10;
    v46 = v39;
    v47 = v37;
    v23 = _Block_copy(aBlock);
    -[HMHome context](self, "context");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "pendingRequests");
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v21, "identifier");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = _Block_copy(v23);
    objc_msgSend(v25, "addCompletionBlock:forIdentifier:", v27, v26);

    v40[0] = v22;
    v40[1] = 3221225472;
    v40[2] = __98__HMHome_updateApplicationData_forAppDataContainer_appDataContainerUUIDKeyName_completionHandler___block_invoke_2;
    v40[3] = &unk_1E3AB60C8;
    v28 = v25;
    v41 = v28;
    v29 = v26;
    v42 = v29;
    v30 = v23;
    v43 = v30;
    objc_msgSend(v21, "setResponseHandler:", v40);
    objc_msgSend(v11, "messageDispatcher");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "sendMessage:completionHandler:", v21, 0);

    objc_destroyWeak(&v48);
    objc_destroyWeak((id *)location);

  }
  else
  {
    v32 = (void *)MEMORY[0x1A1AC1AAC]();
    v33 = self;
    HMFGetOSLogHandle();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)location = 138543618;
      *(_QWORD *)&location[4] = v35;
      v50 = 2080;
      v51 = "-[HMHome updateApplicationData:forAppDataContainer:appDataContainerUUIDKeyName:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v34, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", location, 0x16u);

    }
    objc_autoreleasePoolPop(v32);
  }

}

- (void)setPersonManager:(id)a3
{
  HMHomePersonManager *v4;
  HMHomePersonManager *personManager;

  v4 = (HMHomePersonManager *)a3;
  os_unfair_lock_lock_with_options();
  personManager = self->_personManager;
  self->_personManager = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)setPersonManagerSettings:(id)a3
{
  HMHomePersonManagerSettings *v4;
  HMHomePersonManagerSettings *personManagerSettings;
  HMHomePersonManagerSettings *v6;

  v4 = (HMHomePersonManagerSettings *)a3;
  os_unfair_lock_lock_with_options();
  personManagerSettings = self->_personManagerSettings;
  self->_personManagerSettings = v4;
  v6 = v4;

  os_unfair_lock_unlock(&self->_lock);
  -[HMHome configurePersonManagerWithSettings:](self, "configurePersonManagerWithSettings:", v6);

}

- (HMPersonSettingsManager)personSettingsManager
{
  os_unfair_lock_s *p_lock;
  HMPersonSettingsManager *personSettingsManager;
  HMPersonSettingsManager *v5;
  HMPersonSettingsManager *v6;
  HMPersonSettingsManager *v7;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  personSettingsManager = self->_personSettingsManager;
  if (!personSettingsManager)
  {
    v5 = -[HMPersonSettingsManager initWithHome:]([HMPersonSettingsManager alloc], "initWithHome:", self);
    v6 = self->_personSettingsManager;
    self->_personSettingsManager = v5;

    personSettingsManager = self->_personSettingsManager;
  }
  v7 = personSettingsManager;
  os_unfair_lock_unlock(p_lock);
  return v7;
}

- (id)mediaDestinationsWithSupportedOptions:(unint64_t)a3
{
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[5];
  _QWORD v13[5];

  -[HMHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __48__HMHome_mediaDestinationsWithSupportedOptions___block_invoke;
  v13[3] = &__block_descriptor_40_e21_B16__0__HMAccessory_8l;
  v13[4] = a3;
  objc_msgSend(v5, "na_filter:", v13);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMHome mediaSystems](self, "mediaSystems");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = v6;
  v12[1] = 3221225472;
  v12[2] = __48__HMHome_mediaDestinationsWithSupportedOptions___block_invoke_2;
  v12[3] = &__block_descriptor_40_e23_B16__0__HMMediaSystem_8l;
  v12[4] = a3;
  objc_msgSend(v8, "na_filter:", v12);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "arrayByAddingObjectsFromArray:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

- (id)mediaDestinationsWithHomeTheaterSupportedOptions
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  -[HMHome accessories](self, "accessories");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "na_filter:", &__block_literal_global_870);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMHome mediaSystems](self, "mediaSystems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "na_filter:", &__block_literal_global_871);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "arrayByAddingObjectsFromArray:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (void)setSoftwareUpdateController:(id)a3
{
  HMAccessorySoftwareUpdateControllerV2 *v4;
  HMAccessorySoftwareUpdateControllerV2 *softwareUpdateController;

  v4 = (HMAccessorySoftwareUpdateControllerV2 *)a3;
  os_unfair_lock_lock_with_options();
  softwareUpdateController = self->_softwareUpdateController;
  self->_softwareUpdateController = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)fetchLastModifiedServiceOfType:(id)a3 completionHandler:(id)a4
{
  char *v6;
  void (**v7)(id, _QWORD, void *);
  uint64_t v8;
  void *v9;
  _BOOL4 v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  HMHome *v26;
  NSObject *v27;
  void *v28;
  id v29;
  _QWORD v30[4];
  void (**v31)(id, _QWORD, void *);
  id v32;
  const __CFString *v33;
  char *v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  const char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v6 = (char *)a3;
  v7 = (void (**)(id, _QWORD, void *))a4;
  -[HMHome context](self, "context");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome fetchLastModifiedServiceOfType:completionHandler:]", CFSTR("completion"));
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = (void *)MEMORY[0x1A1AC1AAC]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v28;
      v37 = 2112;
      v38 = (const char *)v24;
      _os_log_impl(&dword_19B1B0000, v27, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v24, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v29);
  }
  v9 = (void *)v8;
  v10 = v8 == 0;
  v11 = (void *)MEMORY[0x1A1AC1AAC]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v10)
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v21;
      v37 = 2080;
      v38 = "-[HMHome fetchLastModifiedServiceOfType:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v7[2](v7, 0, v19);
  }
  else
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v15;
      v37 = 2112;
      v38 = v6;
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_INFO, "%{public}@Fetching last modified service of type for serviceType: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    if ((objc_msgSend(v6, "isEqualToString:", CFSTR("00000041-0000-1000-8000-0026BB765291")) & 1) != 0)
    {
      v16 = (void *)MEMORY[0x1E0D285F8];
      -[HMHome messageDestination](v12, "messageDestination");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = CFSTR("kServiceType");
      v34 = v6;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "messageWithName:destination:payload:", CFSTR("HMHomeFetchLastModifiedServiceOfTypeMessage"), v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      objc_initWeak((id *)buf, v12);
      v30[0] = MEMORY[0x1E0C809B0];
      v30[1] = 3221225472;
      v30[2] = __59__HMHome_fetchLastModifiedServiceOfType_completionHandler___block_invoke;
      v30[3] = &unk_1E3AB4AE0;
      objc_copyWeak(&v32, (id *)buf);
      v31 = v7;
      objc_msgSend(v19, "setResponseHandler:", v30);
      objc_msgSend(v9, "messageDispatcher");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "sendMessage:completionHandler:", v19, 0);

      objc_destroyWeak(&v32);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      -[HMHome context](v12, "context");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "delegateCaller");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 5, 0);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "callCompletion:service:error:", v7, 0, v23);

    }
  }

}

- (id)accessoryUUIDForIdentifier:(id)a3
{
  void *v3;
  void *v4;

  -[HMHome accessoryWithUniqueIdentifier:](self, "accessoryWithUniqueIdentifier:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)setPreferredPrimary:(id)a3 oneTime:(BOOL)a4 triggerElection:(BOOL)a5 completionHandler:(id)a6
{
  _BOOL8 v6;
  _BOOL8 v7;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  id v24;

  v6 = a5;
  v7 = a4;
  v10 = a6;
  v11 = (void *)MEMORY[0x1E0C99E08];
  v12 = a3;
  objc_msgSend(v11, "dictionary");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setObject:forKeyedSubscript:", v12, CFSTR("preferred.primary.name"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v7);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setObject:forKeyedSubscript:", v14, CFSTR("preferred.primary.one.time"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v6);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setObject:forKeyedSubscript:", v15, CFSTR("preferred.primary.trigger.election"));

  v16 = objc_alloc(MEMORY[0x1E0D285D8]);
  -[HMHome messageTargetUUID](self, "messageTargetUUID");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend(v16, "initWithTarget:", v17);

  objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HM.set.preferred.primary"), v18, v13);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __72__HMHome_setPreferredPrimary_oneTime_triggerElection_completionHandler___block_invoke;
  v23[3] = &unk_1E3AB3A50;
  v24 = v10;
  v20 = v10;
  objc_msgSend(v19, "setResponseHandler:", v23);
  -[HMHome context](self, "context");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "messageDispatcher");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "sendMessage:", v19);

}

- (NSArray)autoSelectedPreferredResidents
{
  os_unfair_lock_s *p_lock;
  NSArray *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_autoSelectedPreferredResidents;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (void)setSupportsResidentSelection:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_supportsResidentSelection = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)setUserSelectedPreferredResident:(id)a3
{
  HMResidentDevice *v4;
  HMResidentDevice *userSelectedPreferredResident;

  v4 = (HMResidentDevice *)a3;
  os_unfair_lock_lock_with_options();
  userSelectedPreferredResident = self->_userSelectedPreferredResident;
  self->_userSelectedPreferredResident = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)setAutoSelectedPreferredResidents:(id)a3
{
  NSArray *v4;
  NSArray *autoSelectedPreferredResidents;

  v4 = (NSArray *)a3;
  os_unfair_lock_lock_with_options();
  autoSelectedPreferredResidents = self->_autoSelectedPreferredResidents;
  self->_autoSelectedPreferredResidents = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)switchBackToREV2FromResidentSelectionWithCompletion:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v18 = v8;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Received command to switch the home back to REV2", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v9 = (void *)MEMORY[0x1E0D285D0];
  -[HMHome messageDestination](v6, "messageDestination");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "messageWithName:destination:payload:", CFSTR("HM.switch.to.rev2"), v10, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __62__HMHome_switchBackToREV2FromResidentSelectionWithCompletion___block_invoke;
  v15[3] = &unk_1E3AB3A50;
  v16 = v4;
  v12 = v4;
  objc_msgSend(v11, "setResponseHandler:", v15);
  -[HMHome context](v6, "context");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "messageDispatcher");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "sendMessage:", v11);

}

- (BOOL)multiUserEnabled
{
  return self->_multiUserEnabled;
}

- (BOOL)soundCheckEnabled
{
  return self->_soundCheckEnabled;
}

- (void)setSoundCheckEnabled:(BOOL)a3
{
  self->_soundCheckEnabled = a3;
}

- (unint64_t)audioAnalysisClassifierOptions
{
  return self->_audioAnalysisClassifierOptions;
}

- (void)setAudioAnalysisClassifierOptions:(unint64_t)a3
{
  self->_audioAnalysisClassifierOptions = a3;
}

- (void)setDidOnboardAudioAnalysis:(BOOL)a3
{
  self->_didOnboardAudioAnalysis = a3;
}

- (unint64_t)siriPhraseOptions
{
  return self->_siriPhraseOptions;
}

- (void)setSiriPhraseOptions:(unint64_t)a3
{
  self->_siriPhraseOptions = a3;
}

- (NSString)threadNetworkID
{
  return self->_threadNetworkID;
}

- (void)setThreadNetworkID:(id)a3
{
  objc_storeStrong((id *)&self->_threadNetworkID, a3);
}

- (NSArray)managedTriggers
{
  return self->_managedTriggers;
}

- (void)setManagedTriggers:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 216);
}

- (void)setAssistantIdentifier:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 224);
}

- (void)setIsUpdatedToROAR:(BOOL)a3
{
  self->_isUpdatedToROAR = a3;
}

- (BOOL)supportsResidentActionSetStateEvaluation
{
  return self->_supportsResidentActionSetStateEvaluation;
}

- (void)setSupportsResidentActionSetStateEvaluation:(BOOL)a3
{
  self->_supportsResidentActionSetStateEvaluation = a3;
}

- (NSNumber)numberOfCameras
{
  return self->_numberOfCameras;
}

- (void)setNumberOfCameras:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 248);
}

- (unint64_t)eventLogDuration
{
  return self->_eventLogDuration;
}

- (void)setEventLogDuration:(unint64_t)a3
{
  self->_eventLogDuration = a3;
}

- (HMHomeHubState)homeHubState
{
  return self->_homeHubState;
}

- (void)setCurrentServiceGroups:(id)a3
{
  objc_storeStrong((id *)&self->_currentServiceGroups, a3);
}

- (void)setCurrentTriggerOwnedActionSets:(id)a3
{
  objc_storeStrong((id *)&self->_currentTriggerOwnedActionSets, a3);
}

- (void)setCurrentResidentDevices:(id)a3
{
  objc_storeStrong((id *)&self->_currentResidentDevices, a3);
}

- (void)setCurrentOutgoingInvitations:(id)a3
{
  objc_storeStrong((id *)&self->_currentOutgoingInvitations, a3);
}

- (BOOL)isOwnerUser
{
  return self->_ownerUser;
}

- (void)setOwnerUser:(BOOL)a3
{
  self->_ownerUser = a3;
}

- (BOOL)isAdminUser
{
  return self->_adminUser;
}

- (void)setAdminUser:(BOOL)a3
{
  self->_adminUser = a3;
}

- (BOOL)notificationEnableRequested
{
  return self->_notificationEnableRequested;
}

- (BOOL)notificationEnableRequestedForAppleMediaAccessories
{
  return self->_notificationEnableRequestedForAppleMediaAccessories;
}

- (void)setShareWithHomeOwnerOperationQueue:(id)a3
{
  objc_storeStrong((id *)&self->_shareWithHomeOwnerOperationQueue, a3);
}

- (void)setCurrentAccessoryProtectionGroups:(id)a3
{
  objc_storeStrong((id *)&self->_currentAccessoryProtectionGroups, a3);
}

- (void)setLocationServicesEnabled:(BOOL)a3
{
  self->_locationServicesEnabled = a3;
}

- (BOOL)didOnboardLocationServices
{
  return self->_didOnboardLocationServices;
}

- (void)setDidOnboardLocationServices:(BOOL)a3
{
  self->_didOnboardLocationServices = a3;
}

- (void)setCurrentUsers:(id)a3
{
  objc_storeStrong((id *)&self->_currentUsers, a3);
}

- (HMRoom)roomForEntireHome
{
  return self->_roomForEntireHome;
}

- (NSNumber)matterFabricID
{
  return self->_matterFabricID;
}

- (NSMutableDictionary)hmModernMessagingRequestHandlersByMessageName
{
  return self->_hmModernMessagingRequestHandlersByMessageName;
}

- (void)setHmModernMessagingRequestHandlersByMessageName:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 448);
}

- (NSMutableDictionary)hmModernMessagingOptionsByMessageName
{
  return self->_hmModernMessagingOptionsByMessageName;
}

- (void)setHmModernMessagingOptionsByMessageName:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 456);
}

- (HMFVersion)supportedSiriEndPointVersion
{
  return (HMFVersion *)objc_getProperty(self, a2, 464, 1);
}

- (void)setSupportedSiriEndPointVersion:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 464);
}

- (HMAccessCodeManager)accessCodeManager
{
  return self->_accessCodeManager;
}

- (void)setAccessCodeManager:(id)a3
{
  objc_storeStrong((id *)&self->_accessCodeManager, a3);
}

- (BOOL)isFeatureHomeTheaterQFAEnabled
{
  return self->_isFeatureHomeTheaterQFAEnabled;
}

- (void)setIsFeatureHomeTheaterQFAEnabled:(BOOL)a3
{
  self->_isFeatureHomeTheaterQFAEnabled = a3;
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_accessCodeManager, 0);
  objc_storeStrong((id *)&self->_supportedSiriEndPointVersion, 0);
  objc_storeStrong((id *)&self->_hmModernMessagingOptionsByMessageName, 0);
  objc_storeStrong((id *)&self->_hmModernMessagingRequestHandlersByMessageName, 0);
  objc_storeStrong((id *)&self->_matterFabricID, 0);
  objc_storeStrong((id *)&self->_currentAccessories, 0);
  objc_storeStrong((id *)&self->_currentRooms, 0);
  objc_storeStrong((id *)&self->_currentTriggers, 0);
  objc_storeStrong((id *)&self->_currentActionSets, 0);
  objc_storeStrong((id *)&self->_roomForEntireHome, 0);
  objc_storeStrong((id *)&self->_uuid, 0);
  objc_destroyWeak((id *)&self->_homeManager);
  objc_storeStrong((id *)&self->_context, 0);
  objc_storeStrong((id *)&self->_currentUsers, 0);
  objc_storeStrong((id *)&self->_mediaSystemStageManager, 0);
  objc_storeStrong((id *)&self->_currentAccessoryProtectionGroups, 0);
  objc_storeStrong((id *)&self->_shareWithHomeOwnerOperationQueue, 0);
  objc_storeStrong((id *)&self->_currentOutgoingInvitations, 0);
  objc_storeStrong((id *)&self->_currentResidentDevices, 0);
  objc_storeStrong((id *)&self->_currentTriggerOwnedActionSets, 0);
  objc_storeStrong((id *)&self->_currentServiceGroups, 0);
  objc_storeStrong((id *)&self->_currentZones, 0);
  objc_storeStrong(&self->_accessoryInfoFetch, 0);
  objc_storeStrong((id *)&self->_autoSelectedPreferredResidents, 0);
  objc_storeStrong((id *)&self->_userSelectedPreferredResident, 0);
  objc_storeStrong((id *)&self->_numberOfCameras, 0);
  objc_storeStrong((id *)&self->_timeZone, 0);
  objc_storeStrong((id *)&self->_softwareUpdateController, 0);
  objc_storeStrong((id *)&self->_assistantIdentifier, 0);
  objc_storeStrong((id *)&self->_managedTriggers, 0);
  objc_storeStrong((id *)&self->_threadNetworkID, 0);
  objc_storeStrong((id *)&self->_personSettingsManager, 0);
  objc_storeStrong((id *)&self->_personManagerSettings, 0);
  objc_storeStrong((id *)&self->_personManager, 0);
  objc_storeStrong((id *)&self->_supportedFeatures, 0);
  objc_storeStrong((id *)&self->_notificationsUpdatedTime, 0);
  objc_storeStrong((id *)&self->_applicationData, 0);
  objc_storeStrong((id *)&self->_currentUser, 0);
  objc_storeStrong((id *)&self->_name, 0);
  objc_storeStrong((id *)&self->_homeLocation, 0);
  objc_destroyWeak((id *)&self->_delegate);
  objc_storeStrong((id *)&self->_uniqueIdentifier, 0);
  objc_storeStrong((id *)&self->_mediaPassword, 0);
}

uint64_t __62__HMHome_switchBackToREV2FromResidentSelectionWithCompletion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __72__HMHome_setPreferredPrimary_oneTime_triggerElection_completionHandler___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __59__HMHome_fetchLastModifiedServiceOfType_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  const char *v25;
  NSObject *v26;
  uint32_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  uint64_t v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  id v45;
  __int16 v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (!v6)
    {
      v17 = (void *)MEMORY[0x1A1AC1AAC]();
      v18 = WeakRetained;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v43 = v20;
        v44 = 2112;
        v45 = v5;
        _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch last modified service with error: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v17);
      v11 = 0;
      goto LABEL_22;
    }
    objc_msgSend(v6, "hmf_UUIDForKey:", CFSTR("kAccessoryUUID"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "hmf_numberForKey:", CFSTR("kServiceInstanceID"));
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)v9;
    v11 = 0;
    if (!v8 || !v9)
    {
LABEL_19:
      v30 = (void *)MEMORY[0x1A1AC1AAC]();
      v31 = WeakRetained;
      HMFGetOSLogHandle();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v40 = v10;
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "name");
        v41 = v6;
        v34 = a1;
        v35 = v5;
        v36 = v8;
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v43 = v33;
        v44 = 2112;
        v45 = v37;
        v46 = 2112;
        v47 = v11;
        _os_log_impl(&dword_19B1B0000, v32, OS_LOG_TYPE_INFO, "%{public}@Fetched last modified service: %@ %@", buf, 0x20u);

        v8 = v36;
        v5 = v35;
        a1 = v34;
        v6 = v41;

        v10 = v40;
      }

      objc_autoreleasePoolPop(v30);
LABEL_22:
      objc_msgSend(WeakRetained, "context");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "delegateCaller");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "callCompletion:service:error:", *(_QWORD *)(a1 + 32), v11, v5);

      goto LABEL_23;
    }
    objc_msgSend(WeakRetained, "accessoryWithUUID:", v8);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (v12)
    {
      objc_msgSend(v12, "_findService:", v10);
      v14 = objc_claimAutoreleasedReturnValue();
      if (v14)
      {
        v11 = (void *)v14;
LABEL_18:

        goto LABEL_19;
      }
      v21 = (void *)MEMORY[0x1A1AC1AAC]();
      v28 = WeakRetained;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v43 = v24;
        v44 = 2112;
        v45 = v10;
        v46 = 2112;
        v47 = v13;
        v25 = "%{public}@Failed to get service with instance ID: %@ for accessory: %@";
        v26 = v23;
        v27 = 32;
        goto LABEL_16;
      }
    }
    else
    {
      v21 = (void *)MEMORY[0x1A1AC1AAC]();
      v22 = WeakRetained;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v43 = v24;
        v44 = 2112;
        v45 = v8;
        v25 = "%{public}@Failed to get accessory with uuid: %@";
        v26 = v23;
        v27 = 22;
LABEL_16:
        _os_log_impl(&dword_19B1B0000, v26, OS_LOG_TYPE_ERROR, v25, buf, v27);

      }
    }

    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 2, 0);
    v29 = objc_claimAutoreleasedReturnValue();

    v11 = 0;
    v5 = (id)v29;
    goto LABEL_18;
  }
  v15 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 23);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v15 + 16))(v15, 0, v16);

LABEL_23:
}

uint64_t __58__HMHome_mediaDestinationsWithHomeTheaterSupportedOptions__block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "audioDestination");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "containsHomeTheaterSupportedOptions");

  return v3;
}

uint64_t __58__HMHome_mediaDestinationsWithHomeTheaterSupportedOptions__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "audioDestination");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "containsHomeTheaterSupportedOptions");

  return v3;
}

uint64_t __48__HMHome_mediaDestinationsWithSupportedOptions___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "audioDestination");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "containsSupportedOptions:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __48__HMHome_mediaDestinationsWithSupportedOptions___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "audioDestination");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "containsSupportedOptions:", *(_QWORD *)(a1 + 32));

  return v4;
}

void __98__HMHome_updateApplicationData_forAppDataContainer_appDataContainerUUIDKeyName_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;

  v3 = (id *)(a1 + 56);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v8 = WeakRetained;
  if (!v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "setApplicationData:", *(_QWORD *)(a1 + 40));
    WeakRetained = v8;
  }
  objc_msgSend(WeakRetained, "context");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "delegateCaller");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "callCompletion:error:", *(_QWORD *)(a1 + 48), v4);

}

void __98__HMHome_updateApplicationData_forAppDataContainer_appDataContainerUUIDKeyName_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  objc_msgSend(*(id *)(a1 + 32), "removeCompletionBlockForIdentifier:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void __24__HMHome_initWithCoder___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  void *v11;
  HMAccessory *v12;
  HMDevice *v13;
  void *v14;
  HMDevice *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  id v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "IDSIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "IDSDestination");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "deviceIRKData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
  if (v4 && v6)
  {
    if (v10)
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138544130;
      v23 = v11;
      v24 = 2112;
      v25 = v3;
      v26 = 2112;
      v27 = v4;
      v28 = 2112;
      v29 = v6;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Creating dummy accessory for resident: %@, with IDSIdentifier: %@, deviceIRKData: %@", (uint8_t *)&v22, 0x2Au);

    }
    objc_autoreleasePoolPop(v7);
    v12 = -[HMAccessory initWithUUID:]([HMAccessory alloc], "initWithUUID:", v4);
    -[HMAccessory setDeviceIRKData:](v12, "setDeviceIRKData:", v6);
    v13 = [HMDevice alloc];
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[HMDevice initWithUUID:name:isCurrentDevice:](v13, "initWithUUID:name:isCurrentDevice:", v14, CFSTR("Dummy Device"), 0);
    -[HMAccessory setDevice:](v12, "setDevice:", v15);

    v16 = objc_alloc(MEMORY[0x1E0D285B0]);
    v17 = (void *)objc_msgSend(v16, "initWithType:size:data:", *MEMORY[0x1E0D27FF0], *MEMORY[0x1E0D27FE8], v6);
    -[HMAccessory device](v12, "device");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setRapportIRK:", v17);

    -[HMAccessory device](v12, "device");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setIdsIdentifier:", v4);

    -[HMAccessory device](v12, "device");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setIdsDestination:", v5);

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 432), "addObject:", v12);
  }
  else
  {
    if (v10)
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138544130;
      v23 = v21;
      v24 = 2112;
      v25 = v3;
      v26 = 2112;
      v27 = v4;
      v28 = 2112;
      v29 = v6;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Not creating dummy accessory for resident with missing data. Resident: %@, IDSIdentifier: %@, deviceIRKData: %@", (uint8_t *)&v22, 0x2Au);

    }
    objc_autoreleasePoolPop(v7);
  }

}

uint64_t __63__HMHome__notifyDelegateOfBulletinNotificationsSupportedUpdate__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateAreBulletinNotificationsSupported:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "areBulletinNotificationsSupported"));
}

uint64_t __52__HMHome__notifyDelegateOfUpdatedHomeLocationStatus__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidUpdateHomeLocationStatus:", *(_QWORD *)(a1 + 40));
}

uint64_t __45__HMHome__notifyDelegateOfHomeHubStateUpdate__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateHomeHubState:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "homeHubState"));
}

uint64_t __42__HMHome__notifyDelegateOfTriggerUpdated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateTrigger:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __42__HMHome__notifyDelegateOfTriggerRemoved___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Calling didRemoveTrigger with trigger: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didRemoveTrigger:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t __40__HMHome__notifyDelegateOfTriggerAdded___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Calling didAddTrigger with trigger: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didAddTrigger:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t __60__HMHome__notifyDelegateOfAccesoryInvitationsUpdateForUser___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateAccesoryInvitationsForUser:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __59__HMHome_notifyDelegateOfAccesoryInvitationsUpdateForUser___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfAccesoryInvitationsUpdateForUser:", *(_QWORD *)(a1 + 40));
}

uint64_t __54__HMHome__notifyDelegateOfAccessControlUpdateForUser___block_invoke(id *a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = a1[4];
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "homeAccessControl");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Notifying client for didUpdateAccessControlForUser : %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(a1[6], "home:didUpdateAccessControlForUser:", a1[4], a1[5]);
}

uint64_t __54__HMHome__notifyDelegateOfAccessControlUpdateForUser___block_invoke_831(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidUpdateAccessControlForCurrentUser:", *(_QWORD *)(a1 + 40));
}

uint64_t __53__HMHome_notifyDelegateOfAccessControlUpdateForUser___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfAccessControlUpdateForUser:", *(_QWORD *)(a1 + 40));
}

void __40__HMHome__notifyDelegateOfAppDataUpdate__block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_privateDelegate");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "homeDidUpdateApplicationData:", *(_QWORD *)(a1 + 32));

}

uint64_t __53__HMHome__notifyDelegateOfAppDataUpdateForActionSet___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateApplicationDataForActionSet:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __52__HMHome_notifyDelegateOfAppDataUpdateForActionSet___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfAppDataUpdateForActionSet:", *(_QWORD *)(a1 + 40));
}

uint64_t __56__HMHome__notifyDelegateOfAppDataUpdateForServiceGroup___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateApplicationDataForServiceGroup:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __55__HMHome_notifyDelegateOfAppDataUpdateForServiceGroup___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfAppDataUpdateForServiceGroup:", *(_QWORD *)(a1 + 40));
}

uint64_t __48__HMHome__notifyDelegateOfAppDataUpdateForRoom___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateApplicationDataForRoom:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __47__HMHome_notifyDelegateOfAppDataUpdateForRoom___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfAppDataUpdateForRoom:", *(_QWORD *)(a1 + 40));
}

id __50__HMHome__handleAccessorySetupCodeFailureMessage___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("HMSetupCodeProviderReasonBadPassword")))
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmPrivateErrorWithCode:", 2002);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("HMSetupCodeProviderReasontTimeoutRetry")))v3 = 8;
    else
      v3 = 48;
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", v3);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

uint64_t __38__HMHome__handleNotificationsEnabled___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didEnableNotifications:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void __52__HMHome_updateResidentSelectionVersion_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __52__HMHome_updateResidentSelectionVersion_completion___block_invoke_2;
    v5[3] = &unk_1E3AB60A0;
    v7 = *(id *)(a1 + 40);
    v6 = v3;
    objc_msgSend(v4, "invokeBlock:", v5);

  }
}

uint64_t __52__HMHome_updateResidentSelectionVersion_completion___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __40__HMHome_confirmResidentWithCompletion___block_invoke(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, void *);
  void *v9;
  id v10;
  id v11;

  v2 = (void *)MEMORY[0x1E0D285F8];
  objc_msgSend(a1[4], "messageDestination");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messageWithName:qualityOfService:destination:payload:", CFSTR("HMRM.confirm"), 25, v3, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = MEMORY[0x1E0C809B0];
  v7 = 3221225472;
  v8 = __40__HMHome_confirmResidentWithCompletion___block_invoke_2;
  v9 = &unk_1E3AB59B8;
  v11 = a1[6];
  v10 = a1[5];
  objc_msgSend(v4, "setResponseHandler:", &v6);
  objc_msgSend(a1[5], "messageDispatcher", v6, v7, v8, v9);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "sendMessage:completionHandler:", v4, 0);

}

void __40__HMHome_confirmResidentWithCompletion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __40__HMHome_confirmResidentWithCompletion___block_invoke_3;
    v5[3] = &unk_1E3AB60A0;
    v7 = *(id *)(a1 + 40);
    v6 = v3;
    objc_msgSend(v4, "invokeBlock:", v5);

  }
}

uint64_t __40__HMHome_confirmResidentWithCompletion___block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __67__HMHome__enableNotification_forCharacteristics_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = a2;
    objc_msgSend(v3, "removeCompletionBlockForIdentifier:", v4);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "delegateCaller");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "callCompletion:error:", v7, v5);

  }
}

uint64_t __66__HMHome_enableNotification_forCharacteristics_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_enableNotification:forCharacteristics:completionHandler:", *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __31__HMHome_reEnableNotifications__block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  void *v16;
  uint64_t v17;
  id obj;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v17 = a1;
  objc_msgSend(*(id *)(a1 + 32), "accessories");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v36, 16);
  if (v20)
  {
    v19 = *(_QWORD *)v31;
    do
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v31 != v19)
          objc_enumerationMutation(obj);
        v21 = v3;
        v4 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * v3);
        v26 = 0u;
        v27 = 0u;
        v28 = 0u;
        v29 = 0u;
        objc_msgSend(v4, "services");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v35, 16);
        if (v6)
        {
          v7 = v6;
          v8 = *(_QWORD *)v27;
          do
          {
            for (i = 0; i != v7; ++i)
            {
              if (*(_QWORD *)v27 != v8)
                objc_enumerationMutation(v5);
              v10 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
              v22 = 0u;
              v23 = 0u;
              v24 = 0u;
              v25 = 0u;
              objc_msgSend(v10, "characteristics");
              v11 = (void *)objc_claimAutoreleasedReturnValue();
              v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v22, v34, 16);
              if (v12)
              {
                v13 = v12;
                v14 = *(_QWORD *)v23;
                do
                {
                  for (j = 0; j != v13; ++j)
                  {
                    if (*(_QWORD *)v23 != v14)
                      objc_enumerationMutation(v11);
                    v16 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * j);
                    if (objc_msgSend(v16, "notificationEnabledByThisClient"))
                      objc_msgSend(v2, "addObject:", v16);
                  }
                  v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v22, v34, 16);
                }
                while (v13);
              }

            }
            v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v35, 16);
          }
          while (v7);
        }

        v3 = v21 + 1;
      }
      while (v21 + 1 != v20);
      v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v36, 16);
    }
    while (v20);
  }

  objc_msgSend(*(id *)(v17 + 32), "_enableNotification:forCharacteristics:completionHandler:", 1, v2, 0);
  if (objc_msgSend(*(id *)(v17 + 32), "notificationEnableRequested"))
    objc_msgSend(*(id *)(v17 + 32), "_enableNotifications:includeAppleMediaAccessoryNotifications:completionHandler:", 1, objc_msgSend(*(id *)(v17 + 32), "notificationEnableRequestedForAppleMediaAccessories"), 0);

}

uint64_t __48__HMHome_enableNotifications_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_enableNotifications:includeAppleMediaAccessoryNotifications:completionHandler:", *(unsigned __int8 *)(a1 + 48), 1, *(_QWORD *)(a1 + 40));
}

void __62__HMHome__updateInvitation_invitationState_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "delegateCaller");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 40), v4);

}

void __58__HMHome__handleLocationAuthorizationUpdatedNotification___block_invoke(uint64_t a1)
{
  int v2;
  uint64_t v3;
  void *v4;

  v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(_BYTE *)(a1 + 40))
    v3 = 1;
  else
    v3 = 2;
  if (objc_msgSend(*(id *)(a1 + 32), "locationAuthorization") != v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setLocationAuthorization:", v3);
    if (v2)
    {
      objc_msgSend(*(id *)(a1 + 32), "homeLocation");
      v4 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v4)
        objc_msgSend(*(id *)(a1 + 32), "_retrieveLocation");
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "__updateLocation:locationStatus:", 0, objc_msgSend(*(id *)(a1 + 32), "homeLocationStatus"));
    }
  }
}

uint64_t __42__HMHome___updateLocation_locationStatus___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateLocation:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __83__HMHome_updateAccessForUser_audioAnalysisUserDropinAccessLevel_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x1A1AC1AAC]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v10;
      v17 = 2112;
      v18 = v5;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to update audio analysis drop in access with error: %@", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = v5;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "__updateHomeAccessControlFromResponsePayload:forUser:", v6, *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = 0;
  }
  objc_msgSend(v11, "callCompletion:error:", v13, v14);

}

void __63__HMHome_updateAccessForUser_announceAccess_completionHandler___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;

  v9 = a2;
  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 56);
    v8 = v9;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "__updateHomeAccessControlFromResponsePayload:forUser:", a3, *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 56);
    v8 = 0;
  }
  objc_msgSend(v5, "callCompletion:error:", v7, v8);

}

void __67__HMHome_updateAccessForUser_camerasAccessLevel_completionHandler___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;

  v9 = a2;
  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 56);
    v8 = v9;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "__updateHomeAccessControlFromResponsePayload:forUser:", a3, *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 56);
    v8 = 0;
  }
  objc_msgSend(v5, "callCompletion:error:", v7, v8);

}

void __70__HMHome_updateForUser_presenceAuthorizationStatus_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  if (v12)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "callCompletion:error:", *(_QWORD *)(a1 + 56), v12);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_findUserWithID:", *(_QWORD *)(a1 + 48));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("kUserPresenceAuthorizationStatusKey"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMUserPresenceAuthorization authWithNumber:](HMUserPresenceAuthorization, "authWithNumber:", v7);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v8;
    if (v6 && v8)
    {
      objc_msgSend(v6, "homeAccessControl");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setPresenceAuthStatus:", v9);

    }
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "callCompletion:error:", *(_QWORD *)(a1 + 56), 0);

  }
}

void __61__HMHome_updateAccessForUser_remoteAccess_completionHandler___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;

  v9 = a2;
  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 56);
    v8 = v9;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "__updateHomeAccessControlFromResponsePayload:forUser:", a3, *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 56);
    v8 = 0;
  }
  objc_msgSend(v5, "callCompletion:error:", v7, v8);

}

void __62__HMHome_updateAccessForUser_administrator_completionHandler___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;

  v9 = a2;
  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 56);
    v8 = v9;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "__updateHomeAccessControlFromResponsePayload:forUser:", a3, *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 56);
    v8 = 0;
  }
  objc_msgSend(v5, "callCompletion:error:", v7, v8);

}

uint64_t __44__HMHome__handleAccessoryErrorNotification___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didEncounterError:forAccessory:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

uint64_t __39__HMHome__handleUserAddedNotification___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Calling didAddUser on notification : %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didAddUser:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t __52__HMHome__handleUserInvitationsUpdatedNotification___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateStateForOutgoingInvitations:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __41__HMHome__notifyUpdatedSupportedFeatures__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidUpdateSupportedFeatures:", *(_QWORD *)(a1 + 40));
}

uint64_t __52__HMHome__handleAccessoryReprovisionedNotification___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateReprovisionStateForAccessory:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __50__HMHome__reprovisionAccessory_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  if (v3)
  {
    v7 = v3;
    objc_msgSend(*(id *)(a1 + 32), "removeCompletionBlockForIdentifier:", *(_QWORD *)(a1 + 40));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      objc_msgSend(*(id *)(a1 + 48), "context");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "delegateCaller");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "callCompletion:error:", *(_QWORD *)(a1 + 56), v7);

    }
    v3 = v7;
  }

}

uint64_t __49__HMHome_reprovisionAccessory_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_reprovisionAccessory:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __49__HMHome__handleAccessoryReprovisionStateUpdate___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateReprovisionStateForAccessory:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __25__HMHome_removeServices___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeServices:", *(_QWORD *)(a1 + 40));
}

uint64_t __45__HMHome__removeResidentDevicesForAccessory___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a2;
  objc_msgSend(v3, "device");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "device");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "isEqual:", v5);

  if ((_DWORD)v6)
    objc_msgSend(v3, "_unconfigure");

  return v6;
}

uint64_t __72__HMHome__callProgressHandler_updatingAccessoryDescription_fromMessage___block_invoke(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[5] + 16))(a1[5], a1[4], a1[6]);
}

uint64_t __44__HMHome__handleAccessoryAddedNotification___block_invoke_801(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v9 = 138544130;
    v10 = v5;
    v11 = 2112;
    v12 = v6;
    v13 = 2112;
    v14 = v7;
    v15 = 2048;
    v16 = v7;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to dispatch didAddAccessory on client queue: %@, home: %@, %p", (uint8_t *)&v9, 0x2Au);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didAddAccessory:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __44__HMHome__handleAccessoryAddedNotification___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (objc_msgSend(v2, "code") != 2)
  {
    v3 = (void *)MEMORY[0x1A1AC1AAC]();
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = 138543618;
      v7 = v5;
      v8 = 2112;
      v9 = v2;
      _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Cleanup adding accessory completed with error: %@", (uint8_t *)&v6, 0x16u);

    }
    objc_autoreleasePoolPop(v3);
  }

}

void __67__HMHome__addEventTriggerFromResponse_withEventTrigger_completion___block_invoke(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __67__HMHome__addEventTriggerFromResponse_withEventTrigger_completion___block_invoke_2(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __67__HMHome__addEventTriggerFromResponse_withEventTrigger_completion___block_invoke_795(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "delegateCaller");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "callCompletion:error:", *(_QWORD *)(a1 + 40), 0);

}

void __56__HMHome_notifyDelegatesOfExecutionForActionSet_atDate___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;

  objc_msgSend(*(id *)(a1 + 32), "_privateDelegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_QWORD *)(a1 + 40) && (objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "context");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "delegateCaller");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __56__HMHome_notifyDelegatesOfExecutionForActionSet_atDate___block_invoke_2;
    v8[3] = &unk_1E3AB5CD0;
    v5 = v2;
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(a1 + 40);
    v9 = v5;
    v10 = v6;
    v11 = v7;
    objc_msgSend(v4, "invokeBlock:", v8);

  }
}

uint64_t __56__HMHome_notifyDelegatesOfExecutionForActionSet_atDate___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateLastExecutionDateForActionSet:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __62__HMHome__handleActionSetRemovedFromResponse_responsePayload___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didRemoveActionSet:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __47__HMHome__addActionSetFromResponse_completion___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didAddActionSet:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __46__HMHome__notifySetupFailedIfInHomeUIService___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didFailAccessorySetupWithError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __44__HMHome__handleHMMMRequestReceivedMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(a1 + 40);
    v13 = 138543618;
    v14 = v10;
    v15 = 2112;
    v16 = v11;
    _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Response received from HMMM request handler with message name: %@", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v5, CFSTR("HMMM.payload.key.payload"));
  }
  else
  {
    v12 = 0;
  }
  objc_msgSend(*(id *)(a1 + 48), "respondWithPayload:error:", v12, v6);

}

uint64_t __43__HMHome__handleDidRemoveWalletKeyMessage___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidRemoveWalletKey:", *(_QWORD *)(a1 + 40));
}

uint64_t __40__HMHome__handleDidAddWalletKeyMessage___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidAddWalletKey:", *(_QWORD *)(a1 + 40));
}

void __45__HMHome_clearEventLogWithCompletionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x1A1AC1AAC]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543618;
      v13 = v10;
      v14 = 2114;
      v15 = v5;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Request to update activity history onboarded failed: %{public}@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }
  objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "callCompletion:error:", *(_QWORD *)(a1 + 48), v5);

}

void __51__HMHome_updateEventLogDuration_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v11;
      v20 = 2114;
      v21 = v5;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Request to update activity history duration failed: %{public}@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    v14 = *(_QWORD *)(a1 + 48);
    v15 = v5;
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = *(void **)(a1 + 56);
      v18 = 138543618;
      v19 = v16;
      v20 = 2048;
      v21 = v17;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@After updating duration, setting duration to %lu", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 32), "setEventLogDuration:", *(_QWORD *)(a1 + 56));
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    v14 = *(_QWORD *)(a1 + 48);
    v15 = 0;
  }
  objc_msgSend(v12, "callCompletion:error:", v14, v15);

}

void __41__HMHome__callDelegateDidOnboardEventLog__block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __41__HMHome__callDelegateDidOnboardEventLog__block_invoke_2;
  v5[3] = &unk_1E3AB5ED8;
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v2, "invokeBlock:", v5);

}

uint64_t __41__HMHome__callDelegateDidOnboardEventLog__block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidUpdateOnboardedEventLog:", *(_QWORD *)(a1 + 40));
}

void __47__HMHome__callDelegateDidUpdateEventLogEnabled__block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __47__HMHome__callDelegateDidUpdateEventLogEnabled__block_invoke_2;
  v5[3] = &unk_1E3AB5ED8;
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v2, "invokeBlock:", v5);

}

uint64_t __47__HMHome__callDelegateDidUpdateEventLogEnabled__block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateEventLogEnabled:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "isEventLogEnabled"));
}

- (void)_updateDidOnboardEventLog:(void *)a3 completion:
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  id v29;
  _QWORD aBlock[5];
  id v31;
  id v32;
  char v33;
  const __CFString *v34;
  void *v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (a1)
  {
    objc_msgSend(a1, "context");
    v6 = objc_claimAutoreleasedReturnValue();
    if (!v5)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome _updateDidOnboardEventLog:completion:]", CFSTR("completion"));
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = (void *)MEMORY[0x1A1AC1AAC]();
      v26 = a1;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v37 = v28;
        v38 = 2112;
        v39 = (const char *)v24;
        _os_log_impl(&dword_19B1B0000, v27, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v25);
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v24, 0);
      v29 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v29);
    }
    v7 = (void *)v6;
    if (v6)
    {
      objc_msgSend(a1, "homeManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "isDaemonRunningWithROARFramework");

      if ((v9 & 1) != 0)
      {
        v34 = CFSTR("HM.EL.onboarded");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = v10;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3221225472;
        aBlock[2] = __47__HMHome__updateDidOnboardEventLog_completion___block_invoke;
        aBlock[3] = &unk_1E3AB3E78;
        aBlock[4] = a1;
        v12 = v7;
        v31 = v12;
        v32 = v5;
        v33 = a2;
        v13 = _Block_copy(aBlock);
        objc_msgSend(a1, "uuid");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        -[_HMContext sendMessage:target:payload:responseHandler:](v12, CFSTR("HM.EL.setOnboarded"), v14, v11, v13);

      }
      else
      {
        v19 = (void *)MEMORY[0x1A1AC1AAC]();
        v20 = a1;
        HMFGetOSLogHandle();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v37 = v22;
          _os_log_impl(&dword_19B1B0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Activity history is only supported in HH2 mode", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v19);
        objc_msgSend(v7, "delegateCaller");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "callCompletion:error:", v5, v23);

      }
    }
    else
    {
      v15 = (void *)MEMORY[0x1A1AC1AAC]();
      v16 = a1;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v37 = v18;
        v38 = 2080;
        v39 = "-[HMHome _updateDidOnboardEventLog:completion:]";
        _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void *))v5 + 2))(v5, v11);
    }

  }
}

void __47__HMHome__updateDidOnboardEventLog_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v11;
      v25 = 2114;
      v26 = v5;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Request to update activity history onboarded failed: %{public}@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "callCompletion:error:", *(_QWORD *)(a1 + 48), v5);
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v13;
      v25 = 2114;
      v26 = v14;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@After updating didOnboardEventLog, updating didOnboardEventLog to %{public}@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 32), "setDidOnboardEventLog:", *(unsigned __int8 *)(a1 + 56));
    objc_msgSend(v6, "hmf_numberForKey:", CFSTR("HM.EL.enabled"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v15;
    if (v15)
    {
      v16 = objc_msgSend(v15, "BOOLValue");
      if ((_DWORD)v16 != objc_msgSend(*(id *)(a1 + 32), "isEventLogEnabled"))
      {
        v17 = (void *)MEMORY[0x1A1AC1AAC]();
        v18 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          HMFBooleanToString();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = 138543618;
          v24 = v20;
          v25 = 2114;
          v26 = v21;
          _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_INFO, "%{public}@After updating didOnboardEventLog, updating isEventLogEnabled to %{public}@", (uint8_t *)&v23, 0x16u);

        }
        objc_autoreleasePoolPop(v17);
        objc_msgSend(*(id *)(a1 + 32), "setEventLogEnabled:", v16);
        objc_msgSend(*(id *)(a1 + 32), "_callDelegateDidUpdateEventLogEnabled");
      }
    }
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "callCompletion:error:", *(_QWORD *)(a1 + 48), 0);

  }
}

void __50__HMHome_updateEventLogEnabled_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x1A1AC1AAC]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138543618;
      v25 = v10;
      v26 = 2114;
      v27 = v5;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Request to update activity history failed: %{public}@", (uint8_t *)&v24, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    v13 = *(_QWORD *)(a1 + 48);
    v14 = v5;
  }
  else
  {
    if (*(_BYTE *)(a1 + 56) && (objc_msgSend(*(id *)(a1 + 32), "didOnboardEventLog") & 1) == 0)
    {
      v15 = (void *)MEMORY[0x1A1AC1AAC]();
      v16 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = 138543362;
        v25 = v18;
        _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_INFO, "%{public}@After updating isEventlogEnabled, updating idOnboardEventLog to YES", (uint8_t *)&v24, 0xCu);

      }
      objc_autoreleasePoolPop(v15);
      objc_msgSend(*(id *)(a1 + 32), "setDidOnboardEventLog:", 1);
      objc_msgSend(*(id *)(a1 + 32), "_callDelegateDidOnboardEventLog");
    }
    v19 = (void *)MEMORY[0x1A1AC1AAC]();
    v20 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138543618;
      v25 = v22;
      v26 = 2114;
      v27 = v23;
      _os_log_impl(&dword_19B1B0000, v21, OS_LOG_TYPE_INFO, "%{public}@After updating isEventlogEnabled, updating isEventLogEnabled to %{public}@", (uint8_t *)&v24, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(*(id *)(a1 + 32), "setEventLogEnabled:", *(unsigned __int8 *)(a1 + 56));
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    v13 = *(_QWORD *)(a1 + 48);
    v14 = 0;
  }
  objc_msgSend(v11, "callCompletion:error:", v13, v14);

}

void __54__HMHome_updateDidOnboardLocationServices_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v11;
      v19 = 2112;
      v20 = v5;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Update did onboard location services request responded with error: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    v14 = *(_QWORD *)(a1 + 48);
    v15 = v5;
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v16;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Update did onboard location services request responded", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    v14 = *(_QWORD *)(a1 + 48);
    v15 = 0;
  }
  objc_msgSend(v12, "callCompletion:error:", v14, v15);

}

void __51__HMHome_updateLocationServicesEnabled_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v11;
      v19 = 2112;
      v20 = v5;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Update location services enabled request responded with error: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    v14 = *(_QWORD *)(a1 + 48);
    v15 = v5;
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v16;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Update location services enabled request responded", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    v14 = *(_QWORD *)(a1 + 48);
    v15 = 0;
  }
  objc_msgSend(v12, "callCompletion:error:", v14, v15);

}

void __45__HMHome_updateSiriPhraseOptions_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v11;
      v19 = 2112;
      v20 = v5;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Siri phrase options update request responded with error: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    v14 = *(_QWORD *)(a1 + 48);
    v15 = v5;
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v16;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Siri phrase options update request responded", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 32), "setSiriPhraseOptions:", *(_QWORD *)(a1 + 56));
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    v14 = *(_QWORD *)(a1 + 48);
    v15 = 0;
  }
  objc_msgSend(v12, "callCompletion:error:", v14, v15);

}

void __51__HMHome_updateDidOnboardAudioAnalysis_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x1A1AC1AAC]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v10;
      v17 = 2112;
      v18 = v5;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_ERROR, "%{public}@AudioAnalysis home onboarding key request responded with error: %@", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    v13 = *(_QWORD *)(a1 + 48);
    v14 = v5;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setDidOnboardAudioAnalysis:", *(unsigned __int8 *)(a1 + 56));
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    v13 = *(_QWORD *)(a1 + 48);
    v14 = 0;
  }
  objc_msgSend(v11, "callCompletion:error:", v13, v14);

}

void __58__HMHome_updateAudioAnalysisClassifierOptions_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x1A1AC1AAC]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v10;
      v17 = 2112;
      v18 = v5;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_ERROR, "%{public}@AudioAnalysis classifier option update request responded with error: %@", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    v13 = *(_QWORD *)(a1 + 48);
    v14 = v5;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setAudioAnalysisClassifierOptions:", *(_QWORD *)(a1 + 56));
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    v13 = *(_QWORD *)(a1 + 48);
    v14 = 0;
  }
  objc_msgSend(v11, "callCompletion:error:", v13, v14);

}

void __45__HMHome_updateSoundCheckEnabled_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x1A1AC1AAC]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v10;
      v22 = 2112;
      v23 = v5;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_ERROR, "%{public}@SoundCheck request responded with error: %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    v13 = *(_QWORD *)(a1 + 48);
    v14 = v5;
  }
  else
  {
    v15 = (void *)MEMORY[0x1A1AC1AAC](objc_msgSend(*(id *)(a1 + 32), "setSoundCheckEnabled:", *(unsigned __int8 *)(a1 + 56)));
    v16 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "soundCheckEnabled");
      HMFBooleanToString();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v18;
      v22 = 2112;
      v23 = v19;
      _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_INFO, "%{public}@Updated sound check value to %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    v13 = *(_QWORD *)(a1 + 48);
    v14 = 0;
  }
  objc_msgSend(v11, "callCompletion:error:", v13, v14);

}

void __65__HMHome_setDismissedWalletKeyUWBUnlockOnboardingWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;

  v7 = a2;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    v5 = *(_QWORD *)(a1 + 48);
    v6 = v7;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setDismissedWalletKeyUWBUnlockOnboarding:", 1);
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    v5 = *(_QWORD *)(a1 + 48);
    v6 = 0;
  }
  objc_msgSend(v3, "callCompletion:error:", v5, v6);

}

void __82__HMHome_setHasAnyUserAcknowledgedCameraRecordingOnboardingWithCompletionHandler___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;

  v7 = a2;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    v5 = *(_QWORD *)(a1 + 48);
    v6 = v7;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setHasAnyUserAcknowledgedCameraRecordingOnboarding:", 1);
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    v5 = *(_QWORD *)(a1 + 48);
    v6 = 0;
  }
  objc_msgSend(v3, "callCompletion:error:", v5, v6);

}

uint64_t __52__HMHome__handleMultiUserEnabledChangeNotification___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidEnableMultiUser:", *(_QWORD *)(a1 + 40));
}

void __47__HMHome_enableMultiUserWithCompletionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = (void *)MEMORY[0x1A1AC1AAC]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v5)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v12;
      v20 = 2112;
      v21 = v5;
      _os_log_impl(&dword_19B1B0000, v11, OS_LOG_TYPE_ERROR, "%{public}@Enable multi-user request responded with error: %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    v15 = *(_QWORD *)(a1 + 40);
    v16 = v5;
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v17;
      _os_log_impl(&dword_19B1B0000, v11, OS_LOG_TYPE_INFO, "%{public}@Enable multi-user request responded", (uint8_t *)&v18, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    v15 = *(_QWORD *)(a1 + 40);
    v16 = 0;
  }
  objc_msgSend(v13, "callCompletion:error:", v15, v16);

}

void __49__HMHome_startHomeDataSyncWithCompletionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v11;
      v19 = 2112;
      v20 = v5;
      v12 = "%{public}@Start home data sync request completed with error %@";
      v13 = v10;
      v14 = OS_LOG_TYPE_ERROR;
      v15 = 22;
LABEL_6:
      _os_log_impl(&dword_19B1B0000, v13, v14, v12, (uint8_t *)&v17, v15);

    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543362;
    v18 = v11;
    v12 = "%{public}@Start home data sync request completed successfully";
    v13 = v10;
    v14 = OS_LOG_TYPE_INFO;
    v15 = 12;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v7);
  objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "callCompletion:error:", *(_QWORD *)(a1 + 48), v5);

}

void __40__HMHome__updateName_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;

  v10 = a2;
  if (v10)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 48);
    v8 = v10;
  }
  else
  {
    objc_msgSend(a3, "hmf_stringForKey:", CFSTR("kHomeName"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "setName:", v9);

    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 48);
    v8 = 0;
  }
  objc_msgSend(v5, "callCompletion:error:", v7, v8);

}

uint64_t __39__HMHome_updateName_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateName:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __43__HMHome_fetchPresenceForUsers_completion___block_invoke_2(id *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  _QWORD v22[5];
  id v23;
  _QWORD v24[5];
  id v25;
  id v26;

  v5 = a2;
  if (v5)
  {
    objc_msgSend(a1[4], "context");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "delegateCaller");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __43__HMHome_fetchPresenceForUsers_completion___block_invoke_3;
    v24[3] = &unk_1E3AB5C58;
    v24[4] = a1[4];
    v25 = v5;
    v26 = a1[6];
    objc_msgSend(v7, "invokeBlock:", v24);

  }
  else
  {
    objc_msgSend(a3, "hmf_dictionaryForKey:", CFSTR("HMUserPresenceMapKey"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = MEMORY[0x1E0C809B0];
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __43__HMHome_fetchPresenceForUsers_completion___block_invoke_728;
    v22[3] = &unk_1E3AB1498;
    v22[4] = a1[4];
    v11 = v9;
    v23 = v11;
    objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v22);
    objc_msgSend(a1[4], "context");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "delegateCaller");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = v10;
    v17[1] = 3221225472;
    v17[2] = __43__HMHome_fetchPresenceForUsers_completion___block_invoke_730;
    v17[3] = &unk_1E3AB4D20;
    v18 = v8;
    v19 = a1[5];
    v14 = a1[6];
    v20 = v11;
    v21 = v14;
    v15 = v11;
    v16 = v8;
    objc_msgSend(v13, "invokeBlock:", v17);

  }
}

uint64_t __43__HMHome_fetchPresenceForUsers_completion___block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while fetching the presence for users: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void __43__HMHome_fetchPresenceForUsers_completion___block_invoke_728(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  objc_msgSend(*(id *)(a1 + 32), "_getUserWithUUID:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v8, v9);
  }
  else
  {
    v10 = (void *)MEMORY[0x1A1AC1AAC]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v13;
      v16 = 2112;
      v17 = v7;
      _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Unable to find HMUser with UUID: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    *a4 = 1;
  }

}

void __43__HMHome_fetchPresenceForUsers_completion___block_invoke_730(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = objc_msgSend(*(id *)(a1 + 32), "count");
  v3 = objc_msgSend(*(id *)(a1 + 40), "count");
  v4 = *(_QWORD *)(a1 + 56);
  if (v2 == v3)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 16))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), 0);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, id))(v4 + 16))(v4, 0, v5);

  }
}

uint64_t __43__HMHome_fetchPresenceForUsers_completion___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "uuid");
}

void __42__HMHome__mergeAccessoryProtectionGroups___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Removed network protection group via merge: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);

}

void __42__HMHome__mergeAccessoryProtectionGroups___block_invoke_715(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Added network protection group via merge: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(v3, "_configureWithHome:", *(_QWORD *)(a1 + 32));

}

void __42__HMHome__mergeAccessoryProtectionGroups___block_invoke_716(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  id v10;
  _QWORD v11[5];
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v14 = v7;
    v15 = 2112;
    v16 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Calling didRemoveAccessoryNetworkProtectionGroup with network protection group: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "queue");
  v9 = objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __42__HMHome__mergeAccessoryProtectionGroups___block_invoke_717;
  v11[3] = &unk_1E3AB5ED8;
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v3;
  v10 = v3;
  dispatch_async(v9, v11);

}

void __42__HMHome__mergeAccessoryProtectionGroups___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  id v10;
  _QWORD v11[5];
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v14 = v7;
    v15 = 2112;
    v16 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Calling didAddAccessoryNetworkProtectionGroup with network protection group: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "queue");
  v9 = objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __42__HMHome__mergeAccessoryProtectionGroups___block_invoke_718;
  v11[3] = &unk_1E3AB5ED8;
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v3;
  v10 = v3;
  dispatch_async(v9, v11);

}

void __42__HMHome__mergeAccessoryProtectionGroups___block_invoke_2_719(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  id v10;
  _QWORD v11[5];
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v14 = v7;
    v15 = 2112;
    v16 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Calling didUpdateAccessoryNetworkProtectionGroup with network protection group: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "queue");
  v9 = objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __42__HMHome__mergeAccessoryProtectionGroups___block_invoke_720;
  v11[3] = &unk_1E3AB5ED8;
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v3;
  v10 = v3;
  dispatch_async(v9, v11);

}

uint64_t __42__HMHome__mergeAccessoryProtectionGroups___block_invoke_720(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_didUpdateAccessoryNetworkProtectionGroup:", *(_QWORD *)(a1 + 40));
}

uint64_t __42__HMHome__mergeAccessoryProtectionGroups___block_invoke_718(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_didAddAccessoryNetworkProtectionGroup:", *(_QWORD *)(a1 + 40));
}

uint64_t __42__HMHome__mergeAccessoryProtectionGroups___block_invoke_717(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_didRemoveAccessoryNetworkProtectionGroup:", *(_QWORD *)(a1 + 40));
}

void __36__HMHome__mergeOutgoingInvitations___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Removed outgoing invitation via merge: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(v3, "_unconfigure");
  objc_msgSend(v3, "_updateInvitationState:", 1);

}

void __36__HMHome__mergeOutgoingInvitations___block_invoke_711(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t v23[128];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v25 = v7;
    v26 = 2112;
    v27 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Added outgoing invitation via merge: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = v3;
  objc_msgSend(v3, "accessoryInvitations");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v20 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        objc_msgSend(v13, "accessory");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "accessories");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "uniqueIdentifier");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "hmf_firstObjectWithUniqueIdentifier:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v13, "setAccessory:", v17);
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v10);
  }

  objc_msgSend(*(id *)(a1 + 32), "_configureOutgoingInvitation:", v18);
}

void __36__HMHome__mergeOutgoingInvitations___block_invoke_713(id *a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  objc_msgSend(a1[4], "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __36__HMHome__mergeOutgoingInvitations___block_invoke_2;
  v6[3] = &unk_1E3AB5CD0;
  v4 = a1[5];
  v5 = a1[4];
  v7 = v4;
  v8 = v5;
  v9 = a1[6];
  objc_msgSend(v3, "invokeBlock:", v6);

}

uint64_t __36__HMHome__mergeOutgoingInvitations___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateStateForOutgoingInvitations:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __32__HMHome__mergeResidentDevices___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Removed resident device via merge: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(v3, "_unconfigure");

}

void __32__HMHome__mergeResidentDevices___block_invoke_703(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v7;
    v11 = 2112;
    v12 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Added resident device via merge: %@", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "__configureWithContext:home:", v8, *(_QWORD *)(a1 + 32));

}

void __32__HMHome__mergeResidentDevices___block_invoke_704(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  NSObject *v8;
  _QWORD block[5];
  id v10;
  id v11;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "conformsToProtocol:", &unk_1EE45A110))
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "context");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "queue");
    v8 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __32__HMHome__mergeResidentDevices___block_invoke_2;
    block[3] = &unk_1E3AB5CD0;
    block[4] = *(_QWORD *)(a1 + 32);
    v10 = v3;
    v11 = v6;
    dispatch_async(v8, block);

  }
}

void __32__HMHome__mergeResidentDevices___block_invoke_706(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  NSObject *v9;
  _QWORD block[5];
  id v11;
  id v12;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "context");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "__configureWithContext:home:", v4, *(_QWORD *)(a1 + 32));

  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "conformsToProtocol:", &unk_1EE45A110))
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "context");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "queue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __32__HMHome__mergeResidentDevices___block_invoke_2_708;
    block[3] = &unk_1E3AB5CD0;
    block[4] = *(_QWORD *)(a1 + 32);
    v11 = v3;
    v12 = v7;
    dispatch_async(v9, block);

  }
}

void __32__HMHome__mergeResidentDevices___block_invoke_2_708(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __32__HMHome__mergeResidentDevices___block_invoke_3_709;
  v5[3] = &unk_1E3AB5CD0;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v5);

}

uint64_t __32__HMHome__mergeResidentDevices___block_invoke_3_709(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Calling didAddResidentDevice with resident device: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didAddResidentDevice:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __32__HMHome__mergeResidentDevices___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __32__HMHome__mergeResidentDevices___block_invoke_3;
  v5[3] = &unk_1E3AB5CD0;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v5);

}

uint64_t __32__HMHome__mergeResidentDevices___block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Calling didRemoveResidentDevice with resident device: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didRemoveResidentDevice:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __22__HMHome__mergeUsers___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Removed user via merge: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(v3, "_unconfigure");

}

void __22__HMHome__mergeUsers___block_invoke_695(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v7;
    v11 = 2112;
    v12 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Added user via merge: %@", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "__configureWithContext:home:", v8, *(_QWORD *)(a1 + 32));

}

void __22__HMHome__mergeUsers___block_invoke_696(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[5];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "context");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "queue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __22__HMHome__mergeUsers___block_invoke_2;
    block[3] = &unk_1E3AB5CD0;
    block[4] = *(_QWORD *)(a1 + 32);
    v8 = v3;
    v9 = v4;
    dispatch_async(v6, block);

  }
}

void __22__HMHome__mergeUsers___block_invoke_698(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[5];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "context");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "queue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __22__HMHome__mergeUsers___block_invoke_2_700;
    block[3] = &unk_1E3AB5CD0;
    block[4] = *(_QWORD *)(a1 + 32);
    v8 = v3;
    v9 = v4;
    dispatch_async(v6, block);

  }
}

void __22__HMHome__mergeUsers___block_invoke_2_700(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __22__HMHome__mergeUsers___block_invoke_3_701;
  v5[3] = &unk_1E3AB5CD0;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v5);

}

uint64_t __22__HMHome__mergeUsers___block_invoke_3_701(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Calling didAddUser with user: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didAddUser:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __22__HMHome__mergeUsers___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __22__HMHome__mergeUsers___block_invoke_3;
  v5[3] = &unk_1E3AB5CD0;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v5);

}

uint64_t __22__HMHome__mergeUsers___block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Calling didRemoveUser with user: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didRemoveUser:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __25__HMHome__mergeTriggers___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Removed trigger via merge: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(v3, "_unconfigure");

}

void __25__HMHome__mergeTriggers___block_invoke_691(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  id v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v34 = a1;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v43 = v7;
    v44 = 2112;
    v45 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Added trigger via merge: %@", buf, 0x16u);

    a1 = v34;
  }

  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "__configureWithContext:home:", v8, *(_QWORD *)(a1 + 32));

  v9 = v3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10;

  v32 = v11;
  objc_msgSend(v11, "_updateCharacteristicReference");
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v35 = v9;
  objc_msgSend(v9, "actionSets");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v38, v50, 16);
  if (v37)
  {
    v14 = *(_QWORD *)v39;
    v33 = v13;
    do
    {
      for (i = 0; i != v37; ++i)
      {
        if (*(_QWORD *)v39 != v14)
          objc_enumerationMutation(v13);
        v16 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
        objc_msgSend(v16, "actionSetType");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "isEqualToString:", CFSTR("HMActionSetTypeTriggerOwned"));

        v19 = *(void **)(a1 + 32);
        objc_msgSend(v16, "uuid");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        if (v18)
          objc_msgSend(v19, "triggerOwnedActionSetWithUUID:", v20);
        else
          objc_msgSend(v19, "actionSetWithUUID:", v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        if (v21)
        {
          objc_msgSend(v12, "addObject:", v21);
        }
        else
        {
          v22 = (void *)MEMORY[0x1A1AC1AAC]();
          v23 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "uuid");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "actionSetType");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v35, "uuid");
            v36 = v22;
            v28 = v14;
            v29 = v12;
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v43 = v25;
            v44 = 2112;
            v45 = v26;
            v46 = 2112;
            v47 = v27;
            v48 = 2112;
            v49 = v30;
            _os_log_impl(&dword_19B1B0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Could not find action set %@/%@ for added trigger: %@", buf, 0x2Au);

            v12 = v29;
            v14 = v28;
            v22 = v36;

            a1 = v34;
            v13 = v33;
          }

          objc_autoreleasePoolPop(v22);
        }

      }
      v37 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v38, v50, 16);
    }
    while (v37);
  }

  objc_msgSend(v35, "currentActionSets");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setArray:", v12);

}

void __25__HMHome__mergeTriggers___block_invoke_693(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "context");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "queue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __25__HMHome__mergeTriggers___block_invoke_2;
  v7[3] = &unk_1E3AB5ED8;
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v3;
  v6 = v3;
  dispatch_async(v5, v7);

}

void __25__HMHome__mergeTriggers___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "context");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "queue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __25__HMHome__mergeTriggers___block_invoke_4;
  v7[3] = &unk_1E3AB5ED8;
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v3;
  v6 = v3;
  dispatch_async(v5, v7);

}

uint64_t __25__HMHome__mergeTriggers___block_invoke_4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfTriggerAdded:", *(_QWORD *)(a1 + 40));
}

uint64_t __25__HMHome__mergeTriggers___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfTriggerRemoved:", *(_QWORD *)(a1 + 40));
}

void __39__HMHome__mergeTriggerOwnedActionSets___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Removed trigger-owned action set via merge: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(v3, "_unconfigure");

}

void __39__HMHome__mergeTriggerOwnedActionSets___block_invoke_689(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v7;
    v11 = 2112;
    v12 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Added trigger-owned action set via merge: %@", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "__configureWithContext:home:", v8, *(_QWORD *)(a1 + 32));

}

void __27__HMHome__mergeActionSets___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Removed action set via merge: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(v3, "_unconfigure");

}

void __27__HMHome__mergeActionSets___block_invoke_682(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v7;
    v11 = 2112;
    v12 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Added action set via merge: %@", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "__configureWithContext:home:", v8, *(_QWORD *)(a1 + 32));

}

void __27__HMHome__mergeActionSets___block_invoke_683(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[5];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "context");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "queue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __27__HMHome__mergeActionSets___block_invoke_2;
    block[3] = &unk_1E3AB5CD0;
    block[4] = *(_QWORD *)(a1 + 32);
    v8 = v3;
    v9 = v4;
    dispatch_async(v6, block);

  }
}

void __27__HMHome__mergeActionSets___block_invoke_685(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[5];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "context");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "queue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __27__HMHome__mergeActionSets___block_invoke_2_687;
    block[3] = &unk_1E3AB5CD0;
    block[4] = *(_QWORD *)(a1 + 32);
    v8 = v3;
    v9 = v4;
    dispatch_async(v6, block);

  }
}

void __27__HMHome__mergeActionSets___block_invoke_2_687(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __27__HMHome__mergeActionSets___block_invoke_3_688;
  v5[3] = &unk_1E3AB5CD0;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v5);

}

uint64_t __27__HMHome__mergeActionSets___block_invoke_3_688(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Calling didAddActionSet with action set: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didAddActionSet:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __27__HMHome__mergeActionSets___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __27__HMHome__mergeActionSets___block_invoke_3;
  v5[3] = &unk_1E3AB5CD0;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v5);

}

uint64_t __27__HMHome__mergeActionSets___block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Calling didRemoveActionSet with action set: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didRemoveActionSet:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __30__HMHome__mergeServiceGroups___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Removed service group via merge: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(v3, "_unconfigure");

}

void __30__HMHome__mergeServiceGroups___block_invoke_674(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  __int128 v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  id v42;
  __int16 v43;
  void *v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v31 = a1;
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v40 = v7;
    v41 = 2112;
    v42 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Added service group via merge: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  v8 = v31;
  objc_msgSend(*(id *)(v31 + 32), "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "__configureWithContext:home:", v9, *(_QWORD *)(v31 + 32));

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v32 = v3;
  objc_msgSend(v3, "services");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v35, v45, 16);
  if (v34)
  {
    v33 = *(_QWORD *)v36;
    *(_QWORD *)&v12 = 138543874;
    v29 = v12;
    v30 = v11;
    do
    {
      for (i = 0; i != v34; ++i)
      {
        if (*(_QWORD *)v36 != v33)
          objc_enumerationMutation(v11);
        v14 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
        v15 = *(void **)(v8 + 32);
        objc_msgSend(v14, "accessory", v29);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "uuid");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "accessoryWithUUID:", v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v14, "instanceID");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "_findService:", v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        if (v20)
        {
          objc_msgSend(v10, "addObject:", v20);
        }
        else
        {
          v21 = (void *)MEMORY[0x1A1AC1AAC]();
          v22 = *(id *)(v8 + 32);
          HMFGetOSLogHandle();
          v23 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v24 = v10;
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "uuid");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "uuid");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v29;
            v40 = v25;
            v41 = 2112;
            v42 = v26;
            v43 = 2112;
            v44 = v27;
            _os_log_impl(&dword_19B1B0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Could not find service %@ for added service group: %@", buf, 0x20u);

            v8 = v31;
            v10 = v24;
            v11 = v30;
          }

          objc_autoreleasePoolPop(v21);
        }

      }
      v34 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v35, v45, 16);
    }
    while (v34);
  }

  objc_msgSend(v32, "currentServices");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setArray:", v10);

}

void __30__HMHome__mergeServiceGroups___block_invoke_675(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[5];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "context");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "queue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __30__HMHome__mergeServiceGroups___block_invoke_2;
    block[3] = &unk_1E3AB5CD0;
    block[4] = *(_QWORD *)(a1 + 32);
    v8 = v3;
    v9 = v4;
    dispatch_async(v6, block);

  }
}

void __30__HMHome__mergeServiceGroups___block_invoke_677(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[5];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "context");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "queue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __30__HMHome__mergeServiceGroups___block_invoke_2_679;
    block[3] = &unk_1E3AB5CD0;
    block[4] = *(_QWORD *)(a1 + 32);
    v8 = v3;
    v9 = v4;
    dispatch_async(v6, block);

  }
}

void __30__HMHome__mergeServiceGroups___block_invoke_2_679(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __30__HMHome__mergeServiceGroups___block_invoke_3_680;
  v5[3] = &unk_1E3AB5CD0;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v5);

}

uint64_t __30__HMHome__mergeServiceGroups___block_invoke_3_680(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Calling didAddServiceGroup with service group: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didAddServiceGroup:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __30__HMHome__mergeServiceGroups___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __30__HMHome__mergeServiceGroups___block_invoke_3;
  v5[3] = &unk_1E3AB5CD0;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v5);

}

uint64_t __30__HMHome__mergeServiceGroups___block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Calling didRemoveServiceGroup with service group: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didRemoveServiceGroup:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __28__HMHome__mergeAccessories___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Removed accessory via merge: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(v3, "_unconfigure");

}

void __28__HMHome__mergeAccessories___block_invoke_665(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543618;
    v14 = v7;
    v15 = 2112;
    v16 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Added accessory via merge: %@", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "__configureWithContext:home:", v8, *(_QWORD *)(a1 + 32));

  v9 = *(void **)(a1 + 32);
  objc_msgSend(v3, "room");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "roomWithUUID:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setRoom:", v12);

}

void __28__HMHome__mergeAccessories___block_invoke_666(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  _QWORD block[5];
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v19 = v8;
    v20 = 2112;
    v21 = v3;
    v22 = 2112;
    v23 = v4;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Notifying client of didRemoveAccessory via merge: %@ delegate: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v5);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v9 = (void *)MEMORY[0x1A1AC1AAC]();
    v10 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v19 = v12;
      v20 = 2112;
      v21 = v3;
      _os_log_impl(&dword_19B1B0000, v11, OS_LOG_TYPE_INFO, "%{public}@Client has registered for didRemoveAccessory delegate callback via merge: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(*(id *)(a1 + 32), "context");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "queue");
    v14 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __28__HMHome__mergeAccessories___block_invoke_668;
    block[3] = &unk_1E3AB5CD0;
    block[4] = *(_QWORD *)(a1 + 32);
    v16 = v3;
    v17 = v4;
    dispatch_async(v14, block);

  }
}

void __28__HMHome__mergeAccessories___block_invoke_669(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  _QWORD block[5];
  id v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "postConfigure");
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138544130;
    v21 = v8;
    v22 = 2112;
    v23 = v3;
    v24 = 2112;
    v25 = v4;
    v26 = 2048;
    v27 = v9;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Notifying client of didAddAccessory via merge: %@ delegate: %@, %p", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v5);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v10 = (void *)MEMORY[0x1A1AC1AAC]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      v21 = v13;
      v22 = 2112;
      v23 = v3;
      v24 = 2048;
      v25 = v14;
      _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_INFO, "%{public}@Client has registered for didAddAccessory delegate callback via merge: %@, %p", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(*(id *)(a1 + 32), "context");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "queue");
    v16 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __28__HMHome__mergeAccessories___block_invoke_671;
    block[3] = &unk_1E3AB5CD0;
    block[4] = *(_QWORD *)(a1 + 32);
    v18 = v3;
    v19 = v4;
    dispatch_async(v16, block);

  }
}

void __28__HMHome__mergeAccessories___block_invoke_671(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __28__HMHome__mergeAccessories___block_invoke_2_672;
  v5[3] = &unk_1E3AB5CD0;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v5);

}

uint64_t __28__HMHome__mergeAccessories___block_invoke_2_672(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v9 = 138543874;
    v10 = v5;
    v11 = 2112;
    v12 = v6;
    v13 = 2048;
    v14 = v7;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Dispatching didAddAccessory on client queue via merge: %@, %p", (uint8_t *)&v9, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didAddAccessory:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __28__HMHome__mergeAccessories___block_invoke_668(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __28__HMHome__mergeAccessories___block_invoke_2;
  v5[3] = &unk_1E3AB5CD0;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v5);

}

uint64_t __28__HMHome__mergeAccessories___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Dispatching didRemoveAccessory on client queue via merge: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didRemoveAccessory:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __22__HMHome__mergeZones___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Removed zone via merge: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(v3, "_unconfigure");

}

void __22__HMHome__mergeZones___block_invoke_657(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  __int128 v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  id v40;
  __int16 v41;
  void *v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v30 = a1;
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v38 = v7;
    v39 = 2112;
    v40 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Added zone via merge: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  v8 = a1;
  objc_msgSend(*(id *)(a1 + 32), "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "__configureWithContext:home:", v9, *(_QWORD *)(a1 + 32));

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v31 = v3;
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  objc_msgSend(v3, "rooms");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
  if (v11)
  {
    v13 = v11;
    v14 = *(_QWORD *)v34;
    *(_QWORD *)&v12 = 138543874;
    v28 = v12;
    v29 = v10;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v34 != v14)
          objc_enumerationMutation(v10);
        v16 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
        v17 = *(void **)(v8 + 32);
        objc_msgSend(v16, "uuid", v28);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "roomWithUUID:", v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          objc_msgSend(v32, "addObject:", v19);
        }
        else
        {
          v20 = v14;
          v21 = (void *)MEMORY[0x1A1AC1AAC]();
          v22 = *(id *)(v8 + 32);
          HMFGetOSLogHandle();
          v23 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "uuid");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "uuid");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v28;
            v38 = v24;
            v39 = 2112;
            v40 = v25;
            v41 = 2112;
            v42 = v26;
            _os_log_impl(&dword_19B1B0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to find room %@ for added zone: %@", buf, 0x20u);

            v8 = v30;
            v10 = v29;
          }

          objc_autoreleasePoolPop(v21);
          v14 = v20;
        }

      }
      v13 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
    }
    while (v13);
  }

  objc_msgSend(v31, "currentRooms");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setArray:", v32);

}

void __22__HMHome__mergeZones___block_invoke_658(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[5];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "context");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "queue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __22__HMHome__mergeZones___block_invoke_2;
    block[3] = &unk_1E3AB5CD0;
    block[4] = *(_QWORD *)(a1 + 32);
    v8 = v3;
    v9 = v4;
    dispatch_async(v6, block);

  }
}

void __22__HMHome__mergeZones___block_invoke_660(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[5];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "context");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "queue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __22__HMHome__mergeZones___block_invoke_2_662;
    block[3] = &unk_1E3AB5CD0;
    block[4] = *(_QWORD *)(a1 + 32);
    v8 = v3;
    v9 = v4;
    dispatch_async(v6, block);

  }
}

void __22__HMHome__mergeZones___block_invoke_2_662(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __22__HMHome__mergeZones___block_invoke_3_663;
  v5[3] = &unk_1E3AB5CD0;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v5);

}

uint64_t __22__HMHome__mergeZones___block_invoke_3_663(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Calling didAddZone with zone: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didAddZone:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __22__HMHome__mergeZones___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __22__HMHome__mergeZones___block_invoke_3;
  v5[3] = &unk_1E3AB5CD0;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v5);

}

uint64_t __22__HMHome__mergeZones___block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Calling didRemoveZone with zone: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didRemoveZone:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __22__HMHome__mergeRooms___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Removed room via merge: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(v3, "_unconfigure");

}

void __22__HMHome__mergeRooms___block_invoke_649(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1A1AC1AAC]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v7;
    v11 = 2112;
    v12 = v3;
    _os_log_impl(&dword_19B1B0000, v6, OS_LOG_TYPE_INFO, "%{public}@Added room via merge: %@", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "__configureWithContext:home:", v8, *(_QWORD *)(a1 + 32));

}

void __22__HMHome__mergeRooms___block_invoke_650(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[5];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "context");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "queue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __22__HMHome__mergeRooms___block_invoke_2;
    block[3] = &unk_1E3AB5CD0;
    block[4] = *(_QWORD *)(a1 + 32);
    v8 = v3;
    v9 = v4;
    dispatch_async(v6, block);

  }
}

void __22__HMHome__mergeRooms___block_invoke_652(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[5];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "context");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "queue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __22__HMHome__mergeRooms___block_invoke_2_654;
    block[3] = &unk_1E3AB5CD0;
    block[4] = *(_QWORD *)(a1 + 32);
    v8 = v3;
    v9 = v4;
    dispatch_async(v6, block);

  }
}

void __22__HMHome__mergeRooms___block_invoke_2_654(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __22__HMHome__mergeRooms___block_invoke_3_655;
  v5[3] = &unk_1E3AB5CD0;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v5);

}

uint64_t __22__HMHome__mergeRooms___block_invoke_3_655(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Calling didAddRoom with room: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didAddRoom:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __22__HMHome__mergeRooms___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __22__HMHome__mergeRooms___block_invoke_3;
  v5[3] = &unk_1E3AB5CD0;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v5);

}

uint64_t __22__HMHome__mergeRooms___block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Calling didRemoveRoom with room: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 48), "home:didRemoveRoom:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void __29__HMHome_mergeFromNewObject___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2;
  v6[3] = &unk_1E3AB5ED8;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "invokeBlock:", v6);

}

void __29__HMHome_mergeFromNewObject___block_invoke_414(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_415;
  v6[3] = &unk_1E3AB5ED8;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "invokeBlock:", v6);

}

void __29__HMHome_mergeFromNewObject___block_invoke_418(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_419;
  v6[3] = &unk_1E3AB5ED8;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "invokeBlock:", v6);

}

void __29__HMHome_mergeFromNewObject___block_invoke_422(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_423;
  v6[3] = &unk_1E3AB5ED8;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "invokeBlock:", v6);

}

void __29__HMHome_mergeFromNewObject___block_invoke_426(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_427;
  v6[3] = &unk_1E3AB5ED8;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "invokeBlock:", v6);

}

void __29__HMHome_mergeFromNewObject___block_invoke_428(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_429;
  v4[3] = &unk_1E3AB5E18;
  v4[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v3, "invokeBlock:", v4);

}

void __29__HMHome_mergeFromNewObject___block_invoke_432(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_433;
  v4[3] = &unk_1E3AB5E18;
  v4[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v3, "invokeBlock:", v4);

}

void __29__HMHome_mergeFromNewObject___block_invoke_436(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_437;
  v4[3] = &unk_1E3AB5E18;
  v4[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v3, "invokeBlock:", v4);

}

void __29__HMHome_mergeFromNewObject___block_invoke_446(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_447;
  v6[3] = &unk_1E3AB5ED8;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "invokeBlock:", v6);

}

void __29__HMHome_mergeFromNewObject___block_invoke_450(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_451;
  v6[3] = &unk_1E3AB5ED8;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "invokeBlock:", v6);

}

void __29__HMHome_mergeFromNewObject___block_invoke_454(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_455;
  v6[3] = &unk_1E3AB5ED8;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "invokeBlock:", v6);

}

void __29__HMHome_mergeFromNewObject___block_invoke_458(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_459;
  v6[3] = &unk_1E3AB5ED8;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "invokeBlock:", v6);

}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_460(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfAppDataUpdate");
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_461(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfHomeHubStateUpdate");
}

void __29__HMHome_mergeFromNewObject___block_invoke_3(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  char v9;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_4;
  v6[3] = &unk_1E3AB57F8;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  v9 = *(_BYTE *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v6);

}

void __29__HMHome_mergeFromNewObject___block_invoke_5(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  char v9;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_6;
  v6[3] = &unk_1E3AB57F8;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  v9 = *(_BYTE *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v6);

}

void __29__HMHome_mergeFromNewObject___block_invoke_608(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  uint64_t v9;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_609;
  v6[3] = &unk_1E3AB5C80;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  v9 = *(_QWORD *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v6);

}

void __29__HMHome_mergeFromNewObject___block_invoke_615(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  char v9;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_616;
  v6[3] = &unk_1E3AB57F8;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  v9 = *(_BYTE *)(a1 + 48);
  objc_msgSend(v3, "invokeBlock:", v6);

}

void __29__HMHome_mergeFromNewObject___block_invoke_618(id *a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  objc_msgSend(a1[4], "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_619;
  v6[3] = &unk_1E3AB5CD0;
  v4 = a1[5];
  v5 = a1[4];
  v7 = v4;
  v8 = v5;
  v9 = a1[6];
  objc_msgSend(v3, "invokeBlock:", v6);

}

void __29__HMHome_mergeFromNewObject___block_invoke_3_621(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_4_622;
  v6[3] = &unk_1E3AB5ED8;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "invokeBlock:", v6);

}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_5_623(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_didUpdateNetworkRouterSupport");
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_6_624(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyUpdatedSupportedFeatures");
}

void __29__HMHome_mergeFromNewObject___block_invoke_626(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_627;
  v6[3] = &unk_1E3AB5ED8;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "invokeBlock:", v6);

}

void __29__HMHome_mergeFromNewObject___block_invoke_629(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  objc_msgSend(*(id *)(a1 + 32), "context");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateCaller");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_630;
  v6[3] = &unk_1E3AB5ED8;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "invokeBlock:", v6);

}

void __29__HMHome_mergeFromNewObject___block_invoke_632(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_633;
  v5[3] = &unk_1E3AB5ED8;
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v2, "invokeBlock:", v5);

}

void __29__HMHome_mergeFromNewObject___block_invoke_635(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_636;
  v5[3] = &unk_1E3AB5ED8;
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v2, "invokeBlock:", v5);

}

void __29__HMHome_mergeFromNewObject___block_invoke_637(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 40), "context");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "delegateCaller");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_639;
    v6[3] = &unk_1E3AB5ED8;
    v4 = *(id *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v7 = v4;
    v8 = v5;
    objc_msgSend(v3, "invokeBlock:", v6);

  }
}

void __29__HMHome_mergeFromNewObject___block_invoke_640(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 40), "context");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "delegateCaller");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_642;
    v6[3] = &unk_1E3AB5ED8;
    v4 = *(id *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v7 = v4;
    v8 = v5;
    objc_msgSend(v3, "invokeBlock:", v6);

  }
}

void __29__HMHome_mergeFromNewObject___block_invoke_643(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 40), "context");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "delegateCaller");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __29__HMHome_mergeFromNewObject___block_invoke_2_645;
    v6[3] = &unk_1E3AB5ED8;
    v4 = *(id *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v7 = v4;
    v8 = v5;
    objc_msgSend(v3, "invokeBlock:", v6);

  }
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_646(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyDelegateOfUpdatedHomeLocationStatus");
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_645(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidUpdateAutoSelectedPreferredResident:", *(_QWORD *)(a1 + 40));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_642(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidUpdateUserSelectedPreferredResident:", *(_QWORD *)(a1 + 40));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_639(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidUpdateSupportsResidentSelection:", *(_QWORD *)(a1 + 40));
}

void __29__HMHome_mergeFromNewObject___block_invoke_2_636(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  objc_msgSend(v2, "timeZone");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "home:didUpdateTimeZone:", v2, v3);

}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_633(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateEventLogDuration:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "eventLogDuration"));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_630(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateAreBulletinNotificationsSupported:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "areBulletinNotificationsSupported"));
}

void __29__HMHome_mergeFromNewObject___block_invoke_2_627(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  objc_msgSend(v2, "personManagerSettings");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "home:didUpdatePersonManagerSettings:", v2, v3);

}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_4_622(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidUpdateProtectionMode:", *(_QWORD *)(a1 + 40));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_619(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateMediaPassword:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_616(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateMediaPeerToPeerEnabled:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_609(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateMinimumMediaUserPrivilege:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_6(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateAutomaticThirdPartyAccessorySoftwareUpdateEnabled:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateAutomaticSoftwareUpdateEnabled:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_459(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateHasOnboardedForWalletKey:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "hasOnboardedForWalletKey"));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_455(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidSetHasOnboardedForAccessCode:", *(_QWORD *)(a1 + 40));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_451(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidSetHasAnyUserAcknowledgedCameraRecordingOnboarding:", *(_QWORD *)(a1 + 40));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_447(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidEnableMultiUser:", *(_QWORD *)(a1 + 40));
}

void __29__HMHome_mergeFromNewObject___block_invoke_2_437(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "_privateDelegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x1A1AC1AAC]();
  v4 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543618;
    v8 = v6;
    v9 = 2112;
    v10 = v2;
    _os_log_impl(&dword_19B1B0000, v5, OS_LOG_TYPE_INFO, "%{public}@Notifying clients of did onboard location services using delegate: %@", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v2, "homeDidOnboardLocationServices:", *(_QWORD *)(a1 + 32));

}

void __29__HMHome_mergeFromNewObject___block_invoke_2_433(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "_privateDelegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x1A1AC1AAC]();
  v4 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543618;
    v8 = v6;
    v9 = 2112;
    v10 = v2;
    _os_log_impl(&dword_19B1B0000, v5, OS_LOG_TYPE_INFO, "%{public}@Notifying clients of updated location services using delegate: %@", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v2, "homeDidEnableLocationServices:", *(_QWORD *)(a1 + 32));

}

void __29__HMHome_mergeFromNewObject___block_invoke_2_429(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "_privateDelegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x1A1AC1AAC]();
  v4 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543618;
    v8 = v6;
    v9 = 2112;
    v10 = v2;
    _os_log_impl(&dword_19B1B0000, v5, OS_LOG_TYPE_INFO, "%{public}@Notifying clients of updated Siri phrase options using delegate: %@", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v2, "home:didUpdateSiriPhraseOptions:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "siriPhraseOptions"));

}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_427(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateOnboardAudioAnalysis:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "didOnboardAudioAnalysis"));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_423(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateAudioAnalysisClassifierOptions:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "audioAnalysisClassifierOptions"));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_419(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "home:didUpdateSupportsResidentActionSetStateEvaluation:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "supportsResidentActionSetStateEvaluation"));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2_415(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidUpdateSoundCheck:", *(_QWORD *)(a1 + 40));
}

uint64_t __29__HMHome_mergeFromNewObject___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidUpdateName:", *(_QWORD *)(a1 + 40));
}

void __41__HMHome_mergeFromNewObjectNoMergeCount___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "homeManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "notifyDelegateOfBatchNotificationsStartWithReason:", *(_QWORD *)(a1 + 40));

}

void __41__HMHome_mergeFromNewObjectNoMergeCount___block_invoke_2(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "homeManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "notifyDelegateOfBatchNotificationsEndWithReason:", *(_QWORD *)(a1 + 40));

}

uint64_t __54__HMHome_recomputeAssistantIdentifiersWithCompletion___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidUpdateAssistantIdentifiers:", *(_QWORD *)(a1 + 40));
}

uint64_t __21__HMHome_unconfigure__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unconfigure");
}

- (void)fetchTriggerNameForTriggerIdentifier:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  void *v24;
  HMHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, void *, void *);
  void *v32;
  HMHome *v33;
  id v34;
  id v35;
  _QWORD v36[4];
  id v37;
  const __CFString *v38;
  id v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v20;
      v42 = 2080;
      v43 = "-[HMHome(Trigger) fetchTriggerNameForTriggerIdentifier:completionHandler:]";
      v21 = "%{public}@Nil context - %s";
      v22 = v19;
      v23 = 22;
LABEL_9:
      _os_log_impl(&dword_19B1B0000, v22, OS_LOG_TYPE_ERROR, v21, buf, v23);

    }
LABEL_10:

    objc_autoreleasePoolPop(v17);
    goto LABEL_11;
  }
  if (!v7)
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v41 = v20;
      v21 = "%{public}@completionHandler is required.";
      v22 = v19;
      v23 = 12;
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  if (v6)
  {
    v9 = (void *)MEMORY[0x1E0D285F8];
    v10 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](self, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_msgSend(v10, "initWithTarget:", v11);
    v38 = CFSTR("triggerUUID");
    v39 = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "messageWithName:destination:payload:", CFSTR("HMHomeFetchTriggerNameMessage"), v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v29 = MEMORY[0x1E0C809B0];
    v30 = 3221225472;
    v31 = __74__HMHome_Trigger__fetchTriggerNameForTriggerIdentifier_completionHandler___block_invoke_2;
    v32 = &unk_1E3AB60C8;
    v33 = self;
    v35 = v7;
    v15 = v8;
    v34 = v15;
    objc_msgSend(v14, "setResponseHandler:", &v29);
    objc_msgSend(v15, "messageDispatcher", v29, v30, v31, v32, v33);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "sendMessage:completionHandler:", v14, 0);

  }
  else
  {
    v24 = (void *)MEMORY[0x1A1AC1AAC]();
    v25 = self;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v41 = v27;
      _os_log_impl(&dword_19B1B0000, v26, OS_LOG_TYPE_ERROR, "%{public}@trigger identifier is required.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v24);
    objc_msgSend(v8, "delegateCaller");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = __74__HMHome_Trigger__fetchTriggerNameForTriggerIdentifier_completionHandler___block_invoke;
    v36[3] = &unk_1E3AB6078;
    v37 = v7;
    objc_msgSend(v28, "invokeBlock:", v36);

  }
LABEL_11:

}

void __74__HMHome_Trigger__fetchTriggerNameForTriggerIdentifier_completionHandler___block_invoke(uint64_t a1)
{
  void *v1;
  void (**v2)(id, _QWORD, void *);

  v2 = (void (**)(id, _QWORD, void *))_Block_copy(*(const void **)(a1 + 32));
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2[2](v2, 0, v1);

  }
}

void __74__HMHome_Trigger__fetchTriggerNameForTriggerIdentifier_completionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = _Block_copy(*(const void **)(a1 + 48));
    *(_DWORD *)buf = 138544130;
    v25 = v10;
    v26 = 2112;
    v27 = v6;
    v28 = 2112;
    v29 = v11;
    v30 = 2112;
    v31 = v5;
    _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Fetch trigger name response : %@, completionHandler: %@ error %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v7);
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __74__HMHome_Trigger__fetchTriggerNameForTriggerIdentifier_completionHandler___block_invoke_1841;
    v21[3] = &unk_1E3AB60A0;
    v23 = *(id *)(a1 + 48);
    v22 = v5;
    objc_msgSend(v12, "invokeBlock:", v21);

    v13 = v23;
  }
  else
  {
    objc_msgSend(v6, "hmf_stringForKey:", CFSTR("kTriggerName"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __74__HMHome_Trigger__fetchTriggerNameForTriggerIdentifier_completionHandler___block_invoke_3;
      v16[3] = &unk_1E3AB60A0;
      v15 = &v18;
      v18 = *(id *)(a1 + 48);
      v17 = v13;
      objc_msgSend(v14, "invokeBlock:", v16);

      v14 = v17;
    }
    else
    {
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = __74__HMHome_Trigger__fetchTriggerNameForTriggerIdentifier_completionHandler___block_invoke_2_1842;
      v19[3] = &unk_1E3AB6078;
      v15 = &v20;
      v20 = *(id *)(a1 + 48);
      objc_msgSend(v14, "invokeBlock:", v19);
    }

  }
}

void __74__HMHome_Trigger__fetchTriggerNameForTriggerIdentifier_completionHandler___block_invoke_1841(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = _Block_copy(*(const void **)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(void *, _QWORD, _QWORD))v2 + 2))(v2, 0, *(_QWORD *)(a1 + 32));
    v2 = v3;
  }

}

void __74__HMHome_Trigger__fetchTriggerNameForTriggerIdentifier_completionHandler___block_invoke_2_1842(uint64_t a1)
{
  void *v1;
  void (**v2)(id, _QWORD, void *);

  v2 = (void (**)(id, _QWORD, void *))_Block_copy(*(const void **)(a1 + 32));
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmPrivateErrorWithCode:", 2035);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2[2](v2, 0, v1);

  }
}

void __74__HMHome_Trigger__fetchTriggerNameForTriggerIdentifier_completionHandler___block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = _Block_copy(*(const void **)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(void *, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 32), 0);
    v2 = v3;
  }

}

- (NSUUID)threadNetworkCredentialsUUID
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  -[HMHome threadNetworkID](self, "threadNetworkID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = objc_alloc(MEMORY[0x1E0CB3A28]);
    -[HMHome threadNetworkID](self, "threadNetworkID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_msgSend(v4, "initWithUUIDString:", v5);

  }
  else
  {
    v6 = 0;
  }

  return (NSUUID *)v6;
}

- (void)resolveThreadNetworkCredentialsWithCompletion:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  HMHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  HMHome *v16;
  NSObject *v17;
  void *v18;
  id v19;
  _QWORD block[5];
  id v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(ThreadManagement) resolveThreadNetworkCredentialsWithCompletion:]", CFSTR("completion"));
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = (void *)MEMORY[0x1A1AC1AAC]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v24 = v18;
      v25 = 2112;
      v26 = (const char *)v14;
      _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v14, 0);
    v19 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v19);
  }
  v6 = (void *)v5;
  if (v5)
  {
    -[HMHome context](self, "context");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend(v6, "queue");
      v8 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __74__HMHome_ThreadManagement__resolveThreadNetworkCredentialsWithCompletion___block_invoke;
      block[3] = &unk_1E3AB5C58;
      block[4] = self;
      v22 = v4;
      v21 = v6;
      dispatch_async(v8, block);

    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void *, _QWORD))v4 + 2))(v4, v13, 0);

    }
  }
  else
  {
    v9 = (void *)MEMORY[0x1A1AC1AAC]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v24 = v12;
      v25 = 2080;
      v26 = "-[HMHome(ThreadManagement) resolveThreadNetworkCredentialsWithCompletion:]";
      _os_log_impl(&dword_19B1B0000, v11, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
  }

}

void __74__HMHome_ThreadManagement__resolveThreadNetworkCredentialsWithCompletion___block_invoke(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id location;

  v2 = (void *)MEMORY[0x1E0D285F8];
  objc_msgSend(a1[4], "messageDestination");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messageWithName:destination:payload:", CFSTR("HM.rtn"), v3, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_initWeak(&location, a1[4]);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __74__HMHome_ThreadManagement__resolveThreadNetworkCredentialsWithCompletion___block_invoke_2;
  v6[3] = &unk_1E3AB4AE0;
  objc_copyWeak(&v8, &location);
  v7 = a1[6];
  objc_msgSend(v4, "setResponseHandler:", v6);
  objc_msgSend(a1[5], "messageDispatcher");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "sendMessage:completionHandler:", v4, 0);

  objc_destroyWeak(&v8);
  objc_destroyWeak(&location);

}

void __74__HMHome_ThreadManagement__resolveThreadNetworkCredentialsWithCompletion___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (v5)
  {
    objc_msgSend(WeakRetained, "context");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "delegateCaller");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "callCompletion:error:obj:", *(_QWORD *)(a1 + 32), v5, 0);

  }
  else
  {
    objc_msgSend(v6, "hmf_dataForKey:", CFSTR("threadNetworkCredentials"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 0;
    objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v11, &v23);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v23;
    if (v12)
    {
      objc_msgSend(v8, "context");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "delegateCaller");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "callCompletion:error:obj:", *(_QWORD *)(a1 + 32), 0, v12);
    }
    else
    {
      v16 = (void *)MEMORY[0x1A1AC1AAC]();
      v17 = v8;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v22 = v16;
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v25 = v19;
        v26 = 2112;
        v27 = v13;
        _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Unable to decode credentials, error: %@", buf, 0x16u);

        v16 = v22;
      }

      objc_autoreleasePoolPop(v16);
      objc_msgSend(v17, "context");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "delegateCaller");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = *(_QWORD *)(a1 + 32);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "callCompletion:error:obj:", v20, v21, 0);

    }
  }

}

- (void)selectPreferredResident:(id)a3 completion:(id)a4
{
  -[HMHome selectPreferredResident:requireAutoUpdate:completion:](self, "selectPreferredResident:requireAutoUpdate:completion:", a3, 0, a4);
}

- (void)selectPreferredResident:(id)a3 requireAutoUpdate:(BOOL)a4 completion:(id)a5
{
  _BOOL8 v6;
  id v8;
  id v9;
  void *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, void *, void *);
  void *v28;
  HMHome *v29;
  id v30;
  id v31;
  id v32;
  _QWORD v33[2];
  _QWORD v34[2];
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  _BOOL4 v40;
  uint64_t v41;

  v6 = a4;
  v41 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  -[HMHome context](self, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)MEMORY[0x1A1AC1AAC]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v36 = v14;
    v37 = 2112;
    v38 = v8;
    v39 = 1024;
    v40 = v6;
    _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_INFO, "%{public}@Set preferred resident as: %@, requireAutoUpdate: %{BOOL}d", buf, 0x1Cu);

  }
  objc_autoreleasePoolPop(v11);
  v15 = (void *)MEMORY[0x1E0D285D0];
  -[HMHome messageDestination](v12, "messageDestination");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v33[0] = CFSTR("HMHomePreferredResidentIDSKey");
    objc_msgSend(v8, "IDSIdentifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v33[1] = CFSTR("HMHomeRequireAutoUpdateKey");
    v34[0] = v17;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v6);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v34[1] = v18;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, v33, 2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "messageWithName:qualityOfService:destination:payload:", CFSTR("HM.setPreferredResidentSelection"), 25, v16, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(v15, "messageWithName:qualityOfService:destination:payload:", CFSTR("HM.setPreferredResidentSelection"), 25, v16, 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
  }

  v25 = MEMORY[0x1E0C809B0];
  v26 = 3221225472;
  v27 = __82__HMHome_ResidentSelection__selectPreferredResident_requireAutoUpdate_completion___block_invoke;
  v28 = &unk_1E3AB4B08;
  v29 = v12;
  v30 = v8;
  v31 = v10;
  v32 = v9;
  v21 = v9;
  v22 = v10;
  v23 = v8;
  objc_msgSend(v20, "setResponseHandler:", &v25);
  objc_msgSend(v22, "messageDispatcher", v25, v26, v27, v28, v29);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "sendMessage:", v20);

}

void __82__HMHome_ResidentSelection__selectPreferredResident_requireAutoUpdate_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    v7 = (void *)MEMORY[0x1A1AC1AAC]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 40);
      v13 = 138543618;
      v14 = v10;
      v15 = 2112;
      v16 = v11;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Set preferred resident successful with %@.", (uint8_t *)&v13, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 32), "setUserSelectedPreferredResident:", *(_QWORD *)(a1 + 40));
  }
  objc_msgSend(*(id *)(a1 + 48), "delegateCaller");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "callCompletion:error:", *(_QWORD *)(a1 + 56), v5);

}

- (void)queryRemoteAccessWithCompletionHandler:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v4 = a3;
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("You must provide a completion handler"), 0);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v9);
  }
  v5 = v4;
  -[HMHome context](self, "context");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "delegateCaller");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __63__HMHome_RemoteAccess__queryRemoteAccessWithCompletionHandler___block_invoke;
  v10[3] = &unk_1E3AB6078;
  v11 = v5;
  v8 = v5;
  objc_msgSend(v7, "invokeBlock:", v10);

}

- (void)enableRemoteAccess:(BOOL)a3 completionHandler:(id)a4
{
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  v9 = a4;
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("You must provide a completion handler"), 0);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v8);
  }
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "delegateCaller");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "callCompletion:error:", v9, v7);

}

void __63__HMHome_RemoteAccess__queryRemoteAccessWithCompletionHandler___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

- (void)updateNetworkProtection:(int64_t)a3 completionHandler:(id)a4
{
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD v22[4];
  id v23;
  HMHome *v24;
  id v25;
  const __CFString *v26;
  void *v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMHome context](self, "context");
  v7 = objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(NetworkRouter) updateNetworkProtection:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v20;
      v30 = 2112;
      v31 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v8 = (void *)v7;
  if (v7)
  {
    v26 = CFSTR("kHomeNetworkProtectionModeKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = v9;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMHome uuid](self, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __67__HMHome_NetworkRouter__updateNetworkProtection_completionHandler___block_invoke;
    v22[3] = &unk_1E3AB60C8;
    v23 = v8;
    v24 = self;
    v25 = v6;
    -[_HMContext sendMessage:target:payload:responseHandler:](v23, CFSTR("HM.np"), v11, v10, v22);

  }
  else
  {
    v12 = (void *)MEMORY[0x1A1AC1AAC]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v15;
      v30 = 2080;
      v31 = "-[HMHome(NetworkRouter) updateNetworkProtection:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v10);
  }

}

- (void)updateAccessoryNetworkProtectionGroup:(id)a3 protectionMode:(int64_t)a4 completion:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  HMHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  HMHome *v20;
  NSObject *v21;
  void *v22;
  id v23;
  _QWORD block[5];
  id v25;
  id v26;
  id v27;
  int64_t v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  -[HMHome context](self, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(NetworkRouter) updateAccessoryNetworkProtectionGroup:protectionMode:completion:]", CFSTR("completion"));
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = (void *)MEMORY[0x1A1AC1AAC]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v30 = v22;
      v31 = 2112;
      v32 = (const char *)v18;
      _os_log_impl(&dword_19B1B0000, v21, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v18, 0);
    v23 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v23);
  }
  v11 = v10;
  if (v10)
  {
    objc_msgSend(v10, "queue");
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __89__HMHome_NetworkRouter__updateAccessoryNetworkProtectionGroup_protectionMode_completion___block_invoke;
    block[3] = &unk_1E3AB1A30;
    block[4] = self;
    v25 = v8;
    v28 = a4;
    v27 = v9;
    v26 = v11;
    dispatch_async(v12, block);

  }
  else
  {
    v13 = (void *)MEMORY[0x1A1AC1AAC]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v30 = v16;
      v31 = 2080;
      v32 = "-[HMHome(NetworkRouter) updateAccessoryNetworkProtectionGroup:protectionMode:completion:]";
      _os_log_impl(&dword_19B1B0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v9 + 2))(v9, v17);

  }
}

- (void)_handleAccessoryNetworkProtectionGroupAddedNotification:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  HMHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v23 = v8;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@network.router: Received AccessoryNetworkProtectionGroupAddedNotification", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "dataForKey:", CFSTR("HMAccessoryNetworkProtectionGroupMessageKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v21 = 0;
    objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v9, &v21);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v21;
    if (v10)
    {
      objc_msgSend(v10, "_configureWithHome:", v6);
      -[HMHome currentAccessoryProtectionGroups](v6, "currentAccessoryProtectionGroups");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "addObject:", v10);

      -[HMHome _didAddAccessoryNetworkProtectionGroup:](v6, "_didAddAccessoryNetworkProtectionGroup:", v10);
    }
    else
    {
      v17 = (void *)MEMORY[0x1A1AC1AAC]();
      v18 = v6;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v23 = v20;
        v24 = 2112;
        v25 = v11;
        _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode added accessory protection group with error %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v17);
    }

  }
  else
  {
    v13 = (void *)MEMORY[0x1A1AC1AAC]();
    v14 = v6;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v23 = v16;
      v24 = 2112;
      v25 = v4;
      _os_log_impl(&dword_19B1B0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Message %@ missing accessory protection group encoded data", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
  }

}

- (void)_handleAccessoryNetworkProtectionGroupRemovedNotification:(id)a3
{
  id v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543362;
    v23 = v8;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@network.router: Received AccessoryNetworkProtectionGroupAddedNotification", (uint8_t *)&v22, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "uuidForKey:", CFSTR("HMAccessoryNetworkProtectionGroupUUIDMessageKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    -[HMHome accessoryProtectionGroups](v6, "accessoryProtectionGroups");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "hmf_firstObjectWithUUID:", v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      -[HMHome currentAccessoryProtectionGroups](v6, "currentAccessoryProtectionGroups");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "removeObject:", v11);

      -[HMHome _didRemoveAccessoryNetworkProtectionGroup:](v6, "_didRemoveAccessoryNetworkProtectionGroup:", v11);
    }
    else
    {
      v17 = (void *)MEMORY[0x1A1AC1AAC]();
      v18 = v6;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "UUIDString");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138543618;
        v23 = v20;
        v24 = 2112;
        v25 = v21;
        _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@No matching accessory network protection group with uuid %@", (uint8_t *)&v22, 0x16u);

      }
      objc_autoreleasePoolPop(v17);
    }

  }
  else
  {
    v13 = (void *)MEMORY[0x1A1AC1AAC]();
    v14 = v6;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138543618;
      v23 = v16;
      v24 = 2112;
      v25 = v4;
      _os_log_impl(&dword_19B1B0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Message %@ missing uuid", (uint8_t *)&v22, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
  }

}

- (void)_didAddAccessoryNetworkProtectionGroup:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  id v12;

  v4 = a3;
  -[HMHome delegate](self, "delegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "conformsToProtocol:", &unk_1EE45A110))
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "delegateCaller");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __64__HMHome_NetworkRouter___didAddAccessoryNetworkProtectionGroup___block_invoke;
    v10[3] = &unk_1E3AB5CD0;
    v10[4] = self;
    v11 = v7;
    v12 = v4;
    objc_msgSend(v9, "invokeBlock:", v10);

  }
}

- (void)_didRemoveAccessoryNetworkProtectionGroup:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  id v12;

  v4 = a3;
  -[HMHome delegate](self, "delegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "conformsToProtocol:", &unk_1EE45A110))
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "delegateCaller");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __67__HMHome_NetworkRouter___didRemoveAccessoryNetworkProtectionGroup___block_invoke;
    v10[3] = &unk_1E3AB5CD0;
    v10[4] = self;
    v11 = v7;
    v12 = v4;
    objc_msgSend(v9, "invokeBlock:", v10);

  }
}

- (void)_didUpdateAccessoryNetworkProtectionGroup:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  id v12;

  v4 = a3;
  -[HMHome delegate](self, "delegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "conformsToProtocol:", &unk_1EE45A110))
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "delegateCaller");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __67__HMHome_NetworkRouter___didUpdateAccessoryNetworkProtectionGroup___block_invoke;
    v10[3] = &unk_1E3AB5CD0;
    v10[4] = self;
    v11 = v7;
    v12 = v4;
    objc_msgSend(v9, "invokeBlock:", v10);

  }
}

- (void)_handleHomeNetworkRouterSupportUpdated:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = a3;
  objc_msgSend(v4, "numberForKey:", CFSTR("networkRouterSupportDisableReason"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v7 = objc_msgSend(v5, "unsignedIntegerValue");
    if (-[HMHome networkRouterSupportDisableReason](self, "networkRouterSupportDisableReason") != v7)
    {
      -[HMHome setNetworkRouterSupportDisableReason:](self, "setNetworkRouterSupportDisableReason:", v7);
      v8 = ((uint64_t)(v7 << 60) >> 63) & 3;
      if ((v7 & 7) != 0)
        v8 = 7;
      v9 = v8 | (v7 >> 3) & 2;
      if (-[HMHome networkRouterSupport](self, "networkRouterSupport") != v9)
      {
        -[HMHome setNetworkRouterSupport:](self, "setNetworkRouterSupport:", v9);
        -[HMHome _didUpdateNetworkRouterSupport](self, "_didUpdateNetworkRouterSupport");
      }
    }
  }
  v11 = 0;
  v10 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("addNetworkRouterEnabled"), &v11);
  if (v11 && -[HMHome _setSupportedFeature:enabled:](self, "_setSupportedFeature:enabled:", 1, v10))
    -[HMHome _notifyUpdatedSupportedFeatures](self, "_notifyUpdatedSupportedFeatures");

}

- (void)_didUpdateNetworkRouterSupport
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  HMHome *v10;

  -[HMHome delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "conformsToProtocol:", &unk_1EE45A110))
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[HMHome context](self, "context");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "delegateCaller");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __55__HMHome_NetworkRouter___didUpdateNetworkRouterSupport__block_invoke;
    v8[3] = &unk_1E3AB5ED8;
    v9 = v5;
    v10 = self;
    objc_msgSend(v7, "invokeBlock:", v8);

  }
}

- (void)setNetworkRouterSupportMinimumHomeKitVersion:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[4];
  id v23;
  HMHome *v24;
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(NetworkRouter) setNetworkRouterSupportMinimumHomeKitVersion:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v20;
      v29 = 2112;
      v30 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __88__HMHome_NetworkRouter__setNetworkRouterSupportMinimumHomeKitVersion_completionHandler___block_invoke;
    block[3] = &unk_1E3AB4D20;
    v23 = v6;
    v24 = self;
    v26 = v7;
    v25 = v9;
    dispatch_async(v10, block);

    v11 = v23;
  }
  else
  {
    v12 = (void *)MEMORY[0x1A1AC1AAC]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v15;
      v29 = 2080;
      v30 = "-[HMHome(NetworkRouter) setNetworkRouterSupportMinimumHomeKitVersion:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v7 + 2))(v7, v11);
  }

}

- (void)setAccessoryNetworkProtectionChangeSupportMinHomeKitVersion:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[4];
  id v23;
  HMHome *v24;
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(NetworkRouter) setAccessoryNetworkProtectionChangeSupportMinHomeKitVersion:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v20;
      v29 = 2112;
      v30 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __103__HMHome_NetworkRouter__setAccessoryNetworkProtectionChangeSupportMinHomeKitVersion_completionHandler___block_invoke;
    block[3] = &unk_1E3AB4D20;
    v23 = v6;
    v24 = self;
    v26 = v7;
    v25 = v9;
    dispatch_async(v10, block);

    v11 = v23;
  }
  else
  {
    v12 = (void *)MEMORY[0x1A1AC1AAC]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v15;
      v29 = 2080;
      v30 = "-[HMHome(NetworkRouter) setAccessoryNetworkProtectionChangeSupportMinHomeKitVersion:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v7 + 2))(v7, v11);
  }

}

void __103__HMHome_NetworkRouter__setAccessoryNetworkProtectionChangeSupportMinHomeKitVersion_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id location;
  const __CFString *v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v16 = CFSTR("kHomedVersionKey");
    v17[0] = v2;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, &v16, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)MEMORY[0x1E0D285F8];
    objc_msgSend(*(id *)(a1 + 40), "messageDestination");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messageWithName:destination:payload:", CFSTR("HMHomeInternalSetMinHomeKitVersionForAccessoryNetworkProtectionChangeRequest"), v5, v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak(&location, *(id *)(a1 + 40));
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __103__HMHome_NetworkRouter__setAccessoryNetworkProtectionChangeSupportMinHomeKitVersion_completionHandler___block_invoke_2;
    v12[3] = &unk_1E3AB4AE0;
    objc_copyWeak(&v14, &location);
    v13 = *(id *)(a1 + 56);
    objc_msgSend(v6, "setResponseHandler:", v12);
    objc_msgSend(*(id *)(a1 + 48), "messageDispatcher");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "sendMessage:completionHandler:", v6, 0);

    objc_destroyWeak(&v14);
    objc_destroyWeak(&location);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "context");
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "delegateCaller");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 56);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "callCompletion:error:", v9, v10);

  }
}

void __103__HMHome_NetworkRouter__setAccessoryNetworkProtectionChangeSupportMinHomeKitVersion_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  void *v6;
  id WeakRetained;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "delegateCaller");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "callCompletion:error:", *(_QWORD *)(a1 + 32), v4);

}

void __88__HMHome_NetworkRouter__setNetworkRouterSupportMinimumHomeKitVersion_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id location;
  const __CFString *v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v16 = CFSTR("kHomedVersionKey");
    v17[0] = v2;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, &v16, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)MEMORY[0x1E0D285F8];
    objc_msgSend(*(id *)(a1 + 40), "messageDestination");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messageWithName:destination:payload:", CFSTR("HM.nrsv"), v5, v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak(&location, *(id *)(a1 + 40));
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __88__HMHome_NetworkRouter__setNetworkRouterSupportMinimumHomeKitVersion_completionHandler___block_invoke_2;
    v12[3] = &unk_1E3AB4AE0;
    objc_copyWeak(&v14, &location);
    v13 = *(id *)(a1 + 56);
    objc_msgSend(v6, "setResponseHandler:", v12);
    objc_msgSend(*(id *)(a1 + 48), "messageDispatcher");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "sendMessage:completionHandler:", v6, 0);

    objc_destroyWeak(&v14);
    objc_destroyWeak(&location);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "context");
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "delegateCaller");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 56);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "callCompletion:error:", v9, v10);

  }
}

void __88__HMHome_NetworkRouter__setNetworkRouterSupportMinimumHomeKitVersion_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  void *v6;
  id WeakRetained;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "delegateCaller");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "callCompletion:error:", *(_QWORD *)(a1 + 32), v4);

}

uint64_t __55__HMHome_NetworkRouter___didUpdateNetworkRouterSupport__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "homeDidUpdateNetworkRouterSupport:", *(_QWORD *)(a1 + 40));
}

uint64_t __67__HMHome_NetworkRouter___didUpdateAccessoryNetworkProtectionGroup___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@network.router: Telling delegate didUpdateAccessoryNetworkProtectionGroup. Delegate: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 40), "home:didUpdateAccessoryNetworkProtectionGroup:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
}

uint64_t __67__HMHome_NetworkRouter___didRemoveAccessoryNetworkProtectionGroup___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@network.router: Telling delegate didRemoveAccessoryNetworkProtectionGroup. Delegate: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 40), "home:didRemoveAccessoryNetworkProtectionGroup:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
}

uint64_t __64__HMHome_NetworkRouter___didAddAccessoryNetworkProtectionGroup___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@network.router: Telling delegate didAddAccessoryNetworkProtectionGroup. Delegate: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 40), "home:didAddAccessoryNetworkProtectionGroup:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
}

void __89__HMHome_NetworkRouter__updateAccessoryNetworkProtectionGroup_protectionMode_completion___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, void *, void *);
  void *v21;
  id v22;
  id v23;
  id v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 138543874;
    v28 = v5;
    v29 = 2112;
    v30 = v6;
    v31 = 2048;
    v32 = v7;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@network.router: Updating accessory network protection group: %@, protectionMode: %ld", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  v25[0] = CFSTR("HMAccessoryNetworkProtectionGroupUUIDMessageKey");
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v25[1] = CFSTR("HMAccessoryNetworkProtectionGroupProtectionModeMessageKey");
  v26[0] = v9;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 64));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v26[1] = v10;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, v25, 2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = (void *)MEMORY[0x1E0D285F8];
  objc_msgSend(*(id *)(a1 + 32), "messageDestination");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "messageWithName:destination:payload:", CFSTR("HMAccessoryNetworkProtectionGroupProtectionModeUpdateRequest"), v13, v11);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_initWeak((id *)buf, *(id *)(a1 + 32));
  v18 = MEMORY[0x1E0C809B0];
  v19 = 3221225472;
  v20 = __89__HMHome_NetworkRouter__updateAccessoryNetworkProtectionGroup_protectionMode_completion___block_invoke_1781;
  v21 = &unk_1E3AB2CE8;
  objc_copyWeak(v24, (id *)buf);
  v15 = *(id *)(a1 + 40);
  v16 = *(void **)(a1 + 64);
  v22 = v15;
  v24[1] = v16;
  v23 = *(id *)(a1 + 56);
  objc_msgSend(v14, "setResponseHandler:", &v18);
  objc_msgSend(*(id *)(a1 + 48), "messageDispatcher", v18, v19, v20, v21);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "sendMessage:completionHandler:", v14, 0);

  objc_destroyWeak(v24);
  objc_destroyWeak((id *)buf);

}

void __89__HMHome_NetworkRouter__updateAccessoryNetworkProtectionGroup_protectionMode_completion___block_invoke_1781(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = (void *)MEMORY[0x1A1AC1AAC]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 56);
    v16 = 138544130;
    v17 = v11;
    v18 = 2112;
    v19 = v12;
    v20 = 2048;
    v21 = v13;
    v22 = 2112;
    v23 = v5;
    _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@network.router: Updated accessory network protection group: %@, protectionMode: %ld with error: %@", (uint8_t *)&v16, 0x2Au);

  }
  objc_autoreleasePoolPop(v8);
  if (!v5)
    objc_msgSend(*(id *)(a1 + 32), "setTargetProtectionMode:", *(_QWORD *)(a1 + 56));
  objc_msgSend(v9, "context");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "delegateCaller");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "callCompletion:error:", *(_QWORD *)(a1 + 40), v5);

}

void __67__HMHome_NetworkRouter__updateNetworkProtection_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  if (v11)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 48);
    v8 = v11;
  }
  else
  {
    objc_msgSend(a3, "hmf_numberForKey:", CFSTR("kHomeNetworkProtectionModeKey"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "unsignedIntegerValue");

    objc_msgSend(*(id *)(a1 + 40), "setProtectionMode:", v10);
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 48);
    v8 = 0;
  }
  objc_msgSend(v5, "callCompletion:error:", v7, v8);

}

- (void)fetchWiFiInfosWithTimeout:(double)a3 completion:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  char v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  HMHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  HMHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  HMHome *v30;
  NSObject *v31;
  void *v32;
  id v33;
  _QWORD v34[4];
  id v35;
  id v36;
  id v37;
  _QWORD v38[4];
  id v39;
  const __CFString *v40;
  void *v41;
  _BYTE location[12];
  __int16 v43;
  const char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMHome context](self, "context");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    if (!v6)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HomeWiFiInfoFetch) fetchWiFiInfosWithTimeout:completion:]", CFSTR("completionHandler"));
      v28 = objc_claimAutoreleasedReturnValue();
      v29 = (void *)MEMORY[0x1A1AC1AAC]();
      v30 = self;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)location = 138543618;
        *(_QWORD *)&location[4] = v32;
        v43 = 2112;
        v44 = (const char *)v28;
        _os_log_impl(&dword_19B1B0000, v31, OS_LOG_TYPE_ERROR, "%{public}@%@", location, 0x16u);

      }
      objc_autoreleasePoolPop(v29);
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v28, 0);
      v33 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v33);
    }
    -[HMHome homeManager](self, "homeManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isDaemonRunningWithROARFramework");

    if ((v9 & 1) != 0)
    {
      v10 = (void *)MEMORY[0x1E0D285F8];
      v11 = objc_alloc(MEMORY[0x1E0D285D8]);
      -[HMHome uuid](self, "uuid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (void *)objc_msgSend(v11, "initWithTarget:", v12);
      v40 = CFSTR("HMHomeFetchWiFiInfoTimeoutKey");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = v14;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "messageWithName:destination:payload:", CFSTR("HMHomeFetchWiFiInfoMessage"), v13, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      objc_initWeak((id *)location, self);
      v34[0] = MEMORY[0x1E0C809B0];
      v34[1] = 3221225472;
      v34[2] = __66__HMHome_HomeWiFiInfoFetch__fetchWiFiInfosWithTimeout_completion___block_invoke_2;
      v34[3] = &unk_1E3AB4B30;
      objc_copyWeak(&v37, (id *)location);
      v17 = v7;
      v35 = v17;
      v36 = v6;
      objc_msgSend(v16, "setResponseHandler:", v34);
      objc_msgSend(v17, "messageDispatcher");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "sendMessage:completionHandler:", v16, 0);

      objc_destroyWeak(&v37);
      objc_destroyWeak((id *)location);

    }
    else
    {
      v23 = (void *)MEMORY[0x1A1AC1AAC]();
      v24 = self;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)location = 138543362;
        *(_QWORD *)&location[4] = v26;
        _os_log_impl(&dword_19B1B0000, v25, OS_LOG_TYPE_ERROR, "%{public}@Fetch home WiFi info is only supported in HH2", location, 0xCu);

      }
      objc_autoreleasePoolPop(v23);
      objc_msgSend(v7, "delegateCaller");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v38[0] = MEMORY[0x1E0C809B0];
      v38[1] = 3221225472;
      v38[2] = __66__HMHome_HomeWiFiInfoFetch__fetchWiFiInfosWithTimeout_completion___block_invoke;
      v38[3] = &unk_1E3AB6078;
      v39 = v6;
      objc_msgSend(v27, "invokeBlock:", v38);

    }
  }
  else
  {
    v19 = (void *)MEMORY[0x1A1AC1AAC]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)location = 138543618;
      *(_QWORD *)&location[4] = v22;
      v43 = 2080;
      v44 = "-[HMHome(HomeWiFiInfoFetch) fetchWiFiInfosWithTimeout:completion:]";
      _os_log_impl(&dword_19B1B0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", location, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
  }

}

void __66__HMHome_HomeWiFiInfoFetch__fetchWiFiInfosWithTimeout_completion___block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0C99D20], "array");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v3, v2);

}

void __66__HMHome_HomeWiFiInfoFetch__fetchWiFiInfosWithTimeout_completion___block_invoke_2(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  HMHomeWiFiInfo *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  _QWORD v21[5];
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (v5)
  {
    v8 = (void *)MEMORY[0x1A1AC1AAC]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v11;
      v29 = 2112;
      v30 = v5;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Fetching home WiFi info returned an error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(a1[4], "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __66__HMHome_HomeWiFiInfoFetch__fetchWiFiInfosWithTimeout_completion___block_invoke_1811;
    v24[3] = &unk_1E3AB60A0;
    v26 = a1[5];
    v25 = v5;
    objc_msgSend(v12, "invokeBlock:", v24);

    v13 = v26;
  }
  else
  {
    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("HMHomeFetchWiFiInfoResponseKey"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v15 = v14;
    else
      v15 = 0;
    v13 = v15;

    if (v13)
      v16 = -[HMHomeWiFiInfo initWithSSID:]([HMHomeWiFiInfo alloc], "initWithSSID:", v13);
    else
      v16 = 0;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (v16)
      objc_msgSend(v17, "addObject:", v16);
    objc_msgSend(a1[4], "delegateCaller");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __66__HMHome_HomeWiFiInfoFetch__fetchWiFiInfosWithTimeout_completion___block_invoke_2_1813;
    v21[3] = &unk_1E3AB5C58;
    v21[4] = WeakRetained;
    v22 = v18;
    v23 = a1[5];
    v20 = v18;
    objc_msgSend(v19, "invokeBlock:", v21);

  }
}

void __66__HMHome_HomeWiFiInfoFetch__fetchWiFiInfosWithTimeout_completion___block_invoke_1811(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99D20], "array");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, _QWORD))(v2 + 16))(v2, v3, *(_QWORD *)(a1 + 32));

}

uint64_t __66__HMHome_HomeWiFiInfoFetch__fetchWiFiInfosWithTimeout_completion___block_invoke_2_1813(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Fetched home WiFi info: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

- (void)retrieveHomeKitLocationForFeedbackWithCompletionHandler:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  HMHome *v14;
  NSObject *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  _BYTE location[12];
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    if (!v4)
      _HMFPreconditionFailure();
    v6 = (void *)MEMORY[0x1E0D285F8];
    v7 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](self, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v7, "initWithTarget:", v8);
    objc_msgSend(v6, "messageWithName:destination:payload:", CFSTR("HM.retrieveHomeLocationForFeedback"), v9, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak((id *)location, self);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __88__HMHome_HomeLocationFeedback__retrieveHomeKitLocationForFeedbackWithCompletionHandler___block_invoke;
    v17[3] = &unk_1E3AB4B30;
    objc_copyWeak(&v20, (id *)location);
    v11 = v5;
    v18 = v11;
    v19 = v4;
    objc_msgSend(v10, "setResponseHandler:", v17);
    objc_msgSend(v11, "messageDispatcher");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "sendMessage:completionHandler:", v10, 0);

    objc_destroyWeak(&v20);
    objc_destroyWeak((id *)location);

  }
  else
  {
    v13 = (void *)MEMORY[0x1A1AC1AAC]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)location = 138543618;
      *(_QWORD *)&location[4] = v16;
      v22 = 2080;
      v23 = "-[HMHome(HomeLocationFeedback) retrieveHomeKitLocationForFeedbackWithCompletionHandler:]";
      _os_log_impl(&dword_19B1B0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", location, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
  }

}

void __88__HMHome_HomeLocationFeedback__retrieveHomeKitLocationForFeedbackWithCompletionHandler___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  _QWORD v16[5];
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (v5)
  {
    v8 = (void *)MEMORY[0x1A1AC1AAC]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v11;
      v23 = 2112;
      v24 = v5;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Got error while retrieving the location for feedback: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(a1[4], "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __88__HMHome_HomeLocationFeedback__retrieveHomeKitLocationForFeedbackWithCompletionHandler___block_invoke_1817;
    v19[3] = &unk_1E3AB6078;
    v20 = a1[5];
    objc_msgSend(v12, "invokeBlock:", v19);

    v13 = v20;
  }
  else
  {
    objc_msgSend(v6, "hmf_dateForKey:", CFSTR("HM.homeLocationUpdateTimestamp"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "delegateCaller");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __88__HMHome_HomeLocationFeedback__retrieveHomeKitLocationForFeedbackWithCompletionHandler___block_invoke_2;
    v16[3] = &unk_1E3AB5C58;
    v16[4] = WeakRetained;
    v17 = v14;
    v18 = a1[5];
    v13 = v14;
    objc_msgSend(v15, "invokeBlock:", v16);

  }
}

uint64_t __88__HMHome_HomeLocationFeedback__retrieveHomeKitLocationForFeedbackWithCompletionHandler___block_invoke_1817(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __88__HMHome_HomeLocationFeedback__retrieveHomeKitLocationForFeedbackWithCompletionHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@lastUpdated:[%@]", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

- (void)addZoneWithName:(NSString *)zoneName completionHandler:(void *)completion
{
  NSString *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[5];
  NSString *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = zoneName;
  v7 = completion;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMZone) addZoneWithName:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __52__HMHome_HMZone__addZoneWithName_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v23 = v6;
    v24 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2080;
      v28 = "-[HMHome(HMZone) addZoneWithName:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, _QWORD, void *))v7 + 2))(v7, 0, v15);

  }
}

- (void)_addZoneWithName:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  HMHome *v29;
  id v30;
  const __CFString *v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    if (v6)
    {
      v10 = objc_msgSend(v6, "length");
      if (HMMaxLengthForNaming__hmf_once_t5 != -1)
        dispatch_once(&HMMaxLengthForNaming__hmf_once_t5, &__block_literal_global_40);
      if (v10 > HMMaxLengthForNaming__hmf_once_v6)
      {
        v11 = (void *)MEMORY[0x1A1AC1AAC]();
        v12 = self;
        HMFGetOSLogHandle();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v34 = v14;
          _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Zone name is longer than the pre-defined max length", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v11);
        objc_msgSend(v9, "delegateCaller");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 46);
        v16 = objc_claimAutoreleasedReturnValue();
        goto LABEL_17;
      }
      -[HMHome zoneWithName:](self, "zoneWithName:", v6);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v23)
      {
        -[HMHome uuid](self, "uuid");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = CFSTR("kZoneName");
        v32 = v6;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27[0] = MEMORY[0x1E0C809B0];
        v27[1] = 3221225472;
        v27[2] = __53__HMHome_HMZone___addZoneWithName_completionHandler___block_invoke;
        v27[3] = &unk_1E3AB60C8;
        v28 = v9;
        v29 = self;
        v30 = v7;
        -[_HMContext sendMessage:target:payload:responseHandler:](v28, CFSTR("kAddZoneRequestKey"), v25, v26, v27);

        goto LABEL_19;
      }
      objc_msgSend(v9, "delegateCaller");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = (void *)MEMORY[0x1E0CB35C8];
      v22 = 13;
    }
    else
    {
      objc_msgSend(v8, "delegateCaller");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = (void *)MEMORY[0x1E0CB35C8];
      v22 = 20;
    }
    objc_msgSend(v21, "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), v22, 0);
    v16 = objc_claimAutoreleasedReturnValue();
LABEL_17:
    v24 = (void *)v16;
    objc_msgSend(v15, "callCompletion:zone:error:", v7, 0, v16);

    goto LABEL_18;
  }
  v17 = (void *)MEMORY[0x1A1AC1AAC]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v34 = v20;
    v35 = 2080;
    v36 = "-[HMHome(HMZone) _addZoneWithName:completionHandler:]";
    _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v17);
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v7 + 2))(v7, 0, v15);
LABEL_18:

  }
LABEL_19:

}

- (void)removeZone:(HMZone *)zone completionHandler:(void *)completion
{
  HMZone *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[5];
  HMZone *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = zone;
  v7 = completion;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMZone) removeZone:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __47__HMHome_HMZone__removeZone_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v23 = v6;
    v24 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2080;
      v28 = "-[HMHome(HMZone) removeZone:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, void *))v7 + 2))(v7, v15);

  }
}

- (void)_removeZone:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  HMHome *v26;
  id v27;
  id v28;
  const __CFString *v29;
  void *v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    if (v6)
    {
      -[HMHome currentZones](self, "currentZones");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "containsObject:", v6);

      if ((v11 & 1) != 0)
      {
        objc_msgSend(v6, "uuid");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMHome uuid](self, "uuid");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = CFSTR("kZoneUUID");
        objc_msgSend(v12, "UUIDString");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = v14;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v24[0] = MEMORY[0x1E0C809B0];
        v24[1] = 3221225472;
        v24[2] = __48__HMHome_HMZone___removeZone_completionHandler___block_invoke;
        v24[3] = &unk_1E3AB4B08;
        v25 = v9;
        v27 = v12;
        v28 = v7;
        v26 = self;
        v16 = v12;
        -[_HMContext sendMessage:target:payload:responseHandler:](v25, CFSTR("kRemoveZoneRequestKey"), v13, v15, v24);

LABEL_12:
        goto LABEL_13;
      }
      objc_msgSend(v9, "delegateCaller");
      v16 = (id)objc_claimAutoreleasedReturnValue();
      v21 = (void *)MEMORY[0x1E0CB35C8];
      v22 = 2;
    }
    else
    {
      objc_msgSend(v8, "delegateCaller");
      v16 = (id)objc_claimAutoreleasedReturnValue();
      v21 = (void *)MEMORY[0x1E0CB35C8];
      v22 = 20;
    }
    objc_msgSend(v21, "hmErrorWithCode:", v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "callCompletion:error:", v7, v23);

    goto LABEL_12;
  }
  v17 = (void *)MEMORY[0x1A1AC1AAC]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v32 = v20;
    v33 = 2080;
    v34 = "-[HMHome(HMZone) _removeZone:completionHandler:]";
    _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v17);
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v16 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, id))v7 + 2))(v7, v16);
    goto LABEL_12;
  }
LABEL_13:

}

void __48__HMHome_HMZone___removeZone_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "callCompletion:error:", *(_QWORD *)(a1 + 56), v6);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "zoneWithUUID:", *(_QWORD *)(a1 + 48));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      objc_msgSend(*(id *)(a1 + 40), "currentZones");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "removeObject:", v3);

      objc_msgSend(v3, "_unconfigure");
    }
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 56), 0);

  }
}

uint64_t __47__HMHome_HMZone__removeZone_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeZone:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __53__HMHome_HMZone___addZoneWithName_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  HMZone *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  if (v12)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "callCompletion:zone:error:", *(_QWORD *)(a1 + 48), 0, v12);
  }
  else
  {
    objc_msgSend(v5, "hmf_UUIDForKey:", CFSTR("kZoneUUID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "hmf_stringForKey:", CFSTR("kZoneName"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[HMZone initWithName:uuid:]([HMZone alloc], "initWithName:uuid:", v7, v6);
    objc_msgSend(*(id *)(a1 + 40), "context");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMZone __configureWithContext:home:](v8, "__configureWithContext:home:", v9, *(_QWORD *)(a1 + 40));

    objc_msgSend(*(id *)(a1 + 40), "currentZones");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "addObject:", v8);

    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "callCompletion:zone:error:", *(_QWORD *)(a1 + 48), v8, 0);

  }
}

uint64_t __52__HMHome_HMZone__addZoneWithName_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_addZoneWithName:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

- (id)communalUsers
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v3 = (void *)MEMORY[0x1A1AC1AAC](self, a2);
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentUser](self, "currentUser");
  v5 = objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)v5;
    -[HMHome currentUser](self, "currentUser");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "homeAccessControl");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isRestrictedGuest");

    if ((v9 & 1) == 0)
    {
      -[HMHome currentUser](self, "currentUser");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v10);

    }
  }
  -[HMHome currentUsers](self, "currentUsers");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "na_filter:", &__block_literal_global_1659);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "addObjectsFromArray:", v13);
  objc_msgSend(v4, "allObjects");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v3);
  return v14;
}

- (id)restrictedGuests
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v3 = (void *)MEMORY[0x1A1AC1AAC](self, a2);
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome currentUser](self, "currentUser");
  v5 = objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)v5;
    -[HMHome currentUser](self, "currentUser");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "homeAccessControl");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isRestrictedGuest");

    if (v9)
    {
      -[HMHome currentUser](self, "currentUser");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v10);

    }
  }
  -[HMHome currentUsers](self, "currentUsers");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "na_filter:", &__block_literal_global_1660);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "addObjectsFromArray:", v13);
  objc_msgSend(v4, "allObjects");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v3);
  return v14;
}

- (void)manageUsersWithCompletionHandler:(void *)completion
{
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  HMHome *v15;
  NSObject *v16;
  void *v17;
  id v18;
  _QWORD block[5];
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = completion;
  -[HMHome context](self, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMUser) manageUsersWithCompletionHandler:]", CFSTR("completion"));
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)MEMORY[0x1A1AC1AAC]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v17;
      v23 = 2112;
      v24 = (const char *)v13;
      _os_log_impl(&dword_19B1B0000, v16, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v13, 0);
    v18 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v18);
  }
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "queue");
    v7 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __51__HMHome_HMUser__manageUsersWithCompletionHandler___block_invoke;
    block[3] = &unk_1E3AB60A0;
    block[4] = self;
    v20 = v4;
    dispatch_async(v7, block);

  }
  else
  {
    v8 = (void *)MEMORY[0x1A1AC1AAC]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v11;
      v23 = 2080;
      v24 = "-[HMHome(HMUser) manageUsersWithCompletionHandler:]";
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, void *))v4 + 2))(v4, v12);

  }
}

- (void)_manageUsersWithCompletionHandler:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  HMHome *v23;
  NSObject *v24;
  void *v25;
  id v26;
  _QWORD v27[5];
  id v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMHome context](self, "context");
  v5 = objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMUser) _manageUsersWithCompletionHandler:]", CFSTR("completion"));
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = (void *)MEMORY[0x1A1AC1AAC]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v25;
      v32 = 2112;
      v33 = (const char *)v21;
      _os_log_impl(&dword_19B1B0000, v24, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v21, 0);
    v26 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v26);
  }
  v6 = (void *)v5;
  if (v5)
  {
    -[HMHome homeManager](self, "homeManager");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "isViewServiceActive"))
    {
      -[HMHome context](self, "context");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "delegateCaller");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 15, 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "callCompletion:error:", v4, v10);

    }
    else
    {
      objc_msgSend(v7, "setViewServiceActive:", 1);
      v15 = objc_alloc(MEMORY[0x1E0D285F8]);
      v16 = objc_alloc(MEMORY[0x1E0D285D8]);
      -[HMHome uuid](self, "uuid");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = (void *)objc_msgSend(v16, "initWithTarget:", v17);
      v19 = (void *)objc_msgSend(v15, "initWithName:destination:payload:", CFSTR("HMHomeAllowUserManagementMessage"), v18, 0);

      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 3221225472;
      v27[2] = __52__HMHome_HMUser___manageUsersWithCompletionHandler___block_invoke;
      v27[3] = &unk_1E3AB60C8;
      v27[4] = self;
      v7 = v7;
      v28 = v7;
      v29 = v4;
      objc_msgSend(v19, "setResponseHandler:", v27);
      objc_msgSend(v6, "messageDispatcher");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "sendMessage:", v19);

    }
  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v14;
      v32 = 2080;
      v33 = "-[HMHome(HMUser) _manageUsersWithCompletionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, id))v4 + 2))(v4, v7);
  }

}

- (void)inviteUsersWithInviteInformation:(id)a3 completionHandler:(id)a4
{
  id v6;
  void (**v7)(id, _QWORD, void *);
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  char *v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  HMHome *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  HMHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  HMHome *v41;
  NSObject *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  HMHome *v46;
  NSObject *v47;
  void *v48;
  id v49;
  uint64_t v50;
  _QWORD v51[4];
  id v52;
  id v53;
  id v54;
  id v55;
  const __CFString *v56;
  void *v57;
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  const char *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (void (**)(id, _QWORD, void *))a4;
  -[HMHome context](self, "context");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMUser) inviteUsersWithInviteInformation:completionHandler:]", CFSTR("completion"));
    v44 = objc_claimAutoreleasedReturnValue();
    v45 = (void *)MEMORY[0x1A1AC1AAC]();
    v46 = self;
    HMFGetOSLogHandle();
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v59 = v48;
      v60 = 2112;
      v61 = (const char *)v44;
      _os_log_impl(&dword_19B1B0000, v47, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v45);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v44, 0);
    v49 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v49);
  }
  v9 = (void *)v8;
  if (!v8)
  {
    v28 = (void *)MEMORY[0x1A1AC1AAC]();
    v29 = self;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v59 = v31;
      v60 = 2080;
      v61 = "-[HMHome(HMUser) inviteUsersWithInviteInformation:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v28);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v7[2](v7, 0, v32);
    goto LABEL_11;
  }
  if (!objc_msgSend(v6, "count"))
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 3, 0);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome context](self, "context");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "delegateCaller");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "callCompletion:invitations:error:", v7, 0, v32);

LABEL_11:
    goto LABEL_20;
  }
  if (-[HMHome _areAllUserInviteInformationValid:](self, "_areAllUserInviteInformationValid:", v6))
  {
    v55 = 0;
    objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v6, 1, &v55);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (char *)v55;
    if (v10)
    {
      v56 = CFSTR("HMHomeUserInviteInformationKey");
      v57 = v10;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v57, &v56, 1);
      v50 = objc_claimAutoreleasedReturnValue();
      v12 = objc_alloc(MEMORY[0x1E0D285F8]);
      v13 = objc_alloc(MEMORY[0x1E0D285D8]);
      -[HMHome uuid](self, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)objc_msgSend(v13, "initWithTarget:", v14);
      v16 = (void *)objc_msgSend(v12, "initWithName:destination:payload:", CFSTR("kInviteUsersRequestKey"), v15, v50);

      -[HMHome context](self, "context");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "pendingRequests");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v16, "identifier");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = _Block_copy(v7);
      objc_msgSend(v18, "addCompletionBlock:forIdentifier:", v20, v19);

      v51[0] = MEMORY[0x1E0C809B0];
      v51[1] = 3221225472;
      v51[2] = __69__HMHome_HMUser__inviteUsersWithInviteInformation_completionHandler___block_invoke;
      v51[3] = &unk_1E3AB5C08;
      v52 = v18;
      v53 = v19;
      v21 = v9;
      v54 = v21;
      v22 = v10;
      v23 = v11;
      v24 = v19;
      v25 = v18;
      objc_msgSend(v16, "setResponseHandler:", v51);
      objc_msgSend(v21, "messageDispatcher");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "sendMessage:", v16);

      v11 = v23;
      v10 = v22;
      v27 = (void *)v50;
    }
    else
    {
      v40 = (void *)MEMORY[0x1A1AC1AAC]();
      v41 = self;
      HMFGetOSLogHandle();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v59 = v43;
        v60 = 2112;
        v61 = v11;
        _os_log_impl(&dword_19B1B0000, v42, OS_LOG_TYPE_ERROR, "%{public}@Failed to encode user invite information: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v40);
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 3, 0);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome context](v41, "context");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "delegateCaller");
      v25 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "callCompletion:invitations:error:", v7, 0, v27);
    }

  }
  else
  {
    v35 = (void *)MEMORY[0x1A1AC1AAC]();
    v36 = self;
    HMFGetOSLogHandle();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v59 = v38;
      _os_log_impl(&dword_19B1B0000, v37, OS_LOG_TYPE_ERROR, "%{public}@Not all the HMUserInviteInformation objects are valid.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v35);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v11 = (char *)objc_claimAutoreleasedReturnValue();
    -[HMHome context](v36, "context");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "delegateCaller");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "callCompletion:invitations:error:", v7, 0, v11);

  }
LABEL_20:

}

- (BOOL)_areAllUserInviteInformationValid:(id)a3
{
  _QWORD v4[5];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __52__HMHome_HMUser___areAllUserInviteInformationValid___block_invoke;
  v4[3] = &unk_1E3AB1948;
  v4[4] = self;
  return objc_msgSend(a3, "na_all:", v4);
}

- (void)removeUser:(HMUser *)user completionHandler:(void *)completion
{
  HMUser *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[5];
  HMUser *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = user;
  v7 = completion;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMUser) removeUser:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __47__HMHome_HMUser__removeUser_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v23 = v6;
    v24 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2080;
      v28 = "-[HMHome(HMUser) removeUser:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, void *))v7 + 2))(v7, v15);

  }
}

- (void)_removeUser:(id)a3 completionHandler:(id)a4
{
  id v6;
  void (**v7)(id, void *);
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  HMHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  HMHome *v26;
  NSObject *v27;
  void *v28;
  id v29;
  _QWORD v30[5];
  id v31;
  id v32;
  void (**v33)(id, void *);
  _QWORD v34[2];
  _QWORD v35[2];
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (void (**)(id, void *))a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMUser) _removeUser:completionHandler:]", CFSTR("completion"));
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = (void *)MEMORY[0x1A1AC1AAC]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v37 = v28;
      v38 = 2112;
      v39 = (const char *)v24;
      _os_log_impl(&dword_19B1B0000, v27, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v24, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v29);
  }
  v9 = v8;
  if (!v8)
  {
    v18 = (void *)MEMORY[0x1A1AC1AAC]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v37 = v21;
      v38 = 2080;
      v39 = "-[HMHome(HMUser) _removeUser:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v7[2](v7, v22);
    goto LABEL_11;
  }
  if (!v6)
  {
    objc_msgSend(v8, "delegateCaller");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 20, 0);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "callCompletion:error:", v7, v23);

LABEL_11:
    goto LABEL_12;
  }
  v34[0] = CFSTR("kUserUUIDKey");
  objc_msgSend(v6, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "UUIDString");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v34[1] = CFSTR("kConfirmUserManagementKey");
  v35[0] = v11;
  v35[1] = MEMORY[0x1E0C9AAA0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, v34, 2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "senderCorrelationIdentifier");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    v14 = (void *)objc_msgSend(v12, "mutableCopy");
    objc_msgSend(v6, "senderCorrelationIdentifier");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v15, CFSTR("HM.senderCorrelationIdentifier"));

    v16 = objc_msgSend(v14, "copy");
    v12 = (void *)v16;
  }
  -[HMHome uuid](self, "uuid");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = __48__HMHome_HMUser___removeUser_completionHandler___block_invoke;
  v30[3] = &unk_1E3AB4B08;
  v30[4] = self;
  v31 = v6;
  v32 = v9;
  v33 = v7;
  -[_HMContext sendMessage:target:payload:responseHandler:](v32, CFSTR("kRemoveUserRequestKey"), v17, v12, v30);

LABEL_12:
}

- (id)_createFailedAccessoriesListFromError:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id obj;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  void *v39;
  _BYTE v40[128];
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(v3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "hmf_arrayForKey:", CFSTR("kFailedAccessoriesListKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v25 = v3;
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    obj = v5;
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v41, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v35;
      v26 = *(_QWORD *)v35;
      do
      {
        v10 = 0;
        v27 = v8;
        do
        {
          if (*(_QWORD *)v35 != v9)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * v10);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v29 = v10;
            v12 = v11;
            v30 = 0u;
            v31 = 0u;
            v32 = 0u;
            v33 = 0u;
            v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
            if (v13)
            {
              v14 = v13;
              v15 = *(_QWORD *)v31;
              do
              {
                for (i = 0; i != v14; ++i)
                {
                  if (*(_QWORD *)v31 != v15)
                    objc_enumerationMutation(v12);
                  v17 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * i);
                  objc_msgSend(v12, "objectForKeyedSubscript:", v17);
                  v18 = (void *)objc_claimAutoreleasedReturnValue();
                  v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v17);
                  v38 = v19;
                  v39 = v18;
                  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v6, "addObject:", v20);

                }
                v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
              }
              while (v14);
            }

            v9 = v26;
            v8 = v27;
            v10 = v29;
          }
          ++v10;
        }
        while (v10 != v8);
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v41, 16);
      }
      while (v8);
    }

    v21 = v24;
    objc_msgSend(v24, "setObject:forKeyedSubscript:", v6, CFSTR("HMUserFailedAccessoriesKey"));

    v3 = v25;
  }
  else
  {
    v21 = 0;
  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), objc_msgSend(v3, "code"), v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  return v22;
}

- (id)administrator
{
  void *v3;
  void *v4;
  int v5;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  -[HMHome currentUser](self, "currentUser");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "homeAccessControl");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isAdministrator");

  if (v5)
  {
    -[HMHome currentUser](self, "currentUser");
    return (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    -[HMHome currentUsers](self, "currentUsers", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "array");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = (id)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v16;
      while (2)
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v16 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v12, "homeAccessControl");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "isAdministrator");

          if (v14)
          {
            v9 = v12;
            goto LABEL_13;
          }
        }
        v9 = (id)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v9)
          continue;
        break;
      }
    }
LABEL_13:

    return v9;
  }
}

- (id)owner
{
  void *v3;
  void *v4;
  int v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  HMHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  -[HMHome currentUser](self, "currentUser");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "homeAccessControl");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isOwner");

  if (v5)
  {
    -[HMHome currentUser](self, "currentUser");
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    -[HMHome currentUsers](self, "currentUsers");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "array");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = (id)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v26, v40, 16);
    if (v6)
    {
      v9 = *(_QWORD *)v27;
      while (2)
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v27 != v9)
            objc_enumerationMutation(v8);
          v11 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v11, "homeAccessControl");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "isOwner");

          if (v13)
          {
            v6 = v11;
            goto LABEL_13;
          }
        }
        v6 = (id)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v26, v40, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_13:

  }
  v14 = (void *)MEMORY[0x1A1AC1AAC]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "userID");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "name");
    v25 = v6;
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome currentUser](v15, "currentUser");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "userID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome currentUsers](v15, "currentUsers");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "array");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v31 = v17;
    v32 = 2112;
    v33 = v18;
    v34 = 2112;
    v35 = v19;
    v36 = 2112;
    v37 = v21;
    v38 = 2112;
    v39 = v23;
    _os_log_impl(&dword_19B1B0000, v16, OS_LOG_TYPE_DEBUG, "%{public}@owner : %@, name: %@, currentUser: %@, all users: [%@]", buf, 0x34u);

    v6 = v25;
  }

  objc_autoreleasePoolPop(v14);
  return v6;
}

- (void)addUserWithCompletionHandler:(void *)completion
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMHome *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  HMHome *v16;
  NSObject *v17;
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = completion;
  -[HMHome context](self, "context");
  v5 = objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMUser) addUserWithCompletionHandler:]", CFSTR("completion"));
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = (void *)MEMORY[0x1A1AC1AAC]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v23 = v18;
      v24 = 2112;
      v25 = (const char *)v14;
      _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v14, 0);
    v19 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v19);
  }
  v6 = (void *)v5;
  if (v5)
  {
    -[HMHome context](self, "context");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "delegateCaller");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __47__HMHome_HMUser__addUserWithCompletionHandler___block_invoke;
    v20[3] = &unk_1E3AB6078;
    v21 = v4;
    objc_msgSend(v8, "invokeBlock:", v20);

    v9 = v21;
  }
  else
  {
    v10 = (void *)MEMORY[0x1A1AC1AAC]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v23 = v13;
      v24 = 2080;
      v25 = "-[HMHome(HMUser) addUserWithCompletionHandler:]";
      _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, _QWORD, void *))v4 + 2))(v4, 0, v9);
  }

}

- (void)addUserWithoutConfirmation:(id)a3 privilege:(int64_t)a4 completionHandler:(id)a5
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMHome *v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  HMHome *v20;
  NSObject *v21;
  void *v22;
  id v23;
  _QWORD v24[4];
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  const char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a5;
  -[HMHome context](self, "context");
  v9 = objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMUser) addUserWithoutConfirmation:privilege:completionHandler:]", CFSTR("completion"));
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = (void *)MEMORY[0x1A1AC1AAC]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v22;
      v28 = 2112;
      v29 = (const char *)v18;
      _os_log_impl(&dword_19B1B0000, v21, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v18, 0);
    v23 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v23);
  }
  v10 = (void *)v9;
  if (v9)
  {
    -[HMHome context](self, "context");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __73__HMHome_HMUser__addUserWithoutConfirmation_privilege_completionHandler___block_invoke;
    v24[3] = &unk_1E3AB6078;
    v25 = v8;
    objc_msgSend(v12, "invokeBlock:", v24);

    v13 = v25;
  }
  else
  {
    v14 = (void *)MEMORY[0x1A1AC1AAC]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v17;
      v28 = 2080;
      v29 = "-[HMHome(HMUser) addUserWithoutConfirmation:privilege:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v8 + 2))(v8, 0, v13);
  }

}

- (void)addUser:(id)a3 withCompletionHandler:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMHome *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  HMHome *v19;
  NSObject *v20;
  void *v21;
  id v22;
  _QWORD v23[4];
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMUser) addUser:withCompletionHandler:]", CFSTR("completion"));
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)MEMORY[0x1A1AC1AAC]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v21;
      v27 = 2112;
      v28 = (const char *)v17;
      _os_log_impl(&dword_19B1B0000, v20, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v17, 0);
    v22 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v22);
  }
  v9 = (void *)v8;
  if (v8)
  {
    -[HMHome context](self, "context");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __48__HMHome_HMUser__addUser_withCompletionHandler___block_invoke;
    v23[3] = &unk_1E3AB6078;
    v24 = v7;
    objc_msgSend(v11, "invokeBlock:", v23);

    v12 = v24;
  }
  else
  {
    v13 = (void *)MEMORY[0x1A1AC1AAC]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v16;
      v27 = 2080;
      v28 = "-[HMHome(HMUser) addUser:withCompletionHandler:]";
      _os_log_impl(&dword_19B1B0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v7 + 2))(v7, 0, v12);
  }

}

- (void)inviteUsers:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  HMUserInviteInformation *v15;
  HMUserInviteInformation *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v9 = v6;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v18;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v18 != v12)
          objc_enumerationMutation(v9);
        v14 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v13);
        v15 = [HMUserInviteInformation alloc];
        v16 = -[HMUserInviteInformation initWithUser:administrator:remoteAccess:](v15, "initWithUser:administrator:remoteAccess:", v14, 0, 1, (_QWORD)v17);
        objc_msgSend(v8, "addObject:", v16);

        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v11);
  }

  -[HMHome inviteUsersWithInviteInformation:completionHandler:](self, "inviteUsersWithInviteInformation:completionHandler:", v8, v7);
}

void __48__HMHome_HMUser__addUser_withCompletionHandler___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void __73__HMHome_HMUser__addUserWithoutConfirmation_privilege_completionHandler___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void __47__HMHome_HMUser__addUserWithCompletionHandler___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void __48__HMHome_HMUser___removeUser_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  int v21;
  void *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  if (v5)
  {
    objc_msgSend(v7, "_createFailedAccessoriesListFromError:", v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x1A1AC1AAC]();
    v10 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(a1 + 40);
      v21 = 138543874;
      v22 = v12;
      v23 = 2112;
      v24 = v13;
      v25 = 2112;
      v26 = v8;
      _os_log_impl(&dword_19B1B0000, v11, OS_LOG_TYPE_INFO, "%{public}@Failed to remove user: %@, with error: %@", (uint8_t *)&v21, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(*(id *)(a1 + 48), "delegateCaller");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "callCompletion:error:", *(_QWORD *)(a1 + 56), v8);

  }
  else
  {
    objc_msgSend(v7, "currentUsers");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "removeObject:", *(_QWORD *)(a1 + 40));

    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = *(_QWORD *)(a1 + 40);
      v21 = 138543618;
      v22 = v19;
      v23 = 2112;
      v24 = v20;
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_INFO, "%{public}@Calling completion for removed user: %@", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(*(id *)(a1 + 48), "delegateCaller");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "callCompletion:error:", *(_QWORD *)(a1 + 56), 0);
  }

}

uint64_t __47__HMHome_HMUser__removeUser_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeUser:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __52__HMHome_HMUser___areAllUserInviteInformationValid___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "validateInviteForHome:", *(_QWORD *)(a1 + 32));
}

void __69__HMHome_HMUser__inviteUsersWithInviteInformation_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = a2;
    objc_msgSend(v3, "removeCompletionBlockForIdentifier:", v4);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "delegateCaller");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "callCompletion:obj:error:", v7, 0, v5);

  }
}

void __52__HMHome_HMUser___manageUsersWithCompletionHandler___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[5];
  id v15;
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x1A1AC1AAC]();
    v8 = a1[4];
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v18 = v10;
      v19 = 2112;
      v20 = v5;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Unable to allow user management: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(a1[5], "setViewServiceActive:", 0);
    objc_msgSend(a1[4], "context");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "callCompletion:error:", a1[6], v5);

  }
  else
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __52__HMHome_HMUser___manageUsersWithCompletionHandler___block_invoke_1661;
    v14[3] = &unk_1E3AB5C58;
    v13 = a1[5];
    v14[4] = a1[4];
    v15 = v13;
    v16 = a1[6];
    runOnMainQueue(v14);

  }
}

void __52__HMHome_HMUser___manageUsersWithCompletionHandler___block_invoke_1661(uint64_t a1)
{
  HMUserListViewController *v2;
  uint64_t v3;
  uint64_t v4;
  HMUserListViewController *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, void *);
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  _QWORD v15[4];
  id v16;

  v2 = [HMUserListViewController alloc];
  v3 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __52__HMHome_HMUser___manageUsersWithCompletionHandler___block_invoke_2;
  v15[3] = &unk_1E3AB5CA8;
  v4 = *(_QWORD *)(a1 + 32);
  v16 = *(id *)(a1 + 40);
  v5 = -[HMUserListViewController initWithHome:loadHandler:](v2, "initWithHome:loadHandler:", v4, v15);
  v8 = v3;
  v9 = 3221225472;
  v10 = __52__HMHome_HMUser___manageUsersWithCompletionHandler___block_invoke_3;
  v11 = &unk_1E3AB53A8;
  v6 = *(id *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 32);
  v12 = v6;
  v13 = v7;
  v14 = *(id *)(a1 + 48);
  -[HMUserListViewController setCompletionHandler:](v5, "setCompletionHandler:", &v8);
  -[HMUserListViewController presentWhenLoaded](v5, "presentWhenLoaded", v8, v9, v10, v11);

}

uint64_t __52__HMHome_HMUser___manageUsersWithCompletionHandler___block_invoke_2(uint64_t result, uint64_t a2)
{
  if (a2)
    return objc_msgSend(*(id *)(result + 32), "setViewServiceActive:", 0);
  return result;
}

void __52__HMHome_HMUser___manageUsersWithCompletionHandler___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "setViewServiceActive:", 0);
  objc_msgSend(*(id *)(a1 + 40), "context");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "delegateCaller");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 48), v4);

}

uint64_t __51__HMHome_HMUser__manageUsersWithCompletionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_manageUsersWithCompletionHandler:", *(_QWORD *)(a1 + 40));
}

uint64_t __34__HMHome_HMUser__restrictedGuests__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "homeAccessControl");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isRestrictedGuest");

  return v3;
}

uint64_t __31__HMHome_HMUser__communalUsers__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "homeAccessControl");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isRestrictedGuest") ^ 1;

  return v3;
}

- (void)addTrigger:(HMTrigger *)trigger completionHandler:(void *)completion
{
  HMTrigger *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[5];
  HMTrigger *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = trigger;
  v7 = completion;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMTrigger) addTrigger:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __50__HMHome_HMTrigger__addTrigger_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v23 = v6;
    v24 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2080;
      v28 = "-[HMHome(HMTrigger) addTrigger:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, void *))v7 + 2))(v7, v15);

  }
}

- (void)_addTrigger:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  HMHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  int v28;
  void *v29;
  void *v30;
  __CFString *v31;
  __CFString *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  __CFString *v39;
  void *v40;
  BOOL v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  HMHome *v47;
  NSObject *v48;
  void *v49;
  id v50;
  _QWORD v51[4];
  id v52;
  id v53;
  _BYTE *v54;
  id v55;
  id location;
  _BYTE buf[24];
  uint64_t (*v58)(uint64_t, uint64_t);
  void (*v59)(uint64_t);
  id v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMTrigger) _addTrigger:completionHandler:]", CFSTR("clientCompletionHandler"));
    v45 = objc_claimAutoreleasedReturnValue();
    v46 = (void *)MEMORY[0x1A1AC1AAC]();
    v47 = self;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v49;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v45;
      _os_log_impl(&dword_19B1B0000, v48, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v46);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v45, 0);
    v50 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v50);
  }
  v9 = (void *)v8;
  if (v8)
  {
    if (v6)
    {
      objc_msgSend(v6, "name");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "length");
      if (HMMaxLengthForNaming__hmf_once_t5 != -1)
        dispatch_once(&HMMaxLengthForNaming__hmf_once_t5, &__block_literal_global_40);
      v12 = HMMaxLengthForNaming__hmf_once_v6;

      if (v11 > v12)
      {
        v13 = (void *)MEMORY[0x1A1AC1AAC]();
        v14 = self;
        HMFGetOSLogHandle();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v16;
          _os_log_impl(&dword_19B1B0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Trigger name is longer than the pre-defined max length", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v13);
        objc_msgSend(v9, "delegateCaller");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 46);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "callCompletion:error:", v7, v18);

        goto LABEL_19;
      }
      -[HMHome currentTriggers](self, "currentTriggers");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend(v27, "containsObject:", v6);

      if (v28)
      {
        -[HMHome context](self, "context");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "delegateCaller");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 13, 0);
        v26 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        objc_msgSend(v6, "home");
        v29 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v29)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v31 = CFSTR("kAddTimerTriggerRequestKey");
            v32 = CFSTR("kAddTimerTriggerRequestKey");
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              -[HMHome context](self, "context");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "delegateCaller");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 22, 0);
              v26 = objc_claimAutoreleasedReturnValue();
              goto LABEL_18;
            }
            v39 = CFSTR("kAddEventTriggerRequestKey");
            objc_msgSend(v6, "predicate");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            v41 = +[HMPredicateUtilities validatePredicate:](HMPredicateUtilities, "validatePredicate:", v40);

            if (!v41)
            {
              -[HMHome context](self, "context");
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v42, "delegateCaller");
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 3, 0);
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v43, "callCompletion:error:", v7, v44);

              goto LABEL_19;
            }
            v31 = CFSTR("kAddEventTriggerRequestKey");
          }
          objc_msgSend(v6, "_serializeForAdd");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = (void *)MEMORY[0x1E0D285F8];
          -[HMHome messageDestination](self, "messageDestination");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "messageWithName:destination:payload:", v31, v35, v33);
          v36 = (void *)objc_claimAutoreleasedReturnValue();

          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x3032000000;
          v58 = __Block_byref_object_copy__26674;
          v59 = __Block_byref_object_dispose__26675;
          v37 = v6;
          v60 = v37;
          objc_initWeak(&location, self);
          v51[0] = MEMORY[0x1E0C809B0];
          v51[1] = 3221225472;
          v51[2] = __51__HMHome_HMTrigger___addTrigger_completionHandler___block_invoke;
          v51[3] = &unk_1E3AB1970;
          objc_copyWeak(&v55, &location);
          v52 = v37;
          v54 = buf;
          v53 = v7;
          objc_msgSend(v36, "setResponseHandler:", v51);
          objc_msgSend(v9, "messageDispatcher");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "sendMessage:completionHandler:", v36, 0);

          objc_destroyWeak(&v55);
          objc_destroyWeak(&location);
          _Block_object_dispose(buf, 8);

          goto LABEL_19;
        }
        -[HMHome context](self, "context");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "delegateCaller");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 11, 0);
        v26 = objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      -[HMHome context](self, "context");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "delegateCaller");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 20, 0);
      v26 = objc_claimAutoreleasedReturnValue();
    }
LABEL_18:
    v30 = (void *)v26;
    objc_msgSend(v25, "callCompletion:error:", v7, v26);

    goto LABEL_19;
  }
  v19 = (void *)MEMORY[0x1A1AC1AAC]();
  v20 = self;
  HMFGetOSLogHandle();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v22;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "-[HMHome(HMTrigger) _addTrigger:completionHandler:]";
    _os_log_impl(&dword_19B1B0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v19);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, void *))v7 + 2))(v7, v23);

LABEL_19:
}

- (void)removeTrigger:(HMTrigger *)trigger completionHandler:(void *)completion
{
  HMTrigger *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[5];
  HMTrigger *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = trigger;
  v7 = completion;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMTrigger) removeTrigger:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __53__HMHome_HMTrigger__removeTrigger_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v23 = v6;
    v24 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2080;
      v28 = "-[HMHome(HMTrigger) removeTrigger:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, void *))v7 + 2))(v7, v15);

  }
}

- (void)_removeTrigger:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  HMHome *v30;
  NSObject *v31;
  void *v32;
  id v33;
  _QWORD v34[4];
  id v35;
  id v36;
  const __CFString *v37;
  void *v38;
  _BYTE location[12];
  __int16 v40;
  const char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMTrigger) _removeTrigger:completionHandler:]", CFSTR("completion"));
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = (void *)MEMORY[0x1A1AC1AAC]();
    v30 = self;
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)location = 138543618;
      *(_QWORD *)&location[4] = v32;
      v40 = 2112;
      v41 = (const char *)v28;
      _os_log_impl(&dword_19B1B0000, v31, OS_LOG_TYPE_ERROR, "%{public}@%@", location, 0x16u);

    }
    objc_autoreleasePoolPop(v29);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v28, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v33);
  }
  v9 = (void *)v8;
  if (v8)
  {
    if (v6)
    {
      -[HMHome currentTriggers](self, "currentTriggers");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "containsObject:", v6);

      if ((v11 & 1) != 0)
      {
        v12 = (void *)MEMORY[0x1E0D285F8];
        -[HMHome messageDestination](self, "messageDestination");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = CFSTR("kTriggerUUID");
        objc_msgSend(v6, "uuid");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "UUIDString");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = v15;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "messageWithName:destination:payload:", CFSTR("kRemoveTriggerRequestKey"), v13, v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        objc_initWeak((id *)location, self);
        v34[0] = MEMORY[0x1E0C809B0];
        v34[1] = 3221225472;
        v34[2] = __54__HMHome_HMTrigger___removeTrigger_completionHandler___block_invoke;
        v34[3] = &unk_1E3AB4AE0;
        objc_copyWeak(&v36, (id *)location);
        v35 = v7;
        objc_msgSend(v17, "setResponseHandler:", v34);
        objc_msgSend(v9, "messageDispatcher");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "sendMessage:completionHandler:", v17, 0);

        objc_destroyWeak(&v36);
        objc_destroyWeak((id *)location);

        goto LABEL_12;
      }
      -[HMHome context](self, "context");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "delegateCaller");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 2, 0);
      v26 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[HMHome context](self, "context");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "delegateCaller");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 20, 0);
      v26 = objc_claimAutoreleasedReturnValue();
    }
    v27 = (void *)v26;
    objc_msgSend(v25, "callCompletion:error:", v7, v26);

    goto LABEL_12;
  }
  v19 = (void *)MEMORY[0x1A1AC1AAC]();
  v20 = self;
  HMFGetOSLogHandle();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 138543618;
    *(_QWORD *)&location[4] = v22;
    v40 = 2080;
    v41 = "-[HMHome(HMTrigger) _removeTrigger:completionHandler:]";
    _os_log_impl(&dword_19B1B0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", location, 0x16u);

  }
  objc_autoreleasePoolPop(v19);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, void *))v7 + 2))(v7, v23);

LABEL_12:
}

- (void)userDidConfirmExecution:(BOOL)a3 ofTrigger:(id)a4 completionHandler:(id)a5
{
  id v8;
  void (**v9)(id, void *);
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  HMHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  HMHome *v22;
  NSObject *v23;
  void *v24;
  id v25;
  _QWORD block[5];
  id v27;
  void (**v28)(id, void *);
  BOOL v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = (void (**)(id, void *))a5;
  -[HMHome context](self, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMTrigger) userDidConfirmExecution:ofTrigger:completionHandler:]", CFSTR("completion"));
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)MEMORY[0x1A1AC1AAC]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v24;
      v32 = 2112;
      v33 = (const char *)v20;
      _os_log_impl(&dword_19B1B0000, v23, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v20, 0);
    v25 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v25);
  }
  v11 = v10;
  if (!v10)
  {
    v13 = (void *)MEMORY[0x1A1AC1AAC]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v16;
      v32 = 2080;
      v33 = "-[HMHome(HMTrigger) userDidConfirmExecution:ofTrigger:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v9[2](v9, v17);
    goto LABEL_9;
  }
  if (!v8)
  {
    -[HMHome context](self, "context");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "delegateCaller");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "callCompletion:error:", v9, v19);

LABEL_9:
    goto LABEL_10;
  }
  objc_msgSend(v10, "queue");
  v12 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __73__HMHome_HMTrigger__userDidConfirmExecution_ofTrigger_completionHandler___block_invoke;
  block[3] = &unk_1E3AB19C0;
  block[4] = self;
  v29 = a3;
  v27 = v8;
  v28 = v9;
  dispatch_async(v12, block);

LABEL_10:
}

- (void)userDidConfirmExecution:(BOOL)a3 ofTriggerWithIdentifier:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  HMHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  HMHome *v20;
  NSObject *v21;
  void *v22;
  id v23;
  _QWORD block[5];
  id v25;
  id v26;
  BOOL v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = a5;
  -[HMHome context](self, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMTrigger) userDidConfirmExecution:ofTriggerWithIdentifier:completionHandler:]", CFSTR("completion"));
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = (void *)MEMORY[0x1A1AC1AAC]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v22;
      v30 = 2112;
      v31 = (const char *)v18;
      _os_log_impl(&dword_19B1B0000, v21, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v18, 0);
    v23 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v23);
  }
  v11 = v10;
  if (v10)
  {
    objc_msgSend(v10, "queue");
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __87__HMHome_HMTrigger__userDidConfirmExecution_ofTriggerWithIdentifier_completionHandler___block_invoke;
    block[3] = &unk_1E3AB19C0;
    block[4] = self;
    v27 = a3;
    v25 = v8;
    v26 = v9;
    dispatch_async(v12, block);

  }
  else
  {
    v13 = (void *)MEMORY[0x1A1AC1AAC]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v16;
      v30 = 2080;
      v31 = "-[HMHome(HMTrigger) userDidConfirmExecution:ofTriggerWithIdentifier:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v9 + 2))(v9, v17);

  }
}

- (void)_userDidConfirmExecution:(BOOL)a3 ofTriggerWithIdentifier:(id)a4 completionHandler:(id)a5
{
  _BOOL8 v6;
  id v8;
  void (**v9)(id, void *);
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  HMHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  HMHome *v30;
  NSObject *v31;
  void *v32;
  id v33;
  _QWORD v34[4];
  id v35;
  void (**v36)(id, void *);
  _QWORD v37[2];
  _QWORD v38[2];
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v6 = a3;
  v43 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = (void (**)(id, void *))a5;
  -[HMHome context](self, "context");
  v10 = objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMTrigger) _userDidConfirmExecution:ofTriggerWithIdentifier:completionHandler:]", CFSTR("completion"));
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = (void *)MEMORY[0x1A1AC1AAC]();
    v30 = self;
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v32;
      v41 = 2112;
      v42 = (const char *)v28;
      _os_log_impl(&dword_19B1B0000, v31, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v29);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v28, 0);
    v33 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v33);
  }
  v11 = (void *)v10;
  if (!v10)
  {
    v21 = (void *)MEMORY[0x1A1AC1AAC]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v24;
      v41 = 2080;
      v42 = "-[HMHome(HMTrigger) _userDidConfirmExecution:ofTriggerWithIdentifier:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v9[2](v9, v25);
    goto LABEL_9;
  }
  if (!v8)
  {
    -[HMHome context](self, "context");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "delegateCaller");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "callCompletion:error:", v9, v27);

LABEL_9:
    goto LABEL_10;
  }
  v37[0] = CFSTR("kTriggerUUID");
  v37[1] = CFSTR("kTriggerExecuteConfirmationKey");
  v38[0] = v8;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v6);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v38[1] = v12;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v38, v37, 2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = objc_alloc(MEMORY[0x1E0D285F8]);
  v15 = objc_alloc(MEMORY[0x1E0D285D8]);
  -[HMHome uuid](self, "uuid");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_msgSend(v15, "initWithTarget:", v16);
  v18 = (void *)objc_msgSend(v14, "initWithName:destination:payload:", CFSTR("kConfirmExecuteTriggerRequestKey"), v17, v13);

  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = __88__HMHome_HMTrigger___userDidConfirmExecution_ofTriggerWithIdentifier_completionHandler___block_invoke;
  v34[3] = &unk_1E3AB59B8;
  v19 = v11;
  v35 = v19;
  v36 = v9;
  objc_msgSend(v18, "setResponseHandler:", v34);
  objc_msgSend(v19, "messageDispatcher");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "sendMessage:", v18);

LABEL_10:
}

- (void)removeMediaSystem:(id)a3 completionHandler:(id)a4
{
  char *v6;
  void (**v7)(id, void *);
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  HMHome *v39;
  NSObject *v40;
  void *v41;
  id v42;
  uint64_t v43;
  void *v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  const char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v6 = (char *)a3;
  v7 = (void (**)(id, void *))a4;
  v8 = (void *)MEMORY[0x1A1AC1AAC]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v46 = v11;
    v47 = 2112;
    v48 = v6;
    _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Sending request to remove media system: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  -[HMHome context](v9, "context");
  v12 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMTrigger) removeMediaSystem:completionHandler:]", CFSTR("completion"));
    v37 = objc_claimAutoreleasedReturnValue();
    v38 = (void *)MEMORY[0x1A1AC1AAC]();
    v39 = v9;
    HMFGetOSLogHandle();
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v46 = v41;
      v47 = 2112;
      v48 = (const char *)v37;
      _os_log_impl(&dword_19B1B0000, v40, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v38);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v37, 0);
    v42 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v42);
  }
  v13 = (void *)v12;
  if (v12)
  {
    if (v6)
    {
      -[HMHome mediaSystemStageManager](v9, "mediaSystemStageManager");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "mediaSystemWithUUID:", v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (v16)
      {
        v43 = kMediaSystemUUIDCodingKey;
        objc_msgSend(v6, "uuid");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "UUIDString");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = v18;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v44, &v43, 1);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        v20 = objc_alloc(MEMORY[0x1E0D285F8]);
        v21 = kRemoveMediaSystemRequest;
        v22 = objc_alloc(MEMORY[0x1E0D285D8]);
        -[HMHome uuid](v9, "uuid");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = (void *)objc_msgSend(v22, "initWithTarget:", v23);
        v25 = (void *)objc_msgSend(v20, "initWithName:destination:payload:", v21, v24, v19);

        objc_msgSend(v25, "identifier");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMHome removeMediaSystemRequestResponseHandlerWithMediaSystem:context:messageIdentifier:completionHandler:](v9, "removeMediaSystemRequestResponseHandlerWithMediaSystem:context:messageIdentifier:completionHandler:", v6, v13, v26, v7);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "setResponseHandler:", v27);

        objc_msgSend(v13, "messageDispatcher");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "sendMessage:", v25);

        goto LABEL_14;
      }
      -[HMHome context](v9, "context");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "delegateCaller");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = (void *)MEMORY[0x1E0CB35C8];
      v35 = 2;
    }
    else
    {
      -[HMHome context](v9, "context");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "delegateCaller");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = (void *)MEMORY[0x1E0CB35C8];
      v35 = 20;
    }
    objc_msgSend(v34, "hmErrorWithCode:", v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "callCompletion:error:", v7, v36);

    goto LABEL_14;
  }
  v29 = (void *)MEMORY[0x1A1AC1AAC]();
  v30 = v9;
  HMFGetOSLogHandle();
  v31 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v46 = v32;
    v47 = 2080;
    v48 = "-[HMHome(HMTrigger) removeMediaSystem:completionHandler:]";
    _os_log_impl(&dword_19B1B0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v29);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v7[2](v7, v19);
LABEL_14:

}

- (id)removeMediaSystemRequestResponseHandlerWithMediaSystem:(id)a3 context:(id)a4 messageIdentifier:(id)a5 completionHandler:(id)a6
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  _QWORD v17[5];
  id v18;
  id v19;
  id v20;

  v9 = a3;
  v10 = a4;
  v11 = a6;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __120__HMHome_HMTrigger__removeMediaSystemRequestResponseHandlerWithMediaSystem_context_messageIdentifier_completionHandler___block_invoke;
  v17[3] = &unk_1E3AB4B08;
  v17[4] = self;
  v18 = v9;
  v19 = v10;
  v20 = v11;
  v12 = v11;
  v13 = v10;
  v14 = v9;
  v15 = _Block_copy(v17);

  return v15;
}

void __120__HMHome_HMTrigger__removeMediaSystemRequestResponseHandlerWithMediaSystem_context_messageIdentifier_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x1A1AC1AAC]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 40);
      v18 = 138543874;
      v19 = v10;
      v20 = 2112;
      v21 = v11;
      v22 = 2112;
      v23 = v5;
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Send remove request for media system: %@ responded with error: %@", (uint8_t *)&v18, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 48), "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    v14 = *(_QWORD *)(a1 + 56);
    v15 = v5;
  }
  else
  {
    v16 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "stageRemovedMediaSystemUUID:", v17);

    objc_msgSend(*(id *)(a1 + 48), "delegateCaller");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    v14 = *(_QWORD *)(a1 + 56);
    v15 = 0;
  }
  objc_msgSend(v12, "callCompletion:error:", v14, v15);

}

void __88__HMHome_HMTrigger___userDidConfirmExecution_ofTriggerWithIdentifier_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "delegateCaller");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 40), v4);

}

uint64_t __87__HMHome_HMTrigger__userDidConfirmExecution_ofTriggerWithIdentifier_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_userDidConfirmExecution:ofTriggerWithIdentifier:completionHandler:", *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __73__HMHome_HMTrigger__userDidConfirmExecution_ofTrigger_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(unsigned __int8 *)(a1 + 56);
  v3 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "uniqueIdentifier");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_userDidConfirmExecution:ofTriggerWithIdentifier:completionHandler:", v2, v4, *(_QWORD *)(a1 + 48));

}

void __54__HMHome_HMTrigger___removeTrigger_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v9
    || !v5
    || objc_msgSend(WeakRetained, "_removeTriggerFromResponse:completion:", v5, *(_QWORD *)(a1 + 32)))
  {
    objc_msgSend(WeakRetained, "context");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "delegateCaller");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "callCompletion:error:", *(_QWORD *)(a1 + 32), v9);

  }
}

uint64_t __53__HMHome_HMTrigger__removeTrigger_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeTrigger:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __51__HMHome_HMTrigger___addTrigger_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  char isKindOfClass;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (v12 || !v5)
    goto LABEL_7;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if ((isKindOfClass & 1) != 0)
  {
    if ((objc_msgSend(WeakRetained, "_addTimerTriggerFromResponse:withTimerTrigger:completion:", v5, v9, v8) & 1) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (objc_msgSend(WeakRetained, "_addEventTriggerFromResponse:withEventTrigger:completion:", v5, v9, v8))
  {
LABEL_7:
    objc_msgSend(WeakRetained, "context");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "callCompletion:error:", *(_QWORD *)(a1 + 40), v12);

  }
LABEL_8:

}

uint64_t __50__HMHome_HMTrigger__addTrigger_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_addTrigger:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

- (void)setAutomaticSoftwareUpdateEnabled:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_automaticSoftwareUpdateEnabled = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)updateAutomaticSoftwareUpdateEnabled:(BOOL)a3 completionHandler:(id)a4
{
  id v6;
  void *v7;
  HMHome *v8;
  NSObject *v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  HMHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  HMHome *v22;
  NSObject *v23;
  void *v24;
  id v25;
  _QWORD block[5];
  id v27;
  id v28;
  BOOL v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v11 = (char *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v31 = v10;
    v32 = 2112;
    v33 = v11;
    _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Updating automatic software update to: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  -[HMHome context](v8, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMSoftwareUpdate) updateAutomaticSoftwareUpdateEnabled:completionHandler:]", CFSTR("completionHandler"));
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)MEMORY[0x1A1AC1AAC]();
    v22 = v8;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v24;
      v32 = 2112;
      v33 = (const char *)v20;
      _os_log_impl(&dword_19B1B0000, v23, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v20, 0);
    v25 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v25);
  }
  v13 = v12;
  if (v12)
  {
    objc_msgSend(v12, "queue");
    v14 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __83__HMHome_HMSoftwareUpdate__updateAutomaticSoftwareUpdateEnabled_completionHandler___block_invoke;
    block[3] = &unk_1E3AB19C0;
    block[4] = v8;
    v29 = a3;
    v28 = v6;
    v27 = v13;
    dispatch_async(v14, block);

  }
  else
  {
    v15 = (void *)MEMORY[0x1A1AC1AAC]();
    v16 = v8;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v18;
      v32 = 2080;
      v33 = "-[HMHome(HMSoftwareUpdate) updateAutomaticSoftwareUpdateEnabled:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v19);

  }
}

- (BOOL)isAutomaticThirdPartyAccessorySoftwareUpdateEnabled
{
  HMHome *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_automaticThirdPartyAccessorySoftwareUpdateEnabled;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (void)setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_automaticThirdPartyAccessorySoftwareUpdateEnabled = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)updateAutomaticThirdPartyAccessorySoftwareUpdateEnabled:(BOOL)a3 completionHandler:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  HMHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  id v20;
  _QWORD block[5];
  id v22;
  id v23;
  BOOL v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMHome context](self, "context");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMSoftwareUpdate) updateAutomaticThirdPartyAccessorySoftwareUpdateEnabled:completionHandler:]", CFSTR("completionHandler"));
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v19;
      v27 = 2112;
      v28 = (const char *)v15;
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v15, 0);
    v20 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v20);
  }
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "queue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __102__HMHome_HMSoftwareUpdate__updateAutomaticThirdPartyAccessorySoftwareUpdateEnabled_completionHandler___block_invoke;
    block[3] = &unk_1E3AB19C0;
    block[4] = self;
    v24 = a3;
    v23 = v6;
    v22 = v8;
    dispatch_async(v9, block);

  }
  else
  {
    v10 = (void *)MEMORY[0x1A1AC1AAC]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v13;
      v27 = 2080;
      v28 = "-[HMHome(HMSoftwareUpdate) updateAutomaticThirdPartyAccessorySoftwareUpdateEnabled:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v14);

  }
}

void __102__HMHome_HMSoftwareUpdate__updateAutomaticThirdPartyAccessorySoftwareUpdateEnabled_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  char v12;
  id location;
  const __CFString *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0D285F8];
  v3 = (id *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 32), "messageDestination");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = CFSTR("kEnabledKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 56));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messageWithName:destination:payload:", CFSTR("HM.afue"), v4, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_initWeak(&location, *v3);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __102__HMHome_HMSoftwareUpdate__updateAutomaticThirdPartyAccessorySoftwareUpdateEnabled_completionHandler___block_invoke_2;
  v9[3] = &unk_1E3AB1998;
  objc_copyWeak(&v11, &location);
  v12 = *(_BYTE *)(a1 + 56);
  v10 = *(id *)(a1 + 48);
  objc_msgSend(v7, "setResponseHandler:", v9);
  objc_msgSend(*(id *)(a1 + 40), "messageDispatcher");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "sendMessage:completionHandler:", v7, 0);

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);

}

void __102__HMHome_HMSoftwareUpdate__updateAutomaticThirdPartyAccessorySoftwareUpdateEnabled_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
    objc_msgSend(WeakRetained, "setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:", *(unsigned __int8 *)(a1 + 48));
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(WeakRetained, "context");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 32), v6);

  }
}

void __83__HMHome_HMSoftwareUpdate__updateAutomaticSoftwareUpdateEnabled_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  char v12;
  id location;
  const __CFString *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0D285F8];
  v3 = (id *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 32), "messageDestination");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = CFSTR("kEnabledKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 56));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messageWithName:destination:payload:", CFSTR("HM.aue"), v4, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_initWeak(&location, *v3);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __83__HMHome_HMSoftwareUpdate__updateAutomaticSoftwareUpdateEnabled_completionHandler___block_invoke_2;
  v9[3] = &unk_1E3AB1998;
  objc_copyWeak(&v11, &location);
  v12 = *(_BYTE *)(a1 + 56);
  v10 = *(id *)(a1 + 48);
  objc_msgSend(v7, "setResponseHandler:", v9);
  objc_msgSend(*(id *)(a1 + 40), "messageDispatcher");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "sendMessage:completionHandler:", v7, 0);

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);

}

void __83__HMHome_HMSoftwareUpdate__updateAutomaticSoftwareUpdateEnabled_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
    objc_msgSend(WeakRetained, "setAutomaticSoftwareUpdateEnabled:", *(unsigned __int8 *)(a1 + 48));
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(WeakRetained, "context");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 32), v6);

  }
}

- (void)addServiceGroupWithName:(NSString *)serviceGroupName completionHandler:(void *)completion
{
  NSString *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[5];
  NSString *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = serviceGroupName;
  v7 = completion;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMServiceGroup) addServiceGroupWithName:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __68__HMHome_HMServiceGroup__addServiceGroupWithName_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v23 = v6;
    v24 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2080;
      v28 = "-[HMHome(HMServiceGroup) addServiceGroupWithName:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, _QWORD, void *))v7 + 2))(v7, 0, v15);

  }
}

- (void)_addServiceGroupWithName:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  HMHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  HMHome *v28;
  id v29;
  const __CFString *v30;
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  const char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    if (v6)
    {
      v10 = objc_msgSend(v6, "length");
      if (HMMaxLengthForNaming__hmf_once_t5 != -1)
        dispatch_once(&HMMaxLengthForNaming__hmf_once_t5, &__block_literal_global_40);
      if (v10 <= HMMaxLengthForNaming__hmf_once_v6)
      {
        -[HMHome serviceGroupWithName:](self, "serviceGroupWithName:", v6);
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v22)
        {
          -[HMHome uuid](self, "uuid");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = CFSTR("kServiceGroupName");
          v31 = v6;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26[0] = MEMORY[0x1E0C809B0];
          v26[1] = 3221225472;
          v26[2] = __69__HMHome_HMServiceGroup___addServiceGroupWithName_completionHandler___block_invoke;
          v26[3] = &unk_1E3AB60C8;
          v27 = v9;
          v28 = self;
          v29 = v7;
          -[_HMContext sendMessage:target:payload:responseHandler:](v27, CFSTR("kAddServiceGroupRequestKey"), v24, v25, v26);

          goto LABEL_18;
        }
        objc_msgSend(v9, "delegateCaller");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = (void *)MEMORY[0x1E0CB35C8];
        v17 = 13;
      }
      else
      {
        v11 = (void *)MEMORY[0x1A1AC1AAC]();
        v12 = self;
        HMFGetOSLogHandle();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v33 = v14;
          _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Service group name is longer than the pre-defined max length", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v11);
        objc_msgSend(v9, "delegateCaller");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = (void *)MEMORY[0x1E0CB35C8];
        v17 = 46;
      }
    }
    else
    {
      objc_msgSend(v8, "delegateCaller");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = (void *)MEMORY[0x1E0CB35C8];
      v17 = 20;
    }
    objc_msgSend(v16, "hmErrorWithCode:", v17);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "callCompletion:serviceGroup:error:", v7, 0, v23);

    goto LABEL_17;
  }
  v18 = (void *)MEMORY[0x1A1AC1AAC]();
  v19 = self;
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v33 = v21;
    v34 = 2080;
    v35 = "-[HMHome(HMServiceGroup) _addServiceGroupWithName:completionHandler:]";
    _os_log_impl(&dword_19B1B0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v18);
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v7 + 2))(v7, 0, v15);
LABEL_17:

  }
LABEL_18:

}

- (void)removeServiceGroup:(HMServiceGroup *)group completionHandler:(void *)completion
{
  HMServiceGroup *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[5];
  HMServiceGroup *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = group;
  v7 = completion;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMServiceGroup) removeServiceGroup:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __63__HMHome_HMServiceGroup__removeServiceGroup_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v23 = v6;
    v24 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2080;
      v28 = "-[HMHome(HMServiceGroup) removeServiceGroup:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, void *))v7 + 2))(v7, v15);

  }
}

- (void)_removeServiceGroup:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  HMHome *v26;
  id v27;
  id v28;
  const __CFString *v29;
  void *v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    if (v6)
    {
      -[HMHome currentServiceGroups](self, "currentServiceGroups");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "containsObject:", v6);

      if ((v11 & 1) != 0)
      {
        objc_msgSend(v6, "uuid");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMHome uuid](self, "uuid");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = CFSTR("kServiceGroupUUID");
        objc_msgSend(v12, "UUIDString");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = v14;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v24[0] = MEMORY[0x1E0C809B0];
        v24[1] = 3221225472;
        v24[2] = __64__HMHome_HMServiceGroup___removeServiceGroup_completionHandler___block_invoke;
        v24[3] = &unk_1E3AB4B08;
        v25 = v9;
        v27 = v12;
        v28 = v7;
        v26 = self;
        v16 = v12;
        -[_HMContext sendMessage:target:payload:responseHandler:](v25, CFSTR("kRemoveServiceGroupRequestKey"), v13, v15, v24);

LABEL_12:
        goto LABEL_13;
      }
      objc_msgSend(v9, "delegateCaller");
      v16 = (id)objc_claimAutoreleasedReturnValue();
      v21 = (void *)MEMORY[0x1E0CB35C8];
      v22 = 2;
    }
    else
    {
      objc_msgSend(v8, "delegateCaller");
      v16 = (id)objc_claimAutoreleasedReturnValue();
      v21 = (void *)MEMORY[0x1E0CB35C8];
      v22 = 20;
    }
    objc_msgSend(v21, "hmErrorWithCode:", v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "callCompletion:error:", v7, v23);

    goto LABEL_12;
  }
  v17 = (void *)MEMORY[0x1A1AC1AAC]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v32 = v20;
    v33 = 2080;
    v34 = "-[HMHome(HMServiceGroup) _removeServiceGroup:completionHandler:]";
    _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v17);
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v16 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, id))v7 + 2))(v7, v16);
    goto LABEL_12;
  }
LABEL_13:

}

void __64__HMHome_HMServiceGroup___removeServiceGroup_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "callCompletion:error:", *(_QWORD *)(a1 + 56), v6);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "serviceGroupWithUUID:", *(_QWORD *)(a1 + 48));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      objc_msgSend(*(id *)(a1 + 40), "currentServiceGroups");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "removeObject:", v3);

      objc_msgSend(v3, "_unconfigure");
    }
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 56), 0);

  }
}

uint64_t __63__HMHome_HMServiceGroup__removeServiceGroup_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeServiceGroup:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __69__HMHome_HMServiceGroup___addServiceGroupWithName_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  HMServiceGroup *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  if (v12)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "callCompletion:serviceGroup:error:", *(_QWORD *)(a1 + 48), 0, v12);
  }
  else
  {
    objc_msgSend(v5, "hmf_UUIDForKey:", CFSTR("kServiceGroupUUID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "hmf_stringForKey:", CFSTR("kServiceGroupName"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[HMServiceGroup initWithName:uuid:]([HMServiceGroup alloc], "initWithName:uuid:", v7, v6);
    objc_msgSend(*(id *)(a1 + 40), "context");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMServiceGroup __configureWithContext:home:](v8, "__configureWithContext:home:", v9, *(_QWORD *)(a1 + 40));

    objc_msgSend(*(id *)(a1 + 40), "currentServiceGroups");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "addObject:", v8);

    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "callCompletion:serviceGroup:error:", *(_QWORD *)(a1 + 48), v8, 0);

  }
}

uint64_t __68__HMHome_HMServiceGroup__addServiceGroupWithName_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_addServiceGroupWithName:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

- (void)addRoomWithName:(NSString *)roomName completionHandler:(void *)completion
{
  NSString *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[5];
  NSString *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = roomName;
  v7 = completion;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMRoom) addRoomWithName:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __52__HMHome_HMRoom__addRoomWithName_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v23 = v6;
    v24 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2080;
      v28 = "-[HMHome(HMRoom) addRoomWithName:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, _QWORD, void *))v7 + 2))(v7, 0, v15);

  }
}

- (void)_addRoomWithName:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  void *v46;
  HMHome *v47;
  NSObject *v48;
  void *v49;
  id v50;
  void *v51;
  _QWORD v52[4];
  id v53;
  id v54;
  id v55;
  _QWORD aBlock[4];
  id v57;
  id v58;
  id v59;
  const __CFString *v60;
  void *v61;
  uint8_t buf[4];
  void *v63;
  __int16 v64;
  const char *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMRoom) _addRoomWithName:completionHandler:]", CFSTR("completion"));
    v45 = objc_claimAutoreleasedReturnValue();
    v46 = (void *)MEMORY[0x1A1AC1AAC]();
    v47 = self;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v63 = v49;
      v64 = 2112;
      v65 = (const char *)v45;
      _os_log_impl(&dword_19B1B0000, v48, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v46);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v45, 0);
    v50 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v50);
  }
  v9 = (void *)v8;
  if (v8)
  {
    if (v6)
    {
      v10 = objc_msgSend(v6, "length");
      if (HMMaxLengthForNaming__hmf_once_t5 != -1)
        dispatch_once(&HMMaxLengthForNaming__hmf_once_t5, &__block_literal_global_40);
      if (v10 <= HMMaxLengthForNaming__hmf_once_v6)
      {
        v25 = (void *)objc_msgSend(v6, "copy");
        -[HMHome roomWithName:](self, "roomWithName:", v25);
        v26 = (void *)objc_claimAutoreleasedReturnValue();

        if (v26)
        {
          -[HMHome context](self, "context");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "delegateCaller");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 13, 0);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v28, "callCompletion:room:error:", v7, 0, v29);

        }
        else
        {
          v30 = objc_alloc(MEMORY[0x1E0D285D8]);
          -[HMHome messageTargetUUID](self, "messageTargetUUID");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v51 = (void *)objc_msgSend(v30, "initWithTarget:", v31);

          v32 = (void *)MEMORY[0x1E0D285F8];
          v60 = CFSTR("kRoomName");
          v61 = v25;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "messageWithName:destination:payload:", CFSTR("kAddRoomRequestKey"), v51, v33);
          v34 = (void *)objc_claimAutoreleasedReturnValue();

          objc_initWeak((id *)buf, self);
          v35 = MEMORY[0x1E0C809B0];
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 3221225472;
          aBlock[2] = __53__HMHome_HMRoom___addRoomWithName_completionHandler___block_invoke;
          aBlock[3] = &unk_1E3AB4B30;
          objc_copyWeak(&v59, (id *)buf);
          v57 = v25;
          v58 = v7;
          v36 = _Block_copy(aBlock);
          -[HMHome context](self, "context");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "pendingRequests");
          v38 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v34, "identifier");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          v40 = _Block_copy(v36);
          objc_msgSend(v38, "addCompletionBlock:forIdentifier:", v40, v39);

          v52[0] = v35;
          v52[1] = 3221225472;
          v52[2] = __53__HMHome_HMRoom___addRoomWithName_completionHandler___block_invoke_3;
          v52[3] = &unk_1E3AB60C8;
          v41 = v38;
          v53 = v41;
          v42 = v39;
          v54 = v42;
          v43 = v36;
          v55 = v43;
          objc_msgSend(v34, "setResponseHandler:", v52);
          objc_msgSend(v9, "messageDispatcher");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "sendMessage:completionHandler:", v34, 0);

          objc_destroyWeak(&v59);
          objc_destroyWeak((id *)buf);

        }
      }
      else
      {
        v11 = (void *)MEMORY[0x1A1AC1AAC]();
        v12 = self;
        HMFGetOSLogHandle();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v63 = v14;
          _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Room name is longer than the pre-defined max length", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v11);
        objc_msgSend(v9, "delegateCaller");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 46);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "callCompletion:room:error:", v7, 0, v16);

      }
    }
    else
    {
      -[HMHome context](self, "context");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "delegateCaller");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 20, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "callCompletion:room:error:", v7, 0, v24);

    }
  }
  else
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v63 = v20;
      v64 = 2080;
      v65 = "-[HMHome(HMRoom) _addRoomWithName:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v7 + 2))(v7, 0, v21);

  }
}

- (void)removeRoom:(HMRoom *)room completionHandler:(void *)completion
{
  HMRoom *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  _QWORD block[5];
  HMRoom *v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = room;
  v7 = completion;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __47__HMHome_HMRoom__removeRoom_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v16 = v6;
    v17 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v19 = v14;
      v20 = 2080;
      v21 = "-[HMHome(HMRoom) removeRoom:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
  }

}

- (void)_removeRoom:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  char v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  _QWORD v42[4];
  id v43;
  id v44;
  id v45;
  _QWORD aBlock[4];
  id v47;
  id v48;
  id v49;
  const __CFString *v50;
  void *v51;
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  const char *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    if (!v6)
    {
      -[HMHome context](self, "context");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "delegateCaller");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 20, 0);
      v15 = objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
    objc_msgSend(v6, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome(HMRoom) roomForEntireHome](self, "roomForEntireHome");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v9, "isEqual:", v11);

    if (v12)
    {
      -[HMHome context](self, "context");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "delegateCaller");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 29, 0);
      v15 = objc_claimAutoreleasedReturnValue();
LABEL_13:
      v40 = (void *)v15;
      objc_msgSend(v14, "callCompletion:error:", v7, v15);

      goto LABEL_14;
    }
    -[HMHome currentRooms](self, "currentRooms");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "containsObject:", v6);

    if ((v22 & 1) == 0)
    {
      -[HMHome context](self, "context");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "delegateCaller");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 2, 0);
      v15 = objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
    v23 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome messageTargetUUID](self, "messageTargetUUID");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = (void *)objc_msgSend(v23, "initWithTarget:", v24);

    v25 = (void *)MEMORY[0x1E0D285F8];
    v50 = CFSTR("kRoomUUID");
    objc_msgSend(v6, "uuid");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "UUIDString");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = v27;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "messageWithName:destination:payload:", CFSTR("kRemoveRoomRequestKey"), v41, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak((id *)buf, self);
    v30 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __48__HMHome_HMRoom___removeRoom_completionHandler___block_invoke;
    aBlock[3] = &unk_1E3AB5538;
    objc_copyWeak(&v49, (id *)buf);
    v47 = v6;
    v48 = v7;
    v31 = _Block_copy(aBlock);
    -[HMHome context](self, "context");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "pendingRequests");
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v29, "identifier");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = _Block_copy(v31);
    objc_msgSend(v33, "addCompletionBlock:forIdentifier:", v35, v34);

    v42[0] = v30;
    v42[1] = 3221225472;
    v42[2] = __48__HMHome_HMRoom___removeRoom_completionHandler___block_invoke_2;
    v42[3] = &unk_1E3AB60C8;
    v36 = v33;
    v43 = v36;
    v37 = v34;
    v44 = v37;
    v38 = v31;
    v45 = v38;
    objc_msgSend(v29, "setResponseHandler:", v42);
    objc_msgSend(v8, "messageDispatcher");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "sendMessage:completionHandler:", v29, 0);

    objc_destroyWeak(&v49);
    objc_destroyWeak((id *)buf);

  }
  else
  {
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v53 = v19;
      v54 = 2080;
      v55 = "-[HMHome(HMRoom) _removeRoom:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    if (v7)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void *))v7 + 2))(v7, v20);

    }
  }
LABEL_14:

}

void __48__HMHome_HMRoom___removeRoom_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = WeakRetained;
  if (!v3)
  {
    objc_msgSend(WeakRetained, "currentRooms");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "removeObject:", *(_QWORD *)(a1 + 32));

    objc_msgSend(*(id *)(a1 + 32), "_unconfigure");
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    objc_msgSend(v5, "zones", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v15;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v7);
          objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v11++), "_removeRoom:", *(_QWORD *)(a1 + 32));
        }
        while (v9 != v11);
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v9);
    }

  }
  objc_msgSend(v5, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "delegateCaller");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "callCompletion:error:", *(_QWORD *)(a1 + 40), v3);

}

void __48__HMHome_HMRoom___removeRoom_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  objc_msgSend(*(id *)(a1 + 32), "removeCompletionBlockForIdentifier:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

uint64_t __47__HMHome_HMRoom__removeRoom_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeRoom:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __53__HMHome_HMRoom___addRoomWithName_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  HMRoom *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  HMRoom *v16;
  _QWORD v17[4];
  HMRoom *v18;
  id v19;
  id v20;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (v5)
  {
    v8 = 0;
  }
  else
  {
    objc_msgSend(v6, "hmf_UUIDForKey:", CFSTR("kRoomUUID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      v8 = -[HMRoom initWithName:]([HMRoom alloc], "initWithName:", *(_QWORD *)(a1 + 32));
      -[HMRoom setUuid:](v8, "setUuid:", v9);
      objc_msgSend(WeakRetained, "context");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMRoom __configureWithContext:home:](v8, "__configureWithContext:home:", v10, WeakRetained);

      objc_msgSend(WeakRetained, "currentRooms");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "addObject:", v8);

      v5 = 0;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v5 = (id)objc_claimAutoreleasedReturnValue();
      v8 = 0;
    }

  }
  objc_msgSend(WeakRetained, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "delegateCaller");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __53__HMHome_HMRoom___addRoomWithName_completionHandler___block_invoke_2;
  v17[3] = &unk_1E3AB5C58;
  v14 = *(id *)(a1 + 40);
  v19 = v5;
  v20 = v14;
  v18 = v8;
  v15 = v5;
  v16 = v8;
  objc_msgSend(v13, "invokeBlock:", v17);

}

void __53__HMHome_HMRoom___addRoomWithName_completionHandler___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "removeCompletionBlockForIdentifier:", *(_QWORD *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

uint64_t __53__HMHome_HMRoom___addRoomWithName_completionHandler___block_invoke_2(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t __52__HMHome_HMRoom__addRoomWithName_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_addRoomWithName:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

- (id)userFromPayload:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  _QWORD v11[4];
  id v12;

  objc_msgSend(a3, "hmf_UUIDForKey:", CFSTR("HMMM.payload.key.user"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[HMHome currentUser](self, "currentUser");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isEqual:", v4);

    if (v7)
    {
      -[HMHome currentUser](self, "currentUser");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[HMHome users](self, "users");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __53__HMHome_HMModernMessagingInternal__userFromPayload___block_invoke;
      v11[3] = &unk_1E3AB1AF0;
      v12 = v4;
      objc_msgSend(v9, "na_firstObjectPassingTest:", v11);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (void)reRegisterHMMMHandlers
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  _QWORD v10[5];
  _QWORD v11[6];
  id v12;

  -[HMHome uuid](self, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "UUIDString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMMMLogOrigin originWithLogIdentifier:](HMMMLogOrigin, "originWithLogIdentifier:", v4);
  v9 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_lock_with_options();
  -[HMHome hmModernMessagingOptionsByMessageName](self, "hmModernMessagingOptionsByMessageName");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __59__HMHome_HMModernMessagingInternal__reRegisterHMMMHandlers__block_invoke;
  v11[3] = &unk_1E3AB1B18;
  v11[4] = v9;
  v11[5] = self;
  v8 = v5;
  v12 = v8;
  objc_msgSend(v6, "na_each:", v11);

  os_unfair_lock_unlock(&self->_lock);
  v10[0] = v7;
  v10[1] = 3221225472;
  v10[2] = __59__HMHome_HMModernMessagingInternal__reRegisterHMMMHandlers__block_invoke_1836;
  v10[3] = &unk_1E3AB1B40;
  v10[4] = self;
  objc_msgSend(v8, "na_each:", v10);

}

void __59__HMHome_HMModernMessagingInternal__reRegisterHMMMHandlers__block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = a1[4];
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543874;
    v19 = v10;
    v20 = 2112;
    v21 = v5;
    v22 = 2112;
    v23 = v6;
    _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_INFO, "%{public}@Reregistering with homed for HMMM request handler with message name: %@ options: %@", (uint8_t *)&v18, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v6, "userRestriction"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v13, CFSTR("HMMM.options.user.restriction"));

  objc_msgSend(v11, "setObject:forKeyedSubscript:", v5, CFSTR("HMMM.payload.key.message.name"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v12, CFSTR("HMMM.payload.key.options"));
  v14 = objc_alloc(MEMORY[0x1E0D285D8]);
  objc_msgSend(a1[5], "messageTargetUUID");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v14, "initWithTarget:", v15);

  objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMMM.register.request.handler"), v16, v11);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[6], "addObject:", v17);

}

void __59__HMHome_HMModernMessagingInternal__reRegisterHMMMHandlers__block_invoke_1836(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "context");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "messageDispatcher");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "sendMessage:", v3);

}

uint64_t __53__HMHome_HMModernMessagingInternal__userFromPayload___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

- (void)_setRequestHandler:(id)a3 forMessageName:(id)a4 withOptions:(id)a5
{
  id v8;
  id v9;
  os_unfair_lock_s *p_lock;
  void *v11;
  void *v12;
  void *v13;
  id aBlock;

  aBlock = a3;
  v8 = a4;
  v9 = a5;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v11 = _Block_copy(aBlock);
  -[HMHome hmModernMessagingRequestHandlersByMessageName](self, "hmModernMessagingRequestHandlersByMessageName");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v11, v8);

  -[HMHome hmModernMessagingOptionsByMessageName](self, "hmModernMessagingOptionsByMessageName");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setObject:forKeyedSubscript:", v9, v8);

  os_unfair_lock_unlock(p_lock);
}

- (void)_clearRequestHandlerForMessageName:(id)a3
{
  os_unfair_lock_s *p_lock;
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  -[HMHome hmModernMessagingRequestHandlersByMessageName](self, "hmModernMessagingRequestHandlersByMessageName");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setObject:forKeyedSubscript:", 0, v7);

  -[HMHome hmModernMessagingOptionsByMessageName](self, "hmModernMessagingOptionsByMessageName");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v7);

  os_unfair_lock_unlock(p_lock);
}

- (void)registerModernMessagingRequestHandlerWithMessageName:(id)a3 options:(id)a4 requestHandler:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  _QWORD v40[5];
  id v41;
  HMHome *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  const char *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v39 = a5;
  v37 = a6;
  -[HMHome uuid](self, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "UUIDString");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMMMLogOrigin originWithLogIdentifier:](HMMMLogOrigin, "originWithLogIdentifier:", v13);
  v14 = objc_claimAutoreleasedReturnValue();

  v15 = (void *)objc_msgSend(v10, "copy");
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v11, "userRestriction"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setObject:forKeyedSubscript:", v17, CFSTR("HMMM.options.user.restriction"));

  -[HMHome context](self, "context");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = v16;
  if (v18)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v35 = v10;
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v15, CFSTR("HMMM.payload.key.message.name"));
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v16, CFSTR("HMMM.payload.key.options"));
    v20 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome messageTargetUUID](self, "messageTargetUUID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = (void *)objc_msgSend(v20, "initWithTarget:", v21);

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMMM.register.request.handler"), v33, v19);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 3221225472;
    v40[2] = __123__HMHome_HMModernMessaging__registerModernMessagingRequestHandlerWithMessageName_options_requestHandler_completionHandler___block_invoke;
    v40[3] = &unk_1E3AB1A70;
    v23 = (void *)v14;
    v40[4] = v14;
    v41 = v15;
    v42 = self;
    v24 = v39;
    v45 = v39;
    v43 = v11;
    v25 = v37;
    v46 = v37;
    v44 = v18;
    objc_msgSend(v22, "setResponseHandler:", v40);
    -[HMHome context](self, "context");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "messageDispatcher");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "sendMessage:", v22);

    v28 = v38;
    v10 = v35;
  }
  else
  {
    v34 = (void *)v14;
    v25 = v37;
    v24 = v39;
    v29 = (void *)MEMORY[0x1A1AC1AAC]();
    v30 = self;
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v36 = v10;
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v48 = v32;
      v49 = 2080;
      v50 = "-[HMHome(HMModernMessaging) registerModernMessagingRequestHandlerWithMessageName:options:requestHandler:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

      v10 = v36;
    }

    objc_autoreleasePoolPop(v29);
    v23 = v34;
    v28 = v38;
  }

}

- (void)unregisterModernMessagingRequestHandlerWithMessageName:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD v30[5];
  id v31;
  id v32;
  id v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome uuid](self, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMMMLogOrigin originWithLogIdentifier:](HMMMLogOrigin, "originWithLogIdentifier:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = (void *)objc_msgSend(v6, "copy");
  -[HMHome context](self, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "setObject:forKeyedSubscript:", v11, CFSTR("HMMM.payload.key.message.name"));
    v13 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome messageTargetUUID](self, "messageTargetUUID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = (void *)objc_msgSend(v13, "initWithTarget:", v14);

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMMM.unregister.request.handler"), v28, v29);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3221225472;
    v30[2] = __102__HMHome_HMModernMessaging__unregisterModernMessagingRequestHandlerWithMessageName_completionHandler___block_invoke;
    v30[3] = &unk_1E3AB4B08;
    v30[4] = v10;
    v16 = v11;
    v31 = v16;
    v33 = v7;
    v32 = v12;
    objc_msgSend(v15, "setResponseHandler:", v30);
    -[HMHome context](self, "context");
    v17 = v11;
    v18 = v6;
    v19 = v7;
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "messageDispatcher");
    v21 = v12;
    v22 = v10;
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "sendMessage:", v15);

    v10 = v22;
    v12 = v21;

    v7 = v19;
    v6 = v18;
    v11 = v17;
    -[HMHome _clearRequestHandlerForMessageName:](self, "_clearRequestHandlerForMessageName:", v16);

  }
  else
  {
    v24 = (void *)MEMORY[0x1A1AC1AAC]();
    v25 = self;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v35 = v27;
      v36 = 2080;
      v37 = "-[HMHome(HMModernMessaging) unregisterModernMessagingRequestHandlerWithMessageName:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v24);
  }

}

- (void)sendModernMessagingRequestWithMessageName:(id)a3 destination:(id)a4 requestPayload:(id)a5 options:(id)a6 responseHandler:(id)a7 completionHandler:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  HMHome *v45;
  NSObject *v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  void *v53;
  void *v54;
  _QWORD v55[4];
  id v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  uint8_t buf[4];
  void *v62;
  __int16 v63;
  const char *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v15 = a4;
  v50 = a5;
  v16 = a6;
  v17 = a7;
  v51 = a8;
  -[HMHome uuid](self, "uuid");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "UUIDString");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMMMLogOrigin originWithLogIdentifier:](HMMMLogOrigin, "originWithLogIdentifier:", v19);
  v20 = objc_claimAutoreleasedReturnValue();

  v53 = v14;
  v21 = (void *)objc_msgSend(v14, "copy");
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome context](self, "context");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v52 = v17;
  v54 = (void *)v20;
  if (v23)
  {
    objc_msgSend(v16, "timeout");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setObject:forKeyedSubscript:", v24, CFSTR("HMMM.options.timeout"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v16, "transportRestriction"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setObject:forKeyedSubscript:", v25, CFSTR("HMMM.options.transport.restriction"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v17 == 0);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setObject:forKeyedSubscript:", v26, CFSTR("HMMM.options.oneway"));

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setObject:forKeyedSubscript:", v21, CFSTR("HMMM.payload.key.message.name"));
    v28 = v17;
    v29 = v15;
    objc_msgSend(v15, "idsIdentifier");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setObject:forKeyedSubscript:", v30, CFSTR("HMMM.payload.key.destination.identifier"));

    objc_msgSend(v15, "idsTokenURI");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setObject:forKeyedSubscript:", v31, CFSTR("HMMM.payload.key.destination.uri"));

    objc_msgSend(v27, "setObject:forKeyedSubscript:", v22, CFSTR("HMMM.payload.key.options"));
    objc_msgSend(v27, "setObject:forKeyedSubscript:", v50, CFSTR("HMMM.payload.key.payload"));
    v32 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome messageTargetUUID](self, "messageTargetUUID");
    v48 = v16;
    v33 = v21;
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = (void *)objc_msgSend(v32, "initWithTarget:", v34);

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMMM.send.request"), v35, v27);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v55[0] = MEMORY[0x1E0C809B0];
    v55[1] = 3221225472;
    v55[2] = __140__HMHome_HMModernMessaging__sendModernMessagingRequestWithMessageName_destination_requestPayload_options_responseHandler_completionHandler___block_invoke;
    v55[3] = &unk_1E3AB1AC0;
    v59 = v28;
    v56 = v33;
    v57 = v54;
    v58 = v23;
    v37 = v51;
    v60 = v51;
    objc_msgSend(v36, "setResponseHandler:", v55);
    -[HMHome context](self, "context");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "messageDispatcher");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "sendMessage:", v36);

    v21 = v33;
    v40 = v29;
    v41 = v52;
    v42 = v50;
    v43 = v48;
  }
  else
  {
    v43 = v16;
    v42 = v50;
    v44 = (void *)MEMORY[0x1A1AC1AAC]();
    v45 = self;
    HMFGetOSLogHandle();
    v46 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v49 = v21;
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v62 = v47;
      v63 = 2080;
      v64 = "-[HMHome(HMModernMessaging) sendModernMessagingRequestWithMessageName:destination:requestPayload:options:res"
            "ponseHandler:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v46, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

      v21 = v49;
    }

    objc_autoreleasePoolPop(v44);
    v40 = v15;
    v37 = v51;
    v41 = v52;
  }

}

void __140__HMHome_HMModernMessaging__sendModernMessagingRequestWithMessageName_destination_requestPayload_options_responseHandler_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  HMMMClientResponseHandlerOptions *v13;
  HMMMMessageDestination *v14;
  HMMMClientResponseHandlerOptions *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  HMMMClientResponseHandlerOptions *v22;
  id v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  id v28;
  _QWORD v29[4];
  id v30;
  HMMMClientResponseHandlerOptions *v31;
  id v32;
  id v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  HMMMClientResponseHandlerOptions *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = MEMORY[0x1E0C809B0];
  v9 = (_QWORD *)&unk_19B44C000;
  if (*(_QWORD *)(a1 + 56))
  {
    objc_msgSend(v6, "hmf_dataForKey:", CFSTR("HMMM.payload.key.payload"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "hmf_stringForKey:", CFSTR("HMMM.payload.key.destination.identifier"));
    v11 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "hmf_stringForKey:", CFSTR("HMMM.payload.key.destination.uri"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = [HMMMClientResponseHandlerOptions alloc];
    v25 = (void *)v11;
    v14 = -[HMMMMessageDestination initWithIDSIdentifier:idsTokenURI:]([HMMMMessageDestination alloc], "initWithIDSIdentifier:idsTokenURI:", v11, v12);
    v15 = -[HMMMClientResponseHandlerOptions initWithPeerDestination:messageName:](v13, "initWithPeerDestination:messageName:", v14, *(_QWORD *)(a1 + 32));

    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      v35 = v19;
      v36 = 2112;
      v37 = v20;
      v38 = 2112;
      v39 = v15;
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_INFO, "%{public}@Response received for HMMT request with message name: %@. Sending response with options: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(*(id *)(a1 + 48), "delegateCaller");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = MEMORY[0x1E0C809B0];
    v29[0] = MEMORY[0x1E0C809B0];
    v9 = &unk_19B44C000;
    v29[1] = 3221225472;
    v29[2] = __140__HMHome_HMModernMessaging__sendModernMessagingRequestWithMessageName_destination_requestPayload_options_responseHandler_completionHandler___block_invoke_1827;
    v29[3] = &unk_1E3AB4D20;
    v33 = *(id *)(a1 + 56);
    v30 = v10;
    v31 = v15;
    v32 = v5;
    v22 = v15;
    v23 = v10;
    objc_msgSend(v21, "invokeBlock:", v29);

  }
  if (*(_QWORD *)(a1 + 64))
  {
    objc_msgSend(*(id *)(a1 + 48), "delegateCaller");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v26[0] = v8;
    v26[1] = v9[492];
    v26[2] = __140__HMHome_HMModernMessaging__sendModernMessagingRequestWithMessageName_destination_requestPayload_options_responseHandler_completionHandler___block_invoke_2;
    v26[3] = &unk_1E3AB60A0;
    v28 = *(id *)(a1 + 64);
    v27 = v5;
    objc_msgSend(v24, "invokeBlock:", v26);

  }
}

uint64_t __140__HMHome_HMModernMessaging__sendModernMessagingRequestWithMessageName_destination_requestPayload_options_responseHandler_completionHandler___block_invoke_1827(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

uint64_t __140__HMHome_HMModernMessaging__sendModernMessagingRequestWithMessageName_destination_requestPayload_options_responseHandler_completionHandler___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __102__HMHome_HMModernMessaging__unregisterModernMessagingRequestHandlerWithMessageName_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543874;
    v23 = v11;
    v24 = 2112;
    v25 = v12;
    v26 = 2112;
    v27 = v5;
    v13 = "%{public}@Error while unregistering HMMM request handler for message name: %@, error: %@";
    v14 = v10;
    v15 = OS_LOG_TYPE_ERROR;
    v16 = 32;
  }
  else
  {
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v23 = v11;
    v24 = 2112;
    v25 = v17;
    v13 = "%{public}@Unregistered HMMM request handler for message name: %@";
    v14 = v10;
    v15 = OS_LOG_TYPE_INFO;
    v16 = 22;
  }
  _os_log_impl(&dword_19B1B0000, v14, v15, v13, buf, v16);

LABEL_7:
  objc_autoreleasePoolPop(v7);
  if (*(_QWORD *)(a1 + 56))
  {
    objc_msgSend(*(id *)(a1 + 48), "delegateCaller");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __102__HMHome_HMModernMessaging__unregisterModernMessagingRequestHandlerWithMessageName_completionHandler___block_invoke_1825;
    v19[3] = &unk_1E3AB60A0;
    v21 = *(id *)(a1 + 56);
    v20 = v5;
    objc_msgSend(v18, "invokeBlock:", v19);

  }
}

uint64_t __102__HMHome_HMModernMessaging__unregisterModernMessagingRequestHandlerWithMessageName_completionHandler___block_invoke_1825(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __123__HMHome_HMModernMessaging__registerModernMessagingRequestHandlerWithMessageName_options_requestHandler_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543874;
      v20 = v11;
      v21 = 2112;
      v22 = v12;
      v23 = 2112;
      v24 = v5;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Error while registering HMMM request handler for message name: %@, error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v20 = v13;
      v21 = 2112;
      v22 = v14;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Registered HMMM request handler for message name: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 48), "_setRequestHandler:forMessageName:withOptions:", *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
  }
  if (*(_QWORD *)(a1 + 80))
  {
    objc_msgSend(*(id *)(a1 + 64), "delegateCaller");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __123__HMHome_HMModernMessaging__registerModernMessagingRequestHandlerWithMessageName_options_requestHandler_completionHandler___block_invoke_1824;
    v16[3] = &unk_1E3AB60A0;
    v18 = *(id *)(a1 + 80);
    v17 = v5;
    objc_msgSend(v15, "invokeBlock:", v16);

  }
}

uint64_t __123__HMHome_HMModernMessaging__registerModernMessagingRequestHandlerWithMessageName_options_requestHandler_completionHandler___block_invoke_1824(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

- (int64_t)minimumMediaUserPrivilege
{
  os_unfair_lock_s *p_lock;
  int64_t minimumMediaUserPrivilege;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  minimumMediaUserPrivilege = self->_minimumMediaUserPrivilege;
  os_unfair_lock_unlock(p_lock);
  return minimumMediaUserPrivilege;
}

- (void)setMinimumMediaUserPrivilege:(int64_t)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_minimumMediaUserPrivilege = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)updateMinimumMediaUserPrivilege:(int64_t)a3 completionHandler:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  HMHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  id v20;
  _QWORD block[5];
  id v22;
  id v23;
  int64_t v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMHome context](self, "context");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMMediaProfile) updateMinimumMediaUserPrivilege:completionHandler:]", CFSTR("completionHandler"));
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v19;
      v27 = 2112;
      v28 = (const char *)v15;
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v15, 0);
    v20 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v20);
  }
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "queue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __76__HMHome_HMMediaProfile__updateMinimumMediaUserPrivilege_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C30;
    block[4] = self;
    v24 = a3;
    v23 = v6;
    v22 = v8;
    dispatch_async(v9, block);

  }
  else
  {
    v10 = (void *)MEMORY[0x1A1AC1AAC]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v13;
      v27 = 2080;
      v28 = "-[HMHome(HMMediaProfile) updateMinimumMediaUserPrivilege:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v14);

  }
}

- (BOOL)isMediaPeerToPeerEnabled
{
  HMHome *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_mediaPeerToPeerEnabled;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (void)setMediaPeerToPeerEnabled:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_mediaPeerToPeerEnabled = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)updateMediaPeerToPeerEnabled:(BOOL)a3 completionHandler:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  HMHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  id v20;
  _QWORD block[5];
  id v22;
  id v23;
  BOOL v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMHome context](self, "context");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMMediaProfile) updateMediaPeerToPeerEnabled:completionHandler:]", CFSTR("completionHandler"));
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v19;
      v27 = 2112;
      v28 = (const char *)v15;
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v15, 0);
    v20 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v20);
  }
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "queue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __73__HMHome_HMMediaProfile__updateMediaPeerToPeerEnabled_completionHandler___block_invoke;
    block[3] = &unk_1E3AB19C0;
    block[4] = self;
    v24 = a3;
    v23 = v6;
    v22 = v8;
    dispatch_async(v9, block);

  }
  else
  {
    v10 = (void *)MEMORY[0x1A1AC1AAC]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v13;
      v27 = 2080;
      v28 = "-[HMHome(HMMediaProfile) updateMediaPeerToPeerEnabled:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v14);

  }
}

- (NSString)mediaPassword
{
  os_unfair_lock_s *p_lock;
  NSString *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_mediaPassword;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (void)setMediaPassword:(id)a3
{
  NSString *v4;
  NSString *mediaPassword;
  id v6;

  v6 = a3;
  os_unfair_lock_lock_with_options();
  v4 = (NSString *)objc_msgSend(v6, "copy");
  mediaPassword = self->_mediaPassword;
  self->_mediaPassword = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)updateMediaPassword:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[4];
  id v23;
  HMHome *v24;
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMMediaProfile) updateMediaPassword:completionHandler:]", CFSTR("completionHandler"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v20;
      v29 = 2112;
      v30 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __64__HMHome_HMMediaProfile__updateMediaPassword_completionHandler___block_invoke;
    block[3] = &unk_1E3AB4D20;
    v23 = v6;
    v24 = self;
    v26 = v7;
    v25 = v9;
    dispatch_async(v10, block);

    v11 = v23;
  }
  else
  {
    v12 = (void *)MEMORY[0x1A1AC1AAC]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v15;
      v29 = 2080;
      v30 = "-[HMHome(HMMediaProfile) updateMediaPassword:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v7 + 2))(v7, v11);
  }

}

void __64__HMHome_HMMediaProfile__updateMediaPassword_completionHandler___block_invoke(id *a1)
{
  id v2;
  BOOL v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, void *);
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  const __CFString *v24;
  id v25;
  _BYTE location[12];
  __int16 v27;
  id v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  if (!v2)
  {
    v4 = 0;
    goto LABEL_6;
  }
  v23 = 0;
  v3 = +[HMHome isValidMediaPassword:error:](HMHome, "isValidMediaPassword:error:", v2, &v23);
  v4 = v23;
  if (v3)
  {
    v5 = a1[4];
    if (v5)
    {
      v24 = CFSTR("value");
      v25 = v5;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:
      v7 = (void *)MEMORY[0x1E0D285F8];
      objc_msgSend(a1[5], "messageDestination");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "messageWithName:destination:payload:", CFSTR("HM.mpw"), v8, v6);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_initWeak((id *)location, a1[5]);
      v16 = MEMORY[0x1E0C809B0];
      v17 = 3221225472;
      v18 = __64__HMHome_HMMediaProfile__updateMediaPassword_completionHandler___block_invoke_1738;
      v19 = &unk_1E3AB4B30;
      objc_copyWeak(&v22, (id *)location);
      v20 = a1[4];
      v21 = a1[7];
      objc_msgSend(v9, "setResponseHandler:", &v16);
      objc_msgSend(a1[6], "messageDispatcher", v16, v17, v18, v19);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "sendMessage:completionHandler:", v9, 0);

      objc_destroyWeak(&v22);
      objc_destroyWeak((id *)location);
      goto LABEL_11;
    }
LABEL_6:
    v6 = 0;
    goto LABEL_7;
  }
  v11 = (void *)MEMORY[0x1A1AC1AAC]();
  v12 = a1[5];
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = a1[4];
    *(_DWORD *)location = 138543874;
    *(_QWORD *)&location[4] = v14;
    v27 = 2112;
    v28 = v15;
    v29 = 2112;
    v30 = v4;
    _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Invalid media password, %@, with error: %@", location, 0x20u);

  }
  objc_autoreleasePoolPop(v11);
  objc_msgSend(a1[5], "context");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "delegateCaller");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "callCompletion:error:", a1[7], v4);
LABEL_11:

}

void __64__HMHome_HMMediaProfile__updateMediaPassword_completionHandler___block_invoke_1738(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!v6)
    objc_msgSend(WeakRetained, "setMediaPassword:", *(_QWORD *)(a1 + 32));
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(WeakRetained, "context");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 40), v6);

  }
}

void __73__HMHome_HMMediaProfile__updateMediaPeerToPeerEnabled_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  char v12;
  id location;
  const __CFString *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0D285F8];
  v3 = (id *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 32), "messageDestination");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = CFSTR("kEnabledKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 56));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messageWithName:destination:payload:", CFSTR("HM.p2p"), v4, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_initWeak(&location, *v3);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __73__HMHome_HMMediaProfile__updateMediaPeerToPeerEnabled_completionHandler___block_invoke_2;
  v9[3] = &unk_1E3AB1998;
  objc_copyWeak(&v11, &location);
  v12 = *(_BYTE *)(a1 + 56);
  v10 = *(id *)(a1 + 48);
  objc_msgSend(v7, "setResponseHandler:", v9);
  objc_msgSend(*(id *)(a1 + 40), "messageDispatcher");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "sendMessage:completionHandler:", v7, 0);

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);

}

void __73__HMHome_HMMediaProfile__updateMediaPeerToPeerEnabled_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
    objc_msgSend(WeakRetained, "setMediaPeerToPeerEnabled:", *(unsigned __int8 *)(a1 + 48));
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(WeakRetained, "context");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 32), v6);

  }
}

void __76__HMHome_HMMediaProfile__updateMinimumMediaUserPrivilege_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11[2];
  id location;
  const __CFString *v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0D285F8];
  v3 = (id *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 32), "messageDestination");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = CFSTR("kUserPrivilegeLevelKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 56));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messageWithName:destination:payload:", CFSTR("HM.mup"), v4, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_initWeak(&location, *v3);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __76__HMHome_HMMediaProfile__updateMinimumMediaUserPrivilege_completionHandler___block_invoke_2;
  v9[3] = &unk_1E3AB1A08;
  objc_copyWeak(v11, &location);
  v11[1] = *(id *)(a1 + 56);
  v10 = *(id *)(a1 + 48);
  objc_msgSend(v7, "setResponseHandler:", v9);
  objc_msgSend(*(id *)(a1 + 40), "messageDispatcher");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "sendMessage:completionHandler:", v7, 0);

  objc_destroyWeak(v11);
  objc_destroyWeak(&location);

}

void __76__HMHome_HMMediaProfile__updateMinimumMediaUserPrivilege_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
    objc_msgSend(WeakRetained, "setMinimumMediaUserPrivilege:", *(_QWORD *)(a1 + 48));
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(WeakRetained, "context");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 32), v6);

  }
}

- (id)accessoryWithIdsIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[HMHome accessories](self, "accessories", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v9, "device");
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        if (v10)
        {
          objc_msgSend(v9, "device");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "idsIdentifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "isEqual:", v4);

          if ((v13 & 1) != 0)
          {
            v6 = v9;
            goto LABEL_12;
          }
        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_12:

  return v6;
}

- (HMActionSet)builtinActionSetOfType:(NSString *)actionSetType
{
  NSString *v4;
  void *v5;
  void *v6;

  v4 = actionSetType;
  if (-[NSString isEqualToString:](v4, "isEqualToString:", CFSTR("HMActionSetTypeUserDefined")))
  {
    v5 = 0;
  }
  else
  {
    -[HMHome currentActionSets](self, "currentActionSets");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "firstItemWithValue:forKey:", v4, CFSTR("actionSetType"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return (HMActionSet *)v5;
}

- (void)addActionSetWithName:(NSString *)actionSetName completionHandler:(void *)completion
{
  NSString *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[5];
  NSString *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = actionSetName;
  v7 = completion;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMActionSet) addActionSetWithName:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __62__HMHome_HMActionSet__addActionSetWithName_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v23 = v6;
    v24 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2080;
      v28 = "-[HMHome(HMActionSet) addActionSetWithName:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, _QWORD, void *))v7 + 2))(v7, 0, v15);

  }
}

- (void)_addActionSetWithName:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  HMHome *v36;
  NSObject *v37;
  void *v38;
  id v39;
  _QWORD v40[4];
  id v41;
  id v42;
  const __CFString *v43;
  id v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  const char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMActionSet) _addActionSetWithName:completionHandler:]", CFSTR("clientCompletionHandler"));
    v34 = objc_claimAutoreleasedReturnValue();
    v35 = (void *)MEMORY[0x1A1AC1AAC]();
    v36 = self;
    HMFGetOSLogHandle();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v46 = v38;
      v47 = 2112;
      v48 = (const char *)v34;
      _os_log_impl(&dword_19B1B0000, v37, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v35);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v34, 0);
    v39 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v39);
  }
  v9 = (void *)v8;
  if (v8)
  {
    if (v6)
    {
      v10 = objc_msgSend(v6, "length");
      if (HMMaxLengthForNaming__hmf_once_t5 != -1)
        dispatch_once(&HMMaxLengthForNaming__hmf_once_t5, &__block_literal_global_40);
      if (v10 > HMMaxLengthForNaming__hmf_once_v6)
      {
        v11 = (void *)MEMORY[0x1A1AC1AAC]();
        v12 = self;
        HMFGetOSLogHandle();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v46 = v14;
          _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Action set name is longer than the pre-defined max length", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v11);
        objc_msgSend(v9, "delegateCaller");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 46);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "callCompletion:actionSet:error:", v7, 0, v16);

        goto LABEL_17;
      }
      -[HMHome actionSetWithName:](self, "actionSetWithName:", v6);
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v25)
      {
        v27 = (void *)MEMORY[0x1E0D285F8];
        v28 = objc_alloc(MEMORY[0x1E0D285D8]);
        -[HMHome uuid](self, "uuid");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = (void *)objc_msgSend(v28, "initWithTarget:", v29);
        v43 = CFSTR("kActionSetName");
        v44 = v6;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v44, &v43, 1);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "messageWithName:destination:payload:", CFSTR("kAddActionSetRequestKey"), v30, v31);
        v32 = (void *)objc_claimAutoreleasedReturnValue();

        objc_initWeak((id *)buf, self);
        v40[0] = MEMORY[0x1E0C809B0];
        v40[1] = 3221225472;
        v40[2] = __63__HMHome_HMActionSet___addActionSetWithName_completionHandler___block_invoke;
        v40[3] = &unk_1E3AB4AE0;
        objc_copyWeak(&v42, (id *)buf);
        v41 = v7;
        objc_msgSend(v32, "setResponseHandler:", v40);
        objc_msgSend(v9, "messageDispatcher");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "sendMessage:completionHandler:", v32, 0);

        objc_destroyWeak(&v42);
        objc_destroyWeak((id *)buf);

        goto LABEL_17;
      }
      -[HMHome context](self, "context");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "delegateCaller");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 13, 0);
      v24 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[HMHome context](self, "context");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "delegateCaller");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 20, 0);
      v24 = objc_claimAutoreleasedReturnValue();
    }
    v26 = (void *)v24;
    objc_msgSend(v23, "callCompletion:actionSet:error:", v7, 0, v24);

    goto LABEL_17;
  }
  v17 = (void *)MEMORY[0x1A1AC1AAC]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v46 = v20;
    v47 = 2080;
    v48 = "-[HMHome(HMActionSet) _addActionSetWithName:completionHandler:]";
    _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v17);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, void *))v7 + 2))(v7, 0, v21);

LABEL_17:
}

- (void)removeActionSet:(HMActionSet *)actionSet completionHandler:(void *)completion
{
  HMActionSet *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[5];
  HMActionSet *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = actionSet;
  v7 = completion;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMActionSet) removeActionSet:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __57__HMHome_HMActionSet__removeActionSet_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v23 = v6;
    v24 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2080;
      v28 = "-[HMHome(HMActionSet) removeActionSet:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, void *))v7 + 2))(v7, v15);

  }
}

- (void)_removeActionSet:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  HMHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  HMHome *v32;
  NSObject *v33;
  void *v34;
  id v35;
  _QWORD v36[4];
  id v37;
  id v38;
  const __CFString *v39;
  void *v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  const char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMActionSet) _removeActionSet:completionHandler:]", CFSTR("clientCompletionHandler"));
    v30 = objc_claimAutoreleasedReturnValue();
    v31 = (void *)MEMORY[0x1A1AC1AAC]();
    v32 = self;
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v42 = v34;
      v43 = 2112;
      v44 = (const char *)v30;
      _os_log_impl(&dword_19B1B0000, v33, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v31);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v30, 0);
    v35 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v35);
  }
  v9 = (void *)v8;
  if (v8)
  {
    if (!v6)
    {
      -[HMHome context](self, "context");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "delegateCaller");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 20, 0);
      v14 = objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
    objc_msgSend(v6, "actionSetType");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("HMActionSetTypeTriggerOwned"));

    if (v11)
    {
      -[HMHome context](self, "context");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "delegateCaller");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
      v14 = objc_claimAutoreleasedReturnValue();
LABEL_13:
      v29 = (void *)v14;
      objc_msgSend(v13, "callCompletion:error:", v7, v14);

      goto LABEL_14;
    }
    -[HMHome currentActionSets](self, "currentActionSets");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "containsObject:", v6);

    if ((v21 & 1) == 0)
    {
      -[HMHome context](self, "context");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "delegateCaller");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 2, 0);
      v14 = objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
    v39 = CFSTR("kActionSetUUID");
    objc_msgSend(v6, "uuid");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "UUIDString");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = v23;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    v25 = (void *)MEMORY[0x1E0D285F8];
    -[HMHome messageDestination](self, "messageDestination");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "messageWithName:destination:payload:", CFSTR("kRemoveActionSetRequestKey"), v26, v24);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak((id *)buf, self);
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = __58__HMHome_HMActionSet___removeActionSet_completionHandler___block_invoke;
    v36[3] = &unk_1E3AB4AE0;
    objc_copyWeak(&v38, (id *)buf);
    v37 = v7;
    objc_msgSend(v27, "setResponseHandler:", v36);
    objc_msgSend(v9, "messageDispatcher");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "sendMessage:completionHandler:", v27, 0);

    objc_destroyWeak(&v38);
    objc_destroyWeak((id *)buf);

  }
  else
  {
    v15 = (void *)MEMORY[0x1A1AC1AAC]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v42 = v18;
      v43 = 2080;
      v44 = "-[HMHome(HMActionSet) _removeActionSet:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v7 + 2))(v7, v19);

  }
LABEL_14:

}

- (void)executeActionSet:(HMActionSet *)actionSet completionHandler:(void *)completion
{
  HMActionSet *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  HMHome *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  HMHome *v24;
  NSObject *v25;
  void *v26;
  id v27;
  _QWORD block[4];
  id v29;
  HMHome *v30;
  HMActionSet *v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v7 = actionSet;
  v8 = completion;
  v9 = objc_alloc(MEMORY[0x1E0D28540]);
  v10 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1A1AC1500](self, a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringWithFormat:", CFSTR("%@, %s:%ld"), v11, "/Library/Caches/com.apple.xbs/Sources/HomeKit/Sources/HomeKit/HMHome.m", 9013);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)objc_msgSend(v9, "initWithName:", v12);

  -[HMHome context](self, "context");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMActionSet) executeActionSet:completionHandler:]", CFSTR("completion"));
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)MEMORY[0x1A1AC1AAC]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v26;
      v35 = 2112;
      v36 = (const char *)v22;
      _os_log_impl(&dword_19B1B0000, v25, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v22, 0);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v27);
  }
  v15 = v14;
  if (v14)
  {
    objc_msgSend(v14, "queue");
    v16 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __58__HMHome_HMActionSet__executeActionSet_completionHandler___block_invoke;
    block[3] = &unk_1E3AB4D20;
    v29 = v13;
    v30 = self;
    v31 = v7;
    v32 = v8;
    dispatch_async(v16, block);

    v17 = v29;
  }
  else
  {
    v18 = (void *)MEMORY[0x1A1AC1AAC]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v21;
      v35 = 2080;
      v36 = "-[HMHome(HMActionSet) executeActionSet:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, void *))v8 + 2))(v8, v17);
  }

}

- (void)_executeActionSet:(id)a3 activity:(id)a4 reportContext:(id)a5 completionHandler:(id)a6
{
  id v10;
  void *v11;
  BOOL v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t i;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  HMHome *v52;
  NSObject *v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  _QWORD v60[4];
  id v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _QWORD v67[2];
  _QWORD v68[2];
  uint8_t v69[128];
  uint8_t buf[4];
  void *v71;
  __int16 v72;
  const char *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v56 = a4;
  v57 = a5;
  v59 = a6;
  -[HMHome context](self, "context");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v59)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMActionSet) _executeActionSet:activity:reportContext:completionHandler:]", CFSTR("completion"));
    v50 = objc_claimAutoreleasedReturnValue();
    v51 = (void *)MEMORY[0x1A1AC1AAC]();
    v52 = self;
    HMFGetOSLogHandle();
    v53 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v71 = v54;
      v72 = 2112;
      v73 = (const char *)v50;
      _os_log_impl(&dword_19B1B0000, v53, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v51);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v50, 0);
    v55 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v55);
  }
  if (v58)
  {
    if (!v10)
    {
      -[HMHome context](self, "context");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "delegateCaller");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 20, 0);
      v15 = objc_claimAutoreleasedReturnValue();
      goto LABEL_11;
    }
    objc_msgSend(v10, "actionSetType");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v11, "isEqualToString:", CFSTR("HMActionSetTypeTriggerOwned")))
    {
      v12 = isInternalBuild();

      if (!v12)
      {
        -[HMHome context](self, "context");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "delegateCaller");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
        v15 = objc_claimAutoreleasedReturnValue();
LABEL_11:
        v21 = (void *)v15;
        objc_msgSend(v14, "callCompletion:error:", v59, v15);

        goto LABEL_31;
      }
    }
    else
    {

    }
    objc_msgSend(v10, "actionSetType");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v22, "isEqualToString:", CFSTR("HMActionSetTypeShortcutsComponent"));

    if (v23)
    {
      objc_msgSend(v10, "actions");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome executeActions:completionHandler:](self, "executeActions:completionHandler:", v24, v59);

      goto LABEL_31;
    }
    -[HMHome currentActionSets](self, "currentActionSets");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "containsObject:", v10);

    if ((v26 & 1) != 0)
    {
LABEL_16:
      v67[0] = CFSTR("kActionSetUUID");
      objc_msgSend(v10, "uuid");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "UUIDString");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v67[1] = CFSTR("kHomeUUID");
      v68[0] = v28;
      -[HMHome uuid](self, "uuid");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "UUIDString");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v68[1] = v30;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v68, v67, 2);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = (void *)objc_msgSend(v31, "mutableCopy");

      _dictionaryRepresentationForReportContext(v57);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "addEntriesFromDictionary:", v33);

      v34 = objc_alloc(MEMORY[0x1E0D285D8]);
      -[HMHome uuid](self, "uuid");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = (void *)objc_msgSend(v34, "initWithTarget:", v35);

      objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("kExecuteActionSetRequestKey"), v36, v32);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "setActivity:", v56);
      objc_initWeak((id *)buf, self);
      v60[0] = MEMORY[0x1E0C809B0];
      v60[1] = 3221225472;
      v60[2] = __82__HMHome_HMActionSet___executeActionSet_activity_reportContext_completionHandler___block_invoke;
      v60[3] = &unk_1E3AB4AE0;
      objc_copyWeak(&v62, (id *)buf);
      v61 = v59;
      objc_msgSend(v37, "setResponseHandler:", v60);
      objc_msgSend(v58, "messageDispatcher");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "sendMessage:", v37);

      objc_destroyWeak(&v62);
      objc_destroyWeak((id *)buf);

      goto LABEL_31;
    }
    if (isInternalBuild())
    {
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      -[HMHome triggers](self, "triggers");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v63, v69, 16);
      if (v40)
      {
        v41 = 0;
        v42 = *(_QWORD *)v64;
        do
        {
          for (i = 0; i != v40; ++i)
          {
            if (*(_QWORD *)v64 != v42)
              objc_enumerationMutation(v39);
            objc_msgSend(*(id *)(*((_QWORD *)&v63 + 1) + 8 * i), "actionSets");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "uuid");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v44, "hmf_firstObjectWithUUID:", v45);
            v46 = (void *)objc_claimAutoreleasedReturnValue();

            if (v46)
              v41 = 1;
          }
          v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v63, v69, 16);
        }
        while (v40);

        if ((v41 & 1) != 0)
          goto LABEL_16;
      }
      else
      {

      }
    }
    -[HMHome context](self, "context");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "delegateCaller");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 2, 0);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "callCompletion:error:", v59, v49);

    goto LABEL_31;
  }
  v16 = (void *)MEMORY[0x1A1AC1AAC]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v71 = v19;
    v72 = 2080;
    v73 = "-[HMHome(HMActionSet) _executeActionSet:activity:reportContext:completionHandler:]";
    _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v16);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, void *))v59 + 2))(v59, v20);

LABEL_31:
}

void __82__HMHome_HMActionSet___executeActionSet_activity_reportContext_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  void *v6;
  id WeakRetained;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "delegateCaller");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "callCompletion:error:", *(_QWORD *)(a1 + 32), v4);

}

uint64_t __58__HMHome_HMActionSet__executeActionSet_completionHandler___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "begin");
  objc_msgSend(*(id *)(a1 + 40), "_executeActionSet:activity:reportContext:completionHandler:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), 0, *(_QWORD *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 32), "end");
}

void __58__HMHome_HMActionSet___removeActionSet_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v9
    || !v5
    || objc_msgSend(WeakRetained, "_handleActionSetRemovedFromResponse:responsePayload:", *(_QWORD *)(a1 + 32), v5))
  {
    objc_msgSend(WeakRetained, "context");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "delegateCaller");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "callCompletion:error:", *(_QWORD *)(a1 + 32), v9);

  }
}

uint64_t __57__HMHome_HMActionSet__removeActionSet_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeActionSet:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __63__HMHome_HMActionSet___addActionSetWithName_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v9
    || !v5
    || objc_msgSend(WeakRetained, "_addActionSetFromResponse:completion:", v5, *(_QWORD *)(a1 + 32)))
  {
    objc_msgSend(WeakRetained, "context");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "delegateCaller");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "callCompletion:actionSet:error:", *(_QWORD *)(a1 + 32), 0, v9);

  }
}

uint64_t __62__HMHome_HMActionSet__addActionSetWithName_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_addActionSetWithName:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

- (void)addAccessory:(id)a3 password:(id)a4 progress:(id)a5 completionHandler:(id)a6
{
  char *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  HMHome *v15;
  NSObject *v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  HMHome *v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  HMHome *v29;
  NSObject *v30;
  void *v31;
  id v32;
  _QWORD block[4];
  char *v34;
  HMHome *v35;
  id v36;
  id v37;
  id v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const __CFString *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (char *)a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = (void *)MEMORY[0x1A1AC1AAC]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = CFSTR("<non-nil>");
    *(_DWORD *)buf = 138543874;
    v40 = v17;
    v41 = 2112;
    if (!v11)
      v18 = CFSTR("<nil>");
    v42 = v10;
    v43 = 2112;
    v44 = v18;
    _os_log_impl(&dword_19B1B0000, v16, OS_LOG_TYPE_INFO, "%{public}@Sending add request for accessory: %@ password: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v14);
  -[HMHome context](v15, "context");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v13)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMAccessory) addAccessory:password:progress:completionHandler:]", CFSTR("completion"));
    v27 = objc_claimAutoreleasedReturnValue();
    v28 = (void *)MEMORY[0x1A1AC1AAC]();
    v29 = v15;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v31;
      v41 = 2112;
      v42 = (const char *)v27;
      _os_log_impl(&dword_19B1B0000, v30, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v28);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v27, 0);
    v32 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v32);
  }
  v20 = v19;
  if (v19)
  {
    objc_msgSend(v19, "queue");
    v21 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __72__HMHome_HMAccessory__addAccessory_password_progress_completionHandler___block_invoke;
    block[3] = &unk_1E3AB1758;
    v34 = v10;
    v35 = v15;
    v37 = v12;
    v36 = v11;
    v38 = v13;
    dispatch_async(v21, block);

    v22 = v34;
  }
  else
  {
    v23 = (void *)MEMORY[0x1A1AC1AAC]();
    v24 = v15;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v26;
      v41 = 2080;
      v42 = "-[HMHome(HMAccessory) addAccessory:password:progress:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v25, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v13 + 2))(v13, v22);
  }

}

- (void)addAccessory:(id)a3 password:(id)a4 completionHandler:(id)a5
{
  -[HMHome addAccessory:password:progress:completionHandler:](self, "addAccessory:password:progress:completionHandler:", a3, a4, 0, a5);
}

- (void)addAccessory:(HMAccessory *)accessory completionHandler:(void *)completion
{
  HMAccessory *v6;
  void *v7;
  void *v8;
  HMHome *v9;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  HMAccessory *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = accessory;
  v7 = completion;
  v8 = (void *)MEMORY[0x1A1AC1AAC]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543618;
    v13 = v11;
    v14 = 2112;
    v15 = v6;
    _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Sending add request for accessory: %@", (uint8_t *)&v12, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  -[HMHome addAccessory:password:progress:completionHandler:](v9, "addAccessory:password:progress:completionHandler:", v6, 0, 0, v7);

}

- (void)startPairingWithAccessory:(id)a3 accessorySetupDescription:(id)a4 progress:(id)a5 completionHandler:(id)a6
{
  char *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  HMHome *v26;
  NSObject *v27;
  void *v28;
  id v29;
  _QWORD block[5];
  char *v31;
  id v32;
  id v33;
  id v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = (char *)a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  -[HMHome context](self, "context");
  v14 = objc_claimAutoreleasedReturnValue();
  if (!v13)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMAccessory) startPairingWithAccessory:accessorySetupDescription:progress:completionHandler:]", CFSTR("completion"));
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = (void *)MEMORY[0x1A1AC1AAC]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v28;
      v37 = 2112;
      v38 = (const char *)v24;
      _os_log_impl(&dword_19B1B0000, v27, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v24, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v29);
  }
  v15 = (void *)v14;
  v16 = (void *)MEMORY[0x1A1AC1AAC]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = v18;
  if (v15)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v36 = v20;
      v37 = 2112;
      v38 = v10;
      v39 = 2112;
      v40 = v11;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_INFO, "%{public}@Starting pairing with accessory: %@ accessoryDescription: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(v15, "queue");
    v21 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __102__HMHome_HMAccessory__startPairingWithAccessory_accessorySetupDescription_progress_completionHandler___block_invoke;
    block[3] = &unk_1E3AB1758;
    block[4] = v17;
    v31 = v10;
    v32 = v11;
    v33 = v12;
    v34 = v13;
    dispatch_async(v21, block);

  }
  else
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v22;
      v37 = 2080;
      v38 = "-[HMHome(HMAccessory) startPairingWithAccessory:accessorySetupDescription:progress:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v13 + 2))(v13, v23);

  }
}

- (void)_addAccessory:(id)a3 accessoryDescription:(id)a4 password:(id)a5 setupCodeDeferred:(BOOL)a6 progress:(id)a7 completionHandler:(id)a8
{
  _BOOL8 v10;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  HMHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  HMHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  HMHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  id v69;
  id v70;
  id v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  SEL v76;
  id v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  _QWORD v82[4];
  id v83;
  id v84;
  id v85;
  HMHome *v86;
  _QWORD aBlock[4];
  id v88;
  HMHome *v89;
  id v90;
  _QWORD v91[3];
  _QWORD v92[3];
  uint8_t buf[4];
  void *v94;
  __int16 v95;
  const char *v96;
  uint64_t v97;

  v10 = a6;
  v97 = *MEMORY[0x1E0C80C00];
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a7;
  v19 = a8;
  -[HMHome context](self, "context");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    if (v15)
    {
      v76 = a2;
      objc_msgSend(v15, "name");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "length");
      v81 = v16;
      if (HMMaxLengthForNaming__hmf_once_t5 != -1)
        dispatch_once(&HMMaxLengthForNaming__hmf_once_t5, &__block_literal_global_40);
      v23 = HMMaxLengthForNaming__hmf_once_v6;

      if (v22 <= v23)
      {
        v79 = v19;
        v80 = v17;
        v75 = v18;
        v41 = (void *)MEMORY[0x1E0C99E08];
        v91[0] = CFSTR("kAccessoryUUID");
        objc_msgSend(v15, "uuid");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "UUIDString");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        v92[0] = v43;
        v91[1] = CFSTR("kAccessorySetupCodeDeferredKey");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v10);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v92[1] = v44;
        v91[2] = CFSTR("kAccessorySetupRetryKey");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v81, "retry"));
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        v92[2] = v45;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v92, v91, 3);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "dictionaryWithDictionary:", v46);
        v78 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v81, "appIdentifier");
        v47 = objc_claimAutoreleasedReturnValue();
        if (!v47)
        {
          objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v48, "bundleIdentifier");
          v47 = objc_claimAutoreleasedReturnValue();

        }
        v74 = (void *)v47;
        if (objc_msgSend(v80, "length"))
          objc_msgSend(v78, "setObject:forKeyedSubscript:", v80, CFSTR("kAccessoryPairingPasswordKey"));
        objc_msgSend(v15, "peerIdentifier");
        v49 = (void *)objc_claimAutoreleasedReturnValue();

        if (v49)
        {
          objc_msgSend(v15, "peerIdentifier");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v50, "UUIDString");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v78, "setObject:forKeyedSubscript:", v51, CFSTR("kAccessoryPeerIdentifierKey"));

        }
        v52 = objc_alloc(MEMORY[0x1E0D285F8]);
        v53 = objc_alloc(MEMORY[0x1E0D285D8]);
        -[HMHome uuid](self, "uuid");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = (void *)objc_msgSend(v53, "initWithTarget:", v54);
        v56 = (void *)objc_msgSend(v52, "initWithName:destination:payload:", CFSTR("kAddAccessoryRequestKey"), v55, v78);

        objc_msgSend(v56, "hm_setXPCTimeoutDisabled:", 1);
        objc_msgSend(v81, "setupAccessoryPayload");
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        v58 = objc_alloc(MEMORY[0x1E0D28540]);
        v59 = (void *)MEMORY[0x1E0CB3940];
        MEMORY[0x1A1AC1500](self, v76);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v59, "stringWithFormat:", CFSTR("%@, %s:%ld"), v60, "/Library/Caches/com.apple.xbs/Sources/HomeKit/Sources/HomeKit/HMHome.m", 7116);
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        v62 = (void *)objc_msgSend(v58, "initWithName:", v61);

        -[HMHome uuid](self, "uuid");
        objc_msgSend(v57, "categoryNumber");

        if (v57)
          objc_msgSend(v57, "supportsBTLE");
        objc_msgSend(v56, "setActivity:", v62);
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3221225472;
        aBlock[2] = __112__HMHome_HMAccessory___addAccessory_accessoryDescription_password_setupCodeDeferred_progress_completionHandler___block_invoke;
        aBlock[3] = &unk_1E3AB53A8;
        v88 = v62;
        v89 = self;
        v90 = v79;
        v77 = v62;
        v73 = v57;
        v63 = _Block_copy(aBlock);
        -[HMHome context](self, "context");
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v64, "pendingRequests");
        v65 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v56, "identifier");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        v67 = _Block_copy(v63);
        objc_msgSend(v65, "addAccessory:andCompletionBlock:forIdentifier:", v15, v67, v66);

        v68 = _Block_copy(v75);
        objc_msgSend(v65, "addAccessoryDescription:progressBlock:andCompletionBlock:forIdentifier:", v81, v68, 0, v66);

        v82[0] = MEMORY[0x1E0C809B0];
        v82[1] = 3221225472;
        v82[2] = __112__HMHome_HMAccessory___addAccessory_accessoryDescription_password_setupCodeDeferred_progress_completionHandler___block_invoke_2;
        v82[3] = &unk_1E3AB1780;
        v83 = v65;
        v84 = v66;
        v69 = v20;
        v85 = v69;
        v86 = self;
        v70 = v66;
        v71 = v65;
        objc_msgSend(v56, "setResponseHandler:", v82);
        objc_msgSend(v69, "messageDispatcher");
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v72, "sendMessage:", v56);

        v16 = v81;
        v18 = v75;

        v19 = v79;
        v17 = v80;
      }
      else
      {
        v24 = (void *)MEMORY[0x1A1AC1AAC]();
        v25 = self;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v94 = v27;
          _os_log_impl(&dword_19B1B0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Accessory name is longer than the pre-defined max length", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v24);
        objc_msgSend(v20, "delegateCaller");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 46);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "callCompletion:error:", v19, v29);

        v16 = v81;
      }
    }
    else
    {
      v34 = (void *)MEMORY[0x1A1AC1AAC]();
      v35 = self;
      HMFGetOSLogHandle();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v94 = v37;
        _os_log_impl(&dword_19B1B0000, v36, OS_LOG_TYPE_ERROR, "%{public}@Failed to add accessory due to no accessory given", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v34);
      -[HMHome context](v35, "context");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "delegateCaller");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 20, 0);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "callCompletion:error:", v19, v40);

    }
  }
  else
  {
    v30 = (void *)MEMORY[0x1A1AC1AAC]();
    v31 = self;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v94 = v33;
      v95 = 2080;
      v96 = "-[HMHome(HMAccessory) _addAccessory:accessoryDescription:password:setupCodeDeferred:progress:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v32, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v30);
  }

}

- (void)cancelPairingForAccessoryWithUUID:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[5];
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMAccessory) cancelPairingForAccessoryWithUUID:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __75__HMHome_HMAccessory__cancelPairingForAccessoryWithUUID_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v23 = v6;
    v24 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2080;
      v28 = "-[HMHome(HMAccessory) cancelPairingForAccessoryWithUUID:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v7 + 2))(v7, v15);

  }
}

- (void)_cancelPairingForAccessoryWithUUID:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  HMHome *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, void *);
  void *v25;
  id v26;
  id v27;
  const __CFString *v28;
  void *v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v28 = CFSTR("kAccessoryUUID");
    objc_msgSend(v6, "UUIDString");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = v9;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v11 = objc_alloc(MEMORY[0x1E0D285F8]);
    v12 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](self, "uuid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)objc_msgSend(v12, "initWithTarget:", v13);
    v15 = (void *)objc_msgSend(v11, "initWithName:destination:payload:", CFSTR("kCancelPairingAccessoryRequestKey"), v14, v10);

    v22 = MEMORY[0x1E0C809B0];
    v23 = 3221225472;
    v24 = __76__HMHome_HMAccessory___cancelPairingForAccessoryWithUUID_completionHandler___block_invoke;
    v25 = &unk_1E3AB59B8;
    v16 = v8;
    v26 = v16;
    v27 = v7;
    objc_msgSend(v15, "setResponseHandler:", &v22);
    objc_msgSend(v16, "messageDispatcher", v22, v23, v24, v25);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "sendMessage:", v15);

  }
  else
  {
    v18 = (void *)MEMORY[0x1A1AC1AAC]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v21;
      v32 = 2080;
      v33 = "-[HMHome(HMAccessory) _cancelPairingForAccessoryWithUUID:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
  }

}

- (void)continuePairingForAccessoryWithUUID:(id)a3 setupCode:(id)a4 completionHandler:(id)a5
{
  -[HMHome continuePairingForAccessoryWithUUID:setupCode:onboardingSetupPayloadString:completionHandler:](self, "continuePairingForAccessoryWithUUID:setupCode:onboardingSetupPayloadString:completionHandler:", a3, a4, 0, a5);
}

- (void)continuePairingForAccessoryWithUUID:(id)a3 setupCode:(id)a4 onboardingSetupPayloadString:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  HMHome *v24;
  NSObject *v25;
  void *v26;
  id v27;
  _QWORD block[5];
  id v29;
  id v30;
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  -[HMHome context](self, "context");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v13)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMAccessory) continuePairingForAccessoryWithUUID:setupCode:onboardingSetupPayloadString:completionHandler:]", CFSTR("completion"));
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)MEMORY[0x1A1AC1AAC]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v26;
      v35 = 2112;
      v36 = (const char *)v22;
      _os_log_impl(&dword_19B1B0000, v25, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v22, 0);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v27);
  }
  v15 = v14;
  if (v14)
  {
    objc_msgSend(v14, "queue");
    v16 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __116__HMHome_HMAccessory__continuePairingForAccessoryWithUUID_setupCode_onboardingSetupPayloadString_completionHandler___block_invoke;
    block[3] = &unk_1E3AB52E0;
    block[4] = self;
    v29 = v10;
    v30 = v11;
    v31 = v12;
    v32 = v13;
    dispatch_async(v16, block);

  }
  else
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v20;
      v35 = 2080;
      v36 = "-[HMHome(HMAccessory) continuePairingForAccessoryWithUUID:setupCode:onboardingSetupPayloadString:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v13 + 2))(v13, v21);

  }
}

- (void)_continuePairingForAccessoryWithUUID:(id)a3 setupCode:(id)a4 onboardingSetupPayloadString:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  HMHome *v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, void *);
  void *v31;
  id v32;
  id v33;
  _QWORD v34[2];
  _QWORD v35[2];
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  -[HMHome context](self, "context");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    v34[0] = CFSTR("kAccessoryUUID");
    v34[1] = CFSTR("kAccessoryPairingPasswordKey");
    v35[0] = v10;
    v35[1] = v11;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, v34, 2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(v15, "mutableCopy");

    objc_msgSend(v16, "setObject:forKeyedSubscript:", v12, CFSTR("kAccessoryOnboardingSetupPayloadStringKey"));
    v17 = objc_alloc(MEMORY[0x1E0D285F8]);
    v18 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](self, "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (void *)objc_msgSend(v18, "initWithTarget:", v19);
    v21 = (void *)objc_msgSend(v17, "initWithName:destination:payload:", CFSTR("kContinuePairingAccessoryRequestKey"), v20, v16);

    v28 = MEMORY[0x1E0C809B0];
    v29 = 3221225472;
    v30 = __117__HMHome_HMAccessory___continuePairingForAccessoryWithUUID_setupCode_onboardingSetupPayloadString_completionHandler___block_invoke;
    v31 = &unk_1E3AB59B8;
    v22 = v14;
    v32 = v22;
    v33 = v13;
    objc_msgSend(v21, "setResponseHandler:", &v28);
    objc_msgSend(v22, "messageDispatcher", v28, v29, v30, v31);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "sendMessage:", v21);

  }
  else
  {
    v24 = (void *)MEMORY[0x1A1AC1AAC]();
    v25 = self;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v37 = v27;
      v38 = 2080;
      v39 = "-[HMHome(HMAccessory) _continuePairingForAccessoryWithUUID:setupCode:onboardingSetupPayloadString:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v24);
  }

}

- (void)addAndSetupAccessoriesWithCompletionHandler:(void *)completion
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  HMHome *v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  HMAccessorySetupRequest *v12;
  void *v13;
  HMAccessorySetupManager *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD v22[5];
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = completion;
  -[HMHome context](self, "context");
  v5 = objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMAccessory) addAndSetupAccessoriesWithCompletionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v20;
      v26 = 2112;
      v27 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v6 = (void *)v5;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v11;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_INFO, "%{public}@Adding and setting up accessories", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    v12 = objc_alloc_init(HMAccessorySetupRequest);
    -[HMHome uniqueIdentifier](v8, "uniqueIdentifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMAccessorySetupRequest setHomeUniqueIdentifier:](v12, "setHomeUniqueIdentifier:", v13);

    v14 = objc_alloc_init(HMAccessorySetupManager);
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __67__HMHome_HMAccessory__addAndSetupAccessoriesWithCompletionHandler___block_invoke;
    v22[3] = &unk_1E3AB17A8;
    v22[4] = v8;
    v23 = v4;
    -[HMAccessorySetupManager performAccessorySetupUsingRequest:completionHandler:](v14, "performAccessorySetupUsingRequest:completionHandler:", v12, v22);

  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v15;
      v26 = 2080;
      v27 = "-[HMHome(HMAccessory) addAndSetupAccessoriesWithCompletionHandler:]";
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v12 = (HMAccessorySetupRequest *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, HMAccessorySetupRequest *))v4 + 2))(v4, v12);
  }

}

- (void)addAndSetupAccessoriesWithPayload:(HMAccessorySetupPayload *)payload completionHandler:(void *)completion
{
  HMAccessorySetupPayload *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMHome *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  char *v15;
  void *v16;
  HMAccessorySetupRequest *v17;
  void *v18;
  HMAccessorySetupManager *v19;
  void *v20;
  id v21;
  _QWORD v22[5];
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = payload;
  v7 = completion;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("You must provide a completion handler"), 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v8 = v7;
  -[HMHome context](self, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1A1AC1AAC]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v9)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMAccessorySetupPayload internalSetupPayload](v6, "internalSetupPayload");
      v15 = (char *)objc_claimAutoreleasedReturnValue();
      -[HMAccessorySetupPayload ownershipToken](v6, "ownershipToken");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v26 = v14;
      v27 = 2112;
      v28 = v15;
      v29 = 2112;
      v30 = v16;
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_INFO, "%{public}@Adding and setting up accessories with setup payload: %@ ownership token: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
    v17 = objc_alloc_init(HMAccessorySetupRequest);
    -[HMHome uniqueIdentifier](v11, "uniqueIdentifier");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMAccessorySetupRequest setHomeUniqueIdentifier:](v17, "setHomeUniqueIdentifier:", v18);

    -[HMAccessorySetupRequest setPayload:](v17, "setPayload:", v6);
    v19 = objc_alloc_init(HMAccessorySetupManager);
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __75__HMHome_HMAccessory__addAndSetupAccessoriesWithPayload_completionHandler___block_invoke;
    v22[3] = &unk_1E3AB24E8;
    v22[4] = v11;
    v23 = v9;
    v24 = v8;
    -[HMAccessorySetupManager performAccessorySetupUsingRequest:completionHandler:](v19, "performAccessorySetupUsingRequest:completionHandler:", v17, v22);

  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2080;
      v28 = "-[HMHome(HMAccessory) addAndSetupAccessoriesWithPayload:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
  }

}

- (void)addAndSetUpNewAccessoriesWithSuggestedRoomName:(id)a3 completionHandler:(id)a4
{
  char *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMHome *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  HMAccessorySetupRequest *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  HMHome *v22;
  NSObject *v23;
  void *v24;
  HMAccessorySetupManager *v25;
  id v26;
  _QWORD v27[5];
  id v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = (char *)a3;
  v7 = a4;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("You must provide a completion handler"), 0);
    v26 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v26);
  }
  v8 = v7;
  -[HMHome context](self, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1A1AC1AAC]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v9)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v14;
      v32 = 2112;
      v33 = v6;
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_INFO, "%{public}@Adding and setting up accessories with suggested room name: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    v15 = objc_alloc_init(HMAccessorySetupRequest);
    -[HMHome uniqueIdentifier](v11, "uniqueIdentifier");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMAccessorySetupRequest setHomeUniqueIdentifier:](v15, "setHomeUniqueIdentifier:", v16);

    if (v6)
    {
      -[HMHome roomWithName:](v11, "roomWithName:", v6);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = v17;
      if (v17)
      {
        objc_msgSend(v17, "uniqueIdentifier");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMAccessorySetupRequest setSuggestedRoomUniqueIdentifier:](v15, "setSuggestedRoomUniqueIdentifier:", v19);

      }
      else
      {
        v21 = (void *)MEMORY[0x1A1AC1AAC]();
        v22 = v11;
        HMFGetOSLogHandle();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v31 = v24;
          v32 = 2112;
          v33 = v6;
          _os_log_impl(&dword_19B1B0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Could not find room with name: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v21);
      }

    }
    v25 = objc_alloc_init(HMAccessorySetupManager);
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = __88__HMHome_HMAccessory__addAndSetUpNewAccessoriesWithSuggestedRoomName_completionHandler___block_invoke;
    v27[3] = &unk_1E3AB24E8;
    v27[4] = v11;
    v28 = v9;
    v29 = v8;
    -[HMAccessorySetupManager performAccessorySetupUsingRequest:completionHandler:](v25, "performAccessorySetupUsingRequest:completionHandler:", v15, v27);

  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v20;
      v32 = 2080;
      v33 = "-[HMHome(HMAccessory) addAndSetUpNewAccessoriesWithSuggestedRoomName:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
  }

}

- (void)shareWithHomeOwner:(id)a3 container:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v8 = a5;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __70__HMHome_HMAccessory__shareWithHomeOwner_container_completionHandler___block_invoke;
  v10[3] = &unk_1E3AB17D0;
  v11 = v8;
  v9 = v8;
  -[HMHome establishShareWithHomeOwner:container:completionHandler:](self, "establishShareWithHomeOwner:container:completionHandler:", a3, a4, v10);

}

- (void)establishShareWithHomeOwner:(id)a3 container:(id)a4 completionHandler:(id)a5
{
  -[HMHome establishShareWithHomeOwner:container:allowWriteAccess:completionHandler:](self, "establishShareWithHomeOwner:container:allowWriteAccess:completionHandler:", a3, a4, 0, a5);
}

- (void)establishShareWithHomeOwner:(id)a3 container:(id)a4 allowWriteAccess:(BOOL)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  HMHome *v22;
  NSObject *v23;
  void *v24;
  id v25;
  _QWORD block[5];
  id v27;
  id v28;
  id v29;
  BOOL v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a6;
  if (!v12)
  {
    v21 = (void *)MEMORY[0x1A1AC1AAC]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v32 = v24;
      _os_log_impl(&dword_19B1B0000, v23, OS_LOG_TYPE_ERROR, "%{public}@nil completion", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("You must provide a completion handler"), 0);
    v25 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v25);
  }
  v13 = v12;
  -[HMHome context](self, "context");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (v14)
  {
    objc_msgSend(v14, "queue");
    v16 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __96__HMHome_HMAccessory__establishShareWithHomeOwner_container_allowWriteAccess_completionHandler___block_invoke;
    block[3] = &unk_1E3AB22A0;
    block[4] = self;
    v29 = v13;
    v27 = v10;
    v28 = v11;
    v30 = a5;
    dispatch_async(v16, block);

  }
  else
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v20;
      v33 = 2080;
      v34 = "-[HMHome(HMAccessory) establishShareWithHomeOwner:container:allowWriteAccess:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
  }

}

- (void)addAccessoryWithAccessorySetupPayload:(id)a3 progress:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  HMHome *v16;
  NSObject *v17;
  void *v18;
  id v19;
  _QWORD v20[5];
  id v21;
  id v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (!v10)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("You must provide a completion handler"), 0);
    v19 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v19);
  }
  v11 = v10;
  -[HMHome context](self, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v12)
  {
    objc_msgSend(v12, "queue");
    v14 = objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __88__HMHome_HMAccessory__addAccessoryWithAccessorySetupPayload_progress_completionHandler___block_invoke;
    v20[3] = &unk_1E3AB1820;
    v20[4] = self;
    v21 = v8;
    v22 = v9;
    v23 = v11;
    dispatch_async(v14, v20);

  }
  else
  {
    v15 = (void *)MEMORY[0x1A1AC1AAC]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v18;
      v26 = 2080;
      v27 = "-[HMHome(HMAccessory) addAccessoryWithAccessorySetupPayload:progress:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
  }

}

- (id)__defaultProgressHandlerForAddAccessory
{
  void *v2;
  void *v3;
  _QWORD v5[4];
  id v6;
  id location;

  objc_initWeak(&location, self);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __62__HMHome_HMAccessory____defaultProgressHandlerForAddAccessory__block_invoke;
  v5[3] = &unk_1E3AB1848;
  objc_copyWeak(&v6, &location);
  v2 = _Block_copy(v5);
  v3 = _Block_copy(v2);

  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
  return v3;
}

- (void)stopDiscoveringSymptomsForNearbyDevices
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  HMHome *v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[HMHome context](self, "context");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0D285D0], "messageWithName:messagePayload:", CFSTR("kStopDiscoveringSymptomsForNearbyDevicesRequestKey"), 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "messageDispatcher");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome uuid](self, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "sendMessage:target:", v4, v6);

  }
  else
  {
    v7 = (void *)MEMORY[0x1A1AC1AAC]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v10;
      v13 = 2080;
      v14 = "-[HMHome(HMAccessory) stopDiscoveringSymptomsForNearbyDevices]";
      _os_log_impl(&dword_19B1B0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }

}

- (void)startPairingWithAccessoryDescription:(id)a3 progress:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  HMHome *v16;
  NSObject *v17;
  void *v18;
  id v19;
  _QWORD v20[5];
  id v21;
  id v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (!v10)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("You must provide a completion handler"), 0);
    v19 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v19);
  }
  v11 = v10;
  -[HMHome context](self, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v12)
  {
    objc_msgSend(v12, "queue");
    v14 = objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __80__HMHome_HMAccessory__startPairingWithAccessoryDescription_progress_completion___block_invoke;
    v20[3] = &unk_1E3AB1820;
    v20[4] = self;
    v21 = v8;
    v22 = v9;
    v23 = v11;
    dispatch_async(v14, v20);

  }
  else
  {
    v15 = (void *)MEMORY[0x1A1AC1AAC]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v18;
      v26 = 2080;
      v27 = "-[HMHome(HMAccessory) startPairingWithAccessoryDescription:progress:completion:]";
      _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
  }

}

- (void)_startPairingWithAccessoryDescription:(id)a3 progressHandler:(id)a4 completionHandler:(id)a5
{
  char *v9;
  void *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  HMHome *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  HMHome *v46;
  NSObject *v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  _QWORD v55[4];
  id v56;
  id v57;
  id v58;
  id v59;
  _QWORD aBlock[4];
  id v61;
  HMHome *v62;
  id v63;
  _QWORD v64[3];
  _QWORD v65[3];
  uint8_t buf[4];
  void *v67;
  __int16 v68;
  const char *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v9 = (char *)a3;
  v53 = a4;
  v54 = a5;
  -[HMHome context](self, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)MEMORY[0x1A1AC1AAC]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v10)
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v67 = v15;
      v68 = 2112;
      v69 = v9;
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_INFO, "%{public}@Starting pairing with accessory description: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    if (v9)
    {
      encodeRootObject(v9);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      if (v52)
      {
        objc_msgSend(v9, "appIdentifier");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v51)
        {
          objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "bundleIdentifier");
          v51 = (void *)objc_claimAutoreleasedReturnValue();

        }
        v64[0] = CFSTR("kAccessoryDescriptionDataKey");
        v64[1] = CFSTR("kAccessorySetupCodeDeferredKey");
        v65[0] = v52;
        v65[1] = MEMORY[0x1E0C9AAB0];
        v64[2] = CFSTR("kAccessorySetupRetryKey");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v9, "retry"));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v65[2] = v17;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v65, v64, 3);
        v50 = (void *)objc_claimAutoreleasedReturnValue();

        v18 = (void *)MEMORY[0x1E0D285F8];
        -[HMHome messageDestination](v12, "messageDestination");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "messageWithName:destination:payload:", CFSTR("kAddAccessoryRequestKey"), v19, v50);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v9, "setupAccessoryPayload");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_alloc(MEMORY[0x1E0D28540]);
        v23 = (void *)MEMORY[0x1E0CB3940];
        MEMORY[0x1A1AC1500](v12, a2);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "stringWithFormat:", CFSTR("%@, %s:%ld"), v24, "/Library/Caches/com.apple.xbs/Sources/HomeKit/Sources/HomeKit/HMHome.m", 7531);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = (void *)objc_msgSend(v22, "initWithName:", v25);

        -[HMHome uuid](v12, "uuid");
        objc_msgSend(v21, "categoryNumber");

        if (v21)
          objc_msgSend(v21, "supportsBTLE");
        objc_msgSend(v20, "setActivity:", v26);
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3221225472;
        aBlock[2] = __95__HMHome_HMAccessory___startPairingWithAccessoryDescription_progressHandler_completionHandler___block_invoke;
        aBlock[3] = &unk_1E3AB1870;
        v49 = v26;
        v61 = v49;
        v62 = v12;
        v63 = v54;
        v27 = _Block_copy(aBlock);
        -[HMHome context](v12, "context");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "pendingRequests");
        v29 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v20, "identifier");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = _Block_copy(v53);
        v32 = _Block_copy(v27);
        objc_msgSend(v29, "addAccessoryDescription:progressBlock:andCompletionBlock:forIdentifier:", v9, v31, v32, v30);

        objc_initWeak((id *)buf, v12);
        v55[0] = MEMORY[0x1E0C809B0];
        v55[1] = 3221225472;
        v55[2] = __95__HMHome_HMAccessory___startPairingWithAccessoryDescription_progressHandler_completionHandler___block_invoke_2;
        v55[3] = &unk_1E3AB5358;
        objc_copyWeak(&v59, (id *)buf);
        v33 = v29;
        v56 = v33;
        v34 = v30;
        v57 = v34;
        v35 = v27;
        v58 = v35;
        objc_msgSend(v20, "setResponseHandler:", v55);
        objc_msgSend(v10, "messageDispatcher");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "sendMessage:completionHandler:", v20, 0);

        objc_destroyWeak(&v59);
        objc_destroyWeak((id *)buf);

      }
      else
      {
        v45 = (void *)MEMORY[0x1A1AC1AAC]();
        v46 = v12;
        HMFGetOSLogHandle();
        v47 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v67 = v48;
          v68 = 2112;
          v69 = v9;
          _os_log_impl(&dword_19B1B0000, v47, OS_LOG_TYPE_ERROR, "%{public}@Failed to encode accessory description: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v45);
        -[HMHome context](v46, "context");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "delegateCaller");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "callCompletion:array:additionalAccessoryInfo:error:", v54, 0, 0, v20);
      }

    }
    else
    {
      v38 = (void *)MEMORY[0x1A1AC1AAC]();
      v39 = v12;
      HMFGetOSLogHandle();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v67 = v41;
        _os_log_impl(&dword_19B1B0000, v40, OS_LOG_TYPE_ERROR, "%{public}@Cannot start pairing with nil accessory description", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v38);
      -[HMHome context](v39, "context");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "delegateCaller");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "callCompletion:array:additionalAccessoryInfo:error:", v54, 0, 0, v44);

    }
  }
  else
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v67 = v37;
      v68 = 2080;
      v69 = "-[HMHome(HMAccessory) _startPairingWithAccessoryDescription:progressHandler:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
  }

}

- (void)userDidRespondToConsentRequestForSetupAccessoryDescription:(id)a3 withResponse:(int64_t)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[2];
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[HMHome context](self, "context");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    encodeRootObject(v6);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v8;
    if (v8)
    {
      v10 = (void *)MEMORY[0x1E0D285D0];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4, CFSTR("kAccessoryDescriptionDataKey"), CFSTR("HMHomeUserConsentResponseForAccessoryMessageKey"), v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v24[1] = v11;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, &v23, 2);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "messageWithName:messagePayload:", CFSTR("HMHomeUserConsentForAccessoryReplacementRequestKey"), v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v7, "messageDispatcher");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome uuid](self, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "sendMessage:target:andInvokeCompletionHandler:", v13, v15, &__block_literal_global_1551);

    }
    else
    {
      v20 = (void *)MEMORY[0x1A1AC1AAC]();
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v26 = v22;
        _os_log_impl(&dword_19B1B0000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@unable to encode accessory description in user consent response", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
    }

  }
  else
  {
    v16 = (void *)MEMORY[0x1A1AC1AAC]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v19;
      v27 = 2080;
      v28 = "-[HMHome(HMAccessory) userDidRespondToConsentRequestForSetupAccessoryDescription:withResponse:]";
      _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
  }

}

- (void)cancelPairingForAccessoryWithDescription:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[5];
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMAccessory) cancelPairingForAccessoryWithDescription:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __82__HMHome_HMAccessory__cancelPairingForAccessoryWithDescription_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v23 = v6;
    v24 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2080;
      v28 = "-[HMHome(HMAccessory) cancelPairingForAccessoryWithDescription:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v7 + 2))(v7, v15);

  }
}

- (void)_cancelPairingForAccessoryWithDescription:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  HMHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, void *);
  void *v27;
  id v28;
  id v29;
  const __CFString *v30;
  uint64_t v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  const char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    if (v6)
    {
      encodeRootObject(v6);
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = (void *)v9;
      if (v9)
      {
        v30 = CFSTR("kAccessoryDescriptionDataKey");
        v31 = v9;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_alloc(MEMORY[0x1E0D285F8]);
        v13 = objc_alloc(MEMORY[0x1E0D285D8]);
        -[HMHome uuid](self, "uuid");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (void *)objc_msgSend(v13, "initWithTarget:", v14);
        v16 = (void *)objc_msgSend(v12, "initWithName:destination:payload:", CFSTR("kCancelPairingAccessoryRequestKey"), v15, v11);

        v24 = MEMORY[0x1E0C809B0];
        v25 = 3221225472;
        v26 = __83__HMHome_HMAccessory___cancelPairingForAccessoryWithDescription_completionHandler___block_invoke;
        v27 = &unk_1E3AB59B8;
        v17 = v8;
        v28 = v17;
        v29 = v7;
        objc_msgSend(v16, "setResponseHandler:", &v24);
        objc_msgSend(v17, "messageDispatcher", v24, v25, v26, v27);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "sendMessage:", v16);

      }
      else
      {
        -[HMHome context](self, "context");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "delegateCaller");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "callCompletion:error:", v7, v23);

      }
    }
    else
    {
      -[HMHome context](self, "context");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "delegateCaller");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "callCompletion:error:", v7, v16);
    }

  }
  else
  {
    v19 = (void *)MEMORY[0x1A1AC1AAC]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v33 = v22;
      v34 = 2080;
      v35 = "-[HMHome(HMAccessory) _cancelPairingForAccessoryWithDescription:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
  }

}

- (void)removeAccessory:(HMAccessory *)accessory completionHandler:(void *)completion
{
  HMAccessory *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  HMHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[5];
  HMAccessory *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = accessory;
  v7 = completion;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMAccessory) removeAccessory:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __57__HMHome_HMAccessory__removeAccessory_completionHandler___block_invoke;
    block[3] = &unk_1E3AB5C58;
    block[4] = self;
    v23 = v6;
    v24 = v7;
    dispatch_async(v10, block);

  }
  else
  {
    v11 = (void *)MEMORY[0x1A1AC1AAC]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2080;
      v28 = "-[HMHome(HMAccessory) removeAccessory:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, void *))v7 + 2))(v7, v15);

  }
}

- (void)_removeAccessory:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  HMHome *v22;
  id v23;
  const __CFString *v24;
  void *v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  const char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    if (v6)
    {
      -[HMHome uuid](self, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = CFSTR("kAccessoryUUID");
      objc_msgSend(v6, "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "UUIDString");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = v12;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __58__HMHome_HMAccessory___removeAccessory_completionHandler___block_invoke;
      v20[3] = &unk_1E3AB60C8;
      v21 = v9;
      v22 = self;
      v23 = v7;
      -[_HMContext sendMessage:target:payload:responseHandler:](v21, CFSTR("kRemoveAccessoryRequestKey"), v10, v13, v20);

      goto LABEL_10;
    }
    objc_msgSend(v8, "delegateCaller");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "callCompletion:error:", v7, v19);

LABEL_9:
    goto LABEL_10;
  }
  v14 = (void *)MEMORY[0x1A1AC1AAC]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v27 = v17;
    v28 = 2080;
    v29 = "-[HMHome(HMAccessory) _removeAccessory:completionHandler:]";
    _os_log_impl(&dword_19B1B0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v14);
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v7 + 2))(v7, v18);
    goto LABEL_9;
  }
LABEL_10:

}

- (void)assignAccessory:(HMAccessory *)accessory toRoom:(HMRoom *)room completionHandler:(void *)completion
{
  HMAccessory *v8;
  HMRoom *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  HMHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  HMHome *v21;
  NSObject *v22;
  void *v23;
  id v24;
  _QWORD block[5];
  HMAccessory *v26;
  HMRoom *v27;
  id v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = accessory;
  v9 = room;
  v10 = completion;
  -[HMHome context](self, "context");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMAccessory) assignAccessory:toRoom:completionHandler:]", CFSTR("completion"));
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = (void *)MEMORY[0x1A1AC1AAC]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v30 = v23;
      v31 = 2112;
      v32 = (const char *)v19;
      _os_log_impl(&dword_19B1B0000, v22, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v19, 0);
    v24 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v24);
  }
  v12 = v11;
  if (v11)
  {
    objc_msgSend(v11, "queue");
    v13 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __64__HMHome_HMAccessory__assignAccessory_toRoom_completionHandler___block_invoke;
    block[3] = &unk_1E3AB4D20;
    block[4] = self;
    v26 = v8;
    v27 = v9;
    v28 = v10;
    dispatch_async(v13, block);

  }
  else
  {
    v14 = (void *)MEMORY[0x1A1AC1AAC]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v30 = v17;
      v31 = 2080;
      v32 = "-[HMHome(HMAccessory) assignAccessory:toRoom:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, void *))v10 + 2))(v10, v18);

  }
}

- (void)_assignAccessory:(id)a3 toRoom:(id)a4 completionHandler:(id)a5
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a5;
  if (a3 && a4)
  {
    objc_msgSend(a3, "_updateRoom:completionHandler:", a4, v12);
    v8 = v12;
  }
  else
  {
    -[HMHome context](self, "context");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "delegateCaller");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 20, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "callCompletion:error:", v12, v11);

    v8 = v9;
  }

}

- (NSArray)servicesWithTypes:(NSArray *)serviceTypes
{
  NSArray *v4;
  NSArray *v5;
  void *v6;
  uint64_t i;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  void *v14;
  void *v15;
  _BOOL4 v16;
  void *v17;
  id v18;
  id obj;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = serviceTypes;
  v5 = v4;
  if (v4 && -[NSArray count](v4, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    -[HMHome accessories](self, "accessories");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    if (v22)
    {
      v21 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v22; ++i)
        {
          if (*(_QWORD *)v28 != v21)
            objc_enumerationMutation(obj);
          v8 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
          v23 = 0u;
          v24 = 0u;
          v25 = 0u;
          v26 = 0u;
          objc_msgSend(v8, "services");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
          if (v10)
          {
            v11 = v10;
            v12 = *(_QWORD *)v24;
            do
            {
              for (j = 0; j != v11; ++j)
              {
                if (*(_QWORD *)v24 != v12)
                  objc_enumerationMutation(v9);
                v14 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * j);
                objc_msgSend(v14, "serviceType");
                v15 = (void *)objc_claimAutoreleasedReturnValue();
                v16 = -[NSArray containsObject:](v5, "containsObject:", v15);

                if (v16)
                  objc_msgSend(v6, "addObject:", v14);
              }
              v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
            }
            while (v11);
          }

        }
        v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
      }
      while (v22);
    }

    if (objc_msgSend(v6, "count"))
      v17 = v6;
    else
      v17 = 0;
    v18 = v17;

  }
  else
  {
    v18 = 0;
  }

  return (NSArray *)v18;
}

- (void)unblockAccessory:(HMAccessory *)accessory completionHandler:(void *)completion
{
  HMAccessory *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  _QWORD block[5];
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = accessory;
  v7 = completion;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMAccessory) unblockAccessory:completionHandler:]", CFSTR("completion"));
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v20;
      v26 = 2112;
      v27 = (const char *)v16;
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v16, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "queue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __58__HMHome_HMAccessory__unblockAccessory_completionHandler___block_invoke;
    block[3] = &unk_1E3AB60A0;
    block[4] = self;
    v23 = v7;
    dispatch_async(v10, block);

    v11 = v23;
  }
  else
  {
    v12 = (void *)MEMORY[0x1A1AC1AAC]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v15;
      v26 = 2080;
      v27 = "-[HMHome(HMAccessory) unblockAccessory:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, void *))v7 + 2))(v7, v11);
  }

}

- (void)performBatchRequest:(id)a3
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void (**v20)(_QWORD, _QWORD);
  void *v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = objc_alloc(MEMORY[0x1E0D28540]);
  v7 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1A1AC1500](self, a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringWithFormat:", CFSTR("%@, %s:%ld"), v8, "/Library/Caches/com.apple.xbs/Sources/HomeKit/Sources/HomeKit/HMHome.m", 7742);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v6, "initWithName:", v9);

  objc_msgSend(v5, "completionHandler");
  v11 = objc_claimAutoreleasedReturnValue();
  if (!v11
    || (v12 = (void *)v11,
        objc_msgSend(v5, "progressHandler"),
        v13 = (void *)objc_claimAutoreleasedReturnValue(),
        v13,
        v12,
        !v13))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("You must provide a completion handler"), 0);
    v22 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v22);
  }
  -[HMHome context](self, "context");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    objc_msgSend(v10, "begin");
    -[HMHome _performBatchRequest:activity:](self, "_performBatchRequest:activity:", v5, v10);
    objc_msgSend(v10, "end");
  }
  else
  {
    v15 = (void *)MEMORY[0x1A1AC1AAC]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v24 = v18;
      v25 = 2080;
      v26 = "-[HMHome(HMAccessory) performBatchRequest:]";
      _os_log_impl(&dword_19B1B0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(v5, "completionHandler");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      objc_msgSend(v5, "completionHandler");
      v20 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *))v20)[2](v20, v21);

    }
  }

}

- (void)__handleExecuteRequest:(id)a3 activity:(id)a4 batchRequest:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  unint64_t v12;
  void *v13;
  HMHome *v14;
  NSObject *v15;
  void *v16;
  void (**v17)(_QWORD, _QWORD);
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  unint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v10, "requests");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "count");

  if (v12 < 2)
  {
    objc_msgSend(v8, "actionSet");
    v17 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "reportContext");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "completionHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome _executeActionSet:activity:reportContext:completionHandler:](self, "_executeActionSet:activity:reportContext:completionHandler:", v17, v9, v19, v20);

  }
  else
  {
    v13 = (void *)MEMORY[0x1A1AC1AAC]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543618;
      v22 = v16;
      v23 = 2048;
      v24 = v12;
      _os_log_impl(&dword_19B1B0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Batch execute request does not support multiple requests - have %lu", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(v10, "completionHandler");
    v17 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v17)[2](v17, v18);

  }
}

- (void)_retrieveResultsWithReportingContext:(id)a3 progressHandler:(id)a4 completionHandler:(id)a5 activity:(id)a6
{
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, void *);
  void *v33;
  id v34;
  id v35;

  v10 = (void *)MEMORY[0x1E0C99E08];
  v11 = a6;
  v12 = a5;
  v13 = a4;
  v14 = a3;
  objc_msgSend(v10, "dictionary");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  _dictionaryRepresentationForReportContext(v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v15, "addEntriesFromDictionary:", v16);
  objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:messagePayload:", CFSTR("HM.retrieveAsyncResults"), v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_alloc(MEMORY[0x1E0D285D8]);
  -[HMHome uuid](self, "uuid");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)objc_msgSend(v18, "initWithTarget:", v19);
  objc_msgSend(v17, "setDestination:", v20);

  objc_msgSend(v17, "setActivity:", v11);
  -[HMHome __responseHandlerForRequests:progressHandler:completionHandler:activity:](self, "__responseHandlerForRequests:progressHandler:completionHandler:activity:", 0, v13, v12, v11);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMHome context](self, "context");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "pendingRequests");
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "identifier");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = _Block_copy(v21);
  objc_msgSend(v23, "addCompletionBlock:forIdentifier:", v25, v24);

  v30 = MEMORY[0x1E0C809B0];
  v31 = 3221225472;
  v32 = __103__HMHome_HMAccessory___retrieveResultsWithReportingContext_progressHandler_completionHandler_activity___block_invoke;
  v33 = &unk_1E3AB6200;
  v34 = v23;
  v35 = v24;
  v26 = v24;
  v27 = v23;
  objc_msgSend(v17, "setResponseHandler:", &v30);
  -[HMHome context](self, "context", v30, v31, v32, v33);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "messageDispatcher");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "sendMessage:", v17);

}

- (void)retrieveResultsWithReportingContext:(id)a3 progressHandler:(id)a4 completionHandler:(id)a5
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  id v19;
  void *v20;
  HMHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD block[4];
  id v27;
  HMHome *v28;
  id v29;
  id v30;
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  const char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  -[HMHome context](self, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    if (v10)
    {
      v13 = objc_alloc(MEMORY[0x1E0D28540]);
      v14 = (void *)MEMORY[0x1E0CB3940];
      MEMORY[0x1A1AC1500](self, a2);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "stringWithFormat:", CFSTR("%@, %s:%ld"), v15, "/Library/Caches/com.apple.xbs/Sources/HomeKit/Sources/HomeKit/HMHome.m", 8062);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (void *)objc_msgSend(v13, "initWithName:", v16);

      objc_msgSend(v12, "queue");
      v18 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __93__HMHome_HMAccessory__retrieveResultsWithReportingContext_progressHandler_completionHandler___block_invoke;
      block[3] = &unk_1E3AB1758;
      v27 = v17;
      v28 = self;
      v29 = v9;
      v30 = v10;
      v31 = v11;
      v19 = v17;
      dispatch_async(v18, block);

LABEL_10:
      goto LABEL_11;
    }
    v24 = (void *)MEMORY[0x1E0CB35C8];
    v25 = 20;
LABEL_9:
    objc_msgSend(v24, "hmErrorWithCode:", v25);
    v19 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, id))v11 + 2))(v11, v19);
    goto LABEL_10;
  }
  v20 = (void *)MEMORY[0x1A1AC1AAC]();
  v21 = self;
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v33 = v23;
    v34 = 2080;
    v35 = "-[HMHome(HMAccessory) retrieveResultsWithReportingContext:progressHandler:completionHandler:]";
    _os_log_impl(&dword_19B1B0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v20);
  if (v11)
  {
    v24 = (void *)MEMORY[0x1E0CB35C8];
    v25 = 12;
    goto LABEL_9;
  }
LABEL_11:

}

uint64_t __93__HMHome_HMAccessory__retrieveResultsWithReportingContext_progressHandler_completionHandler___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "begin");
  objc_msgSend(*(id *)(a1 + 40), "_retrieveResultsWithReportingContext:progressHandler:completionHandler:activity:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 32));
  return objc_msgSend(*(id *)(a1 + 32), "end");
}

void __103__HMHome_HMAccessory___retrieveResultsWithReportingContext_progressHandler_completionHandler_activity___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  if (v3)
  {
    v6 = v3;
    objc_msgSend(*(id *)(a1 + 32), "removeCompletionBlockForIdentifier:", *(_QWORD *)(a1 + 40));
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)v4;
    if (v4)
      (*(void (**)(uint64_t, id, _QWORD, _QWORD))(v4 + 16))(v4, v6, 0, 0);

    v3 = v6;
  }

}

void __58__HMHome_HMAccessory__unblockAccessory_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "context");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "delegateCaller");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "callCompletion:error:", *(_QWORD *)(a1 + 40), 0);

  }
}

uint64_t __64__HMHome_HMAccessory__assignAccessory_toRoom_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_assignAccessory:toRoom:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void __58__HMHome_HMAccessory___removeAccessory_completionHandler___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;

  v9 = a2;
  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 48);
    v8 = v9;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_handleAccessoryRemovedResponse:", a3);
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 48);
    v8 = 0;
  }
  objc_msgSend(v5, "callCompletion:error:", v7, v8);

}

uint64_t __57__HMHome_HMAccessory__removeAccessory_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeAccessory:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __83__HMHome_HMAccessory___cancelPairingForAccessoryWithDescription_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "delegateCaller");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 40), v4);

}

uint64_t __82__HMHome_HMAccessory__cancelPairingForAccessoryWithDescription_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_cancelPairingForAccessoryWithDescription:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __95__HMHome_HMAccessory___startPairingWithAccessoryDescription_progressHandler_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v7;
  id v8;
  id v9;
  id v10;

  v7 = *(void **)(a1 + 32);
  v8 = a4;
  v9 = a3;
  v10 = a2;
  objc_msgSend(v7, "begin");
  objc_msgSend(*(id *)(a1 + 40), "uuid");

  objc_msgSend(v8, "domain");
  objc_msgSend(v8, "code");
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  return objc_msgSend(*(id *)(a1 + 32), "end");
}

void __95__HMHome_HMAccessory___startPairingWithAccessoryDescription_progressHandler_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id WeakRetained;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "removeCompletionBlockForIdentifier:", *(_QWORD *)(a1 + 40));
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)v4;
    if (WeakRetained && v4)
    {
      objc_msgSend(WeakRetained, "context");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "delegateCaller");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "callCompletion:array:additionalAccessoryInfo:error:", *(_QWORD *)(a1 + 48), 0, 0, v8);

    }
  }

}

uint64_t __80__HMHome_HMAccessory__startPairingWithAccessoryDescription_progress_completion___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startPairingWithAccessoryDescription:progressHandler:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void __62__HMHome_HMAccessory____defaultProgressHandlerForAddAccessory__block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained;
  void *v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    if (a3 == 6)
    {
      v7 = 1;
      goto LABEL_6;
    }
    if (a3 == 9)
    {
      v7 = 3;
LABEL_6:
      objc_msgSend(WeakRetained, "userDidRespondToConsentRequestForSetupAccessoryDescription:withResponse:", v8, v7);
    }
  }

}

void __88__HMHome_HMAccessory__addAccessoryWithAccessorySetupPayload_progress_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  HMSetupAccessoryDescription *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMSetupAccessoryDescription *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[5];
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A1AC1AAC]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "internalSetupPayload");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "ownershipToken");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v20 = v5;
    v21 = 2112;
    v22 = v6;
    v23 = 2112;
    v24 = v7;
    _os_log_impl(&dword_19B1B0000, v4, OS_LOG_TYPE_INFO, "%{public}@Adding accessory with setup payload: %@ ownership token: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  v8 = [HMSetupAccessoryDescription alloc];
  objc_msgSend(*(id *)(a1 + 40), "internalSetupPayload");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "bundleIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "ownershipToken");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[HMSetupAccessoryDescription initWithSetupAccessoryPayload:appID:homeUUID:ownershipToken:](v8, "initWithSetupAccessoryPayload:appID:homeUUID:ownershipToken:", v9, v11, v12, v13);

  v15 = *(void **)(a1 + 32);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __88__HMHome_HMAccessory__addAccessoryWithAccessorySetupPayload_progress_completionHandler___block_invoke_1545;
  v17[3] = &unk_1E3AB17F8;
  v17[4] = v15;
  v16 = *(_QWORD *)(a1 + 48);
  v18 = *(id *)(a1 + 56);
  objc_msgSend(v15, "_startPairingWithAccessoryDescription:progressHandler:completionHandler:", v14, v16, v17);

}

void __88__HMHome_HMAccessory__addAccessoryWithAccessorySetupPayload_progress_completionHandler___block_invoke_1545(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;

  v6 = *(void **)(a1 + 32);
  v7 = a4;
  v8 = a2;
  objc_msgSend(v6, "context");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "delegateCaller");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "callCompletion:error:array:", *(_QWORD *)(a1 + 40), v7, v8);

}

void __96__HMHome_HMAccessory__establishShareWithHomeOwner_container_allowWriteAccess_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  BOOL v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  HMUserCloudShareWithOwnerOperation *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "owner");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "currentUser");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (v5)
  {
    v6 = (void *)MEMORY[0x1A1AC1AAC]();
    v7 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543874;
      v19 = v9;
      v20 = 2112;
      v21 = v2;
      v22 = 2112;
      v23 = v4;
      _os_log_impl(&dword_19B1B0000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Owner %@ or current user %@ is not known.", (uint8_t *)&v18, 0x20u);

    }
    objc_autoreleasePoolPop(v6);
    v10 = *(_QWORD *)(a1 + 56);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 2, CFSTR("Owner or current user not known"), CFSTR("Need owner and current user"), 0);
    v11 = (HMUserCloudShareWithOwnerOperation *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, HMUserCloudShareWithOwnerOperation *))(v10 + 16))(v10, 0, v11);
  }
  else
  {
    v11 = -[HMUserCloudShareWithOwnerOperation initWithShare:container:ownerUser:allowWriteAccess:currentUser:]([HMUserCloudShareWithOwnerOperation alloc], "initWithShare:container:ownerUser:allowWriteAccess:currentUser:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v2, *(unsigned __int8 *)(a1 + 64), v3);
    v12 = (void *)MEMORY[0x1A1AC1AAC](-[HMUserCloudShareWithOwnerOperation setCompletion:](v11, "setCompletion:", *(_QWORD *)(a1 + 56)));
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v16;
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Adding establish share with home owner cloud share operation.", (uint8_t *)&v18, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(*(id *)(a1 + 32), "shareWithHomeOwnerOperationQueue");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "addOperation:", v11);

  }
}

void __70__HMHome_HMAccessory__shareWithHomeOwner_container_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  objc_msgSend(v6, "participant");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "ownerUser");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  (*(void (**)(uint64_t, id, void *, id))(v4 + 16))(v4, v8, v7, v5);
}

void __88__HMHome_HMAccessory__addAndSetUpNewAccessoriesWithSuggestedRoomName_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  _QWORD v15[5];
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(v5, "accessoryUniqueIdentifiers");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __88__HMHome_HMAccessory__addAndSetUpNewAccessoriesWithSuggestedRoomName_completionHandler___block_invoke_1538;
    v15[3] = &unk_1E3AB3AB8;
    v15[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v7, "na_map:", v15);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "callCompletion:error:array:", *(_QWORD *)(a1 + 48), 0, v8);

  }
  else
  {
    v10 = (void *)MEMORY[0x1A1AC1AAC]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v17 = v13;
      v18 = 2112;
      v19 = v6;
      _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to perform accessory setup with suggested room name: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "callCompletion:error:array:", *(_QWORD *)(a1 + 48), v6, 0);

  }
}

uint64_t __88__HMHome_HMAccessory__addAndSetUpNewAccessoriesWithSuggestedRoomName_completionHandler___block_invoke_1538(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "accessoryWithUniqueIdentifier:", a2);
}

void __75__HMHome_HMAccessory__addAndSetupAccessoriesWithPayload_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  _QWORD v15[5];
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(v5, "accessoryUniqueIdentifiers");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __75__HMHome_HMAccessory__addAndSetupAccessoriesWithPayload_completionHandler___block_invoke_1536;
    v15[3] = &unk_1E3AB3AB8;
    v15[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v7, "na_map:", v15);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "callCompletion:obj:error:", *(_QWORD *)(a1 + 48), v8, 0);

  }
  else
  {
    v10 = (void *)MEMORY[0x1A1AC1AAC]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v17 = v13;
      v18 = 2112;
      v19 = v6;
      _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to perform accessory setup with setup payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "callCompletion:obj:error:", *(_QWORD *)(a1 + 48), 0, v6);

  }
}

uint64_t __75__HMHome_HMAccessory__addAndSetupAccessoriesWithPayload_completionHandler___block_invoke_1536(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "accessoryWithUniqueIdentifier:", a2);
}

void __67__HMHome_HMAccessory__addAndSetupAccessoriesWithCompletionHandler___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  objc_msgSend(v4, "context");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "delegateCaller");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "callCompletion:error:", *(_QWORD *)(a1 + 40), v5);

}

void __117__HMHome_HMAccessory___continuePairingForAccessoryWithUUID_setupCode_onboardingSetupPayloadString_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "delegateCaller");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 40), v4);

}

uint64_t __116__HMHome_HMAccessory__continuePairingForAccessoryWithUUID_setupCode_onboardingSetupPayloadString_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_continuePairingForAccessoryWithUUID:setupCode:onboardingSetupPayloadString:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void __76__HMHome_HMAccessory___cancelPairingForAccessoryWithUUID_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "delegateCaller");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "callCompletion:error:", *(_QWORD *)(a1 + 40), v4);

}

uint64_t __75__HMHome_HMAccessory__cancelPairingForAccessoryWithUUID_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_cancelPairingForAccessoryWithUUID:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __112__HMHome_HMAccessory___addAccessory_accessoryDescription_password_setupCodeDeferred_progress_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "begin");
  objc_msgSend(*(id *)(a1 + 40), "uuid");

  objc_msgSend(v4, "domain");
  objc_msgSend(v4, "code");
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  return objc_msgSend(*(id *)(a1 + 32), "end");
}

void __112__HMHome_HMAccessory___addAccessory_accessoryDescription_password_setupCodeDeferred_progress_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "removeCompletionBlockForIdentifier:", *(_QWORD *)(a1 + 40));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "delegateCaller");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "callCompletion:error:", v4, v3);

    v6 = (id)objc_msgSend(*(id *)(a1 + 32), "removeAccessoryForIdentifier:", *(_QWORD *)(a1 + 40));
    v7 = *(void **)(a1 + 56);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __112__HMHome_HMAccessory___addAccessory_accessoryDescription_password_setupCodeDeferred_progress_completionHandler___block_invoke_3;
    v8[3] = &unk_1E3AB1620;
    v9 = v3;
    objc_msgSend(v7, "_notifySetupFailedIfInHomeUIService:", v8);

  }
}

id __112__HMHome_HMAccessory___addAccessory_accessoryDescription_password_setupCodeDeferred_progress_completionHandler___block_invoke_3(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

uint64_t __102__HMHome_HMAccessory__startPairingWithAccessory_accessorySetupDescription_progress_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_addAccessory:accessoryDescription:password:setupCodeDeferred:progress:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0, 1, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void __72__HMHome_HMAccessory__addAccessory_password_progress_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  HMSetupAccessoryDescription *v4;
  void *v5;
  void *v6;
  void *v7;
  HMSetupAccessoryDescription *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  HMSetupAccessoryDescription *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "bundleIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = [HMSetupAccessoryDescription alloc];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "name");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[HMSetupAccessoryDescription initWithAccessoryUUID:accessoryName:appID:homeUUID:](v4, "initWithAccessoryUUID:accessoryName:appID:homeUUID:", v5, v6, v3, v7);

  v9 = _Block_copy(*(const void **)(a1 + 56));
  if (!v9)
  {
    objc_msgSend(*(id *)(a1 + 40), "__defaultProgressHandlerForAddAccessory");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v10 = (void *)MEMORY[0x1A1AC1AAC]();
  v11 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "name");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "UUIDString");
    v17 = v3;
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v19 = v13;
    v20 = 2112;
    v21 = v8;
    v22 = 2112;
    v23 = v14;
    v24 = 2112;
    v25 = v16;
    _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_DEBUG, "%{public}@Re-registering accessory description %@ for add accessory progress notification for accessory %@/%@", buf, 0x2Au);

    v3 = v17;
  }

  objc_autoreleasePoolPop(v10);
  objc_msgSend(*(id *)(a1 + 40), "_addAccessory:accessoryDescription:password:setupCodeDeferred:progress:completionHandler:", *(_QWORD *)(a1 + 32), v8, *(_QWORD *)(a1 + 48), 0, v9, *(_QWORD *)(a1 + 64));

}

+ (BOOL)accessorySupportsMediaAccessControl:(id)a3
{
  return objc_msgSend(a3, "supportsMediaAccessControl");
}

+ (id)generateMediaPasswordWithError:(id *)a3
{
  return HMGenerateDecimalDigitPasswordWithLength(6, a3);
}

+ (BOOL)isValidMediaPassword:(id)a3 error:(id *)a4
{
  id v5;
  void *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  void *v12;
  uint64_t v13;

  v5 = a3;
  v6 = v5;
  if (!v5)
  {
    if (a4)
    {
      v8 = (void *)MEMORY[0x1E0CB35C8];
      v9 = 20;
      goto LABEL_10;
    }
    goto LABEL_21;
  }
  v7 = objc_msgSend(v5, "lengthOfBytesUsingEncoding:", 4);
  if (!v7)
  {
    if (a4)
    {
      v8 = (void *)MEMORY[0x1E0CB35C8];
      v9 = 3;
      goto LABEL_10;
    }
    goto LABEL_21;
  }
  if (v7 < 0x41)
  {
    if (isValidMediaPassword_error__onceToken != -1)
      dispatch_once(&isValidMediaPassword_error__onceToken, &__block_literal_global_1735);
    if (objc_msgSend(v6, "rangeOfCharacterFromSet:", isValidMediaPassword_error__invalidCharacters) == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (!SecPasswordIsPasswordWeak())
      {
        v11 = 1;
        goto LABEL_22;
      }
      if (!a4)
        goto LABEL_21;
      v12 = (void *)MEMORY[0x1E0CB35C8];
      v13 = 2201;
    }
    else
    {
      if (!a4)
        goto LABEL_21;
      v12 = (void *)MEMORY[0x1E0CB35C8];
      v13 = 2200;
    }
    objc_msgSend(v12, "hmPrivateErrorWithCode:", v13);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_11;
  }
  if (!a4)
  {
LABEL_21:
    v11 = 0;
    goto LABEL_22;
  }
  v8 = (void *)MEMORY[0x1E0CB35C8];
  v9 = 46;
LABEL_10:
  objc_msgSend(v8, "hmErrorWithCode:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:
  v11 = 0;
  *a4 = v10;
LABEL_22:

  return v11;
}

void __53__HMHome_HMMediaProfile__isValidMediaPassword_error___block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = objc_alloc_init(MEMORY[0x1E0CB3780]);
  objc_msgSend(MEMORY[0x1E0CB3500], "alphanumericCharacterSet");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "formUnionWithCharacterSet:", v0);

  objc_msgSend(MEMORY[0x1E0CB3500], "punctuationCharacterSet");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "formUnionWithCharacterSet:", v1);

  objc_msgSend(v4, "invertedSet");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)isValidMediaPassword_error__invalidCharacters;
  isValidMediaPassword_error__invalidCharacters = v2;

}

- (id)createSiriEndpointProfilesMessenger
{
  void *v3;
  void *v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  HMSiriEndpointProfilesMessenger *v11;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  -[HMHome uuid](self, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMSiriEndpointProfilesMessenger messageTargetUUIDWithHomeUUID:](HMSiriEndpointProfilesMessenger, "messageTargetUUIDWithHomeUUID:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (void *)MEMORY[0x1A1AC1AAC]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543618;
    v14 = v8;
    v15 = 2112;
    v16 = v4;
    _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_INFO, "%{public}@Creating siri endpoint profile messenger with message target UUID: %@", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMHome context](v6, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "messageDispatcher");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10)
    _HMFPreconditionFailure();
  v11 = -[HMSiriEndpointProfilesMessenger initWithMessageTargetUUID:messageDispatcher:]([HMSiriEndpointProfilesMessenger alloc], "initWithMessageTargetUUID:messageDispatcher:", v4, v10);

  return v11;
}

- (void)executeActions:(id)a3 completionHandler:(id)a4
{
  char *v6;
  void (**v7)(id, void *);
  uint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  HMHome *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  HMHome *v24;
  NSObject *v25;
  void *v26;
  id v27;
  _QWORD block[4];
  char *v29;
  HMHome *v30;
  id v31;
  void (**v32)(id, void *);
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = (char *)a3;
  v7 = (void (**)(id, void *))a4;
  -[HMHome context](self, "context");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(HMActionExecution) executeActions:completionHandler:]", CFSTR("completionHandler"));
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = (void *)MEMORY[0x1A1AC1AAC]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v26;
      v35 = 2112;
      v36 = (const char *)v22;
      _os_log_impl(&dword_19B1B0000, v25, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v22, 0);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v27);
  }
  v9 = (void *)v8;
  if (!v8)
  {
    v12 = (void *)MEMORY[0x1A1AC1AAC]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v15;
      v35 = 2080;
      v36 = "-[HMHome(HMActionExecution) executeActions:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v16 = (void *)MEMORY[0x1E0CB35C8];
    v17 = 12;
    goto LABEL_11;
  }
  if (!objc_msgSend(v6, "count"))
  {
    v18 = (void *)MEMORY[0x1A1AC1AAC]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v21;
      v35 = 2112;
      v36 = v6;
      _os_log_impl(&dword_19B1B0000, v20, OS_LOG_TYPE_ERROR, "%{public}@No actions to execute, %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    v16 = (void *)MEMORY[0x1E0CB35C8];
    v17 = 3;
LABEL_11:
    objc_msgSend(v16, "hmErrorWithCode:", v17);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v7[2](v7, v11);
    goto LABEL_12;
  }
  objc_msgSend(v9, "queue");
  v10 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __62__HMHome_HMActionExecution__executeActions_completionHandler___block_invoke;
  block[3] = &unk_1E3AB4D20;
  v29 = v6;
  v30 = self;
  v31 = v9;
  v32 = v7;
  dispatch_async(v10, block);

  v11 = v29;
LABEL_12:

}

void __62__HMHome_HMActionExecution__executeActions_completionHandler___block_invoke(id *a1)
{
  uint64_t v2;
  id v3;
  char v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, void *, void *);
  void *v30;
  id v31;
  id v32;
  id v33;
  _QWORD v34[5];
  const __CFString *v35;
  void *v36;
  _BYTE location[12];
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  id v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = MEMORY[0x1E0C809B0];
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = __62__HMHome_HMActionExecution__executeActions_completionHandler___block_invoke_2;
  v34[3] = &unk_1E3AB3B40;
  v3 = a1[4];
  v34[4] = a1[5];
  v4 = objc_msgSend(v3, "na_all:", v34);
  objc_msgSend(a1[6], "delegateCaller");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v4 & 1) != 0)
  {
    objc_msgSend(a1[4], "na_map:", &__block_literal_global_38505);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "allObjects");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = objc_msgSend(v7, "count");
    if (v8 == objc_msgSend(a1[4], "count"))
    {
      v9 = (void *)MEMORY[0x1E0D285F8];
      objc_msgSend(a1[5], "messageDestination");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = CFSTR("HM.homeExecuteActionsActionInfoKey");
      v36 = v7;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "messageWithName:destination:payload:", CFSTR("HM.homeExecuteActionsRequestKey"), v10, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      objc_initWeak((id *)location, a1[5]);
      v27 = v2;
      v28 = 3221225472;
      v29 = __62__HMHome_HMActionExecution__executeActions_completionHandler___block_invoke_14;
      v30 = &unk_1E3AB4B30;
      objc_copyWeak(&v33, (id *)location);
      v31 = v5;
      v32 = a1[7];
      objc_msgSend(v12, "setResponseHandler:", &v27);
      objc_msgSend(a1[6], "messageDispatcher", v27, v28, v29, v30);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "sendMessage:completionHandler:", v12, 0);

      objc_destroyWeak(&v33);
      objc_destroyWeak((id *)location);
    }
    else
    {
      v19 = (void *)MEMORY[0x1A1AC1AAC]();
      v20 = a1[5];
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = objc_msgSend(v7, "count");
        v24 = objc_msgSend(a1[4], "count");
        v25 = a1[4];
        *(_DWORD *)location = 138544386;
        *(_QWORD *)&location[4] = v22;
        v38 = 2048;
        v39 = v23;
        v40 = 2048;
        v41 = v24;
        v42 = 2112;
        v43 = v7;
        v44 = 2112;
        v45 = v25;
        _os_log_impl(&dword_19B1B0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Only %tu of %tu actions could be serialized. Serialized: < %@ > from the given actions: < %@ >", location, 0x34u);

      }
      objc_autoreleasePoolPop(v19);
      v26 = a1[7];
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 3, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "callCompletion:error:", v26, v12);
    }

  }
  else
  {
    v14 = (void *)MEMORY[0x1A1AC1AAC]();
    v15 = a1[5];
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)location = 138543362;
      *(_QWORD *)&location[4] = v17;
      _os_log_impl(&dword_19B1B0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Invalid action detected", location, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
    v18 = a1[7];
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("HMErrorDomain"), 3, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "callCompletion:error:", v18, v7);
  }

}

uint64_t __62__HMHome_HMActionExecution__executeActions_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "isValid");
  if ((v4 & 1) == 0)
  {
    v5 = (void *)MEMORY[0x1A1AC1AAC]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v8;
      v12 = 2112;
      v13 = v3;
      _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Invalid action: %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

  return v4;
}

void __62__HMHome_HMActionExecution__executeActions_completionHandler___block_invoke_14(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (v5)
  {
    v8 = (void *)MEMORY[0x1A1AC1AAC]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543618;
      v13 = v11;
      v14 = 2112;
      v15 = v5;
      _os_log_impl(&dword_19B1B0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Execution of actions failed (%@)", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }
  objc_msgSend(*(id *)(a1 + 32), "callCompletion:error:", *(_QWORD *)(a1 + 40), v5);

}

uint64_t __62__HMHome_HMActionExecution__executeActions_completionHandler___block_invoke_10(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_serializeForAdd");
}

- (id)photosPersonManagerForUser:(id)a3
{
  return (id)objc_msgSend(a3, "photosPersonManager");
}

- (id)photosPersonManagerWithUUID:(id)a3
{
  id v4;
  HMPhotosPersonManager *v5;
  void *v6;
  HMPhotosPersonManager *v7;

  v4 = a3;
  v5 = [HMPhotosPersonManager alloc];
  -[HMHome context](self, "context");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[HMPhotosPersonManager initWithContext:UUID:](v5, "initWithContext:UUID:", v6, v4);

  -[HMPersonManager configure](v7, "configure");
  return v7;
}

- (id)personManagerWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;

  v4 = a3;
  -[HMHome personManager](self, "personManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isEqual:", v4);

  if (v7)
    -[HMHome personManager](self, "personManager");
  else
    -[HMHome photosPersonManagerWithUUID:](self, "photosPersonManagerWithUUID:", v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (void)updatePersonManagerSettings:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  char *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  HMHome *v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, void *, void *);
  void *v31;
  HMHome *v32;
  id v33;
  id v34;
  id v35;
  const __CFString *v36;
  void *v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28540]), "initWithName:", CFSTR("Update person manager settings"));
    v10 = (void *)MEMORY[0x1A1AC1AAC]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "identifier");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "shortDescription");
      v15 = (char *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v39 = v13;
      v40 = 2114;
      v41 = v15;
      v42 = 2112;
      v43 = v6;
      _os_log_impl(&dword_19B1B0000, v12, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Updating person manager settings: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
    v36 = CFSTR("HMHomePersonManagerSettingsMessageKey");
    encodeRootObject(v6);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = v16;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](v11, "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (void *)objc_msgSend(v18, "initWithTarget:", v19);

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMHomeUpdatePersonManagerSettingsMessage"), v20, v17);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = MEMORY[0x1E0C809B0];
    v29 = 3221225472;
    v30 = __57__HMHome_Person__updatePersonManagerSettings_completion___block_invoke;
    v31 = &unk_1E3AB4B08;
    v32 = v11;
    v33 = v9;
    v34 = v6;
    v35 = v7;
    v22 = v9;
    objc_msgSend(v21, "setResponseHandler:", &v28);
    objc_msgSend(v8, "messageDispatcher", v28, v29, v30, v31, v32);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "sendMessage:completionHandler:", v21, 0);

    goto LABEL_9;
  }
  v24 = (void *)MEMORY[0x1A1AC1AAC]();
  v25 = self;
  HMFGetOSLogHandle();
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v39 = v27;
    v40 = 2080;
    v41 = "-[HMHome(Person) updatePersonManagerSettings:completion:]";
    _os_log_impl(&dword_19B1B0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v24);
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v7 + 2))(v7, v17);
LABEL_9:

  }
}

void __57__HMHome_Person__updatePersonManagerSettings_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint32_t v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "identifier");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "shortDescription");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543874;
      v21 = v11;
      v22 = 2114;
      v23 = v13;
      v24 = 2112;
      v25 = v5;
      v14 = "%{public}@[%{public}@] Failed to update person manager settings: %@";
      v15 = v10;
      v16 = OS_LOG_TYPE_ERROR;
      v17 = 32;
LABEL_6:
      _os_log_impl(&dword_19B1B0000, v15, v16, v14, (uint8_t *)&v20, v17);

    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "identifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "shortDescription");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 138543618;
    v21 = v11;
    v22 = 2114;
    v23 = v13;
    v14 = "%{public}@[%{public}@] Successfully updated person manager settings";
    v15 = v10;
    v16 = OS_LOG_TYPE_INFO;
    v17 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v7);
  objc_msgSend(*(id *)(a1 + 32), "setPersonManagerSettings:", *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "context");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "delegateCaller");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "callCompletion:error:", *(_QWORD *)(a1 + 56), v5);

}

- (NSString)matterControllerID
{
  void *v2;
  void *v3;

  -[HMHome uuid](self, "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "UUIDString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSString *)v3;
}

- (void)matterControllerXPCConnectBlock
{
  return &__block_literal_global_43637;
}

id __49__HMHome_Matter__matterControllerXPCConnectBlock__block_invoke()
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithMachServiceName:options:", CFSTR("com.apple.matter.framework.xpc"), 0);
}

- (void)resetAndRemoveAllCHIPPairingsFromAccessory:(id)a3 completion:(id)a4
{
  char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  HMHome *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  HMHome *v26;
  NSObject *v27;
  void *v28;
  id v29;
  _QWORD v30[4];
  id v31;
  HMHome *v32;
  id v33;
  id v34;
  const __CFString *v35;
  void *v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v6 = (char *)a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(CHIP) resetAndRemoveAllCHIPPairingsFromAccessory:completion:]", CFSTR("completion"));
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = (void *)MEMORY[0x1A1AC1AAC]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v28;
      v39 = 2112;
      v40 = (const char *)v24;
      _os_log_impl(&dword_19B1B0000, v27, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v24, 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v29);
  }
  v9 = (void *)v8;
  v10 = (void *)MEMORY[0x1A1AC1AAC]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v9)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v14;
      v39 = 2112;
      v40 = v6;
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_INFO, "%{public}@Resetting and removing all CHIP pairings from accessory: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    v15 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMHome uuid](v11, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (void *)objc_msgSend(v15, "initWithTarget:", v16);

    v35 = CFSTR("kAccessoryUUID");
    objc_msgSend(v6, "uuid");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "UUIDString");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = v19;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMHomeResetAndRemoveAllCHIPPairingsFromAccessoryMessage"), v17, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3221225472;
    v30[2] = __70__HMHome_CHIP__resetAndRemoveAllCHIPPairingsFromAccessory_completion___block_invoke;
    v30[3] = &unk_1E3AB4210;
    v31 = v21;
    v32 = v11;
    v33 = v9;
    v34 = v7;
    v22 = v21;
    objc_msgSend(v6, "removeCorrespondingSystemCommissionerPairingWithCompletion:", v30);

  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v23;
      v39 = 2080;
      v40 = "-[HMHome(CHIP) resetAndRemoveAllCHIPPairingsFromAccessory:completion:]";
      _os_log_impl(&dword_19B1B0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v7 + 2))(v7, v17);
  }

}

void __70__HMHome_CHIP__resetAndRemoveAllCHIPPairingsFromAccessory_completion___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];
  id v5;
  id v6;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __70__HMHome_CHIP__resetAndRemoveAllCHIPPairingsFromAccessory_completion___block_invoke_2;
  v4[3] = &unk_1E3AB60C8;
  v2 = *(void **)(a1 + 48);
  v4[4] = *(_QWORD *)(a1 + 40);
  v5 = v2;
  v6 = *(id *)(a1 + 56);
  objc_msgSend(*(id *)(a1 + 32), "setResponseHandler:", v4);
  objc_msgSend(*(id *)(a1 + 48), "messageDispatcher");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "sendMessage:", *(_QWORD *)(a1 + 32));

}

void __70__HMHome_CHIP__resetAndRemoveAllCHIPPairingsFromAccessory_completion___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1A1AC1AAC]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v11;
      v19 = 2112;
      v20 = v5;
      v12 = "%{public}@Failed to reset and remove all CHIP pairings: %@";
      v13 = v10;
      v14 = OS_LOG_TYPE_ERROR;
      v15 = 22;
LABEL_6:
      _os_log_impl(&dword_19B1B0000, v13, v14, v12, (uint8_t *)&v17, v15);

    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543362;
    v18 = v11;
    v12 = "%{public}@Successfully reset and removed all CHIP pairings";
    v13 = v10;
    v14 = OS_LOG_TYPE_INFO;
    v15 = 12;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v7);
  objc_msgSend(*(id *)(a1 + 40), "delegateCaller");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "callCompletion:error:", *(_QWORD *)(a1 + 48), v5);

}

- (BOOL)areAutomationBuildersSupported
{
  void *v2;
  char v3;

  -[HMHome homeManager](self, "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isDaemonRunningWithROARFramework");

  return v3;
}

- (BOOL)validateBuilder:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  BOOL v11;
  uint64_t v12;

  v6 = a3;
  if (!-[HMHome areAutomationBuildersSupported](self, "areAutomationBuildersSupported"))
  {
    if (!a4)
      goto LABEL_12;
    v12 = 48;
LABEL_11:
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", v12);
    v11 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_13;
  }
  if (!v6)
  {
    if (!a4)
      goto LABEL_12;
    v12 = 20;
    goto LABEL_11;
  }
  objc_msgSend(v6, "home");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMHome uuid](self, "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v8, "isEqual:", v9);

  if ((v10 & 1) == 0)
  {
    if (a4)
    {
      v12 = 11;
      goto LABEL_11;
    }
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  v11 = 1;
LABEL_13:

  return v11;
}

- (id)newActionSetBuilder
{
  void *v3;
  HMActionSetBuilder *v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  int v10;
  void *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  -[HMHome context](self, "context");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    v5 = (void *)MEMORY[0x1A1AC1AAC]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v8;
      v12 = 2080;
      v13 = "-[HMHome(AutomationBuilders) newActionSetBuilder]";
      _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    goto LABEL_7;
  }
  if (!-[HMHome areAutomationBuildersSupported](self, "areAutomationBuildersSupported"))
  {
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  v4 = -[HMActionSetBuilder initWithType:context:home:]([HMActionSetBuilder alloc], "initWithType:context:home:", CFSTR("HMActionSetTypeBuilder"), v3, self);
LABEL_8:

  return v4;
}

- (id)newActionSetBuilderWithName:(id)a3
{
  id v4;
  id v5;
  void *v6;

  v4 = a3;
  v5 = -[HMHome newActionSetBuilder](self, "newActionSetBuilder");
  v6 = v5;
  if (v5)
    objc_msgSend(v5, "setName:", v4);

  return v6;
}

- (void)addActionSetFromBuilder:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  HMHome *v23;
  NSObject *v24;
  void *v25;
  id v26;
  _QWORD v27[4];
  id v28;
  HMHome *v29;
  id v30;
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(AutomationBuilders) addActionSetFromBuilder:completionHandler:]", CFSTR("completion"));
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = (void *)MEMORY[0x1A1AC1AAC]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v25;
      v35 = 2112;
      v36 = (const char *)v21;
      _os_log_impl(&dword_19B1B0000, v24, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v21, 0);
    v26 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v26);
  }
  v9 = (void *)v8;
  if (v8)
  {
    v32 = 0;
    v10 = -[HMHome validateBuilder:error:](self, "validateBuilder:error:", v6, &v32);
    v11 = v32;
    v12 = v11;
    if (v10)
    {
      v31 = v11;
      -[HMHome encodeActionSetBuilder:error:](self, "encodeActionSetBuilder:error:", v6, &v31);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v31;

      if (v13)
      {
        -[HMHome uuid](self, "uuid");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v27[0] = MEMORY[0x1E0C809B0];
        v27[1] = 3221225472;
        v27[2] = __72__HMHome_AutomationBuilders__addActionSetFromBuilder_completionHandler___block_invoke;
        v27[3] = &unk_1E3AB60C8;
        v28 = v9;
        v29 = self;
        v30 = v7;
        -[_HMContext sendMessage:target:payload:responseHandler:](v28, CFSTR("HMAddActionSetFromBuilderMessage"), v15, v13, v27);

        v16 = v28;
      }
      else
      {
        objc_msgSend(v9, "delegateCaller");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "callCompletion:actionSet:error:", v7, 0, v14);
      }

    }
    else
    {
      objc_msgSend(v9, "delegateCaller");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "callCompletion:actionSet:error:", v7, 0, v12);
      v14 = v12;
    }

  }
  else
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v20;
      v35 = 2080;
      v36 = "-[HMHome(AutomationBuilders) addActionSetFromBuilder:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, id))v7 + 2))(v7, 0, v14);
  }

}

- (id)encodeActionSetBuilder:(id)a3 error:(id *)a4
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id *v24;
  id v25;
  void *v26;
  HMHome *v27;
  NSObject *v28;
  void *v29;
  id v31;
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  void *v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v4, "name");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, CFSTR("kActionSetName"));

  objc_msgSend(v4, "applicationData");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "dictionaryRepresentation");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v8, CFSTR("kAppDataInformationKey"));

  objc_msgSend(v4, "actions");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v9, "count"));
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v11 = v9;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v36;
LABEL_3:
    v15 = 0;
    while (1)
    {
      if (*(_QWORD *)v36 != v14)
        objc_enumerationMutation(v11);
      v16 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * v15);
      v34 = 0;
      v17 = objc_msgSend(v16, "isValidWithError:", &v34);
      v18 = v34;
      v19 = v18;
      if ((v17 & 1) == 0)
        break;
      objc_msgSend(v16, "_serializeForAdd");
      v20 = objc_claimAutoreleasedReturnValue();
      if (!v20)
      {
        v26 = (void *)MEMORY[0x1A1AC1AAC]();
        v27 = self;
        HMFGetOSLogHandle();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v40 = v29;
          v41 = 2112;
          v42 = v16;
          _os_log_impl(&dword_19B1B0000, v28, OS_LOG_TYPE_ERROR, "%{public}@Failed to serialize action: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v26);
        v24 = a4;
        if (a4)
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
          v25 = (id)objc_claimAutoreleasedReturnValue();
LABEL_18:
          *v24 = v25;
        }
        goto LABEL_19;
      }
      v21 = (void *)v20;
      objc_msgSend(v10, "addObject:", v20);

      if (v13 == ++v15)
      {
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
        if (v13)
          goto LABEL_3;
        goto LABEL_10;
      }
    }
    v24 = a4;
    if (a4)
    {
      if (v18)
      {
        v25 = objc_retainAutorelease(v18);
        v19 = v25;
        goto LABEL_18;
      }
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v31 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *a4 = v31;

    }
LABEL_19:

    v23 = 0;
    goto LABEL_20;
  }
LABEL_10:

  v22 = (void *)objc_msgSend(v10, "copy");
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v22, CFSTR("kActionSetActions"));

  v23 = (void *)objc_msgSend(v5, "copy");
LABEL_20:

  return v23;
}

- (id)newEventTriggerBuilder
{
  HMEventTriggerBuilder *v3;
  void *v4;
  HMEventTriggerBuilder *v5;

  v3 = [HMEventTriggerBuilder alloc];
  -[HMHome context](self, "context");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[HMEventTriggerBuilder initWithContext:home:](v3, "initWithContext:home:", v4, self);

  return v5;
}

- (id)newEventTriggerBuilderWithName:(id)a3 events:(id)a4 predicate:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = -[HMHome newEventTriggerBuilder](self, "newEventTriggerBuilder");
  v12 = v11;
  if (v11)
  {
    objc_msgSend(v11, "setName:", v8);
    objc_msgSend(v12, "setEvents:", v9);
    objc_msgSend(v12, "setPredicate:", v10);
  }

  return v12;
}

- (id)newEventTriggerBuilderWithName:(id)a3 events:(id)a4 endEvents:(id)a5 recurrences:(id)a6 predicate:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;

  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = -[HMHome newEventTriggerBuilder](self, "newEventTriggerBuilder");
  v18 = v17;
  if (v17)
  {
    objc_msgSend(v17, "setName:", v12);
    objc_msgSend(v18, "setEvents:", v13);
    objc_msgSend(v18, "setEndEvents:", v14);
    objc_msgSend(v18, "setRecurrences:", v15);
    objc_msgSend(v18, "setPredicate:", v16);
  }

  return v18;
}

- (void)addEventTriggerFromBuilder:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  HMHome *v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  HMHome *v23;
  NSObject *v24;
  void *v25;
  id v26;
  _QWORD v27[4];
  id v28;
  HMHome *v29;
  id v30;
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(AutomationBuilders) addEventTriggerFromBuilder:completionHandler:]", CFSTR("completion"));
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = (void *)MEMORY[0x1A1AC1AAC]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v25;
      v35 = 2112;
      v36 = (const char *)v21;
      _os_log_impl(&dword_19B1B0000, v24, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v21, 0);
    v26 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v26);
  }
  v9 = (void *)v8;
  if (v8)
  {
    v32 = 0;
    v10 = -[HMHome validateBuilder:error:](self, "validateBuilder:error:", v6, &v32);
    v11 = v32;
    v12 = v11;
    if (v10)
    {
      v31 = v11;
      -[HMHome encodeEventTriggerBuilder:error:](self, "encodeEventTriggerBuilder:error:", v6, &v31);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v31;

      if (v13)
      {
        -[HMHome uuid](self, "uuid");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v27[0] = MEMORY[0x1E0C809B0];
        v27[1] = 3221225472;
        v27[2] = __75__HMHome_AutomationBuilders__addEventTriggerFromBuilder_completionHandler___block_invoke;
        v27[3] = &unk_1E3AB60C8;
        v28 = v9;
        v29 = self;
        v30 = v7;
        -[_HMContext sendMessage:target:payload:responseHandler:](v28, CFSTR("HMAddEventTriggerFromBuilderMessage"), v15, v13, v27);

        v16 = v28;
      }
      else
      {
        objc_msgSend(v9, "delegateCaller");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "callCompletion:eventTrigger:error:", v7, 0, v14);
      }

    }
    else
    {
      objc_msgSend(v9, "delegateCaller");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "callCompletion:eventTrigger:error:", v7, 0, v12);
      v14 = v12;
    }

  }
  else
  {
    v17 = (void *)MEMORY[0x1A1AC1AAC]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v20;
      v35 = 2080;
      v36 = "-[HMHome(AutomationBuilders) addEventTriggerFromBuilder:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, id))v7 + 2))(v7, 0, v14);
  }

}

- (id)encodeEventTriggerBuilder:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMHome *v21;
  NSObject *v22;
  void *v23;
  int v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[HMHome _encodeTriggerBuilder:error:](self, v6, a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v7, "mutableCopy");

  if (v8)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v6, "recurrenceDays"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v9, CFSTR("kEventTriggerRecurrencesKey"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v6, "executeOnce"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v10, CFSTR("kEventTriggerExecuteOnce"));

    objc_msgSend(v6, "predicate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      +[HMPredicateUtilities rewritePredicateForDaemon:](HMPredicateUtilities, "rewritePredicateForDaemon:", v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v12)
      {
        v20 = (void *)MEMORY[0x1A1AC1AAC]();
        v21 = self;
        HMFGetOSLogHandle();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = 138543618;
          v26 = v23;
          v27 = 2112;
          v28 = v11;
          _os_log_impl(&dword_19B1B0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Invalid event trigger predicate: %@", (uint8_t *)&v25, 0x16u);

        }
        objc_autoreleasePoolPop(v20);
        if (a4)
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
          v19 = 0;
          *a4 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v19 = 0;
        }
        goto LABEL_17;
      }
      v13 = v12;
      encodeRootObject(v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v14, CFSTR("kEventTriggerConditionKey"));

    }
    objc_msgSend(v6, "events");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome _encodeEvents:error:](self, v15, a4);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
    {
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v16, CFSTR("kEventTriggerEventsKey"));
      objc_msgSend(v6, "endEvents");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMHome _encodeEvents:error:](self, v17, a4);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      if (v18)
      {
        objc_msgSend(v8, "setObject:forKeyedSubscript:", v18, CFSTR("kEventTriggerEndEventsKey"));
        v19 = (void *)objc_msgSend(v8, "copy");
      }
      else
      {
        v19 = 0;
      }

    }
    else
    {
      v19 = 0;
    }

LABEL_17:
    goto LABEL_18;
  }
  v19 = 0;
LABEL_18:

  return v19;
}

- (id)newTimerTriggerBuilder
{
  void *v3;
  HMTimerTriggerBuilder *v4;
  void *v5;
  HMHome *v6;
  NSObject *v7;
  void *v8;
  int v10;
  void *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  -[HMHome context](self, "context");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    v5 = (void *)MEMORY[0x1A1AC1AAC]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v8;
      v12 = 2080;
      v13 = "-[HMHome(AutomationBuilders) newTimerTriggerBuilder]";
      _os_log_impl(&dword_19B1B0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Nil context - %s", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    goto LABEL_7;
  }
  if (!-[HMHome areAutomationBuildersSupported](self, "areAutomationBuildersSupported"))
  {
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  v4 = -[HMTimerTriggerBuilder initWithContext:home:]([HMTimerTriggerBuilder alloc], "initWithContext:home:", v3, self);
LABEL_8:

  return v4;
}

- (id)newTimerTriggerBuilderWithName:(id)a3 fireDate:(id)a4 timeZone:(id)a5 recurrence:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = -[HMHome newTimerTriggerBuilder](self, "newTimerTriggerBuilder");
  v15 = v14;
  if (v14)
  {
    objc_msgSend(v14, "setName:", v10);
    objc_msgSend(v15, "setFireDate:", v11);
    objc_msgSend(v15, "setTimeZone:", v12);
    objc_msgSend(v15, "setRecurrence:", v13);
  }

  return v15;
}

- (id)newTimerTriggerBuilderWithName:(id)a3 significantEvent:(id)a4 significantEventOffset:(id)a5 recurrences:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = -[HMHome newTimerTriggerBuilder](self, "newTimerTriggerBuilder");
  v15 = v14;
  if (v14)
  {
    objc_msgSend(v14, "setName:", v10);
    objc_msgSend(v15, "setSignificantEvent:", v11);
    objc_msgSend(v15, "setSignificantEventOffset:", v12);
    objc_msgSend(v15, "setRecurrences:", v13);
  }

  return v15;
}

- (void)addTimerTriggerFromBuilder:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMHome *v30;
  NSObject *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  HMHome *v38;
  NSObject *v39;
  void *v40;
  id v41;
  void *v42;
  _QWORD v43[4];
  id v44;
  HMHome *v45;
  id v46;
  id v47;
  id v48;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMHome context](self, "context");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s: %@ cannot be nil"), "-[HMHome(AutomationBuilders) addTimerTriggerFromBuilder:completionHandler:]", CFSTR("completion"));
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = (void *)MEMORY[0x1A1AC1AAC]();
    v38 = self;
    HMFGetOSLogHandle();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v50 = v40;
      v51 = 2112;
      v52 = (const char *)v36;
      _os_log_impl(&dword_19B1B0000, v39, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v37);
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v36, 0);
    v41 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v41);
  }
  v9 = (void *)v8;
  if (v8)
  {
    v48 = 0;
    v10 = -[HMHome validateBuilder:error:](self, "validateBuilder:error:", v6, &v48);
    v11 = v48;
    v12 = v11;
    if (v10)
    {
      v47 = v11;
      v13 = v6;
      if (self)
      {
        -[HMHome _encodeTriggerBuilder:error:](self, v13, &v47);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (void *)objc_msgSend(v14, "mutableCopy");

        if (v15)
        {
          objc_msgSend(v13, "fireDateIfSet");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v16, CFSTR("kTimerTriggerInitialFireDateKey"));

          objc_msgSend(v13, "timeZone");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = v17;
          if (v17)
          {
            encodeRootObject(v17);
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "setObject:forKeyedSubscript:", v19, CFSTR("kTimerTriggerTimeZoneDataKey"));

          }
          v42 = v18;
          objc_msgSend(v13, "recurrence");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = v20;
          if (v20)
          {
            encodeRootObject(v20);
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "setObject:forKeyedSubscript:", v22, CFSTR("kTimerTriggerRecurrenceDataKey"));

          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v13, "recurrenceDays"));
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v23, CFSTR("kTimerTriggerRecurrencesKey"));

          objc_msgSend(v13, "significantEvent");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v24, CFSTR("kTimerTriggerSignificantEventKey"));

          objc_msgSend(v13, "significantEventOffset");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = v25;
          if (v25)
          {
            encodeRootObject(v25);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "setObject:forKeyedSubscript:", v27, CFSTR("kTimerTriggerSignificantEventOffsetKey"));

          }
          v28 = (void *)objc_msgSend(v15, "copy");

        }
        else
        {
          v28 = 0;
        }

      }
      else
      {
        v28 = 0;
      }

      v33 = v47;
      if (v28)
      {
        -[HMHome uuid](self, "uuid");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v43[0] = MEMORY[0x1E0C809B0];
        v43[1] = 3221225472;
        v43[2] = __75__HMHome_AutomationBuilders__addTimerTriggerFromBuilder_completionHandler___block_invoke;
        v43[3] = &unk_1E3AB60C8;
        v44 = v9;
        v45 = self;
        v46 = v7;
        -[_HMContext sendMessage:target:payload:responseHandler:](v44, CFSTR("HMAddTimerTriggerFromBuilderMessage"), v34, v28, v43);

        v35 = v44;
      }
      else
      {
        objc_msgSend(v9, "delegateCaller");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "callCompletion:timerTrigger:error:", v7, 0, v33);
      }

    }
    else
    {
      objc_msgSend(v9, "delegateCaller");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "callCompletion:timerTrigger:error:", v7, 0, v12);
      v33 = v12;
    }

  }
  else
  {
    v29 = (void *)MEMORY[0x1A1AC1AAC]();
    v30 = self;
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v50 = v32;
      v51 = 2080;
      v52 = "-[HMHome(AutomationBuilders) addTimerTriggerFromBuilder:completionHandler:]";
      _os_log_impl(&dword_19B1B0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Nil context, invoking completion - %s", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v29);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 12);
    v33 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, id))v7 + 2))(v7, 0, v33);
  }

}

void __75__HMHome_AutomationBuilders__addTimerTriggerFromBuilder_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  objc_class *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  if (v14)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "callCompletion:timerTrigger:error:", *(_QWORD *)(a1 + 48), 0, v14);
  }
  else
  {
    v7 = *(void **)(a1 + 40);
    v8 = (objc_class *)objc_opt_class();
    objc_msgSend(*(id *)(a1 + 40), "currentTriggers");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome _addObjectOfClass:fromResponse:toArray:](v7, v8, v5, v9);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    v12 = *(_QWORD *)(a1 + 48);
    if (v6)
    {
      objc_msgSend(v10, "callCompletion:timerTrigger:error:", v12, v6, 0);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "callCompletion:timerTrigger:error:", v12, 0, v13);

    }
  }

}

- (id)_addObjectOfClass:(void *)a3 fromResponse:(void *)a4 toArray:
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (a1)
  {
    v9 = (void *)objc_msgSend([a2 alloc], "initWithDictionary:home:", v7, a1);
    v10 = v9;
    if (v9)
    {
      objc_msgSend(v9, "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "firstItemWithUUID:", v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        v13 = (void *)MEMORY[0x1A1AC1AAC]();
        v14 = a1;
        HMFGetOSLogHandle();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = 138543618;
          v21 = v16;
          v22 = 2112;
          v23 = v12;
          _os_log_impl(&dword_19B1B0000, v15, OS_LOG_TYPE_INFO, "%{public}@Returning existing %@", (uint8_t *)&v20, 0x16u);

        }
        objc_autoreleasePoolPop(v13);
        v17 = v12;
      }
      else
      {
        objc_msgSend(a1, "context");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "__configureWithContext:home:", v18, a1);

        objc_msgSend(v8, "addObject:", v10);
        v17 = v10;
      }
      a1 = v17;

    }
    else
    {
      a1 = 0;
    }

  }
  return a1;
}

- (id)_encodeTriggerBuilder:(_QWORD *)a3 error:
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (a1)
  {
    v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v5, "name");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "configuredName");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (!+[HMTrigger _validateName:configuredName:error:]((uint64_t)HMTrigger, v7, v8, a3))
    {
      a1 = 0;
LABEL_22:

      goto LABEL_23;
    }
    v27 = a1;
    v30 = v7;
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v7, CFSTR("kTriggerName"));
    v29 = v8;
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("HMT.triggerConfiguredNameKey"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v5, "isEnabled"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v9, CFSTR("kTriggerActivate"));

    v10 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v5, "policy");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    objc_msgSend(v10, "numberWithBool:", objc_opt_isKindOfClass() & 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v6;
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v12, CFSTR("HMT.deleteAfterExecutionPolicyKey"));

    v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v32 = v5;
    objc_msgSend(v5, "actionSets");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
    v28 = a3;
    if (v15)
    {
      v16 = v15;
      v17 = 0;
      v18 = *(_QWORD *)v34;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v34 != v18)
            objc_enumerationMutation(v14);
          v20 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
          objc_msgSend(v20, "actionSetType");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v21, "isEqualToString:", CFSTR("HMActionSetTypeTriggerOwned")))
          {
            v22 = v20;
            v23 = v17;
            v17 = v22;
          }
          else
          {
            objc_msgSend(v20, "uuid");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "UUIDString");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "addObject:", v24);

          }
        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
      }
      while (v16);
    }
    else
    {
      v17 = 0;
    }

    v25 = (void *)objc_msgSend(v13, "copy");
    v6 = v31;
    objc_msgSend(v31, "setObject:forKeyedSubscript:", v25, CFSTR("kTriggerActionSetUUIDKey"));

    v5 = v32;
    v7 = v30;
    if (v17 && (objc_msgSend(v17, "isEmpty") & 1) == 0)
    {
      objc_msgSend(v27, "encodeActionSetBuilder:error:", v17, v28);
      a1 = (void *)objc_claimAutoreleasedReturnValue();
      if (!a1)
      {
LABEL_21:

        v8 = v29;
        goto LABEL_22;
      }
      objc_msgSend(v31, "setObject:forKeyedSubscript:", a1, CFSTR("kTriggerOwnedActionSetKey"));

    }
    a1 = (void *)objc_msgSend(v31, "copy");
    goto LABEL_21;
  }
LABEL_23:

  return a1;
}

- (id)_encodeEvents:(_QWORD *)a3 error:
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (a1)
  {
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v7 = v5;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v22;
      while (2)
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v22 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
          objc_msgSend(v12, "_serializeForAdd", (_QWORD)v21);
          v13 = objc_claimAutoreleasedReturnValue();
          if (!v13)
          {
            v16 = (void *)MEMORY[0x1A1AC1AAC]();
            v17 = a1;
            HMFGetOSLogHandle();
            v18 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v26 = v19;
              v27 = 2112;
              v28 = v12;
              _os_log_impl(&dword_19B1B0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to serialize event: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v16);
            if (a3)
            {
              objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
              *a3 = (id)objc_claimAutoreleasedReturnValue();
            }

            v15 = 0;
            goto LABEL_16;
          }
          v14 = (void *)v13;
          objc_msgSend(v6, "addObject:", v13);

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
        if (v9)
          continue;
        break;
      }
    }

    v15 = (void *)objc_msgSend(v6, "copy");
LABEL_16:

  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void __75__HMHome_AutomationBuilders__addEventTriggerFromBuilder_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  objc_class *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  if (v14)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "callCompletion:eventTrigger:error:", *(_QWORD *)(a1 + 48), 0, v14);
  }
  else
  {
    v7 = *(void **)(a1 + 40);
    v8 = (objc_class *)objc_opt_class();
    objc_msgSend(*(id *)(a1 + 40), "currentTriggers");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome _addObjectOfClass:fromResponse:toArray:](v7, v8, v5, v9);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    v12 = *(_QWORD *)(a1 + 48);
    if (v6)
    {
      objc_msgSend(v10, "callCompletion:eventTrigger:error:", v12, v6, 0);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "callCompletion:eventTrigger:error:", v12, 0, v13);

    }
  }

}

void __72__HMHome_AutomationBuilders__addActionSetFromBuilder_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  objc_class *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  if (v14)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "callCompletion:actionSet:error:", *(_QWORD *)(a1 + 48), 0, v14);
  }
  else
  {
    v7 = *(void **)(a1 + 40);
    v8 = (objc_class *)objc_opt_class();
    objc_msgSend(*(id *)(a1 + 40), "currentActionSets");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMHome _addObjectOfClass:fromResponse:toArray:](v7, v8, v5, v9);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "delegateCaller");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    v12 = *(_QWORD *)(a1 + 48);
    if (v6)
    {
      objc_msgSend(v10, "callCompletion:actionSet:error:", v12, v6, 0);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "callCompletion:actionSet:error:", v12, 0, v13);

    }
  }

}

@end
