unint64_t static Subscribers.Demand.unlimited.getter()
{
  return 0x8000000000000000;
}

ValueMetadata *type metadata accessor for CombineIdentifier()
{
  return &type metadata for CombineIdentifier;
}

BOOL static Subscribers.Demand.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

{
  return a2 != 0x8000000000000000 && a1 >= 0 && a2 == a1;
}

uint64_t type metadata instantiation function for Publishers.DropWhile()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for ObservableObjectTable.Storage(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)(a1 + 8))
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t dispatch thunk of Subscription.request(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Subscriber.receive(subscription:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ObservableObject.objectWillChange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata instantiation function for Just()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t dispatch thunk of Subscriber.receive(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t Publisher.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publisher.compactMap<A>(_:)(a1, a2, a3, a4, a5, type metadata accessor for Publishers.Map, a6);
}

uint64_t getEnumTagSinglePayload for Published(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18B538950 + 4 * byte_18B5F74E3[(v4 - 1)]))();
}

uint64_t Publisher.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publisher.compactMap<A>(_:)(a1, a2, a3, a4, a5, type metadata accessor for Publishers.CompactMap, a6);
}

uint64_t dispatch thunk of Publisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t type metadata instantiation function for Publishers.SubscribeOn()
{
  return swift_allocateGenericValueMetadata();
}

void storeEnumTagSinglePayload for Published(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t type metadata accessor for CurrentValueSubject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CurrentValueSubject);
}

uint64_t Deferred.init(createPublisher:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t ObservableObject<>.objectWillChange.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = type metadata accessor for _EachFieldOptions();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = 0;
  swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_EachFieldOptions>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_18B5F4780;
  static _EachFieldOptions.classType.getter();
  static _EachFieldOptions.ignoreUnknown.getter();
  v17 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [_EachFieldOptions]);
  lazy protocol witness table accessor for type [_EachFieldOptions] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v13 = a1;
  v14 = a2;
  v15 = v3;
  v16 = &v18;
  _forEachField(of:options:body:)();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  result = v18;
  if (!v18)
    return static ObservableObjectTable.subscript.getter(v3);
  return result;
}

unint64_t lazy protocol witness table accessor for type [_EachFieldOptions] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [_EachFieldOptions] and conformance [A];
  if (!lazy protocol witness table cache variable for type [_EachFieldOptions] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [_EachFieldOptions]);
    result = MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [_EachFieldOptions] and conformance [A]);
  }
  return result;
}

uint64_t static ObservableObjectTable.subscript.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  void *v17;
  _BYTE v18[16];
  uint64_t v19;
  _BYTE v20[16];

  v2 = type metadata accessor for ObservationRegistrar();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_unknownObjectWeakInit();
  v6 = swift_unknownObjectWeakAssign();
  v19 = a1;
  outlined init with take of ObservableObjectTable.Storage(v6, (uint64_t)v20);
  if (one-time initialization token for lock != -1)
    swift_once();
  os_unfair_lock_lock((os_unfair_lock_t)static ObservableObjectTable.lock);
  specialized static ObservableObjectTable.collect()();
  if (one-time initialization token for contents != -1)
    swift_once();
  swift_beginAccess();
  v7 = static ObservableObjectTable.contents;
  if (*((_QWORD *)static ObservableObjectTable.contents + 2)
    && (v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20), (v9 & 1) != 0))
  {
    v10 = *(_QWORD *)(v7[7] + 8 * v8);
    swift_endAccess();
    v11 = (os_unfair_lock_s *)static ObservableObjectTable.lock;
    swift_retain();
  }
  else
  {
    swift_endAccess();
    type metadata accessor for ObservableObjectPublisher();
    v10 = swift_allocObject();
    v12 = OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock;
    v13 = (_DWORD *)swift_slowAlloc();
    *v13 = 0;
    *(_QWORD *)(v10 + v12) = v13;
    *(_QWORD *)(v10 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections) = MEMORY[0x1E0DEE9E8];
    *(_QWORD *)(v10 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_identifier) = 0;
    ObservationRegistrar.init()();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v3 + 32))(v10 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher__registrar, v5, v2);
    swift_unknownObjectWeakInit();
    v14 = swift_unknownObjectWeakAssign();
    v19 = a1;
    outlined init with take of ObservableObjectTable.Storage(v14, (uint64_t)v18);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = static ObservableObjectTable.contents;
    static ObservableObjectTable.contents = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
    static ObservableObjectTable.contents = v17;
    swift_bridgeObjectRelease();
    outlined destroy of ObservableObjectTable.Storage((uint64_t)v18);
    swift_endAccess();
    v11 = (os_unfair_lock_s *)static ObservableObjectTable.lock;
  }
  os_unfair_lock_unlock(v11);
  outlined destroy of ObservableObjectTable.Storage((uint64_t)v20);
  return v10;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(a1 + 8));
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of ObservableObjectTable.Storage(*(_QWORD *)(v2 + 48) + 16 * v4, (uint64_t)v10);
      v7 = v10[1];
      v8 = *(_QWORD *)(a1 + 8);
      outlined destroy of ObservableObjectTable.Storage((uint64_t)v10);
      if (v7 == v8)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for ObservableObjectPublisher()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ObservableObjectPublisher;
  if (!type metadata singleton initialization cache for ObservableObjectPublisher)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t initializeWithCopy for Publishers.SubscribeOn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  size_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 16))(v10, v11, *(_QWORD *)(a3 + 24));
  v12 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v12 + v15;
  v17 = (void *)((v12 + v15 + v10) & ~v15);
  v18 = (const void *)((v16 + v11) & ~v15);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v18, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v14 + 84))
      v19 = *(_QWORD *)(v14 + 64);
    else
      v19 = *(_QWORD *)(v14 + 64) + 1;
    memcpy(v17, v18, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v17, v18, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t Publisher.eraseToAnyPublisher()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v11;

  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v2, a1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = swift_getAssociatedTypeWitness();
  return AnyPublisher.init<A>(_:)((uint64_t)v6, AssociatedTypeWitness, v9, a1, a2);
}

uint64_t AnyPublisher.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for AnyPublisher(0, a2, a3, AssociatedConformanceWitness);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v15 = v17[1];
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
  }
  else
  {
    type metadata accessor for PublisherBox(0, a4, a5, v14);
    v15 = swift_allocObject();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v15 + 120) - 8) + 32))(v15 + *(_QWORD *)(*(_QWORD *)v15 + 136), a1);
  }
  return v15;
}

uint64_t type metadata accessor for AnyPublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyPublisher);
}

uint64_t initializeWithCopy for Publishers.DropWhile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for PublisherBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PublisherBox);
}

uint64_t PublisherBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 120) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 136), a1);
  return v2;
}

uint64_t initializeWithCopy for Publishers.HandleEvents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = v9;
    swift_retain();
  }
  v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = v12;
    swift_retain();
  }
  v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_QWORD *)(v13 + 8) = v15;
    swift_retain();
  }
  v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v17 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  else
  {
    v18 = *(_QWORD *)(v17 + 8);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *(_QWORD *)(v16 + 8) = v18;
    swift_retain();
  }
  v19 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v20 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  else
  {
    v21 = *(_QWORD *)(v20 + 8);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *(_QWORD *)(v19 + 8) = v21;
    swift_retain();
  }
  return a1;
}

uint64_t initializeWithCopy for Publishers.FlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_retain();
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for Deferred(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

void Publishers.CompactMap.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.CompactMap.Inner();
}

void sub_18B53975C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  *(_QWORD *)(v12 - 128) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&a9 - v13;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v11, *(_QWORD *)(v12 - 144), v10);
  swift_retain();
  Publishers.CompactMap.Inner.init(downstream:filter:)(v11, v10, (uint64_t)v14);
}

uint64_t sub_18B5397DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.CompactMap<A, B>.Inner<A1>, v3);
  Publisher.subscribe<A>(_:)(v2, v0, v3, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 128) + 8))(v2, v3);
}

uint64_t destroy for Publishers.CompactMap.Inner(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 8))();
  return swift_release();
}

void type metadata accessor for Publishers.CompactMap.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.Map.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.Map.Inner();
}

void sub_18B539904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  *(_QWORD *)(v12 - 128) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&a9 - v13;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v11, *(_QWORD *)(v12 - 144), v10);
  swift_retain();
  Publishers.Map.Inner.init(downstream:map:)(v11, v10, (uint64_t)v14);
}

uint64_t sub_18B539984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Map<A, B>.Inner<A1>, v3);
  Publisher.subscribe<A>(_:)(v2, v0, v3, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 128) + 8))(v2, v3);
}

void type metadata accessor for Publishers.Map.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t destroy for Deferred()
{
  return swift_release();
}

void Publishers.ReceiveOn.receive<A>(subscriber:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for Optional();
  v0 = MEMORY[0x1E0C80A78](v2);
  v1 = MEMORY[0x1E0C80A78](v0);
  MEMORY[0x1E0C80A78](v1);
  type metadata accessor for Publishers.ReceiveOn.Inner();
}

uint64_t sub_18B539B08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 16))(v1, *(_QWORD *)(v10 - 144), v5);
  v12 = *(_QWORD *)(v10 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v12 + *(int *)(v2 + 52), v3);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 16))(v4, v12 + *(int *)(v2 + 56), *(_QWORD *)(v10 - 152));
  swift_allocObject();
  *(_QWORD *)(v10 - 128) = Publishers.ReceiveOn.Inner.init(_:scheduler:options:)(v1, v9, v4);
  v13 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.ReceiveOn<A, B>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v10 - 128, *(_QWORD *)(v10 - 160), a1, *(_QWORD *)(v10 - 168), v13);
  return swift_release();
}

uint64_t AnyPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 112))(a1, a5, a6);
}

uint64_t PublisherBox.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v3 + 128) + 32))(a1, a2, a3, *(_QWORD *)(*(_QWORD *)v3 + 120));
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance AnyPublisher<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return AnyPublisher.receive<A>(subscriber:)(a1, *v4, a3, a4, a2, a3);
}

uint64_t Publisher<>.sink(receiveValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Subscribers.Sink(0, AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_QWORD *)(v10 + 80) = 0;
  *(_BYTE *)(v10 + 88) = 2;
  swift_retain();
  v11 = (_DWORD *)swift_slowAlloc();
  *v11 = 0;
  *(_QWORD *)(v10 + 96) = v11;
  *(_QWORD *)(v10 + 32) = specialized closure #1 in Publisher.multicast<A>(subject:);
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  v14 = v10;
  v12 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Subscribers.Sink<A, B>, v9);
  Publisher.subscribe<A>(_:)((uint64_t)&v14, a3, v9, a4, v12);
  type metadata accessor for AnyCancellable();
  v14 = v10;
  return AnyCancellable.__allocating_init<A>(_:)((uint64_t)&v14, v9, (uint64_t)&protocol witness table for Subscribers.Sink<A, B>);
}

uint64_t Publisher.subscribe<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  os_unfair_lock_s *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t AssociatedConformanceWitness;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[4];
  _BYTE v58[24];
  uint64_t v59;
  uint64_t v60;

  v50 = a4;
  v47 = a5;
  v48 = a2;
  v7 = type metadata accessor for SubscriberTap(0, a3, a5, a4);
  v46 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v39 - v9;
  v11 = *(_QWORD *)(a3 - 8);
  v12 = MEMORY[0x1E0C80A78](v8);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v39 - v15;
  if (one-time initialization token for globalLock != -1)
    swift_once();
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  v17 = static DebugHook.globalHook;
  v18 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v18);
  if (!v17)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 32))(a1, a3, v47, v48);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v19(v16, a1, a3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriberTapMarker);
  if (swift_dynamicCast())
  {
    v46 = a1;
    outlined init with take of Subscription(&v51, (uint64_t)v58);
    v20 = v59;
    v21 = v60;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v58, v59);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v21 + 8))(v57, v20, v21);
    v22 = v48;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v24 = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v26 = type metadata accessor for AnySubscriber(0, AssociatedTypeWitness, v24, AssociatedConformanceWitness);
    if (swift_dynamicCast())
    {
      v45 = (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)&v51 + 1);
      v41 = v51;
      v44 = *((_QWORD *)&v52 + 1);
      v27 = v52;
      v28 = v53;
      v43 = v54;
      v29 = v55;
      v42 = v56;
      v40 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for AnySubscriber<A, B>, v26);
      v30 = v49;
      v31 = v50;
      DebugHook.willReceive<A, B>(publisher:subscriber:)(v49, (uint64_t)&v51, v22, v26, v50, v40);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 32))(v46, a3, v47, v22, v31);
      *(_QWORD *)&v51 = v41;
      *((_QWORD *)&v51 + 1) = v45;
      *(_QWORD *)&v52 = v27;
      *((_QWORD *)&v52 + 1) = v44;
      v53 = v28;
      v54 = v43;
      v55 = v29;
      v56 = v42;
      DebugHook.didReceive<A, B>(publisher:subscriber:)(v30, (uint64_t)&v51, v22, v26, v31, v40);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    }
    else
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  else
  {
    v53 = 0;
    v51 = 0u;
    v52 = 0u;
    outlined destroy of SubscriberTapMarker?((uint64_t)&v51);
    v19(v14, a1, a3);
    v51 = 0u;
    v52 = 0u;
    v33 = v50;
    v34 = a1;
    v35 = v47;
    SubscriberTap.init(subscriber:inner:)((uint64_t)v14, (uint64_t)&v51, a3, v47, (uint64_t)v10);
    v37 = v48;
    v36 = v49;
    DebugHook.willReceive<A, B>(publisher:subscriber:)(v49, v34, v48, a3, v33, v35);
    v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 32);
    v38 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for SubscriberTap<A>, v7);
    v45(v10, v7, v38, v37, v33);
    DebugHook.didReceive<A, B>(publisher:subscriber:)(v36, v34, v37, a3, v33, v35);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v10, v7);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v7 = type metadata accessor for SubjectSubscriber(0, a3, a5, a4);
  swift_allocObject();
  swift_unknownObjectRetain();
  v8 = specialized SubjectSubscriber.init(_:)();
  swift_unknownObjectRelease();
  v11 = v8;
  v9 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for SubjectSubscriber<A>, v7);
  Publisher.subscribe<A>(_:)((uint64_t)&v11, a2, v7, a4, v9);
  type metadata accessor for AnyCancellable();
  v11 = v8;
  return AnyCancellable.__allocating_init<A>(_:)((uint64_t)&v11, v7, (uint64_t)&protocol witness table for SubjectSubscriber<A>);
}

uint64_t type metadata accessor for SubscriberTap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SubscriberTap);
}

uint64_t type metadata accessor for AnyCancellable()
{
  return objc_opt_self();
}

uint64_t AnyCancellable.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  AnyCancellable.init<A>(_:)(a1, a2, a3);
  return v6;
}

uint64_t AnyCancellable.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v7;
  uint64_t *boxed_opaque_existential_1;

  v7 = (_DWORD *)swift_slowAlloc();
  *v7 = 0;
  *(_QWORD *)(v3 + 64) = v7;
  *(_QWORD *)(v3 + 40) = a2;
  *(_QWORD *)(v3 + 48) = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v3 + 16));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
  *(_BYTE *)(v3 + 56) = 1;
  return v3;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t type metadata accessor for Subscribers.Sink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Subscribers.Sink);
}

char *Publishers.ReceiveOn.Inner.init(_:scheduler:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;

  v7 = *(_QWORD *)v3;
  v8 = (_DWORD *)swift_slowAlloc();
  *v8 = 0;
  *((_QWORD *)v3 + 2) = v8;
  v9 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 160)];
  *((_QWORD *)v9 + 4) = 0;
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[40] = 2;
  v10 = *(_QWORD *)(*(_QWORD *)v3 + 168);
  v11 = (_QWORD *)swift_slowAlloc();
  *v11 = 0;
  *(_QWORD *)&v3[v10] = v11;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 96) - 8) + 32))(&v3[*(_QWORD *)(*(_QWORD *)v3 + 136)], a1);
  (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v7 + 88) - 8) + 32))(&v3[*(_QWORD *)(*(_QWORD *)v3 + 144)], a2, *(_QWORD *)(v7 + 88));
  v12 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 152)];
  swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a3, v13);
  return v3;
}

void type metadata accessor for Publishers.ReceiveOn.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.ReceiveOn<A, B>()
{
  Publishers.ReceiveOn.receive<A>(subscriber:)();
}

void Publishers.Map.Inner.init(downstream:map:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.Map.Inner();
}

void sub_18B53A53C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;

  v4 = (_QWORD *)(v1 + *(int *)(a1 + 60));
  *v4 = v3;
  v4[1] = v2;
  v5 = *(int *)(a1 + 64);
  if (one-time initialization token for lock != -1)
    swift_once();
  v6 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v7 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v6);
    *(_QWORD *)(v1 + v5) = v7;
  }
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void Publishers.CompactMap.Inner.init(downstream:filter:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.CompactMap.Inner();
}

void sub_18B53A644(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;

  v4 = (_QWORD *)(v1 + *(int *)(a1 + 60));
  *v4 = v3;
  v4[1] = v2;
  v5 = *(int *)(a1 + 64);
  if (one-time initialization token for lock != -1)
    swift_once();
  v6 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v7 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v6);
    *(_QWORD *)(v1 + v5) = v7;
  }
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Map<A, B>(uint64_t a1)
{
  Publishers.Map.receive<A>(subscriber:)(a1);
}

uint64_t specialized static ObservableObjectTable.collect()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v8;
  _QWORD *v10;
  _BYTE v11[24];

  if (one-time initialization token for contents != -1)
    swift_once();
  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  v1 = specialized Sequence.compactMap<A>(_:)(v0);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      outlined init with copy of ObservableObjectTable.Storage(v3, (uint64_t)v11);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
      v6 = v5;
      swift_bridgeObjectRelease();
      if ((v6 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v8 = static ObservableObjectTable.contents;
        v10 = static ObservableObjectTable.contents;
        static ObservableObjectTable.contents = (_UNKNOWN *)0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          v8 = v10;
        }
        outlined destroy of ObservableObjectTable.Storage(v8[6] + 16 * v4);
        specialized _NativeDictionary._delete(at:)(v4, (uint64_t)v8);
        static ObservableObjectTable.contents = v8;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      swift_release();
      outlined destroy of ObservableObjectTable.Storage((uint64_t)v11);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  return swift_bridgeObjectRelease();
}

uint64_t outlined destroy of ObservableObjectTable.Storage(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t outlined init with copy of ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t outlined init with take of ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t outlined destroy of ObservableObjectTable.Storage?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObservableObjectTable.Storage?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x18D77ACCC]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t static Published.subscript.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v18[2];

  v7 = *(_QWORD *)(*MEMORY[0x1E0DED210] + *a2 + 8);
  v8 = type metadata accessor for Published.Storage(0, v7, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v18 - v10;
  v14 = type metadata accessor for Published(0, v7, v12, v13);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v18 - v15;
  specialized static Published.access<A>(_:keyPath:storage:)(a1);
  v18[1] = a1;
  swift_unknownObjectRetain();
  swift_getAtKeyPath();
  swift_unknownObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v16, v8);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a5, v11, v7);
  swift_retain();
  PublishedSubject.value.getter(a5);
  return swift_release_n();
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x18D77AC60](a1, v6, a5);
}

uint64_t type metadata accessor for Published(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Published);
}

uint64_t type metadata accessor for Published.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Published.Storage);
}

void PublishedSubject.value.getter(uint64_t a1@<X8>)
{
  os_unfair_lock_t *v1;
  os_unfair_lock_t v3;
  char *v4;

  v3 = *v1;
  os_unfair_lock_lock(v1[2]);
  v4 = (char *)v1 + *(_QWORD *)&(*v1)[26]._os_unfair_lock_opaque;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)&v3[20]._os_unfair_lock_opaque - 8) + 16))(a1, v4);
  os_unfair_lock_unlock(v1[2]);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CompactMap<A, B>(uint64_t a1)
{
  Publishers.CompactMap.receive<A>(subscriber:)(a1);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance ObservableObjectPublisher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ObservableObjectPublisher.receive<A>(subscriber:)(a1, a2, a3);
}

uint64_t ObservableObjectPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  os_unfair_lock_s *v16;
  _QWORD v18[5];
  Swift::UInt v19;

  v4 = v3;
  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ObservableObjectPublisher.Inner(0, v11, v12, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  swift_retain();
  v15 = specialized ObservableObjectPublisher.Inner.__allocating_init(_:parent:)((uint64_t)v10, v4);
  swift_release();
  v16 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock);
  os_unfair_lock_lock(v16);
  swift_beginAccess();
  swift_retain();
  specialized Set._Variant.insert(_:)(&v19, (Swift::UInt)v15);
  swift_endAccess();
  swift_release();
  os_unfair_lock_unlock(v16);
  v18[3] = v14;
  v18[4] = &protocol witness table for ObservableObjectPublisher.Inner<A>;
  v18[0] = v15;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 40))(v18, a2, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v16;
  Swift::Int v17;
  unint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::UInt v21;
  Swift::Int v22;
  Swift::Int v23;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_retain();
    swift_bridgeObjectRetain();
    v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for ObservableObjectPublisher.Conduit();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v17 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v23 = v17;
    v18 = *(_QWORD *)(v17 + 16);
    if (*(_QWORD *)(v17 + 24) <= v18)
    {
      v20 = v18 + 1;
      swift_retain();
      specialized _NativeSet.resize(capacity:)(v20);
      v19 = v23;
    }
    else
    {
      v19 = v17;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v19);
    *v3 = v19;
  }
  else
  {
    Hasher.init(_seed:)();
    Hasher._combine(_:)(a2);
    v10 = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(v6 + 32);
    v12 = v10 & ~v11;
    if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
    {
      v13 = *(_QWORD *)(v6 + 48);
      if (*(_QWORD *)(v13 + 8 * v12) == a2)
      {
LABEL_12:
        swift_release();
        *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      v14 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v14;
        if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        if (*(_QWORD *)(v13 + 8 * v12) == a2)
          goto LABEL_12;
      }
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v2;
    *v2 = 0x8000000000000000;
    v16 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v16, v12, isUniquelyReferenced_nonNull_native);
    *v2 = v22;
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v16;
  Swift::Int v17;
  unint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::UInt v21;
  Swift::Int v22;
  Swift::Int v23;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_retain();
    swift_bridgeObjectRetain();
    v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for AnyCancellable();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v17 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v23 = v17;
    v18 = *(_QWORD *)(v17 + 16);
    if (*(_QWORD *)(v17 + 24) <= v18)
    {
      v20 = v18 + 1;
      swift_retain();
      specialized _NativeSet.resize(capacity:)(v20);
      v19 = v23;
    }
    else
    {
      v19 = v17;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v19);
    *v3 = v19;
  }
  else
  {
    Hasher.init(_seed:)();
    Hasher._combine(_:)(a2);
    v10 = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(v6 + 32);
    v12 = v10 & ~v11;
    if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
    {
      v13 = *(_QWORD *)(v6 + 48);
      if (*(_QWORD *)(v13 + 8 * v12) == a2)
      {
LABEL_12:
        swift_release();
        *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      v14 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v14;
        if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        if (*(_QWORD *)(v13 + 8 * v12) == a2)
          goto LABEL_12;
      }
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v2;
    *v2 = 0x8000000000000000;
    v16 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v16, v12, isUniquelyReferenced_nonNull_native);
    *v2 = v22;
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_13;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_13;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8, &demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>);
  }
  v9 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    result = type metadata accessor for ObservableObjectPublisher.Conduit();
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_12:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v10;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_12;
      }
    }
  }
LABEL_13:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_13;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_13;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8, &demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  }
  v9 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    result = type metadata accessor for AnyCancellable();
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_12:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v10;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_12;
      }
    }
  }
LABEL_13:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t *specialized ObservableObjectPublisher.Inner.__allocating_init(_:parent:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = (uint64_t *)swift_allocObject();
  v5 = specialized ObservableObjectPublisher.Inner.init(_:parent:)(a1, a2, v4);
  swift_release();
  return v5;
}

uint64_t *specialized ObservableObjectPublisher.Inner.init(_:parent:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;

  v5 = *a3;
  swift_weakInit();
  v6 = *(_QWORD *)(*a3 + 144);
  swift_retain();
  v7 = (_QWORD *)swift_slowAlloc();
  *v7 = 0;
  *(uint64_t *)((char *)a3 + v6) = (uint64_t)v7;
  v8 = *(_QWORD *)(*a3 + 152);
  v9 = (_DWORD *)swift_slowAlloc();
  *v9 = 0;
  *(uint64_t *)((char *)a3 + v8) = (uint64_t)v9;
  *((_BYTE *)a3 + *(_QWORD *)(*a3 + 160)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 112) - 8) + 32))((uint64_t)a3 + *(_QWORD *)(*a3 + 136), a1);
  swift_weakAssign();
  return a3;
}

uint64_t type metadata accessor for ObservableObjectPublisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservableObjectPublisher.Inner);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  result = static _SetStorage.resize(original:capacity:move:)();
  v6 = result;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
LABEL_35:
    *v3 = v6;
    return result;
  }
  v7 = 0;
  v8 = v4 + 56;
  v9 = 1 << *(_BYTE *)(v4 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_24;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v12)
      goto LABEL_33;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_33;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_33;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_24:
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v16);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v20);
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
    result = swift_retain();
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_33:
    result = swift_release();
    v3 = v2;
    goto LABEL_35;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_33;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.HandleEvents<A>(uint64_t a1)
{
  Publishers.HandleEvents.receive<A>(subscriber:)(a1);
}

void Publishers.HandleEvents.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.HandleEvents.Inner();
}

uint64_t sub_18B53B4F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v3, v2);
  swift_allocObject();
  *(_QWORD *)(v8 - 96) = specialized Publishers.HandleEvents.Inner.init(downstream:events:)(v4, v1);
  v10 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.HandleEvents<A>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v8 - 96, v5, a1, v6, v10);
  return swift_release();
}

void type metadata accessor for Publishers.HandleEvents.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t initializeWithCopy for Just(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t initializeWithCopy for Publishers.MeasureInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithCopy for Result.Publisher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  _BYTE v21[16];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_release();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = v19;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of ObservableObjectTable.Storage(a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  result = outlined init with take of ObservableObjectTable.Storage(a2, a4[6] + 16 * a1);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t initializeWithCopy for Publishers.CollectByCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.FlatMap<A, B>(uint64_t a1)
{
  Publishers.FlatMap.receive<A>(subscriber:)(a1);
}

uint64_t initializeWithCopy for Publishers.Output(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Published<A>.Publisher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Published.Publisher.receive<A>(subscriber:)(a1, a2, a2, a3);
}

uint64_t initializeWithCopy for Publishers.Filter.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Just<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Just.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.SubscribeOn<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.SubscribeOn.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>);
}

{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Catch<A, B>(uint64_t a1)
{
  Publishers.Catch.receive<A>(subscriber:)(a1);
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _BYTE v21[8];
  Swift::UInt v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of ObservableObjectTable.Storage(*(_QWORD *)(a2 + 48) + 16 * v6, (uint64_t)v21);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v22);
        v9 = Hasher._finalize()();
        result = outlined destroy of ObservableObjectTable.Storage((uint64_t)v21);
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          result = v11 + 16 * v3;
          if (v3 < (uint64_t)v6 || result >= v11 + 16 * v6 + 16)
          {
            result = swift_arrayInitWithTakeFrontToBack();
          }
          else if (v3 != v6)
          {
            result = swift_arrayInitWithTakeBackToFront();
          }
          v12 = *(_QWORD *)(a2 + 56);
          v13 = (_QWORD *)(v12 + 8 * v3);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v15 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v16 = *v15;
    v17 = (-1 << v3) - 1;
  }
  else
  {
    v15 = (uint64_t *)(v4 + 8 * (result >> 6));
    v17 = *v15;
    v16 = (-1 << result) - 1;
  }
  *v15 = v17 & v16;
  v18 = *(_QWORD *)(a2 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v20;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_QWORD *)(v11 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 >= v8 && v3 >= (uint64_t)v13)
          {
LABEL_16:
            v16 = (_QWORD *)(v11 + 8 * v3);
            if (v3 != v6 || v16 >= v12 + 1)
              *v16 = *v12;
            v17 = *(_QWORD *)(a2 + 56);
            v18 = v17 + 40 * v3;
            v19 = (__int128 *)(v17 + 40 * v6);
            if (v3 != v6 || (v3 = v6, v18 >= (unint64_t)v19 + 40))
            {
              v9 = *v19;
              v10 = v19[1];
              *(_QWORD *)(v18 + 32) = *((_QWORD *)v19 + 4);
              *(_OWORD *)v18 = v9;
              *(_OWORD *)(v18 + 16) = v10;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v8 || v3 >= (uint64_t)v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MapError<A, B>(uint64_t a1)
{
  Publishers.MapError.receive<A>(subscriber:)(a1);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  char v32[8];
  Swift::UInt v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObservableObjectTable.Storage, ObservableObjectPublisher>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = v2;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_34;
        v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_34;
          v18 = v31[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v30;
                goto LABEL_41;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v3 = v30;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_43;
                if (v8 >= v12)
                  goto LABEL_34;
                v18 = v31[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(v5 + 48) + 16 * v16;
      if ((a2 & 1) != 0)
      {
        outlined init with take of ObservableObjectTable.Storage(v20, (uint64_t)v32);
        v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
      }
      else
      {
        outlined init with copy of ObservableObjectTable.Storage(v20, (uint64_t)v32);
        v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v33);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      result = outlined init with take of ObservableObjectTable.Storage((uint64_t)v32, *(_QWORD *)(v7 + 48) + 16 * v14);
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Subscription>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_34;
        v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_34;
          v18 = v30[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) != 0)
              {
                v29 = 1 << *(_BYTE *)(v5 + 32);
                if (v29 >= 64)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_34;
                v18 = v30[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v16);
      if ((a2 & 1) != 0)
        outlined init with take of Subscription(v21, (uint64_t)v31);
      else
        outlined init with copy of Subscription((uint64_t)v21, (uint64_t)v31);
      result = static Hasher._hash(seed:_:)();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v20;
      result = outlined init with take of Subscription(v31, *(_QWORD *)(v7 + 56) + 40 * v14);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CollectByTime<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Publishers.CollectByTime.receive<A>(subscriber:)(a1, a4);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Share<A>()
{
  Publishers.Share.receive<A>(subscriber:)();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.ReplaceError<A>()
{
  Publishers.ReplaceError.receive<A>(subscriber:)();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Timeout<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  Publishers.Timeout.receive<A>(subscriber:)(a1, a4, a2, a3);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CollectByCount<A>(uint64_t a1)
{
  Publishers.CollectByCount.receive<A>(subscriber:)(a1);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Scan<A, B>(uint64_t a1)
{
  Publishers.Scan.receive<A>(subscriber:)(a1);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.DropWhile<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.DropWhile.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.DropWhile.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.DropWhile.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t)type metadata accessor for Publishers.DropWhile.Inner, (uint64_t (*)(char *, uint64_t, uint64_t))Publishers.DropWhile.Inner.init(downstream:predicate:), (uint64_t)&protocol conformance descriptor for Publishers.DropWhile<A>.Inner<A1>);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.FirstWhere<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.FirstWhere.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.FirstWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.LastWhere.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for Publishers.FirstWhere.Inner, (uint64_t)&unk_1E2177148, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool));
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CombineLatest4<A, B, C, D>()
{
  Publishers.CombineLatest4.receive<A>(subscriber:)();
}

void Publishers.CombineLatest4.receive<A>(subscriber:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for CombineLatest4Inner();
}

void sub_18B53C12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  swift_allocObject();
  specialized AbstractCombineLatest.init(downstream:upstreamCount:)(a15, 4);
  swift_retain();
  swift_getTupleTypeMetadata();
  type metadata accessor for AbstractCombineLatest.Side();
}

void sub_18B53C198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31;

  v31 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for AbstractCombineLatest<A, B, C>.Side<A1>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&a25, a13, a1, a14, v31);
  swift_release();
  a25 = 1;
  swift_retain();
  a30 = a12;
  type metadata accessor for AbstractCombineLatest.Side();
}

void sub_18B53C20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v32;

  v32 = MEMORY[0x18D77ACE4](v30, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&a25, a19, a1, a20, v32);
  swift_release();
  a25 = 2;
  swift_retain();
  a30 = a16;
  type metadata accessor for AbstractCombineLatest.Side();
}

void sub_18B53C26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v32;

  v32 = MEMORY[0x18D77ACE4](v30, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&a25, a21, a1, a22, v32);
  swift_release();
  a25 = 3;
  swift_retain();
  a30 = a17;
  type metadata accessor for AbstractCombineLatest.Side();
}

void sub_18B53C2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  uint64_t v19;
  va_list va;

  va_start(va, a17);
  v19 = MEMORY[0x18D77ACE4](v17, a1);
  Publisher.subscribe<A>(_:)((uint64_t)va, a16, a1, a17, v19);
  swift_release();
  AbstractCombineLatest.subscribe()();
}

uint64_t sub_18B53C300()
{
  return swift_release();
}

void type metadata accessor for CombineLatest4Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t initializeWithCopy for Publishers.Merge5(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = *(_QWORD *)(a3[5] - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v22, v23);
  v24 = *(_QWORD *)(a3[6] - 8);
  (*(void (**)(unint64_t, unint64_t))(v24 + 16))((*(_QWORD *)(v19 + 64) + *(unsigned __int8 *)(v24 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80), (*(_QWORD *)(v19 + 64) + *(unsigned __int8 *)(v24 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  return a1;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge5<A, B, C, D, E>()
{
  Publishers.Merge5.receive<A>(subscriber:)();
}

void Publishers.Merge5.receive<A>(subscriber:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Publishers._Merged();
}

void sub_18B53C4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,_UNKNOWN **a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  void (*v27)(uint64_t **, uint64_t, uint64_t);

  swift_allocObject();
  v26 = specialized Publishers._Merged.init(downstream:count:)(v22, 5);
  a21 = a1;
  a22 = &protocol witness table for Publishers._Merged<A, B, C>;
  a18 = v26;
  v27 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v23 + 40);
  swift_retain();
  v27(&a18, v24, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a18);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, (uint64_t)v26, &a15);
  a20 = v24;
  a21 = v23;
  type metadata accessor for Publishers._Merged.Side();
}

uint64_t sub_18B53C584(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers._Merged<A, B, C>.Side, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v3, a1, v7, v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[3], a1, v1[8], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[4], a1, v1[9], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[5], a1, v1[10], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(4, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[6], a1, v1[11], v5);
  swift_release();
  return swift_release();
}

uint64_t dispatch thunk of Subscriber.receive(completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t type metadata instantiation function for Record()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t Published.init(initialValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Published.Storage(0, a2, v4, v5);
  return swift_storeEnumTagMultiPayload();
}

uint64_t dispatch thunk of Cancellable.cancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata instantiation function for FilterProducer.State()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for PublisherBoxBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PublisherBoxBase);
}

uint64_t Publisher.catch<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publisher.catch<A>(_:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for Publishers.Catch, a7);
}

uint64_t Published.projectedValue.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t *);
  _QWORD *v4;
  _QWORD v6[4];

  v2 = *a1;
  v3 = Published.projectedValue.modify(v6, a2);
  *v4 = v2;
  swift_release();
  return ((uint64_t (*)(_QWORD *, _QWORD))v3)(v6, 0);
}

void Published.projectedValue.modify(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *a1;
  swift_release();
  v2 = *(void **)(v1 + 24);
  v3 = *(void **)(v1 + 16);
  free(*(void **)(v1 + 32));
  free(v2);
  free(v3);
  free((void *)v1);
}

{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *a1;
  swift_release();
  v2 = *(void **)(v1 + 24);
  v3 = *(void **)(v1 + 16);
  free(*(void **)(v1 + 32));
  free(v2);
  free(v3);
  free((void *)v1);
}

void (*Published.projectedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = malloc(v8);
  v5[2] = v9;
  v10 = malloc(v8);
  v5[3] = v10;
  v13 = type metadata accessor for Published.Storage(0, v6, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = malloc(*(_QWORD *)(v14 + 64));
  v5[4] = v15;
  (*(void (**)(void))(v14 + 16))();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v5 = *v15;
    return Published.projectedValue.modify;
  }
  else
  {
    (*(void (**)(void *, _QWORD *, uint64_t))(v7 + 32))(v10, v15, v6);
    (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
    Published.Publisher.init(_:)((uint64_t)v9, v6, v5 + 1);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
    (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v2, v13);
    *v2 = v5[1];
    swift_storeEnumTagMultiPayload();
    swift_retain();
    return Published.projectedValue.modify;
  }
}

uint64_t Future.__allocating_init(_:)(void (*a1)(uint64_t (*)(), _QWORD *))
{
  uint64_t v2;

  v2 = swift_allocObject();
  Future.init(_:)(a1);
  return v2;
}

uint64_t Future.init(_:)(void (*a1)(uint64_t (*)(), _QWORD *))
{
  uint64_t v1;
  _QWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(_QWORD **)v1;
  v4 = (_DWORD *)swift_slowAlloc();
  *v4 = 0;
  *(_QWORD *)(v1 + 16) = v4;
  v5 = v3[10];
  v6 = v3[11];
  v7 = v3[12];
  *(_QWORD *)(v1 + 24) = ConduitList.init()();
  *(_BYTE *)(v1 + 32) = v8;
  v9 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 120);
  v10 = type metadata accessor for Result();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v5;
  v11[3] = v6;
  v11[4] = v7;
  v11[5] = partial apply for implicit closure #2 in implicit closure #1 in Future.init(_:);
  v11[6] = v1;
  swift_retain_n();
  a1(partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> (), v11);
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t Published.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v13 = type metadata accessor for Published.Storage(0, v4, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (uint64_t *)((char *)&v19 - v15);
  (*(void (**)(char *, uint64_t *, uint64_t))(v14 + 16))((char *)&v19 - v15, v2, v13);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v18 = *v16;
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v10, v16, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    Published.Publisher.init(_:)((uint64_t)v8, v4, &v20);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    v18 = v20;
    (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v2, v13);
    *v2 = v18;
    swift_storeEnumTagMultiPayload();
    result = swift_retain();
  }
  *a2 = v18;
  return result;
}

uint64_t partial apply for closure #1 in ObservableObject<>.objectWillChange.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return ObservableObject<>.applyFields(_:_:type:)(*(uint64_t **)(v3 + 40), a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24)) & 1;
}

uint64_t ObservableObject<>.applyFields(_:_:type:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = swift_conformsToProtocol2();
  if (v11)
    v12 = v11;
  else
    v12 = 0;
  if (v11)
    v13 = a3;
  else
    v13 = 0;
  if (v13)
    return project #1 <A><A1>(type:) in ObservableObject<>.applyFields(_:_:type:)(v13, v5, a2, a1, a4, v13, a5, v12);
  else
    return 1;
}

uint64_t project #1 <A><A1>(type:) in ObservableObject<>.applyFields(_:_:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;

  v11 = type metadata accessor for ObservationRegistrar();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a4)
    goto LABEL_2;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8))(a6, a8);
  if (v18)
  {
    *a4 = v18;
    swift_release();
    return 0;
  }
  else
  {
    type metadata accessor for ObservableObjectPublisher();
    v19 = swift_allocObject();
    v20 = OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock;
    v21 = (_DWORD *)swift_slowAlloc();
    *v21 = 0;
    *(_QWORD *)(v19 + v20) = v21;
    *(_QWORD *)(v19 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections) = MEMORY[0x1E0DEE9E8];
    *(_QWORD *)(v19 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_identifier) = 0;
    ObservationRegistrar.init()();
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher__registrar, v14, v11);
    *a4 = v19;
    swift_release();
    result = *a4;
    if (*a4)
    {
LABEL_2:
      v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(a8 + 16);
      v16 = swift_retain();
      v15(v16, a6, a8);
      return 1;
    }
    __break(1u);
  }
  return result;
}

_QWORD *initializeWithCopy for Published(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    swift_retain();
    v8 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

uint64_t destroy for Published(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return swift_release();
    else
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_18B53CFC8 + 4 * byte_18B5F74C0[v5]))();
  }
}

uint64_t Published.objectWillChange.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v5 = v4;
  v6 = type metadata accessor for Published.Storage(0, *(_QWORD *)(a1 + 16), a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v12 - v8, v5, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_retain();
    v10 = PublishedSubject.objectWillChange.getter();
    swift_release_n();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 0;
  }
  return v10;
}

_QWORD *initializeWithCopy for Published.Storage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    swift_retain();
    v8 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

uint64_t Published.objectWillChange.setter(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = v2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v20 - v10;
  v14 = type metadata accessor for Published.Storage(0, v5, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v20 - v16;
  (*(void (**)(char *, uint64_t *, uint64_t))(v15 + 16))((char *)&v20 - v16, v3, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_retain();
    specialized PublishedSubject.objectWillChange.setter(a1);
    swift_release_n();
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v17, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    Published.Publisher.init(_:)((uint64_t)v9, v5, &v21);
    v19 = v21;
    swift_retain();
    specialized PublishedSubject.objectWillChange.setter(a1);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(v3, v14);
    *v3 = v19;
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t destroy for Published.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return swift_release();
    else
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_18B53D3BC + 4 * byte_18B5F74F6[v5]))();
  }
}

uint64_t Published.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PublishedSubject(0, v9, v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  v12 = PublishedSubject.__allocating_init(_:)((uint64_t)v8);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v12;
  return result;
}

uint64_t type metadata accessor for PublishedSubject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PublishedSubject);
}

uint64_t PublishedSubject.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  PublishedSubject.init(_:)(a1);
  return v2;
}

uint64_t *PublishedSubject.init(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v3 = *v1;
  v4 = (_DWORD *)swift_slowAlloc();
  *v4 = 0;
  v1[2] = (uint64_t)v4;
  v5 = *(_QWORD *)(v3 + 80);
  v1[3] = ConduitList.init()();
  *((_BYTE *)v1 + 32) = v6;
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 112)) = MEMORY[0x1E0DEE9D8];
  *((_BYTE *)v1 + *(_QWORD *)(*v1 + 120)) = 0;
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 128)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))((uint64_t)v1 + *(_QWORD *)(*v1 + 104), a1, v5);
  return v1;
}

uint64_t ConduitList.init()()
{
  return 0;
}

void specialized PublishedSubject.objectWillChange.setter(os_unfair_lock_s *a1)
{
  os_unfair_lock_t *v1;

  os_unfair_lock_lock(v1[2]);
  *(os_unfair_lock_t *)((char *)v1 + *(_QWORD *)&(*v1)[32]._os_unfair_lock_opaque) = a1;
  swift_retain();
  swift_release();
  os_unfair_lock_unlock(v1[2]);
}

uint64_t PublishedSubject.objectWillChange.getter()
{
  os_unfair_lock_t *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;

  os_unfair_lock_lock(v0[2]);
  v1 = *(uint64_t *)((char *)v0 + *(_QWORD *)&(*v0)[32]._os_unfair_lock_opaque);
  v2 = v0[2];
  swift_retain();
  os_unfair_lock_unlock(v2);
  return v1;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Record<A, B>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

uint64_t type metadata completion function for SubscriberTap()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for Published.Publisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Published.Publisher);
}

uint64_t Publisher.tryMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publisher.compactMap<A>(_:)(a1, a2, a3, a4, a5, type metadata accessor for Publishers.TryMap, a6);
}

uint64_t type metadata instantiation function for Publishers.MeasureInterval()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for FilterProducer.State(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConduitBase<A, B>(uint64_t *a1, uint64_t *a2)
{
  return static ConduitBase.== infix(_:_:)(*a1, *a2);
}

BOOL static ConduitBase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void partial apply for closure #1 in Publishers.ReceiveOn.Inner.receive(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  closure #1 in Publishers.ReceiveOn.Inner.receive(_:)(*(_QWORD **)(v0 + 64), v0 + ((v1 + 72) & ~v1));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConduitBase<A1, B1>()
{
  Hasher.init(_seed:)();
  ConduitBase.hash(into:)();
  return Hasher._finalize()();
}

void ConduitBase.hash(into:)()
{
  Swift::UInt v0;

  Hasher._combine(_:)(v0);
}

void CombineIdentifier.init()(uint64_t *a1@<X8>)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  if (one-time initialization token for lock != -1)
    swift_once();
  v2 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v3 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v2);
    *a1 = v3;
  }
}

Swift::Int CombineIdentifier.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t type metadata instantiation function for Publishers.CombineLatest3()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for Future(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Future);
}

uint64_t Published.Publisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PublishedSubject.receive<A>(subscriber:)(a1, a3, a4);
}

uint64_t PublishedSubject.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD v20[5];

  v4 = v3;
  v8 = *v3;
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v20[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (os_unfair_lock_s *)v4[2];
  os_unfair_lock_lock(v12);
  v13 = *(_QWORD *)(v8 + 80);
  v14 = type metadata accessor for PublishedSubject.Conduit(0, v13, a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
  swift_allocObject();
  v15 = swift_retain();
  v16 = PublishedSubject.Conduit.init(_:_:)(v15, (uint64_t)v11);
  swift_beginAccess();
  v17 = (uint64_t *)type metadata accessor for ConduitList(0, v13, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
  ConduitList.insert(_:)(v16, v17);
  swift_endAccess();
  os_unfair_lock_unlock(v12);
  v20[3] = v14;
  v20[4] = &protocol witness table for ConduitBase<A, B>;
  v20[0] = v16;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 40))(v20, a2, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance CurrentValueSubject<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CurrentValueSubject.receive<A>(subscriber:)(a1, a2, a3, a4);
}

uint64_t CurrentValueSubject.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = v4;
  v30 = a1;
  v31 = a3;
  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 88);
  v28 = *(_QWORD *)(*v4 + 96);
  v29 = v8;
  v9 = type metadata accessor for Subscribers.Completion(255, v8, v28, a4);
  v10 = type metadata accessor for Optional();
  v26 = *(_QWORD *)(v10 - 8);
  v27 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v25 - v12;
  v14 = *(_QWORD *)(v9 - 8);
  v15 = MEMORY[0x1E0C80A78](v11);
  v17 = (char *)&v25 - v16;
  MEMORY[0x1E0C80A78](v15);
  v18 = (os_unfair_lock_s *)v5[2];
  os_unfair_lock_lock(v18);
  if (*((_BYTE *)v5 + 24) == 1)
  {
    v32 = *(_QWORD *)(v7 + 80);
    v33 = v29;
    v34 = a2;
    v35 = v31;
    type metadata accessor for CurrentValueSubject.Conduit();
  }
  v19 = a2;
  v20 = v31;
  v21 = (uint64_t)v5 + *(_QWORD *)(*v5 + 120);
  swift_beginAccess();
  v23 = v26;
  v22 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v13, v21, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v9) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v13, v22);
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v13, v9);
    os_unfair_lock_unlock(v18);
    if (one-time initialization token for singleton != -1)
      swift_once();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v20 + 40))(&static Subscriptions._EmptySubscription.singleton, v19, v20);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 56))(v17, v19, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v9);
  }
  return result;
}

uint64_t initializeWithCopy for Publishers.CompactMap.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for ConduitList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConduitList);
}

uint64_t ConduitList.insert(_:)(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v2;
  v5 = result;
  v6 = *(_QWORD *)v3;
  if (*(_BYTE *)(v3 + 8))
  {
    if (*(_BYTE *)(v3 + 8) == 1)
    {
      v13 = *(_QWORD *)v3;
      swift_retain();
      outlined copy of ConduitList<A, Never><A>(v6, 1);
      v7 = type metadata accessor for ConduitBase(255, a2[2], a2[3], a2[4]);
      MEMORY[0x18D77ACE4](&protocol conformance descriptor for ConduitBase<A, B>, v7);
      type metadata accessor for Set();
      Set.insert(_:)();
      swift_release();
      v8 = *(_QWORD *)v3;
      *(_QWORD *)v3 = v13;
      v9 = *(_BYTE *)(v3 + 8);
      *(_BYTE *)(v3 + 8) = 1;
      swift_bridgeObjectRetain();
      outlined consume of ConduitList<A, Never><A>(v8, v9);
      return swift_bridgeObjectRelease();
    }
    else
    {
      *(_QWORD *)v3 = result;
      *(_BYTE *)(v3 + 8) = 0;
      return swift_retain();
    }
  }
  else if (v6 != result)
  {
    v10 = type metadata accessor for ConduitBase(0, a2[2], a2[3], a2[4]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    swift_allocObject();
    static Array._adoptStorage(_:count:)();
    *v11 = v6;
    v11[1] = v5;
    _finalizeUninitializedArray<A>(_:)();
    v12 = type metadata accessor for Array();
    swift_retain();
    MEMORY[0x18D77ACE4](&protocol conformance descriptor for ConduitBase<A, B>, v10);
    MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF38], v12);
    result = Set.init<A>(_:)();
    *(_QWORD *)v3 = result;
    *(_BYTE *)(v3 + 8) = 1;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Publishers._Merged.Side(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  return a1;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.ReceiveOn<A, B>.Inner<A1>(_QWORD *a1)
{
  return Publishers.ReceiveOn.Inner.receive(subscription:)(a1);
}

uint64_t type metadata accessor for ConduitBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConduitBase);
}

uint64_t Publishers.MapKeyPath.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 48) + 40))(a1, *(_QWORD *)(a2 + 32));
}

uint64_t CurrentValueSubject.init(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD **)v1;
  v4 = (_DWORD *)swift_slowAlloc();
  *v4 = 0;
  *(_QWORD *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 24) = 1;
  v5 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 120);
  v7 = type metadata accessor for Subscribers.Completion(0, v3[11], v3[12], v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  v8 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 128);
  v9 = v3[10];
  *(_QWORD *)v8 = ConduitList.init()();
  *(_BYTE *)(v8 + 8) = v10;
  *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 144)) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 136), a1, v9);
  return v1;
}

uint64_t *PassthroughSubject.init()()
{
  uint64_t *v0;
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v1 = *v0;
  v2 = (_DWORD *)swift_slowAlloc();
  *v2 = 0;
  v0[2] = (uint64_t)v2;
  *((_BYTE *)v0 + 24) = 1;
  v3 = (uint64_t)v0 + *(_QWORD *)(*v0 + 120);
  v5 = type metadata accessor for Subscribers.Completion(0, *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
  v6 = (uint64_t)v0 + *(_QWORD *)(*v0 + 128);
  *(_QWORD *)v6 = ConduitList.init()();
  *(_BYTE *)(v6 + 8) = v7;
  *(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 136)) = MEMORY[0x1E0DEE9D8];
  *((_BYTE *)v0 + *(_QWORD *)(*v0 + 144)) = 0;
  return v0;
}

uint64_t type metadata accessor for Subscribers.Completion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Subscribers.Completion);
}

void storeEnumTagSinglePayload for Publishers.CompactMap.Inner(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B53E334()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B53E3ACLL);
}

void sub_18B53E33C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B53E344);
  JUMPOUT(0x18B53E3ACLL);
}

void sub_18B53E384()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B53E3ACLL);
}

void sub_18B53E38C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B53E3ACLL);
}

uint64_t sub_18B53E394(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B53E3ACLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B53E3A8);
    JUMPOUT(0x18B53E3A0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t ConduitBase.init()()
{
  uint64_t v0;

  return v0;
}

void type metadata accessor for CurrentValueSubject.Conduit()
{
  JUMPOUT(0x18D77AC60);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.HandleEvents<A>.Inner<A1>(uint64_t a1)
{
  Publishers.HandleEvents.Inner.request(_:)(a1);
}

void Publishers.HandleEvents.Inner.request(_:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  __int128 v7[2];
  char v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = *(os_unfair_lock_s **)(v1 + 64);
  os_unfair_lock_lock(v3);
  v4 = *(void (**)(uint64_t))(v1 + 136);
  if (v4)
  {
    swift_retain();
    os_unfair_lock_unlock(v3);
    v4(a1);
    os_unfair_lock_lock(v3);
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v4);
  }
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 16, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(v3);
    v5 = v10;
    v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

uint64_t Publishers.HandleEvents.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  void (*v5)(_QWORD *);
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void (*v11)(uint64_t **, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  int8x16_t v14;
  int8x16_t v15;
  char v16;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[8];
  os_unfair_lock_lock(v4);
  v5 = (void (*)(_QWORD *))v1[9];
  if (v5)
  {
    swift_retain();
    os_unfair_lock_unlock(v4);
    v5(a1);
    os_unfair_lock_lock(v4);
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v5);
  }
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)&v13);
  if (v16 == 2
    && (v6 = vorrq_s8(v14, v15),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, (uint64_t)(v1 + 2));
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.HandleEvents<A>.Inner<A1>;
    v13 = v1;
    v10 = *(_QWORD *)(v3 + 104);
    v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    v12 = *(_QWORD *)(v3 + 88);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    v7 = a1[3];
    v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
  }
}

Swift::Void __swiftcall CurrentValueSubject.Conduit.request(_:)(Combine::Subscribers::Demand a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v2 = v1;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 160);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1.rawValue);
  v46 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v48 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v49 = (char *)&v44 - v11;
  v12 = *(_QWORD *)(v4 + 176);
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v44 - v16;
  v51 = *(_QWORD *)(v12 - 8);
  v52 = v12;
  MEMORY[0x1E0C80A78](v15);
  v50 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1.rawValue != 0x8000000000000000)
  {
    if ((a1.rawValue & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (a1.rawValue)
    {
      goto LABEL_4;
    }
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
LABEL_4:
  v44 = v4;
  v45 = v6;
  v19 = v5;
  v20 = v8;
  v21 = *(os_unfair_lock_s **)((char *)v2 + *(_QWORD *)(v4 + 216));
  os_unfair_lock_lock(v21);
  v22 = (char *)v2 + *(_QWORD *)(*v2 + 200);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v22, v13);
  v24 = v51;
  v23 = v52;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v17, 1, v52) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    os_unfair_lock_unlock(v21);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v50, v17, v23);
  v25 = *v2;
  v26 = *(_QWORD *)(*v2 + 232);
  if ((*((_BYTE *)v2 + v26) & 1) != 0)
  {
    v27 = *(_QWORD *)(v25 + 208);
    v28 = *(_QWORD *)((char *)v2 + v27);
    v29 = 0x8000000000000000;
    if (v28 == 0x8000000000000000)
    {
LABEL_24:
      os_unfair_lock_unlock(v21);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v50, v23);
      return;
    }
    if (a1.rawValue == 0x8000000000000000)
      goto LABEL_23;
    if (((v28 | a1.rawValue) & 0x8000000000000000) == 0)
    {
      v29 = v28 + a1.rawValue;
      if (!__OFADD__(v28, a1.rawValue))
      {
        if ((v29 & 0x8000000000000000) == 0)
          goto LABEL_23;
        goto LABEL_50;
      }
      v29 = 0x8000000000000000;
LABEL_23:
      *(_QWORD *)((char *)v2 + v27) = v29;
      goto LABEL_24;
    }
    goto LABEL_47;
  }
  v30 = 0x8000000000000000;
  if (a1.rawValue != 0x8000000000000000)
  {
    v31 = (_QWORD *)((char *)v2 + *(_QWORD *)(v25 + 208));
    v38 = *v31;
    v32 = v20;
    v35 = v48;
    v37 = (uint64_t)v49;
    if (*v31 == 0x8000000000000000)
    {
      v33 = v19;
      v34 = v45;
      v36 = v47;
      goto LABEL_27;
    }
    v36 = v47;
    if ((v38 & 0x8000000000000000) != 0)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    v33 = v19;
    v30 = v38 + a1.rawValue - 1;
    v34 = v45;
    if (__OFADD__(v38, a1.rawValue - 1))
    {
      v30 = 0x8000000000000000;
    }
    else if ((v30 & 0x8000000000000000) != 0)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    goto LABEL_26;
  }
  v31 = (_QWORD *)((char *)v2 + *(_QWORD *)(v25 + 208));
  v32 = v20;
  v33 = v19;
  v34 = v45;
  v36 = v47;
  v35 = v48;
  v37 = (uint64_t)v49;
  if (*v31 != 0x8000000000000000)
LABEL_26:
    *v31 = v30;
LABEL_27:
  *((_BYTE *)v2 + v26) = 1;
  if (v2[2])
  {
    swift_retain();
    CurrentValueSubject.value.getter(v37);
    swift_release();
  }
  (*(void (**)(uint64_t))(v34 + 56))(v37);
  os_unfair_lock_unlock(v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, v37, v32);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v35, 1, v33) == 1)
  {
    v39 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v39(v37, v32);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
    v39((uint64_t)v35, v32);
    return;
  }
  v40 = v46;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v46, v35, v33);
  os_unfair_recursive_lock_lock_with_options();
  v41 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v44 + 184) + 48))(v40, v52);
  os_unfair_recursive_lock_unlock();
  v42 = 0x8000000000000000;
  if (v41 == 0x8000000000000000)
  {
    os_unfair_lock_lock(v21);
    if (*v31 == 0x8000000000000000)
      goto LABEL_43;
    goto LABEL_42;
  }
  if (v41 < 0)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (!v41)
  {
LABEL_44:
    (*(void (**)(char *, uint64_t))(v34 + 8))(v46, v33);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v49, v32);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
    return;
  }
  os_unfair_lock_lock(v21);
  v43 = *v31;
  if (*v31 == 0x8000000000000000)
  {
LABEL_43:
    os_unfair_lock_unlock(v21);
    goto LABEL_44;
  }
  if (((v43 | v41) & 0x8000000000000000) != 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v42 = v43 + v41;
  if (__OFADD__(v43, v41))
  {
    v42 = 0x8000000000000000;
LABEL_42:
    *v31 = v42;
    goto LABEL_43;
  }
  if ((v42 & 0x8000000000000000) == 0)
    goto LABEL_42;
LABEL_53:
  __break(1u);
}

uint64_t getEnumTagSinglePayload for Publishers.CompactMap.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B53EBD0 + 4 * byte_18B5F902F[v10]))();
  }
}

uint64_t getEnumTagSinglePayload for Publishers.Map.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B53ECD8 + 4 * byte_18B5FC637[v10]))();
  }
}

void CurrentValueSubject.value.getter(uint64_t a1@<X8>)
{
  os_unfair_lock_t *v1;
  os_unfair_lock_t v3;
  char *v4;

  v3 = *v1;
  os_unfair_lock_lock(v1[2]);
  v4 = (char *)v1 + *(_QWORD *)&(*v1)[34]._os_unfair_lock_opaque;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)&v3[20]._os_unfair_lock_opaque - 8) + 16))(a1, v4);
  os_unfair_lock_unlock(v1[2]);
}

uint64_t Publishers.CompactMap.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v16 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v2 + *(int *)(a2 + 60)))(a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, v5);
    v14 = (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)(a2 + 48) + 48))(v13, *(_QWORD *)(a2 + 32));
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v5);
  }
  return v14;
}

uint64_t Publishers.Map.Inner.receive(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = a2[3];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78]();
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v2 + *(int *)(v9 + 60)))(v6);
  v10 = (*(uint64_t (**)(char *, _QWORD))(a2[6] + 48))(v8, a2[4]);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v10;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.ReceiveOn<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.ReceiveOn.Inner.receive(_:)(a1);
}

uint64_t Publishers.ReceiveOn.Inner.receive(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, void (*)(), char *, uint64_t, uint64_t);
  _QWORD v20[2];
  uint64_t v21;
  _BYTE v22[48];

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v21 = *(_QWORD *)(*v1 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)v20 - v7;
  v9 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v9);
  v10 = (uint64_t)v1 + *(_QWORD *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v10, (uint64_t)v22);
  LODWORD(v10) = v22[40];
  outlined destroy of SubscriptionStatus((uint64_t)v22);
  os_unfair_lock_unlock(v9);
  if (!(_DWORD)v10)
  {
    v11 = *(_QWORD *)(*v1 + 152);
    v20[1] = (char *)v1 + *(_QWORD *)(*v1 + 144);
    v12 = (char *)v1 + v11;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, AssociatedTypeWitness);
    v13 = (*(unsigned __int8 *)(v6 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v14 = (char *)swift_allocObject();
    *((_QWORD *)v14 + 2) = v4;
    v15 = v3[11];
    *((_QWORD *)v14 + 3) = v15;
    v16 = v21;
    *((_QWORD *)v14 + 4) = v3[12];
    *((_QWORD *)v14 + 5) = v16;
    v17 = v3[14];
    *((_QWORD *)v14 + 6) = v17;
    *((_QWORD *)v14 + 7) = v3[15];
    *((_QWORD *)v14 + 8) = v1;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v14[v13], v8, AssociatedTypeWitness);
    v18 = *(void (**)(char *, void (*)(), char *, uint64_t, uint64_t))(v17 + 56);
    swift_retain();
    v18(v12, partial apply for closure #1 in Publishers.ReceiveOn.Inner.receive(_:), v14, v15, v17);
    swift_release();
  }
  return 0;
}

uint64_t Publishers.ReceiveOn.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void (*v11)(uint64_t **, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  int8x16_t v14;
  int8x16_t v15;
  char v16;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (v6 = vorrq_s8(v14, v15),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    os_unfair_recursive_lock_lock_with_options();
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.ReceiveOn<A, B>.Inner<A1>;
    v13 = v1;
    v10 = *(_QWORD *)(v3 + 120);
    v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    v12 = *(_QWORD *)(v3 + 96);
    swift_retain();
    v11(&v13, v12, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
    return os_unfair_recursive_lock_unlock();
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    v7 = a1[3];
    v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
  }
}

uint64_t Subscribers.Sink.receive(subscription:)(_QWORD *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  char v13;

  v3 = *(os_unfair_lock_s **)(v1 + 96);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 48, (uint64_t)&v10);
  if (v13 == 2
    && (v4 = vorrq_s8(v11, v12),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | v10)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v10);
    v13 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v10, v1 + 48);
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    v8 = a1[3];
    v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 24))(0x8000000000000000, v8, v9);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    os_unfair_lock_unlock(v3);
    v6 = a1[3];
    v5 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v6);
  }
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined init with copy of Subscription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined assign with take of SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  assignWithTake for SubscriptionStatus(a2, a1);
  return a2;
}

uint64_t assignWithTake for SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 <= 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

void protocol witness for Subscription.request(_:) in conformance ObservableObjectPublisher.Inner<A>()
{
  specialized ObservableObjectPublisher.Inner.request(_:)();
}

void specialized ObservableObjectPublisher.Inner.request(_:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  os_unfair_lock_lock(v1);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  if (!*(_BYTE *)(v0 + v2))
    *(_BYTE *)(v0 + v2) = 1;
  os_unfair_lock_unlock(v1);
}

void closure #1 in Publishers.ReceiveOn.Inner.receive(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  __int128 v17[2];
  unsigned __int8 v18;
  _BYTE v19[48];

  v4 = *a1;
  v5 = (os_unfair_lock_s *)a1[2];
  os_unfair_lock_lock(v5);
  v6 = (uint64_t)a1 + *(_QWORD *)(*a1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)v19);
  outlined init with copy of SubscriptionStatus((uint64_t)v19, (uint64_t)v17);
  v7 = v18;
  outlined destroy of SubscriptionStatus((uint64_t)v17);
  outlined destroy of SubscriptionStatus((uint64_t)v19);
  os_unfair_lock_unlock(v5);
  if (v7 <= 1)
  {
    os_unfair_recursive_lock_lock_with_options();
    v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 + 120) + 48))(a2, *(_QWORD *)(v4 + 96));
    os_unfair_recursive_lock_unlock();
    if (v8 == 0x8000000000000000)
      goto LABEL_5;
    if (v8 < 0)
    {
      __break(1u);
      return;
    }
    if (v8)
    {
LABEL_5:
      os_unfair_lock_lock(v5);
      outlined init with copy of SubscriptionStatus(v6, (uint64_t)v19);
      outlined init with copy of SubscriptionStatus((uint64_t)v19, (uint64_t)v17);
      if (v18 != 1 && v18)
      {
        v13 = 0;
        v11 = 0u;
        v12 = 0u;
        outlined destroy of SubscriptionStatus((uint64_t)v17);
      }
      else
      {
        outlined init with take of Subscription(v17, (uint64_t)&v11);
      }
      outlined destroy of SubscriptionStatus((uint64_t)v19);
      if (*((_QWORD *)&v12 + 1))
      {
        outlined init with take of Subscription(&v11, (uint64_t)v14);
        os_unfair_lock_unlock(v5);
        v9 = v15;
        v10 = v16;
        __swift_project_boxed_opaque_existential_1(v14, v15);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v8, v9, v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      }
      else
      {
        outlined destroy of Subscription?((uint64_t)&v11);
        os_unfair_lock_unlock(v5);
      }
    }
  }
}

uint64_t outlined init with copy of SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SubscriptionStatus(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t outlined destroy of SubscriptionStatus(uint64_t a1)
{
  destroy for SubscriptionStatus(a1);
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t destroy for SubscriptionStatus(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 <= 1)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Subscribers.Sink<A, B>(uint64_t a1)
{
  Subscribers.Sink.receive(_:)(a1);
  return 0;
}

uint64_t Subscribers.Sink.receive(_:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  void (*v4)(uint64_t);

  v3 = *(os_unfair_lock_s **)(v1 + 96);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  v4 = *(void (**)(uint64_t))(v1 + 16);
  swift_retain();
  os_unfair_lock_unlock(v3);
  v4(a1);
  swift_release();
  return 0;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Subscribers.Sink<A, B>(_QWORD *a1)
{
  return Subscribers.Sink.receive(subscription:)(a1);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.ReceiveOn<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.ReceiveOn.Inner.request(_:)(a1);
}

void Publishers.ReceiveOn.Inner.request(_:)(uint64_t a1)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7[2];
  char v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(v3);
    v5 = v10;
    v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

uint64_t outlined init with take of Subscription(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance AnySubscriberBase<A, B>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

void storeEnumTagSinglePayload for Publishers.Map.Inner(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B53FBFC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B53FC74);
}

void sub_18B53FC04(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B53FC0CLL);
  JUMPOUT(0x18B53FC74);
}

void sub_18B53FC4C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B53FC74);
}

void sub_18B53FC54()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B53FC74);
}

uint64_t sub_18B53FC5C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B53FC74);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B53FC70);
    JUMPOUT(0x18B53FC68);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.HandleEvents<A>.Inner<A1>(_QWORD *a1)
{
  return Publishers.HandleEvents.Inner.receive(subscription:)(a1);
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.FlatMap<A, B>.Outer<A1>(uint64_t a1)
{
  Publishers.FlatMap.Outer.receive(_:)(a1);
}

void Publishers.FlatMap.Outer.receive(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  os_unfair_lock_s *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (uint64_t)v1;
  MEMORY[0x1E0C80A78](a1);
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  v5 = *((_BYTE *)v1 + *(_QWORD *)(*v1 + 232));
  os_unfair_lock_unlock(v4);
  if ((v5 & 1) == 0)
  {
    (*(void (**)(uint64_t))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 224)))(a1);
    v6 = *(_QWORD *)(*(_QWORD *)v2 + 192);
    v7 = *(_QWORD *)(v2 + v6);
    if (__OFADD__(v7, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v2 + v6) = v7 + 1;
      os_unfair_lock_lock(v4);
      v8 = *(_QWORD *)(*(_QWORD *)v2 + 200);
      v9 = *(_QWORD *)(v2 + v8);
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (!v10)
      {
        *(_QWORD *)(v2 + v8) = v11;
        os_unfair_lock_unlock(v4);
        swift_retain();
        Publishers._Merged.Side.init(index:merger:)(v7, v2, &v12);
        type metadata accessor for Publishers.FlatMap.Outer.Side();
      }
    }
    __break(1u);
  }
}

void type metadata accessor for Publishers.FlatMap.Outer.Side()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers._Merged.Side.init(index:merger:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s *v4;
  uint64_t v5;

  *a3 = a1;
  a3[1] = a2;
  if (one-time initialization token for lock != -1)
    swift_once();
  v4 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v5 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v4);
    a3[2] = v5;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AnyCancellable.Storage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t Publishers.Filter.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (((*(uint64_t (**)(void))(v2 + *(int *)(a2 + 52)))() & 1) != 0)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 40) + 48))(a1, *(_QWORD *)(a2 + 24));
  else
    return 1;
}

void protocol witness for Subscriber.receive(_:) in conformance FilterProducer<A, B, C, D, E>(uint64_t a1)
{
  FilterProducer.receive(_:)(a1);
}

Swift::Void __swiftcall PublishedSubject.Conduit.request(_:)(Combine::Subscribers::Demand a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v2 = v1;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 160);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1.rawValue);
  v46 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v48 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v49 = (char *)&v44 - v11;
  v12 = *(_QWORD *)(v4 + 168);
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v44 - v16;
  v51 = *(_QWORD *)(v12 - 8);
  v52 = v12;
  MEMORY[0x1E0C80A78](v15);
  v50 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1.rawValue != 0x8000000000000000)
  {
    if ((a1.rawValue & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (a1.rawValue)
    {
      goto LABEL_4;
    }
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
LABEL_4:
  v44 = v4;
  v45 = v6;
  v19 = v5;
  v20 = v8;
  v21 = *(os_unfair_lock_s **)((char *)v2 + *(_QWORD *)(v4 + 208));
  os_unfair_lock_lock(v21);
  v22 = (char *)v2 + *(_QWORD *)(*v2 + 192);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v22, v13);
  v24 = v51;
  v23 = v52;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v17, 1, v52) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    os_unfair_lock_unlock(v21);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v50, v17, v23);
  v25 = *v2;
  v26 = *(_QWORD *)(*v2 + 224);
  if ((*((_BYTE *)v2 + v26) & 1) != 0)
  {
    v27 = *(_QWORD *)(v25 + 200);
    v28 = *(_QWORD *)((char *)v2 + v27);
    v29 = 0x8000000000000000;
    if (v28 == 0x8000000000000000)
    {
LABEL_24:
      os_unfair_lock_unlock(v21);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v50, v23);
      return;
    }
    if (a1.rawValue == 0x8000000000000000)
      goto LABEL_23;
    if (((v28 | a1.rawValue) & 0x8000000000000000) == 0)
    {
      v29 = v28 + a1.rawValue;
      if (!__OFADD__(v28, a1.rawValue))
      {
        if ((v29 & 0x8000000000000000) == 0)
          goto LABEL_23;
        goto LABEL_50;
      }
      v29 = 0x8000000000000000;
LABEL_23:
      *(_QWORD *)((char *)v2 + v27) = v29;
      goto LABEL_24;
    }
    goto LABEL_47;
  }
  v30 = 0x8000000000000000;
  if (a1.rawValue != 0x8000000000000000)
  {
    v31 = (_QWORD *)((char *)v2 + *(_QWORD *)(v25 + 200));
    v38 = *v31;
    v32 = v20;
    v35 = v48;
    v37 = (uint64_t)v49;
    if (*v31 == 0x8000000000000000)
    {
      v33 = v19;
      v34 = v45;
      v36 = v47;
      goto LABEL_27;
    }
    v36 = v47;
    if ((v38 & 0x8000000000000000) != 0)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    v33 = v19;
    v30 = v38 + a1.rawValue - 1;
    v34 = v45;
    if (__OFADD__(v38, a1.rawValue - 1))
    {
      v30 = 0x8000000000000000;
    }
    else if ((v30 & 0x8000000000000000) != 0)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    goto LABEL_26;
  }
  v31 = (_QWORD *)((char *)v2 + *(_QWORD *)(v25 + 200));
  v32 = v20;
  v33 = v19;
  v34 = v45;
  v36 = v47;
  v35 = v48;
  v37 = (uint64_t)v49;
  if (*v31 != 0x8000000000000000)
LABEL_26:
    *v31 = v30;
LABEL_27:
  *((_BYTE *)v2 + v26) = 1;
  if (v2[2])
  {
    swift_retain();
    PublishedSubject.value.getter(v37);
    swift_release();
  }
  (*(void (**)(uint64_t))(v34 + 56))(v37);
  os_unfair_lock_unlock(v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, v37, v32);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v35, 1, v33) == 1)
  {
    v39 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v39(v37, v32);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
    v39((uint64_t)v35, v32);
    return;
  }
  v40 = v46;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v46, v35, v33);
  os_unfair_recursive_lock_lock_with_options();
  v41 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v44 + 176) + 48))(v40, v52);
  os_unfair_recursive_lock_unlock();
  v42 = 0x8000000000000000;
  if (v41 == 0x8000000000000000)
  {
    os_unfair_lock_lock(v21);
    if (*v31 == 0x8000000000000000)
      goto LABEL_43;
    goto LABEL_42;
  }
  if (v41 < 0)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (!v41)
  {
LABEL_44:
    (*(void (**)(char *, uint64_t))(v34 + 8))(v46, v33);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v49, v32);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
    return;
  }
  os_unfair_lock_lock(v21);
  v43 = *v31;
  if (*v31 == 0x8000000000000000)
  {
LABEL_43:
    os_unfair_lock_unlock(v21);
    goto LABEL_44;
  }
  if (((v43 | v41) & 0x8000000000000000) != 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v42 = v43 + v41;
  if (__OFADD__(v43, v41))
  {
    v42 = 0x8000000000000000;
LABEL_42:
    *v31 = v42;
    goto LABEL_43;
  }
  if ((v42 & 0x8000000000000000) == 0)
    goto LABEL_42;
LABEL_53:
  __break(1u);
}

uint64_t type metadata accessor for PublishedSubject.Conduit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PublishedSubject.Conduit);
}

Swift::Void __swiftcall PassthroughSubject.Conduit.request(_:)(Combine::Subscribers::Demand a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  os_unfair_lock_s *v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 176);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v15 - v7;
  if (a1.rawValue != 0x8000000000000000)
  {
    if ((a1.rawValue & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (a1.rawValue)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_4:
  v9 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(v3 + 216));
  os_unfair_lock_lock(v9);
  v10 = (char *)v1 + *(_QWORD *)(*v1 + 200);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v10, v5);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v8, 1, v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v11 == 1)
  {
    os_unfair_lock_unlock(v9);
    return;
  }
  v12 = *(_QWORD *)(*v1 + 208);
  v13 = *(_QWORD *)((char *)v1 + v12);
  v14 = 0x8000000000000000;
  if (v13 == 0x8000000000000000)
    goto LABEL_14;
  if (a1.rawValue == 0x8000000000000000)
    goto LABEL_13;
  if (((v13 | a1.rawValue) & 0x8000000000000000) != 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v14 = v13 + a1.rawValue;
  if (!__OFADD__(v13, a1.rawValue))
  {
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_13;
LABEL_20:
    __break(1u);
    return;
  }
  v14 = 0x8000000000000000;
LABEL_13:
  *(_QWORD *)((char *)v1 + v12) = v14;
LABEL_14:
  os_unfair_lock_unlock(v9);
  if (v1[2])
  {
    swift_retain();
    PassthroughSubject.acknowledgeDownstreamDemand()();
    swift_release();
  }
}

Swift::Void __swiftcall PassthroughSubject.acknowledgeDownstreamDemand()()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  v2 = *(_QWORD *)(*v0 + 144);
  if (*((_BYTE *)v0 + v2) == 1)
  {
    os_unfair_lock_unlock(v1);
  }
  else
  {
    *((_BYTE *)v0 + v2) = 1;
    v3 = *(_QWORD *)((char *)v0 + *(_QWORD *)(*v0 + 136));
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v1);
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v5 = v3 + 32;
      do
      {
        outlined init with copy of Subscription(v5, (uint64_t)v8);
        v6 = v9;
        v7 = v10;
        __swift_project_boxed_opaque_existential_1(v8, v9);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 24))(0x8000000000000000, v6, v7);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
        v5 += 40;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance SubjectSubscriber<A>(uint64_t a1)
{
  SubjectSubscriber.receive(_:)(a1);
  return 0;
}

uint64_t SubjectSubscriber.receive(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD v7[5];

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  if (MEMORY[0x18D77AE58](v1 + 3))
  {
    swift_beginAccess();
    outlined init with copy of Subscription?((uint64_t)(v1 + 4), (uint64_t)v7);
    v5 = v7[3];
    outlined destroy of Subscription?((uint64_t)v7);
    os_unfair_lock_unlock(v4);
    if (v5)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 88) + 16))(a1, *(_QWORD *)(v3 + 80));
    swift_unknownObjectRelease();
  }
  else
  {
    os_unfair_lock_unlock(v4);
  }
  return 0;
}

void storeEnumTagSinglePayload for Publishers.MapKeyPath.Inner(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B5408E8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B54095CLL);
}

void sub_18B5408F0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B5408F8);
  JUMPOUT(0x18B54095CLL);
}

void sub_18B540938()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B54095CLL);
}

void sub_18B540940()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B54095CLL);
}

uint64_t sub_18B540948(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B54095CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B540958);
    JUMPOUT(0x18B540954);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t Publishers.MapError.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 48) + 48))(a1, *(_QWORD *)(a2 + 32));
}

uint64_t partial apply for closure #1 in Publisher.flatMap<A>(maxPublishers:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Publisher.flatMap<A>(maxPublishers:_:)(a1, *(_QWORD *)(v2 + 24), a2);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance AsyncThrowingPublisher<A>.Iterator.Inner(uint64_t a1)
{
  AsyncThrowingPublisher.Iterator.Inner.receive(_:)(a1);
  return 0;
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>()
{
  Publishers.SwitchToLatest.Outer.receive(_:)();
}

void Publishers.SwitchToLatest.Outer.receive(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v1 = v0;
  v2 = *(_QWORD *)v0;
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v3));
  v4 = *(_QWORD *)v0;
  if ((*(_BYTE *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 184)) & 1) != 0 || *(_BYTE *)(v0 + *(_QWORD *)(v4 + 192)) == 1)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v3));
  }
  else
  {
    v5 = v0 + *(_QWORD *)(v4 + 144);
    swift_beginAccess();
    outlined init with copy of Subscription?(v5, (uint64_t)&v17);
    if (*((_QWORD *)&v18 + 1))
    {
      outlined init with take of Subscription(&v17, (uint64_t)&v11);
      v19 = 0;
      v17 = 0u;
      v18 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v17, v5);
      swift_endAccess();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
      v6 = v13;
      __swift_project_boxed_opaque_existential_1(&v11, v13);
      (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8) + 8))(v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
    }
    else
    {
      outlined destroy of Subscription?((uint64_t)&v17);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    }
    v7 = *(_QWORD *)(*(_QWORD *)v1 + 160);
    v8 = *(_QWORD *)(v1 + v7);
    if (!__OFADD__(v8, 1))
    {
      *(_QWORD *)(v1 + v7) = v8 + 1;
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
      *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152)) = v8;
      *(_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 208)) = 1;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
      swift_retain();
      Publishers._Merged.Side.init(index:merger:)(v8, v1, &v17);
      v15 = v17;
      v16 = v18;
      v9 = *(_QWORD *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 120);
      v11 = *(_OWORD *)(v2 + 80);
      v12 = v9;
      v13 = *(_OWORD *)(v2 + 104);
      v14 = v10;
      type metadata accessor for Publishers.SwitchToLatest.Outer.Side();
    }
    __break(1u);
  }
}

void type metadata accessor for Publishers.SwitchToLatest.Outer.Side()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.DropWhile<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.DropWhile.Inner.receive(_:)(a1);
}

uint64_t storeEnumTagSinglePayload for PublishedSubscriber(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

uint64_t partial apply for closure #1 in Publishers.Map.map<A>(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Publishers.Map.map<A>(_:)(a1, *(void (**)(char *))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t closure #1 in Publishers.Map.map<A>(_:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t);
  uint64_t v15;

  v9 = *(_QWORD *)(a7 - 8);
  v10 = MEMORY[0x1E0C80A78]();
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13(v10);
  a2(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a7);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.CollectByTime<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.CollectByTime.Inner.receive(_:)(a1);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Last<A>()
{
  Publishers.Last.receive<A>(subscriber:)();
}

uint64_t destroy for Just(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

void Publishers.Last.receive<A>(subscriber:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0);
  type metadata accessor for Publishers.Last.Inner();
}

uint64_t sub_18B540DF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v6, 1, 1, v4);
  swift_allocObject();
  v10 = specialized Publishers.Last.Inner.init(downstream:initial:reduce:)(v1, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v5);
  *(_QWORD *)(v8 - 112) = v10;
  v11 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for ReduceProducer<A, B, C, D, E>, a1);
  Publisher.subscribe<A>(_:)(v8 - 112, v3, a1, v2, v11);
  return swift_release();
}

void type metadata accessor for Publishers.Last.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Concatenate<A, B>.Inner<A1>.SuffixSubscriber(uint64_t a1)
{
  return Publishers.Concatenate.Inner.SuffixSubscriber.receive(_:)(a1);
}

uint64_t Publishers.Concatenate.Inner.SuffixSubscriber.receive(_:)(uint64_t a1)
{
  return Publishers.Concatenate.Inner.suffixReceive(_:)(a1);
}

uint64_t Publishers.Concatenate.Inner.suffixReceive(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[48];

  v3 = *v1;
  v4 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 168));
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v7);
  LODWORD(v5) = v7[40];
  outlined destroy of SubscriptionStatus((uint64_t)v7);
  os_unfair_lock_unlock(v4);
  result = 0;
  if (!(_DWORD)v5)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 120) + 48))(a1, *(_QWORD *)(v3 + 96));
  return result;
}

uint64_t destroy for Publishers.Throttle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = (v5 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v9, AssociatedTypeWitness);
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))((v9 + *(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80), v6);
}

uint64_t partial apply for closure #1 in Publishers.CompactMap.compactMap<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in Publishers.CompactMap.compactMap<A>(_:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in Publishers.CompactMap.compactMap<A>(_:));
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.DropWhile<A>.Inner<A1>(_QWORD *a1)
{
  return Publishers.DropWhile.Inner.receive(subscription:)(a1);
}

void protocol witness for Subscriber.receive(subscription:) in conformance AsyncThrowingPublisher<A>.Iterator.Inner(_QWORD *a1)
{
  AsyncThrowingPublisher.Iterator.Inner.receive(subscription:)(a1);
}

void AsyncThrowingPublisher.Iterator.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  char v17;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  v6 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(&v14, v1 + 4, v6);
  if (v17 == 2
    && (v8 = vorrq_s8(v15, v16),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)) | v14)))
  {
    (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(&v14, v6);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v14);
    v17 = 0;
    swift_beginAccess();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 40))(v1 + 4, &v14, v6);
    swift_endAccess();
    v11 = v1[10];
    v1[10] = 0;
    os_unfair_lock_unlock(v4);
    if (v11)
    {
      v12 = a1[3];
      v13 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v11, v12, v13);
    }
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(&v14, v6);
    os_unfair_lock_unlock(v4);
    v10 = a1[3];
    v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 8) + 8))(v10);
  }
}

void protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Retry<A>.Inner<A1>()
{
  Publishers.Retry.Inner.receive(subscription:)();
}

uint64_t AnyCancellable.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v5;

  v5 = (_DWORD *)swift_slowAlloc();
  *v5 = 0;
  *(_QWORD *)(v2 + 64) = v5;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  *(_BYTE *)(v2 + 56) = 0;
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t CurrentValueSubject.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  CurrentValueSubject.init(_:)(a1);
  return v2;
}

uint64_t Subject<>.send()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 16))(a1, a1, a2);
}

uint64_t Just.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t assignWithTake for FilterProducer.State(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t type metadata accessor for Just(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Just);
}

uint64_t type metadata completion function for AnySubscriberBase()
{
  return swift_initClassMetadata2();
}

uint64_t Publisher.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.Filter, a5);
}

uint64_t type metadata completion function for Published(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for Published.Storage(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Published.Storage()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Subscribers.Sink<A, B>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 96);
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.SubscribeOn<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t Publishers.Catch.Inner.__deallocating_deinit()
{
  return Publishers.Catch.Inner.__deallocating_deinit((uint64_t (*)(_QWORD, _OWORD *))type metadata accessor for Publishers.Catch.Inner.State);
}

uint64_t type metadata accessor for Publishers.First(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.First);
}

uint64_t type metadata completion function for Subscribers.Sink()
{
  return swift_initClassMetadata2();
}

uint64_t Empty.init(completeImmediately:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Publisher.catch<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, _QWORD *)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t (*v22)(_QWORD, _QWORD *);
  _QWORD v23[4];

  v22 = a7;
  v16 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v16 + 16))(v18, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a8, v18, a3);
  v23[0] = a3;
  v23[1] = a4;
  v23[2] = a5;
  v23[3] = a6;
  v19 = (_QWORD *)(a8 + *(int *)(v22(0, v23) + 52));
  *v19 = a1;
  v19[1] = a2;
  return swift_retain();
}

void type metadata accessor for Publishers.Catch()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publisher.first()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t initializeWithCopy for Publishers.Buffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v12 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v11 = *(_OWORD *)v12;
  }
  else
  {
    v13 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *(_QWORD *)(v11 + 8) = v13;
    swift_retain();
  }
  return a1;
}

void Publisher.merge<A>(with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v13);
  v19 = (char *)&v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a6, v19, a2);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = v21;
  type metadata accessor for Publishers.Merge();
}

uint64_t sub_18B541858(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void Publishers.Merge.init(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for Publishers.Merge();
}

uint64_t sub_18B5418E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void type metadata accessor for Publishers.Merge()
{
  JUMPOUT(0x18D77AC60);
}

void Publisher.append<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v13);
  v19 = (char *)&v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a6, v19, a2);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = v21;
  type metadata accessor for Publishers.Concatenate();
}

uint64_t sub_18B541A0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

uint64_t Publisher.prepend(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = a1;
  swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Array();
  v8 = MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF38], v7);
  return a4(&v10, a2, v7, a3, v8);
}

void Publisher.prepend<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[12];

  v6[7] = a3;
  v6[3] = a1;
  v6[5] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6[4] = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[8] = v4;
  v6[9] = MEMORY[0x1E0DEDCE8];
  v6[10] = v5;
  v6[11] = MEMORY[0x1E0DEDD18];
  type metadata accessor for Publishers.Sequence();
}

void sub_18B541B74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  *(_QWORD *)(v4 - 168) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v4 - 160) = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v4 - 112) = v3;
  *(_QWORD *)(v4 - 104) = AssociatedTypeWitness;
  *(_QWORD *)(v4 - 96) = v1;
  *(_QWORD *)(v4 - 88) = AssociatedConformanceWitness;
  type metadata accessor for Publishers.Sequence();
}

void sub_18B541C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v15 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&a9 - v16;
  Sequence.publisher.getter(v10, v12);
  Publishers.Sequence.setFailureType<A>(to:)(v11, (uint64_t)v17);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 168) + 8))(v12, v11);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v13 - 136) + 16))(*(_QWORD *)(v13 - 144), *(_QWORD *)(v13 - 128), v9);
  v18 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Sequence<A, B>, a1);
  (*(void (**)(_QWORD, char *, uint64_t))(v15 + 32))(*(_QWORD *)(v13 - 120), v17, a1);
  *(_QWORD *)(v13 - 112) = a1;
  *(_QWORD *)(v13 - 104) = v9;
  v19 = *(_QWORD *)(v13 - 160);
  *(_QWORD *)(v13 - 96) = v18;
  *(_QWORD *)(v13 - 88) = v19;
  type metadata accessor for Publishers.Concatenate();
}

uint64_t sub_18B541CD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2 + *(int *)(a1 + 52), v4, v1);
}

void type metadata accessor for Publishers.Sequence()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Sequence.publisher.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

void Publishers.Concatenate.init(prefix:suffix:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for Publishers.Concatenate();
}

uint64_t sub_18B541DEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void type metadata accessor for Publishers.Concatenate()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.Sequence.setFailureType<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78]();
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
}

void Publishers.MapError.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.MapError.Inner();
}

void sub_18B541F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  *(_QWORD *)(v12 - 128) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&a9 - v13;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v11, *(_QWORD *)(v12 - 144), v10);
  swift_retain();
  Publishers.MapError.Inner.init(downstream:map:)(v11, v10, (uint64_t)v14);
}

uint64_t sub_18B541FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.MapError<A, B>.Inner<A1>, v3);
  Publisher.subscribe<A>(_:)(v2, v0, v3, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 128) + 8))(v2, v3);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Deferred<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Deferred.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Deferred.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (**v4)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*v4)(v11);
  Publisher.subscribe<A>(_:)(a1, v9, a3, *(_QWORD *)(a2 + 24), a4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MergeMany<A>(uint64_t a1)
{
  Publishers.MergeMany.receive<A>(subscriber:)(a1);
}

void Publishers.MapError.Inner.init(downstream:map:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.MapError.Inner();
}

void sub_18B542150(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;

  v4 = (_QWORD *)(v1 + *(int *)(a1 + 60));
  *v4 = v3;
  v4[1] = v2;
  v5 = *(int *)(a1 + 64);
  if (one-time initialization token for lock != -1)
    swift_once();
  v6 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v7 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v6);
    *(_QWORD *)(v1 + v5) = v7;
  }
}

void type metadata accessor for Publishers.MapError.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void Publisher.receive<A>(on:options:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = v6;
  v24 = a6;
  v25 = a5;
  v22 = a1;
  v23 = a2;
  swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(a4 - 8);
  v16 = MEMORY[0x1E0C80A78](v12);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, v7, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v22, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v23, v10);
  Publishers.ReceiveOn.init(upstream:scheduler:options:)((uint64_t)v20, a3, v24);
}

void Publishers.ReceiveOn.init(upstream:scheduler:options:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.ReceiveOn();
}

uint64_t sub_18B5423AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v4 + *(int *)(a1 + 52), v3, v2);
  v6 = v4 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v1, v7);
}

void type metadata accessor for Publishers.ReceiveOn()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t initializeWithCopy for Publishers.SwitchToLatest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 16))();
  return a1;
}

uint64_t initializeWithCopy for Publishers.ReplaceEmpty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v5 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v5);
  return a1;
}

void Publisher<>.flatMap<A>(maxPublishers:_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Publishers.SetFailureType();
}

void sub_18B542598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  MEMORY[0x1E0C80A78](a1);
  Publisher<>.setFailureType<A>(to:)(v11, (uint64_t)&a9 - v14);
  v15 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.SetFailureType<A, B>, a1);
  Publisher.flatMap<A, B>(maxPublishers:_:)(*(_QWORD *)(v12 - 136), *(_QWORD *)(v12 - 128), a1, v10, v15, v9, *(_QWORD *)(v12 - 144));
}

uint64_t sub_18B542610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t closure #1 in Publisher.flatMap<A>(maxPublishers:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t);
  uint64_t v11;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  Publisher<>.setFailureType<A>(to:)(a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a2);
}

uint64_t Publisher<>.setFailureType<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78]();
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a1);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, a1);
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

void Publisher.flatMap<A>(maxPublishers:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;

  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  v13[5] = a7;
  v13[6] = a2;
  v13[7] = a3;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Publishers.SetFailureType();
}

void sub_18B542890(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.SetFailureType<A, B>, a1);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v1, (uint64_t)partial apply for closure #1 in Publisher.flatMap<A>(maxPublishers:_:), v3, a1, v2, v6, v4);
}

uint64_t sub_18B5428D0()
{
  swift_retain();
  return swift_release();
}

void type metadata accessor for Publishers.SetFailureType()
{
  JUMPOUT(0x18D77AC60);
}

void Publisher<>.flatMap<A>(maxPublishers:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[6];

  v17[1] = a2;
  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v7, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a7, v15, a3);
  v17[2] = a4;
  v17[3] = a3;
  v17[4] = a6;
  v17[5] = a5;
  type metadata accessor for Publishers.FlatMap();
}

uint64_t sub_18B5429B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v3 + *(int *)(a1 + 52)) = v2;
  v5 = (_QWORD *)(v3 + *(int *)(a1 + 56));
  *v5 = *(_QWORD *)(v4 - 120);
  v5[1] = v1;
  return swift_retain();
}

void Publisher.flatMap<A, B>(maxPublishers:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[6];

  v17[1] = a2;
  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v7, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a7, v15, a3);
  v17[2] = a4;
  v17[3] = a3;
  v17[4] = a6;
  v17[5] = a5;
  type metadata accessor for Publishers.FlatMap();
}

uint64_t sub_18B542A9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v3 + *(int *)(a1 + 52)) = v2;
  v5 = (_QWORD *)(v3 + *(int *)(a1 + 56));
  *v5 = *(_QWORD *)(v4 - 120);
  v5[1] = v1;
  return swift_retain();
}

void type metadata accessor for Publishers.FlatMap()
{
  JUMPOUT(0x18D77AC60);
}

void *initializeWithCopy for Optional.Publisher(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t initializeWithCopy for Publishers.CombineLatest3(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 16))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t initializeWithCopy for Publishers.Retry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t Publishers.Multicast.__deallocating_deinit()
{
  Publishers.Multicast.deinit();
  return swift_deallocClassInstance();
}

uint64_t *Publishers.Multicast.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 128)), -1, -1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112));
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t destroy for Publishers.CollectByTime(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = (*(_DWORD *)(v10 + 80) | v8) & 0xF8 | 7u;
  v13 = (v5 + v12) & ~v12;
  v14 = *(_QWORD *)(v7 + 64) + v11;
  v15 = (v14 & ~v11) + *(_QWORD *)(v10 + 64);
  if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v15)
    v16 = (v14 & ~v11) + *(_QWORD *)(v10 + 64);
  else
    v16 = ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v6);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))((v14 + v13) & ~v11, AssociatedTypeWitness);
  v17 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (v16 + v13 + *(unsigned __int8 *)(v18 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v18 + 48))(v19, 1, v17);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v18 + 8))(v19, v17);
  return result;
}

uint64_t destroy for Publishers.MeasureInterval(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t PublisherBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 120) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
  return swift_deallocClassInstance();
}

uint64_t destroy for Publishers.DropWhile(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t destroy for Publishers.SubscribeOn(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v6 = (*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, _QWORD))(v5 + 8))(v6, *(_QWORD *)(a2 + 24));
  v7 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = (v6 + v7 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v9 + 8))(v10, AssociatedTypeWitness);
  return result;
}

uint64_t destroy for Publishers.HandleEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  result = (*(uint64_t (**)(void))(v3 + 8))();
  v5 = (_QWORD *)((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v5 >= 0xFFFFFFFFuLL)
    result = swift_release();
  v6 = (_QWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v6 >= 0xFFFFFFFFuLL)
    result = swift_release();
  v7 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v7 >= 0xFFFFFFFFuLL)
    result = swift_release();
  v8 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v8 >= 0xFFFFFFFFuLL)
    result = swift_release();
  if (*(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

uint64_t destroy for Publishers.FlatMap(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
  return swift_release();
}

uint64_t destroy for Result.Publisher(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_18B543200 + 4 * byte_18B5F999D[v7]))();
  }
}

uint64_t destroy for Publishers.MapKeyPath(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t destroy for Publishers.IgnoreOutput.Inner(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
}

uint64_t destroy for Publishers.Debounce(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = (v5 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v9, AssociatedTypeWitness);
  v10 = *(_QWORD *)(v6 - 8);
  v11 = (v9 + *(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v11, v6);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (v11 + v12 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v14 + 8))(v15, v13);
  return result;
}

uint64_t destroy for Publishers.CombineLatest3(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2[4] - 8) + 8))((v7
                                                                                       + *(_QWORD *)(v6 + 64)
                                                                                       + *(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80));
}

uint64_t destroy for Publishers.ReplaceEmpty(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))((*(_QWORD *)(v5 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80), v3);
}

uint64_t destroy for Optional.Publisher(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

uint64_t destroy for Publishers.Buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  result = (*(uint64_t (**)(void))(v3 + 8))();
  if (*(_QWORD *)((a1 + *(_QWORD *)(v3 + 64) + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

uint64_t destroy for Publishers.Timeout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = (v5 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v9, AssociatedTypeWitness);
  v10 = *(_QWORD *)(v6 - 8);
  v11 = (v9 + *(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v11, v6);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (v11 + v12 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13);
  if (!(_DWORD)result)
    result = (*(uint64_t (**)(unint64_t, uint64_t))(v14 + 8))(v15, v13);
  v17 = v15 + *(_QWORD *)(v14 + 64);
  if (!*(_DWORD *)(v14 + 84))
    ++v17;
  if (*(_QWORD *)((v17 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

uint64_t destroy for Publishers.Reduce(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v4 + 64)
                                                                                            + a1
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
  return swift_release();
}

uint64_t destroy for Publishers.CombineLatest4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(a2[4] - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v10);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2[5] - 8) + 8))((v10
                                                                                       + *(_QWORD *)(v9 + 64)
                                                                                       + *(unsigned __int8 *)(*(_QWORD *)(a2[5] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[5] - 8) + 80));
}

uint64_t type metadata completion function for PublisherBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.SetFailureType<A, B>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 40);
}

uint64_t Subscribers.Sink.__deallocating_deinit()
{
  Subscribers.Sink.deinit();
  return swift_deallocClassInstance();
}

uint64_t Subscribers.Sink.deinit()
{
  uint64_t v0;

  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + 96), -1, -1);
  swift_release();
  swift_release();
  outlined destroy of SubscriptionStatus(v0 + 48);
  return v0;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Just<A>()
{
  return MEMORY[0x1E0DEDD18];
}

void base witness table accessor for Equatable in ConduitBase<A, B>()
{
  JUMPOUT(0x18D77ACE4);
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.DropWhile<A>()
{
  return swift_getAssociatedConformanceWitness();
}

void static Published.subscript.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 120);
  v3 = *(void **)(*(_QWORD *)a1 + 128);
  if ((a2 & 1) != 0)
  {
    v5 = v2[13];
    v6 = v2[14];
    v8 = v2[11];
    v7 = v2[12];
    v9 = v2[5];
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v6 + 16))(v2[15], v2[16], v5);
    swift_retain();
    swift_retain();
    v10 = swift_unknownObjectRetain();
    v2[2] = v9;
    v2[3] = v7;
    v2[4] = v4;
    specialized static Published.withMutation<A>(of:keyPath:storage:apply:)(v10, v8, (uint64_t (*)(uint64_t))partial apply for closure #1 in static Published.subscript.setter);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    v11 = *(void (**)(void *, uint64_t))(v6 + 8);
    v11(v4, v5);
    v11(v3, v5);
  }
  else
  {
    v12 = v2[13];
    v13 = v2[14];
    v15 = v2[11];
    v14 = v2[12];
    v16 = v2[5];
    swift_retain();
    swift_retain();
    v17 = swift_unknownObjectRetain();
    v2[8] = v16;
    v2[9] = v14;
    v2[10] = v3;
    specialized static Published.withMutation<A>(of:keyPath:storage:apply:)(v17, v15, (uint64_t (*)(uint64_t))partial apply for closure #1 in static Published.subscript.setter);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    (*(void (**)(void *, uint64_t))(v13 + 8))(v3, v12);
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t static Published.subscript.setter(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  v4 = *a3;
  specialized static Published.subscript.setter(a1, a2, (uint64_t)a3);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DED210] + v4 + 8) - 8) + 8))(a1);
}

_QWORD *assignWithTake for Published.Storage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t PublishedSubject.send(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[5];

  v2 = v1;
  v4 = *v1;
  v5 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v5);
  v6 = *(_QWORD *)((char *)v1 + *(_QWORD *)(*v1 + 128));
  swift_beginAccess();
  v7 = v2[3];
  v8 = *((_BYTE *)v2 + 32);
  swift_retain();
  outlined copy of ConduitList<A, Never><A>(v7, v8);
  os_unfair_lock_unlock(v5);
  if (v6)
  {
    swift_retain();
    ObservableObjectPublisher.send()();
    v9 = swift_release();
  }
  MEMORY[0x1E0C80A78](v9);
  v13[2] = a1;
  v10 = *(_QWORD *)(v4 + 80);
  ConduitList.forEach(_:)((uint64_t)partial apply for closure #1 in PublishedSubject.send(_:), (uint64_t)v13, v7, v8);
  os_unfair_lock_lock(v5);
  v11 = (char *)v2 + *(_QWORD *)(*v2 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v11, a1, v10);
  swift_endAccess();
  os_unfair_lock_unlock(v5);
  outlined consume of ConduitList<A, Never><A>(v7, v8);
  return swift_release();
}

uint64_t outlined consume of ConduitList<A, Never><A>(uint64_t a1, char a2)
{
  uint64_t result;

  if (a2 == 1)
    return swift_bridgeObjectRelease();
  if (!a2)
    return swift_release();
  return result;
}

Swift::Void __swiftcall ObservableObjectPublisher.send()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock);
  os_unfair_lock_lock(v1);
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1);
  if ((v3 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for ObservableObjectPublisher.Conduit();
    lazy protocol witness table accessor for type ObservableObjectPublisher.Conduit and conformance ObservableObjectPublisher.Conduit(&lazy protocol witness table cache variable for type ObservableObjectPublisher.Conduit and conformance ObservableObjectPublisher.Conduit, (uint64_t)&protocol conformance descriptor for ObservableObjectPublisher.Conduit);
    Set.Iterator.init(_cocoa:)();
    v3 = v21;
    v4 = v22;
    v5 = v23;
    v6 = v24;
    v7 = v25;
  }
  else
  {
    v6 = 0;
    v8 = -1 << *(_BYTE *)(v3 + 32);
    v4 = v3 + 56;
    v5 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(v3 + 56);
  }
  v11 = (unint64_t)(v5 + 64) >> 6;
  if (v3 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v7)
    {
      v12 = (v7 - 1) & v7;
      v13 = __clz(__rbit64(v7)) | (v6 << 6);
      v14 = v6;
      goto LABEL_27;
    }
    v17 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v17 >= v11)
      goto LABEL_30;
    v18 = *(_QWORD *)(v4 + 8 * v17);
    v14 = v6 + 1;
    if (!v18)
    {
      v14 = v6 + 2;
      if (v6 + 2 >= v11)
        goto LABEL_30;
      v18 = *(_QWORD *)(v4 + 8 * v14);
      if (!v18)
      {
        v14 = v6 + 3;
        if (v6 + 3 >= v11)
          goto LABEL_30;
        v18 = *(_QWORD *)(v4 + 8 * v14);
        if (!v18)
        {
          v14 = v6 + 4;
          if (v6 + 4 >= v11)
            goto LABEL_30;
          v18 = *(_QWORD *)(v4 + 8 * v14);
          if (!v18)
          {
            v19 = v6 + 5;
            while (v11 != v19)
            {
              v18 = *(_QWORD *)(v4 + 8 * v19++);
              if (v18)
              {
                v14 = v19 - 1;
                goto LABEL_26;
              }
            }
LABEL_30:
            outlined consume of Set<ObservableObjectPublisher.Conduit>.Iterator._Variant();
            return;
          }
        }
      }
    }
LABEL_26:
    v12 = (v18 - 1) & v18;
    v13 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_27:
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v13);
    v16 = swift_retain();
    if (!v15)
      goto LABEL_30;
    while (1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 80))(v16);
      swift_release();
      v6 = v14;
      v7 = v12;
      if ((v3 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ObservableObjectPublisher.Conduit();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v15 = v20;
        v16 = swift_unknownObjectRelease();
        v14 = v6;
        v12 = v7;
        if (v20)
          continue;
      }
      goto LABEL_30;
    }
  }
  __break(1u);
}

void ObservableObjectPublisher.Inner.send()()
{
  uint64_t *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *(os_unfair_lock_s **)((char *)v0 + *(_QWORD *)(*v0 + 152));
  os_unfair_lock_lock(v2);
  if (*((_BYTE *)v0 + *(_QWORD *)(*v0 + 160)) == 1)
  {
    v5 = v1 + 112;
    v4 = *(_QWORD *)(v1 + 112);
    v3 = *(_QWORD *)(v5 + 8);
    os_unfair_lock_unlock(v2);
    os_unfair_recursive_lock_lock_with_options();
    Subscriber<>.receive()(v4, v3);
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    os_unfair_lock_unlock(v2);
  }
}

uint64_t static Subscribers.Demand.none.getter()
{
  return 0;
}

uint64_t Subscriber<>.receive()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 48))(a1, a1, a2);
}

uint64_t outlined copy of ConduitList<A, Never><A>(uint64_t a1, char a2)
{
  uint64_t result;

  if (a2 == 1)
    return swift_bridgeObjectRetain();
  if (!a2)
    return swift_retain();
  return result;
}

void Future.promise(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_unfair_lock_t v46;

  v42 = a1;
  v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 88) - 8);
  v2 = MEMORY[0x1E0C80A78](a1);
  v39 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(_QWORD *)(*(_QWORD *)(v4 + 80) - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 96);
  v44 = v9;
  v45 = v10;
  v43 = v8;
  v11 = type metadata accessor for Result();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v41 = (char *)&v36 - v13;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v36 - v19;
  v46 = *(os_unfair_lock_t *)(v1 + 16);
  os_unfair_lock_lock(v46);
  v21 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 120);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v20, v21, v14);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v20, 1, v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  if (v22 == 1)
  {
    v37 = v6;
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v24 = v42;
    v23(v18, v42, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 40))(v21, v18, v14);
    swift_endAccess();
    swift_beginAccess();
    v25 = *(_QWORD *)(v1 + 24);
    v26 = *(_BYTE *)(v1 + 32);
    outlined copy of ConduitList<A, Never><A>(v25, v26);
    v28 = v44;
    v27 = v45;
    type metadata accessor for ConduitList(0, v44, v45, v43);
    ConduitList.removeAll()();
    os_unfair_lock_unlock(v46);
    v29 = v41;
    v23(v41, v24, v11);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v31 = v39;
      v30 = v40;
      v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 32))(v39, v29, v27);
      MEMORY[0x1E0C80A78](v32);
      *(&v36 - 2) = (uint64_t)v31;
      ConduitList.forEach(_:)((uint64_t)partial apply for closure #2 in Future.promise(_:), (uint64_t)(&v36 - 4), v25, v26);
      outlined consume of ConduitList<A, Never><A>(v25, v26);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v27);
    }
    else
    {
      v34 = v37;
      v33 = v38;
      v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v38 + 32))(v37, v29, v28);
      MEMORY[0x1E0C80A78](v35);
      *(&v36 - 2) = (uint64_t)v34;
      ConduitList.forEach(_:)((uint64_t)partial apply for closure #1 in PublishedSubject.send(_:), (uint64_t)(&v36 - 4), v25, v26);
      outlined consume of ConduitList<A, Never><A>(v25, v26);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v28);
    }
  }
  else
  {
    os_unfair_lock_unlock(v46);
  }
}

void CurrentValueSubject.send(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  if (*((_BYTE *)v1 + 24) == 1)
  {
    v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 128);
    swift_beginAccess();
    v6 = *(_QWORD *)v5;
    v7 = (uint64_t)v1 + *(_QWORD *)(*v1 + 136);
    LOBYTE(v5) = *(_BYTE *)(v5 + 8);
    swift_beginAccess();
    outlined copy of ConduitList<A, Never><A>(v6, v5);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 24))(v7, a1, *(_QWORD *)(v3 + 80));
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    MEMORY[0x1E0C80A78](v8);
    v9[2] = a1;
    ConduitList.forEach(_:)((uint64_t)partial apply for closure #1 in PublishedSubject.send(_:), (uint64_t)v9, v6, v5);
    outlined consume of ConduitList<A, Never><A>(v6, v5);
  }
  else
  {
    os_unfair_lock_unlock(v4);
  }
}

void PassthroughSubject.send(_:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  if (*(_BYTE *)(v1 + 24) == 1)
  {
    v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 128);
    swift_beginAccess();
    v5 = *(_QWORD *)v4;
    LOBYTE(v4) = *(_BYTE *)(v4 + 8);
    outlined copy of ConduitList<A, Never><A>(v5, v4);
    os_unfair_lock_unlock(v3);
    MEMORY[0x1E0C80A78](v6);
    v7[2] = a1;
    ConduitList.forEach(_:)((uint64_t)partial apply for closure #1 in PublishedSubject.send(_:), (uint64_t)v7, v5, v4);
    outlined consume of ConduitList<A, Never><A>(v5, v4);
  }
  else
  {
    os_unfair_lock_unlock(v3);
  }
}

uint64_t ConduitList.forEach(_:)(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (void (*)(uint64_t))result;
  if (a4)
  {
    if (a4 == 1)
    {
      MEMORY[0x1E0C80A78](result);
      v9 = type metadata accessor for ConduitBase(255, v6, v7, v8);
      MEMORY[0x18D77ACE4](&protocol conformance descriptor for ConduitBase<A, B>, v9);
      v10 = type metadata accessor for Set();
      MEMORY[0x18D77ACE4](MEMORY[0x1E0DEB3D0], v10);
      return Sequence.forEach(_:)();
    }
  }
  else
  {
    v11 = swift_retain();
    v5(v11);
    return outlined consume of ConduitList<A, Never><A>(a3, 0);
  }
  return result;
}

uint64_t partial apply for closure #1 in PublishedSubject.send(_:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1 + 104))(*(_QWORD *)(v1 + 16));
}

void CurrentValueSubject.Conduit.offer(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v1;
  v27 = a1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 176);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v26 - v8;
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(os_unfair_lock_s **)((char *)v2 + *(_QWORD *)(v3 + 216));
  os_unfair_lock_lock(v13);
  v14 = *v2;
  v15 = *(_QWORD *)(*v2 + 208);
  v16 = *(uint64_t *)((char *)v2 + v15);
  if (v16 != 0x8000000000000000)
  {
    if (v16 < 0)
    {
      __break(1u);
      goto LABEL_27;
    }
    if (!v16)
    {
LABEL_6:
      *((_BYTE *)v2 + *(_QWORD *)(v14 + 232)) = 0;
      os_unfair_lock_unlock(v13);
      return;
    }
  }
  v17 = *(_QWORD *)(v14 + 200);
  v28 = v10;
  v18 = (uint64_t)v2 + v17;
  swift_beginAccess();
  v19 = v18;
  v20 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v19, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v9, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v14 = *v2;
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v12, v9, v4);
  v21 = *(uint64_t *)((char *)v2 + v15);
  if (v21 != 0x8000000000000000)
  {
    if ((v21 & 0x8000000000000000) == 0)
    {
      if (v21)
      {
        *(uint64_t *)((char *)v2 + v15) = v21 - 1;
        goto LABEL_11;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_11:
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 232)) = 1;
  os_unfair_lock_unlock(v13);
  os_unfair_recursive_lock_lock_with_options();
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 184) + 48))(v27, v4);
  os_unfair_recursive_lock_unlock();
  if (v22 == 0x8000000000000000)
  {
    os_unfair_lock_lock(v13);
    v23 = 0x8000000000000000;
    if (*(uint64_t *)((char *)v2 + v15) == 0x8000000000000000)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v22 < 0)
    goto LABEL_29;
  if (v22)
  {
    os_unfair_lock_lock(v13);
    v24 = *(uint64_t *)((char *)v2 + v15);
    if (v24 == 0x8000000000000000)
    {
LABEL_23:
      os_unfair_lock_unlock(v13);
      goto LABEL_24;
    }
    if (((v24 | v22) & 0x8000000000000000) == 0)
    {
      v25 = __OFADD__(v24, v22);
      v23 = v24 + v22;
      if (v25)
      {
        v23 = 0x8000000000000000;
LABEL_22:
        *(uint64_t *)((char *)v2 + v15) = v23;
        goto LABEL_23;
      }
      if ((v23 & 0x8000000000000000) == 0)
        goto LABEL_22;
LABEL_31:
      __break(1u);
      return;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_24:
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v4);
}

void PassthroughSubject.Conduit.offer(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 176);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v25 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(os_unfair_lock_s **)((char *)v2 + *(_QWORD *)(v4 + 216));
  os_unfair_lock_lock(v14);
  v15 = *v2;
  v16 = *(_QWORD *)(*v2 + 208);
  v17 = *(uint64_t *)((char *)v2 + v16);
  if (v17 != 0x8000000000000000)
  {
    if (v17 < 0)
    {
      __break(1u);
      goto LABEL_27;
    }
    if (!v17)
    {
      os_unfair_lock_unlock(v14);
      return;
    }
  }
  v26 = a1;
  v27 = v16;
  v18 = (uint64_t)v2 + *(_QWORD *)(v15 + 200);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v18, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    os_unfair_lock_unlock(v14);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, v5);
  v19 = v27;
  v20 = *(uint64_t *)((char *)v2 + v27);
  if (v20 != 0x8000000000000000)
  {
    if ((v20 & 0x8000000000000000) == 0)
    {
      if (v20)
      {
        *(uint64_t *)((char *)v2 + v27) = v20 - 1;
        goto LABEL_10;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_10:
  os_unfair_lock_unlock(v14);
  os_unfair_recursive_lock_lock_with_options();
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 184) + 48))(v26, v5);
  os_unfair_recursive_lock_unlock();
  if (v21 == 0x8000000000000000)
  {
    os_unfair_lock_lock(v14);
    v22 = 0x8000000000000000;
    if (*(uint64_t *)((char *)v2 + v19) == 0x8000000000000000)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v21 < 0)
    goto LABEL_29;
  if (v21)
  {
    os_unfair_lock_lock(v14);
    v23 = *(uint64_t *)((char *)v2 + v19);
    if (v23 == 0x8000000000000000)
    {
LABEL_23:
      os_unfair_lock_unlock(v14);
      goto LABEL_24;
    }
    if (((v23 | v21) & 0x8000000000000000) == 0)
    {
      v24 = __OFADD__(v23, v21);
      v22 = v23 + v21;
      if (v24)
      {
        v22 = 0x8000000000000000;
LABEL_22:
        *(uint64_t *)((char *)v2 + v19) = v22;
        goto LABEL_23;
      }
      if ((v22 & 0x8000000000000000) == 0)
        goto LABEL_22;
LABEL_31:
      __break(1u);
      return;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_24:
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v5);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Multicast<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.Multicast.Inner.receive(_:)(a1);
}

uint64_t Publishers.Multicast.Inner.receive(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10[2];
  char v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v10);
  if (v11)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v10);
    os_unfair_lock_unlock(v4);
    return 0;
  }
  outlined init with take of Subscription(v10, (uint64_t)v12);
  os_unfair_lock_unlock(v4);
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 120) + 48))(a1, *(_QWORD *)(v3 + 96));
  v7 = result;
  if (result == 0x8000000000000000)
    goto LABEL_6;
  if ((result & 0x8000000000000000) == 0)
  {
    if (!result)
    {
LABEL_7:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      return 0;
    }
LABEL_6:
    v8 = v13;
    v9 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v7, v8, v9);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t Publishers.Autoconnect.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 40) + 48))(a1, *(_QWORD *)(a2 + 24));
}

uint64_t getEnumTagSinglePayload for Publishers._Merged.Side(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Scan<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.Scan.Inner.receive(_:)(a1);
}

uint64_t Publishers.Scan.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = a1;
  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v16 - v8;
  v10 = *(void (**)(char *, uint64_t))(v1 + v2[16]);
  v11 = v1 + v2[17];
  swift_beginAccess();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12(v7, v11, v3);
  v10(v7, v17);
  v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v7, v3);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v11, v9, v3);
  swift_endAccess();
  v12(v9, v11, v3);
  v14 = (*(uint64_t (**)(char *, _QWORD))(v2[14] + 48))(v9, v2[12]);
  v13(v9, v3);
  return v14;
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.HandleEvents<A>.Inner<A1>(uint64_t a1)
{
  Publishers.HandleEvents.Inner.receive(_:)(a1);
}

void Publishers.HandleEvents.Inner.receive(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  void (*v7)(uint64_t);

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[8];
  os_unfair_lock_lock(v4);
  v5 = (void (*)(uint64_t))v1[11];
  if (v5)
  {
    swift_retain();
    os_unfair_lock_unlock(v4);
    v5(a1);
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v5);
  }
  else
  {
    os_unfair_lock_unlock(v4);
  }
  v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 104) + 48))(a1, *(_QWORD *)(v3 + 88));
  os_unfair_lock_lock(v4);
  v7 = (void (*)(uint64_t))v1[17];
  if (!v7)
  {
LABEL_9:
    os_unfair_lock_unlock(v4);
    return;
  }
  if (v6 == 0x8000000000000000)
  {
LABEL_8:
    swift_retain();
    os_unfair_lock_unlock(v4);
    v7(v6);
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v7);
    return;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v6)
      goto LABEL_8;
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Debounce<A, B>.Inner<A1>(char *a1)
{
  return Publishers.Debounce.Inner.receive(_:)(a1);
}

uint64_t Publishers.Debounce.Inner.receive(_:)(char *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[3];
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t AssociatedConformanceWitness;
  char *v36;
  uint64_t v37;
  uint64_t AssociatedTypeWitness;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  os_unfair_lock_t v42;
  _QWORD v43[5];
  uint64_t v44;

  v2 = v1;
  v31 = a1;
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 112);
  v5 = *(_QWORD *)(*v1 + 88);
  swift_getAssociatedTypeWitness();
  v39 = v4;
  v41 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v36 = (char *)v30 - v6;
  v7 = swift_checkMetadataState();
  v32 = *(_QWORD **)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v30 - v11;
  v13 = v3[12];
  v34 = v3[15];
  v33 = v13;
  v14 = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v30 - v17;
  v42 = (os_unfair_lock_t)v2[2];
  os_unfair_lock_lock(v42);
  v19 = (uint64_t)v2 + *(_QWORD *)(*v2 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v19, (uint64_t)v43);
  LODWORD(v19) = v44;
  outlined destroy of SubscriptionStatus((uint64_t)v43);
  if (!(_DWORD)v19)
  {
    v20 = *(_QWORD *)(*v2 + 200);
    ++*(_QWORD *)((char *)v2 + v20);
    v40 = v12;
    v21 = v7;
    v22 = *(_QWORD *)(v14 - 8);
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v18, v31, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v14);
    v23 = (char *)v2 + *(_QWORD *)(*v2 + 192);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v23, v18, v15);
    swift_endAccess();
    v30[1] = *(_QWORD *)((char *)v2 + v20);
    v30[2] = (char *)v2 + *(_QWORD *)(*v2 + 160);
    v24 = v39;
    v25 = v41;
    (*(void (**)(uint64_t, uint64_t))(v39 + 40))(v41, v39);
    v31 = (char *)v2 + *(_QWORD *)(*v2 + 152);
    dispatch thunk of Strideable.advanced(by:)();
    v26 = (_QWORD *)v32[1];
    v30[0] = v21;
    v32 = v26;
    ((void (*)(char *, uint64_t))v26)(v10, v21);
    swift_beginAccess();
    swift_beginAccess();
    v27 = v3[10];
    v28 = v3[13];
    swift_bridgeObjectRetain();
    v43[0] = v27;
    v43[1] = v25;
    v43[2] = v33;
    v43[3] = v28;
    v43[4] = v24;
    v44 = v34;
    type metadata accessor for Publishers.Debounce.Inner.CancellerState();
  }
  os_unfair_lock_unlock(v42);
  return 0;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for Publishers.Debounce.Inner.CancellerState()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.Debounce.Inner.CancellerState.cancel()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 - 8);
  result = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v3 + 16))(&v10, v1, a1);
  if (v11 != 1)
  {
    if (v11)
    {
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, a1);
      outlined init with take of Subscription(&v10, (uint64_t)v7);
      *(_QWORD *)(v1 + 8) = 0;
      *(_QWORD *)(v1 + 16) = 0;
      *(_QWORD *)v1 = 0;
      *(_OWORD *)(v1 + 24) = xmmword_18B5F41F0;
      v5 = v8;
      v6 = v9;
      __swift_project_boxed_opaque_existential_1(v7, v8);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, a1);
      *(_QWORD *)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
      *(_QWORD *)(v1 + 16) = 0;
      *(_OWORD *)(v1 + 24) = xmmword_18B5F41F0;
    }
  }
  return result;
}

uint64_t destroy for FilterProducer.State(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for FilterProducer.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

void protocol witness for Cancellable.cancel() in conformance AnyCancellable()
{
  AnyCancellable.cancel()();
}

uint64_t AnyCancellable.__deallocating_deinit()
{
  uint64_t v0;

  AnyCancellable.cancel()();
  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + 64), -1, -1);
  outlined destroy of AnyCancellable.Storage(v0 + 16);
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  __int128 v12[2];
  char v13;

  v1 = *(os_unfair_lock_s **)(v0 + 64);
  os_unfair_lock_lock(v1);
  swift_beginAccess();
  outlined init with copy of AnyCancellable.Storage(v0 + 16, (uint64_t)v12);
  if (v13)
  {
    if (v13 == 1)
    {
      outlined init with take of Subscription(v12, (uint64_t)v9);
      v7 = 0;
      v5 = 0u;
      v6 = 0u;
      v8 = 2;
      swift_beginAccess();
      outlined assign with take of AnyCancellable.Storage((uint64_t)&v5, v0 + 16);
      swift_endAccess();
      os_unfair_lock_unlock(v1);
      v2 = v10;
      v3 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      os_unfair_lock_unlock(v1);
    }
  }
  else
  {
    v4 = v12[0];
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
    v8 = 2;
    swift_beginAccess();
    outlined assign with take of AnyCancellable.Storage((uint64_t)&v5, v0 + 16);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    ((void (*)(void))v4)();
    *(_OWORD *)(swift_allocObject() + 16) = v4;
    swift_release();
  }
}

uint64_t outlined init with copy of AnyCancellable.Storage(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyCancellable.Storage(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for AnyCancellable.Storage(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 40) = 0;
    swift_retain();
  }
  return a1;
}

uint64_t outlined assign with take of AnyCancellable.Storage(uint64_t a1, uint64_t a2)
{
  assignWithTake for AnyCancellable.Storage(a2, a1);
  return a2;
}

uint64_t assignWithTake for AnyCancellable.Storage(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (!v4)
    {
      swift_release();
    }
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t outlined destroy of AnyCancellable.Storage(uint64_t a1)
{
  destroy for AnyCancellable.Storage(a1);
  return a1;
}

uint64_t destroy for AnyCancellable.Storage(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)result + 2;
  if (v1 == 1)
    return __swift_destroy_boxed_opaque_existential_1(result);
  if (!v1)
    return swift_release();
  return result;
}

void protocol witness for Cancellable.cancel() in conformance SubjectSubscriber<A>()
{
  SubjectSubscriber.cancel()();
}

Swift::Void __swiftcall SubjectSubscriber.cancel()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v1);
  v2 = MEMORY[0x18D77AE58](v0 + 24);
  swift_unknownObjectRelease();
  if (v2)
  {
    swift_unknownObjectWeakAssign();
    v3 = v0 + 32;
    swift_beginAccess();
    outlined init with copy of Subscription?(v3, (uint64_t)&v6);
    if (*((_QWORD *)&v7 + 1))
    {
      outlined init with take of Subscription(&v6, (uint64_t)v9);
      v8 = 0;
      v6 = 0u;
      v7 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v6, v3);
      swift_endAccess();
      os_unfair_lock_unlock(v1);
      v4 = v10;
      v5 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of Subscription?((uint64_t)&v6);
      os_unfair_lock_unlock(v1);
    }
  }
  else
  {
    os_unfair_lock_unlock(v1);
  }
}

Swift::Void __swiftcall ConduitList.removeAll()()
{
  uint64_t v0;

  outlined consume of ConduitList<A, Never><A>(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
  *(_QWORD *)v0 = 0;
  *(_BYTE *)(v0 + 8) = 2;
}

void Future.Conduit.offer(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD v7[2];

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  swift_getAssociatedConformanceWitness();
  v4 = type metadata accessor for Result();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v7 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))((char *)v7 - v5, a1, v3);
  swift_storeEnumTagMultiPayload();
  Future.Conduit.fulfill(_:)((uint64_t)v6);
}

uint64_t sub_18B5460D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void protocol witness for Cancellable.cancel() in conformance Subscribers.Sink<A, B>()
{
  Subscribers.Sink.cancel()();
}

Swift::Void __swiftcall Subscribers.Sink.cancel()()
{
  _QWORD *v0;
  _QWORD *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  char v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v1 = (_QWORD *)*v0;
  v2 = (os_unfair_lock_s *)v0[12];
  os_unfair_lock_lock(v2);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v0 + 6), (uint64_t)&v18);
  if (v21)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v18);
    os_unfair_lock_unlock(v2);
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v18, (uint64_t)v22);
    v18 = 1;
    v19 = 0u;
    v20 = 0u;
    v21 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v18, (uint64_t)(v0 + 6));
    swift_endAccess();
    swift_beginAccess();
    v4 = v0[4];
    v3 = v0[5];
    swift_beginAccess();
    v6 = v0[2];
    v5 = v0[3];
    v7 = (_QWORD *)swift_allocObject();
    v8 = v1[10];
    v7[2] = v8;
    v9 = v1[11];
    v7[3] = v9;
    v10 = v1[12];
    v7[4] = v10;
    v7[5] = v4;
    v7[6] = v3;
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = v8;
    v11[3] = v9;
    v11[4] = v10;
    v11[5] = v6;
    v11[6] = v5;
    v18 = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ();
    *(_QWORD *)&v19 = v7;
    *((_QWORD *)&v19 + 1) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
    *(_QWORD *)&v20 = v11;
    type metadata accessor for Subscribers.Completion(255, v9, v10, v12);
    v13 = MEMORY[0x1E0DEE9C0] + 8;
    swift_getFunctionTypeMetadata1();
    swift_getFunctionTypeMetadata1();
    swift_retain();
    swift_retain();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v18, (uint64_t)partial apply for closure #1 in Subscribers.Sink.cancel(), (uint64_t)v0, TupleTypeMetadata2, MEMORY[0x1E0DEDCE8], v13, MEMORY[0x1E0DEDD18], v15);
    swift_release();
    swift_release();
    v16 = v23;
    v17 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 8) + 8))(v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
}

void protocol witness for Cancellable.cancel() in conformance Publishers.ReceiveOn<A, B>.Inner<A1>()
{
  Publishers.ReceiveOn.Inner.cancel()();
}

void Publishers.ReceiveOn.Inner.cancel()()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v5, (uint64_t)v9);
    v5 = 1;
    v6 = 0u;
    v7 = 0u;
    v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    v3 = v10;
    v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance AnySubscriberBase<A, B>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

Swift::Void __swiftcall PassthroughSubject.Conduit.cancel()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  os_unfair_lock_s *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE v15[24];

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 176);
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v9 = &v15[-v8];
  v10 = *(os_unfair_lock_s **)((char *)v0 + *(_QWORD *)(v1 + 216));
  os_unfair_lock_lock(v10);
  v11 = (char *)v0 + *(_QWORD *)(*v0 + 200);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v4 + 16))(v9, v11, v3);
  v12 = *(_QWORD *)(v2 - 8);
  v13 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v2);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  if (v13 == 1)
  {
    os_unfair_lock_unlock(v10);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v7, 1, 1, v2);
    swift_beginAccess();
    (*(void (**)(char *, _BYTE *, uint64_t))(v4 + 40))(v11, v7, v3);
    swift_endAccess();
    v14 = v0[2];
    v0[2] = 0;
    os_unfair_lock_unlock(v10);
    if (v14)
    {
      swift_retain();
      PassthroughSubject.disassociate(_:)((uint64_t)v0);
      swift_release_n();
    }
  }
}

void PassthroughSubject.disassociate(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  os_unfair_lock_s *v4;
  uint64_t *v5;

  v3 = *(uint64_t **)v1;
  v4 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v4);
  if (*(_BYTE *)(v1 + 24) == 1)
  {
    swift_beginAccess();
    v5 = (uint64_t *)type metadata accessor for ConduitList(0, v3[10], v3[11], v3[12]);
    ConduitList.remove(_:)(a1, v5);
    swift_endAccess();
  }
  os_unfair_lock_unlock(v4);
}

uint64_t partial apply for closure #2 in Publishers.Timeout.Inner.timeoutClock()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

Swift::Void __swiftcall PublishedSubject.Conduit.cancel()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  os_unfair_lock_s *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE v15[24];

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 168);
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v9 = &v15[-v8];
  v10 = *(os_unfair_lock_s **)((char *)v0 + *(_QWORD *)(v1 + 208));
  os_unfair_lock_lock(v10);
  v11 = (char *)v0 + *(_QWORD *)(*v0 + 192);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v4 + 16))(v9, v11, v3);
  v12 = *(_QWORD *)(v2 - 8);
  v13 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v2);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  if (v13 == 1)
  {
    os_unfair_lock_unlock(v10);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v7, 1, 1, v2);
    swift_beginAccess();
    (*(void (**)(char *, _BYTE *, uint64_t))(v4 + 40))(v11, v7, v3);
    swift_endAccess();
    v14 = v0[2];
    v0[2] = 0;
    os_unfair_lock_unlock(v10);
    if (v14)
    {
      swift_retain();
      PublishedSubject.disassociate(_:)((uint64_t)v0);
      swift_release_n();
    }
  }
}

void PublishedSubject.disassociate(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t *v5;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  v5 = (uint64_t *)type metadata accessor for ConduitList(0, *(_QWORD *)(v3 + 80), MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
  ConduitList.remove(_:)(a1, v5);
  swift_endAccess();
  os_unfair_lock_unlock(v4);
}

uint64_t partial apply for closure #2 in Future.promise(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #2 in Future.promise(_:)(a1, *(_QWORD *)(v4 + 16), a3, a4);
}

uint64_t closure #2 in Future.promise(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v7 = type metadata accessor for Subscribers.Completion(0, v6, *(_QWORD *)(*(_QWORD *)a1 + 96), a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v13 - v9;
  v11 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v13 - v9, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, v6);
  (*(void (**)(char *))(*(_QWORD *)a1 + 112))(v10);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t Future.Conduit.finish(completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v18[2];

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = type metadata accessor for Result();
  v18[1] = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v18 - v7;
  v9 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v6);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Subscribers.Completion(0, v3, AssociatedConformanceWitness, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)v18 - v15, a1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v16, 1, v3) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v16, v3);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v8, v11, v3);
    swift_storeEnumTagMultiPayload();
    Future.Conduit.fulfill(_:)((uint64_t)v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

void protocol witness for Cancellable.cancel() in conformance AsyncThrowingPublisher<A>.Iterator.Inner()
{
  AsyncThrowingPublisher.Iterator.Inner.cancel()();
}

Swift::Void __swiftcall AsyncThrowingPublisher.Iterator.Inner.cancel()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Bool v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Bool IsNativeType;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  char v34;
  __int128 v35[2];
  char v36;

  v1 = *(_QWORD *)(*v0 + 80);
  v2 = *(_QWORD *)(*v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v27 - v6;
  v29 = (os_unfair_lock_t)v0[2];
  os_unfair_lock_lock(v29);
  swift_beginAccess();
  v8 = v0[3];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v9 = type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  v10 = v0 + 4;
  swift_beginAccess();
  v12 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State(0, v1, v2, v11);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(__int128 *, _QWORD *, uint64_t))(v13 + 16))(v35, v10, v12);
  if (!v36)
  {
    outlined init with take of Subscription(v35, (uint64_t)v30);
    v33[0] = 0;
    v34 = 1;
    swift_beginAccess();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v13 + 40))(v10, v33, v12);
    swift_endAccess();
    os_unfair_lock_unlock(v29);
    v21 = v31;
    v20 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    (*(void (**)(uint64_t))(*(_QWORD *)(v20 + 8) + 8))(v21);
    if (MEMORY[0x18D77A3A8](v8, v9))
    {
      v22 = 4;
      do
      {
        v23 = v22 - 4;
        IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          v25 = *(_QWORD *)(v8 + 8 * v22);
          v18 = __OFADD__(v23, 1);
          v26 = v22 - 3;
          if (v18)
            goto LABEL_20;
        }
        else
        {
          v25 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          v18 = __OFADD__(v23, 1);
          v26 = v22 - 3;
          if (v18)
          {
LABEL_20:
            __break(1u);
            break;
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v7, 1, 1, AssociatedTypeWitness);
        (*(void (**)(_QWORD, char *, uint64_t))(v5 + 32))(*(_QWORD *)(*(_QWORD *)(v25 + 64) + 40), v7, v4);
        swift_continuation_throwingResume();
        ++v22;
      }
      while (v26 != MEMORY[0x18D77A3A8](v8, v9));
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return;
  }
  v33[0] = 0;
  v34 = 1;
  swift_beginAccess();
  v28 = v13;
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v13 + 40))(v10, v33, v12);
  swift_endAccess();
  os_unfair_lock_unlock(v29);
  if (!MEMORY[0x18D77A3A8](v8, v9))
    goto LABEL_11;
  v14 = 4;
  while (1)
  {
    v15 = v14 - 4;
    v16 = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (!v16)
      break;
    v17 = *(_QWORD *)(v8 + 8 * v14);
    v18 = __OFADD__(v15, 1);
    v19 = v14 - 3;
    if (v18)
      goto LABEL_10;
LABEL_6:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v7, 1, 1, AssociatedTypeWitness);
    (*(void (**)(_QWORD, char *, uint64_t))(v5 + 32))(*(_QWORD *)(*(_QWORD *)(v17 + 64) + 40), v7, v4);
    swift_continuation_throwingResume();
    ++v14;
    if (v19 == MEMORY[0x18D77A3A8](v8, v9))
      goto LABEL_11;
  }
  v17 = _ArrayBuffer._getElementSlowPath(_:)();
  swift_unknownObjectRelease();
  v18 = __OFADD__(v15, 1);
  v19 = v14 - 3;
  if (!v18)
    goto LABEL_6;
LABEL_10:
  __break(1u);
LABEL_11:
  swift_bridgeObjectRelease();
  (*(void (**)(__int128 *, uint64_t))(v28 + 8))(v35, v12);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Throttle<A, B>.Inner<A1>()
{
  Publishers.Throttle.Inner.cancel()();
}

void Publishers.Throttle.Inner.cancel()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[7];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v9[5] = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  v9[4] = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v9[6] = (char *)v9 - v5;
  v6 = v1[10];
  v7 = v1[13];
  v8 = v1[14];
  v10 = v1[11];
  v11 = v6;
  v13 = v6;
  v14 = v10;
  v15 = v3;
  v16 = v7;
  v12 = v8;
  v17 = v8;
  v18 = v2;
  type metadata accessor for Publishers.Throttle.Inner.State();
}

void sub_18B54712C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  os_unfair_lock_s *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[96];

  v7 = *(_QWORD *)(a1 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v5 - 208) = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v11 = &v16[-v10];
  v12 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v12);
  v13 = (char *)v1 + *(_QWORD *)(*v1 + 144);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v7 + 16))(v11, v13, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = *(_QWORD *)(v5 - 232);
    *(_QWORD *)(v5 - 136) = *(_QWORD *)(v5 - 224);
    *(_QWORD *)(v5 - 128) = v14;
    *(_QWORD *)(v5 - 120) = v4;
    *(_QWORD *)(v5 - 112) = v2;
    *(_QWORD *)(v5 - 280) = v2;
    *(_QWORD *)(v5 - 104) = *(_QWORD *)(v5 - 216);
    *(_QWORD *)(v5 - 96) = v3;
    type metadata accessor for Publishers.Throttle.Inner.Scheduling();
  }
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v11, a1);
  v15 = *(_QWORD *)(v5 - 208);
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 40))(v13, v15, a1);
  swift_endAccess();
  os_unfair_lock_unlock(v12);
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.Retry<A>.Inner<A1>()
{
  Publishers.Retry.Inner.receive(_:)();
}

void Publishers.Retry.Inner.receive(_:)()
{
  type metadata accessor for Publishers.Retry.Inner.State();
}

void sub_18B547514(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  os_unfair_lock_s *v13;
  char *v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[96];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = &v26[-v7];
  v9 = *(_QWORD *)(v3 - 240);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v6);
  v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v13);
  v14 = (char *)v1 + *(_QWORD *)(*v1 + 120);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v14, a1);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v8, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, a1);
    os_unfair_lock_unlock(v13);
    return;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, &v8[*(int *)(TupleTypeMetadata2 + 48)], v9);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v8, v2);
  v16 = *(_QWORD *)(*v1 + 152);
  v17 = *(_QWORD *)((char *)v1 + v16);
  if (v17 != 0x8000000000000000)
  {
    if (v17 < 0)
    {
      __break(1u);
    }
    else if (v17)
    {
      *(_QWORD *)((char *)v1 + v16) = v17 - 1;
      goto LABEL_7;
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_7:
  os_unfair_lock_unlock(v13);
  v18 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 - 256) + 48))(*(_QWORD *)(v3 - 248), v9);
  v19 = v18;
  if (v18 == 0x8000000000000000)
  {
    os_unfair_lock_lock(v13);
    v20 = 0x8000000000000000;
    if (*(_QWORD *)((char *)v1 + v16) == 0x8000000000000000)
      goto LABEL_19;
LABEL_18:
    *(_QWORD *)((char *)v1 + v16) = v20;
    goto LABEL_19;
  }
  if (v18 < 0)
    goto LABEL_25;
  if (!v18)
  {
LABEL_22:
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
    return;
  }
  os_unfair_lock_lock(v13);
  v21 = *(_QWORD *)((char *)v1 + v16);
  if (v21 == 0x8000000000000000)
  {
LABEL_19:
    v23 = (uint64_t)v1 + *(_QWORD *)(*v1 + 128);
    swift_beginAccess();
    outlined init with copy of Subscription?(v23, v3 - 216);
    if (*(_QWORD *)(v3 - 192))
    {
      outlined init with take of Subscription((__int128 *)(v3 - 216), v3 - 152);
      os_unfair_lock_unlock(v13);
      v24 = *(_QWORD *)(v3 - 128);
      v25 = *(_QWORD *)(v3 - 120);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 - 152), v24);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24))(v19, v24, v25);
      __swift_destroy_boxed_opaque_existential_1(v3 - 152);
    }
    else
    {
      outlined destroy of Subscription?(v3 - 216);
      os_unfair_lock_unlock(v13);
    }
    goto LABEL_22;
  }
  if ((v21 | v19) < 0)
    goto LABEL_26;
  v22 = __OFADD__(v21, v19);
  v20 = v21 + v19;
  if (v22)
  {
    v20 = 0x8000000000000000;
    goto LABEL_18;
  }
  if ((v20 & 0x8000000000000000) == 0)
    goto LABEL_18;
LABEL_27:
  __break(1u);
}

uint64_t AnyCancellable.store<A>(in:)()
{
  swift_retain();
  return dispatch thunk of RangeReplaceableCollection.append(_:)();
}

uint64_t type metadata accessor for Result.Publisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Result.Publisher);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Empty<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Empty.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.HandleEvents.Inner.__deallocating_deinit()
{
  Publishers.HandleEvents.Inner.deinit();
  return swift_deallocClassInstance();
}

char *Publishers.HandleEvents.Inner.deinit()
{
  char *v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  MEMORY[0x18D77ADB0](*((_QWORD *)v0 + 8), -1, -1);
  outlined destroy of SubscriptionStatus((uint64_t)(v0 + 16));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*((_QWORD *)v0 + 9));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*((_QWORD *)v0 + 11));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*((_QWORD *)v0 + 13));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*((_QWORD *)v0 + 15));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*((_QWORD *)v0 + 17));
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 168)]);
  return v0;
}

uint64_t Publishers.HandleEvents.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[8];
  os_unfair_lock_lock(v4);
  v5 = (void (*)(uint64_t))v1[13];
  if (v5)
  {
    swift_retain();
    os_unfair_lock_unlock(v4);
    v5(a1);
    os_unfair_lock_lock(v4);
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v5);
  }
  v6 = v1[9];
  v1[9] = 0;
  v1[10] = 0;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v6);
  v7 = v1[11];
  v1[11] = 0;
  v1[12] = 0;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v7);
  v8 = v1[13];
  v1[13] = 0;
  v1[14] = 0;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v8);
  v9 = v1[15];
  v1[15] = 0;
  v1[16] = 0;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v9);
  v10 = v1[17];
  v1[17] = 0;
  v1[18] = 0;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v10);
  v12 = 1;
  v13 = 0u;
  v14 = 0u;
  v15 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v12, (uint64_t)(v1 + 2));
  swift_endAccess();
  os_unfair_lock_unlock(v4);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 104) + 56))(a1, *(_QWORD *)(v3 + 88));
}

uint64_t specialized Publishers.HandleEvents.Inner.init(downstream:events:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  _DWORD *v6;
  uint64_t v7;
  int *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(uint64_t **)v2;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 48) = 0;
  *(_BYTE *)(v2 + 56) = 2;
  v6 = (_DWORD *)swift_slowAlloc();
  *v6 = 0;
  *(_QWORD *)(v2 + 64) = v6;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5[11] - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 168), a1);
  v8 = (int *)type metadata accessor for Publishers.HandleEvents(0, v5[10], v5[12], v7);
  v9 = (uint64_t *)(a2 + v8[9]);
  v10 = *v9;
  v11 = v9[1];
  v12 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v2 + 72) = *v9;
  *(_QWORD *)(v2 + 80) = v11;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v10);
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v12);
  v13 = (uint64_t *)(a2 + v8[10]);
  v14 = *v13;
  v15 = v13[1];
  v16 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(v2 + 88) = *v13;
  *(_QWORD *)(v2 + 96) = v15;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v14);
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v16);
  v17 = (uint64_t *)(a2 + v8[11]);
  v18 = *v17;
  v19 = v17[1];
  v20 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v2 + 104) = *v17;
  *(_QWORD *)(v2 + 112) = v19;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v18);
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v20);
  v21 = (uint64_t *)(a2 + v8[12]);
  v22 = *v21;
  v23 = v21[1];
  v24 = *(_QWORD *)(v2 + 120);
  *(_QWORD *)(v2 + 120) = *v21;
  *(_QWORD *)(v2 + 128) = v23;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v22);
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v24);
  v25 = (uint64_t *)(a2 + v8[13]);
  v26 = *v25;
  v27 = v25[1];
  v28 = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(v2 + 136) = *v25;
  *(_QWORD *)(v2 + 144) = v27;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v26);
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v28);
  return v2;
}

uint64_t _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v43 = a7;
  v44 = a8;
  v41 = a5;
  v42 = a6;
  v35 = a3;
  v36 = a1;
  v39 = a4;
  v40 = a11;
  v37 = a2;
  v38 = a10;
  v15 = *(_QWORD *)(a12 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v18, a12);
  v20 = (int *)type metadata accessor for Publishers.HandleEvents(0, a12, a13, v19);
  v21 = (uint64_t *)(a9 + v20[9]);
  v22 = (uint64_t *)(a9 + v20[10]);
  v23 = (uint64_t *)(a9 + v20[11]);
  v24 = (uint64_t *)(a9 + v20[12]);
  v25 = (uint64_t *)(a9 + v20[13]);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a9, v17, a12);
  v26 = v36;
  v27 = v37;
  *v21 = v36;
  v21[1] = v27;
  *v22 = a3;
  v28 = v38;
  v22[1] = v39;
  v30 = v41;
  v29 = v42;
  *v23 = v41;
  v23[1] = v29;
  v32 = v43;
  v31 = v44;
  *v24 = v43;
  v24[1] = v31;
  v33 = v40;
  *v25 = v28;
  v25[1] = v33;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v26);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v35);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v30);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v32);
  return outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v28);
}

uint64_t outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for Publishers.HandleEvents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.HandleEvents);
}

uint64_t Publishers.MapKeyPath.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 48) + 56))(a1, *(_QWORD *)(a2 + 32));
}

uint64_t protocol witness for Subscription.request(_:) in conformance Just<A>.Inner<A1>(uint64_t a1)
{
  return Just.Inner.request(_:)(a1);
}

uint64_t Just.Inner.request(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = &v19[-v11];
  v13 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v10);
  v16 = &v19[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a1 == 0x8000000000000000)
    goto LABEL_4;
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (!a1)
  {
LABEL_9:
    __break(1u);
    return result;
  }
LABEL_4:
  v17 = (uint64_t)v1 + *(_QWORD *)(v3 + 104);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v12, v17, v5);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v4) == 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v12, v5);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32))(v16, v12, v4);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v4);
  swift_beginAccess();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 40))(v17, v9, v5);
  swift_endAccess();
  v18 = *(_QWORD *)(v3 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))((uint64_t)v1 + *(_QWORD *)(*v1 + 112), v4, v18);
  v19[0] = 1;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v18 + 56))(v19, v4, v18);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v16, v4);
}

void Publishers.Sequence.Inner.request(_:)(void (*a1)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  void (*v36)(char *, char *, uint64_t);
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_unfair_lock_t v67;
  uint64_t v68;
  os_unfair_lock_s *v69;
  uint64_t v70;
  unint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t);
  char *v73;
  uint64_t v74;
  unsigned int v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  os_unfair_lock_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v2 = v1;
  v121 = (unint64_t)a1;
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v5 = v3[17];
  v6 = v3[12];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v101 = v4;
  v102 = type metadata accessor for Subscribers.Completion(0, v4, AssociatedConformanceWitness, v8);
  v100 = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102);
  v10 = (char *)&v92 - v9;
  v112 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v126 = type metadata accessor for Optional();
  v105 = *(_QWORD *)(v126 - 8);
  v12 = MEMORY[0x1E0C80A78](v126);
  v109 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v110 = (char *)&v92 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v119 = (char *)&v92 - v17;
  v123 = AssociatedTypeWitness;
  v114 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v16);
  v122 = (char *)&v92 - v18;
  v125 = v3[13];
  v117 = type metadata accessor for Optional();
  v116 = *(_QWORD *)(v117 - 8);
  v19 = MEMORY[0x1E0C80A78](v117);
  v98 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v113 = (char *)&v92 - v21;
  v22 = type metadata accessor for Optional();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x1E0C80A78](v22);
  v99 = (char *)&v92 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v92 - v27;
  v29 = *(_QWORD **)(v6 - 8);
  MEMORY[0x1E0C80A78](v26);
  v31 = (char *)&v92 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = v3;
  v32 = *(os_unfair_lock_s **)(v2 + v3[25]);
  os_unfair_lock_lock(v32);
  v33 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 160);
  swift_beginAccess();
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v97 = v33;
  v34(v28, v33, v22);
  v35 = (unsigned int (*)(char *, uint64_t, uint64_t))v29[6];
  v120 = v6;
  if (v35(v28, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v28, v22);
    os_unfair_lock_unlock(v32);
    return;
  }
  v95 = v23;
  v96 = v10;
  v36 = (void (*)(char *, char *, uint64_t))v29[4];
  v108 = v31;
  v36(v31, v28, v120);
  v37 = *(_QWORD **)v2;
  v124 = *(_QWORD *)(*(_QWORD *)v2 + 184);
  v38 = *(_QWORD *)(v2 + v124);
  v39 = 0x8000000000000000;
  v40 = v105;
  v41 = v119;
  if (v38 != 0x8000000000000000)
  {
    if (v121 != 0x8000000000000000)
    {
      if (((v38 | v121) & 0x8000000000000000) != 0)
        goto LABEL_43;
      v39 = v38 + v121;
      if (__OFADD__(v38, v121))
      {
        v39 = 0x8000000000000000;
      }
      else if ((v39 & 0x8000000000000000) != 0)
      {
        goto LABEL_44;
      }
    }
    *(_QWORD *)(v2 + v124) = v39;
    v37 = *(_QWORD **)v2;
  }
  if ((*(_BYTE *)(v2 + v37[24]) & 1) != 0)
  {
    os_unfair_lock_unlock(v32);
    v42 = (void (*)(char *, uint64_t))v29[1];
LABEL_34:
    v42(v108, v120);
    return;
  }
  v118 = v37[24];
  v106 = v32;
  v93 = v22;
  v94 = v29;
  v43 = v2 + v37[19];
  v44 = v2 + v37[22];
  v103 = v2 + v37[21];
  v107 = v43;
  swift_beginAccess();
  swift_beginAccess();
  v45 = v114;
  v46 = v124;
  for (i = v2; ; v2 = i)
  {
    v47 = *(_QWORD *)(v2 + v46);
    if (v47 == 0x8000000000000000)
      goto LABEL_17;
    if (v47 < 0)
      break;
    if (!v47)
      goto LABEL_33;
LABEL_17:
    v48 = v116;
    v49 = v113;
    v50 = v117;
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v113, v107, v117);
    v104 = *(_QWORD *)(v125 - 8);
    v51 = (*(uint64_t (**)(char *, uint64_t))(v104 + 48))(v49, 1);
    v52 = v49;
    v53 = v124;
    v54 = v50;
    v55 = v126;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v52, v54);
    if (v51 == 1)
    {
LABEL_33:
      os_unfair_lock_unlock(v106);
      v42 = (void (*)(char *, uint64_t))v94[1];
      goto LABEL_34;
    }
    v56 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
    v56(v41, v44, v55);
    v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    v58 = v123;
    if (v57(v41, 1, v123) == 1)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v126);
      v76 = v98;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v104 + 56))(v98, 1, 1, v125);
      v77 = v107;
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v116 + 40))(v77, v76, v117);
      swift_endAccess();
      v78 = v94;
      v79 = v99;
      v80 = v120;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v94[7])(v99, 1, 1, v120);
      v81 = v97;
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v95 + 40))(v81, v79, v93);
      swift_endAccess();
      os_unfair_lock_unlock(v106);
      v82 = v96;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v96, 1, 1);
      v83 = v108;
      (*(void (**)(char *, uint64_t))(v112 + 56))(v82, v80);
      (*(void (**)(char *, uint64_t))(v100 + 8))(v82, v102);
      ((void (*)(char *, uint64_t))v78[1])(v83, v80);
      return;
    }
    v121 = (unint64_t)v56;
    v59 = v122;
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v122, v41, v58);
    v60 = *(_QWORD *)(v2 + v53);
    if (v60 != 0x8000000000000000)
    {
      if (v60 < 0)
        goto LABEL_39;
      if (!v60)
        goto LABEL_40;
      *(_QWORD *)(v2 + v53) = v60 - 1;
    }
    swift_beginAccess();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v61 = v110;
    v62 = v40;
    v63 = v120;
    dispatch thunk of IteratorProtocol.next()();
    swift_endAccess();
    swift_beginAccess();
    v64 = v126;
    (*(void (**)(uint64_t, char *, uint64_t))(v62 + 40))(v44, v61, v126);
    swift_endAccess();
    v65 = v44;
    v66 = v118;
    *(_BYTE *)(v2 + v118) = 1;
    v67 = v106;
    os_unfair_lock_unlock(v106);
    v68 = (*(uint64_t (**)(char *, uint64_t))(v112 + 48))(v59, v63);
    v69 = v67;
    v46 = v124;
    os_unfair_lock_lock(v69);
    v70 = *(_QWORD *)(v2 + v46);
    v71 = 0x8000000000000000;
    v72 = (void (*)(char *, uint64_t, uint64_t))v121;
    if (v70 != 0x8000000000000000)
    {
      if (v68 != 0x8000000000000000)
      {
        if ((v70 | v68) < 0)
          goto LABEL_41;
        v71 = v70 + v68;
        if (__OFADD__(v70, v68))
        {
          v71 = 0x8000000000000000;
        }
        else if ((v71 & 0x8000000000000000) != 0)
        {
          goto LABEL_42;
        }
      }
      v2 = i;
      *(_QWORD *)(i + v46) = v71;
      v64 = v126;
      v62 = v105;
      v66 = v118;
    }
    *(_BYTE *)(v2 + v66) = 0;
    v73 = v109;
    v72(v109, v65, v64);
    v74 = v123;
    v75 = v57(v73, 1, v123);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v73, v64);
    if (v75 == 1)
    {
      v84 = v98;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v104 + 56))(v98, 1, 1, v125);
      v85 = v107;
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v116 + 40))(v85, v84, v117);
      swift_endAccess();
      v86 = v94;
      v87 = v99;
      v88 = v120;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v94[7])(v99, 1, 1, v120);
      v89 = v97;
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v95 + 40))(v89, v87, v93);
      swift_endAccess();
      os_unfair_lock_unlock(v106);
      v90 = v96;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v96, 1, 1);
      v91 = v108;
      (*(void (**)(char *, uint64_t))(v112 + 56))(v90, v88);
      (*(void (**)(char *, uint64_t))(v100 + 8))(v90, v102);
      (*(void (**)(char *, uint64_t))(v114 + 8))(v122, v74);
      ((void (*)(char *, uint64_t))v86[1])(v91, v88);
      return;
    }
    v40 = v62;
    v44 = v65;
    v45 = v114;
    (*(void (**)(char *, uint64_t))(v114 + 8))(v122, v74);
    v41 = v119;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

void Publishers.FlatMap.Outer.Side.receive(_:)(uint64_t a1)
{
  uint64_t *v1;

  Publishers.FlatMap.Outer.receiveInner(_:_:)(a1, *v1);
}

void Publishers.FlatMap.Outer.receiveInner(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  _QWORD *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v6 = *v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v10 = (uint64_t *)((char *)&v20 - v9);
  v11 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v11);
  v12 = *(_QWORD *)(*v2 + 160);
  v13 = *(_QWORD *)((char *)v2 + v12);
  if (v13 == 0x8000000000000000)
  {
    os_unfair_lock_unlock(v11);
    os_unfair_recursive_lock_lock_with_options();
    v14 = *(_QWORD *)(*v2 + 168);
    *((_BYTE *)v2 + v14) = 1;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 + 120) + 48))(a1, *(_QWORD *)(v6 + 96));
    *((_BYTE *)v2 + v14) = 0;
    os_unfair_recursive_lock_unlock();
    return;
  }
  if (v13 < 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!v13 || (*((_BYTE *)v2 + *(_QWORD *)(*v2 + 176)) & 1) != 0)
  {
    v15 = (char *)v10 + *(int *)(TupleTypeMetadata2 + 48);
    *v10 = a2;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v15, a1, AssociatedTypeWitness);
    swift_beginAccess();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    return;
  }
  *(_QWORD *)((char *)v2 + v12) = v13 - 1;
  os_unfair_lock_unlock(v11);
  os_unfair_recursive_lock_lock_with_options();
  v16 = *(_QWORD *)(*v2 + 168);
  *((_BYTE *)v2 + v16) = 1;
  v17 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 + 120) + 48))(a1, *(_QWORD *)(v6 + 96));
  *((_BYTE *)v3 + v16) = 0;
  os_unfair_recursive_lock_unlock();
  v18 = 0x8000000000000000;
  if (v17 == 0x8000000000000000)
  {
    os_unfair_lock_lock(v11);
    if (*(_QWORD *)((char *)v3 + v12) == 0x8000000000000000)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (v17 < 0)
    goto LABEL_22;
  if (v17)
  {
    os_unfair_lock_lock(v11);
    v19 = *(_QWORD *)((char *)v3 + v12);
    if (v19 == 0x8000000000000000)
    {
LABEL_20:
      os_unfair_lock_unlock(v11);
      return;
    }
    if (((v19 | v17) & 0x8000000000000000) == 0)
    {
      v18 = v19 + v17;
      if (__OFADD__(v19, v17))
      {
        v18 = 0x8000000000000000;
LABEL_19:
        *(_QWORD *)((char *)v3 + v12) = v18;
        goto LABEL_20;
      }
      if ((v18 & 0x8000000000000000) == 0)
        goto LABEL_19;
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
}

uint64_t getEnumTagSinglePayload for Publishers.SetFailureType.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_18B548CC8 + 4 * byte_18B5F70EE[v8]))();
}

uint64_t Publishers.SetFailureType.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 64) + 48))(a1, *(_QWORD *)(a2 + 32));
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.TryMap<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.TryMap.Inner.receive(completion:)(a1);
}

void Publishers.TryMap.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  unsigned __int8 v25;

  v20 = a1;
  v2 = *(_QWORD **)v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v5 = (char *)&v18 - v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v8 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v10 = (char *)&v18 - v9;
  v11 = v2[18];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v11));
  v12 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v12, (uint64_t)&v22);
  v13 = v25;
  outlined destroy of SubscriptionStatus((uint64_t)&v22);
  if (v13)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v11));
  }
  else
  {
    v18 = AssociatedConformanceWitness;
    v22 = 1;
    v23 = 0u;
    v24 = 0u;
    v25 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v22, v12);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v11));
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v20, v19);
    v14 = v21;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v10, 1, AssociatedTypeWitness) == 1)
    {
      v22 = 0;
      (*(void (**)(uint64_t *, _QWORD))(v2[14] + 56))(&v22, v2[12]);
    }
    else
    {
      v15 = v5;
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v5, v10, AssociatedTypeWitness);
      v16 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v17, v15, AssociatedTypeWitness);
      v22 = v16;
      (*(void (**)(uint64_t *, _QWORD))(v2[14] + 56))(&v22, v2[12]);
      MEMORY[0x18D77ABF4](v16);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v15, AssociatedTypeWitness);
    }
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.SubscribeOn<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.SubscribeOn.Inner.receive(completion:)(a1);
}

void Publishers.SubscribeOn.Inner.receive(completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  unsigned __int8 v10;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v7);
  v6 = v10;
  outlined destroy of SubscriptionStatus((uint64_t)&v7);
  if (v6)
  {
    os_unfair_lock_unlock(v4);
  }
  else
  {
    v7 = 1;
    v8 = 0u;
    v9 = 0u;
    v10 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v7, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 120) + 56))(a1, *(_QWORD *)(v3 + 96));
  }
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.HandleEvents<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.HandleEvents.Inner.receive(completion:)(a1);
}

uint64_t Publishers.MapKeyPath.Inner.receive(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v3 = a2[3];
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAtKeyPath();
  v7 = (*(uint64_t (**)(char *, _QWORD))(a2[6] + 48))(v6, a2[4]);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.TryMap<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.TryMap.Inner.receive(_:)(a1);
}

uint64_t Publishers.TryMap.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *);
  uint64_t v14;
  _QWORD v16[2];

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v3[12];
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v6);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *))(v10 + 16);
  v16[1] = v1 + v3[15];
  v13(v12);
  (*(void (**)(uint64_t))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 128)))(a1);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v3[14] + 48))(v8, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v14;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.SubscribeOn<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.SubscribeOn.Inner.receive(_:)(a1);
}

uint64_t Publishers.SubscribeOn.Inner.receive(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[48];

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v7);
  LODWORD(v5) = v7[40];
  outlined destroy of SubscriptionStatus((uint64_t)v7);
  os_unfair_lock_unlock(v4);
  result = 0;
  if (!(_DWORD)v5)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 120) + 48))(a1, *(_QWORD *)(v3 + 96));
  return result;
}

void Publishers.SetFailureType.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.SetFailureType.Inner();
}

void sub_18B549598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&a9 - v13;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v11, *(_QWORD *)(v12 - 152), v10);
  Publishers.SetFailureType.Inner.init(downstream:)(v11, v10, (uint64_t)v14);
}

uint64_t sub_18B549600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.SetFailureType<A, B>.Inner<A1, B1>, v4);
  Publisher.subscribe<A>(_:)(v1, v2, v4, v3, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v4);
}

uint64_t destroy for Publishers.SetFailureType.Inner(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 8))();
}

void type metadata accessor for Publishers.SetFailureType.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.SetFailureType.Inner.init(downstream:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.SetFailureType.Inner();
}

void sub_18B5496E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;

  v2 = *(int *)(a1 + 76);
  if (one-time initialization token for lock != -1)
    swift_once();
  v3 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v4 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v3);
    *(_QWORD *)(v1 + v2) = v4;
  }
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance ReduceProducer<A, B, C, D, E>(uint64_t a1)
{
  ReduceProducer.receive(_:)(a1);
  return 0;
}

uint64_t Publisher.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v20;

  v15 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v17, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a7, v17, a3);
  v18 = (_QWORD *)(a7 + *(int *)(a6(0, a3, a4, a5) + 44));
  *v18 = a1;
  v18[1] = a2;
  return swift_retain();
}

uint64_t type metadata accessor for Publishers.Map(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Map);
}

uint64_t type metadata accessor for Publishers.TryMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.TryMap);
}

uint64_t initializeWithCopy for Publishers.CollectByTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  size_t v32;
  uint64_t v34;
  uint64_t v35;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = (*(_DWORD *)(v12 + 80) | v10) & 0xF8 | 7u;
  v35 = a1;
  v15 = (v7 + v14 + a1) & ~v14;
  v16 = (v7 + v14 + a2) & ~v14;
  v17 = ~v13;
  v18 = *(_QWORD *)(v9 + 64) + v13;
  v34 = *(_QWORD *)(v12 + 64);
  v19 = (v18 & ~v13) + v34;
  if (((v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v19)
    v20 = (v18 & ~v13) + v34;
  else
    v20 = ((v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v21 = *(unsigned __int8 *)(v16 + v20);
  if (v21 >= 2)
  {
    if (v20 <= 3)
      v22 = v20;
    else
      v22 = 4;
    __asm { BR              X11 }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v15, v16, v8);
  v23 = (v18 + v15) & v17;
  v24 = (v18 + v16) & v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v23, v24, AssociatedTypeWitness);
  if (v21 == 1)
  {
    *(_QWORD *)((v34 + 7 + v23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v34 + 7 + v24) & 0xFFFFFFFFFFFFF8);
    v25 = 1;
  }
  else
  {
    v25 = 0;
  }
  *(_BYTE *)(v15 + v20) = v25;
  v26 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = v20 + v28 + 1;
  v30 = (void *)((v29 + v15) & ~v28);
  v31 = (const void *)((v29 + v16) & ~v28);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v31, 1, v26))
  {
    if (*(_DWORD *)(v27 + 84))
      v32 = *(_QWORD *)(v27 + 64);
    else
      v32 = *(_QWORD *)(v27 + 64) + 1;
    memcpy(v30, v31, v32);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(v30, v31, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v30, 0, 1, v26);
  }
  return v35;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, *v4, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7]);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return protocol witness for Subscriber.receive(_:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))Publishers.Catch.Inner.UncaughtS.receive(_:));
}

void Publishers.Catch.Inner.UncaughtS.receive(_:)(uint64_t a1)
{
  Publishers.Catch.Inner.receivePre(_:)(a1);
}

void Publishers.Catch.Inner.receivePre(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = v1;
  v4 = *v1;
  v5 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v5);
  v6 = v1[3];
  if (v6 != 0x8000000000000000)
  {
    if (v6 < 0)
    {
      __break(1u);
    }
    else if (v6)
    {
      v1[3] = v6 - 1;
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_5:
  os_unfair_lock_unlock(v5);
  v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 + 120) + 48))(a1, *(_QWORD *)(v4 + 96));
  os_unfair_lock_lock(v5);
  v8 = v2[3];
  if (v8 == 0x8000000000000000)
  {
LABEL_13:
    os_unfair_lock_unlock(v5);
    return;
  }
  v9 = 0x8000000000000000;
  if (v7 == 0x8000000000000000)
  {
LABEL_12:
    v2[3] = v9;
    goto LABEL_13;
  }
  if ((v8 | v7) < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v9 = v8 + v7;
  if (__OFADD__(v8, v7))
  {
    v9 = 0x8000000000000000;
    goto LABEL_12;
  }
  if ((v9 & 0x8000000000000000) == 0)
    goto LABEL_12;
LABEL_17:
  __break(1u);
}

void protocol witness for Subscriber.receive(completion:) in conformance SubjectSubscriber<A>(uint64_t a1)
{
  SubjectSubscriber.receive(completion:)(a1);
}

void SubjectSubscriber.receive(completion:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  if (MEMORY[0x18D77AE58](v1 + 3))
  {
    swift_unknownObjectWeakAssign();
    v5 = (uint64_t)(v1 + 4);
    swift_beginAccess();
    outlined init with copy of Subscription?((uint64_t)(v1 + 4), (uint64_t)&v7);
    v6 = *((_QWORD *)&v8 + 1);
    outlined destroy of Subscription?((uint64_t)&v7);
    if (v6)
    {
      v9 = 0;
      v7 = 0u;
      v8 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v7, v5);
      swift_endAccess();
      os_unfair_lock_unlock(v4);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 88) + 24))(a1, *(_QWORD *)(v3 + 80));
    }
    else
    {
      os_unfair_lock_unlock(v4);
    }
    swift_unknownObjectRelease();
  }
  else
  {
    os_unfair_lock_unlock(v4);
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance AbstractCombineLatest<A, B, C>.Side<A1>(unint64_t a1)
{
  unint64_t *v1;

  AbstractCombineLatest.Side.receive(completion:)(a1, *v1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.SetFailureType<A, B>.Inner<A1, B1>(char *a1, _QWORD *a2)
{
  return Publishers.SetFailureType.Inner.receive(completion:)(*a1, a2);
}

uint64_t Publishers.SetFailureType.Inner.receive(completion:)(char a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;

  v3 = a2[8];
  v4 = a2[4];
  v5 = a2[5];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for Subscribers.Completion(0, v5, AssociatedConformanceWitness, v7);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v13 - v10;
  if ((a1 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v11, 1, 1, v5);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 56))(v11, v4, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<Never>);
    result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Sequence<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  Publishers.Sequence.receive<A>(subscriber:)(a1, a4, a2, a3);
}

void Publishers.SwitchToLatest.Outer.Side.receive(_:)(uint64_t a1)
{
  uint64_t *v1;

  Publishers.SwitchToLatest.Outer.receiveInner(_:_:)(a1, *v1);
}

void Publishers.SwitchToLatest.Outer.receiveInner(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = v2;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 168);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v7));
  v8 = *v2;
  if (*(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 152)) != a2 || (*((_BYTE *)v2 + *(_QWORD *)(v8 + 184)) & 1) != 0)
    goto LABEL_3;
  v9 = *(_QWORD *)(v8 + 216);
  v10 = *(uint64_t *)((char *)v2 + v9);
  if (v10 != 0x8000000000000000)
  {
    if (v10 < 0)
    {
      __break(1u);
    }
    else if (v10)
    {
      *(uint64_t *)((char *)v2 + v9) = v10 - 1;
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_9:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v7));
  os_unfair_recursive_lock_lock_with_options();
  v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 + 120) + 48))(a1, *(_QWORD *)(v6 + 96));
  os_unfair_recursive_lock_unlock();
  if (v11 == 0x8000000000000000)
  {
LABEL_12:
    os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v3 + v7));
    v12 = *(uint64_t *)((char *)v3 + v9);
    v13 = 0x8000000000000000;
    if (v12 == 0x8000000000000000)
    {
LABEL_3:
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v3 + v7));
      return;
    }
    if (v11 == 0x8000000000000000)
      goto LABEL_19;
    if (((v12 | v11) & 0x8000000000000000) == 0)
    {
      v13 = v12 + v11;
      if (!__OFADD__(v12, v11))
      {
        if ((v13 & 0x8000000000000000) == 0)
          goto LABEL_19;
LABEL_24:
        __break(1u);
        return;
      }
      v13 = 0x8000000000000000;
LABEL_19:
      *(uint64_t *)((char *)v3 + v9) = v13;
      goto LABEL_3;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v11 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v11)
    goto LABEL_12;
}

uint64_t Publishers.MapError.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v21 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)&v21 - v5;
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 24);
  v23 = *(_QWORD *)(a2 + 32);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v22 = type metadata accessor for Subscribers.Completion(0, v8, AssociatedConformanceWitness, v10);
  v11 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v13 = (char *)&v21 - v12;
  v14 = swift_getAssociatedConformanceWitness();
  v16 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, v14, v15);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t))(v19 + 16))((char *)&v21 - v17, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v18, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v13, 1, 1, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 56))(v13, v23, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v18, AssociatedTypeWitness);
    (*(void (**)(char *))(v24 + *(int *)(a2 + 60)))(v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v13, 0, 1, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 56))(v13, v23, v7);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  }
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.IgnoreOutput<A>.Inner<A1>()
{
  return 0;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance A?.Publisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Optional.Publisher.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Optional.Publisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];

  v5 = v4;
  v28 = a1;
  v29 = a4;
  v27 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v27 - v14;
  v16 = *(_QWORD *)(v10 - 8);
  v17 = MEMORY[0x1E0C80A78](v13);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v27 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v5, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v10) == 1)
  {
    v22 = v29;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    if (one-time initialization token for singleton != -1)
      swift_once();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 40))(&static Subscriptions._EmptySubscription.singleton, a3, v22);
    LOBYTE(v30[0]) = 1;
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v22 + 56))(v30, a3, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v15, v10);
    v24 = v29;
    v25 = type metadata accessor for Optional.Publisher.Inner(0, v10, a3, v29);
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v8, v28, a3);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v10);
    swift_allocObject();
    v26 = Just.Inner.init(downstream:value:)((uint64_t)v8, (uint64_t)v19);
    v30[3] = v25;
    v30[4] = &protocol witness table for A?.Publisher.Inner<A1>;
    v30[0] = v26;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v24 + 40))(v30, a3, v24);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Retry<A>.Inner<A1>(uint64_t a1)
{
  Publishers.Retry.Inner.receive(completion:)(a1);
}

void Publishers.Retry.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v14 = a1;
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  v4 = *(_QWORD *)(*v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = AssociatedTypeWitness;
  v12 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v16 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v11 - v8;
  v9 = *(_QWORD *)(v2 + 88);
  v10 = *(_QWORD *)(v2 + 104);
  v17 = v4;
  v18 = v9;
  v11[4] = v3;
  v19 = v3;
  v20 = v10;
  v11[8] = v10;
  type metadata accessor for Publishers.Retry.Inner.State();
}

_BYTE *assignWithTake for Publishers.Retry.Inner.State(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  const void *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  unint64_t v16;
  size_t v17;
  int v18;
  uint64_t v19;
  uint64_t (*v21)(unint64_t, uint64_t, uint64_t);
  uint64_t v22;
  int v23;
  int v24;
  char v25;
  int v26;
  int v27;
  uint64_t (*v29)(unsigned __int8 *, uint64_t, uint64_t);
  int v30;
  int v31;
  int v32;
  size_t v33;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = a2;
  v4 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ~v11;
  v13 = *(_QWORD *)(v7 + 64) + v11;
  v14 = (v13 & ~v11) + *(_QWORD *)(v9 + 64);
  v15 = v10 | v8;
  v38 = v13;
  v39 = v5;
  v37 = v7;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      v29 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
      v30 = v29(a1, v8, v6);
      v24 = v29(a2, v8, v6);
      v3 = a2;
      if (v30)
      {
LABEL_4:
        if (!v24)
          goto LABEL_36;
        goto LABEL_30;
      }
    }
    else
    {
      v16 = (unint64_t)&a1[v13] & v12;
      v35 = *(_QWORD *)(a3 + 16);
      v36 = v4;
      v17 = (v13 & ~v11) + *(_QWORD *)(v9 + 64);
      v18 = v10 | v8;
      v19 = ~v11;
      v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
      v22 = *(_QWORD *)(v7 + 64) + v11;
      v23 = v21(v16, v10, v5);
      v24 = v21((unint64_t)&a2[v22] & v19, v10, v5);
      v3 = a2;
      v12 = v19;
      v15 = v18;
      v14 = v17;
      v6 = v35;
      v4 = v36;
      if (v23)
        goto LABEL_4;
    }
    v7 = v37;
    if (!v24)
    {
LABEL_34:
      (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 40))(v4, v3, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))((unint64_t)&v4[v38] & v12, ((unint64_t)v3 + v38) & v12, v39);
      return v4;
    }
LABEL_29:
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v4, v6);
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))((unint64_t)&v4[v38] & v12, v39);
    goto LABEL_30;
  }
  v25 = 8 * v14;
  if (!a1[v14])
    goto LABEL_41;
  v26 = (a1[v14] - 1) << v25;
  if (v14 > 3)
    v26 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v27 = v14;
    else
      v27 = 4;
    __asm { BR              X12 }
  }
  if (v26 == -1)
  {
LABEL_41:
    if (!a2[v14])
      goto LABEL_34;
    v31 = (a2[v14] - 1) << v25;
    if (v14 > 3)
      v31 = 0;
    if ((_DWORD)v14)
    {
      if (v14 <= 3)
        v32 = v14;
      else
        v32 = 4;
      __asm { BR              X11 }
    }
    v7 = *(_QWORD *)(v6 - 8);
    if (v31 == -1)
      goto LABEL_34;
    goto LABEL_29;
  }
  if (!a2[v14] || (a2[v14] - 1) << v25 == -1)
  {
LABEL_36:
    (*(void (**)(_BYTE *, const void *, uint64_t))(v37 + 32))(v4, v3, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&v4[v38] & v12, ((unint64_t)v3 + v38) & v12, v39);
    if (!v15)
      v4[v14] = 0;
    return v4;
  }
LABEL_30:
  if (v15)
    v33 = v14;
  else
    v33 = v14 + 1;
  memcpy(v4, v3, v33);
  return v4;
}

uint64_t Publishers.Map.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  uint64_t (**v23)(uint64_t);
  uint64_t v25;
  uint64_t v26;

  v6 = v5;
  v25 = a1;
  v26 = a5;
  v10 = a3[2];
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t *)(v6 + *(int *)(v14 + 44));
  v16 = *v15;
  v17 = v15[1];
  v18 = (uint64_t (*)(uint64_t))swift_allocObject();
  v19 = a3[3];
  v20 = a3[4];
  *((_QWORD *)v18 + 2) = v10;
  *((_QWORD *)v18 + 3) = v19;
  *((_QWORD *)v18 + 4) = a4;
  *((_QWORD *)v18 + 5) = v20;
  *((_QWORD *)v18 + 6) = v25;
  *((_QWORD *)v18 + 7) = a2;
  *((_QWORD *)v18 + 8) = v16;
  *((_QWORD *)v18 + 9) = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v6, v10);
  v21 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v22 = v26;
  v21(v26, v13, v10);
  v23 = (uint64_t (**)(uint64_t))(v22
                                         + *(int *)(type metadata accessor for Publishers.Map(0, v10, a4, v20) + 44));
  *v23 = partial apply for closure #1 in Publishers.Map.map<A>(_:);
  v23[1] = v18;
  swift_retain();
  return swift_retain();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.TryDropWhile<A>()
{
  return MEMORY[0x1E0DEDB38];
}

uint64_t type metadata completion function for Publishers.CompactMap()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservableObjectTable.Storage()
{
  return &type metadata for ObservableObjectTable.Storage;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.CombineLatest3<A, B, C>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t initializeWithTake for ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t type metadata accessor for Deferred(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Deferred);
}

uint64_t type metadata completion function for Publishers.CompactMap.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Just.Inner.__deallocating_deinit()
{
  Just.Inner.deinit();
  return swift_deallocClassInstance();
}

uint64_t *Just.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 104);
  v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112));
  return v0;
}

uint64_t type metadata completion function for PublishedSubject()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t SubjectSubscriber.__deallocating_deinit()
{
  SubjectSubscriber.deinit();
  return swift_deallocClassInstance();
}

uint64_t SubjectSubscriber.deinit()
{
  uint64_t v0;

  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + 16), -1, -1);
  swift_unknownObjectWeakDestroy();
  outlined destroy of Subscription?(v0 + 32);
  return v0;
}

void protocol witness for Subscription.request(_:) in conformance Publishers._Merged<A, B, C>(uint64_t a1)
{
  Publishers._Merged.request(_:)(a1);
}

void Publishers._Merged.request(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t *v26;
  os_unfair_lock_s *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  BOOL v71;
  Swift::Bool IsNativeType;
  uint64_t v73;
  uint64_t *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  os_unfair_lock_s *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  _QWORD v113[3];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v2 = v1;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 80);
  v112 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v111 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v106 = (char *)&v92 - v9;
  v103 = v10;
  MEMORY[0x1E0C80A78](v8);
  v104 = (char *)&v92 - v11;
  v12 = type metadata accessor for Optional();
  v110 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v105 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v92 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v92 - v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v21 = type metadata accessor for Optional();
  v108 = *(_QWORD *)(v21 - 8);
  v109 = v21;
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v26 = (unint64_t *)((char *)&v92 - v25);
  v107 = v4;
  v27 = *(os_unfair_lock_s **)((char *)v2 + *(_QWORD *)(v4 + 176));
  os_unfair_lock_lock(v27);
  v28 = (_QWORD *)*v2;
  if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 + 128)) & 1) != 0)
    goto LABEL_7;
  v29 = v28[19];
  if ((*((_BYTE *)v2 + v29) & 1) != 0)
    goto LABEL_7;
  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    if (!a1)
    {
LABEL_7:
      os_unfair_lock_unlock(v27);
      return;
    }
  }
  v102 = v28[15];
  v30 = *(uint64_t *)((char *)v2 + v102);
  if (v30 == 0x8000000000000000)
    goto LABEL_7;
  if ((*((_BYTE *)v2 + v28[24]) & 1) != 0)
  {
    v31 = v28[25];
    v32 = *(uint64_t *)((char *)v2 + v31);
    v33 = 0x8000000000000000;
    if (v32 == 0x8000000000000000)
      goto LABEL_7;
    if (a1 == 0x8000000000000000)
    {
LABEL_77:
      *(uint64_t *)((char *)v2 + v31) = v33;
      goto LABEL_7;
    }
    if (((v32 | a1) & 0x8000000000000000) == 0)
    {
      v33 = v32 + a1;
      if (__OFADD__(v32, a1))
      {
        v33 = 0x8000000000000000;
      }
      else if ((v33 & 0x8000000000000000) != 0)
      {
        goto LABEL_110;
      }
      goto LABEL_77;
    }
    goto LABEL_105;
  }
  if (a1 != 0x8000000000000000)
  {
    if (((v30 | a1) & 0x8000000000000000) == 0)
    {
      v93 = v29;
      v46 = 0x8000000000000000;
      v47 = __OFADD__(v30, a1);
      v48 = v30 + a1;
      if (v47 || (v46 = v48, (v48 & 0x8000000000000000) == 0))
      {
        *(uint64_t *)((char *)v2 + v102) = v46;
        v118 = static Array._allocateUninitialized(_:)();
        v49 = (uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 168));
        swift_beginAccess();
        v95 = v49;
        v117 = *v49;
        v98 = type metadata accessor for Array();
        v96 = MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF38], v98);
        Sequence.enumerated()();
        v116 = v113[0];
        type metadata accessor for EnumeratedSequence();
        EnumeratedSequence.makeIterator()();
        v94 = (uint64_t)v2 + *(_QWORD *)(*v2 + 160);
        swift_beginAccess();
        v100 = type metadata accessor for EnumeratedSequence.Iterator();
        v97 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        while (1)
        {
          EnumeratedSequence.Iterator.next()();
          (*(void (**)(unint64_t *, char *, uint64_t))(v108 + 32))(v26, v24, v109);
          if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8)
                                                                                    + 48))(v26, 1, TupleTypeMetadata2) == 1)goto LABEL_47;
          v101 = *v26;
          v50 = v110;
          (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v19, (char *)v26 + *(int *)(TupleTypeMetadata2 + 48), v12);
          v51 = *(uint64_t *)((char *)v2 + v102);
          if (v51 != 0x8000000000000000)
          {
            if (v51 < 0)
            {
              __break(1u);
LABEL_99:
              __break(1u);
              goto LABEL_100;
            }
            if (!v51)
            {
              (*(void (**)(char *, uint64_t))(v50 + 8))(v19, v12);
LABEL_47:
              swift_bridgeObjectRelease();
              if (*(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 144)) != *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 136)))
                goto LABEL_50;
              v113[0] = *v95;
              MEMORY[0x1E0C80A78](v113[0]);
              *(&v92 - 4) = v5;
              v66 = v107;
              *(_OWORD *)(&v92 - 3) = *(_OWORD *)(v107 + 88);
              *(&v92 - 1) = *(_QWORD *)(v66 + 104);
              swift_bridgeObjectRetain();
              v67 = Sequence.allSatisfy(_:)();
              swift_bridgeObjectRelease();
              if ((v67 & 1) != 0)
              {
                LODWORD(v110) = 1;
                *((_BYTE *)v2 + v93) = 1;
              }
              else
              {
LABEL_50:
                LODWORD(v110) = 0;
              }
              os_unfair_lock_unlock(v27);
              v68 = v118;
              if (!MEMORY[0x18D77A3A8](v118, v5))
                goto LABEL_69;
              v69 = 0;
              v70 = 0;
              v99 = v27;
              while (1)
              {
                IsNativeType = Array._hoistableIsNativeTypeChecked()();
                Array._checkSubscript(_:wasNativeTypeChecked:)();
                if (IsNativeType)
                {
                  (*(void (**)(char *, unint64_t, uint64_t))(v112 + 16))(v111, v68+ ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80))+ *(_QWORD *)(v112 + 72) * v69, v5);
                  v27 = (os_unfair_lock_s *)(v69 + 1);
                  if (__OFADD__(v69, 1))
                    goto LABEL_68;
                }
                else
                {
                  v80 = _ArrayBuffer._getElementSlowPath(_:)();
                  if (v103 != 8)
                    goto LABEL_114;
                  v113[0] = v80;
                  (*(void (**)(char *, _QWORD *, uint64_t))(v112 + 16))(v111, v113, v5);
                  swift_unknownObjectRelease();
                  v27 = (os_unfair_lock_s *)(v69 + 1);
                  if (__OFADD__(v69, 1))
                  {
LABEL_68:
                    __break(1u);
LABEL_69:
                    v79 = 0;
LABEL_70:
                    swift_bridgeObjectRelease();
                    os_unfair_lock_lock(v27);
                    v81 = *(_QWORD *)(*v2 + 200);
                    v82 = 0x8000000000000000;
                    if (v79 == 0x8000000000000000)
                      goto LABEL_79;
                    v83 = *(uint64_t *)((char *)v2 + v81);
                    if (v83 == 0x8000000000000000)
                      goto LABEL_79;
                    if ((v83 & 0x8000000000000000) == 0)
                    {
                      v82 = v79 + v83;
                      if (__OFADD__(v79, v83))
                      {
                        v82 = 0x8000000000000000;
                        goto LABEL_79;
                      }
                      if ((v82 & 0x8000000000000000) == 0)
                      {
LABEL_79:
                        *(uint64_t *)((char *)v2 + v81) = 0;
                        os_unfair_lock_unlock(v27);
                        if ((v110 & 1) != 0)
                          goto LABEL_80;
                        if ((uint64_t)(v82 - 1) < 0)
                          goto LABEL_91;
                        os_unfair_lock_lock(v27);
                        v86 = *(uint64_t *)((char *)v2 + v102);
                        v87 = 0x8000000000000000;
                        if (v86 == 0x8000000000000000)
                          goto LABEL_90;
                        if (v82 == 0x8000000000000000)
                          goto LABEL_89;
                        if ((v86 & 0x8000000000000000) == 0)
                        {
                          v87 = v86 + v82;
                          if (__OFADD__(v86, v82))
                          {
                            v87 = 0x8000000000000000;
                            goto LABEL_89;
                          }
                          if ((v87 & 0x8000000000000000) == 0)
                          {
LABEL_89:
                            *(uint64_t *)((char *)v2 + v102) = v87;
LABEL_90:
                            os_unfair_lock_unlock(v27);
LABEL_91:
                            v88 = v97[2];
                            if (v88)
                            {
                              v89 = v97 + 4;
                              do
                              {
                                outlined init with copy of Any?((uint64_t)v89, (uint64_t)v113, &demangling cache variable for type metadata for Subscription?);
                                v91 = v114;
                                if (v114)
                                {
                                  v90 = v115;
                                  __swift_project_boxed_opaque_existential_1(v113, v114);
                                  (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 24))(1, v91, v90);
                                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v113);
                                }
                                else
                                {
                                  outlined destroy of CustomStringConvertible?((uint64_t)v113, &demangling cache variable for type metadata for Subscription?);
                                }
                                v89 += 5;
                                --v88;
                              }
                              while (v88);
                            }
LABEL_97:
                            swift_bridgeObjectRelease();
                            return;
                          }
LABEL_113:
                          __break(1u);
LABEL_114:
                          __break(1u);
                          return;
                        }
LABEL_112:
                        __break(1u);
                        goto LABEL_113;
                      }
LABEL_111:
                      __break(1u);
                      goto LABEL_112;
                    }
LABEL_107:
                    __break(1u);
LABEL_108:
                    __break(1u);
LABEL_109:
                    __break(1u);
LABEL_110:
                    __break(1u);
                    goto LABEL_111;
                  }
                }
                v73 = v112;
                v74 = v2;
                v75 = v106;
                v76 = (*(uint64_t (**)(char *, char *, uint64_t))(v112 + 32))(v106, v111, v5);
                MEMORY[0x1E0C80A78](v76);
                *(&v92 - 6) = v5;
                v77 = v107;
                *(_OWORD *)(&v92 - 5) = *(_OWORD *)(v107 + 88);
                *(&v92 - 3) = *(_QWORD *)(v77 + 104);
                *(&v92 - 2) = (uint64_t)v75;
                v78 = v74;
                Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #4 in Publishers._Merged.request(_:));
                (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v5);
                v79 = 0x8000000000000000;
                if (v70 == 0x8000000000000000)
                {
                  v2 = v78;
                }
                else
                {
                  v2 = v78;
                  if (v113[0] != 0x8000000000000000)
                  {
                    if ((v113[0] & 0x8000000000000000) != 0)
                      goto LABEL_99;
                    v79 = v70 + v113[0];
                    if (__OFADD__(v70, v113[0]))
                    {
                      v79 = 0x8000000000000000;
                    }
                    else if ((v79 & 0x8000000000000000) != 0)
                    {
                      goto LABEL_101;
                    }
                  }
                }
                ++v69;
                v70 = v79;
                v71 = v27 == (os_unfair_lock_s *)MEMORY[0x18D77A3A8](v68, v5);
                v27 = v99;
                if (v71)
                  goto LABEL_70;
              }
            }
          }
          (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v17, v19, v12);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v17, 1, v5) == 1)
          {
            v52 = *(void (**)(char *, uint64_t))(v50 + 8);
            v52(v19, v12);
            v52(v17, v12);
          }
          else
          {
            v53 = v112;
            (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v104, v17, v5);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v105, 1, 1, v5);
            v54 = v95;
            swift_beginAccess();
            Array._makeMutableAndUnique()();
            v55 = *v54;
            Array._checkSubscript_mutating(_:)(v101);
            (*(void (**)(unint64_t, char *, uint64_t))(v110 + 40))(v55+ ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80))+ *(_QWORD *)(v110 + 72) * v101, v105, v12);
            swift_endAccess();
            v56 = *(uint64_t *)((char *)v2 + v102);
            if (v56 != 0x8000000000000000)
            {
              if (v56 < 0)
                goto LABEL_108;
              if (!v56)
                goto LABEL_109;
              *(uint64_t *)((char *)v2 + v102) = v56 - 1;
            }
            (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v106, v104, v5);
            type metadata accessor for Array();
            Array.append(_:)();
            if ((v101 & 0x8000000000000000) != 0)
              goto LABEL_103;
            if (v101 >= *(_QWORD *)(*(_QWORD *)v94 + 16))
              goto LABEL_104;
            outlined init with copy of Any?(*(_QWORD *)v94 + 40 * v101 + 32, (uint64_t)v113, &demangling cache variable for type metadata for Subscription?);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v97[2] + 1, 1, v97);
            v57 = v97;
            v59 = v97[2];
            v58 = v97[3];
            v60 = v59 + 1;
            if (v59 >= v58 >> 1)
            {
              v101 = v59 + 1;
              v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v58 > 1), v59 + 1, 1, v97);
              v60 = v101;
              v57 = v61;
            }
            v57[2] = v60;
            v97 = v57;
            outlined init with take of Subscription?((uint64_t)v113, (uint64_t)&v57[5 * v59 + 4]);
            (*(void (**)(char *, uint64_t))(v112 + 8))(v104, v5);
            (*(void (**)(char *, uint64_t))(v110 + 8))(v19, v12);
          }
        }
      }
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    goto LABEL_102;
  }
  *(uint64_t *)((char *)v2 + v102) = 0x8000000000000000;
  v34 = (uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 168));
  swift_beginAccess();
  v35 = *v34;
  v36 = (uint64_t)v105;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v112 + 56))(v105, 1, 1, v5);
  v37 = swift_bridgeObjectRetain();
  v38 = MEMORY[0x18D77A390](v37, v12);
  v39 = specialized Array.init(repeating:count:)(v36, v38, v12);
  (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v36, v12);
  *v34 = v39;
  swift_bridgeObjectRelease();
  v40 = v27;
  v41 = *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 144));
  v42 = *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 136));
  v43 = (uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 160));
  swift_beginAccess();
  v44 = *v43;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v40);
  v113[0] = v35;
  v45 = type metadata accessor for Array();
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF38], v45);
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
  if (v41 != v42)
  {
    v62 = *(_QWORD *)(v44 + 16);
    if (v62)
    {
      v63 = v44 + 32;
      do
      {
        outlined init with copy of Any?(v63, (uint64_t)v113, &demangling cache variable for type metadata for Subscription?);
        v65 = v114;
        if (v114)
        {
          v64 = v115;
          __swift_project_boxed_opaque_existential_1(v113, v114);
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v64 + 24))(0x8000000000000000, v65, v64);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v113);
        }
        else
        {
          outlined destroy of CustomStringConvertible?((uint64_t)v113, &demangling cache variable for type metadata for Subscription?);
        }
        v63 += 40;
        --v62;
      }
      while (v62);
    }
    goto LABEL_97;
  }
LABEL_80:
  swift_bridgeObjectRelease();
  v84 = Publishers._Merged.guardedBecomeTerminal()();
  MEMORY[0x1E0C80A78](v84);
  *(&v92 - 4) = v5;
  v85 = v107;
  *(_OWORD *)(&v92 - 3) = *(_OWORD *)(v107 + 88);
  *(&v92 - 1) = *(_QWORD *)(v85 + 104);
  Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #5 in Publishers._Merged.request(_:));
}

uint64_t Just.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD v23[5];

  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v23[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v10);
  v16 = (char *)&v23[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Just.Inner(0, v8, v17, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4, v8);
  swift_allocObject();
  v20 = Just.Inner.init(downstream:value:)((uint64_t)v16, (uint64_t)v12);
  v23[3] = v19;
  v23[4] = &protocol witness table for Just<A>.Inner<A1>;
  v23[0] = v20;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 40))(v23, a3, a4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
}

void Publishers.FlatMap.Outer.Side.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;

  Publishers.FlatMap.Outer.receiveInner(subscription:_:)(a1, *v1);
}

void Publishers.FlatMap.Outer.receiveInner(subscription:_:)(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[40];

  v3 = v2;
  v6 = (os_unfair_lock_s *)v3[2];
  os_unfair_lock_lock(v6);
  v7 = *(_QWORD *)(*v3 + 200);
  v8 = *(_QWORD *)((char *)v3 + v7);
  v9 = __OFSUB__(v8, 1);
  v10 = v8 - 1;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)((char *)v3 + v7) = v10;
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v14);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v14, a2);
    swift_endAccess();
    if (*(_QWORD *)((char *)v3 + *(_QWORD *)(*v3 + 160)) == 0x8000000000000000)
      v11 = 0x8000000000000000;
    else
      v11 = 1;
    os_unfair_lock_unlock(v6);
    v12 = a1[3];
    v13 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v12);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 24))(v11, v12, v13);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14[2];
  uint64_t v15;

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Subscription((__int128 *)a1, (uint64_t)v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Subscription?(a1);
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v11 = v13;
      }
      outlined init with take of Subscription((__int128 *)(*(_QWORD *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return outlined destroy of Subscription?((uint64_t)v14);
  }
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of Subscription(a3, a4[7] + 40 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

void Publishers.FlatMap.Outer.Side.receive(completion:)(uint64_t a1)
{
  uint64_t *v1;

  Publishers.FlatMap.Outer.receiveInner(completion:_:)(a1, *v1);
}

void Publishers.FlatMap.Outer.receiveInner(completion:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;

  v3 = v2;
  v6 = *v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v59 - v8;
  v11 = v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v15 = MEMORY[0x1E0C80A78](v14);
  v64 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v59 - v17;
  v65 = v20;
  v66 = v19;
  (*(void (**)(char *, uint64_t))(v20 + 16))((char *)&v59 - v17, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v18, 1, AssociatedTypeWitness) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v18, AssociatedTypeWitness);
    v34 = (os_unfair_lock_s *)v3[2];
    os_unfair_lock_lock(v34);
    v35 = *(_QWORD *)(*v3 + 232);
    if (*((_BYTE *)v3 + v35) == 1)
    {
      os_unfair_lock_unlock(v34);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v9, AssociatedTypeWitness);
      return;
    }
    v60 = v9;
    v61 = v11;
    v62 = v6;
    v63 = AssociatedTypeWitness;
    *((_BYTE *)v3 + v35) = 1;
    v36 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 + 184));
    swift_beginAccess();
    v37 = *v36;
    *v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v34);
    v38 = 0;
    v39 = *(_QWORD *)(v37 + 64);
    v67 = v37 + 64;
    v40 = 1 << *(_BYTE *)(v37 + 32);
    v41 = -1;
    if (v40 < 64)
      v41 = ~(-1 << v40);
    v42 = v41 & v39;
    v43 = (unint64_t)(v40 + 63) >> 6;
    v59 = v43 - 1;
    while (!v42)
    {
      v47 = v38 + 1;
      if (__OFADD__(v38, 1))
      {
        __break(1u);
        goto LABEL_48;
      }
      if (v47 < v43)
      {
        v48 = *(_QWORD *)(v67 + 8 * v47);
        if (v48)
          goto LABEL_20;
        v49 = v38 + 2;
        ++v38;
        if (v47 + 1 < v43)
        {
          v48 = *(_QWORD *)(v67 + 8 * v49);
          if (v48)
            goto LABEL_23;
          v38 = v47 + 1;
          if (v47 + 2 < v43)
          {
            v48 = *(_QWORD *)(v67 + 8 * (v47 + 2));
            if (v48)
            {
              v47 += 2;
              goto LABEL_20;
            }
            v49 = v47 + 3;
            v38 = v47 + 2;
            if (v47 + 3 < v43)
            {
              v48 = *(_QWORD *)(v67 + 8 * v49);
              if (!v48)
              {
                while (1)
                {
                  v47 = v49 + 1;
                  if (__OFADD__(v49, 1))
                    break;
                  if (v47 >= v43)
                  {
                    v38 = v59;
                    goto LABEL_34;
                  }
                  v48 = *(_QWORD *)(v67 + 8 * v47);
                  ++v49;
                  if (v48)
                    goto LABEL_20;
                }
LABEL_49:
                __break(1u);
                return;
              }
LABEL_23:
              v47 = v49;
LABEL_20:
              v42 = (v48 - 1) & v48;
              v45 = __clz(__rbit64(v48)) + (v47 << 6);
              v38 = v47;
LABEL_16:
              v46 = *(_QWORD *)(v37 + 56);
              *(_QWORD *)&v68 = *(_QWORD *)(*(_QWORD *)(v37 + 48) + 8 * v45);
              outlined init with copy of Subscription(v46 + 40 * v45, (uint64_t)&v68 + 8);
              goto LABEL_35;
            }
          }
        }
      }
LABEL_34:
      v42 = 0;
      v69 = 0u;
      v70 = 0u;
      v68 = 0u;
LABEL_35:
      outlined init with take of (key: Int, value: Subscription)?((uint64_t)&v68, (uint64_t)&v71);
      if (!v74)
      {
        swift_release();
        os_unfair_recursive_lock_lock_with_options();
        v53 = v61;
        v54 = v64;
        v55 = v60;
        v56 = v63;
        (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v64, v60, v63);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v56);
        (*(void (**)(char *, _QWORD))(*(_QWORD *)(v62 + 120) + 56))(v54, *(_QWORD *)(v62 + 96));
        (*(void (**)(char *, uint64_t))(v65 + 8))(v54, v66);
        os_unfair_recursive_lock_unlock();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v56);
        return;
      }
      v50 = v71;
      outlined init with take of Subscription(&v72, (uint64_t)&v68);
      if (v50 != a2)
      {
        v52 = *((_QWORD *)&v69 + 1);
        v51 = v70;
        __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
        (*(void (**)(uint64_t))(*(_QWORD *)(v51 + 8) + 8))(v52);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
    }
    v44 = __clz(__rbit64(v42));
    v42 &= v42 - 1;
    v45 = v44 | (v38 << 6);
    goto LABEL_16;
  }
  v21 = v11;
  v22 = v6;
  v23 = (os_unfair_lock_s *)v3[2];
  os_unfair_lock_lock(v23);
  v24 = (char *)v3 + *(_QWORD *)(*v3 + 184);
  swift_beginAccess();
  specialized Dictionary.removeValue(forKey:)(a2, (uint64_t)&v71);
  swift_endAccess();
  outlined destroy of Subscription?((uint64_t)&v71);
  v25 = (_QWORD *)*v3;
  v26 = *(_QWORD *)(*v3 + 232);
  if ((*((_BYTE *)v3 + v26) & 1) == 0 && *((_BYTE *)v3 + v25[30]) == 1)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v24 + 16);
    v28 = *(_QWORD *)((char *)v3 + v25[25]);
    v29 = __OFADD__(v27, v28);
    v30 = v27 + v28;
    if (v29)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    if (!v30)
    {
      v31 = (_QWORD *)((char *)v3 + v25[26]);
      swift_beginAccess();
      v71 = *v31;
      swift_getAssociatedTypeWitness();
      swift_getTupleTypeMetadata2();
      v32 = type metadata accessor for Array();
      MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v32);
      if ((Collection.isEmpty.getter() & 1) != 0)
      {
        *((_BYTE *)v3 + v26) = 1;
        os_unfair_lock_unlock(v23);
        os_unfair_recursive_lock_lock_with_options();
        v33 = v64;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v64, 1, 1, AssociatedTypeWitness);
        (*(void (**)(char *, _QWORD))(*(_QWORD *)(v22 + 120) + 56))(v33, *(_QWORD *)(v22 + 96));
        (*(void (**)(char *, uint64_t))(v65 + 8))(v33, v66);
        os_unfair_recursive_lock_unlock();
        return;
      }
      v25 = (_QWORD *)*v3;
    }
  }
  if (*(_QWORD *)((char *)v3 + v25[27]) != 0x8000000000000000)
  {
    swift_beginAccess();
    outlined init with copy of Any?((uint64_t)(v3 + 3), (uint64_t)&v68, &demangling cache variable for type metadata for Subscription?);
    if (*((_QWORD *)&v69 + 1))
    {
      outlined init with take of Subscription(&v68, (uint64_t)&v71);
      os_unfair_lock_unlock(v23);
      v57 = v73;
      v58 = v74;
      __swift_project_boxed_opaque_existential_1(&v71, v73);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 24))(1, v57, v58);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);
      return;
    }
    outlined destroy of Subscription?((uint64_t)&v68);
  }
  os_unfair_lock_unlock(v23);
}

uint64_t outlined destroy of Subscription?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.FlatMap<A, B>.Outer<A1>(unint64_t a1)
{
  Publishers.FlatMap.Outer.request(_:)(a1);
}

void Publishers.FlatMap.Outer.request(_:)(unint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *IsNativeType;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  char **v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  os_unfair_lock_s *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _BYTE *v91;
  _QWORD *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  os_unfair_lock_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102[2];
  uint64_t v103;
  __int128 v104;
  uint64_t v105;

  v2 = v1;
  v97 = *v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v89 = AssociatedTypeWitness;
  v88 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88);
  v86 = (char *)&v83 - v7;
  v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v11 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  IsNativeType = (uint64_t *)((char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (uint64_t *)((char *)&v83 - v15);
  v85 = v17;
  MEMORY[0x1E0C80A78](v14);
  v19 = (uint64_t *)((char *)&v83 - v18);
  if (a1 != 0x8000000000000000)
  {
    if ((a1 & 0x8000000000000000) != 0)
      goto LABEL_103;
    if (!a1)
    {
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
  }
  v20 = v2[8];
  os_unfair_recursive_lock_lock_with_options();
  v94 = *(char **)(*v2 + 168);
  v21 = v94[(_QWORD)v2];
  v95 = v20;
  os_unfair_recursive_lock_unlock();
  v98 = (os_unfair_lock_t)v2[2];
  os_unfair_lock_lock(v98);
  v22 = (_QWORD *)*v2;
  if ((v21 & 1) != 0)
  {
    v23 = v22[20];
    v24 = *(_QWORD *)((char *)v2 + v23);
    v25 = 0x8000000000000000;
    v26 = v98;
    if (v24 == 0x8000000000000000)
    {
LABEL_58:
      os_unfair_lock_unlock(v26);
      return;
    }
    if (a1 == 0x8000000000000000)
    {
LABEL_57:
      *(_QWORD *)((char *)v2 + v23) = v25;
      goto LABEL_58;
    }
    if (((v24 | a1) & 0x8000000000000000) == 0)
    {
      v25 = v24 + a1;
      if (__OFADD__(v24, a1))
      {
        v25 = 0x8000000000000000;
      }
      else if ((v25 & 0x8000000000000000) != 0)
      {
        goto LABEL_109;
      }
      goto LABEL_57;
    }
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  v27 = v22[29];
  if (*((_BYTE *)v2 + v27) == 1)
    goto LABEL_12;
  v28 = v22[20];
  v29 = 0x8000000000000000;
  v90 = v2;
  v84 = v27;
  if (a1 != 0x8000000000000000)
    goto LABEL_24;
  *(_QWORD *)((char *)v2 + v28) = 0x8000000000000000;
  v30 = (_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 208));
  swift_beginAccess();
  v28 = *v30;
  swift_bridgeObjectRetain();
  *v30 = static Array._allocateUninitialized(_:)();
  swift_bridgeObjectRelease();
  v31 = (char **)((char *)v2 + *(_QWORD *)(*v2 + 184));
  swift_beginAccess();
  v96 = *v31;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v98);
  os_unfair_recursive_lock_lock_with_options();
  v94[(_QWORD)v2] = 1;
  if (MEMORY[0x18D77A3A8](v28, TupleTypeMetadata2))
  {
    v2 = 0;
    v93 = (char *)v19 + *(int *)(TupleTypeMetadata2 + 48);
    v92 = *(_QWORD **)(v97 + 120);
    v91 = (_BYTE *)v92[6];
    a1 = (unint64_t)v90 + *(_QWORD *)(*v90 + 152);
    do
    {
      IsNativeType = (uint64_t *)Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if ((IsNativeType & 1) != 0)
      {
        (*(void (**)(_QWORD *, unint64_t, uint64_t))(v10 + 16))(v19, v28+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * (_QWORD)v2, TupleTypeMetadata2);
        v32 = (char *)v2 + 1;
        if (__OFADD__(v2, 1))
          goto LABEL_23;
      }
      else
      {
        v34 = _ArrayBuffer._getElementSlowPath(_:)();
        if (v85 != 8)
          goto LABEL_113;
        *(_QWORD *)&v102[0] = v34;
        (*(void (**)(_QWORD *, __int128 *, uint64_t))(v10 + 16))(v19, v102, TupleTypeMetadata2);
        swift_unknownObjectRelease();
        v32 = (char *)v2 + 1;
        if (__OFADD__(v2, 1))
        {
LABEL_23:
          __break(1u);
LABEL_24:
          v35 = *(_QWORD *)((char *)v2 + v28);
          if (v35 != v29)
          {
            if (((v35 | a1) & 0x8000000000000000) == 0)
            {
              v36 = v35 + a1;
              if (__OFADD__(v35, a1))
              {
                v36 = 0x8000000000000000;
                goto LABEL_60;
              }
              if ((v36 & 0x8000000000000000) == 0)
              {
LABEL_60:
                *(_QWORD *)((char *)v2 + v28) = v36;
                v22 = (_QWORD *)*v2;
                goto LABEL_61;
              }
LABEL_110:
              __break(1u);
LABEL_111:
              __break(1u);
              goto LABEL_112;
            }
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
            goto LABEL_110;
          }
LABEL_61:
          v51 = (_QWORD *)((char *)v2 + v22[26]);
          v52 = v22[19];
          v53 = v22[23];
          v91 = (_BYTE *)v22[22];
          swift_beginAccess();
          v54 = type metadata accessor for Array();
          *(_QWORD *)&v102[0] = *v51;
          MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v54);
          if ((Collection.isEmpty.getter() & 1) != 0)
          {
LABEL_62:
            v55 = v84;
            if ((*((_BYTE *)v2 + v84) & 1) == 0 && *((_BYTE *)v2 + *(_QWORD *)(*v2 + 240)) == 1)
            {
              v56 = (_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 208));
              swift_beginAccess();
              *(_QWORD *)&v99 = *v56;
              v57 = type metadata accessor for Array();
              MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v57);
              if ((Collection.isEmpty.getter() & 1) != 0)
              {
                v58 = (char *)v2 + *(_QWORD *)(*v2 + 184);
                swift_beginAccess();
                v59 = *(_QWORD *)(*(_QWORD *)v58 + 16);
                v60 = *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 200));
                v61 = __OFADD__(v59, v60);
                v62 = v59 + v60;
                if (v61)
                  goto LABEL_111;
                if (!v62)
                {
                  *((_BYTE *)v2 + v55) = 1;
                  os_unfair_lock_unlock(v98);
                  os_unfair_recursive_lock_lock_with_options();
                  v82 = v86;
                  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v86, 1, 1);
                  (*(void (**)(char *, _QWORD))(*(_QWORD *)(v97 + 120) + 56))(v82, *(_QWORD *)(v97 + 96));
                  (*(void (**)(char *, uint64_t))(v87 + 8))(v82, v88);
                  os_unfair_recursive_lock_unlock();
                  return;
                }
              }
            }
LABEL_12:
            os_unfair_lock_unlock(v98);
            return;
          }
          v96 = (char *)v2 + v53;
          v93 = (char *)v2 + v52;
          v92 = v51;
          while (2)
          {
            v69 = *(_QWORD *)((char *)v2 + v28);
            if (v69 != 0x8000000000000000)
            {
              if (v69 < 0)
                goto LABEL_99;
              if (!v69)
                goto LABEL_62;
            }
            swift_beginAccess();
            MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF58], v54);
            RangeReplaceableCollection.removeFirst()();
            swift_endAccess();
            v70 = *(_QWORD *)((char *)v2 + v28);
            if (v70 != 0x8000000000000000)
            {
              if (v70 < 0)
                goto LABEL_100;
              if (!v70)
              {
LABEL_101:
                __break(1u);
LABEL_102:
                __break(1u);
LABEL_103:
                __break(1u);
                goto LABEL_104;
              }
              *(_QWORD *)((char *)v2 + v28) = v70 - 1;
            }
            v71 = v28;
            v72 = *IsNativeType;
            v73 = (uint64_t *)v96;
            swift_beginAccess();
            v74 = *v73;
            if (*(_QWORD *)(v74 + 16) && (v75 = specialized __RawDictionaryStorage.find<A>(_:)(v72), (v76 & 1) != 0))
            {
              outlined init with copy of Subscription(*(_QWORD *)(v74 + 56) + 40 * v75, (uint64_t)v102);
            }
            else
            {
              v103 = 0;
              memset(v102, 0, sizeof(v102));
            }
            swift_endAccess();
            v77 = v98;
            os_unfair_lock_unlock(v98);
            os_unfair_recursive_lock_lock_with_options();
            v78 = v94;
            v94[(_QWORD)v2] = 1;
            v79 = (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)(v97 + 120) + 48))((char *)IsNativeType + *(int *)(TupleTypeMetadata2 + 48), *(_QWORD *)(v97 + 96));
            v78[(_QWORD)v2] = 0;
            os_unfair_recursive_lock_unlock();
            if (v79 == 0x8000000000000000)
            {
              os_unfair_lock_lock(v77);
              v28 = v71;
              v80 = 0x8000000000000000;
              if (*(_QWORD *)((char *)v2 + v71) == 0x8000000000000000)
              {
LABEL_94:
                os_unfair_lock_unlock(v98);
                goto LABEL_95;
              }
            }
            else
            {
              if (v79 < 0)
                goto LABEL_102;
              v28 = v71;
              if (!v79)
              {
LABEL_95:
                outlined init with copy of Any?((uint64_t)v102, (uint64_t)&v104, &demangling cache variable for type metadata for Subscription?);
                if (v105)
                {
                  outlined init with take of Subscription(&v104, (uint64_t)&v99);
                  v63 = v91;
                  v91[(_QWORD)v2] = 1;
                  v64 = *((_QWORD *)&v100 + 1);
                  v65 = v101;
                  __swift_project_boxed_opaque_existential_1(&v99, *((uint64_t *)&v100 + 1));
                  v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 24);
                  v67 = v64;
                  v28 = v71;
                  v68 = v65;
                  v2 = v90;
                  v66(1, v67, v68);
                  v63[(_QWORD)v2] = 0;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
                }
                else
                {
                  outlined destroy of Subscription?((uint64_t)&v104);
                }
                os_unfair_lock_lock(v98);
                outlined destroy of Subscription?((uint64_t)v102);
                (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(IsNativeType, TupleTypeMetadata2);
                *(_QWORD *)&v102[0] = *v92;
                MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v54);
                if ((Collection.isEmpty.getter() & 1) != 0)
                  goto LABEL_62;
                continue;
              }
              os_unfair_lock_lock(v98);
              v81 = *(_QWORD *)((char *)v2 + v71);
              if (v81 == 0x8000000000000000)
                goto LABEL_94;
              if ((v81 | v79) < 0)
                goto LABEL_105;
              v61 = __OFADD__(v81, v79);
              v80 = v81 + v79;
              if (v61)
              {
                v80 = 0x8000000000000000;
              }
              else if ((v80 & 0x8000000000000000) != 0)
              {
                goto LABEL_107;
              }
            }
            break;
          }
          *(_QWORD *)((char *)v2 + v28) = v80;
          goto LABEL_94;
        }
      }
      v33 = (char *)v16 + *(int *)(TupleTypeMetadata2 + 48);
      *v16 = *v19;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v33, v93, v8);
      ((void (*)(char *, _QWORD, _QWORD *))v91)(v33, *(_QWORD *)(v97 + 96), v92);
      (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v16, TupleTypeMetadata2);
      v2 = (_QWORD *)((char *)v2 + 1);
    }
    while (v32 != (char *)MEMORY[0x18D77A3A8](v28, TupleTypeMetadata2));
  }
  swift_bridgeObjectRelease();
  v94[(_QWORD)v90] = 0;
  os_unfair_recursive_lock_unlock();
  v37 = 0;
  v38 = *((_QWORD *)v96 + 8);
  v94 = v96 + 64;
  v39 = 1 << v96[32];
  v40 = -1;
  if (v39 < 64)
    v40 = ~(-1 << v39);
  v41 = v40 & v38;
  v42 = (unint64_t)(v39 + 63) >> 6;
  v93 = (char *)(v42 - 1);
  if ((v40 & v38) == 0)
    goto LABEL_36;
LABEL_34:
  v45 = __clz(__rbit64(v41));
  v41 &= v41 - 1;
  v46 = v45 | (v37 << 6);
  while (2)
  {
    v47 = *((_QWORD *)v96 + 7);
    *(_QWORD *)&v99 = *(_QWORD *)(*((_QWORD *)v96 + 6) + 8 * v46);
    outlined init with copy of Subscription(v47 + 40 * v46, (uint64_t)&v99 + 8);
    while (1)
    {
      outlined init with take of (key: Int, value: Subscription)?((uint64_t)&v99, (uint64_t)v102);
      if (!v103)
      {
        swift_release();
        os_unfair_lock_lock(v98);
        v2 = v90;
        goto LABEL_62;
      }
      outlined init with take of Subscription((__int128 *)((char *)v102 + 8), (uint64_t)&v99);
      v43 = *((_QWORD *)&v100 + 1);
      v44 = v101;
      __swift_project_boxed_opaque_existential_1(&v99, *((uint64_t *)&v100 + 1));
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v44 + 24))(0x8000000000000000, v43, v44);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
      if (v41)
        goto LABEL_34;
LABEL_36:
      v48 = v37 + 1;
      if (__OFADD__(v37, 1))
      {
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
        goto LABEL_101;
      }
      if (v48 < v42)
      {
        v49 = *(_QWORD *)&v94[8 * v48];
        if (v49)
          goto LABEL_39;
        v50 = v37 + 2;
        ++v37;
        if (v48 + 1 < v42)
        {
          v49 = *(_QWORD *)&v94[8 * v50];
          if (v49)
            goto LABEL_42;
          v37 = v48 + 1;
          if (v48 + 2 < v42)
          {
            v49 = *(_QWORD *)&v94[8 * v48 + 16];
            if (v49)
            {
              v48 += 2;
              goto LABEL_39;
            }
            v50 = v48 + 3;
            v37 = v48 + 2;
            if (v48 + 3 < v42)
              break;
          }
        }
      }
LABEL_53:
      v41 = 0;
      v100 = 0u;
      v101 = 0u;
      v99 = 0u;
    }
    v49 = *(_QWORD *)&v94[8 * v50];
    if (v49)
    {
LABEL_42:
      v48 = v50;
LABEL_39:
      v41 = (v49 - 1) & v49;
      v46 = __clz(__rbit64(v49)) + (v48 << 6);
      v37 = v48;
      continue;
    }
    break;
  }
  while (1)
  {
    v48 = v50 + 1;
    if (__OFADD__(v50, 1))
      break;
    if (v48 >= v42)
    {
      v37 = (int64_t)v93;
      goto LABEL_53;
    }
    v49 = *(_QWORD *)&v94[8 * v48];
    ++v50;
    if (v49)
      goto LABEL_39;
  }
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
}

double specialized Dictionary.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) != 0)
  {
    v7 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v2;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v9 = v11;
    }
    outlined init with take of Subscription((__int128 *)(*(_QWORD *)(v9 + 56) + 40 * v7), a2);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(__int128 *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7] + 40 * v10;
        __swift_destroy_boxed_opaque_existential_1(v17);
        return outlined init with take of Subscription(a1, v17);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of (key: Int, value: Subscription)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: Subscription)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.FlatMap<A, B>.Outer<A1>(_QWORD *a1)
{
  return Publishers.FlatMap.Outer.receive(subscription:)(a1);
}

uint64_t Publishers.FlatMap.Outer.receive(subscription:)(_QWORD *a1)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  uint64_t v11;

  v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  outlined init with copy of Any?((uint64_t)(v1 + 3), (uint64_t)v10, &demangling cache variable for type metadata for Subscription?);
  v4 = v11;
  outlined destroy of Subscription?((uint64_t)v10);
  if (v4 || *((_BYTE *)v1 + *(_QWORD *)(*v1 + 232)) == 1)
  {
    os_unfair_lock_unlock(v3);
    v6 = a1[3];
    v5 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v6);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v10);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v10, (uint64_t)(v1 + 3));
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    v8 = a1[3];
    v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v9 + 24))(*(_QWORD *)((char *)v1 + *(_QWORD *)(*v1 + 216)), v8, v9);
  }
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t Publishers._Merged.Side.receive(subscription:)(_QWORD *a1)
{
  unint64_t *v1;

  return Publishers._Merged.receive(subscription:_:)(a1, *v1);
}

uint64_t Publishers._Merged.receive(subscription:_:)(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  uint64_t v16;

  v6 = *(os_unfair_lock_s **)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 176));
  os_unfair_lock_lock(v6);
  if ((*(_BYTE *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 128)) & 1) != 0)
    goto LABEL_5;
  v7 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 160);
  swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (*(_QWORD *)(*(_QWORD *)v7 + 16) <= a2)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
    *(_QWORD *)v7 = result;
    goto LABEL_8;
  }
  outlined init with copy of Any?(*(_QWORD *)v7 + 40 * a2 + 32, (uint64_t)v15, &demangling cache variable for type metadata for Subscription?);
  v8 = v16;
  outlined destroy of CustomStringConvertible?((uint64_t)v15, &demangling cache variable for type metadata for Subscription?);
  if (v8)
  {
LABEL_5:
    os_unfair_lock_unlock(v6);
    v10 = a1[3];
    v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 + 8) + 8))(v10);
  }
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v15);
  swift_beginAccess();
  v3 = *(_QWORD **)v7;
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v7 = v3;
  if ((result & 1) == 0)
    goto LABEL_15;
LABEL_8:
  if (v3[2] <= a2)
  {
    __break(1u);
  }
  else
  {
    outlined assign with take of Subscription?((uint64_t)v15, (uint64_t)&v3[5 * a2 + 4]);
    swift_endAccess();
    if (*(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 120)) == 0x8000000000000000)
      v12 = 0x8000000000000000;
    else
      v12 = 1;
    os_unfair_lock_unlock(v6);
    v13 = a1[3];
    v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v14 + 24))(v12, v13, v14);
  }
  return result;
}

uint64_t outlined init with copy of Subscription?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Subscription?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for Just.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Just.Inner);
}

uint64_t *Just.Inner.init(downstream:value:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v14 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 88);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v14 - v8;
  v10 = (uint64_t)v2 + *(_QWORD *)(v4 + 104);
  v11 = *(_QWORD *)(v5 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v10, 1, 1, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v9, a1, v5);
  v12((uint64_t)v9, 0, 1, v5);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v10, v9, v6);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 80) - 8) + 32))((uint64_t)v2 + *(_QWORD *)(*v2 + 112), v14);
  return v2;
}

uint64_t storeEnumTagSinglePayload for Publishers._Merged.Side(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Sequence<A, B>.Inner<A1, B1, C1>(void (*a1)(_QWORD, _QWORD, _QWORD))
{
  Publishers.Sequence.Inner.request(_:)(a1);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Catch<A, B>.Inner<A1>()
{
  Publishers.Catch.Inner.request(_:)();
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Output<A>.Inner<A1>(uint64_t a1)
{
  Publishers.Output.Inner.request(_:)(a1);
}

void Publishers.Output.Inner.request(_:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7[2];
  char v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 144));
  os_unfair_lock_lock(v3);
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 120);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(v3);
    v5 = v10;
    v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Retry<A>.Inner<A1>()
{
  Publishers.Retry.Inner.request(_:)();
}

uint64_t ObservableObjectPublisher.Inner.__deallocating_deinit()
{
  ObservableObjectPublisher.Inner.deinit();
  return swift_deallocClassInstance();
}

uint64_t *ObservableObjectPublisher.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 144)), -1, -1);
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 152)), -1, -1);
  swift_weakDestroy();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 112) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 136));
  return v0;
}

void partial apply for closure #1 in Publishers.SubscribeOn.receive<A>(subscriber:)()
{
  type metadata accessor for Publishers.SubscribeOn();
}

void sub_18B54E6E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(a1 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  closure #1 in Publishers.SubscribeOn.receive<A>(subscriber:)(v2 + v9, v2 + ((v9 + *(_QWORD *)(v8 + 64) + v10) & ~v10), v1, v3, v4, v5, v6, v7);
}

void Publisher.subscribe<A>(on:options:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = v6;
  v24 = a6;
  v25 = a5;
  v22 = a1;
  v23 = a2;
  swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(a4 - 8);
  v16 = MEMORY[0x1E0C80A78](v12);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, v7, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v22, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v23, v10);
  Publishers.SubscribeOn.init(upstream:scheduler:options:)((uint64_t)v20, a3, v24);
}

void Publishers.SubscribeOn.init(upstream:scheduler:options:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.SubscribeOn();
}

uint64_t sub_18B54E914(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v4 + *(int *)(a1 + 52), v3, v2);
  v6 = v4 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v1, v7);
}

void type metadata accessor for Publishers.SubscribeOn()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t ObservableObjectPublisher.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock), -1, -1);
  v1 = v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher__registrar;
  v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for CurrentValueSubject.Conduit()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for Optional.Publisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Optional.Publisher);
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t base witness table accessor for Equatable in ObservableObjectPublisher.Conduit()
{
  return lazy protocol witness table accessor for type ObservableObjectPublisher.Conduit and conformance ObservableObjectPublisher.Conduit(&lazy protocol witness table cache variable for type ObservableObjectPublisher.Conduit and conformance ObservableObjectPublisher.Conduit, (uint64_t)&protocol conformance descriptor for ObservableObjectPublisher.Conduit);
}

uint64_t lazy protocol witness table accessor for type ObservableObjectPublisher.Conduit and conformance ObservableObjectPublisher.Conduit(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ObservableObjectPublisher.Conduit();
    result = MEMORY[0x18D77ACE4](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Cancellable.cancel() in conformance ObservableObjectPublisher.Inner<A>()
{
  return ObservableObjectPublisher.Inner.cancel()();
}

uint64_t ObservableObjectPublisher.Inner.cancel()()
{
  Swift::UInt v0;
  os_unfair_lock_s *v1;
  uint64_t result;

  v1 = *(os_unfair_lock_s **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  os_unfair_lock_lock(v1);
  *(_BYTE *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160)) = 2;
  os_unfair_lock_unlock(v1);
  result = swift_weakLoadStrong();
  if (result)
  {
    ObservableObjectPublisher.remove(_:)(v0);
    return swift_release();
  }
  return result;
}

void ObservableObjectPublisher.remove(_:)(Swift::UInt a1)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[16];
  _BYTE v9[8];
  uint64_t v10;

  v2 = v1;
  v4 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock);
  os_unfair_lock_lock(v4);
  v5 = v2 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections;
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(a1);
  swift_endAccess();
  swift_release();
  if ((*(_QWORD *)v5 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v6 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  }
  os_unfair_lock_unlock(v4);
  if (!v6)
  {
    v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_identifier);
    if (v7)
    {
      if (one-time initialization token for lock != -1)
        swift_once();
      os_unfair_lock_lock((os_unfair_lock_t)static ObservableObjectTable.lock);
      if (one-time initialization token for contents != -1)
        swift_once();
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakAssign();
      v10 = v7;
      outlined init with take of ObservableObjectTable.Storage((uint64_t)v9, (uint64_t)v8);
      swift_beginAccess();
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v8);
      swift_endAccess();
      outlined destroy of ObservableObjectTable.Storage((uint64_t)v8);
      swift_release();
      os_unfair_lock_unlock((os_unfair_lock_t)static ObservableObjectTable.lock);
    }
  }
}

unint64_t specialized Set._Variant.remove(_:)(Swift::UInt a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v15;

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v3 < 0)
      v4 = *v1;
    else
      v4 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v5 = __CocoaSet.contains(_:)();
    swift_release();
    if ((v5 & 1) != 0)
    {
      v6 = specialized Set._Variant._migrateToNative(_:removing:)(v4, a1);
      swift_bridgeObjectRelease();
      return v6;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v3 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    return 0;
  v10 = *(_QWORD *)(v3 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a1)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v1;
  v15 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>);
    v13 = v15;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v9);
  specialized _NativeSet._delete(at:)(v9);
  *v1 = v15;
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_QWORD *)(v12 + 8 * v2);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_OWORD *)(v12 + 16 * v2);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t type metadata accessor for ObservableObjectPublisher.Conduit()
{
  return objc_opt_self();
}

void Publisher.mapError<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)v13 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v13[0] = a3;
  v13[1] = a4;
  v13[2] = a5;
  v13[3] = a6;
  type metadata accessor for Publishers.MapError();
}

uint64_t sub_18B54F1A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v7 = (_QWORD *)(v4 + *(int *)(a1 + 52));
  *v7 = v3;
  v7[1] = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v5, v1);
  return swift_retain();
}

void type metadata accessor for Publishers.MapError()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t type metadata completion function for Publishers.SubscribeOn()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v0 = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      v0 = type metadata accessor for Optional();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return v0;
}

void type metadata accessor for Publishers.SwitchToLatest()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t type metadata accessor for Publishers.MergeMany(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.MergeMany);
}

uint64_t partial apply for closure #1 in Publishers._Merged.request(_:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in Publishers._Merged.request(_:)(a1, v1);
}

uint64_t closure #1 in Publishers._Merged.request(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;

  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 80);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v15 - v8;
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, v4);
  MEMORY[0x1E0C80A78](v14);
  *(&v15 - 6) = v4;
  *(_OWORD *)(&v15 - 5) = *(_OWORD *)(v3 + 88);
  *(&v15 - 3) = *(_QWORD *)(v3 + 104);
  *(&v15 - 2) = (uint64_t)v12;
  Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #1 in closure #1 in Publishers._Merged.request(_:));
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v4);
}

void partial apply for closure #1 in Publishers.Debounce.Inner.receive(_:)()
{
  uint64_t v0;

  closure #1 in Publishers.Debounce.Inner.receive(_:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t Publisher.map<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a2);
  v12 = *a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, a2);
  *(_QWORD *)(a4
            + *(int *)(type metadata accessor for Publishers.MapKeyPath(0, a2, *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v12 + 8), a3)+ 44)) = a1;
  return swift_retain();
}

uint64_t Publishers.MapKeyPath.init(upstream:keyPath:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t result;

  v9 = *a2;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  result = type metadata accessor for Publishers.MapKeyPath(0, a3, *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v9 + 8), a4);
  *(_QWORD *)(a5 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t type metadata accessor for Publishers.MapKeyPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.MapKeyPath);
}

uint64_t Publisher.drop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v18;

  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v15, v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v15, a3);
  v16 = (_QWORD *)(a6 + *(int *)(a5(0, a3, a4) + 36));
  *v16 = a1;
  v16[1] = a2;
  return swift_retain();
}

uint64_t type metadata accessor for Publishers.Filter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Filter);
}

void Publisher.debounce<A>(for:scheduler:options:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v27 = a1;
  v30 = a7;
  v31 = a6;
  v28 = a2;
  v29 = a3;
  swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v24 = *(_QWORD *)(v9 - 8);
  v25 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v24 - v11;
  v13 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v20 = (char *)&v24 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v24 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v22, v26, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v27, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v28, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v12, v29, v25);
  Publishers.Debounce.init(upstream:dueTime:scheduler:options:)((uint64_t)v22, a4, v30);
}

void Publishers.Debounce.init(upstream:dueTime:scheduler:options:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.Debounce();
}

uint64_t sub_18B54F914(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;

  v7 = v3 + a1[13];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v7, v5, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v3 + a1[14], v4, v2);
  v9 = v3 + a1[15];
  swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v1, v10);
}

void type metadata accessor for Publishers.Debounce()
{
  JUMPOUT(0x18D77AC60);
}

void Publisher.combineLatest<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v13);
  v19 = (char *)&v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a6, v19, a2);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = v21;
  type metadata accessor for Publishers.CombineLatest();
}

uint64_t sub_18B54FB10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void Publishers.CombineLatest.init(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for Publishers.CombineLatest();
}

uint64_t sub_18B54FBA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void type metadata accessor for Publishers.CombineLatest()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t type metadata accessor for Publishers.CompactMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.CompactMap);
}

uint64_t Publisher.removeDuplicates(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v13, v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, a3);
  v15 = (_QWORD *)(a5 + *(int *)(type metadata accessor for Publishers.RemoveDuplicates(0, a3, a4, v14) + 36));
  *v15 = a1;
  v15[1] = a2;
  return swift_retain();
}

uint64_t Publisher<>.removeDuplicates()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t (**v15)();
  uint64_t v16;

  v9 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a1);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v12 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, a1);
  result = type metadata accessor for Publishers.RemoveDuplicates(0, a1, a2, v13);
  v15 = (uint64_t (**)())(a4 + *(int *)(result + 36));
  *v15 = partial apply for basicEquality<A>(_:_:);
  v15[1] = (uint64_t (*)())v12;
  return result;
}

uint64_t type metadata accessor for Publishers.RemoveDuplicates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.RemoveDuplicates);
}

uint64_t initializeWithCopy for Publishers.MapKeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for Publishers.Debounce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  size_t v25;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v11 + a1) & ~v11;
  v13 = (v7 + v11 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, v13, AssociatedTypeWitness);
  v14 = *(_QWORD *)(v8 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = *(_QWORD *)(v10 + 64) + v15;
  v17 = (v16 + v12) & ~v15;
  v18 = (v16 + v13) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17, v18, v8);
  v19 = *(_QWORD *)(v14 + 64);
  v20 = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (void *)((v19 + v22 + v17) & ~v22);
  v24 = (const void *)((v19 + v22 + v18) & ~v22);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v24, 1, v20))
  {
    if (*(_DWORD *)(v21 + 84))
      v25 = *(_QWORD *)(v21 + 64);
    else
      v25 = *(_QWORD *)(v21 + 64) + 1;
    memcpy(v23, v24, v25);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v23, v24, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v23, 0, 1, v20);
  }
  return a1;
}

uint64_t initializeWithCopy for Publishers.Reduce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  return a1;
}

uint64_t Publishers.TryMap.Inner.__deallocating_deinit()
{
  Publishers.TryMap.Inner.deinit();
  return swift_deallocClassInstance();
}

uint64_t *Publishers.TryMap.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 144)), -1, -1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 120));
  swift_release();
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(_QWORD *)(*v0 + 136));
  return v0;
}

uint64_t Future.__deallocating_deinit()
{
  Future.deinit();
  return swift_deallocClassInstance();
}

uint64_t Future.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + 16), -1, -1);
  outlined consume of ConduitList<A, Never><A>(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 120);
  type metadata accessor for Result();
  v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t Publishers.SubscribeOn.Inner.__deallocating_deinit()
{
  Publishers.SubscribeOn.Inner.deinit();
  return swift_deallocClassInstance();
}

char *Publishers.SubscribeOn.Inner.deinit()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;

  v1 = *(_QWORD *)v0;
  MEMORY[0x18D77ADB0](*((_QWORD *)v0 + 2), -1, -1);
  MEMORY[0x18D77ADB0](*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 168)], -1, -1);
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 96) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 136)]);
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 144)], *(_QWORD *)(v1 + 88));
  v2 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 152)];
  swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  outlined destroy of SubscriptionStatus((uint64_t)&v0[*(_QWORD *)(*(_QWORD *)v0 + 160)]);
  return v0;
}

uint64_t type metadata completion function for CurrentValueSubject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for Subscribers.Completion(255, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), a4);
  result = type metadata accessor for Optional();
  if (v5 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v6 <= 0x3F)
      return swift_initClassMetadata2();
  }
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyCancellable()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for Publishers.Collect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Collect);
}

uint64_t type metadata accessor for Empty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Empty);
}

uint64_t AnyCancellable.store(in:)()
{
  Swift::UInt v0;
  Swift::UInt v2;

  swift_retain();
  specialized Set._Variant.insert(_:)(&v2, v0);
  return swift_release();
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  result = static _SetStorage.resize(original:capacity:move:)();
  v6 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 0;
    v8 = (_QWORD *)(v4 + 56);
    v9 = 1 << *(_BYTE *)(v4 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_33;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_33;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_33;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_33:
                v28 = 1 << *(_BYTE *)(v4 + 32);
                if (v28 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v28;
                v3 = v2;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_39;
                  if (v7 >= v12)
                    goto LABEL_33;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_23;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_23:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.Multicast<A, B>.Inner<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

void partial apply for closure #1 in Subscribers.Sink.cancel()()
{
  uint64_t v0;

  closure #1 in Subscribers.Sink.cancel()(v0);
}

void closure #1 in Subscribers.Sink.cancel()(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD **)a1;
  v3 = (_QWORD *)swift_allocObject();
  v4 = v2[10];
  v3[2] = v4;
  v5 = v2[11];
  v3[3] = v5;
  v6 = v2[12];
  v3[4] = v6;
  swift_beginAccess();
  *(_QWORD *)(a1 + 32) = specialized closure #1 in Publisher.multicast<A>(subject:);
  *(_QWORD *)(a1 + 40) = v3;
  swift_release();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v4;
  v7[3] = v5;
  v7[4] = v6;
  swift_beginAccess();
  *(_QWORD *)(a1 + 16) = specialized closure #1 in Publisher.multicast<A>(subject:);
  *(_QWORD *)(a1 + 24) = v7;
  swift_release();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 96));
}

uint64_t type metadata completion function for Publishers.Catch.Inner(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for Publishers.Catch.Inner(a1, a2, a3, (uint64_t (*)(uint64_t, _OWORD *))type metadata accessor for Publishers.Catch.Inner.State);
}

uint64_t type metadata completion function for PassthroughSubject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for Subscribers.Completion(255, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), a4);
  result = type metadata accessor for Optional();
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.HandleEvents()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for PublishedSubject.Conduit()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t partial apply for closure #2 in Publishers.CollectByTime.Inner.receive(completion:)()
{
  uint64_t *v0;

  return closure #2 in Publishers.CollectByTime.Inner.receive(completion:)(v0);
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in AbstractCombineLatest<A, B, C>.Side<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t Publisher.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, a2);
  result = type metadata accessor for Publishers.Drop(0, a2, a3, v12);
  *(_QWORD *)(a4 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t type metadata accessor for Publishers.Drop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Drop);
}

uint64_t Result.Publisher.Inner.__deallocating_deinit()
{
  Result.Publisher.Inner.deinit();
  return swift_deallocClassInstance();
}

uint64_t *Result.Publisher.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 112);
  v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 120));
  return v0;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.CollectByCount<A>.Inner<A1>(_QWORD *a1)
{
  return Publishers.CollectByCount.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.CollectByCount.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void (*v11)(_QWORD *, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  _UNKNOWN **v15;

  v3 = *v1;
  v4 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 160));
  os_unfair_lock_lock(v4);
  if ((*((_BYTE *)v1 + *(_QWORD *)(*v1 + 144)) & 1) != 0
    || (v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 136),
        swift_beginAccess(),
        outlined init with copy of Any?(v5, (uint64_t)v13, &demangling cache variable for type metadata for Subscription?), v6 = v14, outlined destroy of CustomStringConvertible?((uint64_t)v13, &demangling cache variable for type metadata for Subscription?), v6))
  {
    os_unfair_lock_unlock(v4);
    v7 = a1[3];
    v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v13);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v13, v5, &demangling cache variable for type metadata for Subscription?);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v14 = v3;
    v15 = &protocol witness table for Publishers.CollectByCount<A>.Inner<A1>;
    v13[0] = v1;
    v10 = *(_QWORD *)(v3 + 104);
    v11 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v10 + 40);
    v12 = *(_QWORD *)(v3 + 88);
    swift_retain();
    v11(v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
}

void Publisher.share()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for Publishers.Share(0, a1, a2, a4);
  swift_allocObject();
  specialized Publishers.Share.init(upstream:)(v4);
}

uint64_t type metadata accessor for Publishers.Share(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Share);
}

void Publishers.Share.receive<A>(subscriber:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = type metadata accessor for PassthroughSubject(255, AssociatedTypeWitness, v1, AssociatedConformanceWitness);
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for PassthroughSubject<A, B>, v3);
  type metadata accessor for Publishers.Multicast();
}

uint64_t sub_18B551174(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Multicast<A, B>, a1);
  v7 = type metadata accessor for Publishers.Autoconnect(0, a1, v5, v6);
  v8 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Autoconnect<A>, v7);
  return Publisher.subscribe<A>(_:)(v3, v7, v2, v8, v1);
}

uint64_t type metadata accessor for PassthroughSubject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PassthroughSubject);
}

void specialized Publishers.Share.init(upstream:)(uint64_t a1)
{
  char *v1;
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v3 = *(_QWORD **)v1;
  v4 = v3[10];
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(&v2[v3[13]], a1, v4);
  v5 = v3[11];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for PassthroughSubject(0, AssociatedTypeWitness, v7, AssociatedConformanceWitness);
  v10 = PassthroughSubject.__allocating_init()();
  v11 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for PassthroughSubject<A, B>, v9);
  Publisher.multicast<A>(subject:)(v10, v4, v9, v5, v11);
}

void sub_18B5512F4()
{
  type metadata accessor for Publishers.Multicast();
}

uint64_t sub_18B551310(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Multicast<A, B>, a1);
  v3 = ConnectablePublisher.autoconnect()(a1);
  swift_release();
  swift_release();
  *(_QWORD *)(v1 + 16) = v3;
  return v1;
}

uint64_t ConnectablePublisher.autoconnect()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Publishers.Autoconnect(0, a1, v6, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  v8 = swift_allocObject();
  Publishers.Autoconnect.init(upstream:)((uint64_t)v5);
  return v8;
}

uint64_t type metadata accessor for Publishers.Autoconnect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Autoconnect);
}

uint64_t *Publishers.Autoconnect.init(upstream:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _OWORD *v6;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 104);
  v5 = (_DWORD *)swift_slowAlloc();
  *v5 = 0;
  *(uint64_t *)((char *)v1 + v4) = (uint64_t)v5;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 32))((uint64_t)v1 + *(_QWORD *)(*v1 + 96), a1);
  v6 = (_OWORD *)((char *)v1 + *(_QWORD *)(*v1 + 112));
  v6[1] = 0u;
  v6[2] = 0u;
  *v6 = 0u;
  return v1;
}

void Publisher.multicast<A>(subject:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  v10[6] = a1;
  swift_unknownObjectRetain();
  Publisher.multicast<A>(_:)((uint64_t)partial apply for closure #1 in Publisher.multicast<A>(subject:));
}

uint64_t sub_18B551510(uint64_t a1)
{
  swift_release();
  return a1;
}

void Publisher.multicast<A>(_:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.Multicast();
}

uint64_t sub_18B5515A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v1, v0);
  v6 = swift_allocObject();
  swift_retain();
  Publishers.Multicast.init(upstream:createSubject:)(v4, v3, v2);
  return v6;
}

void type metadata accessor for Publishers.Multicast()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t *Publishers.Multicast.init(upstream:createSubject:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;

  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 128);
  v9 = (_DWORD *)swift_slowAlloc();
  *v9 = 0;
  *(uint64_t *)((char *)v3 + v8) = (uint64_t)v9;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 136)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 80) - 8) + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 112), a1);
  v10 = (uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 120));
  *v10 = a2;
  v10[1] = a3;
  return v3;
}

uint64_t PassthroughSubject.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  PassthroughSubject.init()();
  return v0;
}

uint64_t Publishers.Autoconnect.SideEffectSubscription.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(void))v0)();
  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v2);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Multicast<A, B>.Inner<A1>()
{
  Publishers.Multicast.Inner.cancel()();
}

void Publishers.Multicast.Inner.cancel()()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v5, (uint64_t)v9);
    v5 = 1;
    v6 = 0u;
    v7 = 0u;
    v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    v3 = v10;
    v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

void partial apply for implicit closure #2 in implicit closure #1 in Publishers.Autoconnect.Inner.receive(subscription:)()
{
  Publishers.Autoconnect.inner_cancelled()();
}

void Publishers.CollectByTime.Inner.receive(completion:)(void (*a1)(char *, char *, uint64_t))
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t (*)(), char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t (*)(), uint64_t *, uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[40];
  unsigned __int8 v68;

  v2 = v1;
  v61 = a1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 104);
  v5 = *(_QWORD *)(*v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v65 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(_QWORD *)(v65 + 64);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v56 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v62 = (char *)&v55 - v10;
  v60 = *(_QWORD *)(v3 + 88);
  v59 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v9);
  v58 = (uint64_t)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v5;
  v64 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v55 - v16;
  v57 = v3;
  v18 = (uint64_t)v1 + *(_QWORD *)(v3 + 184);
  swift_beginAccess();
  if (*(_QWORD *)(v18 + 24))
  {
    outlined init with copy of Subscription(v18, (uint64_t)v67);
    v19 = *(_OWORD *)&v67[24];
    __swift_project_boxed_opaque_existential_1(v67, *(uint64_t *)&v67[24]);
    (*(void (**)(_QWORD, _QWORD))(*((_QWORD *)&v19 + 1) + 8))(v19, *((_QWORD *)&v19 + 1));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
  }
  memset(v67, 0, sizeof(v67));
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v67, v18, &demangling cache variable for type metadata for Cancellable?);
  swift_endAccess();
  v20 = *(_QWORD *)(*v1 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v20));
  v21 = (uint64_t)v1 + *(_QWORD *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v21, (uint64_t)v67);
  v22 = v68;
  outlined destroy of SubscriptionStatus((uint64_t)v67);
  if (v22)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v20));
  }
  else
  {
    *(_QWORD *)v67 = 1;
    memset(&v67[8], 0, 32);
    v68 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v67, v21);
    swift_endAccess();
    (*(void (**)(char *, _QWORD, uint64_t))(v15 + 16))(v17, v61, v14);
    v23 = v65;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v17, 1, AssociatedTypeWitness) == 1)
    {
      v24 = (uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 152));
      swift_beginAccess();
      v66 = *v24;
      swift_getAssociatedTypeWitness();
      v25 = type metadata accessor for Array();
      MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v25);
      v26 = Collection.isEmpty.getter();
      v27 = v60;
      v28 = v59;
      v29 = v58;
      v30 = v57;
      if ((v26 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v20));
        v31 = *(_QWORD *)(v30 + 112);
        v33 = type metadata accessor for Publishers.TimeGroupingStrategy(0, v27, v31, v32);
      }
      else
      {
        v48 = *v24;
        swift_bridgeObjectRetain();
        *v24 = static Array._allocateUninitialized(_:)();
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v20));
        v31 = *(_QWORD *)(v30 + 112);
        v33 = type metadata accessor for Publishers.TimeGroupingStrategy(0, v27, v31, v49);
        Publishers.TimeGroupingStrategy.scheduler.getter(v33, v29);
        v50 = (uint64_t)v2 + *(_QWORD *)(*v2 + 144);
        v51 = swift_allocObject();
        *(_QWORD *)(v51 + 16) = v2;
        *(_QWORD *)(v51 + 24) = v48;
        v52 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v31 + 56);
        swift_retain();
        v52(v50, partial apply for closure #1 in Publishers.CollectByTime.Inner.receive(completion:), v51, v27, v31);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v27);
      }
      Publishers.TimeGroupingStrategy.scheduler.getter(v33, v29);
      v53 = (uint64_t)v2 + *(_QWORD *)(*v2 + 144);
      v54 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t *, uint64_t, uint64_t))(v31 + 56);
      swift_retain();
      v54(v53, partial apply for closure #2 in Publishers.CollectByTime.Inner.receive(completion:), v2, v27, v31);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v27);
    }
    else
    {
      v61 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
      v61(v62, v17, AssociatedTypeWitness);
      swift_getAssociatedTypeWitness();
      v34 = v23;
      v35 = static Array._allocateUninitialized(_:)();
      v36 = (uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 152));
      swift_beginAccess();
      *v36 = v35;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v20));
      v37 = v57;
      v38 = *(_QWORD *)(v57 + 112);
      v39 = v60;
      v41 = type metadata accessor for Publishers.TimeGroupingStrategy(0, v60, v38, v40);
      v42 = v58;
      Publishers.TimeGroupingStrategy.scheduler.getter(v41, v58);
      v55 = (uint64_t)v2 + *(_QWORD *)(*v2 + 144);
      v43 = v56;
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v56, v62, AssociatedTypeWitness);
      v44 = (*(unsigned __int8 *)(v34 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
      v45 = (char *)swift_allocObject();
      *((_QWORD *)v45 + 2) = v63;
      *((_QWORD *)v45 + 3) = v39;
      v46 = v64;
      *((_QWORD *)v45 + 4) = *(_QWORD *)(v37 + 96);
      *((_QWORD *)v45 + 5) = v46;
      *((_QWORD *)v45 + 6) = v38;
      *((_QWORD *)v45 + 7) = *(_QWORD *)(v37 + 120);
      *((_QWORD *)v45 + 8) = v2;
      v61(&v45[v44], v43, AssociatedTypeWitness);
      v47 = *(void (**)(uint64_t, uint64_t (*)(), char *, uint64_t, uint64_t))(v38 + 56);
      swift_retain();
      v47(v55, partial apply for closure #3 in Publishers.CollectByTime.Inner.receive(completion:), v45, v39, v38);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v42, v39);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v62, AssociatedTypeWitness);
    }
  }
}

uint64_t Publishers.TimeGroupingStrategy.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  void (*v10)(uint64_t, char *, uint64_t);
  uint64_t TupleTypeMetadata3;
  char *v12;
  uint64_t v14;

  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v8 = *(_QWORD *)(a1 + 16);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  if (EnumCaseMultiPayload == 1)
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  else
    TupleTypeMetadata3 = swift_getTupleTypeMetadata2();
  v12 = &v5[*(int *)(TupleTypeMetadata3 + 48)];
  v10(a2, v5, v8);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.CollectByTime<A, B>.Inner<A1>(_QWORD *a1)
{
  return Publishers.CollectByTime.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.CollectByTime.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  int EnumCaseMultiPayload;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t TupleTypeMetadata3;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(uint64_t **__return_ptr, char *, char *, char *, uint64_t, uint64_t (*)(), uint64_t *, uint64_t, uint64_t);
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t **, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t AssociatedConformanceWitness;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  int8x16_t v57;
  int8x16_t v58;
  char v59;

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 112);
  v6 = *(_QWORD *)(*v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v48 = (char *)&AssociatedConformanceWitness - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v50 = (char *)&AssociatedConformanceWitness - v10;
  v12 = type metadata accessor for Publishers.TimeGroupingStrategy(0, v6, v5, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&AssociatedConformanceWitness - v14;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = swift_getAssociatedTypeWitness();
  v53 = *(_QWORD *)(v16 - 8);
  v54 = v16;
  v17 = MEMORY[0x1E0C80A78](v16);
  v46 = (char *)&AssociatedConformanceWitness - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v47 = (char *)&AssociatedConformanceWitness - v20;
  v52 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&AssociatedConformanceWitness - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = v4;
  v55 = *(_QWORD *)(v4 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v55));
  v23 = (uint64_t)v2 + *(_QWORD *)(*v2 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v23, (uint64_t)&v56);
  if (v59 == 2
    && (v24 = vorrq_s8(v57, v58),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)) | (unint64_t)v56)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v56);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v56);
    v59 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v56, v23);
    swift_endAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, (uint64_t)v2 + *(_QWORD *)(*v2 + 136), v12);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v29 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
    v30 = v54;
    if (EnumCaseMultiPayload == 1)
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    else
      TupleTypeMetadata3 = swift_getTupleTypeMetadata2();
    v32 = &v15[*(int *)(TupleTypeMetadata3 + 48)];
    v29(v22, v15, v6);
    v33 = v47;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v47, v32, v30);
    v34 = v48;
    (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v6, v5);
    v35 = v50;
    dispatch thunk of Strideable.advanced(by:)();
    v49 = *(_QWORD *)(v49 + 8);
    ((void (*)(char *, uint64_t))v49)(v34, AssociatedTypeWitness);
    v36 = v46;
    (*(void (**)(uint64_t, uint64_t))(v5 + 48))(v6, v5);
    v37 = (uint64_t)v2 + *(_QWORD *)(*v2 + 144);
    v38 = *(void (**)(uint64_t **__return_ptr, char *, char *, char *, uint64_t, uint64_t (*)(), uint64_t *, uint64_t, uint64_t))(v5 + 72);
    swift_retain();
    v38(&v56, v35, v33, v36, v37, partial apply for closure #1 in Publishers.CollectByTime.Inner.receive(subscription:), v2, v6, v5);
    swift_release();
    v39 = v54;
    v40 = *(void (**)(char *, uint64_t))(v53 + 8);
    v40(v36, v54);
    ((void (*)(char *, uint64_t))v49)(v35, AssociatedTypeWitness);
    v40(v33, v39);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v22, v6);
    v41 = (uint64_t)v2 + *(_QWORD *)(*v2 + 184);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)&v56, v41, &demangling cache variable for type metadata for Cancellable?);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v55));
    v58.i64[0] = v51;
    v58.i64[1] = (uint64_t)&protocol witness table for Publishers.CollectByTime<A, B>.Inner<A1>;
    v56 = v2;
    v42 = *(_QWORD *)(v51 + 120);
    v43 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v42 + 40);
    v44 = *(_QWORD *)(v51 + 96);
    swift_retain();
    v43(&v56, v44, v42);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v56);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v55));
    v25 = a1[3];
    v26 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v25);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v26 + 8) + 8))(v25);
  }
}

uint64_t outlined assign with take of Subscription?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void Publishers.Autoconnect.inner_cancelled()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD v5[3];
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v1 = *(os_unfair_lock_s **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
  os_unfair_lock_lock(v1);
  Publishers.Autoconnect.state.getter((uint64_t)&v9);
  if (v11)
  {
    v2 = v9;
    outlined init with take of Subscription(&v10, (uint64_t)v6);
    if (v2 < 2)
    {
      memset(v5, 0, sizeof(v5));
      Publishers.Autoconnect.state.setter((uint64_t)v5);
      os_unfair_lock_unlock(v1);
      v3 = v7;
      v4 = v8;
      __swift_project_boxed_opaque_existential_1(v6, v7);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    }
    else
    {
      *(_QWORD *)&v5[0] = v2 - 1;
      outlined init with copy of Subscription((uint64_t)v6, (uint64_t)v5 + 8);
      Publishers.Autoconnect.state.setter((uint64_t)v5);
      os_unfair_lock_unlock(v1);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  else
  {
    os_unfair_lock_unlock(v1);
  }
}

uint64_t Publishers.Multicast.Inner.__deallocating_deinit()
{
  Publishers.Multicast.Inner.deinit();
  return swift_deallocClassInstance();
}

char *Publishers.Multicast.Inner.deinit()
{
  char *v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  MEMORY[0x18D77ADB0](*((_QWORD *)v0 + 2), -1, -1);
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 96) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 136)]);
  outlined destroy of SubscriptionStatus((uint64_t)&v0[*(_QWORD *)(*(_QWORD *)v0 + 144)]);
  return v0;
}

uint64_t Publishers.Multicast.connect()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *v1;
  v4 = Publishers.Multicast.lazySubject.getter();
  v5 = Publisher.subscribe<A>(_:)(v4, v3[10], v3[11], v3[12], v3[13]);
  a1[3] = type metadata accessor for AnyCancellable();
  a1[4] = (uint64_t)&protocol witness table for AnyCancellable;
  result = swift_unknownObjectRelease();
  *a1 = v5;
  return result;
}

uint64_t Publishers.Autoconnect.__deallocating_deinit()
{
  Publishers.Autoconnect.deinit();
  return swift_deallocClassInstance();
}

uint64_t *Publishers.Autoconnect.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 104)), -1, -1);
  v2 = *(_QWORD *)(v1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 96), v2);
  v3 = (uint64_t)v0 + *(_QWORD *)(*v0 + 112);
  v5 = type metadata accessor for Publishers.Autoconnect.State(0, v2, *(_QWORD *)(v1 + 88), v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v3, v5);
  return v0;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Autoconnect<A>(uint64_t a1)
{
  Publishers.Autoconnect.receive<A>(subscriber:)(a1);
}

void Publishers.Autoconnect.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.Autoconnect.Inner();
}

void sub_18B5528E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  *(_QWORD *)(v13 - 224) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (uint64_t *)((char *)&a9 - v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v10, v9);
  v16 = swift_retain();
  Publishers.Autoconnect.Inner.init(_:_:)(v16, v15);
}

uint64_t sub_18B552940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 104));
  os_unfair_lock_lock(v6);
  Publishers.Autoconnect.state.getter(v5 - 128);
  if (*(_QWORD *)(v5 - 96))
  {
    v7 = *(_QWORD *)(v5 - 224);
    v8 = *(_QWORD *)(v5 - 128);
    result = outlined init with take of Subscription((__int128 *)(v5 - 120), v5 - 168);
    if (__OFADD__(v8, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v5 - 216) = v8 + 1;
      outlined init with copy of Subscription(v5 - 168, v5 - 208);
      Publishers.Autoconnect.state.setter(v5 - 216);
      os_unfair_lock_unlock(v6);
      v10 = *(_QWORD *)(v3 + 8);
      v11 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Autoconnect<A>.Inner<A1>, v0);
      Publisher.subscribe<A>(_:)(v2, v4, v0, v10, v11);
      __swift_destroy_boxed_opaque_existential_1(v5 - 168);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v2, v0);
    }
  }
  else
  {
    os_unfair_lock_unlock(v6);
    v12 = *(_QWORD *)(v3 + 8);
    v13 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Autoconnect<A>.Inner<A1>, v0);
    Publisher.subscribe<A>(_:)(v2, v4, v0, v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v4, v3);
    os_unfair_lock_lock(v6);
    *(_QWORD *)(v5 - 216) = 1;
    outlined init with copy of Subscription(v5 - 168, v5 - 208);
    Publishers.Autoconnect.state.setter(v5 - 216);
    os_unfair_lock_unlock(v6);
    __swift_destroy_boxed_opaque_existential_1(v5 - 168);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 224) + 8))(v2, v0);
  }
  return result;
}

uint64_t destroy for Publishers.Autoconnect.Inner(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v3 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t Publishers.Autoconnect.state.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 112);
  swift_beginAccess();
  v6 = type metadata accessor for Publishers.Autoconnect.State(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(v4, a1, v6);
  return swift_endAccess();
}

uint64_t assignWithTake for Publishers.Autoconnect.State(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;

  if (*(_QWORD *)(a1 + 32) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = (_OWORD *)(a1 + 8);
  if (*(_QWORD *)(a2 + 32) < 0xFFFFFFFFuLL)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
LABEL_5:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t Publishers.Autoconnect.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 112);
  swift_beginAccess();
  v6 = type metadata accessor for Publishers.Autoconnect.State(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v4, v6);
}

uint64_t type metadata accessor for Publishers.Autoconnect.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Autoconnect.State);
}

uint64_t initializeWithCopy for Publishers.Autoconnect.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 32);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v4 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v3;
    *(_QWORD *)(a1 + 40) = v4;
    (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  }
  return a1;
}

void Publishers.Autoconnect.Inner.init(_:_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  os_unfair_lock_s *v4;
  uint64_t v5;

  if (one-time initialization token for lock != -1)
    swift_once();
  v4 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v5 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() != -1)
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v4);
    *a2 = v5;
    a2[1] = a1;
    type metadata accessor for Publishers.Autoconnect.Inner();
  }
  __break(1u);
}

void type metadata accessor for Publishers.Autoconnect.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Multicast<A, B>.Inner<A1>(_QWORD *a1)
{
  return Publishers.Multicast.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.Multicast.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void (*v11)(uint64_t **, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  int8x16_t v14;
  int8x16_t v15;
  char v16;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (v6 = vorrq_s8(v14, v15),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.Multicast<A, B>.Inner<A1>;
    v13 = v1;
    v10 = *(_QWORD *)(v3 + 120);
    v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    v12 = *(_QWORD *)(v3 + 96);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    v7 = a1[3];
    v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
  }
}

uint64_t Publishers.Autoconnect.Inner.receive(subscription:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11[2];
  _QWORD v12[5];

  outlined init with copy of Subscription(a1, (uint64_t)v11);
  v4 = *(_QWORD *)(v2 + 8);
  v5 = a2[3];
  v6 = a2[5];
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v5;
  v7[3] = v6;
  v7[4] = v4;
  v12[3] = type metadata accessor for Publishers.Autoconnect.SideEffectSubscription(0, a2[2], a2[4], v8);
  v12[4] = &protocol witness table for Publishers.Autoconnect<A>.SideEffectSubscription;
  v9 = swift_allocObject();
  v12[0] = v9;
  swift_retain();
  outlined init with take of Subscription(v11, v9 + 32);
  *(_QWORD *)(v9 + 16) = partial apply for implicit closure #2 in implicit closure #1 in Publishers.Autoconnect.Inner.receive(subscription:);
  *(_QWORD *)(v9 + 24) = v7;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v6 + 40))(v12, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t type metadata accessor for Publishers.Autoconnect.SideEffectSubscription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Autoconnect.SideEffectSubscription);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Multicast<A, B>(uint64_t a1)
{
  Publishers.Multicast.receive<A>(subscriber:)(a1);
}

void Publishers.Multicast.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  Publishers.Multicast.lazySubject.getter();
  type metadata accessor for Publishers.Multicast.Inner();
}

uint64_t sub_18B553118(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1);
  swift_allocObject();
  *(_QWORD *)(v7 - 136) = Publishers.Multicast.Inner.init(_:)(v3);
  v9 = *(_QWORD *)(v5 + 8);
  v10 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Multicast<A, B>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v7 - 136, v4, a1, v9, v10);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t Publishers.Multicast.lazySubject.getter()
{
  uint64_t *v0;
  uint64_t *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  v2 = *(os_unfair_lock_s **)((char *)v0 + *(_QWORD *)(*v0 + 128));
  os_unfair_lock_lock(v2);
  v3 = *v0;
  v4 = *(_QWORD *)(*v0 + 136);
  v5 = *(uint64_t *)((char *)v0 + v4);
  if (!v5)
  {
    v6 = (*(uint64_t (**)(void))((char *)v1 + *(_QWORD *)(v3 + 120)))();
    v5 = v6;
    v7 = *(uint64_t *)((char *)v1 + v4);
    if (v7)
    {
      swift_unknownObjectRetain();
      os_unfair_lock_unlock(v2);
      swift_unknownObjectRelease();
      return v7;
    }
    *(uint64_t *)((char *)v1 + v4) = v6;
  }
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v2);
  return v5;
}

char *Publishers.Multicast.Inner.init(_:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  _DWORD *v4;
  char *v5;

  v3 = *(_QWORD *)v1;
  v4 = (_DWORD *)swift_slowAlloc();
  *v4 = 0;
  *((_QWORD *)v1 + 2) = v4;
  v5 = &v1[*(_QWORD *)(*(_QWORD *)v1 + 144)];
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[40] = 2;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 96) - 8) + 32))(&v1[*(_QWORD *)(*(_QWORD *)v1 + 136)], a1);
  return v1;
}

void type metadata accessor for Publishers.Multicast.Inner()
{
  JUMPOUT(0x18D77AC60);
}

_QWORD *initializeWithCopy for Publishers.Autoconnect.Inner(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, unint64_t, uint64_t);

  v5 = *a2;
  v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_retain();
  v12(v10, v11, v7);
  return a1;
}

uint64_t destroy for Publishers.Autoconnect.State(uint64_t result)
{
  if (*(_QWORD *)(result + 32) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1(result + 8);
  return result;
}

uint64_t specialized SubjectSubscriber.init(_:)()
{
  uint64_t v0;
  _DWORD *v1;

  v1 = (_DWORD *)swift_slowAlloc();
  *v1 = 0;
  *(_QWORD *)(v0 + 16) = v1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 64) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  swift_unknownObjectWeakAssign();
  return v0;
}

uint64_t type metadata accessor for SubjectSubscriber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SubjectSubscriber);
}

uint64_t protocol witness for ConnectablePublisher.connect() in conformance Publishers.Multicast<A, B>@<X0>(uint64_t *a1@<X8>)
{
  return Publishers.Multicast.connect()(a1);
}

uint64_t partial apply for closure #1 in Publisher.multicast<A>(subject:)()
{
  uint64_t v0;

  specialized closure #1 in Publisher.multicast<A>(subject:)(*(_QWORD *)(v0 + 48));
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>(_QWORD *a1)
{
  return Publishers.SwitchToLatest.Outer.receive(subscription:)(a1);
}

uint64_t Publishers.SwitchToLatest.Outer.receive(subscription:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 136);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v11);
  v5 = v12;
  outlined destroy of Subscription?((uint64_t)v11);
  if (v5 || *(_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 184)) == 1)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    v7 = a1[3];
    v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v11);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v11, v4);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    v9 = a1[3];
    v10 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v9);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 24))(0x8000000000000000, v9, v10);
  }
}

uint64_t type metadata completion function for Publishers.RemoveDuplicates.Inner()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

_BYTE *destructiveInjectEnumTag for Record.Recording.State(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

uint64_t type metadata completion function for Publishers.DropWhile()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Just.setFailureType<A>(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 16);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, v3, v5);
  return Result.Publisher.init(_:)((uint64_t)v7, v5, a3);
}

uint64_t Result.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Result();
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for Subscription.request(_:) in conformance Result<A, B>.Publisher.Inner<A1>(uint64_t a1)
{
  return Result.Publisher.Inner.request(_:)(a1);
}

uint64_t Result.Publisher.Inner.request(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 96);
  v5 = *(_QWORD *)(*v1 + 88);
  v30 = *(_QWORD *)(*v1 + 104);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v29 = v5;
  v8 = type metadata accessor for Subscribers.Completion(0, v5, AssociatedConformanceWitness, v7);
  v27 = *(_QWORD *)(v8 - 8);
  v28 = v8;
  MEMORY[0x1E0C80A78](v8);
  v26 = (char *)&v25 - v9;
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v25 - v16;
  v18 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v15);
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 0x8000000000000000)
    goto LABEL_4;
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (!a1)
  {
LABEL_9:
    __break(1u);
    return result;
  }
LABEL_4:
  v22 = (uint64_t)v1 + *(_QWORD *)(v3 + 112);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v17, v22, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v4) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v17, v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v14, 1, 1, v4);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v22, v14, v10);
  swift_endAccess();
  v23 = v30;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))((uint64_t)v1 + *(_QWORD *)(*v1 + 120), v4, v30);
  v24 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v26, 1, 1);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 56))(v24, v4, v23);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v4);
}

uint64_t getEnumTagSinglePayload for AbstractCombineLatest.Side(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.FlatMap<A, B>.Outer<A1>(uint64_t a1)
{
  Publishers.FlatMap.Outer.receive(completion:)(a1);
}

void Publishers.FlatMap.Outer.receive(completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  _QWORD v53[2];
  uint64_t v54;
  unint64_t *v55;
  int v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  os_unfair_lock_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67[2];
  uint64_t v68;

  v63 = a1;
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (char *)v53 - v6;
  v59 = v3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v60 = (char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v53 - v14;
  v62 = (os_unfair_lock_t)v1[2];
  os_unfair_lock_lock(v62);
  v68 = 0;
  memset(v67, 0, sizeof(v67));
  swift_beginAccess();
  v16 = v1;
  outlined assign with take of Subscription?((uint64_t)v67, (uint64_t)(v1 + 3));
  swift_endAccess();
  *((_BYTE *)v1 + *(_QWORD *)(*v1 + 240)) = 1;
  v61 = v11;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v18 = v63;
  v63 = v10;
  v17(v15, v18, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    v19 = *(_QWORD *)(*v1 + 232);
    if ((*((_BYTE *)v1 + v19) & 1) != 0)
      goto LABEL_6;
    v20 = v2;
    v21 = (_QWORD *)((char *)v1 + *(_QWORD *)(*v1 + 208));
    swift_beginAccess();
    *(_QWORD *)&v64 = *v21;
    swift_getAssociatedTypeWitness();
    swift_getTupleTypeMetadata2();
    v22 = type metadata accessor for Array();
    MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v22);
    if ((Collection.isEmpty.getter() & 1) == 0)
      goto LABEL_6;
    v23 = (char *)v1 + *(_QWORD *)(*v1 + 184);
    swift_beginAccess();
    v24 = *(_QWORD *)(*(_QWORD *)v23 + 16);
    v25 = *(_QWORD *)((char *)v16 + *(_QWORD *)(*v16 + 200));
    v26 = __OFADD__(v24, v25);
    v27 = v24 + v25;
    if (v26)
      goto LABEL_38;
    if (v27)
    {
LABEL_6:
      os_unfair_lock_unlock(v62);
    }
    else
    {
      *((_BYTE *)v16 + v19) = 1;
      os_unfair_lock_unlock(v62);
      os_unfair_recursive_lock_lock_with_options();
      v52 = v60;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v60, 1, 1, AssociatedTypeWitness);
      (*(void (**)(char *, _QWORD))(*(_QWORD *)(v20 + 120) + 56))(v52, *(_QWORD *)(v20 + 96));
      (*(void (**)(char *, uint64_t))(v61 + 8))(v52, v63);
      os_unfair_recursive_lock_unlock();
    }
  }
  else
  {
    v54 = v2;
    v58 = v5;
    v28 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v57 = v7;
    v59 = AssociatedTypeWitness;
    v28(v7, v15, AssociatedTypeWitness);
    v29 = *(_QWORD *)(*v1 + 232);
    v56 = *((unsigned __int8 *)v1 + v29);
    *((_BYTE *)v1 + v29) = 1;
    v30 = *(_QWORD *)(*v1 + 184);
    v53[1] = v1;
    v31 = (_QWORD *)((char *)v1 + v30);
    swift_beginAccess();
    v55 = v31;
    v32 = *v31;
    v33 = *v31 + 64;
    v34 = 1 << *(_BYTE *)(*v31 + 32);
    v35 = -1;
    if (v34 < 64)
      v35 = ~(-1 << v34);
    v36 = v35 & *(_QWORD *)(*v31 + 64);
    v37 = (unint64_t)(v34 + 63) >> 6;
    v53[0] = v37 - 1;
    swift_bridgeObjectRetain();
    v38 = 0;
    if (!v36)
      goto LABEL_14;
LABEL_12:
    v41 = __clz(__rbit64(v36));
    v36 &= v36 - 1;
    v42 = v41 | (v38 << 6);
LABEL_13:
    v43 = *(_QWORD *)(v32 + 56);
    *(_QWORD *)&v64 = *(_QWORD *)(*(_QWORD *)(v32 + 48) + 8 * v42);
    outlined init with copy of Subscription(v43 + 40 * v42, (uint64_t)&v64 + 8);
    while (1)
    {
      outlined init with take of (key: Int, value: Subscription)?((uint64_t)&v64, (uint64_t)v67);
      if (!v68)
      {
        swift_release();
        v47 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
        *v55 = v47;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v62);
        v49 = v58;
        v48 = v59;
        v50 = v57;
        if ((v56 & 1) == 0)
        {
          os_unfair_recursive_lock_lock_with_options();
          v51 = v60;
          (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v60, v50, v48);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v51, 0, 1, v48);
          (*(void (**)(char *, _QWORD))(*(_QWORD *)(v54 + 120) + 56))(v51, *(_QWORD *)(v54 + 96));
          (*(void (**)(char *, uint64_t))(v61 + 8))(v51, v63);
          os_unfair_recursive_lock_unlock();
        }
        (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v48);
        return;
      }
      outlined init with take of Subscription((__int128 *)((char *)v67 + 8), (uint64_t)&v64);
      v40 = *((_QWORD *)&v65 + 1);
      v39 = v66;
      __swift_project_boxed_opaque_existential_1(&v64, *((uint64_t *)&v65 + 1));
      (*(void (**)(uint64_t))(*(_QWORD *)(v39 + 8) + 8))(v40);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v64);
      if (v36)
        goto LABEL_12;
LABEL_14:
      v44 = v38 + 1;
      if (__OFADD__(v38, 1))
        break;
      if (v44 < v37)
      {
        v45 = *(_QWORD *)(v33 + 8 * v44);
        if (v45)
          goto LABEL_17;
        v46 = v38 + 2;
        ++v38;
        if (v44 + 1 < v37)
        {
          v45 = *(_QWORD *)(v33 + 8 * v46);
          if (v45)
            goto LABEL_20;
          v38 = v44 + 1;
          if (v44 + 2 < v37)
          {
            v45 = *(_QWORD *)(v33 + 8 * (v44 + 2));
            if (v45)
            {
              v44 += 2;
              goto LABEL_17;
            }
            v46 = v44 + 3;
            v38 = v44 + 2;
            if (v44 + 3 < v37)
            {
              v45 = *(_QWORD *)(v33 + 8 * v46);
              if (!v45)
              {
                while (1)
                {
                  v44 = v46 + 1;
                  if (__OFADD__(v46, 1))
                    goto LABEL_39;
                  if (v44 >= v37)
                  {
                    v38 = v53[0];
                    goto LABEL_31;
                  }
                  v45 = *(_QWORD *)(v33 + 8 * v44);
                  ++v46;
                  if (v45)
                    goto LABEL_17;
                }
              }
LABEL_20:
              v44 = v46;
LABEL_17:
              v36 = (v45 - 1) & v45;
              v42 = __clz(__rbit64(v45)) + (v44 << 6);
              v38 = v44;
              goto LABEL_13;
            }
          }
        }
      }
LABEL_31:
      v36 = 0;
      v65 = 0u;
      v66 = 0u;
      v64 = 0u;
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Future<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Future.receive<A>(subscriber:)(a1, a2, a3);
}

void Future.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD v19[3];
  os_unfair_lock_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v19[2] = a1;
  v5 = *(_QWORD *)(a2 - 8);
  v19[0] = a3;
  v19[1] = v5;
  MEMORY[0x1E0C80A78](a1);
  v7 = v6[10];
  v8 = v6[12];
  v22 = v6[11];
  v23 = v7;
  v21 = v8;
  v9 = type metadata accessor for Result();
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v19 - v13;
  v15 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v12);
  v17 = (char *)v19 - v16;
  v20 = (os_unfair_lock_t)v3[2];
  os_unfair_lock_lock(v20);
  v18 = (char *)v3 + *(_QWORD *)(*v3 + 120);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v18, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v24 = v23;
    v25 = v22;
    v26 = a2;
    v27 = v19[0];
    type metadata accessor for Future.Conduit();
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, v9);
  v24 = v23;
  v25 = v22;
  v26 = a2;
  v27 = v19[0];
  type metadata accessor for Future.Conduit();
}

void sub_18B5543EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 184) + 16))(v0, *(_QWORD *)(v2 - 176), v1);
  swift_allocObject();
  v3 = swift_retain();
  Future.Conduit.init(_:_:)(v3, v0);
}

void sub_18B55442C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;

  swift_beginAccess();
  v6 = (uint64_t *)type metadata accessor for ConduitList(0, v1, v2, *(_QWORD *)(v4 - 160));
  ConduitList.insert(_:)(a1, v6);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 - 168));
  Future.Conduit.fulfill(_:)(v3);
}

void sub_18B554488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  JUMPOUT(0x18B5544A0);
}

void type metadata accessor for Future.Conduit()
{
  JUMPOUT(0x18D77AC60);
}

void Future.Conduit.fulfill(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[30];

  v18[19] = a1;
  v2 = (_QWORD *)*v1;
  v3 = v2[21];
  v18[12] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v18[9] = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v2[22];
  v5 = v2[23];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for Subscribers.Completion(0, v3, AssociatedConformanceWitness, v8);
  v18[14] = *(_QWORD *)(v9 - 8);
  v18[15] = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v18[13] = (char *)v18 - v11;
  v12 = v2[20];
  v18[8] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v10);
  v18[7] = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Result();
  v18[17] = *(_QWORD *)(v14 - 8);
  v18[18] = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v18[10] = (char *)v18 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18[16] = (char *)v18 - v17;
  v18[25] = v12;
  v18[26] = v3;
  v18[27] = v6;
  v18[28] = v5;
  v18[11] = v5;
  type metadata accessor for Future.Conduit.State();
}

void sub_18B554654(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  int EnumCaseMultiPayload;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  _BYTE v48[96];

  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = &v48[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = &v48[-v13];
  *(_QWORD *)(v6 - 152) = v3;
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v12);
  *(_QWORD *)(v6 - 160) = &v48[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = *(os_unfair_lock_s **)(v4 + *(_QWORD *)(v1 + 208));
  os_unfair_lock_lock(v17);
  v18 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 200);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v14, v18, a1);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    *(_QWORD *)(v6 - 296) = v11;
    *(_QWORD *)(v6 - 272) = v17;
    *(_QWORD *)(v6 - 288) = v8;
    *(_QWORD *)(v6 - 320) = v5;
    *(_QWORD *)(v6 - 280) = v2;
    *(_QWORD *)(v6 - 304) = v4;
    v19 = *(_QWORD *)(v6 - 152);
    v20 = v14[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    v21 = *(_QWORD *)(v6 - 160);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))(v21, v14, v19);
    v23 = *(_QWORD *)(v6 - 192);
    v22 = *(_QWORD *)(v6 - 184);
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
    v26 = *(_QWORD *)(v6 - 176);
    v25 = *(_QWORD *)(v6 - 168);
    *(_QWORD *)(v6 - 312) = v24;
    v24(v23, v25, v26);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v26);
    v28 = EnumCaseMultiPayload == 1;
    v29 = v25;
    if (v28 || (v20 & 1) != 0)
    {
      *(_QWORD *)(v6 - 184) = v15;
      v30 = *(_QWORD *)(v6 - 296);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 288) + 40))(v18, v30, a1);
      swift_endAccess();
      v31 = *(_QWORD **)(v6 - 304);
      v32 = v31[2];
      v31[2] = 0;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 272));
      v33 = *(_QWORD *)((char *)v31 + *(_QWORD *)(*v31 + 216));
      os_unfair_recursive_lock_lock_with_options();
      v34 = *(_QWORD *)(v6 - 240);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 - 312))(v34, v29, v26);
      v35 = swift_getEnumCaseMultiPayload();
      v37 = *(_QWORD *)(v6 - 232);
      v36 = *(_QWORD *)(v6 - 224);
      v38 = *(_QWORD *)(v6 - 200);
      v39 = *(_QWORD *)(v6 - 280);
      if (v35 == 1)
      {
        v40 = *(_QWORD *)(v6 - 248);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(v36 + 32))(v40, v34, *(_QWORD *)(v6 - 280));
        v41 = *(_QWORD *)(v6 - 216);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v41, v40, v39);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v41, 0, 1, v39);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 56))(v41, *(_QWORD *)(v6 - 152), v37);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 208) + 8))(v41, v38);
        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v40, v39);
      }
      else
      {
        *(_QWORD *)(v6 - 168) = v33;
        v42 = *(_QWORD *)(v6 - 256);
        v43 = *(_QWORD *)(v6 - 264);
        v44 = *(_QWORD *)(v6 - 320);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v43, v34, v44);
        v45 = *(_QWORD *)(v6 - 152);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v43, v45, v37);
        v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56);
        v47 = *(_QWORD *)(v6 - 216);
        v46(v47, 1, 1, v39);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 56))(v47, v45, v37);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 208) + 8))(v47, *(_QWORD *)(v6 - 200));
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
      }
      os_unfair_recursive_lock_unlock();
      if (v32)
      {
        swift_retain();
        Future.disassociate(_:)((uint64_t)v31);
        swift_release_n();
      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 184) + 8))(*(_QWORD *)(v6 - 160), *(_QWORD *)(v6 - 152));
    }
    else
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 272));
      (*(void (**)(uint64_t, _QWORD))(v15 + 8))(v21, *(_QWORD *)(v6 - 152));
    }
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v14, a1);
    Future.Conduit.State.fulfill(_:)(*(_QWORD *)(v6 - 168), a1);
    os_unfair_lock_unlock(v17);
  }
}

void Future.Conduit.subscribe()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[18];

  v1 = (_QWORD *)*v0;
  v2 = v1[20];
  v3 = v1[21];
  v4 = v1[22];
  v5 = v1[23];
  swift_getAssociatedConformanceWitness();
  v6 = type metadata accessor for Result();
  v10[4] = *(_QWORD *)(v6 - 8);
  v10[5] = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v10[3] = (char *)v10 - v8;
  v10[9] = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10[7] = v5;
  v10[8] = (char *)v10 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[6] = v2;
  v10[10] = v2;
  v10[11] = v3;
  v10[12] = v4;
  v10[13] = v5;
  type metadata accessor for Future.Conduit.State();
}

uint64_t sub_18B554B50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, _BYTE *, uint64_t);
  uint64_t v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v35[96];

  v7 = *(_QWORD *)(a1 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = &v35[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = &v35[-v12];
  MEMORY[0x1E0C80A78](v11);
  v15 = &v35[-v14];
  v16 = *(os_unfair_lock_s **)(v3 + *(_QWORD *)(v2 + 208));
  os_unfair_lock_lock(v16);
  v17 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 200);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v15, v17, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v27 = *(_QWORD *)(v5 - 184);
    *(_QWORD *)(v5 - 208) = v4;
    v28 = v27;
    v29 = *(int *)(swift_getTupleTypeMetadata2() + 48);
    *(_QWORD *)(v5 - 216) = v16;
    v30 = &v15[v29];
    (*(void (**)(_QWORD, _BYTE *, uint64_t))(*(_QWORD *)(v5 - 152) + 32))(*(_QWORD *)(v5 - 160), v15, v1);
    (*(void (**)(_QWORD, _BYTE *, uint64_t))(*(_QWORD *)(v5 - 192) + 32))(*(_QWORD *)(v5 - 200), v30, v28);
    v31 = *(int *)(swift_getTupleTypeMetadata2() + 48);
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)(v5 - 152) + 16))(v13, *(_QWORD *)(v5 - 160), v1);
    v13[v31] = 0;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v10, v13, a1);
    swift_beginAccess();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 40))(v17, v10, a1);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 - 216));
    v32 = *(_QWORD *)(v5 - 168);
    v33 = *(_QWORD *)(v5 - 208);
    *(_QWORD *)(v5 - 144) = *(_QWORD *)(v5 - 176);
    *(_QWORD *)(v5 - 136) = v33;
    *(_QWORD *)(v5 - 128) = v1;
    *(_QWORD *)(v5 - 120) = v32;
    type metadata accessor for Future.Conduit();
  }
  if (!EnumCaseMultiPayload)
  {
    v19 = *(_QWORD *)(v5 - 160);
    v20 = *(_QWORD *)(v5 - 152);
    v21 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v20 + 32);
    *(_QWORD *)(v5 - 184) = v10;
    v22 = v20;
    v21(v19, v15, v1);
    v23 = v16;
    v24 = *(int *)(swift_getTupleTypeMetadata2() + 48);
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v22 + 16))(v13, *(_QWORD *)(v5 - 160), v1);
    v13[v24] = 0;
    swift_storeEnumTagMultiPayload();
    v25 = *(_QWORD *)(v5 - 184);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(v25, v13, a1);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(v17, v25, a1);
    swift_endAccess();
    os_unfair_lock_unlock(v23);
    v26 = *(_QWORD *)(v5 - 168);
    *(_QWORD *)(v5 - 144) = *(_QWORD *)(v5 - 176);
    *(_QWORD *)(v5 - 136) = v4;
    *(_QWORD *)(v5 - 128) = v1;
    *(_QWORD *)(v5 - 120) = v26;
    type metadata accessor for Future.Conduit();
  }
  os_unfair_lock_unlock(v16);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v15, a1);
}

void Future.Conduit.request(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[10];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v23 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v20[6] = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v2[22];
  v5 = v2[23];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v21 = type metadata accessor for Subscribers.Completion(0, v3, AssociatedConformanceWitness, v8);
  v20[9] = *(_QWORD *)(v21 - 8);
  v9 = MEMORY[0x1E0C80A78](v21);
  v20[8] = (char *)v20 - v10;
  v11 = v2[20];
  v20[4] = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v9);
  v20[3] = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Result();
  v14 = type metadata accessor for Optional();
  v25 = *(_QWORD *)(v14 - 8);
  v26 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v27 = (char *)v20 - v16;
  v28 = *(_QWORD *)(v13 - 8);
  v29 = v13;
  v17 = MEMORY[0x1E0C80A78](v15);
  v20[7] = (char *)v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v24 = (char *)v20 - v19;
  v20[5] = v11;
  v30 = v11;
  v31 = v3;
  v32 = v6;
  v33 = v5;
  v22 = v5;
  type metadata accessor for Future.Conduit.State();
}

void sub_18B5550C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  char *v21;
  void (*v22)(uint64_t, _BYTE *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_BYTE *, uint64_t, uint64_t);
  _QWORD *v28;
  void (*v29)(char *, _BYTE *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[96];

  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = &v54[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = &v54[-v13];
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = &v54[-v16];
  *(_QWORD *)(v6 - 176) = v5;
  v18 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v15);
  *(_QWORD *)(v6 - 184) = &v54[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (v3 != 0x8000000000000000)
  {
    if (v3 < 0)
    {
      __break(1u);
    }
    else if (v3)
    {
      goto LABEL_4;
    }
    __break(1u);
    return;
  }
LABEL_4:
  v20 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(v4 + 208));
  os_unfair_lock_lock(v20);
  v21 = (char *)v1 + *(_QWORD *)(*v1 + 200);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v8 + 16))(v17, v21, a1);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v17, a1);
    os_unfair_lock_unlock(v20);
    return;
  }
  *(_QWORD *)(v6 - 328) = v20;
  *(_QWORD *)(v6 - 336) = v2;
  v22 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v18 + 32);
  v23 = *(_QWORD *)(v6 - 184);
  v24 = v18;
  v25 = *(_QWORD *)(v6 - 176);
  v22(v23, v17, v25);
  v26 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  *(_QWORD *)(v6 - 320) = v24;
  v27 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v24 + 16);
  v28 = v1;
  v27(v14, v23, v25);
  v14[v26] = 1;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v11, v14, a1);
  swift_beginAccess();
  v29 = *(void (**)(char *, _BYTE *, uint64_t))(v8 + 40);
  v29(v21, v11, a1);
  swift_endAccess();
  v30 = v1[2];
  if (!v30)
  {
    v34 = *(_QWORD *)(v6 - 208);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6 - 200) + 56))(v34, 1, 1, *(_QWORD *)(v6 - 192));
    v33 = *(_QWORD *)(v6 - 224);
    v32 = *(_QWORD *)(v6 - 216);
    goto LABEL_11;
  }
  v31 = v30 + *(_QWORD *)(*(_QWORD *)v30 + 120);
  swift_beginAccess();
  v33 = *(_QWORD *)(v6 - 224);
  v32 = *(_QWORD *)(v6 - 216);
  v34 = *(_QWORD *)(v6 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v34, v31, v32);
  v36 = *(_QWORD *)(v6 - 200);
  v35 = *(_QWORD *)(v6 - 192);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35) == 1)
  {
LABEL_11:
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v32);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 328));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 320) + 8))(*(_QWORD *)(v6 - 184), *(_QWORD *)(v6 - 176));
    return;
  }
  v37 = *(_QWORD *)(v6 - 232);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v37, v34, v35);
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  v29(v21, v14, a1);
  swift_endAccess();
  v38 = v28[2];
  v28[2] = 0;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 328));
  v39 = *(_QWORD *)((char *)v28 + *(_QWORD *)(*v28 + 216));
  os_unfair_recursive_lock_lock_with_options();
  v40 = *(_QWORD *)(v6 - 280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v40, v37, v35);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v41 = *(_QWORD *)(v6 - 240);
    v42 = *(_QWORD *)(v6 - 288);
    v43 = *(_QWORD *)(v6 - 336);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v42, v40, v43);
    v44 = *(_QWORD *)(v6 - 272);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v44, v42, v43);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v44, 0, 1, v43);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 248) + 56))(v44, *(_QWORD *)(v6 - 176));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 264) + 8))(v44, *(_QWORD *)(v6 - 256));
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
  }
  else
  {
    *(_QWORD *)(v6 - 216) = v39;
    v45 = *(_QWORD *)(v6 - 304);
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32);
    *(_QWORD *)(v6 - 208) = v38;
    v47 = *(_QWORD *)(v6 - 312);
    v48 = *(_QWORD *)(v6 - 296);
    v46(v47, v40, v48);
    v49 = *(_QWORD *)(v6 - 248);
    v50 = *(_QWORD *)(v6 - 176);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, v50, v49);
    v51 = *(_QWORD *)(v6 - 272);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6 - 240) + 56))(v51, 1, 1, *(_QWORD *)(v6 - 336));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 56))(v51, v50, v49);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 264) + 8))(v51, *(_QWORD *)(v6 - 256));
    v52 = v47;
    v38 = *(_QWORD *)(v6 - 208);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v52, v48);
  }
  os_unfair_recursive_lock_unlock();
  v53 = *(_QWORD *)(v6 - 320);
  if (v38)
  {
    swift_retain();
    Future.disassociate(_:)((uint64_t)v28);
    swift_release_n();
  }
  (*(void (**)(_QWORD, uint64_t))(v36 + 8))(*(_QWORD *)(v6 - 232), v35);
  (*(void (**)(_QWORD, _QWORD))(v53 + 8))(*(_QWORD *)(v6 - 184), *(_QWORD *)(v6 - 176));
}

void type metadata accessor for Future.Conduit.State()
{
  JUMPOUT(0x18D77AC60);
}

_BYTE *initializeWithCopy for Future.Conduit.State(_BYTE *__dst, _BYTE *__src, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a3[4] - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[2] - 8);
  v8 = *(_QWORD *)(a3[3] - 8);
  v9 = *(unsigned __int8 *)(v8 + 80) | *(unsigned __int8 *)(v7 + 80);
  v10 = v6 + v9;
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = *(_QWORD *)(v8 + 64);
  v12 = v11 + ((v6 + v9) & ~v9);
  if (v12 + 1 > v6)
    v13 = v12 + 1;
  else
    v13 = *(_QWORD *)(v5 + 64);
  if (v6 + 1 > v13)
    v14 = v6 + 1;
  else
    v14 = v13;
  v15 = __src[v14];
  if (v15 >= 3)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X14 }
  }
  if (v15 == 2)
  {
    (*(void (**)(_BYTE *, _BYTE *))(v5 + 16))(__dst, __src);
    __dst[v6] = __src[v6];
    v20 = 2;
LABEL_28:
    __dst[v14] = v20;
    return __dst;
  }
  if (v15 == 1)
  {
    v17 = ~v9;
    (*(void (**)(_BYTE *, _BYTE *))(v5 + 16))(__dst, __src);
    v18 = *(unsigned __int8 *)(((unint64_t)&__src[v10] & v17) + v11);
    if (v18 >= 2)
    {
      if (v11 <= 3)
        v19 = v11;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    v21 = v18 == 1;
    if (v18 == 1)
      v22 = v8;
    else
      v22 = v7;
    (*(void (**)(unint64_t))(v22 + 16))((unint64_t)&__dst[v10] & v17);
    *(_BYTE *)(((unint64_t)&__dst[v10] & v17) + v11) = v21;
    v20 = 1;
    goto LABEL_28;
  }
  (*(void (**)(_BYTE *, _BYTE *))(v5 + 16))(__dst, __src);
  __dst[v14] = 0;
  return __dst;
}

_BYTE *assignWithTake for Future.Conduit.State(_BYTE *__dst, _BYTE *__src, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  void (*v18)(void);
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;

  if (__dst != __src)
  {
    v5 = a3[4];
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(_QWORD *)(a3[2] - 8);
    v9 = *(_QWORD *)(a3[3] - 8);
    v10 = *(unsigned __int8 *)(v9 + 80) | *(unsigned __int8 *)(v8 + 80);
    v11 = v7 + v10;
    if (*(_QWORD *)(v9 + 64) <= *(_QWORD *)(v8 + 64))
      v12 = *(_QWORD *)(v8 + 64);
    else
      v12 = *(_QWORD *)(v9 + 64);
    v13 = v12 + ((v7 + v10) & ~v10);
    if (v13 + 1 > v7)
      v14 = v13 + 1;
    else
      v14 = *(_QWORD *)(v6 + 64);
    if (v7 + 1 > v14)
      v15 = v7 + 1;
    else
      v15 = v14;
    v16 = __dst[v15];
    if (v16 >= 3)
    {
      if (v15 <= 3)
        v17 = v15;
      else
        v17 = 4;
      __asm { BR              X13 }
    }
    v29 = ~v10;
    if (v16 == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(__dst, v5);
      v19 = *(unsigned __int8 *)(((unint64_t)&__dst[v11] & v29) + v12);
      if (v19 >= 2)
      {
        if (v12 <= 3)
          v20 = v12;
        else
          v20 = 4;
        __asm { BR              X12 }
      }
      if (v19 == 1)
        v18 = *(void (**)(void))(v9 + 8);
      else
        v18 = *(void (**)(void))(v8 + 8);
    }
    else
    {
      v18 = *(void (**)(void))(v6 + 8);
    }
    v18();
    v21 = __src[v15];
    if (v21 >= 3)
    {
      if (v15 <= 3)
        v22 = v15;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v21 == 2)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = __src[v7];
      v25 = 2;
    }
    else
    {
      if (v21 != 1)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(__dst, __src, v5);
        __dst[v15] = 0;
        return __dst;
      }
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(__dst, __src, v5);
      v23 = *(unsigned __int8 *)(((unint64_t)&__src[v11] & v29) + v12);
      if (v23 >= 2)
      {
        if (v12 <= 3)
          v24 = v12;
        else
          v24 = 4;
        __asm { BR              X12 }
      }
      v26 = v23 == 1;
      if (v23 == 1)
        v27 = v9;
      else
        v27 = v8;
      (*(void (**)(unint64_t))(v27 + 32))((unint64_t)&__dst[v11] & v29);
      *(_BYTE *)(((unint64_t)&__dst[v11] & v29) + v12) = v26;
      v25 = 1;
    }
    __dst[v15] = v25;
  }
  return __dst;
}

void Future.disassociate(_:)(uint64_t a1)
{
  uint64_t **v1;
  uint64_t *v3;
  os_unfair_lock_s *v4;
  uint64_t *v5;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  v5 = (uint64_t *)type metadata accessor for ConduitList(0, v3[10], v3[11], v3[12]);
  ConduitList.remove(_:)(a1, v5);
  swift_endAccess();
  os_unfair_lock_unlock(v4);
}

uint64_t ConduitList.remove(_:)(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v4 = *(_QWORD *)v2;
  if (!*(_BYTE *)(v2 + 8))
  {
    if (v4 != result)
      return result;
    result = outlined consume of ConduitList<A, Never><A>(*(_QWORD *)v2, 0);
    goto LABEL_11;
  }
  if (*(_BYTE *)(v2 + 8) != 1)
    return result;
  v9 = *(_QWORD *)v2;
  v5 = type metadata accessor for ConduitBase(255, a2[2], a2[3], a2[4]);
  swift_bridgeObjectRetain();
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for ConduitBase<A, B>, v5);
  v6 = type metadata accessor for Set();
  Set.remove(_:)();
  swift_release();
  swift_bridgeObjectRetain();
  v7 = Set.count.getter();
  swift_bridgeObjectRelease();
  if (v7 != 1)
  {
    result = outlined consume of ConduitList<A, Never><A>(v4, 1);
    if (v7)
    {
      *(_QWORD *)v3 = v9;
      *(_BYTE *)(v3 + 8) = 1;
      return result;
    }
    result = swift_bridgeObjectRelease();
LABEL_11:
    *(_QWORD *)v3 = 0;
    *(_BYTE *)(v3 + 8) = 2;
    return result;
  }
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEB3E0], v6);
  result = Collection.first.getter();
  if (v8)
  {
    outlined consume of ConduitList<A, Never><A>(v4, 1);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v3 = v8;
    *(_BYTE *)(v3 + 8) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void protocol witness for Subscriber.receive(subscription:) in conformance AbstractCombineLatest<A, B, C>.Side<A1>(_QWORD *a1)
{
  uint64_t *v1;

  AbstractCombineLatest.Side.receive(subscription:)(a1, *v1);
}

void AbstractCombineLatest.Side.receive(subscription:)(_QWORD *a1, uint64_t a2)
{
  AbstractCombineLatest.receive(subscription:index:)(a1, a2);
}

void AbstractCombineLatest.receive(subscription:index:)(_QWORD *a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v11[24];
  uint64_t v12;

  if (*(_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 168)) <= a2)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v6 = a2;
  v4 = a1;
  v2 = *(os_unfair_lock_s **)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 184));
  os_unfair_lock_lock(v2);
  if ((*(_BYTE *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 160)) & 1) != 0)
  {
LABEL_6:
    os_unfair_lock_unlock(v2);
    v8 = v4[3];
    v9 = v4[4];
    __swift_project_boxed_opaque_existential_1(v4, v8);
    (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 8) + 8))(v8);
    return;
  }
  v5 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 128);
  swift_beginAccess();
  if ((v6 & 0x8000000000000000) != 0)
    goto LABEL_12;
  if (*(_QWORD *)(*(_QWORD *)v5 + 16) <= v6)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
    *(_QWORD *)v5 = v4;
    goto LABEL_9;
  }
  outlined init with copy of Any?(*(_QWORD *)v5 + 40 * v6 + 32, (uint64_t)v11, &demangling cache variable for type metadata for Subscription?);
  v7 = v12;
  outlined destroy of CustomStringConvertible?((uint64_t)v11, &demangling cache variable for type metadata for Subscription?);
  if (v7)
    goto LABEL_6;
  outlined init with copy of Subscription((uint64_t)v4, (uint64_t)v11);
  swift_beginAccess();
  v4 = *(_QWORD **)v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v5 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_14;
LABEL_9:
  if (v4[2] <= v6)
  {
    __break(1u);
  }
  else
  {
    outlined assign with take of Subscription?((uint64_t)v11, (uint64_t)&v4[5 * v6 + 4], &demangling cache variable for type metadata for Subscription?);
    swift_endAccess();
    os_unfair_lock_unlock(v2);
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.ReceiveOn<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.ReceiveOn.Inner.receive(completion:)(a1);
}

void Publishers.ReceiveOn.Inner.receive(completion:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t (*)(), char *, uint64_t, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25[2];
  char v26;
  _BYTE v27[48];

  v24 = a1;
  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v21 - v10;
  v12 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v12);
  v13 = (uint64_t)v1 + *(_QWORD *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v13, (uint64_t)v25);
  if (v26)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v25);
    os_unfair_lock_unlock(v12);
  }
  else
  {
    outlined init with take of Subscription(v25, (uint64_t)v27);
    outlined init with copy of Subscription((uint64_t)v27, (uint64_t)v25);
    v26 = 1;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v25, v13);
    swift_endAccess();
    os_unfair_lock_unlock(v12);
    v14 = (char *)v1 + *(_QWORD *)(*v1 + 144);
    v22 = (char *)v1 + *(_QWORD *)(*v1 + 152);
    v23 = v14;
    v15 = v8;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v24, v8);
    v16 = (*(unsigned __int8 *)(v9 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v17 = (char *)swift_allocObject();
    *((_QWORD *)v17 + 2) = v4;
    v18 = v2[11];
    *((_QWORD *)v17 + 3) = v18;
    *((_QWORD *)v17 + 4) = v2[12];
    *((_QWORD *)v17 + 5) = v3;
    v19 = v2[14];
    *((_QWORD *)v17 + 6) = v19;
    *((_QWORD *)v17 + 7) = v2[15];
    *((_QWORD *)v17 + 8) = v1;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v17[v16], v11, v15);
    v20 = *(void (**)(char *, uint64_t (*)(), char *, uint64_t, uint64_t))(v19 + 56);
    swift_retain();
    v20(v22, partial apply for closure #1 in Publishers.ReceiveOn.Inner.receive(completion:), v17, v18, v19);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Timeout<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.Timeout.Inner.receive(completion:)(a1);
}

void Publishers.Timeout.Inner.receive(completion:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, void (*)(), char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29[2];
  char v30;
  _BYTE v31[48];

  v2 = v1;
  v28 = a1;
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 104);
  v5 = *(_QWORD *)(*v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v23 - v11;
  v13 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v13);
  v14 = (uint64_t)v2 + *(_QWORD *)(*v2 + 184);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v14, (uint64_t)v29);
  if (v30)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v29);
    os_unfair_lock_unlock(v13);
  }
  else
  {
    v26 = v12;
    v27 = v9;
    outlined init with take of Subscription(v29, (uint64_t)v31);
    if (*(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 200)))
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
    outlined init with copy of Subscription((uint64_t)v31, (uint64_t)v29);
    v30 = 1;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v29, v14);
    swift_endAccess();
    os_unfair_lock_unlock(v13);
    v15 = *(_QWORD *)(*v2 + 168);
    v25 = (char *)v2 + *(_QWORD *)(*v2 + 160);
    v24 = (char *)v2 + v15;
    v16 = v26;
    v17 = v27;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v26, v28, v27);
    v18 = (*(unsigned __int8 *)(v10 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v19 = (char *)swift_allocObject();
    *((_QWORD *)v19 + 2) = v5;
    v20 = v3[11];
    *((_QWORD *)v19 + 3) = v20;
    *((_QWORD *)v19 + 4) = v3[12];
    *((_QWORD *)v19 + 5) = v4;
    v21 = v3[14];
    *((_QWORD *)v19 + 6) = v21;
    *((_QWORD *)v19 + 7) = v3[15];
    *((_QWORD *)v19 + 8) = v2;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v19[v18], v16, v17);
    v22 = *(void (**)(char *, void (*)(), char *, uint64_t, uint64_t))(v21 + 56);
    swift_retain();
    v22(v24, partial apply for closure #1 in Publishers.Timeout.Inner.receive(completion:), v19, v20, v21);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  }
}

uint64_t assignWithTake for Publishers.CompactMap.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Multicast<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Autoconnect<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Buffer<A>.Inner<A1>(_QWORD *a1)
{
  return Publishers.Buffer.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.Buffer.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  char v20;

  v2 = v1;
  v4 = *(_QWORD *)v2;
  v5 = *(os_unfair_lock_s **)(v2 + 16);
  os_unfair_lock_lock(v5);
  v6 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)&v17);
  if (v20 == 2)
  {
    v7 = vorrq_s8(v18, v19);
    if (!(*(_QWORD *)&vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)) | v17))
    {
      outlined destroy of SubscriptionStatus((uint64_t)&v17);
      outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v17);
      v20 = 0;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v17, v6);
      result = swift_endAccess();
      if ((*(_BYTE *)(v2 + 40) & 1) != 0)
      {
        v11 = 0x8000000000000000;
      }
      else
      {
        v11 = *(_QWORD *)(v2 + 32);
        if ((v11 & 0x8000000000000000) != 0)
        {
          __break(1u);
          return result;
        }
      }
      os_unfair_lock_unlock(v5);
      v12 = a1[3];
      v13 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v12);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 24))(v11, v12, v13);
      v19.i64[0] = v4;
      v19.i64[1] = (uint64_t)&protocol witness table for Publishers.Buffer<A>.Inner<A1>;
      v17 = v2;
      v14 = *(_QWORD *)(v4 + 104);
      v15 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 40);
      v16 = *(_QWORD *)(v4 + 88);
      swift_retain();
      v15(&v17, v16, v14);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
    }
  }
  outlined destroy of SubscriptionStatus((uint64_t)&v17);
  os_unfair_lock_unlock(v5);
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 + 8) + 8))(v8);
}

uint64_t Publishers.DropWhile.Inner.__deallocating_deinit(void (*a1)(void))
{
  a1();
  return swift_deallocClassInstance();
}

uint64_t **Publishers.CollectByTime.Inner.deinit()
{
  uint64_t **v0;
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t **)((char *)v0 + (*v0)[22]), -1, -1);
  (*(void (**)(char *))(*(_QWORD *)(v1[12] - 8) + 8))((char *)v0 + (*v0)[16]);
  v2 = (char *)v0 + (*v0)[17];
  v4 = type metadata accessor for Publishers.TimeGroupingStrategy(0, v1[11], v1[14], v3);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  v5 = (char *)v0 + (*v0)[18];
  swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  outlined destroy of SubscriptionStatus((uint64_t)v0 + (*v0)[20]);
  outlined destroy of CustomStringConvertible?((uint64_t)v0 + (*v0)[23], &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t destroy for Publishers.TimeGroupingStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))((v5 + a1 + v8) & ~v8, AssociatedTypeWitness);
}

void PassthroughSubject.send(subscription:)(_QWORD *a1)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12[2];

  v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
  v4 = *(_QWORD *)(*v1 + 136);
  v5 = *(_QWORD **)((char *)v1 + v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)((char *)v1 + v4) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    *(_QWORD *)((char *)v1 + v4) = v5;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    *(_QWORD *)((char *)v1 + v4) = v5;
  }
  v5[2] = v8 + 1;
  outlined init with take of Subscription(v12, (uint64_t)&v5[5 * v8 + 4]);
  v9 = *((unsigned __int8 *)v1 + *(_QWORD *)(*v1 + 144));
  os_unfair_lock_unlock(v3);
  if (v9 == 1)
  {
    v10 = a1[3];
    v11 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 24))(0x8000000000000000, v10, v11);
  }
}

uint64_t CurrentValueSubject.send(subscription:)(_QWORD *a1)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12[2];

  v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
  v4 = *(_QWORD *)(*v1 + 144);
  v5 = *(_QWORD **)((char *)v1 + v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)((char *)v1 + v4) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    *(_QWORD *)((char *)v1 + v4) = v5;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    *(_QWORD *)((char *)v1 + v4) = v5;
  }
  v5[2] = v8 + 1;
  outlined init with take of Subscription(v12, (uint64_t)&v5[5 * v8 + 4]);
  os_unfair_lock_unlock(v3);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 24))(0x8000000000000000, v9, v10);
}

void protocol witness for Subscription.request(_:) in conformance SubjectSubscriber<A>(Combine::Subscribers::Demand a1)
{
  SubjectSubscriber.request(_:)(a1);
}

Swift::Void __swiftcall SubjectSubscriber.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  outlined init with copy of Subscription?(v1 + 32, (uint64_t)&v6);
  if (v7)
  {
    outlined init with take of Subscription(&v6, (uint64_t)v8);
    os_unfair_lock_unlock(v3);
    v4 = v9;
    v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(Swift::UInt, uint64_t, uint64_t))(v5 + 24))(a1.rawValue, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    outlined destroy of Subscription?((uint64_t)&v6);
    os_unfair_lock_unlock(v3);
  }
}

void AbstractCombineLatest.Side.receive(completion:)(unint64_t a1, unint64_t a2)
{
  AbstractCombineLatest.receive(completion:index:)(a1, a2);
}

void AbstractCombineLatest.receive(completion:index:)(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t **v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  uint64_t (*v19)(_BYTE *, uint64_t, uint64_t);
  uint64_t *v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  char *v56;
  _BYTE v57[4];
  int v58;
  unint64_t v59;
  uint64_t **v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _BYTE v71[16];
  void (*v72)(_BYTE *, unint64_t, uint64_t);
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v5 = *(uint64_t ***)(*(_QWORD *)v2 + 104);
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 88);
  v61 = *(_QWORD *)(*(_QWORD *)v2 + 96);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for Subscribers.Completion(255, v6, AssociatedConformanceWitness, v8);
  *(_QWORD *)&v68 = type metadata accessor for Optional();
  v67 = *(_QWORD *)(v68 - 8);
  v10 = MEMORY[0x1E0C80A78](v68);
  v62 = &v57[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = &v57[-v13];
  MEMORY[0x1E0C80A78](v12);
  v16 = &v57[-v15];
  v66 = v17;
  v18 = *(void (**)(_BYTE *, unint64_t, uint64_t))(v17 + 16);
  v18(&v57[-v15], a1, v9);
  v19 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  v65 = v16;
  v20 = (uint64_t *)v19(v16, 1, v6);
  v21 = *(os_unfair_lock_s **)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 184));
  os_unfair_lock_lock(v21);
  v22 = *(_QWORD *)v2;
  v23 = *(_QWORD *)(*(_QWORD *)v2 + 152);
  v24 = *(_BYTE *)(v2 + v23);
  if ((_DWORD)v20 == 1)
  {
    if ((*(_BYTE *)(v2 + v23) & 1) == 0)
    {
      v63 = v9;
      v25 = *(_QWORD *)(v22 + 176);
      v26 = *(_QWORD *)(v2 + v25);
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        goto LABEL_45;
      v60 = v5;
      v59 = a1;
      *(_QWORD *)(v2 + v25) = v28;
      v79 = 0;
      v77 = 0u;
      v78 = 0u;
      a1 = v2;
      v5 = (uint64_t **)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 128));
      swift_beginAccess();
      v20 = *v5;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v5 = v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_46;
      goto LABEL_5;
    }
    goto LABEL_42;
  }
  v63 = v9;
  if ((v24 & 1) == 0)
  {
    v60 = v5;
    *(_BYTE *)(v2 + v23) = 1;
    v38 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 128));
    swift_beginAccess();
    v39 = *v38;
    v79 = 0;
    v77 = 0u;
    v78 = 0u;
    v40 = *(_QWORD *)(*(_QWORD *)v2 + 168);
    v64 = v2;
    v41 = *(_QWORD *)(v2 + v40);
    *(_QWORD *)&v69 = v39;
    swift_bridgeObjectRetain();
    *v38 = specialized Array.init(repeating:count:)((uint64_t)&v77, v41);
    swift_bridgeObjectRelease();
    v77 = 0u;
    v78 = 0u;
    v42 = specialized Array.init(repeating:count:)((uint64_t)&v77, v41);
    v43 = (uint64_t *)(v64 + *(_QWORD *)(*(_QWORD *)v64 + 120));
    swift_beginAccess();
    *v43 = v42;
    v44 = v64;
    swift_bridgeObjectRelease();
    v58 = *(unsigned __int8 *)(v44 + *(_QWORD *)(*(_QWORD *)v44 + 200));
    if ((v58 & 1) == 0)
    {
      v18(v14, a1, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v14, 0, 1, v9);
      v45 = v67;
      v46 = v62;
      v47 = v68;
      (*(void (**)(_BYTE *, char *, _QWORD))(v67 + 32))(v62, v14, v68);
      v48 = v44 + *(_QWORD *)(*(_QWORD *)v44 + 208);
      swift_beginAccess();
      (*(void (**)(unint64_t, _BYTE *, uint64_t))(v45 + 40))(v48, v46, v47);
      swift_endAccess();
    }
    v59 = a1;
    os_unfair_lock_unlock(v21);
    v25 = 0;
    v23 = *(_QWORD *)(v69 + 16);
    v67 = v69 + 32;
    v14 = v71;
    v21 = (os_unfair_lock_s *)&v74 + 2;
    a1 = (unint64_t)&v77 + 8;
    v68 = xmmword_18B5F41F0;
    v5 = (uint64_t **)&demangling cache variable for type metadata for (offset: Int, element: Subscription?)?;
    v20 = &demangling cache variable for type metadata for Subscription?;
    if (v23)
      goto LABEL_30;
LABEL_29:
    while (2)
    {
      v74 = 0u;
      v75 = 0u;
      v25 = v23;
      v76 = v68;
      while (1)
      {
        outlined init with take of Subscription?((uint64_t)&v74, (uint64_t)&v77, &demangling cache variable for type metadata for (offset: Int, element: Subscription?)?);
        if (v79 == 1)
        {
          swift_bridgeObjectRelease();
          if (v58)
          {
            os_unfair_recursive_lock_lock_with_options();
            ((void (*)(unint64_t, uint64_t))v60[7])(v59, v61);
            os_unfair_recursive_lock_unlock();
          }
LABEL_40:
          (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v65, v63);
          return;
        }
        v50 = v77;
        outlined init with take of Subscription?((uint64_t)&v77 + 8, (uint64_t)&v74, &demangling cache variable for type metadata for Subscription?);
        v49 = (uint64_t *)&v74;
        if (v50 == a2)
          goto LABEL_28;
        outlined init with copy of Any?((uint64_t)&v74, (uint64_t)&v70, &demangling cache variable for type metadata for Subscription?);
        v18 = v72;
        if (!v72)
          break;
        v51 = v73;
        __swift_project_boxed_opaque_existential_1(&v70, (uint64_t)v72);
        (*(void (**)(void (*)(char *, unint64_t, uint64_t)))(*(_QWORD *)(v51 + 8) + 8))(v18);
        outlined destroy of CustomStringConvertible?((uint64_t)&v74, &demangling cache variable for type metadata for Subscription?);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v70);
        if (v25 == v23)
          goto LABEL_29;
LABEL_30:
        if (v25 >= *(_QWORD *)(v69 + 16))
          goto LABEL_44;
        outlined init with copy of Any?(v67 + 40 * v25, (uint64_t)v71, &demangling cache variable for type metadata for Subscription?);
        *(_QWORD *)&v74 = v25;
        outlined init with take of Subscription?((uint64_t)v71, (uint64_t)&v74 + 8, &demangling cache variable for type metadata for Subscription?);
        ++v25;
      }
      outlined destroy of CustomStringConvertible?((uint64_t)&v74, &demangling cache variable for type metadata for Subscription?);
      v49 = &v70;
LABEL_28:
      outlined destroy of CustomStringConvertible?((uint64_t)v49, &demangling cache variable for type metadata for Subscription?);
      if (v25 == v23)
        continue;
      goto LABEL_30;
    }
  }
  v34 = (char *)(v2 + *(_QWORD *)(v22 + 128));
  swift_beginAccess();
  v23 = *(_QWORD *)v34;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v21);
  a1 = 0;
  v25 = *(_QWORD *)(v23 + 16);
  *(_QWORD *)&v68 = v23 + 32;
  v5 = (uint64_t **)v71;
  v67 = (uint64_t)&v74 + 8;
  v14 = (char *)&v77 + 8;
  v69 = xmmword_18B5F41F0;
  v21 = (os_unfair_lock_s *)&demangling cache variable for type metadata for (offset: Int, element: Subscription?)?;
  v20 = &demangling cache variable for type metadata for Subscription?;
  if (v25)
    goto LABEL_16;
LABEL_15:
  v74 = 0u;
  v75 = 0u;
  a1 = v25;
  v76 = v69;
  while (1)
  {
    outlined init with take of Subscription?((uint64_t)&v74, (uint64_t)&v77, &demangling cache variable for type metadata for (offset: Int, element: Subscription?)?);
    if (v79 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
    v36 = v77;
    outlined init with take of Subscription?((uint64_t)&v77 + 8, (uint64_t)&v74, &demangling cache variable for type metadata for Subscription?);
    v35 = (uint64_t *)&v74;
    if (v36 == a2)
      goto LABEL_14;
    outlined init with copy of Any?((uint64_t)&v74, (uint64_t)&v70, &demangling cache variable for type metadata for Subscription?);
    v18 = v72;
    if (!v72)
    {
      outlined destroy of CustomStringConvertible?((uint64_t)&v74, &demangling cache variable for type metadata for Subscription?);
      v35 = &v70;
LABEL_14:
      outlined destroy of CustomStringConvertible?((uint64_t)v35, &demangling cache variable for type metadata for Subscription?);
      if (a1 == v25)
        goto LABEL_15;
      goto LABEL_16;
    }
    v37 = v73;
    __swift_project_boxed_opaque_existential_1(&v70, (uint64_t)v72);
    (*(void (**)(void (*)(char *, unint64_t, uint64_t)))(*(_QWORD *)(v37 + 8) + 8))(v18);
    outlined destroy of CustomStringConvertible?((uint64_t)&v74, &demangling cache variable for type metadata for Subscription?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v70);
    if (a1 == v25)
      goto LABEL_15;
LABEL_16:
    if (a1 >= *(_QWORD *)(v23 + 16))
      break;
    outlined init with copy of Any?(v68 + 40 * a1, (uint64_t)v71, &demangling cache variable for type metadata for Subscription?);
    *(_QWORD *)&v74 = a1;
    outlined init with take of Subscription?((uint64_t)v71, v67, &demangling cache variable for type metadata for Subscription?);
    ++a1;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  v20 = specialized _ArrayBuffer._consumeAndCreateNew()(v20);
  *v5 = v20;
LABEL_5:
  v30 = v60;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  if (v20[2] <= a2)
  {
LABEL_48:
    __break(1u);
    return;
  }
  outlined assign with take of Subscription?((uint64_t)&v77, (uint64_t)&v20[5 * a2 + 4], &demangling cache variable for type metadata for Subscription?);
  swift_endAccess();
  v31 = *(_QWORD *)(a1 + v25);
  if (v31 == *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 168)))
  {
    *(_BYTE *)(a1 + v23) = 1;
    v77 = 0u;
    v78 = 0u;
    v32 = specialized Array.init(repeating:count:)((uint64_t)&v77, v31);
    v33 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 120));
    swift_beginAccess();
    *v33 = v32;
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 200)) & 1) != 0)
    {
      os_unfair_lock_unlock(v21);
      os_unfair_recursive_lock_lock_with_options();
      ((void (*)(unint64_t, uint64_t, uint64_t **))v30[7])(v59, v61, v30);
      os_unfair_recursive_lock_unlock();
      return;
    }
    v52 = v63;
    v18(v14, v59, v63);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v14, 0, 1, v52);
    v53 = v67;
    v54 = v62;
    v55 = v68;
    (*(void (**)(_BYTE *, char *, _QWORD))(v67 + 32))(v62, v14, v68);
    v56 = (char *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 208));
    swift_beginAccess();
    (*(void (**)(char *, _BYTE *, uint64_t))(v53 + 40))(v56, v54, v55);
    swift_endAccess();
  }
LABEL_42:
  os_unfair_lock_unlock(v21);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Subscription?>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Subscription>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ObservableObjectTable.Storage>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 < a4 || v10 + 4 >= &a4[2 * v8 + 4])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Any]>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t AbstractCombineLatest.cancel()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(os_unfair_lock_s **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 184));
  os_unfair_lock_lock(v1);
  v2 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
  swift_beginAccess();
  v3 = *v2;
  *(_BYTE *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160)) = 1;
  v14 = 0;
  v12 = 0u;
  v13 = 0u;
  v4 = *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 168));
  swift_bridgeObjectRetain();
  *v2 = specialized Array.init(repeating:count:)((uint64_t)&v12, v4);
  swift_bridgeObjectRelease();
  v12 = 0u;
  v13 = 0u;
  v5 = specialized Array.init(repeating:count:)((uint64_t)&v12, v4);
  v6 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_beginAccess();
  *v6 = v5;
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v1);
  v7 = *(_QWORD *)(v3 + 16);
  if (v7)
  {
    v8 = v3 + 32;
    do
    {
      outlined init with copy of Any?(v8, (uint64_t)&v12, &demangling cache variable for type metadata for Subscription?);
      v10 = *((_QWORD *)&v13 + 1);
      if (*((_QWORD *)&v13 + 1))
      {
        v9 = v14;
        __swift_project_boxed_opaque_existential_1(&v12, *((uint64_t *)&v13 + 1));
        (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 8) + 8))(v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
      }
      else
      {
        outlined destroy of CustomStringConvertible?((uint64_t)&v12, &demangling cache variable for type metadata for Subscription?);
      }
      v8 += 40;
      --v7;
    }
    while (v7);
  }
  return swift_bridgeObjectRelease();
}

void protocol witness for Subscription.request(_:) in conformance AbstractCombineLatest<A, B, C>(uint64_t a1)
{
  AbstractCombineLatest.request(_:)(a1);
}

void AbstractCombineLatest.request(_:)(uint64_t a1)
{
  uint64_t *v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_4:
  v3 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 184));
  os_unfair_lock_lock(v3);
  v4 = *v1;
  if ((*((_BYTE *)v1 + *(_QWORD *)(*v1 + 160)) & 1) != 0 || (*((_BYTE *)v1 + *(_QWORD *)(v4 + 152)) & 1) != 0)
  {
    os_unfair_lock_unlock(v3);
    return;
  }
  v5 = (uint64_t *)((char *)v1 + *(_QWORD *)(v4 + 128));
  swift_beginAccess();
  v6 = *v5;
  v7 = *(_QWORD *)(*v1 + 136);
  v8 = *(uint64_t *)((char *)v1 + v7);
  v9 = 0x8000000000000000;
  if (v8 == 0x8000000000000000)
    goto LABEL_15;
  if (a1 == 0x8000000000000000)
    goto LABEL_14;
  if ((v8 | a1) < 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v8 + a1;
  if (!__OFADD__(v8, a1))
  {
    if ((v9 & 0x8000000000000000) == 0)
      goto LABEL_14;
LABEL_25:
    __break(1u);
    return;
  }
  v9 = 0x8000000000000000;
LABEL_14:
  *(uint64_t *)((char *)v1 + v7) = v9;
LABEL_15:
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v3);
  v10 = *(_QWORD *)(v6 + 16);
  if (v10)
  {
    v11 = v6 + 32;
    do
    {
      outlined init with copy of Any?(v11, (uint64_t)v14, &demangling cache variable for type metadata for Subscription?);
      v13 = v15;
      if (v15)
      {
        v12 = v16;
        __swift_project_boxed_opaque_existential_1(v14, v15);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(a1, v13, v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      }
      else
      {
        outlined destroy of CustomStringConvertible?((uint64_t)v14, &demangling cache variable for type metadata for Subscription?);
      }
      v11 += 40;
      --v10;
    }
    while (v10);
  }
  swift_bridgeObjectRelease();
}

uint64_t AbstractCombineLatest.Side.receive(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[4];

  v14[3] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))(boxed_opaque_existential_1, a1, a7);
  AbstractCombineLatest.receive(_:index:)(v14, a2);
  v12 = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v12;
}

uint64_t *specialized AbstractCombineLatest.init(downstream:upstreamCount:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v5 = *v2;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 136)) = 0;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 144)) = 0;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 152)) = 0;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 160)) = 0;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 176)) = 0;
  v6 = *(_QWORD *)(*v2 + 184);
  v7 = (_DWORD *)swift_slowAlloc();
  *v7 = 0;
  *(uint64_t *)((char *)v2 + v6) = (uint64_t)v7;
  v8 = *(_QWORD *)(*v2 + 192);
  v9 = (_QWORD *)swift_slowAlloc();
  *v9 = 0;
  *(uint64_t *)((char *)v2 + v8) = (uint64_t)v9;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 200)) = 0;
  v10 = (uint64_t)v2 + *(_QWORD *)(*v2 + 208);
  v11 = *(_QWORD *)(v5 + 88);
  v12 = *(_QWORD *)(v5 + 96);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = type metadata accessor for Subscribers.Completion(0, v11, AssociatedConformanceWitness, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))((uint64_t)v2 + *(_QWORD *)(*v2 + 112), a1, v12);
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 168)) = a2;
  v17 = 0u;
  v18 = 0u;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 120)) = specialized Array.init(repeating:count:)((uint64_t)&v17, a2);
  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 128)) = specialized Array.init(repeating:count:)((uint64_t)&v17, a2);
  return v2;
}

void storeEnumTagSinglePayload for Subscribers.Completion(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_18B558138()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18B558140()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void AbstractCombineLatest.receive(_:index:)(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[24];
  uint64_t v34;

  v5 = v2;
  v7 = a1;
  v8 = *(_QWORD **)v5;
  v9 = *(_QWORD *)(*(_QWORD *)v5 + 80);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v5 + v8[21]) <= v13)
  {
    __break(1u);
  }
  else
  {
    v3 = *(os_unfair_lock_s **)(v5 + v8[23]);
    os_unfair_lock_lock(v3);
    if ((*(_BYTE *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 160)) & 1) != 0
      || (*(_BYTE *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 152)) & 1) != 0)
    {
      goto LABEL_31;
    }
    outlined init with copy of Any((uint64_t)v7, (uint64_t)v33);
    v7 = (_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 120));
    swift_beginAccess();
    v4 = (_QWORD *)*v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v7 = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((a2 & 0x8000000000000000) == 0)
        goto LABEL_6;
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  *v7 = v4;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_37;
LABEL_6:
  if (v4[2] <= a2)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  outlined assign with take of Subscription?((uint64_t)v33, (uint64_t)&v4[4 * a2 + 4], &demangling cache variable for type metadata for Any?);
  v15 = (_QWORD *)*v7;
  swift_endAccess();
  if ((*(_BYTE *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 144)) & 1) != 0)
  {
LABEL_31:
    os_unfair_lock_unlock(v3);
    return;
  }
  v16 = *(_QWORD *)(*(_QWORD *)v5 + 136);
  v17 = *(_QWORD *)(v5 + v16);
  if (v17 == 0x8000000000000000)
    goto LABEL_11;
  if (v17 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (!v17)
    goto LABEL_31;
LABEL_11:
  v32 = *(_QWORD *)(*(_QWORD *)v5 + 144);
  v18 = v15[2];
  if (v18)
  {
    v29 = v16;
    v30 = v9;
    v19 = v15;
    v20 = (uint64_t)(v15 + 4);
    v31 = v19;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of Any?(v20, (uint64_t)v33, &demangling cache variable for type metadata for Any?);
      v21 = v34;
      outlined destroy of CustomStringConvertible?((uint64_t)v33, &demangling cache variable for type metadata for Any?);
      if (!v21)
        break;
      v20 += 32;
      if (!--v18)
      {
        swift_bridgeObjectRelease();
        v16 = v29;
        v9 = v30;
        v17 = *(_QWORD *)(v5 + v29);
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
LABEL_16:
  if (v17 != 0x8000000000000000)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      if (v17)
      {
        *(_QWORD *)(v5 + v16) = v17 - 1;
        goto LABEL_20;
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_20:
  v22 = (_QWORD *)*v7;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v3);
  (*(void (**)(_QWORD *))(*(_QWORD *)v5 + 480))(v22);
  swift_bridgeObjectRelease();
  os_unfair_lock_lock(v3);
  v23 = v32;
  *(_BYTE *)(v5 + v32) = 1;
  os_unfair_lock_unlock(v3);
  os_unfair_recursive_lock_lock_with_options();
  v24 = (*(uint64_t (**)(char *, _QWORD))(v8[13] + 48))(v12, v8[12]);
  os_unfair_recursive_lock_unlock();
  os_unfair_lock_lock(v3);
  *(_BYTE *)(v5 + v23) = 0;
  v25 = 0x8000000000000000;
  if (v24 == 0x8000000000000000)
  {
    if (*(_QWORD *)(v5 + v16) == 0x8000000000000000)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (v24 < 0)
    goto LABEL_42;
  if (!v24)
    goto LABEL_34;
  v26 = *(_QWORD *)(v5 + v16);
  if (v26 == 0x8000000000000000)
    goto LABEL_34;
  if ((v26 | v24) < 0)
    goto LABEL_43;
  v27 = __OFADD__(v26, v24);
  v25 = v26 + v24;
  if (v27)
  {
    v25 = 0x8000000000000000;
LABEL_33:
    *(_QWORD *)(v5 + v16) = v25;
LABEL_34:
    os_unfair_lock_unlock(v3);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return;
  }
  if ((v25 & 0x8000000000000000) == 0)
    goto LABEL_33;
LABEL_44:
  __break(1u);
}

uint64_t outlined destroy of CustomStringConvertible?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t vtable thunk for AbstractCombineLatest.convert(values:) dispatching to CombineLatest2Inner.convert(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = a2 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  return CombineLatest2Inner.convert(values:)(a2, v4, a1);
}

uint64_t CombineLatest2Inner.convert(values:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[32];

  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    outlined init with copy of Any?(a3 + 32, (uint64_t)v7, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    result = swift_dynamicCast();
    if (v3 != 1)
    {
      outlined init with copy of Any?(a3 + 64, (uint64_t)&v6, &demangling cache variable for type metadata for Any?);
      return swift_dynamicCast();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Buffer<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.Buffer.Inner.receive(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Output<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.Output.Inner.receive(_:)(a1);
}

uint64_t Publishers.Output.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  char v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  v4 = *(_QWORD **)v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v24 - v10;
  v12 = v4[16];
  v13 = *(_QWORD *)(v1 + v12);
  v14 = v13 < 1;
  v15 = v13 - 1;
  if (v14)
  {
    v17 = v4[17];
    v18 = *(_QWORD *)(v1 + v17);
    if (v18 < 1)
    {
      v16 = 0;
      if (v18)
        return v16;
    }
    else
    {
      *(_QWORD *)(v1 + v17) = v18 - 1;
      v16 = (*(uint64_t (**)(uint64_t, _QWORD))(v4[13] + 48))(a1, v4[11]);
      if (*(_QWORD *)(v1 + v17))
        return v16;
    }
    v19 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 144));
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 144)));
    v20 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 120);
    swift_beginAccess();
    outlined init with copy of SubscriptionStatus(v20, (uint64_t)&v25);
    if (v28)
    {
      outlined destroy of SubscriptionStatus((uint64_t)&v25);
      os_unfair_lock_unlock(v19);
    }
    else
    {
      outlined init with take of Subscription((__int128 *)&v25, (uint64_t)v29);
      v25 = 1;
      v26 = 0u;
      v27 = 0u;
      v28 = 2;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v25, v20);
      swift_endAccess();
      os_unfair_lock_unlock(v19);
      v22 = v30;
      v21 = v31;
      __swift_project_boxed_opaque_existential_1(v29, v30);
      (*(void (**)(uint64_t))(*(_QWORD *)(v21 + 8) + 8))(v22);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v11, 1, 1, AssociatedTypeWitness);
      (*(void (**)(char *, _QWORD))(v4[13] + 56))(v11, v4[11]);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    }
  }
  else
  {
    *(_QWORD *)(v1 + v12) = v15;
    return 1;
  }
  return v16;
}

uint64_t protocol witness for Cancellable.cancel() in conformance AbstractCombineLatest<A, B, C>()
{
  return AbstractCombineLatest.cancel()();
}

void protocol witness for Cancellable.cancel() in conformance FilterProducer<A, B, C, D, E>()
{
  FilterProducer.cancel()();
}

Swift::Void __swiftcall FilterProducer.cancel()()
{
  uint64_t v0;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152)));
  swift_beginAccess();
  type metadata accessor for FilterProducer.State();
}

uint64_t sub_18B55898C(uint64_t a1)
{
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v6;
  _BYTE v7[24];
  __int128 v8;
  _QWORD v9[3];
  __int128 v10;
  __int128 v11;
  unint64_t v12;

  v4 = *(_QWORD *)(a1 - 8);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v4 + 16))(&v11, v2, a1);
  if (v12 >= 2)
  {
    outlined init with take of Subscription(&v11, (uint64_t)v9);
    memset(v7, 0, sizeof(v7));
    v8 = xmmword_18B5F41F0;
    swift_beginAccess();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 40))(v2, v7, a1);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    v6 = v10;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8) + 8))(v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
    v10 = xmmword_18B5F41F0;
    swift_beginAccess();
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 40))(v2, v9, a1);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    return (*(uint64_t (**)(__int128 *, uint64_t))(v4 + 8))(&v11, a1);
  }
}

uint64_t vtable thunk for AbstractCombineLatest.convert(values:) dispatching to CombineLatest3Inner.convert(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t TupleTypeMetadata3;

  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  return CombineLatest3Inner.convert(values:)(a2, a2 + *(int *)(TupleTypeMetadata3 + 48), a2 + *(int *)(TupleTypeMetadata3 + 64), a1);
}

uint64_t CombineLatest3Inner.convert(values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[32];
  _BYTE v9[32];

  v4 = *(_QWORD *)(a4 + 16);
  if (!v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  outlined init with copy of Any?(a4 + 32, (uint64_t)v9, &demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  result = swift_dynamicCast();
  if (v4 == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  outlined init with copy of Any?(a4 + 64, (uint64_t)v8, &demangling cache variable for type metadata for Any?);
  result = swift_dynamicCast();
  if (v4 >= 3)
  {
    outlined init with copy of Any?(a4 + 96, (uint64_t)&v7, &demangling cache variable for type metadata for Any?);
    return swift_dynamicCast();
  }
LABEL_7:
  __break(1u);
  return result;
}

void protocol witness for Subscription.request(_:) in conformance AbstractZip<A, B, C>(uint64_t a1)
{
  AbstractZip.request(_:)(a1);
}

void AbstractZip.request(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_26;
  }
LABEL_4:
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  v4 = *(_QWORD **)v1;
  if ((*(_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 192)) & 1) != 0)
  {
    v5 = v4[25];
    v6 = *(_QWORD *)(v1 + v5);
    v7 = 0x8000000000000000;
    if (v6 == 0x8000000000000000)
    {
LABEL_23:
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
      return;
    }
    if (a1 == 0x8000000000000000)
      goto LABEL_22;
    if (((v6 | a1) & 0x8000000000000000) == 0)
    {
      v7 = v6 + a1;
      if (!__OFADD__(v6, a1))
      {
        if ((v7 & 0x8000000000000000) == 0)
          goto LABEL_22;
        goto LABEL_27;
      }
      v7 = 0x8000000000000000;
LABEL_22:
      *(_QWORD *)(v1 + v5) = v7;
      goto LABEL_23;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    return;
  }
  if ((*(_BYTE *)(v1 + v4[17]) & 1) != 0 || (*(_BYTE *)(v1 + v4[18]) & 1) != 0 || (*(_BYTE *)(v1 + v4[19]) & 1) != 0)
    goto LABEL_23;
  v8 = (uint64_t *)(v1 + v4[16]);
  swift_beginAccess();
  v9 = *v8;
  v10 = *(os_unfair_lock_s **)(v1 + v3);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v10);
  v11 = *(_QWORD *)(v9 + 16);
  if (v11)
  {
    v12 = v9 + 32;
    do
    {
      outlined init with copy of Subscription?(v12, (uint64_t)v15);
      v14 = v16;
      if (v16)
      {
        v13 = v17;
        __swift_project_boxed_opaque_existential_1(v15, v16);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(a1, v14, v13);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      }
      else
      {
        outlined destroy of Subscription?((uint64_t)v15);
      }
      v12 += 40;
      --v11;
    }
    while (v11);
  }
  swift_bridgeObjectRelease();
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Debounce<A, B>.Inner<A1>()
{
  Publishers.Debounce.Inner.cancel()();
}

void Publishers.Debounce.Inner.cancel()()
{
  _QWORD *v0;
  _OWORD *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  __int128 v4;
  _BYTE v5[48];
  _BYTE v6[24];

  v1 = (_OWORD *)*v0;
  v2 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v2);
  v3 = (uint64_t)v0 + *(_QWORD *)(*v0 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v3, (uint64_t)v5);
  if (!v5[40])
  {
    outlined init with take of Subscription((__int128 *)v5, (uint64_t)v6);
    *(_QWORD *)v5 = 1;
    memset(&v5[8], 0, 32);
    v5[40] = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v5, v3);
    swift_endAccess();
    *(_QWORD *)((char *)v0 + *(_QWORD *)(*v0 + 208)) = 0;
    swift_beginAccess();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v4 = v1[6];
    *(_OWORD *)v5 = v1[5];
    *(_OWORD *)&v5[16] = v4;
    *(_OWORD *)&v5[32] = v1[7];
    type metadata accessor for Publishers.Debounce.Inner.CancellerState();
  }
  outlined destroy of SubscriptionStatus((uint64_t)v5);
  os_unfair_lock_unlock(v2);
}

uint64_t vtable thunk for AbstractCombineLatest.convert(values:) dispatching to CombineLatest4Inner.convert(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *TupleTypeMetadata;

  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  return CombineLatest4Inner.convert(values:)(a2, a2 + TupleTypeMetadata[12], a2 + TupleTypeMetadata[16], a2 + TupleTypeMetadata[20], a1);
}

uint64_t CombineLatest4Inner.convert(values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[32];
  _BYTE v10[32];
  _BYTE v11[32];

  v5 = *(_QWORD *)(a5 + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_7;
  }
  outlined init with copy of Any?(a5 + 32, (uint64_t)v11, &demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  result = swift_dynamicCast();
  if (v5 == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  outlined init with copy of Any?(a5 + 64, (uint64_t)v10, &demangling cache variable for type metadata for Any?);
  result = swift_dynamicCast();
  if (v5 < 3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  outlined init with copy of Any?(a5 + 96, (uint64_t)v9, &demangling cache variable for type metadata for Any?);
  result = swift_dynamicCast();
  if (v5 != 3)
  {
    outlined init with copy of Any?(a5 + 128, (uint64_t)&v8, &demangling cache variable for type metadata for Any?);
    return swift_dynamicCast();
  }
LABEL_9:
  __break(1u);
  return result;
}

void Publishers.ReplaceError.receive<A>(subscriber:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  MEMORY[0x1E0C80A78](v1);
  type metadata accessor for Publishers.ReplaceError.Inner();
}

uint64_t sub_18B55938C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 16))(v9, *(_QWORD *)(v10 - 128), v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, v2, v7);
  swift_allocObject();
  *(_QWORD *)(v10 - 112) = Publishers.ReplaceError.Inner.init(downstream:output:)(v9, v8);
  v12 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.ReplaceError<A>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v10 - 112, v3, a1, v4, v12);
  return swift_release();
}

void closure #1 in Publishers.SubscribeOn.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[12];

  v18[2] = a2;
  v18[5] = a1;
  swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for Optional();
  v18[3] = *(_QWORD *)(v14 - 8);
  v18[4] = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v18[1] = (char *)v18 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  MEMORY[0x1E0C80A78](v17);
  v18[0] = a3;
  v18[6] = a3;
  v18[7] = a4;
  v18[8] = a5;
  v18[9] = a6;
  v18[10] = a7;
  v18[11] = a8;
  type metadata accessor for Publishers.SubscribeOn.Inner();
}

void sub_18B559544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v0, *(_QWORD *)(v7 - 160), v5);
  *(_QWORD *)(v7 - 128) = v2;
  *(_QWORD *)(v7 - 120) = v1;
  *(_QWORD *)(v7 - 112) = v6;
  *(_QWORD *)(v7 - 104) = v3;
  type metadata accessor for Publishers.SubscribeOn();
}

uint64_t sub_18B559570(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD *)(v7 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v9 + *(int *)(a1 + 52), v2);
  v10 = *(_QWORD *)(v7 - 168);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7 - 152) + 16))(v10, v9 + *(int *)(a1 + 56), *(_QWORD *)(v7 - 144));
  swift_allocObject();
  *(_QWORD *)(v7 - 128) = Publishers.SubscribeOn.Inner.init(_:scheduler:options:)(v1, v5, v10);
  v11 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.SubscribeOn<A, B>.Inner<A1>, v4);
  Publisher.subscribe<A>(_:)(v7 - 128, *(_QWORD *)(v7 - 176), v4, v6, v11);
  return swift_release();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryMap<A, B>(uint64_t a1)
{
  Publishers.TryMap.receive<A>(subscriber:)(a1);
}

char *Publishers.SubscribeOn.Inner.init(_:scheduler:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  char *v12;
  uint64_t v13;

  v7 = *(_QWORD *)v3;
  v8 = (_DWORD *)swift_slowAlloc();
  *v8 = 0;
  *((_QWORD *)v3 + 2) = v8;
  v9 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 160)];
  *((_QWORD *)v9 + 4) = 0;
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[40] = 2;
  v10 = *(_QWORD *)(*(_QWORD *)v3 + 168);
  v11 = (_DWORD *)swift_slowAlloc();
  *v11 = 0;
  *(_QWORD *)&v3[v10] = v11;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 96) - 8) + 32))(&v3[*(_QWORD *)(*(_QWORD *)v3 + 136)], a1);
  (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v7 + 88) - 8) + 32))(&v3[*(_QWORD *)(*(_QWORD *)v3 + 144)], a2, *(_QWORD *)(v7 + 88));
  v12 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 152)];
  swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a3, v13);
  return v3;
}

void type metadata accessor for Publishers.SubscribeOn.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t ReduceProducer.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[40];
  __int128 v13;
  _BYTE v14[48];

  v3 = *v1;
  v4 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 176));
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v12);
  if (v13 == 2)
  {
    v6 = vorrq_s8(*(int8x16_t *)&v12[8], *(int8x16_t *)&v12[24]);
    if (!(*(_QWORD *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | *(_QWORD *)v12))
    {
      outlined destroy of SubscriptionStatus((uint64_t)v12);
      outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
      LOBYTE(v13) = 0;
      outlined init with take of SubscriptionStatus((uint64_t)v12, (uint64_t)v14);
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)v14, v5);
      swift_endAccess();
      os_unfair_lock_unlock(v4);
      v10 = *(_QWORD *)(v3 + 112);
      v11 = *(_OWORD *)(v3 + 96);
      *(_OWORD *)v12 = *(_OWORD *)(v3 + 80);
      *(_OWORD *)&v12[16] = v11;
      *(_QWORD *)&v12[32] = v10;
      v13 = *(_OWORD *)(v3 + 120);
      type metadata accessor for ReduceProducer();
    }
  }
  outlined destroy of SubscriptionStatus((uint64_t)v12);
  os_unfair_lock_unlock(v4);
  v8 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 8))(v8);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.TryMap<A, B>.Inner<A1>(_QWORD *a1)
{
  return Publishers.TryMap.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.TryMap.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[48];
  _BYTE v13[40];
  char v14;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v13);
  if (v14 == 2)
  {
    v6 = vorrq_s8(*(int8x16_t *)&v13[8], *(int8x16_t *)&v13[24]);
    if (!(*(_QWORD *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | *(_QWORD *)v13))
    {
      outlined destroy of SubscriptionStatus((uint64_t)v13);
      outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v13);
      v14 = 0;
      outlined init with take of SubscriptionStatus((uint64_t)v13, (uint64_t)v12);
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)v12, v5);
      swift_endAccess();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
      v10 = *(_QWORD *)(v3 + 112);
      v11 = *(_OWORD *)(v3 + 96);
      *(_OWORD *)v13 = *(_OWORD *)(v3 + 80);
      *(_OWORD *)&v13[16] = v11;
      *(_QWORD *)&v13[32] = v10;
      type metadata accessor for Publishers.TryMap.Inner();
    }
  }
  outlined destroy of SubscriptionStatus((uint64_t)v13);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
  v8 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 8))(v8);
}

uint64_t outlined init with take of SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void Publishers.TryMap.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.TryMap.Inner();
}

uint64_t sub_18B559BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v5, v2);
  v10 = (uint64_t *)(v1 + *(int *)(v4 + 44));
  v11 = *v10;
  v12 = v10[1];
  swift_allocObject();
  swift_retain();
  Publishers.TryMap.Inner.init(downstream:map:)(v6, v11, v12);
  *(_QWORD *)(v8 - 112) = v13;
  v14 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.TryMap<A, B>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v8 - 112, *(_QWORD *)(v8 - 128), a1, v3, v14);
  return swift_release();
}

void type metadata accessor for Publishers.TryMap.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.FlatMap.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.FlatMap.Outer();
}

uint64_t sub_18B559CFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v6, v5);
  v10 = *(int *)(v2 + 56);
  v11 = *(_QWORD *)(v1 + *(int *)(v2 + 52));
  v13 = *(_QWORD *)(v1 + v10);
  v12 = *(_QWORD *)(v1 + v10 + 8);
  swift_allocObject();
  swift_retain();
  v14 = Publishers.FlatMap.Outer.init(downstream:maxPublishers:map:)(v7, v11, v13, v12);
  *(_QWORD *)(v8 - 104) = a1;
  *(_QWORD *)(v8 - 96) = &protocol witness table for Publishers.FlatMap<A, B>.Outer<A1>;
  *(_QWORD *)(v8 - 128) = v14;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);
  swift_retain();
  v15(v8 - 128, v5, v4);
  __swift_destroy_boxed_opaque_existential_1(v8 - 128);
  *(_QWORD *)(v8 - 128) = v14;
  v16 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.FlatMap<A, B>.Outer<A1>, a1);
  Publisher.subscribe<A>(_:)(v8 - 128, *(_QWORD *)(v8 - 136), a1, *(_QWORD *)(v8 - 144), v16);
  return swift_release();
}

uint64_t *Publishers.FlatMap.Outer.init(downstream:maxPublishers:map:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v9 = *v4;
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  v4[2] = (uint64_t)v10;
  *(_OWORD *)(v4 + 3) = 0u;
  *(_OWORD *)(v4 + 5) = 0u;
  v4[7] = 0;
  v11 = (_QWORD *)swift_slowAlloc();
  *v11 = 0;
  v4[8] = (uint64_t)v11;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 + 160)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)(*v4 + 168)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)(*v4 + 176)) = 0;
  v12 = *(_QWORD *)(*v4 + 184);
  *(uint64_t *)((char *)v4 + v12) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 + 192)) = 0;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 + 200)) = 0;
  v13 = *(_QWORD *)(*v4 + 208);
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  *(uint64_t *)((char *)v4 + v13) = static Array._allocateUninitialized(_:)();
  *((_BYTE *)v4 + *(_QWORD *)(*v4 + 232)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)(*v4 + 240)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 96) - 8) + 32))((uint64_t)v4 + *(_QWORD *)(*v4 + 152), a1);
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 + 216)) = a2;
  v14 = (uint64_t *)((char *)v4 + *(_QWORD *)(*v4 + 224));
  *v14 = a3;
  v14[1] = a4;
  return v4;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Subscription>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 48)
    {
      outlined init with copy of Any?(i, (uint64_t)&v11, &demangling cache variable for type metadata for (Int, Subscription));
      v5 = v11;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = outlined init with take of Subscription(&v12, v3[7] + 40 * result);
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

void type metadata accessor for Publishers.FlatMap.Outer()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.TryMap.Inner.init(downstream:map:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  _QWORD *v14;

  v7 = *v3;
  v8 = (uint64_t)v3 + *(_QWORD *)(*v3 + 136);
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_QWORD *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 40) = 2;
  v9 = *(_QWORD *)(*v3 + 144);
  v10 = (_DWORD *)swift_slowAlloc();
  *(uint64_t *)((char *)v3 + v9) = (uint64_t)v10;
  *v10 = 0;
  v11 = *(_QWORD *)(*v3 + 152);
  if (one-time initialization token for lock != -1)
    swift_once();
  v12 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v13 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v12);
    *(uint64_t *)((char *)v3 + v11) = v13;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 96) - 8) + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 120), a1);
    v14 = (uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 128));
    *v14 = a2;
    v14[1] = a3;
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.SubscribeOn<A, B>.Inner<A1>(_QWORD *a1)
{
  return Publishers.SubscribeOn.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.SubscribeOn.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void (*v11)(uint64_t **, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  int8x16_t v14;
  int8x16_t v15;
  char v16;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (v6 = vorrq_s8(v14, v15),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.SubscribeOn<A, B>.Inner<A1>;
    v13 = v1;
    v10 = *(_QWORD *)(v3 + 120);
    v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    v12 = *(_QWORD *)(v3 + 96);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    v7 = a1[3];
    v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
  }
}

void protocol witness for Subscriber.receive(subscription:) in conformance FilterProducer<A, B, C, D, E>()
{
  FilterProducer.receive(subscription:)();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return protocol witness for Subscriber.receive(_:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))Publishers.Catch.Inner.UncaughtS.receive(subscription:));
}

void Publishers.Catch.Inner.UncaughtS.receive(subscription:)(uint64_t a1)
{
  Publishers.Catch.Inner.receivePre(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance SubjectSubscriber<A>(_QWORD *a1)
{
  return SubjectSubscriber.receive(subscription:)(a1);
}

uint64_t SubjectSubscriber.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  _QWORD v11[3];
  uint64_t v12;
  _UNKNOWN **v13;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  if (!MEMORY[0x18D77AE58](v1 + 3))
    goto LABEL_4;
  swift_beginAccess();
  outlined init with copy of Subscription?((uint64_t)(v1 + 4), (uint64_t)v11);
  if (v12)
  {
    swift_unknownObjectRelease();
    outlined destroy of Subscription?((uint64_t)v11);
LABEL_4:
    os_unfair_lock_unlock(v4);
    v5 = a1[3];
    v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v5);
  }
  outlined destroy of Subscription?((uint64_t)v11);
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v11);
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v11, (uint64_t)(v1 + 4));
  swift_endAccess();
  os_unfair_lock_unlock(v4);
  v12 = v3;
  v13 = &protocol witness table for SubjectSubscriber<A>;
  v11[0] = v1;
  v9 = *(_QWORD *)(v3 + 80);
  v8 = *(_QWORD *)(v3 + 88);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v8 + 32);
  swift_retain();
  v10(v11, v9, v8);
  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t ReduceProducer.receive(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  int EnumCaseMultiPayload;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  int v43;
  os_unfair_lock_s *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  char v84;
  _QWORD v85[3];
  uint64_t v86;
  uint64_t v87;

  v79 = a1;
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  v4 = *(_QWORD *)(*v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v75 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v70 = (char *)&v63 - v6;
  v77 = v3;
  v76 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v74 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v73 = *(_QWORD *)(v74 - 8);
  v9 = MEMORY[0x1E0C80A78](v74);
  v72 = (char *)&v63 - v10;
  v11 = *(_QWORD *)(v2 + 96);
  v69 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v9);
  v68 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for Optional();
  v78 = *(_QWORD *)(v71 - 8);
  v13 = MEMORY[0x1E0C80A78](v71);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v63 - v16;
  v18 = type metadata accessor for PartialCompletion(0, MEMORY[0x1E0DEE9C0] + 8, AssociatedTypeWitness, AssociatedConformanceWitness);
  v80 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v63 - v22;
  v24 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(v2 + 176));
  os_unfair_lock_lock(v24);
  v25 = (uint64_t)v1 + *(_QWORD *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v25, (uint64_t)&v81);
  if (!v84)
  {
    v64 = v15;
    v65 = v11;
    v66 = v17;
    v67 = AssociatedTypeWitness;
    outlined init with take of Subscription((__int128 *)&v81, (uint64_t)v85);
    os_unfair_lock_unlock(v24);
    (*(void (**)(uint64_t))(*v1 + 392))(v79);
    v26 = v80;
    (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v21, v23, v18);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v28 = v26;
    v29 = v23;
    if (EnumCaseMultiPayload)
    {
      v30 = v1;
      v31 = v24;
      if (EnumCaseMultiPayload != 1)
      {
        v42 = v23;
        v79 = v18;
        os_unfair_lock_lock(v24);
        *((_BYTE *)v30 + *(_QWORD *)(*v30 + 208)) = 1;
        v43 = *((unsigned __int8 *)v30 + *(_QWORD *)(*v30 + 184));
        v44 = v24;
        if (v43 == 1)
          *((_BYTE *)v30 + *(_QWORD *)(*v30 + 200)) = 1;
        v81 = 1;
        v82 = 0u;
        v83 = 0u;
        v84 = 2;
        swift_beginAccess();
        outlined assign with take of SubscriptionStatus((uint64_t)&v81, v25);
        swift_endAccess();
        v45 = (uint64_t)v30 + *(_QWORD *)(*v30 + 136);
        swift_beginAccess();
        v46 = v78;
        v47 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
        v48 = v66;
        v49 = v71;
        v47(v66, v45, v71);
        os_unfair_lock_unlock(v44);
        v50 = v86;
        v51 = v87;
        __swift_project_boxed_opaque_existential_1(v85, v86);
        (*(void (**)(uint64_t))(*(_QWORD *)(v51 + 8) + 8))(v50);
        v52 = v67;
        if (v43)
        {
          v53 = v64;
          v47(v64, (uint64_t)v48, v49);
          v54 = v69;
          v55 = v65;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v53, 1, v65) == 1)
          {
            (*(void (**)(char *, uint64_t))(v78 + 8))(v53, v49);
            v56 = v77;
            v57 = v76;
          }
          else
          {
            v58 = v68;
            (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v68, v53, v55);
            v56 = v77;
            v57 = v76;
            (*(void (**)(char *, uint64_t, uint64_t))(v77 + 48))(v58, v76, v77);
            (*(void (**)(char *, uint64_t))(v54 + 8))(v58, v55);
          }
          v59 = v74;
          v60 = v73;
          v61 = v72;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v72, 1, 1, v52);
          (*(void (**)(char *, uint64_t, uint64_t))(v56 + 56))(v61, v57, v56);
          (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v59);
          v49 = v71;
          v46 = v78;
          v48 = v66;
        }
        (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v49);
        v41 = v79;
        v39 = *(void (**)(char *, uint64_t))(v80 + 8);
        v40 = v42;
        goto LABEL_16;
      }
      v32 = v75;
      v33 = v28;
      v34 = v70;
      v35 = v67;
      (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v70, v21, v67);
      os_unfair_lock_lock(v31);
      *((_BYTE *)v30 + *(_QWORD *)(*v30 + 208)) = 1;
      *((_BYTE *)v30 + *(_QWORD *)(*v30 + 200)) = 1;
      v81 = 1;
      v82 = 0u;
      v83 = 0u;
      v84 = 2;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v81, v25);
      swift_endAccess();
      os_unfair_lock_unlock(v31);
      v36 = v86;
      v37 = v87;
      __swift_project_boxed_opaque_existential_1(v85, v86);
      (*(void (**)(uint64_t))(*(_QWORD *)(v37 + 8) + 8))(v36);
      v38 = v72;
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v72, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v38, 0, 1, v35);
      (*(void (**)(char *, uint64_t))(v77 + 56))(v38, v76);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v38, v74);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v35);
      v39 = *(void (**)(char *, uint64_t))(v33 + 8);
    }
    else
    {
      v39 = *(void (**)(char *, uint64_t))(v26 + 8);
    }
    v40 = v29;
    v41 = v18;
LABEL_16:
    v39(v40, v41);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
    return 0;
  }
  outlined destroy of SubscriptionStatus((uint64_t)&v81);
  os_unfair_lock_unlock(v24);
  return 0;
}

void protocol witness for Subscription.request(_:) in conformance FilterProducer<A, B, C, D, E>(Combine::Subscribers::Demand a1)
{
  FilterProducer.request(_:)(a1);
}

Swift::Void __swiftcall FilterProducer.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v1;

  if (a1.rawValue != 0x8000000000000000)
  {
    if ((a1.rawValue & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (a1.rawValue)
    {
      goto LABEL_4;
    }
    __break(1u);
    JUMPOUT(0x18B55ACE0);
  }
LABEL_4:
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152)));
  swift_beginAccess();
  type metadata accessor for FilterProducer.State();
}

void FilterProducer.receive(subscription:)()
{
  uint64_t v0;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152)));
  swift_beginAccess();
  type metadata accessor for FilterProducer.State();
}

uint64_t sub_18B55ADC0(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[40];
  _QWORD v19[28];

  v10 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8 - 128, v4, a1);
  v11 = *(_QWORD *)(v8 - 104);
  if (v11 != 1)
  {
    if (!v11)
    {
      outlined init with copy of Subscription((uint64_t)v3, (uint64_t)v19);
      (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v10 + 32))(v18, v19, a1);
      swift_beginAccess();
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v10 + 40))(v4, v18, a1);
      swift_endAccess();
      os_unfair_lock_unlock(v2);
      v19[0] = v17;
      v19[1] = v5;
      v19[2] = v6;
      v19[3] = v7;
      v19[4] = v16;
      v19[5] = v1;
      v19[6] = v15;
      type metadata accessor for FilterProducer();
    }
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8 - 128, a1);
  }
  os_unfair_lock_unlock(v2);
  v12 = v3[3];
  v13 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v12);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 8) + 8))(v12);
}

void FilterProducer.receive(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[9];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  v28 = a1;
  v3 = *v1;
  v4 = *(_QWORD *)(v3 + 120);
  v5 = *(_QWORD *)(v3 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v22[6] = (char *)v22 - v7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v23 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v22[8] = *(_QWORD *)(v23 - 8);
  v10 = MEMORY[0x1E0C80A78](v23);
  v22[7] = (char *)v22 - v11;
  v12 = *(_QWORD *)(v3 + 96);
  v22[5] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v10);
  v22[1] = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Optional();
  v22[4] = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v22[2] = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v22[3] = (char *)v22 - v17;
  v25 = AssociatedTypeWitness;
  v29 = type metadata accessor for PartialCompletion(0, v14, AssociatedTypeWitness, AssociatedConformanceWitness);
  v31 = *(_QWORD *)(v29 - 8);
  v18 = MEMORY[0x1E0C80A78](v29);
  MEMORY[0x1E0C80A78](v18);
  v30 = (char *)v22 - v19;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + *(_QWORD *)(v3 + 152)));
  swift_beginAccess();
  v20 = *(_QWORD *)(v3 + 88);
  v21 = *(_QWORD *)(v3 + 128);
  v26 = v5;
  v32 = v5;
  v33 = v20;
  v34 = v12;
  v35 = *(_OWORD *)(v3 + 104);
  v27 = v4;
  v36 = v4;
  v37 = v21;
  type metadata accessor for FilterProducer.State();
}

uint64_t sub_18B55B1A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;

  v9 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7 - 168, v1, a1);
  v10 = *(_QWORD *)(v7 - 144);
  if (v10 == 1)
  {
    os_unfair_lock_unlock(v3);
    return 0;
  }
  if (v10)
  {
    outlined init with take of Subscription((__int128 *)(v7 - 168), v7 - 208);
    os_unfair_lock_unlock(v3);
    v11 = *(_QWORD *)(v7 - 288);
    (*(void (**)(_QWORD))(*(_QWORD *)v2 + 224))(*(_QWORD *)(v7 - 304));
    v12 = v11;
    v13 = *(_QWORD *)(v7 - 296);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 280) + 16))(v5, v12, v13);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      v21 = *(_QWORD *)(v7 - 384);
      v22 = *(_QWORD *)(v7 - 392);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v22, v5, v4);
      v23 = *(_QWORD *)(v7 - 400);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v23, v22, v4);
      v24 = *(_QWORD *)(v7 - 376);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1, v6) == 1)
      {
        v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
        v25(v22, v4);
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v7 - 280) + 8))(*(_QWORD *)(v7 - 288), v13);
        v25(v23, v4);
        __swift_destroy_boxed_opaque_existential_1(v7 - 208);
        return 1;
      }
      else
      {
        v31 = *(_QWORD *)(v7 - 408);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v31, v23, v6);
        v26 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 312) + 48))(v31, *(_QWORD *)(v7 - 320));
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v31, v6);
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v4);
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v7 - 280) + 8))(*(_QWORD *)(v7 - 288), v13);
        __swift_destroy_boxed_opaque_existential_1(v7 - 208);
      }
      return v26;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v15 = *(_QWORD *)(v7 - 336);
      v16 = *(_QWORD *)(v7 - 328);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v15 + 32))(*(_QWORD *)(v7 - 368), v5, v16);
      os_unfair_lock_lock(v3);
      *(_QWORD *)(v7 - 248) = 0;
      *(_QWORD *)(v7 - 240) = 0;
      *(_QWORD *)(v7 - 232) = 0;
      *(_OWORD *)(v7 - 224) = xmmword_18B5F41F0;
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v1, v7 - 248, a1);
      swift_endAccess();
      os_unfair_lock_unlock(v3);
      v17 = *(_QWORD *)(v7 - 184);
      v18 = *(_QWORD *)(v7 - 176);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v7 - 208), v17);
      (*(void (**)(uint64_t))(*(_QWORD *)(v18 + 8) + 8))(v17);
      v19 = *(_QWORD *)(v7 - 360);
      v20 = *(_QWORD *)(v7 - 368);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v19, v20, v16);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v19, 0, 1, v16);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 312) + 56))(v19, *(_QWORD *)(v7 - 320));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 352) + 8))(v19, *(_QWORD *)(v7 - 344));
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v20, v16);
    }
    else
    {
      os_unfair_lock_lock(v3);
      *(_QWORD *)(v7 - 248) = 0;
      *(_QWORD *)(v7 - 240) = 0;
      *(_QWORD *)(v7 - 232) = 0;
      *(_OWORD *)(v7 - 224) = xmmword_18B5F41F0;
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v1, v7 - 248, a1);
      swift_endAccess();
      os_unfair_lock_unlock(v3);
      v27 = *(_QWORD *)(v7 - 184);
      v28 = *(_QWORD *)(v7 - 176);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v7 - 208), v27);
      (*(void (**)(uint64_t))(*(_QWORD *)(v28 + 8) + 8))(v27);
      v29 = *(_QWORD *)(v7 - 360);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7 - 336) + 56))(v29, 1, 1, *(_QWORD *)(v7 - 328));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 312) + 56))(v29, *(_QWORD *)(v7 - 320));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 352) + 8))(v29, *(_QWORD *)(v7 - 344));
    }
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v7 - 280) + 8))(*(_QWORD *)(v7 - 288), v13);
    __swift_destroy_boxed_opaque_existential_1(v7 - 208);
    return 0;
  }
  os_unfair_lock_unlock(v3);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PartialCompletion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PartialCompletion);
}

void type metadata accessor for FilterProducer.State()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.RemoveDuplicates.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  void (**v2)(uint64_t *__return_ptr, char *, uint64_t);
  void (*v3)(uint64_t *__return_ptr, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, _QWORD, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28[3];

  v25 = a1;
  v27 = a2;
  v3 = *v2;
  v26 = *((_QWORD *)*v2 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v24 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v24 - v14;
  v16 = (char *)v2 + *((_QWORD *)v3 + 38);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v16, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    v17 = v25;
LABEL_5:
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v18(v9, v17, AssociatedTypeWitness);
    v19 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56);
    v19(v9, 0, 1, AssociatedTypeWitness);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v16, v9, v5);
    swift_endAccess();
    v20 = v27;
    v18(v27, v17, AssociatedTypeWitness);
    v19(v20, 0, 1, AssociatedTypeWitness);
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, AssociatedTypeWitness);
  v17 = v25;
  v2[2](v28, v15, v25);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  if (LOBYTE(v28[0]) != 1)
    goto LABEL_5;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v27, 1, 1, AssociatedTypeWitness);
LABEL_6:
  v21 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion(0, v5, v21, AssociatedConformanceWitness);
  return swift_storeEnumTagMultiPayload();
}

void type metadata accessor for FilterProducer()
{
  JUMPOUT(0x18D77AC60);
}

_BYTE *initializeWithCopy for PartialCompletion(_BYTE *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a2 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X15 }
  }
  if (v7 == 1)
  {
    (*(void (**)(_BYTE *))(v5 + 16))(__dst);
    __dst[v6] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    __dst[v6] = 0;
  }
  return __dst;
}

uint64_t destroy for PartialCompletion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  if (*(unsigned __int8 *)(a1 + v4) < 2u)
  {
    if (*(_BYTE *)(a1 + v4))
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    return ((uint64_t (*)(void))((char *)&loc_18B55BA7C + 4 * byte_18B5F9D65[v6]))();
  }
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance AbstractCombineLatest<A, B, C>.Side<A1>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return AbstractCombineLatest.Side.receive(_:)(a1, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), a2[2], a2[3], a2[4], a2[5]);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool)(*(uint64_t (**)(void))(v1 + 48), a1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 48))();
  *a1 = result & 1;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool)@<X0>(uint64_t (*a1)(void)@<X2>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result & 1;
  return result;
}

uint64_t partial apply for basicEquality<A>(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.SetFailureType<A, B>(uint64_t a1)
{
  Publishers.SetFailureType.receive<A>(subscriber:)(a1);
}

void type metadata accessor for ReduceProducer()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.Filter.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 40) + 40))(a1, *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Drop<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.Drop.Inner.receive(_:)(a1);
}

uint64_t Publishers.Drop.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v3 = *(_QWORD *)(v1 + v2);
  v4 = v3 < 1;
  v5 = v3 - 1;
  if (v4)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 104) + 48))(a1, *(_QWORD *)(*(_QWORD *)v1 + 88));
  *(_QWORD *)(v1 + v2) = v5;
  return 0;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Drop<A>.Inner<A1>(uint64_t a1)
{
  Publishers.Drop.Inner.request(_:)(a1);
}

void Publishers.Drop.Inner.request(_:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_4:
  v3 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120));
  os_unfair_lock_lock(v3);
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 128);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)&v10);
  if (v11)
  {
    outlined init with take of Subscription(&v10, (uint64_t)v12);
    os_unfair_lock_unlock(v3);
    v5 = v13;
    v6 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    return;
  }
  outlined destroy of Subscription?((uint64_t)&v10);
  v7 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v8 = *(_QWORD *)(v1 + v7);
  v9 = 0x8000000000000000;
  if (v8 == 0x8000000000000000)
    goto LABEL_14;
  if (a1 == 0x8000000000000000)
    goto LABEL_13;
  if ((v8 | a1) < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v9 = v8 + a1;
  if (!__OFADD__(v8, a1))
  {
    if ((v9 & 0x8000000000000000) == 0)
      goto LABEL_13;
LABEL_19:
    __break(1u);
    return;
  }
  v9 = 0x8000000000000000;
LABEL_13:
  *(_QWORD *)(v1 + v7) = v9;
LABEL_14:
  os_unfair_lock_unlock(v3);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.First<A>()
{
  Publishers.First.receive<A>(subscriber:)();
}

uint64_t Publishers.Collect.Inner.receive(newValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v9 - v5, a1, AssociatedTypeWitness);
  result = swift_beginAccess();
  if (*(_QWORD *)(v1 + 16))
  {
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    v7 = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion(0, MEMORY[0x1E0DEE9C0] + 8, v7, AssociatedConformanceWitness);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Output<A>()
{
  Publishers.Output.receive<A>(subscriber:)();
}

uint64_t Publishers.First.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;

  v17 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v17 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v17 - v10, a1, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
  v13 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 136);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v13, v9, v5);
  swift_endAccess();
  v14 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion(0, MEMORY[0x1E0DEE9C0] + 8, v14, AssociatedConformanceWitness);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Publishers.Last.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;

  v17 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v17 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v17 - v10, a1, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
  v13 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 136);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v13, v9, v5);
  swift_endAccess();
  v14 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion(0, MEMORY[0x1E0DEE9C0] + 8, v14, AssociatedConformanceWitness);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Publishers.FirstWhere.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20[3];

  v3 = v2;
  v19 = a2;
  v5 = *v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v20[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v20[-1] - v12;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))((char *)v3 + *(_QWORD *)(v5 + 152)))(v20, a1);
  if (LOBYTE(v20[0]) == 1)
  {
    v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, a1, AssociatedTypeWitness);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
    v15 = (char *)v3 + *(_QWORD *)(*v3 + 136);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v15, v11, v7);
    swift_endAccess();
  }
  v16 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion(0, MEMORY[0x1E0DEE9C0] + 8, v16, AssociatedConformanceWitness);
  return swift_storeEnumTagMultiPayload();
}

uint64_t _s6Output7Combine9PublisherPQzSbIegnd_AESbIegnr_AbCRzAB10SubscriberRd__7FailureQyd__AGRtzSb5InputRtd__r__lTRTA_0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool)(*(uint64_t (**)(void))(v1 + 48), a1);
}

void type metadata accessor for Publishers.ReplaceError.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t *Publishers.ReplaceError.Inner.init(downstream:output:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;

  v5 = *v2;
  v6 = (uint64_t)v2 + *(_QWORD *)(*v2 + 128);
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_QWORD *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 40) = 2;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 136)) = 0;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 144)) = 0;
  v7 = *(_QWORD *)(*v2 + 152);
  v8 = (_DWORD *)swift_slowAlloc();
  *(uint64_t *)((char *)v2 + v7) = (uint64_t)v8;
  *v8 = 0;
  v9 = (uint64_t)v2 + *(_QWORD *)(*v2 + 112);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v9, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 88) - 8) + 32))((uint64_t)v2 + *(_QWORD *)(*v2 + 120), a1);
  return v2;
}

uint64_t protocol witness for Cancellable.cancel() in conformance Just<A>.Inner<A1>()
{
  return Just.Inner.cancel()();
}

uint64_t Just.Inner.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = type metadata accessor for Optional();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - v4;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))((char *)&v8 - v4, 1, 1, v1);
  v6 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v6, v5, v2);
  return swift_endAccess();
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Buffer<A>.Inner<A1>()
{
  Publishers.Buffer.Inner.cancel()();
}

void Publishers.Buffer.Inner.cancel()()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v7);
  if (v10)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v7);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v7, (uint64_t)v11);
    v7 = 1;
    v8 = 0u;
    v9 = 0u;
    v10 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v7, v2);
    swift_endAccess();
    swift_getAssociatedTypeWitness();
    v3 = Array.init()();
    v4 = (_QWORD *)((char *)v0 + *(_QWORD *)(*v0 + 176));
    swift_beginAccess();
    *v4 = v3;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v1);
    v5 = v12;
    v6 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Retry<A>(uint64_t a1)
{
  Publishers.Retry.receive<A>(subscriber:)(a1);
}

void Publishers.Retry.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v1);
  type metadata accessor for Publishers.Retry.Inner();
}

uint64_t sub_18B55C934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v1, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v2, *(_QWORD *)(v10 - 120), v5);
  swift_allocObject();
  *(_QWORD *)(v10 - 112) = Publishers.Retry.Inner.init(_:_:_:)(v7, v2, *(_QWORD *)(v10 - 128), v8);
  v12 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Retry<A>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v10 - 112, v3, a1, v4, v12);
  return swift_release();
}

_QWORD *Publishers.Retry.Inner.init(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  uint64_t v9;
  _DWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  char *v16;
  char *v17;

  v9 = *v4;
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  v4[2] = v10;
  v11 = (char *)v4 + *(_QWORD *)(*v4 + 128);
  *((_QWORD *)v11 + 4) = 0;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_BYTE *)v4 + *(_QWORD *)(*v4 + 144)) = 1;
  *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 + 152)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)(*v4 + 160)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)(*v4 + 168)) = 0;
  v12 = (char *)v4 + *(_QWORD *)(*v4 + 120);
  v13 = *(_QWORD *)(v9 + 80);
  v14 = *(_QWORD *)(v9 + 88);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v16 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v16, a2, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v12, 0, 1, TupleTypeMetadata2);
  v17 = (char *)v4 + *(_QWORD *)(*v4 + 136);
  *(_QWORD *)v17 = a3;
  v17[8] = a4 & 1;
  return v4;
}

void type metadata accessor for Publishers.Retry.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Concatenate<A, B>.Inner<A1>()
{
  Publishers.Concatenate.Inner.cancel()();
}

Swift::Void __swiftcall Publishers.Concatenate.Inner.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  char v21;
  _BYTE v22[40];

  v1 = *(_QWORD *)v0;
  v2 = type metadata accessor for Optional();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17 - v4;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + *(_QWORD *)(v1 + 168)));
  v6 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)&v18);
  if (v21)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v18);
    v7 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 144);
    swift_beginAccess();
    outlined init with copy of SubscriptionStatus(v7, (uint64_t)&v18);
    if (v21)
    {
      outlined destroy of SubscriptionStatus((uint64_t)&v18);
      v18 = 1;
      v19 = 0u;
      v20 = 0u;
      v21 = 2;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v18, v7);
      swift_endAccess();
      v18 = 1;
      v19 = 0u;
      v20 = 0u;
      v21 = 2;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v18, v6);
      swift_endAccess();
      v8 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 152);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
      _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v5, (uint64_t)partial apply for closure #3 in Publishers.Concatenate.Inner.cancel(), v0, v2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v9);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      outlined init with take of Subscription((__int128 *)&v18, (uint64_t)v22);
      v18 = 1;
      v19 = 0u;
      v20 = 0u;
      v21 = 2;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v18, v7);
      swift_endAccess();
      v18 = 1;
      v19 = 0u;
      v20 = 0u;
      v21 = 2;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v18, v6);
      swift_endAccess();
      v14 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 152);
      swift_beginAccess();
      v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v14, v2);
      MEMORY[0x1E0C80A78](v15);
      *(&v17 - 2) = v0;
      *(&v17 - 1) = (uint64_t)v22;
      _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v5, (uint64_t)partial apply for closure #2 in Publishers.Concatenate.Inner.cancel(), (uint64_t)(&v17 - 4), v2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v16);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v18, (uint64_t)v22);
    v18 = 1;
    v19 = 0u;
    v20 = 0u;
    v21 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v18, v6);
    swift_endAccess();
    v18 = 1;
    v19 = 0u;
    v20 = 0u;
    v21 = 2;
    v10 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 144);
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v18, v10);
    swift_endAccess();
    v11 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 152);
    swift_beginAccess();
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v11, v2);
    MEMORY[0x1E0C80A78](v12);
    *(&v17 - 2) = v0;
    *(&v17 - 1) = (uint64_t)v22;
    _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v5, (uint64_t)partial apply for closure #1 in Publishers.Concatenate.Inner.cancel(), (uint64_t)(&v17 - 4), v2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v13);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
}

uint64_t Publisher.prepend(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publisher.prepend(_:)(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))Publisher.prepend<A>(_:));
}

uint64_t partial apply for closure #1 in Publishers.SubscribeOn.Inner.cancel()()
{
  uint64_t v0;

  return closure #1 in Publishers.SubscribeOn.Inner.cancel()(*(_QWORD *)(v0 + 64), (_QWORD *)(v0 + 72));
}

BOOL partial apply for closure #3 in implicit closure #4 in Publishers._Merged.request(_:)(uint64_t a1)
{
  return partial apply for closure #3 in implicit closure #4 in Publishers._Merged.request(_:)(a1);
}

{
  uint64_t v1;

  return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 48))(a1, 1) == 1;
}

uint64_t type metadata completion function for Publishers.FlatMap()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t partial apply for closure #1 in Publishers.ReceiveOn.Inner.receive(completion:)()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;
  uint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v3)- 8)+ 80);
  return closure #1 in Publishers.ReceiveOn.Inner.receive(completion:)(*(_QWORD **)(v0 + 64), v0 + ((v4 + 72) & ~v4));
}

ValueMetadata *type metadata accessor for Publishers.PrefetchStrategy()
{
  return &type metadata for Publishers.PrefetchStrategy;
}

uint64_t type metadata completion function for CombineLatest2Inner()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for FilterProducer()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for Publishers.FlatMap.Outer()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
    return swift_initClassMetadata2();
  return result;
}

uint64_t type metadata completion function for Publishers.HandleEvents.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t Publishers.Filter.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 40) + 56))(a1, *(_QWORD *)(a2 + 24));
}

uint64_t Publisher.replaceError(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publisher.replaceError(with:)(a1, a2, a3, (uint64_t (*)(char *, char *, uint64_t, uint64_t))Publishers.ReplaceError.init(upstream:output:));
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t Publisher.merge(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v16;

  v4 = v3;
  getContiguousArrayStorageType<A>(for:)(a2, a2);
  v8 = *(_QWORD *)(a2 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  swift_allocObject();
  v10 = static Array._adoptStorage(_:count:)();
  v12 = v11;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v13(v11, v4, a2);
  v13(v12 + v9, a1, a2);
  _finalizeUninitializedArray<A>(_:)();
  v16 = v10;
  v14 = type metadata accessor for Array();
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF38], v14);
  return Publishers.MergeMany.init<A>(_:)((uint64_t)&v16, v14, a3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
  uint64_t v0;

  v0 = type metadata accessor for Array();
  specialized closure #1 in Publisher.multicast<A>(subject:)(v0);
}

uint64_t Publishers.MergeMany.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t))(v6 + 16))((char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v8 = Array.init<A>(_:)();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v8;
  return result;
}

uint64_t getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType())
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  else
    return type metadata accessor for _ContiguousArrayStorage();
}

void partial apply for closure #2 in Subscribers.Sink.receive(completion:)()
{
  uint64_t *v0;

  closure #2 in Subscribers.Sink.receive(completion:)(v0);
}

void closure #2 in Subscribers.Sink.receive(completion:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v2 + 80);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(v2 + 96);
  swift_beginAccess();
  a1[2] = (uint64_t)specialized closure #1 in Publisher.multicast<A>(subject:);
  a1[3] = v3;
  swift_release();
  os_unfair_lock_unlock((os_unfair_lock_t)a1[12]);
}

uint64_t type metadata completion function for PassthroughSubject.Conduit()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t partial apply for closure #2 in AsyncPublisher.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t type metadata accessor for AnySubscriber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnySubscriber);
}

uint64_t type metadata completion function for PartialCompletion()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Filter.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t PublishedSubject.Conduit.__deallocating_deinit()
{
  PublishedSubject.Conduit.deinit();
  return swift_deallocClassInstance();
}

uint64_t PublishedSubject.Conduit.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 208)), -1, -1);
  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 216)), -1, -1);
  v1 = ConduitBase.init()();
  swift_release();
  v2 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 192);
  v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

uint64_t PassthroughSubject.Conduit.__deallocating_deinit()
{
  PassthroughSubject.Conduit.deinit();
  return swift_deallocClassInstance();
}

uint64_t PassthroughSubject.Conduit.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 216)), -1, -1);
  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 224)), -1, -1);
  v1 = ConduitBase.init()();
  swift_release();
  v2 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 200);
  v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

uint64_t Future.Conduit.State.fulfill(_:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int EnumCaseMultiPayload;
  uint64_t (*v9)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v2, a2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v9 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  if (EnumCaseMultiPayload)
    return v9(v7, a2);
  v9(v2, a2);
  v11 = *(_QWORD *)(a2 + 32);
  swift_getAssociatedConformanceWitness();
  v12 = type metadata accessor for Result();
  v13 = &v2[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v2, v7, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v13, a1, v12);
  return swift_storeEnumTagMultiPayload();
}

void Future.Conduit.cancel()()
{
  type metadata accessor for Future.Conduit.State();
}

void sub_18B55DB68(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  os_unfair_lock_s *v10;
  char *v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  _BYTE v14[80];

  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v9 = &v14[-v8];
  v10 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(v2 + 208));
  os_unfair_lock_lock(v10);
  v11 = (char *)v1 + *(_QWORD *)(*v1 + 200);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v4 + 16))(v9, v11, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, a1);
  if (EnumCaseMultiPayload == 3)
  {
    os_unfair_lock_unlock(v10);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, _BYTE *, uint64_t))(v4 + 40))(v11, v7, a1);
    swift_endAccess();
    v13 = v1[2];
    v1[2] = 0;
    os_unfair_lock_unlock(v10);
    if (v13)
    {
      swift_retain();
      Future.disassociate(_:)((uint64_t)v1);
      swift_release_n();
    }
  }
}

void Future.Conduit.__deallocating_deinit()
{
  Future.Conduit.deinit();
}

uint64_t sub_18B55DCC8()
{
  return swift_deallocClassInstance();
}

void Future.Conduit.deinit()
{
  uint64_t v0;

  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 208)), -1, -1);
  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 216)), -1, -1);
  ConduitBase.init()();
  swift_release();
  type metadata accessor for Future.Conduit.State();
}

uint64_t sub_18B55DD50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  return v1;
}

uint64_t destroy for Future.Conduit.State(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a2[4] - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a2[2] - 8);
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = *(unsigned __int8 *)(v6 + 80) | *(unsigned __int8 *)(v5 + 80);
  v8 = v4 + v7;
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v6 + 64);
  v10 = v9 + ((v4 + v7) & ~v7);
  if (v10 + 1 > v4)
    v11 = v10 + 1;
  else
    v11 = *(_QWORD *)(v3 + 64);
  if (v4 + 1 > v11)
    v12 = v4 + 1;
  else
    v12 = v11;
  v13 = *(unsigned __int8 *)(a1 + v12);
  if (v13 >= 3)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X15 }
  }
  if (v13 == 1)
  {
    v16 = ~v7;
    (*(void (**)(uint64_t))(v3 + 8))(a1);
    v17 = *(unsigned __int8 *)(((v8 + a1) & v16) + v9);
    if (v17 >= 2)
    {
      if (v9 <= 3)
        v18 = v9;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
      v15 = *(uint64_t (**)(void))(v6 + 8);
    else
      v15 = *(uint64_t (**)(void))(v5 + 8);
  }
  else
  {
    v15 = *(uint64_t (**)(void))(v3 + 8);
  }
  return v15();
}

uint64_t instantiation function for generic protocol witness table for Publishers.Multicast<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Multicast<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.SubscribeOn<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.SubscribeOn.Inner.request(_:)(a1);
}

void Publishers.SubscribeOn.Inner.request(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t (*)(), _QWORD *, uint64_t, uint64_t);
  __int128 v13[2];
  char v14;
  _BYTE v15[40];

  v2 = v1;
  v4 = (_QWORD *)*v1;
  v5 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v5);
  v6 = (uint64_t)v2 + *(_QWORD *)(*v2 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)v13);
  if (v14)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v13);
    os_unfair_lock_unlock(v5);
  }
  else
  {
    outlined init with take of Subscription(v13, (uint64_t)v15);
    os_unfair_lock_unlock(v5);
    v7 = (char *)v2 + *(_QWORD *)(*v2 + 152);
    v8 = swift_allocObject();
    swift_weakInit();
    outlined init with copy of Subscription((uint64_t)v15, (uint64_t)v13);
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = v4[10];
    v10 = v4[11];
    v9[3] = v10;
    v9[4] = v4[12];
    v9[5] = v4[13];
    v11 = v4[14];
    v9[6] = v11;
    v9[7] = v4[15];
    v9[8] = v8;
    outlined init with take of Subscription(v13, (uint64_t)(v9 + 9));
    v9[14] = a1;
    v12 = *(void (**)(char *, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(v11 + 56);
    swift_retain();
    v12(v7, partial apply for closure #1 in Publishers.SubscribeOn.Inner.request(_:), v9, v10, v11);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    swift_release();
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.ReplaceError<A>.Inner<A1>(_QWORD *a1)
{
  return Publishers.ReplaceError.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.ReplaceError.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void (*v11)(uint64_t **, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  int8x16_t v14;
  int8x16_t v15;
  char v16;

  v3 = *v1;
  v4 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 152));
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 128);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (v6 = vorrq_s8(v14, v15),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.ReplaceError<A>.Inner<A1>;
    v13 = v1;
    v10 = *(_QWORD *)(v3 + 104);
    v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    v12 = *(_QWORD *)(v3 + 88);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    v7 = a1[3];
    v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
  }
}

void Publishers.SwitchToLatest.Outer.Side.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;

  Publishers.SwitchToLatest.Outer.receiveInner(subscription:_:)(a1, *v1);
}

void Publishers.SwitchToLatest.Outer.receiveInner(subscription:_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;

  v5 = *(_QWORD *)(*v2 + 168);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v5));
  v6 = *v2;
  if (*(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 152)) != a2
    || (*((_BYTE *)v2 + *(_QWORD *)(v6 + 184)) & 1) != 0
    || (v7 = (uint64_t)v2 + *(_QWORD *)(v6 + 144),
        swift_beginAccess(),
        outlined init with copy of Subscription?(v7, (uint64_t)v14),
        v8 = v15,
        outlined destroy of Subscription?((uint64_t)v14),
        v8))
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v5));
    v10 = a1[3];
    v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 8) + 8))(v10);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v14);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v14, v7);
    swift_endAccess();
    *((_BYTE *)v2 + *(_QWORD *)(*v2 + 208)) = 0;
    v11 = *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 216));
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v5));
    if (v11 == 0x8000000000000000)
      goto LABEL_9;
    if (v11 < 0)
    {
      __break(1u);
      return;
    }
    if (v11)
    {
LABEL_9:
      v12 = a1[3];
      v13 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v11, v12, v13);
    }
  }
}

void protocol witness for Subscription.request(_:) in conformance Publishers.ReplaceError<A>.Inner<A1>(uint64_t a1)
{
  Publishers.ReplaceError.Inner.request(_:)(a1);
}

void Publishers.ReplaceError.Inner.request(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  os_unfair_lock_s *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v3 = *(_QWORD **)v1;
  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_4:
  v4 = *(os_unfair_lock_s **)(v1 + v3[19]);
  os_unfair_lock_lock(v4);
  v5 = *(_QWORD **)v1;
  if (*(_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 136)) == 1)
  {
    v15 = 1;
    v16 = 0u;
    v17 = 0u;
    v18 = 2;
    v6 = v1 + v5[16];
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v15, v6);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v7 = v3[13];
    v8 = v3[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 112), v8, v7);
    LOBYTE(v15) = 1;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 56))(&v15, v8, v7);
    return;
  }
  v9 = v5[18];
  v10 = *(_QWORD *)(v1 + v9);
  v11 = 0x8000000000000000;
  if (v10 == 0x8000000000000000)
    goto LABEL_14;
  if (a1 == 0x8000000000000000)
    goto LABEL_13;
  if ((v10 | a1) < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v11 = v10 + a1;
  if (!__OFADD__(v10, a1))
  {
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_13;
LABEL_21:
    __break(1u);
    return;
  }
  v11 = 0x8000000000000000;
LABEL_13:
  *(_QWORD *)(v1 + v9) = v11;
  v5 = *(_QWORD **)v1;
LABEL_14:
  v12 = v1 + v5[16];
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v12, (uint64_t)&v15);
  if (v18)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v15);
    os_unfair_lock_unlock(v4);
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v15, (uint64_t)v19);
    os_unfair_lock_unlock(v4);
    v13 = v20;
    v14 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24))(a1, v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
}

uint64_t partial apply for closure #1 in Publishers.SubscribeOn.Inner.request(_:)()
{
  uint64_t *v0;

  return closure #1 in Publishers.SubscribeOn.Inner.request(_:)(v0[8], v0 + 9, v0[14]);
}

uint64_t closure #1 in Publishers.SubscribeOn.Inner.request(_:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = *(os_unfair_lock_s **)(result + *(_QWORD *)(*(_QWORD *)result + 168));
    os_unfair_lock_lock(v6);
    v7 = a2[3];
    v8 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(a3, v7, v8);
    os_unfair_lock_unlock(v6);
    return swift_release();
  }
  return result;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.TryMap<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.TryMap.Inner.request(_:)(a1);
}

void Publishers.TryMap.Inner.request(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7[2];
  char v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
  }
  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    v5 = v10;
    v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Debounce<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.Debounce.Inner.request(_:)(a1);
}

void Publishers.Debounce.Inner.request(_:)(uint64_t a1)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v8[48];

  v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v8);
  LODWORD(v4) = v8[40];
  outlined destroy of SubscriptionStatus((uint64_t)v8);
  if ((_DWORD)v4)
    goto LABEL_10;
  v5 = *(_QWORD *)(*v1 + 208);
  v6 = *(_QWORD *)((char *)v1 + v5);
  v7 = 0x8000000000000000;
  if (v6 == 0x8000000000000000)
    goto LABEL_10;
  if (a1 == 0x8000000000000000)
  {
LABEL_9:
    *(_QWORD *)((char *)v1 + v5) = v7;
LABEL_10:
    os_unfair_lock_unlock(v3);
    return;
  }
  if ((v6 | a1) < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = v6 + a1;
  if (__OFADD__(v6, a1))
  {
    v7 = 0x8000000000000000;
    goto LABEL_9;
  }
  if ((v7 & 0x8000000000000000) == 0)
    goto LABEL_9;
LABEL_12:
  __break(1u);
}

uint64_t type metadata completion function for Just()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_DWORD *one-time initialization function for globalLock()
{
  _DWORD *result;

  result = (_DWORD *)swift_slowAlloc();
  *result = 0;
  static DebugHook.globalLock = (uint64_t)result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnyCancellable(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Collect<A>()
{
  Publishers.Collect.receive<A>(subscriber:)();
}

uint64_t dispatch thunk of CustomCombineIdentifierConvertible.combineIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t PublishedSubject.__deallocating_deinit()
{
  PublishedSubject.deinit();
  return swift_deallocClassInstance();
}

uint64_t *PublishedSubject.deinit()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = *v0;
  v3 = *(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 112));
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Subscription(v5, (uint64_t)v9);
      v7 = v10;
      v6 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      v5 += 40;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  MEMORY[0x18D77ADB0](v1[2], -1, -1);
  outlined consume of ConduitList<A, Never><A>(v1[3], *((_BYTE *)v1 + 32));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 8))((uint64_t)v1 + *(_QWORD *)(*v1 + 104));
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t type metadata completion function for Subscribers.Completion()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Catch<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t type metadata accessor for Publishers.BufferingStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.BufferingStrategy);
}

uint64_t type metadata completion function for Publishers.Catch.Inner(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _OWORD *))
{
  __int128 v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = MEMORY[0x1E0DE9D58] + 64;
  v11 = MEMORY[0x1E0DE9D38] + 64;
  v8 = a1[6];
  v9[0] = a1[5];
  v4 = a1[7];
  v9[1] = v8;
  v9[2] = v4;
  result = a4(319, v9);
  if (v6 <= 0x3F)
  {
    v12 = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState();
    if (v7 <= 0x3F)
    {
      v13 = *(_QWORD *)(result - 8) + 64;
      v14 = MEMORY[0x1E0DEE9D0] + 64;
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

void Publishers.Catch.Inner.CaughtS.receive(subscription:)()
{
  Publishers.Catch.Inner.receivePost(subscription:)();
}

void Publishers.Catch.Inner.receivePost(subscription:)()
{
  type metadata accessor for Publishers.Catch.Inner.State();
}

void sub_18B55EC80(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  os_unfair_lock_s *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[80];

  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v9 = &v17[-v8];
  v10 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v10);
  v11 = (char *)v2 + *(_QWORD *)(*v2 + 144);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v4 + 16))(v9, v11, a1);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    outlined init with copy of Subscription((uint64_t)v1, (uint64_t)v7);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, _BYTE *, uint64_t))(v4 + 40))(v11, v7, a1);
    swift_endAccess();
    v12 = v2[3];
    os_unfair_lock_unlock(v10);
    if (v12 == 0x8000000000000000)
    {
LABEL_5:
      v13 = v1[3];
      v14 = v1[4];
      __swift_project_boxed_opaque_existential_1(v1, v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24))(v12, v13, v14);
      return;
    }
    if (v12 < 0)
    {
      __break(1u);
    }
    else if (v12)
    {
      goto LABEL_5;
    }
  }
  else
  {
    os_unfair_lock_unlock(v10);
    v16 = v1[3];
    v15 = v1[4];
    __swift_project_boxed_opaque_existential_1(v1, v16);
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 8) + 8))(v16);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, a1);
  }
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Catch<A, B>.Inner<A1>()
{
  Publishers.Catch.Inner.cancel()();
}

void Publishers.Catch.Inner.CaughtS.receive(completion:)()
{
  Publishers.Catch.Inner.receivePost(completion:)();
}

void Publishers.Catch.Inner.receivePost(completion:)()
{
  type metadata accessor for Publishers.Catch.Inner.State();
}

uint64_t sub_18B55EEA0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  os_unfair_lock_s *v12;
  char *v13;
  _BYTE v15[96];

  v6 = *(_QWORD *)(a1 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v11 = &v15[-v10];
  v12 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v12);
  v13 = (char *)v2 + *(_QWORD *)(*v2 + 144);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v6 + 16))(v11, v13, a1);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, _BYTE *, uint64_t))(v6 + 40))(v13, v9, a1);
    swift_endAccess();
    os_unfair_lock_unlock(v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 56))(v3, *(_QWORD *)(v4 - 176), v1);
  }
  else
  {
    os_unfair_lock_unlock(v12);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, a1);
}

uint64_t Publishers.Catch.Inner.__deallocating_deinit(uint64_t (*a1)(_QWORD, _OWORD *))
{
  Publishers.Catch.Inner.deinit(a1);
  return swift_deallocClassInstance();
}

void Publishers.Catch.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.Catch.Inner();
}

void sub_18B55F084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v0);
  swift_allocObject();
  swift_retain();
  Publishers.Catch.Inner.init(downstream:handler:)();
}

void sub_18B55F0DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 136) = a1;
  *(_QWORD *)(v6 - 128) = v2;
  *(_QWORD *)(v6 - 120) = v1;
  *(_QWORD *)(v6 - 112) = v5;
  *(_QWORD *)(v6 - 104) = v3;
  *(_QWORD *)(v6 - 96) = v4;
  *(_QWORD *)(v6 - 88) = *(_QWORD *)(v6 - 144);
  type metadata accessor for Publishers.Catch.Inner.UncaughtS();
}

uint64_t sub_18B55F100(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Catch<A, B>.Inner<A1>.UncaughtS, a1);
  Publisher.subscribe<A>(_:)(v3 - 136, v1, a1, v2, v5);
  return swift_release();
}

void type metadata accessor for Publishers.Catch.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void type metadata accessor for Publishers.Catch.Inner.UncaughtS()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.Catch.Inner.init(downstream:handler:)()
{
  _QWORD *v0;
  _DWORD *v1;
  char *v2;
  uint64_t AssociatedTypeWitness;

  v1 = (_DWORD *)swift_slowAlloc();
  *v1 = 0;
  v0[2] = v1;
  v0[3] = 0;
  v2 = (char *)v0 + *(_QWORD *)(*v0 + 144);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v2, 1, 1, AssociatedTypeWitness);
  type metadata accessor for Publishers.Catch.Inner.State();
}

uint64_t sub_18B55F224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152), v3, v4);
  v5 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 160));
  *v5 = v2;
  v5[1] = v0;
  return v1;
}

void Publishers.Catch.Inner.cancel()()
{
  type metadata accessor for Publishers.Catch.Inner.State();
}

void sub_18B55F2C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  __int128 *v9;
  os_unfair_lock_s *v10;
  char *v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[80];

  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v9 = (__int128 *)&v15[-v8];
  v10 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v10);
  v11 = (char *)v1 + *(_QWORD *)(*v1 + 144);
  swift_beginAccess();
  (*(void (**)(__int128 *, char *, uint64_t))(v4 + 16))(v9, v11, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1 || EnumCaseMultiPayload == 2)
  {
    outlined init with take of Subscription(v9, v2 - 112);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, _BYTE *, uint64_t))(v4 + 40))(v11, v7, a1);
    swift_endAccess();
    os_unfair_lock_unlock(v10);
    v13 = *(_QWORD *)(v2 - 88);
    v14 = *(_QWORD *)(v2 - 80);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 - 112), v13);
    (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 8) + 8))(v13);
    __swift_destroy_boxed_opaque_existential_1(v2 - 112);
  }
  else if (EnumCaseMultiPayload == 4)
  {
    os_unfair_lock_unlock(v10);
  }
  else
  {
    os_unfair_lock_unlock(v10);
    (*(void (**)(__int128 *, uint64_t))(v4 + 8))(v9, a1);
  }
}

void Publishers.Catch.Inner.receivePre(completion:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[26];

  v17[14] = a1;
  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v17[4] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17[3] = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v2[13];
  v6 = v2[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17[11] = (char *)v17 - v8;
  v9 = v2[14];
  v10 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17[8] = v10;
  v13 = type metadata accessor for Subscribers.Completion(0, v10, AssociatedConformanceWitness, v12);
  v17[6] = *(_QWORD *)(v13 - 8);
  v17[7] = v13;
  MEMORY[0x1E0C80A78](v13);
  v17[5] = (char *)v17 - v14;
  v15 = v2[12];
  v16 = v2[15];
  v17[19] = v6;
  v17[20] = v3;
  v17[1] = v3;
  v17[9] = v15;
  v17[21] = v15;
  v17[22] = v5;
  v17[0] = v9;
  v17[23] = v9;
  v17[24] = v16;
  v17[10] = v16;
  type metadata accessor for Publishers.Catch.Inner.State();
}

uint64_t sub_18B55F5B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD *v23;
  os_unfair_lock_s *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _BYTE *, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  os_unfair_lock_s *v31;
  char *v32;
  int EnumCaseMultiPayload;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[80];

  v7 = *(_QWORD *)(a1 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = &v41[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = MEMORY[0x1E0C80A78](v8);
  *(_QWORD *)(v5 - 192) = &v41[-v12];
  MEMORY[0x1E0C80A78](v11);
  v14 = &v41[-v13];
  *(_QWORD *)(v5 - 272) = v2;
  v15 = v3;
  v16 = v1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = type metadata accessor for Subscribers.Completion(0, v1, AssociatedConformanceWitness, v18);
  MEMORY[0x1E0C80A78](v19);
  v21 = &v41[-v20];
  (*(void (**)(_BYTE *, _QWORD))(v22 + 16))(&v41[-v20], *(_QWORD *)(v5 - 176));
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v4 + 48))(v21, 1, v1) == 1)
  {
    v23 = *(_QWORD **)(v5 - 184);
    v24 = (os_unfair_lock_s *)v23[2];
    os_unfair_lock_lock(v24);
    v25 = (char *)v23 + *(_QWORD *)(*v23 + 144);
    swift_beginAccess();
    (*(void (**)(_BYTE *, char *, uint64_t))(v7 + 16))(v14, v25, a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v26 = *(_QWORD *)(v5 - 192);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 40))(v25, v26, a1);
      swift_endAccess();
      os_unfair_lock_unlock(v24);
      v27 = *(_QWORD *)(v5 - 248);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 - 224) - 8) + 56))(v27, 1, 1);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 208) + 56))(v27, *(_QWORD *)(v5 - 216));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 240) + 8))(v27, *(_QWORD *)(v5 - 232));
    }
    else
    {
      os_unfair_lock_unlock(v24);
    }
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v14, a1);
  }
  else
  {
    *(_QWORD *)(v5 - 176) = v4;
    v28 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 32);
    v29 = *(_QWORD *)(v5 - 200);
    v28(v29, v21, v1);
    v30 = *(_QWORD **)(v5 - 184);
    v31 = (os_unfair_lock_s *)v30[2];
    os_unfair_lock_lock(v31);
    v32 = (char *)v30 + *(_QWORD *)(*v30 + 144);
    swift_beginAccess();
    *(_QWORD *)(v5 - 224) = v7;
    (*(void (**)(_BYTE *, char *, uint64_t))(v7 + 16))(v10, v32, a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      os_unfair_lock_unlock(v31);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 176) + 8))(v29, v16);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v34 = *(_QWORD *)(v5 - 192);
        *(_QWORD *)(v5 - 232) = v10;
        swift_storeEnumTagMultiPayload();
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 224) + 40))(v32, v34, a1);
        swift_endAccess();
        os_unfair_lock_unlock(v31);
        (*(void (**)(uint64_t))((char *)v30 + *(_QWORD *)(*v30 + 160)))(v29);
        *(_QWORD *)(v5 - 168) = v30;
        swift_retain();
        *(_QWORD *)(v5 - 136) = v15;
        v35 = *(_QWORD *)(v5 - 216);
        *(_QWORD *)(v5 - 128) = *(_QWORD *)(v5 - 280);
        *(_QWORD *)(v5 - 120) = v35;
        v36 = *(_QWORD *)(v5 - 288);
        *(_QWORD *)(v5 - 112) = *(_QWORD *)(v5 - 272);
        *(_QWORD *)(v5 - 104) = v36;
        *(_QWORD *)(v5 - 96) = *(_QWORD *)(v5 - 208);
        type metadata accessor for Publishers.Catch.Inner.CaughtS();
      }
      if (EnumCaseMultiPayload)
      {
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        v38 = *(_QWORD *)(v5 - 176);
        v39 = *(_QWORD *)(v5 - 192);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v39, v29, v16);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v16);
        swift_storeEnumTagMultiPayload();
        swift_beginAccess();
        v40 = *(_QWORD *)(v5 - 224);
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 40))(v32, v39, a1);
        swift_endAccess();
        os_unfair_lock_unlock(v31);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v29, v16);
        return (*(uint64_t (**)(_BYTE *, uint64_t))(v40 + 8))(v10, a1);
      }
    }
  }
  return result;
}

void Publishers.Catch.Inner.receivePre(subscription:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[15];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v18 = a1;
  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v16[6] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v16[5] = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v2[13];
  v6 = v2[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16[11] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v16[9] = (char *)v16 - v9;
  v16[10] = v8;
  v17 = type metadata accessor for Optional();
  v16[13] = *(_QWORD *)(v17 - 8);
  v10 = MEMORY[0x1E0C80A78](v17);
  v16[12] = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v16[14] = (char *)v16 - v12;
  v13 = v2[12];
  v14 = v2[14];
  v15 = v2[15];
  v16[3] = v6;
  v19 = v6;
  v20 = v3;
  v16[7] = v3;
  v21 = v13;
  v22 = v5;
  v16[4] = v5;
  v23 = v14;
  v24 = v15;
  type metadata accessor for Publishers.Catch.Inner.State();
}

uint64_t sub_18B55FC08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  os_unfair_lock_s *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  void (*v30)(_QWORD, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, _QWORD, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v38[96];

  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v6 - 240) = &v38[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9);
  v12 = &v38[-v11];
  v13 = (os_unfair_lock_s *)v4[2];
  os_unfair_lock_lock(v13);
  v14 = (char *)v4 + *(_QWORD *)(*v4 + 144);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v8 + 16))(v12, v14, a1);
  if (swift_getEnumCaseMultiPayload())
  {
    os_unfair_lock_unlock(v13);
    v15 = *(_QWORD **)(v6 - 176);
    v16 = v15[3];
    v17 = v15[4];
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 8) + 8))(v16);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v12, a1);
  }
  else
  {
    *(_QWORD *)(v6 - 304) = v2;
    *(_QWORD *)(v6 - 296) = v1;
    *(_QWORD *)(v6 - 288) = v3;
    v18 = *(_QWORD *)(v6 - 232);
    v20 = *(_QWORD *)(v6 - 200);
    v19 = *(_QWORD *)(v6 - 192);
    v21 = v12;
    v22 = *(_QWORD *)(v6 - 184);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v20 + 32))(v19, v21, v22);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    v24 = *(_QWORD *)(v6 - 208);
    v23(v24, v19, v22);
    v25 = *(_QWORD *)(v6 - 224);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 216) + 48))(v24, 1, v25);
    v27 = v4;
    v28 = v13;
    v29 = *(_QWORD *)(v6 - 240);
    if (v26 != 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 216) + 32))(v18, *(_QWORD *)(v6 - 208), v25);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 40))(v14, v29, a1);
      swift_endAccess();
      os_unfair_lock_unlock(v28);
      (*(void (**)(uint64_t))((char *)v4 + *(_QWORD *)(*v4 + 160)))(v18);
      *(_QWORD *)(v6 - 168) = v4;
      swift_retain();
      v34 = *(_QWORD *)(v6 - 248);
      *(_QWORD *)(v6 - 136) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 128) = v34;
      v35 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 120) = *(_QWORD *)(v6 - 296);
      *(_QWORD *)(v6 - 112) = v35;
      v36 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 104) = *(_QWORD *)(v6 - 304);
      *(_QWORD *)(v6 - 96) = v36;
      type metadata accessor for Publishers.Catch.Inner.CaughtS();
    }
    v30 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v6 - 200) + 8);
    v31 = *(_QWORD *)(v6 - 184);
    v30(*(_QWORD *)(v6 - 208), v31);
    outlined init with copy of Subscription(*(_QWORD *)(v6 - 176), v29);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 40))(v14, v29, a1);
    swift_endAccess();
    os_unfair_lock_unlock(v28);
    *(_QWORD *)(v6 - 112) = v5;
    *(_QWORD *)(v6 - 104) = &protocol witness table for Publishers.Catch<A, B>.Inner<A1>;
    *(_QWORD *)(v6 - 136) = v27;
    v32 = *(_QWORD *)(v6 - 288);
    v33 = *(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 40);
    swift_retain();
    v33(v6 - 136, *(_QWORD *)(v6 - 296), v32);
    v30(*(_QWORD *)(v6 - 192), v31);
    return __swift_destroy_boxed_opaque_existential_1(v6 - 136);
  }
}

_OWORD *assignWithTake for Publishers.TryCatch.Inner.State(_OWORD *a1, _OWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  __int128 v17;
  int v18;
  unsigned int v19;
  unsigned int v20;

  if (a1 == a2)
    return a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84))
    v6 = *(_QWORD *)(v5 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64) + 1;
  if (v6 <= 0x28)
    v7 = 40;
  else
    v7 = v6;
  v8 = 8 * v7;
  if (v7 > 3)
    goto LABEL_11;
  v9 = ((1 << v8) + 1) >> v8;
  if (v9 > 0xFFFC)
  {
    v10 = *(_DWORD *)((char *)a1 + v7);
    if (v10 < 3)
      goto LABEL_20;
    goto LABEL_16;
  }
  if (v9 <= 0xFC)
  {
LABEL_11:
    v10 = *((unsigned __int8 *)a1 + v7);
    if (v10 < 3)
      goto LABEL_20;
LABEL_16:
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  v10 = *(unsigned __int16 *)((char *)a1 + v7);
  if (v10 >= 3)
    goto LABEL_16;
LABEL_20:
  if (v10 == 2 || v10 == 1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    if (v7 > 3)
      goto LABEL_29;
  }
  else
  {
    if (!(*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v5 + 48))(a1, 1, AssociatedTypeWitness))
      (*(void (**)(_OWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    if (v7 > 3)
      goto LABEL_29;
  }
  v12 = ((1 << v8) + 1) >> v8;
  if (v12 > 0xFFFC)
  {
    v13 = *(_DWORD *)((char *)a2 + v7);
    if (v13 < 3)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (v12 <= 0xFC)
  {
LABEL_29:
    v13 = *((unsigned __int8 *)a2 + v7);
    if (v13 < 3)
      goto LABEL_38;
LABEL_34:
    if (v7 <= 3)
      v14 = v7;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  v13 = *(unsigned __int16 *)((char *)a2 + v7);
  if (v13 >= 3)
    goto LABEL_34;
LABEL_38:
  if (v13 != 2)
  {
    if (v13 != 1)
    {
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
      {
        memcpy(a1, a2, v6);
        if (v7 > 3)
          goto LABEL_54;
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
        if (v7 > 3)
        {
LABEL_54:
          *((_BYTE *)a1 + v7) = 0;
          return a1;
        }
      }
      v20 = ((1 << v8) + 1) >> v8;
      if (v20 > 0xFFFC)
      {
        *(_DWORD *)((char *)a1 + v7) = 0;
        return a1;
      }
      if (v20 > 0xFC)
      {
        *(_WORD *)((char *)a1 + v7) = 0;
        return a1;
      }
      goto LABEL_54;
    }
    v17 = a2[1];
    *a1 = *a2;
    a1[1] = v17;
    *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
    if (v7 > 3)
      goto LABEL_50;
    v18 = 1;
    v19 = ((1 << v8) + 1) >> v8;
    if (v19 <= 0xFFFC)
    {
      if (v19 <= 0xFC)
      {
LABEL_50:
        *((_BYTE *)a1 + v7) = 1;
        return a1;
      }
LABEL_59:
      *(_WORD *)((char *)a1 + v7) = v18;
      return a1;
    }
LABEL_56:
    *(_DWORD *)((char *)a1 + v7) = v18;
    return a1;
  }
  v15 = a2[1];
  *a1 = *a2;
  a1[1] = v15;
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  if (v7 <= 3)
  {
    v16 = ((1 << v8) + 1) >> v8;
    if (v16 > 0xFFFC)
    {
      v18 = 2;
      goto LABEL_56;
    }
    if (v16 > 0xFC)
    {
      LOWORD(v18) = 2;
      goto LABEL_59;
    }
  }
  *((_BYTE *)a1 + v7) = 2;
  return a1;
}

void Publishers.Catch.Inner.request(_:)()
{
  type metadata accessor for Publishers.Catch.Inner.State();
}

void sub_18B5603E8(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - v5;
  if (v1 != 0x8000000000000000)
  {
    if (v1 < 0)
    {
      __break(1u);
    }
    else if (v1)
    {
      goto LABEL_4;
    }
    __break(1u);
    JUMPOUT(0x18B560584);
  }
LABEL_4:
  os_unfair_lock_lock(v2[2]);
  v7 = (char *)v2 + *(_QWORD *)&(*v2)[36]._os_unfair_lock_opaque;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v7, a1);
  v8 = (char *)&loc_18B560480 + dword_18B5EB30C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_18B560594()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void type metadata accessor for Publishers.Catch.Inner.State()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t initializeWithCopy for Publishers.TryCatch.Inner.State(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  unsigned int v12;
  __int128 v13;
  int v14;
  unsigned int v15;
  unsigned int v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84))
    v6 = *(_QWORD *)(v5 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64) + 1;
  if (v6 <= 0x28)
    v7 = 40;
  else
    v7 = v6;
  if (v7 > 3)
    goto LABEL_10;
  v8 = ((1 << (8 * v7)) + 1) >> (8 * v7);
  if (v8 <= 0xFFFC)
  {
    if (v8 > 0xFC)
    {
      v9 = *(unsigned __int16 *)(a2 + v7);
      if (v9 < 3)
        goto LABEL_19;
      goto LABEL_15;
    }
LABEL_10:
    v9 = *(unsigned __int8 *)(a2 + v7);
    if (v9 < 3)
      goto LABEL_19;
LABEL_15:
    if (v7 <= 3)
      v10 = v7;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  v9 = *(_DWORD *)(a2 + v7);
  if (v9 >= 3)
    goto LABEL_15;
LABEL_19:
  if (v9 != 2)
  {
    if (v9 != 1)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
      {
        memcpy((void *)a1, (const void *)a2, v6);
        if (v7 > 3)
          goto LABEL_35;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
        if (v7 > 3)
        {
LABEL_35:
          *(_BYTE *)(a1 + v7) = 0;
          return a1;
        }
      }
      v16 = ((1 << (8 * v7)) + 1) >> (8 * v7);
      if (v16 > 0xFFFC)
      {
        *(_DWORD *)(a1 + v7) = 0;
        return a1;
      }
      if (v16 > 0xFC)
      {
        *(_WORD *)(a1 + v7) = 0;
        return a1;
      }
      goto LABEL_35;
    }
    v13 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
    if (v7 > 3)
      goto LABEL_31;
    v14 = 1;
    v15 = ((1 << (8 * v7)) + 1) >> (8 * v7);
    if (v15 <= 0xFFFC)
    {
      if (v15 <= 0xFC)
      {
LABEL_31:
        *(_BYTE *)(a1 + v7) = 1;
        return a1;
      }
LABEL_40:
      *(_WORD *)(a1 + v7) = v14;
      return a1;
    }
LABEL_37:
    *(_DWORD *)(a1 + v7) = v14;
    return a1;
  }
  v11 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
  if (v7 <= 3)
  {
    v12 = ((1 << (8 * v7)) + 1) >> (8 * v7);
    if (v12 > 0xFFFC)
    {
      v14 = 2;
      goto LABEL_37;
    }
    if (v12 > 0xFC)
    {
      LOWORD(v14) = 2;
      goto LABEL_40;
    }
  }
  *(_BYTE *)(a1 + v7) = 2;
  return a1;
}

uint64_t Publishers.Autoconnect.SideEffectSubscription.request(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[5];
  v4 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a1, v3, v4);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Multicast<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.Multicast.Inner.request(_:)(a1);
}

void Publishers.Multicast.Inner.request(_:)(uint64_t a1)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7[2];
  char v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(v3);
    v5 = v10;
    v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

char *Publishers.Catch.Inner.deinit(uint64_t (*a1)(_QWORD, _OWORD *))
{
  char *v1;
  _OWORD *v3;
  char *v4;
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  _OWORD v9[3];

  v3 = *(_OWORD **)v1;
  MEMORY[0x18D77ADB0](*((_QWORD *)v1 + 2), -1, -1);
  v4 = &v1[*(_QWORD *)(*(_QWORD *)v1 + 144)];
  v8 = v3[6];
  v9[0] = v3[5];
  v5 = v3[7];
  v9[1] = v8;
  v9[2] = v5;
  v6 = a1(0, v9);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  (*(void (**)(char *))(*(_QWORD *)(v8 - 8) + 8))(&v1[*(_QWORD *)(*(_QWORD *)v1 + 152)]);
  swift_release();
  return v1;
}

uint64_t destroy for Publishers.TryCatch.Inner.State(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v3 + 84))
    v4 = *(_QWORD *)(v3 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64) + 1;
  if (v4 <= 0x28)
    v4 = 40;
  if (v4 > 3)
    goto LABEL_7;
  v6 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v6 > 0xFFFC)
  {
    v5 = *(_DWORD *)(a1 + v4);
  }
  else
  {
    if (v6 <= 0xFC)
    {
LABEL_7:
      v5 = *(unsigned __int8 *)(a1 + v4);
      goto LABEL_12;
    }
    v5 = *(unsigned __int16 *)(a1 + v4);
  }
LABEL_12:
  if (v5 >= 3)
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v5 == 2 || v5 == 1)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  return result;
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Multicast<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.Multicast.Inner.receive(completion:)(a1);
}

void Publishers.Multicast.Inner.receive(completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  unsigned __int8 v10;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v7);
  v6 = v10;
  outlined destroy of SubscriptionStatus((uint64_t)&v7);
  if (v6)
  {
    os_unfair_lock_unlock(v4);
  }
  else
  {
    v7 = 1;
    v8 = 0u;
    v9 = 0u;
    v10 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v7, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 120) + 56))(a1, *(_QWORD *)(v3 + 96));
  }
}

uint64_t Publishers.Autoconnect.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 40) + 56))(a1, *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance ReduceProducer<A, B, C, D, E>(_QWORD *a1)
{
  return ReduceProducer.receive(subscription:)(a1);
}

uint64_t closure #1 in Publishers.SubscribeOn.Inner.cancel()(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = *(os_unfair_lock_s **)(result + *(_QWORD *)(*(_QWORD *)result + 168));
    os_unfair_lock_lock(v4);
    v5 = a2[3];
    v6 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v5);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v5);
    os_unfair_lock_unlock(v4);
    return swift_release();
  }
  return result;
}

void protocol witness for Cancellable.cancel() in conformance Publishers.TryMap<A, B>.Inner<A1>()
{
  Publishers.TryMap.Inner.cancel()();
}

void Publishers.TryMap.Inner.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v1));
  v2 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v5, (uint64_t)v9);
    v5 = 1;
    v6 = 0u;
    v7 = 0u;
    v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
    v3 = v10;
    v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

void protocol witness for Cancellable.cancel() in conformance Publishers.FlatMap<A, B>.Outer<A1>()
{
  Publishers.FlatMap.Outer.cancel()();
}

void Publishers.FlatMap.Outer.cancel()()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[40];

  v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  v2 = *(_QWORD *)(*v0 + 232);
  if ((*((_BYTE *)v0 + v2) & 1) != 0)
  {
    os_unfair_lock_unlock(v1);
    return;
  }
  *((_BYTE *)v0 + v2) = 1;
  v3 = (_QWORD *)((char *)v0 + *(_QWORD *)(*v0 + 184));
  swift_beginAccess();
  v4 = *v3;
  *v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (uint64_t)(v0 + 3);
  swift_beginAccess();
  outlined init with copy of Any?(v5, (uint64_t)v28, &demangling cache variable for type metadata for Subscription?);
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v25, v5);
  swift_endAccess();
  os_unfair_lock_unlock(v1);
  v6 = 0;
  v7 = v4 + 64;
  v8 = 1 << *(_BYTE *)(v4 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v4 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  if (!v10)
    goto LABEL_10;
LABEL_8:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  v15 = v14 | (v6 << 6);
  while (2)
  {
    v16 = *(_QWORD *)(v4 + 56);
    *(_QWORD *)&v22 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15);
    outlined init with copy of Subscription(v16 + 40 * v15, (uint64_t)&v22 + 8);
    while (1)
    {
      outlined init with take of (key: Int, value: Subscription)?((uint64_t)&v22, (uint64_t)&v25);
      if (!v27)
      {
        swift_release();
        outlined init with copy of Any?((uint64_t)v28, (uint64_t)&v25, &demangling cache variable for type metadata for Subscription?);
        v20 = *((_QWORD *)&v26 + 1);
        if (*((_QWORD *)&v26 + 1))
        {
          v21 = v27;
          __swift_project_boxed_opaque_existential_1(&v25, *((uint64_t *)&v26 + 1));
          (*(void (**)(uint64_t))(*(_QWORD *)(v21 + 8) + 8))(v20);
          outlined destroy of Subscription?((uint64_t)v28);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
        }
        else
        {
          outlined destroy of Subscription?((uint64_t)v28);
          outlined destroy of Subscription?((uint64_t)&v25);
        }
        return;
      }
      outlined init with take of Subscription((__int128 *)((char *)&v25 + 8), (uint64_t)&v22);
      v13 = *((_QWORD *)&v23 + 1);
      v12 = v24;
      __swift_project_boxed_opaque_existential_1(&v22, *((uint64_t *)&v23 + 1));
      (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 8) + 8))(v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
      if (v10)
        goto LABEL_8;
LABEL_10:
      v17 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
        goto LABEL_33;
      }
      if (v17 < v11)
      {
        v18 = *(_QWORD *)(v7 + 8 * v17);
        if (v18)
          goto LABEL_13;
        v19 = v6 + 2;
        ++v6;
        if (v17 + 1 < v11)
        {
          v18 = *(_QWORD *)(v7 + 8 * v19);
          if (v18)
            goto LABEL_16;
          v6 = v17 + 1;
          if (v17 + 2 < v11)
          {
            v18 = *(_QWORD *)(v7 + 8 * (v17 + 2));
            if (v18)
            {
              v17 += 2;
              goto LABEL_13;
            }
            v19 = v17 + 3;
            v6 = v17 + 2;
            if (v17 + 3 < v11)
              break;
          }
        }
      }
LABEL_27:
      v10 = 0;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
    }
    v18 = *(_QWORD *)(v7 + 8 * v19);
    if (v18)
    {
LABEL_16:
      v17 = v19;
LABEL_13:
      v10 = (v18 - 1) & v18;
      v15 = __clz(__rbit64(v18)) + (v17 << 6);
      v6 = v17;
      continue;
    }
    break;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v11)
    {
      v6 = v11 - 1;
      goto LABEL_27;
    }
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_13;
  }
LABEL_33:
  __break(1u);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.HandleEvents<A>.Inner<A1>()
{
  Publishers.HandleEvents.Inner.cancel()();
}

void Publishers.HandleEvents.Inner.cancel()()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  char v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v1 = (os_unfair_lock_s *)v0[8];
  os_unfair_lock_lock(v1);
  v2 = (void (*)(void))v0[15];
  if (v2)
  {
    swift_retain();
    os_unfair_lock_unlock(v1);
    v2();
    os_unfair_lock_lock(v1);
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v2);
  }
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v0 + 2), (uint64_t)&v10);
  if (v13)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v10, (uint64_t)v14);
    v3 = v0[9];
    v0[9] = 0;
    v0[10] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v3);
    v4 = v0[11];
    v0[11] = 0;
    v0[12] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v4);
    v5 = v0[13];
    v0[13] = 0;
    v0[14] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v5);
    v6 = v0[15];
    v0[15] = 0;
    v0[16] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v6);
    v7 = v0[17];
    v0[17] = 0;
    v0[18] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v7);
    v10 = 1;
    v11 = 0u;
    v12 = 0u;
    v13 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v10, (uint64_t)(v0 + 2));
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    v8 = v15;
    v9 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 8) + 8))(v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
}

void protocol witness for Cancellable.cancel() in conformance Publishers.SubscribeOn<A, B>.Inner<A1>()
{
  Publishers.SubscribeOn.Inner.cancel()();
}

void Publishers.SubscribeOn.Inner.cancel()()
{
  _QWORD *v0;
  _QWORD *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t (*)(), _QWORD *, uint64_t, uint64_t);
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  char v13;
  _BYTE v14[40];

  v1 = (_QWORD *)*v0;
  v2 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v2);
  v3 = (uint64_t)v0 + *(_QWORD *)(*v0 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v3, (uint64_t)&v10);
  if (v13)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    os_unfair_lock_unlock(v2);
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v10, (uint64_t)v14);
    v10 = 1;
    v11 = 0u;
    v12 = 0u;
    v13 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v10, v3);
    swift_endAccess();
    os_unfair_lock_unlock(v2);
    v4 = (char *)v0 + *(_QWORD *)(*v0 + 152);
    v5 = swift_allocObject();
    swift_weakInit();
    outlined init with copy of Subscription((uint64_t)v14, (uint64_t)&v10);
    v6 = (_QWORD *)swift_allocObject();
    v6[2] = v1[10];
    v7 = v1[11];
    v6[3] = v7;
    v6[4] = v1[12];
    v6[5] = v1[13];
    v8 = v1[14];
    v6[6] = v8;
    v6[7] = v1[15];
    v6[8] = v5;
    outlined init with take of Subscription((__int128 *)&v10, (uint64_t)(v6 + 9));
    v9 = *(void (**)(char *, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(v8 + 56);
    swift_retain();
    v9(v4, partial apply for closure #1 in Publishers.SubscribeOn.Inner.cancel(), v6, v7, v8);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    swift_release();
  }
}

void protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Concatenate<A, B>.Inner<A1>.SuffixSubscriber(_QWORD *a1)
{
  Publishers.Concatenate.Inner.SuffixSubscriber.receive(subscription:)(a1);
}

void Publishers.Concatenate.Inner.SuffixSubscriber.receive(subscription:)(_QWORD *a1)
{
  Publishers.Concatenate.Inner.suffixReceive(subscription:)(a1);
}

void Publishers.Concatenate.Inner.suffixReceive(subscription:)(_QWORD *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char v14;

  v3 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 168));
  os_unfair_lock_lock(v3);
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)&v11);
  if (v14 == 2
    && (v5 = vorrq_s8(v12, v13),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | v11)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v11);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v11);
    v14 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v11, v4);
    swift_endAccess();
    v8 = *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 160));
    os_unfair_lock_unlock(v3);
    if (v8)
    {
      v9 = a1[3];
      v10 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v8, v9, v10);
    }
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v11);
    os_unfair_lock_unlock(v3);
    v7 = a1[3];
    v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
  }
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Output<A>.Inner<A1>()
{
  Publishers.Output.Inner.cancel()();
}

void Publishers.Output.Inner.cancel()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = *(os_unfair_lock_s **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144));
  os_unfair_lock_lock(v1);
  v2 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v5, (uint64_t)v9);
    v5 = 1;
    v6 = 0u;
    v7 = 0u;
    v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    v3 = v10;
    v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

void type metadata accessor for Publishers.Catch.Inner.CaughtS()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.Concatenate.Inner.PrefixSubscriber.receive(_:)(uint64_t a1)
{
  Publishers.Concatenate.Inner.prefixReceive(_:)(a1);
}

void Publishers.Concatenate.Inner.prefixReceive(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE v13[48];

  v2 = v1;
  v4 = *v1;
  v5 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 168));
  os_unfair_lock_lock(v5);
  v6 = (uint64_t)v1 + *(_QWORD *)(*v1 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)v13);
  v7 = v13[40];
  outlined destroy of SubscriptionStatus((uint64_t)v13);
  if (v7)
    goto LABEL_2;
  v8 = *(_QWORD *)(*v2 + 160);
  v9 = *(uint64_t *)((char *)v2 + v8);
  if (v9 != 0x8000000000000000)
  {
    if (!v9)
      goto LABEL_2;
    if (v9 < 0)
    {
      __break(1u);
      __break(1u);
      goto LABEL_18;
    }
    *(uint64_t *)((char *)v2 + v8) = v9 - 1;
  }
  os_unfair_lock_unlock(v5);
  v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 + 120) + 48))(a1, *(_QWORD *)(v4 + 96));
  if (v10)
  {
    os_unfair_lock_lock(v5);
    v11 = *(uint64_t *)((char *)v2 + v8);
    v12 = 0x8000000000000000;
    if (v11 != 0x8000000000000000)
    {
      if (v10 == 0x8000000000000000)
        goto LABEL_16;
      if (((v11 | v10) & 0x8000000000000000) == 0)
      {
        v12 = v11 + v10;
        if (!__OFADD__(v11, v10))
        {
          if ((v12 & 0x8000000000000000) == 0)
            goto LABEL_16;
LABEL_19:
          __break(1u);
          return;
        }
        v12 = 0x8000000000000000;
LABEL_16:
        *(uint64_t *)((char *)v2 + v8) = v12;
        goto LABEL_2;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_2:
    os_unfair_lock_unlock(v5);
  }
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.Concatenate<A, B>.Inner<A1>.PrefixSubscriber(uint64_t a1)
{
  Publishers.Concatenate.Inner.PrefixSubscriber.receive(_:)(a1);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed ConduitBase<A, B>) -> (@error @owned Error)(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 40))(*a1);
}

void PublishedSubject.Conduit.offer(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v1;
  v27 = a1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 168);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v26 - v8;
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(os_unfair_lock_s **)((char *)v2 + *(_QWORD *)(v3 + 208));
  os_unfair_lock_lock(v13);
  v14 = *v2;
  v15 = *(_QWORD *)(*v2 + 200);
  v16 = *(uint64_t *)((char *)v2 + v15);
  if (v16 != 0x8000000000000000)
  {
    if (v16 < 0)
    {
      __break(1u);
      goto LABEL_27;
    }
    if (!v16)
    {
LABEL_6:
      *((_BYTE *)v2 + *(_QWORD *)(v14 + 224)) = 0;
      os_unfair_lock_unlock(v13);
      return;
    }
  }
  v17 = *(_QWORD *)(v14 + 192);
  v28 = v10;
  v18 = (uint64_t)v2 + v17;
  swift_beginAccess();
  v19 = v18;
  v20 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v19, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v9, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v14 = *v2;
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v12, v9, v4);
  v21 = *(uint64_t *)((char *)v2 + v15);
  if (v21 != 0x8000000000000000)
  {
    if ((v21 & 0x8000000000000000) == 0)
    {
      if (v21)
      {
        *(uint64_t *)((char *)v2 + v15) = v21 - 1;
        goto LABEL_11;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_11:
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 224)) = 1;
  os_unfair_lock_unlock(v13);
  os_unfair_recursive_lock_lock_with_options();
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 176) + 48))(v27, v4);
  os_unfair_recursive_lock_unlock();
  if (v22 == 0x8000000000000000)
  {
    os_unfair_lock_lock(v13);
    v23 = 0x8000000000000000;
    if (*(uint64_t *)((char *)v2 + v15) == 0x8000000000000000)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v22 < 0)
    goto LABEL_29;
  if (v22)
  {
    os_unfair_lock_lock(v13);
    v24 = *(uint64_t *)((char *)v2 + v15);
    if (v24 == 0x8000000000000000)
    {
LABEL_23:
      os_unfair_lock_unlock(v13);
      goto LABEL_24;
    }
    if (((v24 | v22) & 0x8000000000000000) == 0)
    {
      v25 = __OFADD__(v24, v22);
      v23 = v24 + v22;
      if (v25)
      {
        v23 = 0x8000000000000000;
LABEL_22:
        *(uint64_t *)((char *)v2 + v15) = v23;
        goto LABEL_23;
      }
      if ((v23 & 0x8000000000000000) == 0)
        goto LABEL_22;
LABEL_31:
      __break(1u);
      return;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_24:
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v4);
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B561DAC + 4 * byte_18B5F82A3[v10]))();
  }
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance PublishedSubscriber<A>(uint64_t a1)
{
  PublishedSubscriber.receive(_:)(a1);
  return 0;
}

uint64_t PublishedSubscriber.receive(_:)(uint64_t a1)
{
  if (swift_weakLoadStrong())
  {
    PublishedSubject.send(_:)(a1);
    swift_release();
  }
  return 0;
}

uint64_t AbstractZip.Side.receive(_:)(uint64_t a1, uint64_t a2)
{
  char **v2;
  char *v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[3];
  uint64_t v11;

  v4 = *v2;
  v11 = *(_QWORD *)(a2 + 40);
  v5 = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_1, a1, v5);
  AbstractZip.receive(_:index:)((uint64_t)v10, v4);
  v8 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v8;
}

void AbstractZip.receive(_:index:)(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  BOOL v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t *v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v3 = v2;
  v6 = *(char **)v2;
  v7 = *((_QWORD *)v6 + 13);
  v8 = *((_QWORD *)v6 + 11);
  v59 = *((_QWORD *)v6 + 12);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = type metadata accessor for Subscribers.Completion(0, v8, AssociatedConformanceWitness, v10);
  v12 = MEMORY[0x1E0C80A78](v11);
  v13 = *((_QWORD *)v6 + 10);
  v14 = *(uint64_t **)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)&v3[*((_QWORD *)v6 + 21)] <= (uint64_t)a2)
    goto LABEL_67;
  v58 = v7;
  v55 = v17;
  v56 = v16;
  v57 = v15;
  v7 = *((_QWORD *)v6 + 22);
  os_unfair_lock_lock(*(os_unfair_lock_t *)&v3[v7]);
  v20 = *(_QWORD *)v3;
  if ((v3[*(_QWORD *)(*(_QWORD *)v3 + 136)] & 1) != 0
    || (v3[*(_QWORD *)(v20 + 144)] & 1) != 0
    || (v6 = *(char **)(v20 + 152), (v6[(_QWORD)v3] & 1) != 0))
  {
LABEL_5:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)&v3[v7]);
    return;
  }
  outlined init with copy of Any(a1, (uint64_t)&v68);
  v21 = *(_QWORD *)(*(_QWORD *)v3 + 120);
  a1 = *(_QWORD *)&v3[v21];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v53 = v21;
  *(_QWORD *)&v3[v21] = a1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_70;
  if (((unint64_t)a2 & 0x8000000000000000) != 0)
    goto LABEL_71;
LABEL_8:
  v49 = v6;
  v52 = v19;
  if (*(_QWORD *)(a1 + 16) > (unint64_t)a2)
  {
    v19 = (char *)(a1 + 32);
    a1 = *(_QWORD *)(a1 + 32 + 8 * (_QWORD)a2);
    v23 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v19[8 * (_QWORD)a2] = a1;
    v54 = a2;
    if ((v23 & 1) == 0)
      goto LABEL_73;
    goto LABEL_10;
  }
  while (1)
  {
    __break(1u);
LABEL_73:
    a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16) + 1, 1, (char *)a1);
    *(_QWORD *)&v19[8 * (_QWORD)a2] = a1;
LABEL_10:
    a2 = *(char **)(a1 + 16);
    v24 = *(_QWORD *)(a1 + 24);
    if ((unint64_t)a2 >= v24 >> 1)
    {
      a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), (int64_t)(a2 + 1), 1, (char *)a1);
      *(_QWORD *)&v19[8 * (_QWORD)v54] = a1;
    }
    v25 = v52;
    *(_QWORD *)(a1 + 16) = a2 + 1;
    outlined init with take of Any(&v68, (_OWORD *)(a1 + 32 * (_QWORD)a2 + 32));
    v6 = *(char **)&v3[v53];
    v26 = *((_QWORD *)v6 + 2);
    v51 = v13;
    v50 = v14;
    if (!v26)
      break;
    v19 = (char *)*((_QWORD *)v6 + 4);
    v27 = *((_QWORD *)v19 + 2);
    if (!v27)
      goto LABEL_5;
    v62 = (uint64_t *)(v26 - 1);
    if (v26 == 1)
    {
LABEL_19:
      v48 = v8;
      *(_QWORD *)&v61 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      swift_bridgeObjectRetain();
      v14 = 0;
      v8 = 0;
      a2 = (char *)MEMORY[0x1E0DEE9D8];
      v60 = MEMORY[0x1E0DEE9B8] + 8;
      a1 = MEMORY[0x1E0DEE9D8];
      while (1)
      {
        outlined init with copy of Any((uint64_t)(v19 + 32), (uint64_t)&v68);
        swift_bridgeObjectRetain();
        v30 = (char *)swift_isUniquelyReferenced_nonNull_native();
        if (!(_DWORD)v30 || (unint64_t)(v27 - 1) > *((_QWORD *)v19 + 3) >> 1)
          v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30, v27, 1, v19);
        swift_arrayDestroy();
        v31 = *((_QWORD *)v19 + 2);
        memmove(v19 + 32, v19 + 64, 32 * v31 - 32);
        *((_QWORD *)v19 + 2) = v31 - 1;
        outlined init with copy of Any((uint64_t)&v68, (uint64_t)&v65);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)a2 + 2) + 1, 1, a2);
        v33 = *((_QWORD *)a2 + 2);
        v32 = *((_QWORD *)a2 + 3);
        if (v33 >= v32 >> 1)
          a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, a2);
        *((_QWORD *)a2 + 2) = v33 + 1;
        outlined init with take of Any(&v65, &a2[32 * v33 + 32]);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16) + 1, 1, (_QWORD *)a1);
        v13 = *(_QWORD *)(a1 + 16);
        v34 = *(_QWORD *)(a1 + 24);
        if (v13 >= v34 >> 1)
          a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v13 + 1, 1, (_QWORD *)a1);
        *(_QWORD *)(a1 + 16) = v13 + 1;
        *(_QWORD *)(a1 + 8 * v13 + 32) = v19;
        v35 = *(_QWORD *)&v3[v61];
        if ((unint64_t)v14 >= *(_QWORD *)(v35 + 16))
          break;
        if (*((_BYTE *)v14 + v35 + 32) == 1)
        {
          v13 = *((_QWORD *)v19 + 2);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
          swift_bridgeObjectRelease();
          if (!v13)
            v8 = 1;
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
          swift_bridgeObjectRelease();
        }
        if (v62 == v14)
        {
          swift_bridgeObjectRelease();
          v25 = v52;
          goto LABEL_41;
        }
        v19 = *(char **)&v6[8 * (_QWORD)v14 + 40];
        v27 = *((_QWORD *)v19 + 2);
        v14 = (uint64_t *)((char *)v14 + 1);
        if (!v27)
          goto LABEL_66;
      }
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    v28 = 5;
    while (1)
    {
      v29 = v28 - 3;
      if (__OFADD__(v28 - 4, 1))
        break;
      if (!*(_QWORD *)(*(_QWORD *)&v6[8 * v28] + 16))
        goto LABEL_5;
      ++v28;
      if (v29 == v26)
        goto LABEL_19;
    }
LABEL_69:
    __break(1u);
LABEL_70:
    a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a1);
    *(_QWORD *)&v3[v53] = a1;
    if (((unint64_t)a2 & 0x8000000000000000) == 0)
      goto LABEL_8;
LABEL_71:
    __break(1u);
  }
  v48 = v8;
  LOBYTE(v8) = 0;
  a1 = MEMORY[0x1E0DEE9D8];
  a2 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_41:
  *(_QWORD *)&v3[v53] = a1;
  swift_bridgeObjectRelease();
  v36 = *(_QWORD *)(*(_QWORD *)v3 + 192);
  v3[v36] = 1;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)&v3[v7]);
  (*(void (**)(char *))(*(_QWORD *)v3 + 504))(a2);
  swift_bridgeObjectRelease();
  os_unfair_recursive_lock_lock_with_options();
  v37 = (*(uint64_t (**)(char *, uint64_t))(v58 + 48))(v25, v59);
  os_unfair_recursive_lock_unlock();
  os_unfair_lock_lock(*(os_unfair_lock_t *)&v3[v7]);
  v3[v36] = 0;
  if ((v8 & 1) != 0)
  {
    v49[(_QWORD)v3] = 1;
    v38 = v55;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v55, 1, 1);
    AbstractZip.lockedSendCompletion(completion:)(v38);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v38, v57);
    ((void (*)(char *, unint64_t))v50[1])(v25, v51);
    return;
  }
  v39 = *(_QWORD *)(*(_QWORD *)v3 + 200);
  v40 = v51;
  v41 = v50;
  if (v37 == 0x8000000000000000)
    goto LABEL_48;
  v42 = *(_QWORD *)&v3[v39];
  if (v42 == 0x8000000000000000)
    goto LABEL_48;
  if (((v42 | v37) & 0x8000000000000000) == 0)
  {
    v43 = __OFADD__(v37, v42);
    a1 = v37 + v42;
    if (!v43)
    {
      if (a1 < 0)
        goto LABEL_75;
      *(_QWORD *)&v3[v39] = 0;
      if (!a1)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)&v3[v7]);
        ((void (*)(char *, unint64_t))v41[1])(v52, v40);
        return;
      }
      goto LABEL_49;
    }
LABEL_48:
    *(_QWORD *)&v3[v39] = 0;
    a1 = 0x8000000000000000;
LABEL_49:
    v44 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 128)];
    swift_beginAccess();
    v45 = *(_QWORD *)v44;
    v6 = *(char **)&v3[v7];
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)v6);
    v8 = 0;
    v13 = *(_QWORD *)(v45 + 16);
    v62 = (uint64_t *)v45;
    v60 = v45 + 32;
    v3 = (char *)&v63 + 8;
    v59 = (uint64_t)&v65 + 8;
    a2 = (char *)&v68 + 8;
    v61 = xmmword_18B5F41F0;
    v19 = (char *)&demangling cache variable for type metadata for (offset: Int, element: Subscription?)?;
    v14 = &demangling cache variable for type metadata for Subscription?;
    if (!v13)
    {
LABEL_52:
      v65 = 0u;
      v66 = 0u;
      v8 = v13;
      v67 = v61;
      goto LABEL_55;
    }
    while (v8 < v62[2])
    {
      outlined init with copy of Subscription?(v60 + 40 * v8, (uint64_t)&v63 + 8);
      *(_QWORD *)&v65 = v8;
      outlined init with take of Subscription?((uint64_t)&v63 + 8, v59, &demangling cache variable for type metadata for Subscription?);
      ++v8;
LABEL_55:
      outlined init with take of Subscription?((uint64_t)&v65, (uint64_t)&v68, &demangling cache variable for type metadata for (offset: Int, element: Subscription?)?);
      if (v69 == 1)
      {
        swift_bridgeObjectRelease();
        ((void (*)(char *, unint64_t))v50[1])(v52, v51);
        return;
      }
      v6 = (char *)v68;
      outlined init with take of Subscription?((uint64_t)&v68 + 8, (uint64_t)&v63, &demangling cache variable for type metadata for Subscription?);
      if (v64)
      {
        outlined init with take of Subscription(&v63, (uint64_t)&v65);
        if (v6 != v54)
        {
          v46 = *((_QWORD *)&v66 + 1);
          v7 = v67;
          v6 = (char *)__swift_project_boxed_opaque_existential_1(&v65, *((uint64_t *)&v66 + 1));
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, v46, v7);
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
        if (v8 == v13)
          goto LABEL_52;
      }
      else
      {
        outlined destroy of Subscription?((uint64_t)&v63);
        if (v8 == v13)
          goto LABEL_52;
      }
    }
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  __break(1u);
LABEL_75:
  __break(1u);
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t getEnumTagSinglePayload for PublishedSubscriber(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t Publisher<>.assign(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[2];

  swift_retain();
  PublishedSubscriber.init(_:)(v11);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for PublishedSubscriber(0, AssociatedTypeWitness, v6, v7);
  v9 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for PublishedSubscriber<A>, v8);
  Publisher.subscribe<A>(_:)((uint64_t)v11, a2, v8, a3, v9);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v11, v8);
}

uint64_t destroy for PublishedSubscriber()
{
  return swift_weakDestroy();
}

void PublishedSubscriber.init(_:)(uint64_t *a1@<X8>)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  if (one-time initialization token for lock != -1)
    swift_once();
  v2 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v3 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v2);
    *a1 = v3;
    swift_weakInit();
    swift_weakAssign();
    swift_release();
  }
}

uint64_t type metadata accessor for PublishedSubscriber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PublishedSubscriber);
}

uint64_t vtable thunk for AbstractZip.convert(values:) dispatching to Zip2Inner.convert(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = a2 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  return Zip2Inner.convert(values:)(a2, v4, a1);
}

uint64_t Zip2Inner.convert(values:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[32];

  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    outlined init with copy of Any(a3 + 32, (uint64_t)v7);
    result = swift_dynamicCast();
    if (v3 != 1)
    {
      outlined init with copy of Any(a3 + 64, (uint64_t)&v6);
      return swift_dynamicCast();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t initializeWithTake for Publishers.CompactMap.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *initializeWithTake for PublishedSubscriber(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_weakTakeInit();
  return a1;
}

uint64_t type metadata instantiation function for Publishers.CombineLatest4()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata completion function for Future.Conduit()
{
  type metadata accessor for Future.Conduit.State();
}

uint64_t Publishers._Merged.__deallocating_deinit()
{
  Publishers._Merged.deinit();
  return swift_deallocClassInstance();
}

uint64_t *Publishers._Merged.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 176)), -1, -1);
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 184)), -1, -1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Publisher<>.assign<A>(to:on:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v8 = (uint64_t *)(*a1 + *MEMORY[0x1E0DED210]);
  v9 = *v8;
  v10 = *(_QWORD *)(*v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v19 - v11;
  v15 = type metadata accessor for Subscribers.Assign(0, v9, *(_QWORD *)(v13 + 8), v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  v16 = swift_allocObject();
  swift_retain();
  Subscribers.Assign.init(object:keyPath:)((uint64_t)v12, (uint64_t)a1);
  v20 = v16;
  v17 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Subscribers.Assign<A, B>, v15);
  Publisher.subscribe<A>(_:)((uint64_t)&v20, a3, v15, a4, v17);
  type metadata accessor for AnyCancellable();
  v20 = v16;
  return AnyCancellable.__allocating_init<A>(_:)((uint64_t)&v20, v15, (uint64_t)&protocol witness table for Subscribers.Assign<A, B>);
}

void Publishers.MapKeyPath.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.MapKeyPath.Inner();
}

void sub_18B562F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&a9 - v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v10, v9);
  swift_retain();
  Publishers.MapKeyPath.Inner.init(downstream:keyPath:)(v11, v9, (uint64_t)v14);
}

uint64_t sub_18B562F78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.MapKeyPath<A, B>.Inner<A1>, v3);
  Publisher.subscribe<A>(_:)(v4, v2, v3, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v3);
}

uint64_t destroy for Publishers.MapKeyPath.Inner(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 8))();
  return swift_release();
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Buffer<A>.Inner<A1>(uint64_t a1)
{
  Publishers.Buffer.Inner.request(_:)(a1);
}

void Publishers.Buffer.Inner.request(_:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13[2];
  char v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v13);
  if (v14)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v13);
    os_unfair_lock_unlock(v3);
    return;
  }
  outlined init with take of Subscription(v13, (uint64_t)v15);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v6 = *(_QWORD *)(v1 + v5);
  v7 = 0x8000000000000000;
  if (v6 != 0x8000000000000000)
  {
    if (a1 != 0x8000000000000000)
    {
      if ((v6 | a1) < 0)
      {
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      v7 = v6 + a1;
      if (__OFADD__(v6, a1))
      {
        v7 = 0x8000000000000000;
      }
      else if ((v7 & 0x8000000000000000) != 0)
      {
LABEL_20:
        __break(1u);
        return;
      }
    }
    *(_QWORD *)(v1 + v5) = v7;
  }
  v8 = *(_BYTE *)(v1 + 24);
  os_unfair_lock_unlock(v3);
  if ((v8 & 1) != 0)
    goto LABEL_16;
  Publishers.Buffer.Inner.drain()();
  v10 = v9;
  if (v9 == 0x8000000000000000)
  {
LABEL_15:
    v11 = v16;
    v12 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(v10, v11, v12);
    goto LABEL_16;
  }
  if (v9 < 0)
    goto LABEL_19;
  if (v9)
    goto LABEL_15;
LABEL_16:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

void Publishers.Output.receive<A>(subscriber:)()
{
  type metadata accessor for Publishers.Output.Inner();
}

uint64_t sub_18B5631A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v7 = (uint64_t *)(v1 + *(int *)(v2 + 36));
  v8 = *v7;
  v9 = v7[1];
  swift_allocObject();
  v12 = specialized Publishers.Output.Inner.init(downstream:range:)(v3, v8, v9);
  v10 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Output<A>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v12, v4, a1, v5, v10);
  return swift_release();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CombineLatest<A, B>()
{
  Publishers.CombineLatest.receive<A>(subscriber:)();
}

void Publishers.CombineLatest.receive<A>(subscriber:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for CombineLatest2Inner();
}

void sub_18B563308()
{
  uint64_t v0;

  swift_allocObject();
  specialized AbstractCombineLatest.init(downstream:upstreamCount:)(v0, 2);
  swift_retain();
  swift_getTupleTypeMetadata2();
  type metadata accessor for AbstractCombineLatest.Side();
}

void sub_18B56336C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v21 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for AbstractCombineLatest<A, B, C>.Side<A1>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&a14, v19, a1, v18, v21);
  swift_release();
  a14 = 1;
  swift_retain();
  a18 = a9;
  type metadata accessor for AbstractCombineLatest.Side();
}

void sub_18B5633DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v8;
  va_list va;

  va_start(va, a6);
  v8 = MEMORY[0x18D77ACE4](v6, a1);
  Publisher.subscribe<A>(_:)((uint64_t)va, a5, a1, a6, v8);
  swift_release();
  AbstractCombineLatest.subscribe()();
}

uint64_t sub_18B563410()
{
  return swift_release();
}

void type metadata accessor for AbstractCombineLatest.Side()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.RemoveDuplicates<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.RemoveDuplicates.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.RemoveDuplicates.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD *), uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[4];

  v10 = v7;
  v14 = *(_QWORD *)(a2 + 24);
  v21[0] = *(_QWORD *)(a2 + 16);
  v13 = v21[0];
  v21[1] = a3;
  v21[2] = v14;
  v21[3] = a4;
  v15 = a5(0, v21);
  v16 = (uint64_t *)(v10 + *(int *)(a2 + 36));
  v17 = *v16;
  v18 = v16[1];
  swift_allocObject();
  swift_retain();
  v21[0] = specialized Publishers.RemoveDuplicates.Inner.init(downstream:filter:)(a1, v17, v18, a6, a7);
  v19 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for FilterProducer<A, B, C, D, E>, v15);
  Publisher.subscribe<A>(_:)((uint64_t)v21, v13, v15, v14, v19);
  return swift_release();
}

void type metadata accessor for Publishers.RemoveDuplicates.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t *FilterProducer.init(downstream:filter:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 152);
  v7 = (_DWORD *)swift_slowAlloc();
  *v7 = 0;
  *(uint64_t *)((char *)v2 + v6) = (uint64_t)v7;
  v8 = (uint64_t)v2 + *(_QWORD *)(*v2 + 160);
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 80) - 8) + 32))((uint64_t)v2 + *(_QWORD *)(*v2 + 144), a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 112) - 8) + 32))((uint64_t)v2 + *(_QWORD *)(*v2 + 136), a2);
  return v2;
}

uint64_t Publishers.RemoveDuplicates.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.RemoveDuplicates.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for Publishers.RemoveDuplicates.Inner, (uint64_t)&unk_1E2174848, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool));
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Result<A, B>.Publisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Result.Publisher.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Result.Publisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v35 = a1;
  v36 = a4;
  v31 = *(_QWORD *)(a3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v32 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 16);
  v33 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v28 - v10;
  v13 = *(_QWORD *)(v12 + 24);
  v15 = type metadata accessor for Subscribers.Completion(0, v13, *(_QWORD *)(v12 + 32), v14);
  v29 = *(_QWORD *)(v15 - 8);
  v30 = v15;
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v28 - v17;
  v19 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Result();
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v28 - v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))((char *)&v28 - v23, v34, v22);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v11, v24, v8);
    v37 = v8;
    v38 = v13;
    v39 = a3;
    v40 = v36;
    type metadata accessor for Result.Publisher.Inner();
  }
  v26 = v36;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v24, v13);
  if (one-time initialization token for singleton != -1)
    swift_once();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v26 + 40))(&static Subscriptions._EmptySubscription.singleton, a3, v26);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v18, v21, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v18, 0, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 56))(v18, a3, v26);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v13);
}

void type metadata accessor for Result.Publisher.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t *Result.Publisher.Inner.init(downstream:output:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v14 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 96);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v14 - v8;
  v10 = (uint64_t)v2 + *(_QWORD *)(v4 + 112);
  v11 = *(_QWORD *)(v5 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v10, 1, 1, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v9, a1, v5);
  v12((uint64_t)v9, 0, 1, v5);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v10, v9, v6);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 80) - 8) + 32))((uint64_t)v2 + *(_QWORD *)(*v2 + 120), v14);
  return v2;
}

uint64_t storeEnumTagSinglePayload for AbstractCombineLatest.Side(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void AbstractCombineLatest.subscribe()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[16];

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 96);
  v2 = *(_QWORD *)(*v0 + 104);
  v4 = *(_QWORD *)(*v0 + 88);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for Subscribers.Completion(0, v4, AssociatedConformanceWitness, v6);
  v14[7] = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v14[1] = (char *)v14 - v8;
  v9 = type metadata accessor for Optional();
  v10 = MEMORY[0x1E0C80A78](v9);
  v14[6] = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14[4] = (char *)v14 - v13;
  MEMORY[0x1E0C80A78](v12);
  v14[11] = *(_QWORD *)(v1 + 80);
  v14[12] = v4;
  v14[13] = v3;
  v14[14] = v2;
  type metadata accessor for AbstractCombineLatest();
}

uint64_t sub_18B563BF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v24;

  *(_QWORD *)(v9 - 96) = a1;
  *(_QWORD *)(v9 - 88) = &protocol witness table for AbstractCombineLatest<A, B, C>;
  *(_QWORD *)(v9 - 120) = v3;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 40);
  swift_retain();
  *(_QWORD *)(v9 - 208) = v2;
  *(_QWORD *)(v9 - 192) = v6;
  *(_QWORD *)(v9 - 184) = v1;
  v11 = v6;
  v12 = v7;
  v13 = v4;
  v10(v9 - 120, v11, v1);
  __swift_destroy_boxed_opaque_existential_1(v9 - 120);
  v14 = *(os_unfair_lock_s **)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 184));
  os_unfair_lock_lock(v14);
  *(_BYTE *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 200)) = 1;
  v15 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 208);
  swift_beginAccess();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v16(v7, v15, v8);
  v17 = *(_QWORD *)(v9 - 152);
  v18 = *(_QWORD *)(v9 - 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, 1, 1, v13);
  swift_beginAccess();
  *(_QWORD *)(v9 - 168) = v5;
  v19 = v15;
  v20 = *(_QWORD *)(v9 - 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v19, v18, v8);
  swift_endAccess();
  os_unfair_lock_unlock(v14);
  v16(v20, v12, v8);
  v21 = v13;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v20, 1, v13) == 1)
  {
    v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 168) + 8);
    v22(v12, v8);
    return ((uint64_t (*)(uint64_t, uint64_t))v22)(v20, v8);
  }
  else
  {
    v24 = *(_QWORD *)(v9 - 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v24, v20, v21);
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v9 - 184) + 56))(v24, *(_QWORD *)(v9 - 192));
    os_unfair_recursive_lock_unlock();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v24, v21);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 168) + 8))(v12, v8);
  }
}

void type metadata accessor for AbstractCombineLatest()
{
  JUMPOUT(0x18D77AC60);
}

void type metadata accessor for CombineLatest2Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t initializeWithCopy for Publishers.MapKeyPath.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t Publishers.Buffer.Inner.receive(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  os_unfair_lock_s *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v42)(uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  os_unfair_lock_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61[2];
  char v62;
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;

  v2 = v1;
  v58 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v60 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v56 = (char *)&v50 - v4;
  v59 = swift_getAssociatedTypeWitness();
  v57 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v6 = (char *)&v50 - v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for Subscribers.Completion(255, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v50 - v15;
  v17 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v17);
  v18 = (uint64_t)v2 + *(_QWORD *)(*v2 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v18, (uint64_t)v61);
  if (!v62)
  {
    v20 = v60;
    v53 = v14;
    v54 = v6;
    v55 = v17;
    outlined init with take of Subscription(v61, (uint64_t)v63);
    v21 = (char *)v2 + *(_QWORD *)(*v2 + 192);
    swift_beginAccess();
    v22 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v52 = v21;
    v22(v16, v21, v10);
    v23 = *(_QWORD *)(v9 - 8);
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v16, 1, v9);
    v25 = v11;
    v26 = v2;
    v51 = v9;
    if (v24 == 1)
    {
      v27 = v23;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      v28 = v59;
    }
    else
    {
      v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v16, 1, AssociatedTypeWitness);
      v27 = v23;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v9);
      v28 = v59;
      if (v29 != 1)
      {
        os_unfair_lock_unlock(v55);
        goto LABEL_16;
      }
    }
    v30 = AssociatedTypeWitness;
    v59 = v25;
    swift_beginAccess();
    v31 = swift_bridgeObjectRetain();
    v32 = MEMORY[0x18D77A390](v31, v28);
    swift_bridgeObjectRelease();
    v33 = v32 < v26[4];
    v34 = v58;
    v35 = v55;
    v36 = v54;
    v37 = v57;
    if (v33)
    {
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, v34, v28);
      swift_beginAccess();
      type metadata accessor for Array();
      Array.append(_:)();
      swift_endAccess();
      goto LABEL_12;
    }
    v38 = v26[6];
    if (!v38)
    {
LABEL_12:
      os_unfair_lock_unlock(v35);
      Publishers.Buffer.Inner.drain()();
      v19 = v40;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
      return v19;
    }
    if (v38 == 1)
    {
      swift_beginAccess();
      v39 = type metadata accessor for Array();
      MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF58], v39);
      RangeReplaceableCollection.removeFirst()();
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v28);
      goto LABEL_11;
    }
    v50 = (void (*)(uint64_t))v26[6];
    v42 = v50;
    v43 = swift_retain();
    v44 = v56;
    v42(v43);
    v45 = v60;
    v46 = v53;
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v53, v44, v30);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v46, 0, 1, v30);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v46, 0, 1, v51);
    v47 = v52;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v59 + 40))(v47, v46, v10);
    swift_endAccess();
    os_unfair_lock_unlock(v35);
    v49 = v64;
    v48 = v65;
    __swift_project_boxed_opaque_existential_1(v63, v64);
    (*(void (**)(uint64_t))(*(_QWORD *)(v48 + 8) + 8))(v49);
    outlined consume of Publishers.BufferingStrategy<A.Failure><A><A1>((unint64_t)v50);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v30);
LABEL_16:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    return 0;
  }
  outlined destroy of SubscriptionStatus((uint64_t)v61);
  os_unfair_lock_unlock(v17);
  return 0;
}

void Publishers.Buffer.Inner.drain()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t AssociatedTypeWitness;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  os_unfair_lock_s *v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, _QWORD, uint64_t);
  unint64_t v41;
  Swift::Bool IsNativeType;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _BYTE *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  os_unfair_lock_s *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  char v85;

  v1 = (_QWORD *)*v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(char **)(AssociatedTypeWitness - 8);
  v65 = *((_QWORD *)v3 + 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v81 = (char *)&v59 - v4;
  v5 = swift_getAssociatedTypeWitness();
  v63 = *(char **)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v60 = (char *)&v59 - v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v64 = v5;
  v9 = type metadata accessor for Subscribers.Completion(255, v5, AssociatedConformanceWitness, v8);
  v70 = type metadata accessor for Optional();
  v69 = *(_QWORD *)(v70 - 8);
  v10 = MEMORY[0x1E0C80A78](v70);
  v68 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v67 = (char *)&v59 - v13;
  v72 = v9;
  v71 = *(_QWORD *)(v9 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v66 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v59 = (char *)&v59 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v61 = (char *)&v59 - v19;
  MEMORY[0x1E0C80A78](v18);
  v62 = (char *)&v59 - v20;
  v21 = v1[19];
  v22 = (uint64_t)v0 + v1[20];
  v24 = v1[21];
  v23 = v1[22];
  v80 = v1;
  v25 = (_QWORD *)((char *)v0 + v23);
  v78 = v0;
  v26 = (os_unfair_lock_s *)v0[2];
  swift_beginAccess();
  v76 = v25;
  swift_beginAccess();
  os_unfair_lock_lock(v26);
  v75 = v22;
  outlined init with copy of SubscriptionStatus(v22, (uint64_t)&v82);
  if (v85)
  {
LABEL_2:
    outlined destroy of SubscriptionStatus((uint64_t)&v82);
LABEL_3:
    os_unfair_lock_unlock(v26);
    return;
  }
  v27 = 0;
  v79 = &v78[v21];
  v73 = v26;
  v77 = v24;
  while (1)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v82);
    v29 = v78;
    v30 = *(_QWORD *)&v78[v24];
    if (v30 != 0x8000000000000000)
    {
      if (v30 < 0)
      {
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        return;
      }
      if (!v30)
        break;
    }
    v82 = *v76;
    v31 = type metadata accessor for Array();
    MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v31);
    if ((Collection.isEmpty.getter() & 1) != 0)
      goto LABEL_56;
    v32 = Publishers.Buffer.Inner.locked_pop(_:)(*(_QWORD *)&v29[v24]);
    v33 = MEMORY[0x18D77A390](v32, AssociatedTypeWitness);
    v34 = *(_QWORD *)&v29[v24];
    if (v34 != 0x8000000000000000)
    {
      if (v34 < 0)
        goto LABEL_67;
      v35 = __OFSUB__(v34, v33);
      v36 = v34 - v33;
      if (v35)
      {
        v36 = 0;
      }
      else if (v36 < 0)
      {
        goto LABEL_69;
      }
      *(_QWORD *)&v29[v24] = v36;
    }
    v82 = v32;
    if ((Collection.isEmpty.getter() & 1) != 0)
    {
      os_unfair_lock_unlock(v26);
      swift_bridgeObjectRelease();
      return;
    }
    v29[24] = 1;
    os_unfair_lock_unlock(v26);
    if (MEMORY[0x18D77A3A8](v32, AssociatedTypeWitness))
    {
      v74 = v27;
      v37 = 0;
      v38 = 0;
      v39 = v80[13];
      v40 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v39 + 48);
      do
      {
        v41 = v38;
        IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          (*((void (**)(char *, unint64_t, uint64_t))v3 + 2))(v81, v32+ ((v3[80] + 32) & ~(unint64_t)v3[80])+ *((_QWORD *)v3 + 9) * v37, AssociatedTypeWitness);
          v26 = (os_unfair_lock_s *)(v37 + 1);
          if (__OFADD__(v37, 1))
            goto LABEL_61;
        }
        else
        {
          v45 = _ArrayBuffer._getElementSlowPath(_:)();
          if (v65 != 8)
            goto LABEL_73;
          v82 = v45;
          (*((void (**)(char *, uint64_t *, uint64_t))v3 + 2))(v81, &v82, AssociatedTypeWitness);
          swift_unknownObjectRelease();
          v26 = (os_unfair_lock_s *)(v37 + 1);
          if (__OFADD__(v37, 1))
          {
LABEL_61:
            __break(1u);
            goto LABEL_62;
          }
        }
        v43 = v81;
        v44 = v40(v81, v80[11], v39);
        (*((void (**)(char *, uint64_t))v3 + 1))(v43, AssociatedTypeWitness);
        v38 = 0x8000000000000000;
        if (v41 != 0x8000000000000000 && v44 != 0x8000000000000000)
        {
          if (v44 < 0)
          {
            __break(1u);
            goto LABEL_65;
          }
          v38 = v41 + v44;
          if (__OFADD__(v41, v44))
          {
            v38 = 0x8000000000000000;
          }
          else if ((v38 & 0x8000000000000000) != 0)
          {
            __break(1u);
            goto LABEL_66;
          }
        }
        ++v37;
      }
      while (v26 != (os_unfair_lock_s *)MEMORY[0x18D77A3A8](v32, AssociatedTypeWitness));
      swift_bridgeObjectRelease();
      v29 = v78;
      v27 = v74;
      if ((v78[40] & 1) != 0)
        goto LABEL_46;
      if (((unint64_t)v26 & 0x8000000000000000) != 0)
        goto LABEL_68;
    }
    else
    {
      swift_bridgeObjectRelease();
      v26 = 0;
      v38 = 0;
      if ((v29[40] & 1) != 0)
      {
        v38 = 0;
LABEL_46:
        v26 = v73;
        goto LABEL_47;
      }
    }
    if (v27 == 0x8000000000000000)
      goto LABEL_45;
    if ((v27 & 0x8000000000000000) != 0)
      goto LABEL_70;
    v35 = __OFADD__(v27, v26);
    v27 += (unint64_t)v26;
    if (v35)
    {
LABEL_45:
      v27 = 0x8000000000000000;
      goto LABEL_46;
    }
    v26 = v73;
    if ((v27 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_56:
      v47 = &v29[*(_QWORD *)(*(_QWORD *)v29 + 192)];
      swift_beginAccess();
      v48 = v69;
      v3 = v68;
      v49 = v70;
      (*(void (**)(char *, _BYTE *, uint64_t))(v69 + 16))(v68, v47, v70);
      v50 = v71;
      v51 = v72;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v3, 1, v72) != 1)
      {
        v52 = v66;
        (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v66, v3, v51);
        v82 = 1;
        v83 = 0u;
        v84 = 0u;
        v85 = 2;
        v53 = v75;
        swift_beginAccess();
        outlined assign with take of SubscriptionStatus((uint64_t)&v82, v53);
        swift_endAccess();
        os_unfair_lock_unlock(v26);
        (*(void (**)(char *, _QWORD))(v80[13] + 56))(v52, v80[11]);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v51);
        return;
      }
LABEL_60:
      (*(void (**)(char *, uint64_t))(v48 + 8))(v3, v49);
      goto LABEL_3;
    }
LABEL_47:
    os_unfair_lock_lock(v26);
    v29[24] = 0;
    if ((uint64_t)(v38 - 1) >= 0)
    {
      v46 = *(_QWORD *)&v29[v77];
      v28 = 0x8000000000000000;
      if (v46 != 0x8000000000000000)
      {
        if (v38 != 0x8000000000000000)
        {
          if (v46 < 0)
            goto LABEL_71;
          v28 = v46 + v38;
          if (__OFADD__(v46, v38))
          {
            v28 = 0x8000000000000000;
          }
          else if ((v28 & 0x8000000000000000) != 0)
          {
            goto LABEL_72;
          }
        }
        *(_QWORD *)&v29[v77] = v28;
      }
    }
    os_unfair_lock_unlock(v26);
    os_unfair_lock_lock(v26);
    outlined init with copy of SubscriptionStatus(v75, (uint64_t)&v82);
    v24 = v77;
    if (v85)
      goto LABEL_2;
  }
  v54 = &v78[*(_QWORD *)(*(_QWORD *)v78 + 192)];
  swift_beginAccess();
  v48 = v69;
  v3 = v67;
  v49 = v70;
  (*(void (**)(char *, _BYTE *, uint64_t))(v69 + 16))(v67, v54, v70);
  v41 = v71;
  v39 = v72;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v3, 1, v72) == 1)
    goto LABEL_60;
LABEL_62:
  AssociatedTypeWitness = (uint64_t)v62;
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v62, v3, v39);
  v44 = (uint64_t)v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v61, AssociatedTypeWitness, v39);
  v3 = v63;
  v32 = v64;
  if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v63 + 6))(v44, 1, v64) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(AssociatedTypeWitness, v39);
    goto LABEL_3;
  }
LABEL_65:
  v55 = v60;
  (*((void (**)(char *, uint64_t, uint64_t))v3 + 4))(v60, v44, v32);
  v82 = 1;
  v83 = 0u;
  v84 = 0u;
  v85 = 2;
  v56 = v75;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v82, v56);
  swift_endAccess();
  os_unfair_lock_unlock(v26);
  v57 = v59;
  (*((void (**)(char *, char *, uint64_t))v3 + 2))(v59, v55, v32);
  (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v3 + 7))(v57, 0, 1, v32);
  (*(void (**)(char *, _QWORD))(v80[13] + 56))(v57, v80[11]);
  v58 = *(void (**)(char *, uint64_t))(v41 + 8);
  v58(v57, v39);
  (*((void (**)(char *, uint64_t))v3 + 1))(v55, v32);
  v58((char *)AssociatedTypeWitness, v39);
}

uint64_t getEnumTagSinglePayload for Subscribers.Completion(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

uint64_t Publishers.Buffer.Inner.locked_pop(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;

  if (result == 0x8000000000000000)
  {
    v2 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 176));
    swift_beginAccess();
    v3 = *v2;
    swift_getAssociatedTypeWitness();
    swift_bridgeObjectRetain();
    *v2 = Array.init()();
    swift_bridgeObjectRelease();
    return v3;
  }
  if (result < 0)
  {
    __break(1u);
  }
  else if (result)
  {
    swift_beginAccess();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = type metadata accessor for Array();
    swift_bridgeObjectRetain();
    MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v5);
    Collection.prefix(_:)();
    v6 = type metadata accessor for ArraySlice();
    MEMORY[0x18D77ACE4](MEMORY[0x1E0DEBF78], v6);
    v3 = Array.init<A>(_:)();
    v7 = MEMORY[0x18D77A390](v3, AssociatedTypeWitness);
    swift_beginAccess();
    MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF58], v5);
    RangeReplaceableCollection.removeFirst(_:)(v7);
    swift_endAccess();
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Output<A>.Inner<A1>(_QWORD *a1)
{
  return Publishers.Output.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.Output.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void (*v11)(uint64_t **, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  int8x16_t v14;
  int8x16_t v15;
  char v16;

  v3 = *v1;
  v4 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 144));
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 120);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (v6 = vorrq_s8(v14, v15),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.Output<A>.Inner<A1>;
    v13 = v1;
    v10 = *(_QWORD *)(v3 + 104);
    v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    v12 = *(_QWORD *)(v3 + 88);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    v7 = a1[3];
    v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
  }
}

void type metadata accessor for Publishers.Output.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t specialized Publishers.Output.Inner.init(downstream:range:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t result;

  v7 = *v3;
  v8 = (uint64_t)v3 + *(_QWORD *)(*v3 + 120);
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_QWORD *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 40) = 2;
  v9 = *(_QWORD *)(*v3 + 144);
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(uint64_t *)((char *)v3 + v9) = (uint64_t)v10;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 88) - 8) + 16))((uint64_t)v3 + *(_QWORD *)(*v3 + 112), a1);
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 128)) = a2;
  if (__OFSUB__(a3, a2))
  {
    __break(1u);
  }
  else
  {
    *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 136)) = a3 - a2;
    return (uint64_t)v3;
  }
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Drop<A>(uint64_t a1)
{
  Publishers.Drop.receive<A>(subscriber:)(a1);
}

void Publishers.Drop.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.Drop.Inner();
}

uint64_t sub_18B56531C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t *v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v7, v6);
  v12 = *(_QWORD *)(v1 + *(int *)(v2 + 36));
  swift_allocObject();
  v13 = Publishers.Drop.Inner.init(downstream:count:)(v8, v12);
  *(_QWORD *)(v10 - 96) = a1;
  *(_QWORD *)(v10 - 88) = &protocol witness table for Publishers.Drop<A>.Inner<A1>;
  *(_QWORD *)(v10 - 120) = v13;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  swift_retain();
  v14(v10 - 120, v6, v5);
  __swift_destroy_boxed_opaque_existential_1(v10 - 120);
  *(_QWORD *)(v10 - 120) = v13;
  v15 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Drop<A>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v10 - 120, v4, a1, v3, v15);
  return swift_release();
}

void type metadata accessor for Publishers.Drop.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t *Publishers.Drop.Inner.init(downstream:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 120);
  v7 = (_DWORD *)swift_slowAlloc();
  *(uint64_t *)((char *)v2 + v6) = (uint64_t)v7;
  *v7 = 0;
  v8 = (uint64_t)v2 + *(_QWORD *)(*v2 + 128);
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 136)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 88) - 8) + 32))((uint64_t)v2 + *(_QWORD *)(*v2 + 112), a1);
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 144)) = a2;
  return v2;
}

void Publishers.MapKeyPath.Inner.init(downstream:keyPath:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.MapKeyPath.Inner();
}

void sub_18B565518(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;

  *(_QWORD *)(v1 + *(int *)(a1 + 60)) = v2;
  v3 = *(int *)(a1 + 64);
  if (one-time initialization token for lock != -1)
    swift_once();
  v4 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v5 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v4);
    *(_QWORD *)(v1 + v3) = v5;
  }
}

void type metadata accessor for Publishers.MapKeyPath.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MapKeyPath<A, B>(uint64_t a1)
{
  Publishers.MapKeyPath.receive<A>(subscriber:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Output<A>.Inner<A1>(uint64_t a1)
{
  Publishers.Output.Inner.receive(completion:)(a1);
}

void Publishers.Output.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  unsigned __int8 v10;

  v3 = *v1;
  v4 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 144));
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 120);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v7);
  v6 = v10;
  outlined destroy of SubscriptionStatus((uint64_t)&v7);
  if (v6)
  {
    os_unfair_lock_unlock(v4);
  }
  else
  {
    v7 = 1;
    v8 = 0u;
    v9 = 0u;
    v10 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v7, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 104) + 56))(a1, *(_QWORD *)(v3 + 88));
  }
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.SwitchToLatest<A, B>(uint64_t a1)
{
  Publishers.SwitchToLatest.receive<A>(subscriber:)(a1);
}

void Publishers.SwitchToLatest.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.SwitchToLatest.Outer();
}

uint64_t sub_18B565764(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v1, v6, v5);
  swift_allocObject();
  v10 = Publishers.SwitchToLatest.Outer.init(downstream:)(v1);
  *(_QWORD *)(v8 - 104) = a1;
  *(_QWORD *)(v8 - 96) = &protocol witness table for Publishers.SwitchToLatest<A, B>.Outer<A1>;
  *(_QWORD *)(v8 - 128) = v10;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);
  swift_retain();
  v11(v8 - 128, v5, v4);
  __swift_destroy_boxed_opaque_existential_1(v8 - 128);
  *(_QWORD *)(v8 - 128) = v10;
  v12 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>.Outer<A1>, a1);
  Publisher.subscribe<A>(_:)(v8 - 128, v2, a1, v3, v12);
  return swift_release();
}

void type metadata accessor for Publishers.SwitchToLatest.Outer()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t *Publishers.SwitchToLatest.Outer.init(downstream:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 136);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(v5 + 32) = 0;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 152)) = 0;
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 160)) = 1;
  v6 = *(_QWORD *)(*v1 + 168);
  v7 = (_DWORD *)swift_slowAlloc();
  *v7 = 0;
  *(uint64_t *)((char *)v1 + v6) = (uint64_t)v7;
  v8 = *(_QWORD *)(*v1 + 176);
  v9 = (_QWORD *)swift_slowAlloc();
  *v9 = 0;
  *(uint64_t *)((char *)v1 + v8) = (uint64_t)v9;
  *((_BYTE *)v1 + *(_QWORD *)(*v1 + 184)) = 0;
  *((_BYTE *)v1 + *(_QWORD *)(*v1 + 192)) = 0;
  *((_BYTE *)v1 + *(_QWORD *)(*v1 + 200)) = 0;
  *((_BYTE *)v1 + *(_QWORD *)(*v1 + 208)) = 0;
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 216)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 96) - 8) + 32))((uint64_t)v1 + *(_QWORD *)(*v1 + 128), a1);
  return v1;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Debounce<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  Publishers.Debounce.receive<A>(subscriber:)(a1, a4, a2, a3);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge3<A, B, C>()
{
  Publishers.Merge3.receive<A>(subscriber:)();
}

uint64_t type metadata accessor for Subscribers.Assign(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Subscribers.Assign);
}

_QWORD *Subscribers.Assign.init(object:keyPath:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  char *v14;
  uint64_t v16;

  v5 = *(_QWORD *)(*v2 + 80);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v16 - v8;
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  v2[2] = v10;
  v11 = (char *)v2 + *(_QWORD *)(*v2 + 104);
  v12 = *(_QWORD *)(v5 - 8);
  v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v13(v11, 1, 1, v5);
  v14 = (char *)v2 + *(_QWORD *)(*v2 + 120);
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((_QWORD *)v14 + 4) = 0;
  v14[40] = 2;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, a1, v5);
  v13(v9, 0, 1, v5);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v11, v9, v6);
  swift_endAccess();
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 112)) = a2;
  return v2;
}

uint64_t type metadata completion function for Publishers.ReceiveOn.Inner()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v0 = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      v0 = type metadata accessor for Optional();
      if (v3 <= 0x3F)
        return swift_initClassMetadata2();
    }
  }
  return v0;
}

_DWORD *one-time initialization function for lock()
{
  _DWORD *result;

  result = (_DWORD *)swift_slowAlloc();
  *result = 0;
  static lock in Global #1 in CombineIdentifier.init() = (uint64_t)result;
  return result;
}

{
  _DWORD *result;

  result = (_DWORD *)swift_slowAlloc();
  *result = 0;
  static ObservableObjectTable.lock = (uint64_t)result;
  return result;
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance AbstractCombineLatest<A1, B1, C1>(_QWORD *a1@<X8>)
{
  CustomCombineIdentifierConvertible<>.combineIdentifier.getter(a1);
}

void CustomCombineIdentifierConvertible<>.combineIdentifier.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
}

_QWORD *destroy for Publishers.BufferingStrategy(_QWORD *result)
{
  if (*result >= 0xFFFFFFFFuLL)
    return (_QWORD *)swift_release();
  return result;
}

void one-time initialization function for contents()
{
  static ObservableObjectTable.contents = (_UNKNOWN *)MEMORY[0x1E0DEE9E0];
}

uint64_t type metadata completion function for Future()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Result();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t partial apply for closure #2 in AsyncThrowingPublisher.Iterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = withTaskCancellationHandler<A>(handler:operation:);
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch();
}

void Publishers.Merge6.receive<A>(subscriber:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Publishers._Merged();
}

void sub_18B565DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,_UNKNOWN **a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  void (*v27)(uint64_t **, uint64_t, uint64_t);

  swift_allocObject();
  v26 = specialized Publishers._Merged.init(downstream:count:)(v22, 6);
  a21 = a1;
  a22 = &protocol witness table for Publishers._Merged<A, B, C>;
  a18 = v26;
  v27 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v23 + 40);
  swift_retain();
  v27(&a18, v24, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a18);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, (uint64_t)v26, &a15);
  a20 = v24;
  a21 = v23;
  type metadata accessor for Publishers._Merged.Side();
}

uint64_t sub_18B565E68(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers._Merged<A, B, C>.Side, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v3, a1, v7, v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[3], a1, v1[9], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[4], a1, v1[10], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[5], a1, v1[11], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(4, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[6], a1, v1[12], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(5, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[7], a1, v1[13], v5);
  swift_release();
  return swift_release();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge7<A, B, C, D, E, F, G>()
{
  Publishers.Merge7.receive<A>(subscriber:)();
}

void Publishers.Merge7.receive<A>(subscriber:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Publishers._Merged();
}

void sub_18B566108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,_UNKNOWN **a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  void (*v27)(uint64_t **, uint64_t, uint64_t);

  swift_allocObject();
  v26 = specialized Publishers._Merged.init(downstream:count:)(v22, 7);
  a21 = a1;
  a22 = &protocol witness table for Publishers._Merged<A, B, C>;
  a18 = v26;
  v27 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v23 + 40);
  swift_retain();
  v27(&a18, v24, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a18);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, (uint64_t)v26, &a15);
  a20 = v24;
  a21 = v23;
  type metadata accessor for Publishers._Merged.Side();
}

uint64_t sub_18B56619C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers._Merged<A, B, C>.Side, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v3, a1, v7, v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[3], a1, v1[10], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[4], a1, v1[11], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[5], a1, v1[12], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(4, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[6], a1, v1[13], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(5, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[7], a1, v1[14], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(6, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[8], a1, v1[15], v5);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.Drop<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.Drop.Inner.receive(completion:)(a1);
}

uint64_t Publishers.Drop.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  _OWORD v7[2];
  uint64_t v8;

  v3 = *v1;
  v4 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 120));
  os_unfair_lock_lock(v4);
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 128);
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v7, v5);
  swift_endAccess();
  os_unfair_lock_unlock(v4);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 104) + 56))(a1, *(_QWORD *)(v3 + 88));
}

void Publishers._Merged.Side.receive(completion:)(_QWORD *a1)
{
  unint64_t *v1;

  Publishers._Merged.receive(completion:_:)(a1, *v1);
}

void Publishers._Merged.receive(completion:_:)(_QWORD *a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  _QWORD **v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;

  v3 = v2;
  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 104);
  v8 = *(_QWORD *)(*v3 + 88);
  v33 = *(_QWORD *)(*v3 + 96);
  v34 = v7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = (_QWORD **)type metadata accessor for Subscribers.Completion(0, v8, AssociatedConformanceWitness, v10);
  v12 = (uint64_t)*(v11 - 1);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v33 - v13;
  (*(void (**)(char *, _QWORD *, _QWORD **))(v12 + 16))((char *)&v33 - v13, a1, v11);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v14, 1, v8);
  v16 = *(os_unfair_lock_s **)((char *)v3 + *(_QWORD *)(*v3 + 176));
  os_unfair_lock_lock(v16);
  v17 = *v3;
  if (v15 == 1)
  {
    v18 = *(_QWORD *)(v17 + 144);
    v19 = *(uint64_t *)((char *)v3 + v18);
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
    {
      __break(1u);
    }
    else
    {
      *(uint64_t *)((char *)v3 + v18) = v21;
      v37 = 0;
      memset(v36, 0, sizeof(v36));
      v11 = (_QWORD **)((char *)v3 + *(_QWORD *)(*v3 + 160));
      swift_beginAccess();
      a1 = *v11;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v11 = a1;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((a2 & 0x8000000000000000) == 0)
          goto LABEL_5;
        goto LABEL_16;
      }
    }
    a1 = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
    *v11 = a1;
    if ((a2 & 0x8000000000000000) == 0)
    {
LABEL_5:
      if (a1[2] > a2)
      {
        outlined assign with take of Subscription?((uint64_t)v36, (uint64_t)&a1[5 * a2 + 4]);
        swift_endAccess();
        if (*(uint64_t *)((char *)v3 + v18) != *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 136)))
          goto LABEL_12;
        v23 = (uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 168));
        v24 = swift_beginAccess();
        v35 = *v23;
        MEMORY[0x1E0C80A78](v24);
        v25 = *(_QWORD *)(v6 + 80);
        *(&v33 - 4) = v25;
        *(&v33 - 3) = v8;
        v26 = v34;
        *(&v33 - 2) = v33;
        *(&v33 - 1) = v26;
        type metadata accessor for Optional();
        v27 = type metadata accessor for Array();
        swift_bridgeObjectRetain();
        MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF38], v27);
        LOBYTE(v23) = Sequence.allSatisfy(_:)();
        swift_bridgeObjectRelease();
        if ((v23 & 1) != 0)
        {
          *((_BYTE *)v3 + *(_QWORD *)(*v3 + 152)) = 1;
          os_unfair_lock_unlock(v16);
          v28 = Publishers._Merged.guardedBecomeTerminal()();
          MEMORY[0x1E0C80A78](v28);
          *(&v33 - 4) = v25;
          *(&v33 - 3) = v8;
          v29 = v34;
          *(&v33 - 2) = v33;
          *(&v33 - 1) = v29;
          Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #3 in Publishers._Merged.receive(completion:_:));
        }
        else
        {
LABEL_12:
          os_unfair_lock_unlock(v16);
        }
        return;
      }
LABEL_17:
      __break(1u);
      return;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v30 = *((_BYTE *)v3 + *(_QWORD *)(v17 + 128));
  os_unfair_lock_unlock(v16);
  if ((v30 & 1) == 0)
  {
    v31 = Publishers._Merged.guardedBecomeTerminal()();
    MEMORY[0x1E0C80A78](v31);
    *(&v33 - 6) = *(_QWORD *)(v6 + 80);
    *(&v33 - 5) = v8;
    v32 = v34;
    *(&v33 - 4) = v33;
    *(&v33 - 3) = v32;
    *(&v33 - 2) = (uint64_t)a1;
    Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #1 in Publishers._Merged.receive(completion:_:));
  }
  (*(void (**)(char *, _QWORD **))(v12 + 8))(v14, v11);
}

void Publishers._Merged.Side.receive(_:)(Swift::Int a1)
{
  Swift::Int *v1;

  Publishers._Merged.receive(_:_:)(a1, *v1);
}

void Publishers._Merged.receive(_:_:)(Swift::Int a1, Swift::Int a2)
{
  uint64_t *v2;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  Swift::Int v24[4];

  v24[0] = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 80);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v24 - v8;
  v10 = *(os_unfair_lock_s **)((char *)v2 + *(_QWORD *)(v4 + 176));
  os_unfair_lock_lock(v10);
  v11 = *(_QWORD *)(*v2 + 120);
  v12 = *(uint64_t *)((char *)v2 + v11);
  if (v12 == 0x8000000000000000)
  {
    os_unfair_lock_unlock(v10);
    MEMORY[0x1E0C80A78](v13);
    v24[-6] = v5;
    *(_OWORD *)&v24[-5] = *(_OWORD *)(v4 + 88);
    v24[-3] = *(_QWORD *)(v4 + 104);
    v24[-2] = a1;
    Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #4 in Publishers._Merged.request(_:));
    return;
  }
  if (v12 < 0)
    goto LABEL_20;
  if (v12)
  {
    os_unfair_lock_unlock(v10);
    MEMORY[0x1E0C80A78](v14);
    v24[-6] = v5;
    *(_OWORD *)&v24[-5] = *(_OWORD *)(v4 + 88);
    v24[-3] = *(_QWORD *)(v4 + 104);
    v24[-2] = a1;
    Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #4 in Publishers._Merged.request(_:));
    v15 = v24[1];
    os_unfair_lock_lock(v10);
    if (v15 == 0x8000000000000000)
      goto LABEL_9;
    if (v15 < 0)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v16 = v12 - 1 + v15;
    if (__OFADD__(v12 - 1, v15))
    {
LABEL_9:
      v17 = (uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 200));
    }
    else
    {
      if (v16 < 0)
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      v17 = (uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 200));
      v23 = *v17;
      v18 = 0x8000000000000000;
      if (*v17 == 0x8000000000000000)
        goto LABEL_11;
      if (v23 < 0)
      {
LABEL_23:
        __break(1u);
        return;
      }
      v18 = v16 + v23;
      if (!__OFADD__(v16, v23))
      {
        if ((v18 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
LABEL_11:
        *(uint64_t *)((char *)v2 + v11) = v18;
        *v17 = 0;
        os_unfair_lock_unlock(v10);
        return;
      }
    }
    v18 = 0x8000000000000000;
    goto LABEL_11;
  }
  v19 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, Swift::Int, Swift::Int))(v19 + 16))(v9, a1, v5);
  (*(void (**)(char *, _QWORD, uint64_t, Swift::Int))(v19 + 56))(v9, 0, 1, v5);
  v20 = (uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 168));
  swift_beginAccess();
  type metadata accessor for Array();
  Array._makeMutableAndUnique()();
  v21 = *v20;
  v22 = v24[0];
  Array._checkSubscript_mutating(_:)(v24[0]);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 40))(v21+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v22, v9, v6);
  swift_endAccess();
  os_unfair_lock_unlock(v10);
}

void Publishers._Merged.guardedApplyDownstream<A>(_:)(void (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v4;
  uint64_t v5;

  v2 = v1;
  v4 = *(os_unfair_lock_s **)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 176));
  os_unfair_lock_lock(v4);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_BYTE *)(v1 + v5) = 1;
  os_unfair_lock_unlock(v4);
  os_unfair_recursive_lock_lock_with_options();
  a1(v2 + *(_QWORD *)(*(_QWORD *)v2 + 112));
  os_unfair_recursive_lock_unlock();
  os_unfair_lock_lock(v4);
  *(_BYTE *)(v1 + v5) = 0;
  os_unfair_lock_unlock(v4);
}

uint64_t partial apply for closure #4 in Publishers._Merged.request(_:)@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(v1[5] + 48))(v1[6], v1[4]);
  *a1 = result;
  return result;
}

uint64_t Publishers._Merged.guardedBecomeTerminal()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  os_unfair_lock_s *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v20 - v5;
  v7 = *(os_unfair_lock_s **)((char *)v0 + *(_QWORD *)(v1 + 176));
  os_unfair_lock_lock(v7);
  *((_BYTE *)v0 + *(_QWORD *)(*v0 + 128)) = 1;
  v8 = (uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 160));
  swift_beginAccess();
  v9 = *v8;
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  v10 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRetain();
  *v8 = specialized Array.init(repeating:count:)((uint64_t)v23, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v6, 1, 1, v2);
  v11 = (uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 168));
  swift_beginAccess();
  v12 = swift_bridgeObjectRetain();
  v13 = MEMORY[0x18D77A390](v12, v3);
  swift_bridgeObjectRelease();
  v14 = specialized Array.init(repeating:count:)((uint64_t)v6, v13, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *v11 = v14;
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);
  v15 = *(_QWORD *)(v9 + 16);
  if (!v15)
    return swift_bridgeObjectRelease();
  v16 = v9 + 32;
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of Any?(v16, (uint64_t)v23, &demangling cache variable for type metadata for Subscription?);
    outlined init with copy of Any?((uint64_t)v23, (uint64_t)v20, &demangling cache variable for type metadata for Subscription?);
    v17 = v21;
    if (v21)
    {
      v18 = v22;
      __swift_project_boxed_opaque_existential_1(v20, v21);
      (*(void (**)(uint64_t))(*(_QWORD *)(v18 + 8) + 8))(v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    }
    else
    {
      outlined destroy of CustomStringConvertible?((uint64_t)v20, &demangling cache variable for type metadata for Subscription?);
    }
    outlined destroy of CustomStringConvertible?((uint64_t)v23, &demangling cache variable for type metadata for Subscription?);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t partial apply for closure #3 in Publishers._Merged.receive(completion:_:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #3 in Publishers._Merged.receive(completion:_:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t closure #3 in Publishers._Merged.receive(completion:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = type metadata accessor for Subscribers.Completion(0, a3, AssociatedConformanceWitness, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))((char *)&v15 - v12, 1, 1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(a5 + 56))(v13, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t Empty.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t result;
  uint64_t v14;

  v7 = *(_QWORD *)(a2 + 24);
  v8 = type metadata accessor for Subscribers.Completion(0, v7, *(_QWORD *)(a2 + 32), a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - v10;
  v12 = *v4;
  if (one-time initialization token for singleton != -1)
    swift_once();
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40))(&static Subscriptions._EmptySubscription.singleton, a3, a4);
  if (v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v11, 1, 1, v7);
    (*(void (**)(char *, uint64_t, uint64_t))(a4 + 56))(v11, a3, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return result;
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Subscribers.Sink<A, B>(uint64_t a1)
{
  return Subscribers.Sink.receive(completion:)(a1);
}

uint64_t Subscribers.Sink.receive(completion:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  void (*v4)(uint64_t);
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t FunctionTypeMetadata1;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v3 = *(_QWORD **)v1;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 96));
  v17 = 1;
  v18 = 0u;
  v19 = 0u;
  v20 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v17, v1 + 48);
  swift_endAccess();
  swift_beginAccess();
  v4 = *(void (**)(uint64_t))(v1 + 32);
  v5 = (_QWORD *)swift_allocObject();
  v6 = v3[10];
  v5[2] = v6;
  v7 = v3[11];
  v5[3] = v7;
  v8 = v3[12];
  v5[4] = v8;
  *(_QWORD *)(v1 + 32) = specialized closure #1 in Publisher.multicast<A>(subject:);
  *(_QWORD *)(v1 + 40) = v5;
  swift_beginAccess();
  v10 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v6;
  v11[3] = v7;
  v11[4] = v8;
  v11[5] = v10;
  v11[6] = v9;
  v16[0] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
  v16[1] = v11;
  v12 = MEMORY[0x1E0DEE9C0] + 8;
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  swift_retain();
  _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #2 in Subscribers.Sink.receive(completion:), v1, FunctionTypeMetadata1, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v14);
  swift_release();
  v4(a1);
  return swift_release();
}

void Publishers.Merge3.receive<A>(subscriber:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Publishers._Merged();
}

void sub_18B5672A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,_UNKNOWN **a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  void (*v27)(uint64_t **, uint64_t, uint64_t);

  swift_allocObject();
  v26 = specialized Publishers._Merged.init(downstream:count:)(v22, 3);
  a21 = a1;
  a22 = &protocol witness table for Publishers._Merged<A, B, C>;
  a18 = v26;
  v27 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v23 + 40);
  swift_retain();
  v27(&a18, v24, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a18);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, (uint64_t)v26, &a15);
  a20 = v24;
  a21 = v23;
  type metadata accessor for Publishers._Merged.Side();
}

uint64_t sub_18B56733C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers._Merged<A, B, C>.Side, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v3, a1, v7, v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[3], a1, v1[6], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[4], a1, v1[7], v5);
  swift_release();
  return swift_release();
}

void Publishers.Merge.receive<A>(subscriber:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Publishers._Merged();
}

void sub_18B5674D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,_UNKNOWN **a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  void (*v27)(uint64_t **, uint64_t, uint64_t);

  swift_allocObject();
  v26 = specialized Publishers._Merged.init(downstream:count:)(v22, 2);
  a21 = a1;
  a22 = &protocol witness table for Publishers._Merged<A, B, C>;
  a18 = v26;
  v27 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v23 + 40);
  swift_retain();
  v27(&a18, v24, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a18);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, (uint64_t)v26, &a15);
  a20 = v24;
  a21 = v23;
  type metadata accessor for Publishers._Merged.Side();
}

uint64_t sub_18B56756C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD v10[17];

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers._Merged<A, B, C>.Side, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v2, a1, v7, v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, v3, v10);
  v9[0] = v10[0];
  v9[1] = v10[1];
  v9[2] = v10[2];
  Publisher.subscribe<A>(_:)((uint64_t)v9, *(_QWORD *)(v1 + 24), a1, *(_QWORD *)(v1 + 40), v5);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance PassthroughSubject<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  return PassthroughSubject.receive<A>(subscriber:)((uint64_t)v6, a2, a3, v8);
}

uint64_t PassthroughSubject.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = v4;
  v29 = a3;
  v30 = a1;
  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 88);
  v26 = *(_QWORD *)(*v4 + 96);
  v27 = v8;
  v9 = type metadata accessor for Subscribers.Completion(255, v8, v26, a4);
  v25 = type metadata accessor for Optional();
  v28 = *(_QWORD *)(v25 - 8);
  v10 = MEMORY[0x1E0C80A78](v25);
  v12 = (char *)&v24 - v11;
  v13 = *(_QWORD *)(v9 - 8);
  v14 = MEMORY[0x1E0C80A78](v10);
  v16 = (char *)&v24 - v15;
  v17 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v14);
  v18 = (os_unfair_lock_s *)v5[2];
  os_unfair_lock_lock(v18);
  if (*((_BYTE *)v5 + 24) == 1)
  {
    v28 = *(_QWORD *)(v7 + 80);
    v31 = v28;
    v32 = v27;
    v33 = a2;
    v34 = v29;
    type metadata accessor for PassthroughSubject.Conduit();
  }
  v19 = v30;
  v20 = (uint64_t)v5 + *(_QWORD *)(*v5 + 120);
  swift_beginAccess();
  v21 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v12, v20, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v9) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v12, v21);
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, v9);
    os_unfair_lock_unlock(v18);
    v22 = v29;
    if (one-time initialization token for singleton != -1)
      swift_once();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 40))(&static Subscriptions._EmptySubscription.singleton, a2, v22);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 56))(v16, a2, v22);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v9);
  }
  return result;
}

void type metadata accessor for PassthroughSubject.Conduit()
{
  JUMPOUT(0x18D77AC60);
}

void storeEnumTagSinglePayload for Publishers.Filter.Inner(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B567ABC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B567B34);
}

void sub_18B567AC4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B567ACCLL);
  JUMPOUT(0x18B567B34);
}

void sub_18B567B0C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B567B34);
}

void sub_18B567B14()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B567B34);
}

uint64_t sub_18B567B1C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B567B34);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B567B30);
    JUMPOUT(0x18B567B28);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void Publishers.Filter.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.Filter.Inner();
}

void sub_18B567BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&a9 - v13;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 16))(v11, *(_QWORD *)(v12 - 128), v9);
  swift_retain();
  Publishers.Filter.Inner.init(downstream:filter:)(v11, v9, (uint64_t)v14);
}

uint64_t sub_18B567C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Filter<A>.Inner<A1>, v3);
  Publisher.subscribe<A>(_:)(v4, v2, v3, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v3);
}

uint64_t destroy for Publishers.Filter.Inner(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
  return swift_release();
}

uint64_t Publishers.SubscribeOn.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v5 = v4;
  v43 = a3;
  v7 = *(_QWORD *)(a3 - 8);
  v47 = a4;
  v48 = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v45 = a1;
  v46 = v8;
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v11;
  v13 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v9);
  v39 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)(v15 + 40);
  v16 = *(_QWORD *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v18 = *(_QWORD *)(v17 - 8);
  v40 = v17;
  v41 = v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v37 - v20;
  v44 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v23, v5 + *(int *)(a2 + 52), v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v5 + *(int *)(a2 + 56), v17);
  v25 = v14;
  v37 = v14;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v27 = v39;
  v26(v39, v5, a2);
  v28 = v48;
  v29 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v11, v45, v43);
  v30 = (*(unsigned __int8 *)(v25 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  v31 = (v13 + *(unsigned __int8 *)(v28 + 80) + v30) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  v32 = (char *)swift_allocObject();
  *((_QWORD *)v32 + 2) = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v32 + 3) = v16;
  v33 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)v32 + 4) = v29;
  *((_QWORD *)v32 + 5) = v33;
  v34 = v42;
  v35 = v47;
  *((_QWORD *)v32 + 6) = v42;
  *((_QWORD *)v32 + 7) = v35;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v32[v30], v27, a2);
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(&v32[v31], v38, v29);
  (*(void (**)(char *, void (*)(), char *, uint64_t, uint64_t))(v34 + 56))(v21, partial apply for closure #1 in Publishers.SubscribeOn.receive<A>(subscriber:), v32, v16, v34);
  swift_release();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v21, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v23, v16);
}

void Publishers.Filter.Inner.init(downstream:filter:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.Filter.Inner();
}

void sub_18B567FC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;

  v4 = (_QWORD *)(v1 + *(int *)(a1 + 52));
  *v4 = v3;
  v4[1] = v2;
  v5 = *(int *)(a1 + 56);
  if (one-time initialization token for lock != -1)
    swift_once();
  v6 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v7 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v6);
    *(_QWORD *)(v1 + v5) = v7;
  }
}

void type metadata accessor for Publishers.Filter.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.MergeMany.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1E0C80A78](a1);
  swift_getTupleTypeMetadata2();
  v1 = type metadata accessor for Optional();
  v2 = MEMORY[0x1E0C80A78](v1);
  MEMORY[0x1E0C80A78](v2);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Publishers._Merged();
}

uint64_t sub_18B5681A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = MEMORY[0x18D77A390](v2, v3);
  swift_allocObject();
  v11 = specialized Publishers._Merged.init(downstream:count:)(*(_QWORD *)(v8 - 240), v10);
  *(_QWORD *)(v8 - 104) = a1;
  *(_QWORD *)(v8 - 96) = &protocol witness table for Publishers._Merged<A, B, C>;
  *(_QWORD *)(v8 - 128) = v11;
  v12 = *(_QWORD *)(v8 - 184);
  *(_QWORD *)(v8 - 256) = *(_QWORD *)(v12 + 40);
  swift_retain();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 - 256))(v8 - 128, *(_QWORD *)(v8 - 192), v12);
  __swift_destroy_boxed_opaque_existential_1(v8 - 128);
  *(_QWORD *)(v8 - 152) = *(_QWORD *)(v8 - 248);
  v13 = type metadata accessor for Array();
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF38], v13);
  Sequence.enumerated()();
  *(_QWORD *)(v8 - 176) = *(_QWORD *)(v8 - 128);
  type metadata accessor for EnumeratedSequence();
  EnumeratedSequence.makeIterator()();
  type metadata accessor for EnumeratedSequence.Iterator();
  EnumeratedSequence.Iterator.next()();
  (*(void (**)(uint64_t *, uint64_t, _QWORD))(*(_QWORD *)(v8 - 208) + 32))(v7, v6, *(_QWORD *)(v8 - 200));
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v7, 1, v5) != 1)
  {
    v14 = *v7;
    (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v4, (char *)v7 + *(int *)(v5 + 48), v3);
    swift_retain();
    Publishers._Merged.Side.init(index:merger:)(v14, (uint64_t)v11, (_QWORD *)(v8 - 128));
    v15 = *(_QWORD *)(v8 - 120);
    v16 = *(_QWORD *)(v8 - 112);
    *(_QWORD *)(v8 - 176) = *(_QWORD *)(v8 - 128);
    *(_QWORD *)(v8 - 168) = v15;
    *(_QWORD *)(v8 - 160) = v16;
    v17 = *(_QWORD *)(v8 - 232);
    *(_QWORD *)(v8 - 128) = *(_QWORD *)(v8 - 224);
    *(_QWORD *)(v8 - 120) = v17;
    v18 = *(_QWORD *)(v8 - 184);
    *(_QWORD *)(v8 - 112) = *(_QWORD *)(v8 - 192);
    *(_QWORD *)(v8 - 104) = v18;
    type metadata accessor for Publishers._Merged.Side();
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

void type metadata accessor for Publishers._Merged.Side()
{
  JUMPOUT(0x18D77AC60);
}

void type metadata accessor for Publishers._Merged()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t *specialized Publishers._Merged.init(downstream:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _OWORD v17[2];
  uint64_t v18;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v17 - v9;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(v5 + 120)) = 0;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 128)) = 0;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 144)) = 0;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 152)) = 0;
  v11 = *(_QWORD *)(*v2 + 176);
  v12 = (_DWORD *)swift_slowAlloc();
  *v12 = 0;
  *(uint64_t *)((char *)v2 + v11) = (uint64_t)v12;
  v13 = *(_QWORD *)(*v2 + 184);
  v14 = (_QWORD *)swift_slowAlloc();
  *v14 = 0;
  *(uint64_t *)((char *)v2 + v13) = (uint64_t)v14;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 192)) = 0;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 200)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 96) - 8) + 16))((uint64_t)v2 + *(_QWORD *)(*v2 + 112), a1);
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 136)) = a2;
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 160)) = specialized Array.init(repeating:count:)((uint64_t)v17, a2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v10, 1, 1, v6);
  v15 = specialized Array.init(repeating:count:)((uint64_t)v10, a2, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 168)) = v15;
  return v2;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = static Array._allocateUninitialized(_:)();
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    if (a2)
    {
      v9 = v7;
      v10 = *(_QWORD *)(a3 - 8);
      v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v11(v7, a1, a3);
      v12 = a2 - 1;
      if (v12)
      {
        v13 = *(_QWORD *)(v10 + 72);
        v14 = v9 + v13;
        do
        {
          v11(v14, a1, a3);
          v14 += v13;
          --v12;
        }
        while (v12);
      }
    }
    type metadata accessor for Array();
    return v8;
  }
  return result;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Debounce<A, B>.Inner<A1>(_QWORD *a1)
{
  return Publishers.Debounce.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.Debounce.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void (*v11)(uint64_t **, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int8x16_t v16;
  int8x16_t v17;
  char v18;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v15);
  if (v18 == 2
    && (v6 = vorrq_s8(v16, v17),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v15)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v15);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v15);
    v18 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v15, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    os_unfair_recursive_lock_lock_with_options();
    v17.i64[0] = v3;
    v17.i64[1] = (uint64_t)&protocol witness table for Publishers.Debounce<A, B>.Inner<A1>;
    v15 = v1;
    v10 = *(_QWORD *)(v3 + 120);
    v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    v12 = *(_QWORD *)(v3 + 96);
    swift_retain();
    v11(&v15, v12, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
    os_unfair_recursive_lock_unlock();
    v13 = a1[3];
    v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v14 + 24))(0x8000000000000000, v13, v14);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v15);
    os_unfair_lock_unlock(v4);
    v8 = a1[3];
    v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 8))(v8);
  }
}

uint64_t getEnumTagSinglePayload for Just(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18B5688B0 + 4 * byte_18B5F5B00[(v7 - 1)]))();
}

void protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Throttle<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.Throttle.Inner.receive(subscription:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.CollectByTime<A, B>.Inner<A1>(void (*a1)(char *, char *, uint64_t))
{
  Publishers.CollectByTime.Inner.receive(completion:)(a1);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.DropWhile<A>.Inner<A1>(uint64_t a1)
{
  Publishers.DropWhile.Inner.request(_:)(a1);
}

void Publishers.DropWhile.Inner.request(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6[2];
  char v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  if (a1 == 0x8000000000000000)
    goto LABEL_4;
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (!a1)
  {
LABEL_9:
    __break(1u);
    return;
  }
LABEL_4:
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 16, (uint64_t)v6);
  if (v7)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v6);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
  }
  else
  {
    outlined init with take of Subscription(v6, (uint64_t)v8);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    v4 = v9;
    v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingPublisher<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = partial apply for closure #2 in AsyncPublisher.Iterator.next();
  v6[3] = a2;
  v6[4] = v2;
  v6[2] = a1;
  return swift_task_switch();
}

uint64_t Publisher.prefix(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD v7[2];

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v7[0] = 0;
    v7[1] = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
    return Publisher.output<A>(in:)((uint64_t)v7, a2, a3, a4);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance Range<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    result = MEMORY[0x18D77ACE4](MEMORY[0x1E0DEB8A8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>);
  }
  return result;
}

uint64_t Publisher.output<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v5 = v4;
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = xmmword_18B5F5AF0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  result = dispatch thunk of RangeExpression.relative<A>(to:)();
  v13 = v16;
  if (v16 < 0)
  {
    __break(1u);
  }
  else
  {
    v14 = v17;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v5, a2);
    return Publishers.Output.init(upstream:range:)((uint64_t)v11, v13, v14, a2, a3, a4);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    v2 = lazy protocol witness table accessor for type Int and conformance Int();
    v3[0] = MEMORY[0x1E0DEB458];
    v3[1] = v2;
    result = MEMORY[0x18D77ACE4](MEMORY[0x1E0DEB8C0], v1, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

uint64_t Publishers.Output.init(upstream:range:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  _QWORD *v12;

  if ((a3 | a2) < 0)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, result, a4);
    result = type metadata accessor for Publishers.Output(0, a4, a5, v11);
    v12 = (_QWORD *)(a6 + *(int *)(result + 36));
    *v12 = a2;
    v12[1] = a3;
  }
  return result;
}

uint64_t type metadata accessor for Publishers.Output(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Output);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x18D77ACE4](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x18D77ACE4](MEMORY[0x1E0DEB460], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CurrentValueSubject<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D77ACE4](&protocol conformance descriptor for CurrentValueSubject<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t CurrentValueSubject.__deallocating_deinit()
{
  CurrentValueSubject.deinit();
  return swift_deallocClassInstance();
}

_QWORD *CurrentValueSubject.deinit()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = (_QWORD *)*v0;
  v3 = *(_QWORD *)((char *)v0 + *(_QWORD *)(*v0 + 144));
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Subscription(v5, (uint64_t)v12);
      v7 = v13;
      v6 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      v5 += 40;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  MEMORY[0x18D77ADB0](v1[2], -1, -1);
  v8 = (char *)v1 + *(_QWORD *)(*v1 + 120);
  type metadata accessor for Subscribers.Completion(255, v2[11], v2[12], v9);
  v10 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  outlined consume of ConduitList<A, Never><A>(*(_QWORD *)((char *)v1 + *(_QWORD *)(*v1 + 128)), *((_BYTE *)v1 + *(_QWORD *)(*v1 + 128) + 8));
  (*(void (**)(char *))(*(_QWORD *)(v2[10] - 8) + 8))((char *)v1 + *(_QWORD *)(*v1 + 136));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t Publishers.Output.Inner.__deallocating_deinit()
{
  Publishers.Output.Inner.deinit();
  return swift_deallocClassInstance();
}

uint64_t *Publishers.Output.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 144)), -1, -1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112));
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(_QWORD *)(*v0 + 120));
  return v0;
}

uint64_t type metadata completion function for Publishers.Multicast.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Autoconnect.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Optional.Publisher.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional.Publisher.drop(while:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.first(where:), a4);
}

uint64_t Publishers.CollectByTime.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.CollectByTime.Inner.deinit);
}

_QWORD *destructiveInjectEnumTag for Publishers.BufferingStrategy(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

uint64_t Publishers.Sequence.Inner.__deallocating_deinit()
{
  Publishers.Sequence.Inner.deinit();
  return swift_deallocClassInstance();
}

uint64_t Publishers.Sequence.Inner.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 200)), -1, -1);
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 152);
  v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 160);
  v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 168);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v5, AssociatedTypeWitness);
  v7 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return v0;
}

uint64_t type metadata completion function for SubjectSubscriber()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for Publishers.SetFailureType()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Just.Inner()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t getEnumTag for Subscribers.Completion(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 1);
}

void type metadata accessor for Publishers.Delay()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Catch<A, B>.Inner<A1>.CaughtS(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return protocol witness for Subscriber.receive(_:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))Publishers.Catch.Inner.CaughtS.receive(subscription:));
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.Catch<A, B>.Inner<A1>.CaughtS(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return protocol witness for Subscriber.receive(_:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))Publishers.Catch.Inner.CaughtS.receive(completion:));
}

uint64_t closure #2 in AsyncThrowingPublisher.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = **(_QWORD ***)(v0 + 24);
  *(_QWORD *)(v0 + 32) = v1;
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = closure #2 in AsyncThrowingPublisher.Iterator.next();
  v2[2] = *(_QWORD *)(v0 + 16);
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t withTaskCancellationHandler<A>(handler:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  char *v15;

  v15 = (char *)&async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)
      + async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = withTaskCancellationHandler<A>(handler:operation:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))v15)(a1, a4, a5, a2, a3, 0, 0, a6);
}

uint64_t type metadata completion function for Publishers._Merged()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
    return swift_initClassMetadata2();
  return result;
}

uint64_t Publishers.CompactMap.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21)(uint64_t);
  uint64_t v23;
  uint64_t v24;

  v24 = a1;
  v9 = a3[2];
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t *)(v14 + *(int *)(v13 + 44));
  v16 = *v15;
  v17 = v15[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14, v9);
  v18 = (uint64_t (*)(uint64_t))swift_allocObject();
  v19 = a3[3];
  v20 = a3[4];
  *((_QWORD *)v18 + 2) = v9;
  *((_QWORD *)v18 + 3) = v19;
  *((_QWORD *)v18 + 4) = a4;
  *((_QWORD *)v18 + 5) = v20;
  *((_QWORD *)v18 + 6) = v16;
  *((_QWORD *)v18 + 7) = v17;
  *((_QWORD *)v18 + 8) = v24;
  *((_QWORD *)v18 + 9) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, v9);
  v21 = (uint64_t (**)(uint64_t))(a5
                                         + *(int *)(type metadata accessor for Publishers.CompactMap(0, v9, a4, v20)
                                                  + 44));
  *v21 = partial apply for closure #1 in Publishers.CompactMap.map<A>(_:);
  v21[1] = v18;
  swift_retain();
  return swift_retain();
}

uint64_t type metadata completion function for Publishers.SetFailureType.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in FilterProducer<A, B, C, D, E>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 128);
}

uint64_t Publisher.scan<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publisher.reduce<A>(_:_:)(a1, a2, a3, a4, a5, a6, type metadata accessor for Publishers.Scan, a7);
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.next()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  char *v4;

  v4 = (char *)&async function pointer to withUnsafeThrowingContinuation<A>(isolation:_:)
     + async function pointer to withUnsafeThrowingContinuation<A>(isolation:_:);
  v1 = (_QWORD *)swift_task_alloc();
  v0[5] = v1;
  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for Optional();
  *v1 = v0;
  v1[1] = AsyncThrowingPublisher.Iterator.Inner.next();
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, void (*)(uint64_t), _QWORD, uint64_t))v4)(v0[2], 0, 0, partial apply for closure #1 in AsyncThrowingPublisher.Iterator.Inner.next(), v0[3], v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers._Merged<A, B, C>.Side()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t type metadata completion function for Future.Conduit.State()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v5;
  char v6;
  uint64_t v7;
  char *v8;
  char *v9;

  v0 = swift_checkMetadataState();
  v1 = v0;
  if (v2 <= 0x3F)
  {
    v7 = *(_QWORD *)(v0 - 8) + 64;
    swift_getAssociatedConformanceWitness();
    v1 = type metadata accessor for Result();
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v8 = &v6;
      swift_getTupleTypeLayout2();
      v9 = &v5;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v1;
}

uint64_t Publishers.AllSatisfy.Inner.__deallocating_deinit()
{
  ReduceProducer.deinit();
  return swift_deallocClassInstance();
}

uint64_t *ReduceProducer.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 176)), -1, -1);
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 136);
  v3 = type metadata accessor for Optional();
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(v2, v3);
  v4((uint64_t)v0 + *(_QWORD *)(*v0 + 144), v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 112) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 152));
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(_QWORD *)(*v0 + 160));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 168));
  return v0;
}

void Publisher.merge<A, B>(with:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[4];

  v27[1] = a8;
  v27[2] = a6;
  v27[3] = a7;
  v27[0] = a9;
  v14 = *(_QWORD *)(a5 - 8);
  v15 = MEMORY[0x1E0C80A78](a1);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v15);
  v22 = (char *)v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v25 + 16))(v24, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a1, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a2, a5);
  Publishers.Merge3.init(_:_:_:)((uint64_t)v24, a3, v27[0]);
}

void Publishers.Merge3.init(_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.Merge3();
}

uint64_t sub_18B569C4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v5 + *(int *)(a1 + 68), v4, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v5 + *(int *)(a1 + 72), v3, v1);
}

void type metadata accessor for Publishers.Merge3()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t CurrentValueSubject.value.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  specialized CurrentValueSubject.value.setter(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
}

void specialized CurrentValueSubject.value.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  char *v5;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  v5 = (char *)v1 + *(_QWORD *)(*v1 + 136);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 24))(v5, a1);
  swift_endAccess();
  os_unfair_lock_unlock(v4);
  CurrentValueSubject.send(_:)(a1);
}

uint64_t closure #1 in Publishers.CompactMap.map<A>(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)@<X0>(uint64_t@<X8>);
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v21 = a3;
  v22 = a4;
  v23 = a8;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v20 - v16;
  a2(a1);
  v32 = a5;
  v33 = a6;
  v34 = a7;
  v35 = a9;
  v36 = v21;
  v37 = v22;
  v25 = a5;
  v26 = a6;
  v27 = a7;
  v28 = a9;
  v29 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed B) -> (@out A1);
  v30 = &v31;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?), (uint64_t)v24, MEMORY[0x1E0DEDCE8], a7, v18, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t partial apply for closure #1 in Publishers.CompactMap.compactMap<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[6], v2[7], v2[8], v2[9], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t partial apply for closure #1 in Publishers.CompactMap.map<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in Publishers.CompactMap.compactMap<A>(_:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in Publishers.CompactMap.map<A>(_:));
}

uint64_t closure #1 in Publishers.CompactMap.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v21 = a3;
  v22 = a4;
  v23 = a8;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v20 - v16;
  a2(a1);
  v25 = a5;
  v26 = a6;
  v27 = a7;
  v28 = a9;
  v29 = v21;
  v30 = v22;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?)partial apply, (uint64_t)v24, MEMORY[0x1E0DEDCE8], a7, v18, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t AbstractCombineLatest.__deallocating_deinit()
{
  AbstractCombineLatest.deinit();
  return swift_deallocClassInstance();
}

uint64_t *AbstractCombineLatest.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 184)), -1, -1);
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 192)), -1, -1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112), *(_QWORD *)(v1 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 208);
  v3 = *(_QWORD *)(v1 + 88);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Subscribers.Completion(255, v3, AssociatedConformanceWitness, v5);
  v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
  return v0;
}

uint64_t AsyncThrowingPublisher.Iterator.next()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[3];
  v2 = (uint64_t *)v0[4];
  v3 = *v2;
  v0[5] = *v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[6] = v4;
  v4[2] = *(_QWORD *)(v1 + 16);
  v4[3] = *(_QWORD *)(v1 + 24);
  v4[4] = v2;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to withTaskCancellationHandler<A>(handler:operation:)
                                                                                    + async function pointer to withTaskCancellationHandler<A>(handler:operation:));
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc();
  v0[7] = v5;
  swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  *v5 = v0;
  v5[1] = AsyncThrowingPublisher.Iterator.next();
  return v8(v0[2], (uint64_t)partial apply for closure #1 in AsyncThrowingPublisher.Iterator.next(), v3, (uint64_t)&async function pointer to partial apply for closure #2 in AsyncThrowingPublisher.Iterator.next(), (uint64_t)v4, v6);
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable;
  if (!lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable)
  {
    v1 = type metadata accessor for AnyCancellable();
    result = MEMORY[0x18D77ACE4](&protocol conformance descriptor for AnyCancellable, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable);
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Autoconnect()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PassthroughSubject<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D77ACE4](&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.Filter.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B56A450 + 4 * byte_18B5F4DC7[v10]))();
  }
}

uint64_t Just.tryMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v11 = type metadata accessor for Result();
  MEMORY[0x1E0C80A78](v11);
  v13 = &v15[-v12];
  v16 = *(_QWORD *)(a3 + 16);
  v17 = a4;
  v18 = a1;
  v19 = a2;
  v20 = v5;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC((void (*)(_BYTE *))partial apply for closure #1 in Just.tryMap<A>(_:), (uint64_t)&v15[-v12]);
  return Result.Publisher.init(_:)((uint64_t)v13, a5);
}

uint64_t Result.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for Result();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

void partial apply for closure #1 in AsyncThrowingPublisher.Iterator.Inner.next()(uint64_t a1)
{
  _QWORD *v1;

  closure #1 in AsyncThrowingPublisher.Iterator.Inner.next()(a1, v1);
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.receive(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Bool IsNativeType;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[48];

  v4 = *(_QWORD *)(*v1 + 80);
  v3 = *(_QWORD *)(*v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - v8;
  v10 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v10);
  swift_beginAccess();
  v12 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State(0, v4, v3, v11);
  v27 = *(_QWORD *)(v12 - 8);
  (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v27 + 16))(v30, v1 + 4, v12);
  v13 = v1 + 3;
  if (v30[40])
  {
    swift_beginAccess();
    v14 = *v13;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    v15 = type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.removeAll(keepingCapacity:)(0);
    swift_endAccess();
    os_unfair_lock_unlock(v10);
    if (!MEMORY[0x18D77A3A8](v14, v15))
      goto LABEL_11;
    v16 = 4;
    while (1)
    {
      v17 = v16 - 4;
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        v19 = *(_QWORD *)(v14 + 8 * v16);
        v20 = __OFADD__(v17, 1);
        v21 = v16 - 3;
        if (v20)
          goto LABEL_10;
      }
      else
      {
        v19 = _ArrayBuffer._getElementSlowPath(_:)();
        swift_unknownObjectRelease();
        v20 = __OFADD__(v17, 1);
        v21 = v16 - 3;
        if (v20)
        {
LABEL_10:
          __break(1u);
LABEL_11:
          swift_bridgeObjectRelease();
LABEL_14:
          (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v30, v12);
          return 0;
        }
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v9, 1, 1, AssociatedTypeWitness);
      (*(void (**)(_QWORD, char *, uint64_t))(v7 + 32))(*(_QWORD *)(*(_QWORD *)(v19 + 64) + 40), v9, v6);
      swift_continuation_throwingResume();
      ++v16;
      if (v21 == MEMORY[0x18D77A3A8](v14, v15))
        goto LABEL_11;
    }
  }
  swift_beginAccess();
  v29 = *v13;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for UnsafeContinuation();
  v22 = type metadata accessor for Array();
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v22);
  if ((Collection.isEmpty.getter() & 1) == 0)
  {
    swift_beginAccess();
    MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF58], v22);
    RangeReplaceableCollection.removeFirst()();
    swift_endAccess();
    v23 = v28;
    os_unfair_lock_unlock(v10);
    v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v9, a1, AssociatedTypeWitness);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v9, 0, 1, AssociatedTypeWitness);
    (*(void (**)(_QWORD, char *, uint64_t))(v7 + 32))(*(_QWORD *)(*(_QWORD *)(v23 + 64) + 40), v9, v6);
    swift_continuation_throwingResume();
    goto LABEL_14;
  }
  os_unfair_lock_unlock(v10);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void closure #1 in AsyncThrowingPublisher.Iterator.Inner.next()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_unfair_lock_s *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31[2];
  char v32;

  v5 = *(_QWORD *)(*a2 + 80);
  v4 = *(_QWORD *)(*a2 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v25 - v9;
  v11 = (os_unfair_lock_s *)a2[2];
  os_unfair_lock_lock(v11);
  v12 = a2 + 4;
  swift_beginAccess();
  v14 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State(0, v5, v4, v13);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(__int128 *, _QWORD *, uint64_t))(v15 + 16))(v31, a2 + 4, v14);
  if (!v32)
  {
    outlined init with take of Subscription(v31, (uint64_t)v25);
    v30 = a1;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    v19 = v26;
    v20 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 24))(1, v19, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    return;
  }
  if (v32 != 1)
  {
    v29 = a1;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    v21 = a2[10];
    v22 = 0x8000000000000000;
    if (v21 != 0x8000000000000000)
    {
      if (v21 < 0)
      {
        __break(1u);
        return;
      }
      v23 = __OFADD__(v21, 1);
      v24 = v21 + 1;
      if (!v23)
        v22 = v24;
    }
    a2[10] = v22;
    os_unfair_lock_unlock(v11);
    return;
  }
  v16 = *(_QWORD *)&v31[0];
  v25[0] = 0;
  v28 = 1;
  swift_beginAccess();
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v15 + 40))(v12, v25, v14);
  swift_endAccess();
  os_unfair_lock_unlock(v11);
  if (v16)
  {
    v25[0] = v16;
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v18, v25, v17);
    swift_continuation_throwingResumeWithError();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v10, 1, 1, AssociatedTypeWitness);
    (*(void (**)(_QWORD, char *, uint64_t))(v8 + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40), v10, v7);
    swift_continuation_throwingResume();
  }
}

uint64_t initializeWithCopy for AsyncThrowingPublisher.Iterator.Inner.State(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v5 = *a2;
    MEMORY[0x18D77AC00](*a2);
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingPublisher.Iterator.Inner.State);
}

uint64_t destroy for AsyncThrowingPublisher.Iterator.Inner.State(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)result + 2;
  if (v1 == 1)
    JUMPOUT(0x18D77ABF4);
  if (!v1)
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Throttle<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.Throttle.Inner.request(_:)(a1);
}

void Publishers.Throttle.Inner.request(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t AssociatedTypeWitness;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v19 = a1;
  v2 = (_QWORD *)*v1;
  v3 = v2[14];
  v4 = v2[11];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15[3] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15[4] = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v17 = (char *)v15 - v8;
  v24 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v7);
  v18 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v2[15];
  v11 = v2[12];
  v22 = swift_getAssociatedTypeWitness();
  v23 = type metadata accessor for Optional();
  v21 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v20 = (char *)v15 - v12;
  v13 = v2[10];
  v14 = v2[13];
  v25 = v13;
  v26 = v4;
  v27 = v11;
  v28 = v14;
  v29 = v3;
  v30 = v10;
  type metadata accessor for Publishers.Throttle.Inner.State();
}

void sub_18B56AF90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v7 - 136) = v4;
  *(_QWORD *)(v7 - 128) = v1;
  *(_QWORD *)(v7 - 216) = v1;
  *(_QWORD *)(v7 - 208) = v3;
  *(_QWORD *)(v7 - 120) = v5;
  *(_QWORD *)(v7 - 112) = v2;
  *(_QWORD *)(v7 - 104) = v3;
  *(_QWORD *)(v7 - 96) = v6;
  type metadata accessor for Publishers.Throttle.Inner.Scheduling();
}

void sub_18B56AFD8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_unfair_lock_s *v11;
  char *v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  int *TupleTypeMetadata;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(uint64_t, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;

  v8 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v49 - v9;
  v11 = (os_unfair_lock_s *)v1[2];
  *(_QWORD *)(v6 - 192) = v11;
  os_unfair_lock_lock(v11);
  v12 = (char *)v1 + *(_QWORD *)(*v1 + 144);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 16))(v3, v12, v5);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v5);
LABEL_11:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 192));
    return;
  }
  *(_QWORD *)(v6 - 136) = a1;
  *(_QWORD *)(v6 - 128) = v4;
  *(_QWORD *)(v6 - 120) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Subscription);
  v13 = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Subscribers.Completion(255, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  *(_QWORD *)(v6 - 112) = type metadata accessor for Optional();
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  *(_QWORD *)(v6 - 304) = v3 + TupleTypeMetadata[12];
  v18 = v3 + TupleTypeMetadata[16];
  v19 = v3 + TupleTypeMetadata[20];
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v10, v3, a1);
  v21 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v19, 1, v21) != 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, a1);
    v32 = type metadata accessor for Optional();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v19, v32);
    __swift_destroy_boxed_opaque_existential_1(v18);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(*(_QWORD *)(v6 - 304), v4);
    goto LABEL_11;
  }
  *(_QWORD *)(v6 - 312) = v13;
  v22 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v19, v22);
  __swift_destroy_boxed_opaque_existential_1(v18);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(*(_QWORD *)(v6 - 304), v4);
  v23 = *v1;
  v24 = *(_QWORD *)(*v1 + 152);
  v25 = *(_QWORD *)((char *)v1 + v24);
  v26 = 0x8000000000000000;
  v28 = *(_QWORD *)(v6 - 208);
  v27 = *(_QWORD *)(v6 - 200);
  v29 = v10;
  v30 = *(_QWORD *)(v6 - 216);
  if (v25 != 0x8000000000000000)
  {
    v31 = *(_QWORD *)(v6 - 256);
    if (v31 != 0x8000000000000000)
    {
      if ((v25 | v31) < 0)
      {
        __break(1u);
        goto LABEL_22;
      }
      v26 = v25 + v31;
      if (!__OFADD__(v25, v31))
      {
        if ((v26 & 0x8000000000000000) == 0)
          goto LABEL_13;
LABEL_22:
        __break(1u);
        return;
      }
      v26 = 0x8000000000000000;
    }
LABEL_13:
    *(_QWORD *)((char *)v1 + v24) = v26;
    v23 = *v1;
  }
  v33 = (char *)v1 + *(_QWORD *)(v23 + 160);
  swift_beginAccess();
  v34 = *(_QWORD *)(v6 - 248);
  v35 = *(_QWORD *)(v6 - 240);
  v36 = *(_QWORD *)(v6 - 224);
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v34, v33, v36);
  LODWORD(v33) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 - 232) - 8) + 48))(v34, 1);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
  if ((_DWORD)v33 == 1 || (v37 = *(_QWORD *)(*v1 + 176), (*((_BYTE *)v1 + v37) & 1) != 0))
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 192));
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 312) + 8))(v29, a1);
  }
  else
  {
    *((_BYTE *)v1 + v37) = 1;
    v38 = v30;
    (*(void (**)(void))(v27 + 16))();
    v39 = v28;
    (*(void (**)(uint64_t, uint64_t))(v28 + 40))(v38, v28);
    v40 = *(_QWORD *)(*v1 + 168);
    *(_QWORD *)(v6 - 224) = a1;
    v41 = (char *)v1 + v40;
    swift_beginAccess();
    *(_QWORD *)(v6 - 232) = v29;
    v42 = *(_QWORD *)(v6 - 296);
    v43 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 16);
    v44 = *(_QWORD *)(v6 - 288);
    v45 = *(_QWORD *)(v6 - 280);
    v43(v44, v41, v45);
    swift_getAssociatedConformanceWitness();
    v46 = dispatch thunk of static Comparable.>= infix(_:_:)();
    v47 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v47(v44, v45);
    if ((v46 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 192));
      swift_retain();
      v48 = *(_QWORD *)(v6 - 264);
      Scheduler.schedule(_:)((uint64_t)partial apply for closure #2 in Publishers.Throttle.Inner.receive(_:), (uint64_t)v1, v38, v39);
      swift_release();
    }
    else
    {
      v43(v44, v41, v45);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 192));
      swift_retain();
      v48 = *(_QWORD *)(v6 - 264);
      Scheduler.schedule(after:_:)(v44, (uint64_t)partial apply for closure #2 in Publishers.Throttle.Inner.receive(_:), (uint64_t)v1, v38, v39);
      swift_release();
      v47(v44, v45);
    }
    v47(*(_QWORD *)(v6 - 272), v45);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 200) + 8))(v48, v38);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 312) + 8))(*(_QWORD *)(v6 - 232), *(_QWORD *)(v6 - 224));
  }
}

void Publishers.Throttle.Inner.receive(subscription:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[11];
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v11 = a1;
  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[9] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9[7] = (char *)v9 - v5;
  v6 = v2[12];
  v7 = v2[13];
  v8 = v2[15];
  v12 = v2[10];
  v13 = v4;
  v14 = v6;
  v15 = v7;
  v16 = v3;
  v17 = v8;
  type metadata accessor for Publishers.Throttle.Inner.State();
}

void sub_18B56B58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v16 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v15 - 256) = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v15 - 176) = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v18);
  *(_QWORD *)(v15 - 200) = v11;
  *(_QWORD *)(v15 - 192) = (char *)&a9 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v15 - 136) = v12;
  *(_QWORD *)(v15 - 128) = v9;
  *(_QWORD *)(v15 - 240) = v9;
  *(_QWORD *)(v15 - 208) = v10;
  *(_QWORD *)(v15 - 120) = v10;
  *(_QWORD *)(v15 - 112) = v13;
  *(_QWORD *)(v15 - 224) = v14;
  *(_QWORD *)(v15 - 104) = v14;
  *(_QWORD *)(v15 - 96) = v11;
  type metadata accessor for Publishers.Throttle.Inner.Scheduling();
}

uint64_t sub_18B56B634(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_unfair_lock_s *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t AssociatedTypeWitness;
  uint64_t v25;
  uint64_t AssociatedConformanceWitness;
  uint64_t v27;
  int *TupleTypeMetadata;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v8 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v49 - v9;
  v11 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v11);
  v12 = (char *)v2 + *(_QWORD *)(*v2 + 144);
  swift_beginAccess();
  *(_QWORD *)(v6 - 184) = v5;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v3, v12, v1);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 184) + 8))(v3, v1);
    os_unfair_lock_unlock(v11);
    v13 = *(_QWORD **)(v6 - 168);
    v14 = v13[3];
    v15 = v13[4];
    __swift_project_boxed_opaque_existential_1(v13, v14);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 + 8) + 8))(v14);
  }
  else
  {
    *(_QWORD *)(v6 - 280) = v11;
    v17 = *(_QWORD *)(v6 - 208);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v19 = a1;
    v20 = v3 + *(int *)(TupleTypeMetadata2 + 48);
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
    v22 = v10;
    *(_QWORD *)(v6 - 264) = v10;
    v23 = v19;
    *(_QWORD *)(v6 - 272) = v19;
    v21(v22, v3, v19);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 176) + 32))(*(_QWORD *)(v6 - 192), v20, v17);
    *(_QWORD *)(v6 - 136) = v23;
    *(_QWORD *)(v6 - 128) = v17;
    *(_QWORD *)(v6 - 120) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Subscription);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v25 = v17;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for Subscribers.Completion(255, AssociatedTypeWitness, AssociatedConformanceWitness, v27);
    *(_QWORD *)(v6 - 112) = type metadata accessor for Optional();
    TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
    v29 = TupleTypeMetadata[12];
    v30 = v8;
    *(_QWORD *)(v6 - 288) = v8;
    v31 = *(_QWORD *)(v6 - 256);
    v32 = v31 + v29;
    v33 = v31 + TupleTypeMetadata[16];
    *(_QWORD *)(v6 - 296) = v31 + TupleTypeMetadata[20];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v30 + 16))(v31, *(_QWORD *)(v6 - 264), *(_QWORD *)(v6 - 272));
    v34 = v32;
    v35 = *(_QWORD *)(v6 - 192);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 176) + 16))(v34, v35, v25);
    outlined init with copy of Subscription(*(_QWORD *)(v6 - 168), v33);
    v37 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v36);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(*(_QWORD *)(v6 - 296), 1, 1, v37);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 184) + 40))(v12, v31, v1);
    swift_endAccess();
    v38 = *(_QWORD *)(v6 - 272);
    v39 = *(_QWORD *)(v6 - 264);
    v40 = *(_QWORD *)(v6 - 248);
    (*(void (**)(_QWORD))(*(_QWORD *)(v6 - 224) + 40))(*(_QWORD *)(v6 - 240));
    v41 = (char *)v2 + *(_QWORD *)(*v2 + 168);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v6 - 232) + 40))(v41, v40, *(_QWORD *)(v6 - 216));
    swift_endAccess();
    *((_BYTE *)v2 + *(_QWORD *)(*v2 + 184)) = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 280));
    os_unfair_recursive_lock_lock_with_options();
    *(_QWORD *)(v6 - 112) = v4;
    *(_QWORD *)(v6 - 104) = &protocol witness table for Publishers.Throttle<A, B>.Inner<A1>;
    *(_QWORD *)(v6 - 136) = v2;
    v42 = *(_QWORD *)(v6 - 200);
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 40);
    swift_retain();
    v44 = v35;
    v45 = *(_QWORD *)(v6 - 208);
    v43(v6 - 136, v45, v42);
    __swift_destroy_boxed_opaque_existential_1(v6 - 136);
    os_unfair_recursive_lock_unlock();
    v46 = *(_QWORD **)(v6 - 168);
    v47 = v46[3];
    v48 = v46[4];
    __swift_project_boxed_opaque_existential_1(v46, v47);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v48 + 24))(0x8000000000000000, v47, v48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 176) + 8))(v44, v45);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 288) + 8))(v39, v38);
  }
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.Throttle<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.Throttle.Inner.receive(_:)(a1);
}

void Publishers.Throttle.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[10];
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v17[7] = a1;
  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = type metadata accessor for Optional();
  v17[9] = *(_QWORD *)(v18 - 8);
  v5 = MEMORY[0x1E0C80A78](v18);
  v17[6] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v17[5] = (char *)v17 - v7;
  v8 = v2[14];
  v9 = v2[11];
  v19 = swift_getAssociatedTypeWitness();
  v17[8] = *(_QWORD *)(v19 - 8);
  v10 = MEMORY[0x1E0C80A78](v19);
  v21 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v24 = (char *)v17 - v13;
  v23 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v12);
  v22 = (char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v2[10];
  v16 = v2[13];
  v25 = v15;
  v26 = v9;
  v27 = v4;
  v28 = v16;
  v29 = v8;
  v30 = v3;
  type metadata accessor for Publishers.Throttle.Inner.State();
}

void sub_18B56BC18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v7 - 136) = v6;
  *(_QWORD *)(v7 - 128) = v1;
  *(_QWORD *)(v7 - 248) = v1;
  *(_QWORD *)(v7 - 120) = v2;
  *(_QWORD *)(v7 - 112) = v3;
  *(_QWORD *)(v7 - 264) = v5;
  *(_QWORD *)(v7 - 104) = v5;
  *(_QWORD *)(v7 - 96) = v4;
  type metadata accessor for Publishers.Throttle.Inner.Scheduling();
}

uint64_t sub_18B56BC68(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_unfair_lock_s *v11;
  char *v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  int *TupleTypeMetadata;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(uint64_t, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(uint64_t, uint64_t);
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_unfair_lock_s *v51;
  uint64_t v52;
  uint64_t v54;

  v8 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v54 - v9;
  v11 = (os_unfair_lock_s *)v2[2];
  *(_QWORD *)(v6 - 216) = v11;
  os_unfair_lock_lock(v11);
  v12 = (char *)v2 + *(_QWORD *)(*v2 + 144);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(v5, v12, v3);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v3);
LABEL_8:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 216));
    return 0;
  }
  *(_QWORD *)(v6 - 136) = a1;
  *(_QWORD *)(v6 - 128) = v1;
  *(_QWORD *)(v6 - 120) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Subscription);
  v13 = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Subscribers.Completion(255, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  *(_QWORD *)(v6 - 112) = type metadata accessor for Optional();
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  *(_QWORD *)(v6 - 336) = v5 + TupleTypeMetadata[12];
  v18 = v5 + TupleTypeMetadata[16];
  v19 = v5 + TupleTypeMetadata[20];
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v10, v5, a1);
  v21 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v19, 1, v21) != 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, a1);
    v41 = type metadata accessor for Optional();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v19, v41);
    __swift_destroy_boxed_opaque_existential_1(v18);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(*(_QWORD *)(v6 - 336), v1);
    goto LABEL_8;
  }
  *(_QWORD *)(v6 - 344) = v13;
  v22 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v19, v22);
  __swift_destroy_boxed_opaque_existential_1(v18);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(*(_QWORD *)(v6 - 336), v1);
  v23 = *(_QWORD *)(v6 - 248);
  (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v6 - 232) + 16))(*(_QWORD *)(v6 - 240), &v10[*(int *)(a1 + 68)], v23);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 264) + 40))(v23, *(_QWORD *)(v6 - 264));
  v24 = (char *)v2 + *(_QWORD *)(*v2 + 168);
  swift_beginAccess();
  v25 = *(_QWORD *)(v6 - 304);
  v26 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 16);
  v27 = *(_QWORD *)(v6 - 256);
  *(_QWORD *)(v6 - 352) = v24;
  v28 = *(_QWORD *)(v6 - 280);
  *(_QWORD *)(v6 - 360) = v26;
  v26(v27, v24, v28);
  swift_getAssociatedConformanceWitness();
  v29 = v25;
  v30 = dispatch thunk of static Comparable.>= infix(_:_:)();
  v31 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v31(v27, v28);
  *(_QWORD *)(v6 - 336) = a1;
  v32 = v10[*(int *)(a1 + 72)];
  v33 = v10;
  v34 = *(_QWORD *)(v6 - 288);
  v35 = *(_QWORD *)(v6 - 296);
  if ((v32 & 1) == 0)
  {
    if ((v30 & 1) != 0)
    {
      v36 = *(_QWORD *)(v6 - 256);
      *(_QWORD *)(v6 - 328) = v33;
      v37 = v30;
      v38 = v29;
      dispatch thunk of Strideable.advanced(by:)();
      v39 = *(_QWORD *)(v6 - 352);
      swift_beginAccess();
      v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 40);
      v30 = v37;
      v33 = *(char **)(v6 - 328);
      v40(v39, v36, v28);
      swift_endAccess();
    }
    else
    {
      v42 = (char *)v2 + *(_QWORD *)(*v2 + 160);
      swift_beginAccess();
      v43 = *(_QWORD *)(v6 - 328);
      (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v43, v42, v34);
      LODWORD(v42) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 - 272) - 8) + 48))(v43, 1);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v43, v34);
      if ((_DWORD)v42 != 1)
        goto LABEL_11;
    }
  }
  v44 = *(_QWORD *)(v6 - 272);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(_QWORD *)(v6 - 320);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v45 + 16))(v46, *(_QWORD *)(v6 - 312), v44);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v46, 0, 1, v44);
  v47 = (char *)v2 + *(_QWORD *)(*v2 + 160);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 40))(v47, v46, v34);
  swift_endAccess();
LABEL_11:
  v48 = *(_QWORD *)(*v2 + 176);
  if ((*((_BYTE *)v2 + v48) & 1) != 0 || !*(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 152)))
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 216));
    v31(*(_QWORD *)(v6 - 224), v28);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 232) + 8))(*(_QWORD *)(v6 - 240), *(_QWORD *)(v6 - 248));
  }
  else
  {
    *((_BYTE *)v2 + v48) = 1;
    v49 = *(_QWORD *)(v6 - 248);
    v50 = *(_QWORD *)(v6 - 240);
    v51 = *(os_unfair_lock_s **)(v6 - 216);
    if ((v30 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 216));
      swift_retain();
      Scheduler.schedule(_:)((uint64_t)partial apply for closure #2 in Publishers.Throttle.Inner.receive(_:), (uint64_t)v2, v49, *(_QWORD *)(v6 - 264));
      swift_release();
    }
    else
    {
      v52 = *(_QWORD *)(v6 - 256);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 - 360))(v52, *(_QWORD *)(v6 - 352), v28);
      os_unfair_lock_unlock(v51);
      swift_retain();
      Scheduler.schedule(after:_:)(v52, (uint64_t)partial apply for closure #2 in Publishers.Throttle.Inner.receive(_:), (uint64_t)v2, v49, *(_QWORD *)(v6 - 264));
      swift_release();
      v31(v52, v28);
    }
    v31(*(_QWORD *)(v6 - 224), v28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 232) + 8))(v50, v49);
  }
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(v6 - 344) + 8))(v33, *(_QWORD *)(v6 - 336));
  return 0;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x18D77ACD8](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void type metadata accessor for Publishers.Throttle.Inner.Scheduling()
{
  JUMPOUT(0x18D77AC60);
}

void type metadata accessor for Publishers.Throttle.Inner.State()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t initializeWithCopy for Publishers.Throttle.Inner.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned __int8 *v38;
  size_t v39;
  int v40;
  int v41;
  unint64_t v42;
  size_t __n;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v5 = *(_QWORD *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v52 = AssociatedTypeWitness;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v53 = *(_QWORD *)(v50 + 64) + v8;
  v9 = *(_QWORD *)(a3 + 32);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v55 = *(_QWORD *)(v7 + 64);
  v56 = v10;
  v54 = v55 + v11 + (v53 & ~v8) + 1;
  v49 = *(_QWORD *)(v10 + 64);
  v12 = (v54 & ~v11) + v49;
  v14 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = *(_DWORD *)(v15 + 84);
  if (v17)
    v18 = *(_QWORD *)(v15 + 64);
  else
    v18 = *(_QWORD *)(v15 + 64) + 1;
  if (v17 >= 2)
    v19 = v18;
  else
    v19 = v18 + 1;
  v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (((v16 + v13 + 40) & ~v16) + v19 <= v12)
    v20 = (v54 & ~v11) + v49;
  else
    v20 = ((v16 + v13 + 40) & ~v16) + v19;
  v21 = *(unsigned __int8 *)(a2 + v20);
  if (v21 >= 2)
  {
    if (v20 <= 3)
      v22 = v20;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  v23 = ~v8;
  v24 = ~v11;
  if (v21 == 1)
  {
    __n = v19;
    v45 = v18;
    v46 = v20;
    v47 = v9;
    v48 = v14;
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16);
    v28 = a1;
    v51 = *(_DWORD *)(v15 + 84);
    v30 = a2;
    v29(a1, a2, v52);
    v31 = (v53 + a1) & v23;
    v32 = (v53 + a2) & v23;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v31, v32, v5);
    *(_BYTE *)(v31 + v55) = *(_BYTE *)(v32 + v55);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))((v54 + a1) & v24, (v54 + v30) & v24, v47);
    v33 = (v49 + 7 + ((v54 + a1) & v24)) & 0xFFFFFFFFFFFFFFF8;
    v34 = (v49 + 7 + ((v54 + v30) & v24)) & 0xFFFFFFFFFFFFFFF8;
    v35 = *(_QWORD *)(v34 + 24);
    *(_QWORD *)(v33 + 24) = v35;
    *(_QWORD *)(v33 + 32) = *(_QWORD *)(v34 + 32);
    (**(void (***)(unint64_t, unint64_t))(v35 - 8))(v33, v34);
    v36 = v34 + v16;
    v37 = (void *)((v33 + v16 + 40) & ~v16);
    v38 = (unsigned __int8 *)((v36 + 40) & ~v16);
    if (v51 > 1)
    {
      v39 = v45;
      if ((*(unsigned int (**)(uint64_t))(v15 + 48))((v36 + 40) & ~v16) >= 2)
      {
LABEL_33:
        memcpy(v37, v38, __n);
        v42 = v46;
LABEL_34:
        *(_BYTE *)(a1 + v42) = 1;
        return v28;
      }
    }
    else
    {
      v39 = v45;
      if (v38[v45])
      {
        v40 = (v38[v45] - 1) << (8 * v45);
        if (v45 > 3)
          v40 = 0;
        if ((_DWORD)v45)
        {
          if (v45 <= 3)
            v41 = v45;
          else
            v41 = 4;
          __asm { BR              X11 }
        }
        if (v40 != -1)
          goto LABEL_33;
      }
    }
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v15 + 48))(v38, 1, v48))
    {
      memcpy(v37, v38, v39);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v15 + 16))(v37, v38, v48);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v37, 0, 1, v48);
    }
    v42 = v46;
    if (v51 <= 1)
      *((_BYTE *)v37 + v39) = 0;
    goto LABEL_34;
  }
  v25 = v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(a1, a2, v52);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v27 = v9;
  v28 = a1;
  v26((v53 + a1) & v23, (v53 + a2) & v23, v5);
  *(_BYTE *)(((v53 + a1) & v23) + v55) = *(_BYTE *)(((v53 + a2) & v23) + v55);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))((v54 + a1) & v24, (v54 + a2) & v24, v27);
  *(_BYTE *)(a1 + v25) = 0;
  return v28;
}

uint64_t destroy for Publishers.Throttle.Inner.Scheduling(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))((*(_QWORD *)(v5 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80), v3);
}

uint64_t assignWithTake for Publishers.Throttle.Inner.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  size_t v17;
  size_t v18;
  size_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  void *v36;
  unsigned __int8 *v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  size_t __n;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 + 24);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v53 = AssociatedTypeWitness;
    v8 = *(_QWORD *)(v6 - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v54 = *(_QWORD *)(v52 + 64) + v9;
    v10 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
    v11 = *(unsigned __int8 *)(v10 + 80);
    v47 = *(_QWORD *)(v8 + 64);
    v55 = v47 + v11 + (v54 & ~v9) + 1;
    v46 = *(_QWORD *)(v10 + 64);
    v12 = (v55 & ~v11) + v46;
    v56 = *(_QWORD *)(a3 + 32);
    v13 = swift_getAssociatedTypeWitness();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned __int8 *)(v14 + 80);
    v16 = *(_DWORD *)(v14 + 84);
    v49 = v14;
    v50 = v13;
    v17 = *(_QWORD *)(v14 + 64);
    if (v16)
      v18 = v17;
    else
      v18 = v17 + 1;
    v48 = v16;
    if (v16 >= 2)
      v19 = v18;
    else
      v19 = v18 + 1;
    if (((v15 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & ~v15) + v19 > v12)
      v12 = ((v15 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & ~v15) + v19;
    v20 = *(unsigned __int8 *)(a1 + v12);
    if (v20 >= 2)
    {
      if (v12 <= 3)
        v21 = v12;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    v22 = ~v9;
    v51 = ~v11;
    __n = v19;
    v45 = ~v15;
    if (v20 != 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(a1, v53);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))((v54 + a1) & v22, v6);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))((v55 + a1) & v51, v56);
      goto LABEL_31;
    }
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(a1, v53);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))((v54 + a1) & v22, v6);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))((v55 + a1) & v51, v56);
    v23 = (v46 + ((v55 + a1) & v51) + 7) & 0xFFFFFFFFFFFFFFF8;
    __swift_destroy_boxed_opaque_existential_1(v23);
    v24 = (v23 + v15 + 40) & v45;
    if (v48 > 1)
    {
      if ((*(unsigned int (**)(uint64_t))(v49 + 48))(v24) >= 2)
        goto LABEL_31;
    }
    else if (*(_BYTE *)(v24 + v18))
    {
      v25 = (*(unsigned __int8 *)(v24 + v18) - 1) << (8 * v18);
      if (v18 > 3)
        v25 = 0;
      if ((_DWORD)v18)
      {
        if (v18 <= 3)
          v26 = v18;
        else
          v26 = 4;
        __asm { BR              X11 }
      }
      if (v25 != -1)
      {
LABEL_31:
        v27 = *(unsigned __int8 *)(a2 + v12);
        if (v27 >= 2)
        {
          if (v12 <= 3)
            v28 = v12;
          else
            v28 = 4;
          __asm { BR              X12 }
        }
        if (v27 != 1)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(a1, a2, v53);
          v29 = (v54 + a1) & v22;
          v30 = (v54 + a2) & v22;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v29, v30, v6);
          *(_BYTE *)(v29 + v47) = *(_BYTE *)(v30 + v47);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))((v55 + a1) & v51, (v55 + a2) & v51, v56);
          *(_BYTE *)(a1 + v12) = 0;
          return a1;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(a1, a2, v53);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))((v54 + a1) & v22, (v54 + a2) & v22, v6);
        *(_BYTE *)(((v54 + a1) & v22) + v47) = *(_BYTE *)(((v54 + a2) & v22) + v47);
        v31 = (v55 + a2) & v51;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))((v55 + a1) & v51, v31, v56);
        v32 = (v46 + 7 + ((v55 + a1) & v51)) & 0xFFFFFFFFFFFFFFF8;
        v33 = (v46 + 7 + v31) & 0xFFFFFFFFFFFFFFF8;
        v34 = *(_QWORD *)(v33 + 32);
        v35 = *(_OWORD *)(v33 + 16);
        *(_OWORD *)v32 = *(_OWORD *)v33;
        *(_OWORD *)(v32 + 16) = v35;
        *(_QWORD *)(v32 + 32) = v34;
        v36 = (void *)((v32 + v15 + 40) & v45);
        v37 = (unsigned __int8 *)((v33 + v15 + 40) & v45);
        if (v48 > 1)
        {
          v40 = v49;
          v39 = v50;
          v38 = v18;
          if ((*(unsigned int (**)(unsigned __int8 *, _QWORD, uint64_t))(v49 + 48))(v37, v48, v50) >= 2)
          {
LABEL_54:
            memcpy(v36, v37, __n);
            goto LABEL_55;
          }
        }
        else
        {
          v38 = v18;
          v40 = v49;
          v39 = v50;
          if (v37[v18])
          {
            v41 = (v37[v18] - 1) << (8 * v18);
            if (v18 > 3)
              v41 = 0;
            if ((_DWORD)v18)
            {
              if (v18 <= 3)
                v42 = v18;
              else
                v42 = 4;
              __asm { BR              X11 }
            }
            if (v41 != -1)
              goto LABEL_54;
          }
        }
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48))(v37, 1, v39))
        {
          memcpy(v36, v37, v38);
          if (v48 > 1)
            goto LABEL_55;
        }
        else
        {
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v40 + 32))(v36, v37, v39);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v39);
          if (v48 > 1)
          {
LABEL_55:
            *(_BYTE *)(a1 + v12) = 1;
            return a1;
          }
        }
        *((_BYTE *)v36 + v38) = 0;
        goto LABEL_55;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v24, 1, v50))
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v24, v50);
    goto LABEL_31;
  }
  return a1;
}

uint64_t initializeWithCopy for Publishers.Throttle.Inner.Scheduling(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v7 + 64) + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v12, v5);
  *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t Scheduler.schedule(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))((char *)&v14 - v11, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 56))(v12, a1, a2, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t Scheduler.schedule(after:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v15 - v12;
  (*(void (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  Scheduler.schedule(after:tolerance:_:)(a1, (uint64_t)v13, a2, a3, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t Scheduler.schedule(after:tolerance:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))((char *)&v18 - v15, 1, 1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 64))(a1, a2, v16, a3, a4, a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t partial apply for closure #1 in Publishers.Concatenate.Inner.cancel()()
{
  return partial apply for closure #2 in Publishers.Concatenate.Inner.cancel()();
}

uint64_t partial apply for closure #2 in Publishers.Concatenate.Inner.cancel()()
{
  uint64_t v0;

  return closure #1 in Publishers.Concatenate.Inner.cancel()(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t closure #1 in Publishers.Concatenate.Inner.cancel()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))((char *)&v13 - v7, 1, 1, v4);
  v9 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 152);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v9, v8, v5);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 168)));
  v10 = a2[3];
  v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 + 8) + 8))(v10);
}

void Publishers.Concatenate.Inner.SuffixSubscriber.receive(completion:)(uint64_t a1)
{
  Publishers.Concatenate.Inner.suffixReceive(completion:)(a1);
}

void Publishers.Concatenate.Inner.suffixReceive(completion:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  unsigned __int8 v11;

  v3 = *v1;
  v4 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 168));
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v8);
  v6 = v11;
  outlined destroy of SubscriptionStatus((uint64_t)&v8);
  if (v6)
  {
    os_unfair_lock_unlock(v4);
  }
  else
  {
    v8 = 1;
    v9 = 0u;
    v10 = 0u;
    v11 = 2;
    v7 = (uint64_t)v1 + *(_QWORD *)(*v1 + 136);
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v8, v7);
    swift_endAccess();
    v8 = 1;
    v9 = 0u;
    v10 = 0u;
    v11 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v8, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 120) + 56))(a1, *(_QWORD *)(v3 + 96));
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Concatenate<A, B>.Inner<A1>.PrefixSubscriber(uint64_t a1)
{
  Publishers.Concatenate.Inner.PrefixSubscriber.receive(completion:)(a1);
}

void Publishers.Concatenate.Inner.PrefixSubscriber.receive(completion:)(uint64_t a1)
{
  Publishers.Concatenate.Inner.prefixReceive(completion:)(a1);
}

void Publishers.Concatenate.Inner.prefixReceive(completion:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  _BYTE v47[24];
  uint64_t *v48;

  v2 = v1;
  v39 = a1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 104);
  v5 = *(_QWORD *)(*v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v38 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  *(_QWORD *)&v43 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v37 = (char *)&v31 - v9;
  v42 = *(_QWORD *)(v3 + 88);
  v41 = type metadata accessor for Optional();
  v44 = *(_QWORD *)(v41 - 8);
  v10 = MEMORY[0x1E0C80A78](v41);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v31 - v14;
  MEMORY[0x1E0C80A78](v13);
  v40 = (char *)&v31 - v16;
  v17 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(v3 + 168));
  os_unfair_lock_lock(v17);
  v18 = (uint64_t)v2 + *(_QWORD *)(*v2 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v18, (uint64_t)&v45);
  v19 = v47[16];
  outlined destroy of SubscriptionStatus((uint64_t)&v45);
  if (v19)
  {
    os_unfair_lock_unlock(v17);
  }
  else
  {
    v36 = v12;
    v33 = v5;
    v32 = v4;
    v45 = 1;
    v46 = 0u;
    *(_OWORD *)v47 = 0u;
    v47[16] = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v45, v18);
    swift_endAccess();
    v20 = (uint64_t)v2 + *(_QWORD *)(*v2 + 152);
    swift_beginAccess();
    v21 = v44;
    v22 = v40;
    v23 = v41;
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
    v34(v40, v20, v41);
    v24 = v42;
    v35 = *(_QWORD *)(v42 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v15, 1, 1, v42);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 40))(v20, v15, v23);
    swift_endAccess();
    os_unfair_lock_unlock(v17);
    v25 = v37;
    v26 = v39;
    v27 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v37, v39, v38);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v25, 1, AssociatedTypeWitness) == 1)
    {
      v28 = v36;
      v34(v36, (uint64_t)v22, v23);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v28, 1, v24) != 1)
      {
        swift_retain();
        v48 = v2;
        v30 = *(_QWORD *)(v3 + 96);
        v45 = v33;
        *(_QWORD *)&v46 = v24;
        *((_QWORD *)&v46 + 1) = v30;
        *(_QWORD *)v47 = v32;
        v43 = *(_OWORD *)(v3 + 112);
        *(_OWORD *)&v47[8] = v43;
        type metadata accessor for Publishers.Concatenate.Inner.SuffixSubscriber();
      }
      v29 = *(void (**)(char *, uint64_t))(v44 + 8);
      v29(v22, v23);
      v29(v28, v23);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 120) + 56))(v26, *(_QWORD *)(v3 + 96));
      (*(void (**)(char *, uint64_t))(v44 + 8))(v22, v23);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v25, v27);
    }
  }
}

uint64_t getEnumTagSinglePayload for Publishers.Map(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B56DAC8 + 4 * byte_18B5FC628[v10]))();
  }
}

uint64_t getEnumTagSinglePayload for Publishers.ReceiveOn(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v8)
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = *(_DWORD *)(v9 + 84);
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v13 = *(_DWORD *)(v12 + 84);
  v14 = v13 - 1;
  if (!v13)
    v14 = 0;
  if (v14 <= v11)
    v14 = v11;
  if (v13)
    v15 = *(_QWORD *)(v12 + 64);
  else
    v15 = *(_QWORD *)(v12 + 64) + 1;
  if (!a2)
    return 0;
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = *(_QWORD *)(v7 + 64) + v16;
  v18 = *(_QWORD *)(v9 + 64);
  v19 = *(unsigned __int8 *)(v12 + 80);
  if (a2 <= v14)
    goto LABEL_30;
  v20 = v15 + ((v18 + v19 + (v17 & ~v16)) & ~v19);
  v21 = 8 * v20;
  if (v20 > 3)
    goto LABEL_14;
  v23 = ((a2 - v14 + ~(-1 << v21)) >> v21) + 1;
  if (HIWORD(v23))
  {
    v22 = *(_DWORD *)(a1 + v20);
    if (!v22)
      goto LABEL_30;
    goto LABEL_21;
  }
  if (v23 > 0xFF)
  {
    v22 = *(unsigned __int16 *)(a1 + v20);
    if (!*(_WORD *)(a1 + v20))
      goto LABEL_30;
    goto LABEL_21;
  }
  if (v23 >= 2)
  {
LABEL_14:
    v22 = *(unsigned __int8 *)(a1 + v20);
    if (!*(_BYTE *)(a1 + v20))
      goto LABEL_30;
LABEL_21:
    v24 = (v22 - 1) << v21;
    if (v20 > 3)
      v24 = 0;
    if ((_DWORD)v20)
    {
      if (v20 <= 3)
        v25 = v20;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    return v14 + v24 + 1;
  }
LABEL_30:
  if (!v14)
    return 0;
  if ((_DWORD)v8 == v14)
  {
    v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v27 = a1;
    v28 = v8;
    v29 = v6;
    return v26(v27, v28, v29);
  }
  v27 = (v17 + a1) & ~v16;
  if ((_DWORD)v10 == v14)
  {
    v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v28 = v10;
    v29 = v5;
    return v26(v27, v28, v29);
  }
  v30 = (*(uint64_t (**)(uint64_t))(v12 + 48))((v27 + v18 + v19) & ~v19);
  if (v30 >= 2)
    return v30 - 1;
  else
    return 0;
}

uint64_t getEnumTagSinglePayload for Publishers.Sequence(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18B56DE34 + 4 * byte_18B5FCD18[(v7 - 1)]))();
}

void type metadata accessor for Publishers.Concatenate.Inner.SuffixSubscriber()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t getEnumTagSinglePayload for Publishers.SwitchToLatest(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18B56DF40 + 4 * byte_18B5FAAC8[(v7 - 1)]))();
}

void Publishers.Concatenate.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v1);
  type metadata accessor for Publishers.Concatenate.Inner();
}

void sub_18B56E040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 16))(v8, *(_QWORD *)(v9 - 168), v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 16))(v0, *(_QWORD *)(v9 - 144) + *(int *)(v6 + 52), v3);
  v10 = swift_allocObject();
  Publishers.Concatenate.Inner.init(_:suffix:)(v8, v0);
  swift_retain();
  *(_QWORD *)(v9 - 136) = v10;
  *(_QWORD *)(v9 - 128) = v5;
  *(_QWORD *)(v9 - 120) = v3;
  *(_QWORD *)(v9 - 112) = v2;
  v11 = *(_QWORD *)(v9 - 160);
  *(_QWORD *)(v9 - 104) = v4;
  *(_QWORD *)(v9 - 96) = v11;
  *(_QWORD *)(v9 - 88) = *(_QWORD *)(v9 - 152);
  type metadata accessor for Publishers.Concatenate.Inner.PrefixSubscriber();
}

uint64_t sub_18B56E0C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Concatenate<A, B>.Inner<A1>.PrefixSubscriber, a1);
  Publisher.subscribe<A>(_:)(v3 - 136, v2, a1, v1, v5);
  return swift_release_n();
}

void Publishers.Sequence.receive<A>(subscriber:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[18];

  v14[3] = a1;
  v7 = a2[3];
  v8 = a2[5];
  v9 = type metadata accessor for Subscribers.Completion(0, v7, v8, a4);
  v14[1] = *(_QWORD *)(v9 - 8);
  v14[2] = v9;
  MEMORY[0x1E0C80A78](v9);
  v14[0] = (char *)v14 - v10;
  v11 = a2[4];
  v12 = a2[2];
  swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v13);
  v14[9] = v12;
  v14[10] = v7;
  v14[5] = a3;
  v14[11] = a3;
  v14[12] = v12;
  v14[13] = v7;
  v14[14] = v11;
  v14[15] = v8;
  v14[16] = a4;
  v14[17] = v11;
  type metadata accessor for Publishers.Sequence.Inner();
}

uint64_t sub_18B56E224(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_allocObject();
  v10 = specialized Publishers.Sequence.Inner.init(downstream:sequence:)(v2, *(_QWORD *)(v8 - 192));
  v11 = v10 + *(_QWORD *)(*(_QWORD *)v10 + 176);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v11, v6);
  LODWORD(v11) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v3, 1, v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v6);
  if ((_DWORD)v11 == 1)
  {
    v12 = *(_QWORD *)(v8 - 184);
    if (one-time initialization token for singleton != -1)
      swift_once();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v1 + 40))(&static Subscriptions._EmptySubscription.singleton, v12, v1);
    v13 = *(_QWORD *)(v8 - 224);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v13, 1, 1, v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 56))(v13, v12, v1);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v8 - 216) + 8))(v13, *(_QWORD *)(v8 - 208));
    Publishers.Sequence.Inner.cancel()();
    return swift_release();
  }
  else
  {
    *(_QWORD *)(v8 - 128) = a1;
    *(_QWORD *)(v8 - 120) = &protocol witness table for Publishers.Sequence<A, B>.Inner<A1, B1, C1>;
    *(_QWORD *)(v8 - 152) = v10;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 40))(v8 - 152, *(_QWORD *)(v8 - 184), v1);
    return __swift_destroy_boxed_opaque_existential_1(v8 - 152);
  }
}

uint64_t Publishers.SetFailureType.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 64) + 40))(a1, *(_QWORD *)(a2 + 32));
}

void type metadata accessor for Publishers.Sequence.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t specialized Publishers.Sequence.Inner.init(downstream:sequence:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;

  v3 = v2;
  v38 = a2;
  v44 = a1;
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 96);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v45 = (char *)&v33 - v9;
  v10 = v4[13];
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v8);
  v40 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v4[18];
  v43 = swift_getAssociatedTypeWitness();
  v41 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v39 = (char *)&v33 - v13;
  v14 = type metadata accessor for Optional();
  v36 = *(_QWORD *)(v14 - 8);
  v37 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v33 - v15;
  v17 = type metadata accessor for Optional();
  v34 = *(_QWORD *)(v17 - 8);
  v35 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v33 - v18;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v20(v3 + v4[19], 1, 1, v10);
  v21 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 160);
  v22 = *(_QWORD *)(v5 - 8);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v33(v21, 1, 1, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v3 + *(_QWORD *)(*(_QWORD *)v3 + 176), 1, 1, AssociatedTypeWitness);
  *(_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 184)) = 0;
  *(_BYTE *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 192)) = 0;
  v23 = *(_QWORD *)(*(_QWORD *)v3 + 200);
  v24 = (_DWORD *)swift_slowAlloc();
  *v24 = 0;
  *(_QWORD *)(v3 + v23) = v24;
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v26 = v38;
  v25(v19, v38, v10);
  v20((uint64_t)v19, 0, 1, v10);
  v27 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 152);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 40))(v27, v19, v35);
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v16, v44, v5);
  v33((uint64_t)v16, 0, 1, v5);
  v28 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 160);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v36 + 40))(v28, v16, v37);
  swift_endAccess();
  v25(v40, v26, v10);
  v29 = v39;
  dispatch thunk of Sequence.makeIterator()();
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v3 + *(_QWORD *)(*(_QWORD *)v3 + 168), v29, v43);
  swift_beginAccess();
  swift_getAssociatedConformanceWitness();
  v30 = v45;
  dispatch thunk of IteratorProtocol.next()();
  swift_endAccess();
  v31 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 176);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 40))(v31, v30, v47);
  swift_endAccess();
  return v3;
}

void storeEnumTagSinglePayload for Publishers.SetFailureType.Inner(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_18B56E8B4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18B56E8BC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B56E8C4);
}

void sub_18B56E8E0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_18B56E8E8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_18B56E8F0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x18B56E8F8);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t initializeWithCopy for Publishers.SetFailureType.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *initializeWithCopy for PublishedSubscriber(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_weakCopyInit();
  return a1;
}

char *Publishers.Concatenate.Inner.init(_:suffix:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _DWORD *v15;
  char *v16;
  uint64_t v18;

  v18 = a2;
  v4 = *(_QWORD *)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 88);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v18 - v8;
  v10 = &v2[*(_QWORD *)(v4 + 136)];
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_QWORD *)v10 + 4) = 0;
  v10[40] = 2;
  v11 = &v2[*(_QWORD *)(*(_QWORD *)v2 + 144)];
  *((_QWORD *)v11 + 4) = 0;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v11[40] = 2;
  v12 = *(_QWORD *)(v5 - 8);
  v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v13(&v2[*(_QWORD *)(*(_QWORD *)v2 + 152)], 1, 1, v5);
  *(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 + 160)] = 0;
  v14 = *(_QWORD *)(*(_QWORD *)v2 + 168);
  v15 = (_DWORD *)swift_slowAlloc();
  *v15 = 0;
  *(_QWORD *)&v2[v14] = v15;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 96) - 8) + 32))(&v2[*(_QWORD *)(*(_QWORD *)v2 + 128)], a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v18, v5);
  v13(v9, 0, 1, v5);
  v16 = &v2[*(_QWORD *)(*(_QWORD *)v2 + 152)];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v16, v9, v6);
  swift_endAccess();
  return v2;
}

void storeEnumTagSinglePayload for Publishers.Map(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B56EC1C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B56EC94);
}

void sub_18B56EC24(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B56EC2CLL);
  JUMPOUT(0x18B56EC94);
}

void sub_18B56EC6C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B56EC94);
}

void sub_18B56EC74()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B56EC94);
}

uint64_t sub_18B56EC7C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B56EC94);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B56EC90);
    JUMPOUT(0x18B56EC88);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void type metadata accessor for Publishers.Concatenate.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void type metadata accessor for Publishers.Concatenate.Inner.PrefixSubscriber()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Concatenate<A, B>.Inner<A1>.PrefixSubscriber(_QWORD *a1)
{
  return Publishers.Concatenate.Inner.PrefixSubscriber.receive(subscription:)(a1);
}

uint64_t Publishers.Concatenate.Inner.PrefixSubscriber.receive(subscription:)(_QWORD *a1)
{
  return Publishers.Concatenate.Inner.prefixReceive(subscription:)(a1);
}

uint64_t Publishers.Concatenate.Inner.prefixReceive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void (*v11)(uint64_t **, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  int8x16_t v14;
  int8x16_t v15;
  char v16;

  v3 = *v1;
  v4 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 168));
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (v6 = vorrq_s8(v14, v15),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.Concatenate<A, B>.Inner<A1>;
    v13 = v1;
    v10 = *(_QWORD *)(v3 + 120);
    v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    v12 = *(_QWORD *)(v3 + 96);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    v7 = a1[3];
    v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
  }
}

uint64_t PublishedSubscriber.receive(subscription:)(_QWORD *a1)
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    PublishedSubject.send(subscription:)(a1);
    return swift_release();
  }
  return result;
}

uint64_t PublishedSubject.send(subscription:)(_QWORD *a1)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12[2];

  v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
  v4 = *(_QWORD *)(*v1 + 112);
  v5 = *(_QWORD **)((char *)v1 + v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)((char *)v1 + v4) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    *(_QWORD *)((char *)v1 + v4) = v5;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    *(_QWORD *)((char *)v1 + v4) = v5;
  }
  v5[2] = v8 + 1;
  outlined init with take of Subscription(v12, (uint64_t)&v5[5 * v8 + 4]);
  os_unfair_lock_unlock(v3);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 24))(0x8000000000000000, v9, v10);
}

void storeEnumTagSinglePayload for Publishers.Sequence(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Concatenate<A, B>(uint64_t a1)
{
  Publishers.Concatenate.receive<A>(subscriber:)(a1);
}

void storeEnumTagSinglePayload for Publishers.ReceiveOn(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v8 + 84) <= *(_DWORD *)(v7 + 84))
    v9 = *(_DWORD *)(v7 + 84);
  else
    v9 = *(_DWORD *)(v8 + 84);
  v10 = 0u;
  v11 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v12 = *(_DWORD *)(v11 + 84);
  v13 = v12 - 1;
  if (!v12)
    v13 = 0;
  if (v13 <= v9)
    v14 = v9;
  else
    v14 = v13;
  v15 = *(unsigned __int8 *)(v8 + 80);
  v18 = *(unsigned __int8 *)(v11 + 80);
  if (v12)
    v19 = *(_QWORD *)(v11 + 64);
  else
    v19 = *(_QWORD *)(v11 + 64) + 1;
  v17 = *(_QWORD *)(v8 + 64);
  v16 = *(_QWORD *)(v7 + 64) + v15;
  v20 = ((v17 + v18 + (v16 & ~(_DWORD)v15)) & ~(_DWORD)v18) + v19;
  if (a3 > v14)
  {
    if (v20 > 3)
    {
      v10 = 1u;
      if (v14 >= a2)
LABEL_28:
        __asm { BR              X0 }
LABEL_21:
      v22 = ~v14 + a2;
      if (v20 < 4)
      {
        if (v20)
        {
          v23 = v22 & ~(-1 << (8 * v20));
          bzero(a1, ((v17 + v18 + (v16 & ~v15)) & ~v18) + v19);
          if (v20 == 3)
          {
            *(_WORD *)a1 = v23;
            a1[2] = BYTE2(v23);
          }
          else if (v20 == 2)
          {
            *(_WORD *)a1 = v23;
          }
          else
          {
            *a1 = v23;
          }
        }
      }
      else
      {
        bzero(a1, ((v17 + v18 + (v16 & ~v15)) & ~v18) + v19);
        *(_DWORD *)a1 = v22;
      }
      __asm { BR              X10 }
    }
    v21 = ((a3 - v14 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
    if (HIWORD(v21))
    {
      v10 = 4u;
      if (v14 >= a2)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v21 >= 0x100)
      v10 = 2;
    else
      v10 = v21 > 1;
  }
  if (v14 >= a2)
    goto LABEL_28;
  goto LABEL_21;
}

void sub_18B56F434()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 + v1) = v0;
}

void sub_18B56F43C()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v2 + v1) = v0;
}

void sub_18B56F494()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_18B56F4A4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_18B56F4AC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Concatenate<A, B>.Inner<A1>(Combine::Subscribers::Demand a1)
{
  Publishers.Concatenate.Inner.request(_:)(a1);
}

Swift::Void __swiftcall Publishers.Concatenate.Inner.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t *v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12[2];
  char v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v3 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 168));
  os_unfair_lock_lock(v3);
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 160);
  v6 = *(uint64_t *)((char *)v1 + v5);
  v7 = 0x8000000000000000;
  if (v6 != 0x8000000000000000)
  {
    if (a1.rawValue != 0x8000000000000000)
    {
      if (((v6 | a1.rawValue) & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_15;
      }
      v7 = v6 + a1.rawValue;
      if (!__OFADD__(v6, a1.rawValue))
      {
        if ((v7 & 0x8000000000000000) == 0)
          goto LABEL_8;
LABEL_15:
        __break(1u);
        return;
      }
      v7 = 0x8000000000000000;
    }
LABEL_8:
    *(uint64_t *)((char *)v1 + v5) = v7;
    v4 = *v1;
  }
  v8 = (uint64_t)v1 + *(_QWORD *)(v4 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v8, (uint64_t)v12);
  if (v13
    && (outlined destroy of SubscriptionStatus((uint64_t)v12),
        v9 = (uint64_t)v1 + *(_QWORD *)(*v1 + 144),
        swift_beginAccess(),
        outlined init with copy of SubscriptionStatus(v9, (uint64_t)v12),
        v13))
  {
    outlined destroy of SubscriptionStatus((uint64_t)v12);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v12, (uint64_t)v14);
    os_unfair_lock_unlock(v3);
    v10 = v15;
    v11 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    (*(void (**)(Swift::UInt, uint64_t, uint64_t))(v11 + 24))(a1.rawValue, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
}

void storeEnumTagSinglePayload for Publishers.Catch(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B56F71C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B56F794);
}

void sub_18B56F724(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B56F72CLL);
  JUMPOUT(0x18B56F794);
}

void sub_18B56F76C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B56F794);
}

void sub_18B56F774()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B56F794);
}

uint64_t sub_18B56F77C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B56F794);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B56F790);
    JUMPOUT(0x18B56F788);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Concatenate<A, B>.Inner<A1>.SuffixSubscriber(uint64_t a1)
{
  Publishers.Concatenate.Inner.SuffixSubscriber.receive(completion:)(a1);
}

void storeEnumTagSinglePayload for Publishers.SwitchToLatest(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Sequence<A, B>.Inner<A1, B1, C1>()
{
  Publishers.Sequence.Inner.cancel()();
}

void Publishers.Sequence.Inner.cancel()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 96);
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v14 - v5;
  v7 = *(_QWORD *)(v1 + 104);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - v10;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(_QWORD *)(v1 + 200)));
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v11, 1, 1, v7);
  v12 = (uint64_t)v0 + *(_QWORD *)(*v0 + 152);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(v12, v11, v8);
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v6, 1, 1, v2);
  v13 = (uint64_t)v0 + *(_QWORD *)(*v0 + 160);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v13, v6, v3);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(_QWORD *)(*v0 + 200)));
}

uint64_t type metadata completion function for Publishers.MeasureInterval()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Multicast()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t __isPlatformVersionAtLeast(uint64_t a1, int a2, int a3, int a4)
{
  BOOL v8;

  if (qword_1ECED0E78 == -1)
  {
    if (qword_1ECED0E80)
      return _availability_version_check();
  }
  else
  {
    dispatch_once_f(&qword_1ECED0E78, 0, (dispatch_function_t)initializeAvailabilityCheck);
    if (qword_1ECED0E80)
      return _availability_version_check();
  }
  if (qword_1ECED0E70 == -1)
  {
    v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_1ECED0E70, 0, (dispatch_function_t)compatibilityInitializeAvailabilityCheck);
    v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2)
      return 1;
  }
  if (v8)
    return 0;
  if (dword_1ECED0E64 > a3)
    return 1;
  return dword_1ECED0E64 >= a3 && dword_1ECED0E68 >= a4;
}

uint64_t type metadata completion function for Publishers.SwitchToLatest()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.TryMap.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>(uint64_t a1)
{
  Publishers.SwitchToLatest.Outer.request(_:)(a1);
}

void Publishers.SwitchToLatest.Outer.request(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_4:
  v3 = *(_QWORD *)(*v1 + 168);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v3));
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 216);
  v6 = *(uint64_t *)((char *)v1 + v5);
  if (v6 == 0x8000000000000000)
    goto LABEL_12;
  v7 = 0x8000000000000000;
  if (a1 == 0x8000000000000000)
    goto LABEL_11;
  if ((v6 | a1) < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v7 = v6 + a1;
  if (!__OFADD__(v6, a1))
  {
    if ((v7 & 0x8000000000000000) == 0)
      goto LABEL_11;
LABEL_19:
    __break(1u);
    return;
  }
  v7 = 0x8000000000000000;
LABEL_11:
  *(uint64_t *)((char *)v1 + v5) = v7;
  v4 = *v1;
LABEL_12:
  v8 = (uint64_t)v1 + *(_QWORD *)(v4 + 144);
  swift_beginAccess();
  outlined init with copy of Subscription?(v8, (uint64_t)&v11);
  if (v12)
  {
    outlined init with take of Subscription(&v11, (uint64_t)v13);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v3));
    v9 = v14;
    v10 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(a1, v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    outlined destroy of Subscription?((uint64_t)&v11);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v3));
  }
}

void Publisher.timeout<A>(_:scheduler:options:customError:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v9 = v8;
  v36 = a7;
  v37 = a4;
  v38 = a5;
  v33 = a2;
  v34 = a3;
  v32 = a1;
  v35 = a8;
  swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for Optional();
  v30 = *(_QWORD *)(v11 - 8);
  v31 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v29 - v13;
  v15 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v22 = (char *)&v29 - v21;
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = v9;
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v25 + 16))(v24, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v32, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v33, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v14, v34, v31);
  Publishers.Timeout.init(upstream:interval:scheduler:options:customError:)((uint64_t)v24, v28, v35);
}

uint64_t sub_18B570224()
{
  uint64_t v0;

  return outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v0);
}

uint64_t initializeWithCopy for Publishers.Timeout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  int v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v11 + a1) & ~v11;
  v13 = (v7 + v11 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, v13, AssociatedTypeWitness);
  v14 = *(_QWORD *)(v8 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = *(_QWORD *)(v10 + 64) + v15;
  v17 = (v16 + v12) & ~v15;
  v18 = (v16 + v13) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17, v18, v8);
  v19 = *(_QWORD *)(v14 + 64);
  v20 = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (void *)((v19 + v22 + v17) & ~v22);
  v24 = (const void *)((v19 + v22 + v18) & ~v22);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v24, 1, v20))
  {
    v25 = *(_DWORD *)(v21 + 84);
    v26 = *(_QWORD *)(v21 + 64);
    if (v25)
      v27 = *(_QWORD *)(v21 + 64);
    else
      v27 = v26 + 1;
    memcpy(v23, v24, v27);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v23, v24, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v23, 0, 1, v20);
    v25 = *(_DWORD *)(v21 + 84);
    v26 = *(_QWORD *)(v21 + 64);
  }
  if (v25)
    v28 = v26;
  else
    v28 = v26 + 1;
  v29 = ((unint64_t)v23 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = ((unint64_t)v24 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v30 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v29 = *(_OWORD *)v30;
  }
  else
  {
    v31 = *(_QWORD *)(v30 + 8);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *(_QWORD *)(v29 + 8) = v31;
    swift_retain();
  }
  return a1;
}

void Publishers.Timeout.init(upstream:interval:scheduler:options:customError:)(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.Timeout();
}

uint64_t sub_18B5704D8(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v7 = v1 + a1[13];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v7, v5, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v1 + a1[14], v4, v3);
  v9 = v1 + a1[15];
  swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v2, v10);
  v12 = (_QWORD *)(v1 + a1[16]);
  *v12 = v13;
  v12[1] = v14;
  return result;
}

void type metadata accessor for Publishers.Timeout()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.Timeout.receive<A>(subscriber:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v19 = a4;
  v22 = a1;
  v6 = a2[5];
  v7 = a2[3];
  swift_getAssociatedTypeWitness();
  v23 = type metadata accessor for Optional();
  v21 = *(_QWORD *)(v23 - 8);
  v8 = MEMORY[0x1E0C80A78](v23);
  v20 = (char *)&v14 - v9;
  v18 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v8);
  v17 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  MEMORY[0x1E0C80A78](v12);
  v13 = a2[2];
  v15 = a2[4];
  v16 = v13;
  v24 = v13;
  v25 = v7;
  v26 = a3;
  v27 = v15;
  v28 = v6;
  v29 = v19;
  type metadata accessor for Publishers.Timeout.Inner();
}

uint64_t sub_18B5707B4(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v3, *(_QWORD *)(v10 - 144), v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v6, v1 + v2[13], v8);
  v12 = *(_QWORD *)(v10 - 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 176) + 16))(v12, v1 + v2[14], v4);
  v13 = *(_QWORD *)(v10 - 160);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v10 - 152) + 16))(v13, v1 + v2[15], *(_QWORD *)(v10 - 136));
  v14 = (uint64_t *)(v1 + v2[16]);
  v15 = *v14;
  v16 = v14[1];
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(*v14);
  swift_allocObject();
  *(_QWORD *)(v10 - 128) = Publishers.Timeout.Inner.init(_:interval:scheduler:options:customError:)(v3, v6, v12, v13, v15, v16);
  v17 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Timeout<A, B>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v10 - 128, *(_QWORD *)(v10 - 192), a1, *(_QWORD *)(v10 - 200), v17);
  return swift_release();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.IgnoreOutput<A>(uint64_t a1)
{
  Publishers.IgnoreOutput.receive<A>(subscriber:)(a1);
}

_QWORD *Publishers.Timeout.Inner.init(_:interval:scheduler:options:customError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v12;
  _DWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;

  v12 = *v6;
  v13 = (_DWORD *)swift_slowAlloc();
  *v13 = 0;
  v6[2] = v13;
  v14 = (_QWORD *)swift_slowAlloc();
  *v14 = 0;
  v6[3] = v14;
  *((_BYTE *)v6 + *(_QWORD *)(*v6 + 192)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 + 200)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)(*v6 + 208)) = 0;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v12 + 96) - 8) + 32))((char *)v6 + *(_QWORD *)(*v6 + 144), a1);
  v15 = (char *)v6 + *(_QWORD *)(*v6 + 152);
  v16 = *(_QWORD *)(v12 + 88);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v15, a2, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))((char *)v6 + *(_QWORD *)(*v6 + 160), a3, v16);
  v18 = (char *)v6 + *(_QWORD *)(*v6 + 168);
  swift_getAssociatedTypeWitness();
  v19 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a4, v19);
  v20 = (_QWORD *)((char *)v6 + *(_QWORD *)(*v6 + 176));
  *v20 = a5;
  v20[1] = a6;
  v21 = (char *)v6 + *(_QWORD *)(*v6 + 184);
  *(_OWORD *)v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  *((_QWORD *)v21 + 4) = 0;
  v21[40] = 2;
  return v6;
}

void type metadata accessor for Publishers.Timeout.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.FlatMap.Outer.__deallocating_deinit()
{
  Publishers.FlatMap.Outer.deinit();
  return swift_deallocClassInstance();
}

char *Publishers.FlatMap.Outer.deinit()
{
  char *v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  MEMORY[0x18D77ADB0](*((_QWORD *)v0 + 2), -1, -1);
  MEMORY[0x18D77ADB0](*((_QWORD *)v0 + 8), -1, -1);
  outlined destroy of Subscription?((uint64_t)(v0 + 24));
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 96) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 152)]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

void Publishers.IgnoreOutput.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.IgnoreOutput.Inner();
}

void sub_18B570C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&a9 - v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v9, v10);
  Publishers.IgnoreOutput.Inner.init(downstream:)(v11, v10, (uint64_t)v14);
}

uint64_t sub_18B570C64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.IgnoreOutput<A>.Inner<A1>, v3);
  Publisher.subscribe<A>(_:)(v4, v1, v3, v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v3);
}

void Publishers.IgnoreOutput.Inner.init(downstream:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for Publishers.IgnoreOutput.Inner();
}

void sub_18B570D14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;

  v2 = *(int *)(a1 + 52);
  if (one-time initialization token for lock != -1)
    swift_once();
  v3 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v4 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v3);
    *(_QWORD *)(v1 + v2) = v4;
  }
}

void type metadata accessor for Publishers.IgnoreOutput.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void destructiveInjectEnumTag for Publishers.TimeGroupingStrategy(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = ((v5 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (a2 > 1)
  {
    if (v8 <= v7)
      v9 = ((v5 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
         + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
    else
      v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    v10 = a2 - 2;
    if (v9 < 4)
    {
      v11 = v10 >> (8 * v9);
      v12 = v10 & ~(-1 << (8 * v9));
      a1[v9] = v11 + 2;
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
    else
    {
      a1[v9] = 2;
      bzero(a1, v9);
      *(_DWORD *)a1 = v10;
    }
  }
  else
  {
    if (v8 > v7)
      v7 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    a1[v7] = a2;
  }
}

uint64_t type metadata completion function for Result.Publisher()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Result();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Publishers.ReplaceError.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.ReplaceError.Inner.deinit);
}

uint64_t Publisher<>.values.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t type metadata completion function for Publishers.TryCatch.Inner.State()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for Publishers.IgnoreOutput.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(0);
}

uint64_t type metadata instantiation function for Publishers.Merge7()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata instantiation function for Publishers.Merge6()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Publishers.AllSatisfy.Inner()
{
  return swift_initClassMetadata2();
}

void protocol witness for Subscription.request(_:) in conformance Publishers.CollectByTime<A, B>.Inner<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Publishers.CollectByTime.Inner.request(_:)(a1, a2, a3, a4);
}

void Publishers.CollectByTime.Inner.request(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata3;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  __int128 v26[2];
  char v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 88);
  v8 = type metadata accessor for Publishers.TimeGroupingStrategy(0, v7, *(_QWORD *)(*v4 + 112), a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v26 - v10;
  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_25;
  }
LABEL_4:
  v12 = *(_QWORD *)(v6 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v4 + v12));
  v13 = (uint64_t)v4 + *(_QWORD *)(*v4 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v13, (uint64_t)v26);
  if (v27)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v26);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v4 + v12));
    return;
  }
  outlined init with take of Subscription(v26, (uint64_t)v28);
  v14 = *v4;
  v15 = *(_QWORD *)(*v4 + 192);
  v16 = 0x8000000000000000;
  if (a1 != 0x8000000000000000)
  {
    v17 = *(uint64_t *)((char *)v4 + v15);
    if (v17 == 0x8000000000000000)
    {
LABEL_15:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, (uint64_t)v4 + *(_QWORD *)(v14 + 136), v8);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      if (EnumCaseMultiPayload != 1)
      {
        TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(&v11[*(int *)(TupleTypeMetadata2 + 48)], AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v11, v7);
        v16 = 1;
        goto LABEL_21;
      }
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      v22 = *(_QWORD *)&v11[*(int *)(TupleTypeMetadata3 + 64)];
      v16 = a1 * v22;
      if ((unsigned __int128)(a1 * (__int128)v22) >> 64 != (a1 * v22) >> 63)
      {
        v16 = 0x8000000000000000;
LABEL_20:
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(&v11[*(int *)(TupleTypeMetadata3 + 48)], AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v11, v7);
        goto LABEL_21;
      }
      if ((v16 & 0x8000000000000000) == 0)
        goto LABEL_20;
LABEL_27:
      __break(1u);
      return;
    }
    if (((v17 | a1) & 0x8000000000000000) == 0)
    {
      v18 = v17 + a1;
      if (__OFADD__(v17, a1))
      {
        v18 = 0x8000000000000000;
LABEL_14:
        *(uint64_t *)((char *)v4 + v15) = v18;
        v14 = *v4;
        goto LABEL_15;
      }
      if ((v18 & 0x8000000000000000) == 0)
        goto LABEL_14;
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *(uint64_t *)((char *)v4 + v15) = 0x8000000000000000;
LABEL_21:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v4 + v12));
  v24 = v29;
  v25 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v25 + 24))(v16, v24, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

void Publishers.CollectByTime.receive<A>(subscriber:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v7);
  v5 = type metadata accessor for Publishers.TimeGroupingStrategy(0, v3, v2, v4);
  v6 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  type metadata accessor for Publishers.CollectByTime.Inner();
}

uint64_t sub_18B571568(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 16))(v6, *(_QWORD *)(v9 - 144), v4);
  v11 = *(_QWORD *)(v9 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v11 + *(int *)(v2 + 52), v1);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v9 - 168) + 16))(v3, v11 + *(int *)(v2 + 56), *(_QWORD *)(v9 - 152));
  swift_allocObject();
  *(_QWORD *)(v9 - 128) = Publishers.CollectByTime.Inner.init(downstream:strategy:options:)(v6, v5, v3);
  v12 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.CollectByTime<A, B>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v9 - 128, *(_QWORD *)(v9 - 176), a1, *(_QWORD *)(v9 - 184), v12);
  return swift_release();
}

uint64_t Publishers.CollectByTime.Inner.receive(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t TupleTypeMetadata3;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t (*)(), _QWORD *, uint64_t, uint64_t);
  void (*v47)(uint64_t, uint64_t);
  char *v48;
  void (*v49)(char *, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t AssociatedTypeWitness;
  __int128 v62[2];
  char v63;
  _BYTE v64[48];

  v2 = v1;
  v57 = a1;
  v3 = *v1;
  v4 = *(_QWORD *)(*(_QWORD *)(*v1 + 88) - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v3 + 112);
  v58 = v8;
  v60 = v7;
  v10 = type metadata accessor for Publishers.TimeGroupingStrategy(0, v8, v7, v9);
  v59 = *(char **)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v51 - v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v18 = (char *)&v51 - v17;
  v19 = *(_QWORD *)(v3 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v19));
  v20 = (uint64_t)v2 + *(_QWORD *)(*v2 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v20, (uint64_t)v62);
  if (!v63)
  {
    v54 = v13;
    v52 = v6;
    v56 = v4;
    outlined init with take of Subscription(v62, (uint64_t)v64);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v57, AssociatedTypeWitness);
    v22 = (uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 152));
    swift_beginAccess();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    v23 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v59 + 2);
    v55 = (uint64_t)v2 + *(_QWORD *)(*v2 + 136);
    v53 = v23;
    ((void (*)(char *))v23)(v15);
    v57 = v10;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v25 = v58;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v26 = swift_getAssociatedTypeWitness();
    v27 = v15;
    if (EnumCaseMultiPayload != 1)
    {
      v36 = &v15[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v19));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v36, v26);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v15, v25);
      return 1;
    }
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    v29 = &v15[*(int *)(TupleTypeMetadata3 + 48)];
    v30 = *(_QWORD *)&v27[*(int *)(TupleTypeMetadata3 + 64)];
    v31 = swift_bridgeObjectRetain();
    v32 = MEMORY[0x18D77A390](v31, AssociatedTypeWitness);
    result = swift_bridgeObjectRelease();
    v51 = v30;
    if (v32 < v30)
      goto LABEL_7;
    v37 = *(_QWORD *)(*v2 + 192);
    v38 = *(uint64_t *)((char *)v2 + v37);
    if (v38 != 0x8000000000000000)
    {
      if (v38 < 0)
      {
        __break(1u);
        goto LABEL_20;
      }
      if (!v38)
      {
LABEL_7:
        v33 = v29;
        v34 = v54;
        v35 = v57;
        v53(v54, v55, v57);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          v48 = &v34[*(int *)(swift_getTupleTypeMetadata2() + 48)];
          os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v19));
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
          v49 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8);
          v49(v48, v26);
          v50 = *(void (**)(char *, uint64_t))(v56 + 8);
          v50(v34, v25);
          v49(v33, v26);
          v50(v27, v25);
          return 1;
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v19));
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
        (*((void (**)(char *, uint64_t))v59 + 1))(v34, v35);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v33, v26);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v25);
        return 0;
      }
    }
    v59 = v27;
    v39 = *v22;
    swift_bridgeObjectRetain();
    *v22 = static Array._allocateUninitialized(_:)();
    result = swift_bridgeObjectRelease();
    v40 = *(uint64_t *)((char *)v2 + v37);
    v41 = v56;
    v42 = (uint64_t)v52;
    if (v40 == 0x8000000000000000)
    {
LABEL_17:
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v19));
      Publishers.TimeGroupingStrategy.scheduler.getter(v57, v42);
      v43 = (uint64_t)v2 + *(_QWORD *)(*v2 + 144);
      outlined init with copy of Subscription((uint64_t)v64, (uint64_t)v62);
      v44 = (_QWORD *)swift_allocObject();
      v44[2] = v2;
      v44[3] = v39;
      outlined init with take of Subscription(v62, (uint64_t)(v44 + 4));
      v44[9] = v51;
      v45 = v60;
      v46 = *(void (**)(uint64_t, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(v60 + 56);
      swift_retain();
      v46(v43, partial apply for closure #1 in Publishers.CollectByTime.Inner.receive(_:), v44, v25, v45);
      swift_release();
      v47 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v47(v42, v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v29, v26);
      v47((uint64_t)v59, v25);
      return 0;
    }
    if ((v40 & 0x8000000000000000) == 0)
    {
      if (v40)
      {
        *(uint64_t *)((char *)v2 + v37) = v40 - 1;
        goto LABEL_17;
      }
LABEL_21:
      __break(1u);
      return result;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  outlined destroy of SubscriptionStatus((uint64_t)v62);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v19));
  return 0;
}

void Publisher.collect<A>(_:options:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a1;
  v26 = a7;
  v27 = a5;
  v25 = a2;
  swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v23 - v12;
  v15 = type metadata accessor for Publishers.TimeGroupingStrategy(0, a4, a6, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)v23 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 16))(v21, v23[1], a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v24, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v25, v10);
  Publishers.CollectByTime.init(upstream:strategy:options:)((uint64_t)v21, a3, v26);
}

uint64_t initializeWithCopy for Publishers.TimeGroupingStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;

  v5 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v20 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ~v9;
  v11 = v6 + v9;
  v12 = *(_QWORD *)(v8 + 64);
  v13 = ((v6 + v9) & ~v9) + v12;
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v13)
    v14 = v13;
  else
    v14 = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v15 = *(unsigned __int8 *)(a2 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X11 }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, a2, v5);
  v17 = (v11 + a2) & v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))((v11 + a1) & v10, v17, AssociatedTypeWitness);
  if (v15 == 1)
  {
    *(_QWORD *)((v12 + 7 + ((v11 + a1) & v10)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v12 + 7 + v17) & 0xFFFFFFFFFFFFF8);
    v18 = 1;
  }
  else
  {
    v18 = 0;
  }
  *(_BYTE *)(a1 + v14) = v18;
  return a1;
}

void Publishers.CollectByTime.init(upstream:strategy:options:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.CollectByTime();
}

uint64_t sub_18B571FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = v8 + *(int *)(a1 + 52);
  v11 = type metadata accessor for Publishers.TimeGroupingStrategy(0, v6, v5, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, v7, v11);
  v12 = v8 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, v4, v13);
}

uint64_t type metadata accessor for Publishers.TimeGroupingStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.TimeGroupingStrategy);
}

void type metadata accessor for Publishers.CollectByTime()
{
  JUMPOUT(0x18D77AC60);
}

void type metadata accessor for Publishers.CollectByTime.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t **Publishers.CollectByTime.Inner.init(downstream:strategy:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v7 = *v3;
  v8 = (*v3)[19];
  swift_getAssociatedTypeWitness();
  *(uint64_t **)((char *)v3 + v8) = (uint64_t *)static Array._allocateUninitialized(_:)();
  v9 = (char *)v3 + (*v3)[20];
  *((_QWORD *)v9 + 4) = 0;
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[40] = 2;
  *((_BYTE *)v3 + (*v3)[21]) = 0;
  v10 = (*v3)[22];
  v11 = (uint64_t *)swift_slowAlloc();
  *(_DWORD *)v11 = 0;
  *(uint64_t **)((char *)v3 + v10) = v11;
  v12 = (char *)v3 + (*v3)[23];
  *((_QWORD *)v12 + 4) = 0;
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *(uint64_t **)((char *)v3 + (*v3)[24]) = 0;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7[12] - 8) + 32))((char *)v3 + (*v3)[16], a1);
  v13 = (char *)v3 + (*v3)[17];
  v15 = type metadata accessor for Publishers.TimeGroupingStrategy(0, v7[11], v7[14], v14);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, a2, v15);
  v16 = (char *)v3 + (*v3)[18];
  swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a3, v17);
  return v3;
}

uint64_t type metadata completion function for Zip2Inner()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for Publishers.MapKeyPath()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AbstractCombineLatest(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  unint64_t v7;

  v2 = swift_checkMetadataState();
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(a1 + 88);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for Subscribers.Completion(255, v4, AssociatedConformanceWitness, v6);
    v2 = type metadata accessor for Optional();
    if (v7 <= 0x3F)
      return swift_initClassMetadata2();
  }
  return v2;
}

uint64_t type metadata completion function for ObservableObjectPublisher.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata completion function for Result.Publisher.Inner()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

void Publishers.RemoveDuplicates.Inner.__deallocating_deinit()
{
  Publishers.RemoveDuplicates.Inner.deinit();
}

uint64_t sub_18B5724E8()
{
  return swift_deallocClassInstance();
}

void Publishers.RemoveDuplicates.Inner.deinit()
{
  FilterProducer.deinit();
}

uint64_t sub_18B572514(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 304);
  swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return a1;
}

void FilterProducer.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 152)), -1, -1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 112) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 136), *(_QWORD *)(v1 + 112));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 144), *(_QWORD *)(v1 + 80));
  type metadata accessor for FilterProducer.State();
}

uint64_t sub_18B57261C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  return v1;
}

uint64_t type metadata completion function for Publishers.MapError()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.MapKeyPath.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Zip<A, B>()
{
  Publishers.Zip.receive<A>(subscriber:)();
}

uint64_t Publisher.replaceError(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v18 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, v4, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, AssociatedTypeWitness);
  return a4(v15, v13, a2, a3);
}

uint64_t Publishers.ReplaceError.init(upstream:output:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t AssociatedTypeWitness;

  v10 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a6 + *(int *)(v10 + 36), a1, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a6, a2, AssociatedTypeWitness);
}

uint64_t type metadata accessor for Publishers.ReplaceError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.ReplaceError);
}

uint64_t Publishers.ReplaceError.init(upstream:output:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publishers.ReplaceError.init(upstream:output:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.ReplaceError, a5);
}

uint64_t type metadata completion function for Publishers.SwitchToLatest.Outer()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t Publishers.Drop.Inner.__deallocating_deinit()
{
  Publishers.Drop.Inner.deinit();
  return swift_deallocClassInstance();
}

uint64_t *Publishers.Drop.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 120)), -1, -1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112));
  outlined destroy of Subscription?((uint64_t)v0 + *(_QWORD *)(*v0 + 128));
  return v0;
}

void (*static Published.subscript.modify(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4))(uint64_t a1, char a2)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;

  v8 = malloc(0x88uLL);
  *a1 = v8;
  v8[11] = a3;
  v8[12] = a4;
  v8[5] = a2;
  v9 = *(_QWORD *)(*MEMORY[0x1E0DED210] + *a3 + 8);
  v8[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[14] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v8[15] = malloc(v11);
  v12 = malloc(v11);
  v8[16] = v12;
  static Published.subscript.getter(a2, a3, a4, v13, (uint64_t)v12);
  return static Published.subscript.modify;
}

uint64_t Publisher.sink(receiveCompletion:receiveValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = type metadata accessor for Subscribers.Sink(0, AssociatedTypeWitness, v13, AssociatedConformanceWitness);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_QWORD *)(v16 + 80) = 0;
  *(_BYTE *)(v16 + 88) = 2;
  swift_retain();
  swift_retain();
  v17 = (_DWORD *)swift_slowAlloc();
  *v17 = 0;
  *(_QWORD *)(v16 + 96) = v17;
  *(_QWORD *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = a2;
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  v20 = v16;
  v18 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Subscribers.Sink<A, B>, v15);
  Publisher.subscribe<A>(_:)((uint64_t)&v20, a5, v15, a6, v18);
  type metadata accessor for AnyCancellable();
  v20 = v16;
  return AnyCancellable.__allocating_init<A>(_:)((uint64_t)&v20, v15, (uint64_t)&protocol witness table for Subscribers.Sink<A, B>);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Throttle<A, B>()
{
  Publishers.Throttle.receive<A>(subscriber:)();
}

void Publishers.Throttle.receive<A>(subscriber:)()
{
  type metadata accessor for Publishers.Throttle.Inner();
}

void sub_18B572CCC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = v0 + v1[13];
  v4 = v0 + v1[14];
  v5 = *(unsigned __int8 *)(v0 + v1[15]);
  swift_allocObject();
  specialized Publishers.Throttle.Inner.init(_:interval:scheduler:latest:)(v2, v3, v4, v5);
}

uint64_t sub_18B572D0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a1;
  v2 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Throttle<A, B>.Inner<A1>, v1);
  Publisher.subscribe<A>(_:)((uint64_t)&v6, v5, v1, v4, v2);
  return swift_release();
}

void specialized Publishers.Throttle.Inner.init(_:interval:scheduler:latest:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[11];
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v17 = a4;
  v16[8] = a2;
  v16[9] = a3;
  v19 = a1;
  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 112);
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16[10] = AssociatedTypeWitness;
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v18 = (char *)v16 - v10;
  v16[7] = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v9);
  v16[6] = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedConformanceWitness();
  v12 = swift_getAssociatedTypeWitness();
  v16[2] = *(_QWORD *)(v12 - 8);
  v16[3] = v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = v5[12];
  v13 = v5[13];
  v15 = v5[15];
  v21 = v5[10];
  v22 = v7;
  v16[0] = v21;
  v16[1] = v13;
  v23 = v14;
  v24 = v13;
  v25 = v6;
  v26 = v15;
  type metadata accessor for Publishers.Throttle.Inner.State();
}

void sub_18B572ED0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  char *v12;
  uint64_t AssociatedTypeWitness;

  v9 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v8 - 224) = a1;
  *(_QWORD *)(v8 - 216) = v9;
  MEMORY[0x1E0C80A78](a1);
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  v1[2] = v10;
  v11 = (_QWORD *)swift_slowAlloc();
  *v11 = 0;
  v1[3] = v11;
  v12 = (char *)v1 + *(_QWORD *)(*v1 + 160);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v12, 1, 1, AssociatedTypeWitness);
  *((_BYTE *)v1 + *(_QWORD *)(*v1 + 176)) = 0;
  *((_BYTE *)v1 + *(_QWORD *)(*v1 + 184)) = 0;
  *(_QWORD *)(v8 - 136) = v5;
  *(_QWORD *)(v8 - 128) = v4;
  *(_QWORD *)(v8 - 120) = v6;
  *(_QWORD *)(v8 - 112) = v2;
  *(_QWORD *)(v8 - 104) = v3;
  *(_QWORD *)(v8 - 96) = v7;
  type metadata accessor for Publishers.Throttle.Inner.Scheduling();
}

void sub_18B572F9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v3 - 240) + 16))(v1, *(_QWORD *)(v3 - 192), *(_QWORD *)(v3 - 232));
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v3 - 200) + 16))(*(_QWORD *)(v3 - 208), *(_QWORD *)(v3 - 184), v0);
  Publishers.Throttle.Inner.Scheduling.init(interval:scheduler:latest:)(v1, v2);
}

uint64_t sub_18B573018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v3, *(_QWORD *)(v6 - 152), v4);
  v7 = *(_QWORD *)(v6 - 224);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 216) + 32))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144), v5, v7);
  *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152)) = 0;
  v8 = *(_QWORD *)(v6 - 160);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6 - 144) + 32))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 168), v8, *(_QWORD *)(v6 - 176));
  return v0;
}

void type metadata accessor for Publishers.Throttle.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.Throttle.Inner.Scheduling.init(interval:scheduler:latest:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
  type metadata accessor for Publishers.Throttle.Inner.Scheduling();
}

uint64_t sub_18B5731B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v2 + *(int *)(a1 + 68), v5, v1);
  *(_BYTE *)(v2 + *(int *)(a1 + 72)) = v6;
  return result;
}

void Publishers.CollectByCount.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.CollectByCount.Inner();
}

uint64_t sub_18B573278(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v4, v2);
  v11 = *(_QWORD *)(v1 + *(int *)(v3 + 36));
  swift_allocObject();
  *(_QWORD *)(v9 - 112) = Publishers.CollectByCount.Inner.init(downstream:count:)(v5, v11);
  v12 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.CollectByCount<A>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v9 - 112, v6, a1, v7, v12);
  return swift_release();
}

void Publishers.Debounce.receive<A>(subscriber:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v18 = a4;
  v21 = a1;
  v6 = a2[5];
  v7 = a2[3];
  swift_getAssociatedTypeWitness();
  v22 = type metadata accessor for Optional();
  v20 = *(_QWORD *)(v22 - 8);
  v8 = MEMORY[0x1E0C80A78](v22);
  v19 = (char *)&v14 - v9;
  v17 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v8);
  v16 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  MEMORY[0x1E0C80A78](v12);
  v13 = a2[2];
  v15 = a2[4];
  v23 = v13;
  v24 = v7;
  v25 = a3;
  v26 = v15;
  v27 = v6;
  v28 = v18;
  type metadata accessor for Publishers.Debounce.Inner();
}

void sub_18B5734C8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v0, *(_QWORD *)(v8 - 152), v7);
  v9 = *(_QWORD *)(v8 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v9 + v1[13], v3);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 184) + 16))(*(_QWORD *)(v8 - 192), v9 + v1[14], v2);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v8 - 160) + 16))(*(_QWORD *)(v8 - 168), v9 + v1[15], *(_QWORD *)(v8 - 144));
  swift_allocObject();
  Publishers.Debounce.Inner.init(_:dueTime:scheduler:options:)();
}

uint64_t sub_18B57355C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 - 128) = a1;
  v4 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Debounce<A, B>.Inner<A1>, v2);
  Publisher.subscribe<A>(_:)(v3 - 128, v1, v2, *(_QWORD *)(v3 - 200), v4);
  return swift_release();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Filter<A>(uint64_t a1)
{
  Publishers.Filter.receive<A>(subscriber:)(a1);
}

void Publishers.Debounce.Inner.init(_:dueTime:scheduler:options:)()
{
  _QWORD *v0;
  _DWORD *v1;
  _QWORD *v2;
  char *v3;

  v1 = (_DWORD *)swift_slowAlloc();
  *v1 = 0;
  v0[2] = v1;
  v2 = (_QWORD *)swift_slowAlloc();
  *v2 = 0;
  v0[3] = v2;
  v3 = (char *)v0 + *(_QWORD *)(*v0 + 176);
  *((_QWORD *)v3 + 4) = 0;
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  v3[40] = 2;
  type metadata accessor for Publishers.Debounce.Inner.CancellerState();
}

uint64_t sub_18B573678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  *(_QWORD *)(v1 + v6) = Dictionary.init()();
  v7 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 192);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v7, 1, 1, AssociatedTypeWitness);
  *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 200)) = 0;
  *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 208)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 144), v5);
  v9 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 152);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v10 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v3, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 160), v2, v4);
  v11 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 168);
  swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, v0, v12);
  return v1;
}

void type metadata accessor for Publishers.Debounce.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge<A, B>()
{
  Publishers.Merge.receive<A>(subscriber:)();
}

void type metadata accessor for Publishers.CollectByCount.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t *Publishers.CollectByCount.Inner.init(downstream:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 128);
  swift_getAssociatedTypeWitness();
  *(uint64_t *)((char *)v2 + v6) = static Array._allocateUninitialized(_:)();
  v7 = (uint64_t)v2 + *(_QWORD *)(*v2 + 136);
  *(_QWORD *)(v7 + 32) = 0;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 144)) = 0;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 152)) = 0;
  v8 = *(_QWORD *)(*v2 + 160);
  v9 = (_DWORD *)swift_slowAlloc();
  *v9 = 0;
  *(uint64_t *)((char *)v2 + v8) = (uint64_t)v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 88) - 8) + 32))((uint64_t)v2 + *(_QWORD *)(*v2 + 112), a1);
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 120)) = a2;
  return v2;
}

void AbstractZip.Side.receive(subscription:)(_QWORD *a1)
{
  unint64_t *v1;

  AbstractZip.receive(subscription:index:)(a1, *v1);
}

void AbstractZip.receive(subscription:index:)(_QWORD *a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;

  v3 = v2;
  v6 = (_QWORD *)*v2;
  v7 = *(_QWORD *)(*v2 + 104);
  v8 = *(_QWORD *)(*v2 + 88);
  v33 = *(_QWORD *)(*v2 + 96);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = type metadata accessor for Subscribers.Completion(255, v8, AssociatedConformanceWitness, v10);
  v12 = type metadata accessor for Optional();
  v13 = MEMORY[0x1E0C80A78](v12);
  v14 = *(_QWORD **)(v11 - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)v29 - v17;
  if (*(uint64_t *)((char *)v3 + v6[21]) <= (uint64_t)a2)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v30 = v7;
  v31 = v16;
  v32 = v15;
  v7 = v6[22];
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v3 + v7));
  v19 = *v3;
  if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 + 136)) & 1) != 0)
  {
LABEL_6:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v3 + v7));
    v22 = a1[3];
    v23 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v22);
    (*(void (**)(uint64_t))(*(_QWORD *)(v23 + 8) + 8))(v22);
    return;
  }
  v29[2] = v12;
  v12 = (uint64_t)v3 + *(_QWORD *)(v19 + 128);
  swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_19;
  v20 = *(_QWORD *)v12;
  if (*(_QWORD *)(*(_QWORD *)v12 + 16) <= a2)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
    *(_QWORD *)v12 = v14;
    goto LABEL_9;
  }
  v29[1] = v18;
  outlined init with copy of Subscription?(v20 + 40 * a2 + 32, (uint64_t)v34);
  v21 = v35;
  outlined destroy of Subscription?((uint64_t)v34);
  if (v21)
    goto LABEL_6;
  v29[0] = v14;
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v34);
  swift_beginAccess();
  v14 = *(_QWORD **)v12;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v12 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_21;
LABEL_9:
  if (v14[2] <= a2)
  {
    __break(1u);
  }
  else
  {
    outlined assign with take of Subscription?((uint64_t)v34, (uint64_t)&v14[5 * a2 + 4]);
    v25 = *(_QWORD *)v12;
    swift_endAccess();
    v26 = *(_QWORD *)(v25 + 16);
    if (v26)
    {
      v27 = v25 + 32;
      swift_bridgeObjectRetain();
      while (1)
      {
        outlined init with copy of Subscription?(v27, (uint64_t)v34);
        v28 = v35;
        outlined destroy of Subscription?((uint64_t)v34);
        if (!v28)
          break;
        v27 += 40;
        if (!--v26)
        {
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
      }
      swift_bridgeObjectRelease();
      LOBYTE(v26) = 1;
    }
LABEL_16:
    *((_BYTE *)v3 + *(_QWORD *)(*v3 + 192)) = v26 ^ 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v3 + v7));
    if ((v26 & 1) == 0)
    {
      os_unfair_recursive_lock_lock_with_options();
      v34[0] = v6[10];
      v34[1] = v8;
      v34[2] = v33;
      v35 = v30;
      type metadata accessor for AbstractZip();
    }
  }
}

void type metadata accessor for AbstractZip()
{
  JUMPOUT(0x18D77AC60);
}

void AbstractZip.resolvePendingDemandAndUnlock()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v1 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
  swift_beginAccess();
  v2 = *v1;
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  v4 = *(_QWORD *)(v0 + v3);
  *(_QWORD *)(v0 + v3) = 0;
  v5 = *(os_unfair_lock_s **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 176));
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v5);
  if (v4 == 0x8000000000000000)
    goto LABEL_4;
  if ((v4 & 0x8000000000000000) == 0)
  {
    if (!v4)
    {
LABEL_10:
      swift_bridgeObjectRelease();
      return;
    }
LABEL_4:
    v6 = *(_QWORD *)(v2 + 16);
    if (v6)
    {
      v7 = v2 + 32;
      do
      {
        outlined init with copy of Subscription?(v7, (uint64_t)v10);
        v9 = v11;
        if (v11)
        {
          v8 = v12;
          __swift_project_boxed_opaque_existential_1(v10, v11);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v4, v9, v8);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
        }
        else
        {
          outlined destroy of Subscription?((uint64_t)v10);
        }
        v7 += 40;
        --v6;
      }
      while (v6);
    }
    goto LABEL_10;
  }
  __break(1u);
}

void protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Drop<A>.Inner<A1>(_QWORD *a1)
{
  Publishers.Drop.Inner.receive(subscription:)(a1);
}

void Publishers.Drop.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;

  v3 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120));
  os_unfair_lock_lock(v3);
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 128);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v13);
  v5 = v14;
  outlined destroy of Subscription?((uint64_t)v13);
  if (v5)
  {
    os_unfair_lock_unlock(v3);
    v7 = a1[3];
    v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
    return;
  }
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v13);
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v13, v4);
  swift_endAccess();
  v8 = *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 144));
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v9 = *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 136));
  if (v9 == 0x8000000000000000)
  {
LABEL_8:
    os_unfair_lock_unlock(v3);
    v10 = 0x8000000000000000;
LABEL_9:
    v11 = a1[3];
    v12 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v11);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 24))(v10, v11, v12);
    return;
  }
  if (v9 < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v10 = v8 + v9;
  if (__OFADD__(v8, v9))
    goto LABEL_8;
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    return;
  }
  os_unfair_lock_unlock(v3);
  if (v10)
    goto LABEL_9;
}

void protocol witness for Subscription.request(_:) in conformance ReduceProducer<A, B, C, D, E>(Combine::Subscribers::Demand a1)
{
  ReduceProducer.request(_:)(a1);
}

Swift::Void __swiftcall ReduceProducer.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 120);
  v6 = *(_QWORD *)(*v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v34 = *(_QWORD *)(v10 - 8);
  v35 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v33 = (char *)&v32 - v12;
  v13 = *(_QWORD *)(v4 + 96);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Optional();
  v36 = *(_QWORD *)(v17 - 8);
  v37 = v17;
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v38 = (char *)&v32 - v21;
  if (a1.rawValue != 0x8000000000000000)
  {
    if ((a1.rawValue & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (a1.rawValue)
    {
      goto LABEL_4;
    }
    __break(1u);
    return;
  }
LABEL_4:
  v22 = *(os_unfair_lock_s **)((char *)v2 + *(_QWORD *)(v4 + 176));
  os_unfair_lock_lock(v22);
  v23 = *v2;
  v24 = *(_QWORD *)(*v2 + 184);
  if ((*((_BYTE *)v2 + v24) & 1) != 0
    || (*((_BYTE *)v2 + *(_QWORD *)(v23 + 192)) & 1) != 0
    || (v25 = *(_QWORD *)(v23 + 200), (*((_BYTE *)v2 + v25) & 1) != 0)
    || (*((_BYTE *)v2 + v24) = 1, *((_BYTE *)v2 + *(_QWORD *)(*v2 + 208)) != 1))
  {
    os_unfair_lock_unlock(v22);
  }
  else
  {
    *((_BYTE *)v2 + v25) = 1;
    v32 = (uint64_t)v2 + *(_QWORD *)(*v2 + 136);
    swift_beginAccess();
    v26 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
    v26(v38, v32, v37);
    os_unfair_lock_unlock(v22);
    v27 = v37;
    v26(v20, (uint64_t)v38, v37);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v20, 1, v13) == 1)
    {
      v28 = v36;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v20, v27);
      v30 = v34;
      v29 = v35;
      v31 = v33;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v20, v13);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 48))(v16, v6, v5);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      v30 = v34;
      v29 = v35;
      v31 = v33;
      v28 = v36;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v31, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 56))(v31, v6, v5);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v29);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v38, v27);
  }
}

uint64_t Publisher.last()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

void Publisher.throttle<A>(for:scheduler:latest:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v8 = v7;
  v27 = a6;
  v26 = a3;
  v23 = a1;
  v24 = a2;
  v25 = a7;
  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v18 = (char *)&v22 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, v8, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v23, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v24, a5);
  Publishers.Throttle.init(upstream:interval:scheduler:latest:)((uint64_t)v20, a4, v25);
}

void Publishers.Throttle.init(upstream:interval:scheduler:latest:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.Throttle();
}

uint64_t sub_18B5745FC(int *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t result;

  v7 = v3 + a1[13];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v7, v5, AssociatedTypeWitness);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v3 + a1[14], v4, v2);
  *(_BYTE *)(v3 + a1[15]) = v1;
  return result;
}

void type metadata accessor for Publishers.Throttle()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publisher.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.FirstWhere, a5);
}

uint64_t Publisher.drop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.DropWhile, a5);
}

uint64_t type metadata accessor for AnySubscriberBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnySubscriberBase);
}

uint64_t type metadata completion function for AsyncThrowingPublisher.Iterator.Inner()
{
  return type metadata completion function for AsyncPublisher.Iterator.Inner();
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance AnySubscriber<A, B>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 56);
}

unint64_t lazy protocol witness table accessor for type ObservableObjectTable.Storage and conformance ObservableObjectTable.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ObservableObjectTable.Storage and conformance ObservableObjectTable.Storage;
  if (!lazy protocol witness table cache variable for type ObservableObjectTable.Storage and conformance ObservableObjectTable.Storage)
  {
    result = MEMORY[0x18D77ACE4](&protocol conformance descriptor for ObservableObjectTable.Storage, &type metadata for ObservableObjectTable.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObservableObjectTable.Storage and conformance ObservableObjectTable.Storage);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Optional.Publisher(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t Publishers.LastWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD *), uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, _QWORD *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];

  v28 = a6;
  v29 = a7;
  v25 = a5;
  v27 = a1;
  v11 = *(_QWORD *)(a2 + 16);
  v26 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v24 - v15;
  v30[0] = v11;
  v30[1] = a3;
  v30[2] = v26;
  v30[3] = a4;
  v17 = v25(0, v30);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v16, 1, 1, AssociatedTypeWitness);
  v18 = (uint64_t *)(v7 + *(int *)(a2 + 36));
  v19 = *v18;
  v20 = v18[1];
  swift_allocObject();
  swift_retain();
  v21 = specialized Publishers.TryLastWhere.Inner.init(downstream:initial:reduce:)(v27, (uint64_t)v16, v19, v20, v28, v29);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v30[0] = v21;
  v22 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for ReduceProducer<A, B, C, D, E>, v17);
  Publisher.subscribe<A>(_:)((uint64_t)v30, v11, v17, v26, v22);
  return swift_release();
}

void type metadata accessor for Publishers.FirstWhere.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.Collect.receive<A>(subscriber:)()
{
  type metadata accessor for Publishers.Collect.Inner();
}

uint64_t sub_18B5749F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;

  swift_getAssociatedTypeWitness();
  v5 = static Array._allocateUninitialized(_:)();
  swift_allocObject();
  v8 = specialized Publishers.Collect.Inner.init(downstream:initial:reduce:)(v1, v5);
  v6 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for ReduceProducer<A, B, C, D, E>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v3, a1, v2, v6);
  return swift_release();
}

void type metadata accessor for Publishers.Collect.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t *specialized Publishers.Collect.Inner.init(downstream:initial:reduce:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  v9 = a2;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v4, (uint64_t)&v9, v6);
}

uint64_t *specialized Publishers.Last.Inner.init(downstream:initial:reduce:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v14 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v10, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v10, (uint64_t)v8, v12);
}

void Publishers.First.receive<A>(subscriber:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0);
  type metadata accessor for Publishers.First.Inner();
}

uint64_t sub_18B574CCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v6, 1, 1, v4);
  swift_allocObject();
  v10 = specialized Publishers.Last.Inner.init(downstream:initial:reduce:)(v1, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v5);
  *(_QWORD *)(v8 - 112) = v10;
  v11 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for ReduceProducer<A, B, C, D, E>, a1);
  Publisher.subscribe<A>(_:)(v8 - 112, v3, a1, v2, v11);
  return swift_release();
}

void type metadata accessor for Publishers.First.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t *ReduceProducer.init(downstream:initial:reduce:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *v3;
  v8 = (uint64_t)v3 + *(_QWORD *)(*v3 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(*v3 + 96) - 8) + 56))(v8, 1, 1, *(_QWORD *)(*v3 + 96));
  v9 = (uint64_t)v3 + *(_QWORD *)(*v3 + 160);
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_QWORD *)(v9 + 32) = 0;
  *(_BYTE *)(v9 + 40) = 2;
  v10 = *(_QWORD *)(*v3 + 176);
  v11 = (_DWORD *)swift_slowAlloc();
  *v11 = 0;
  *(uint64_t *)((char *)v3 + v10) = (uint64_t)v11;
  *((_BYTE *)v3 + *(_QWORD *)(*v3 + 184)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)(*v3 + 192)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)(*v3 + 200)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)(*v3 + 208)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 80) - 8) + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 168), a1);
  swift_beginAccess();
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v8, a2, v12);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 144), a2, v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 112) - 8) + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 152), a3);
  return v3;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Buffer<A>(uint64_t a1)
{
  Publishers.Buffer.receive<A>(subscriber:)(a1);
}

void Publishers.Buffer.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.Buffer.Inner();
}

uint64_t sub_18B574F90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v2);
  v11 = *(_QWORD *)(v1 + v5[9]);
  *(_BYTE *)(v9 - 113) = *(_BYTE *)(v1 + v5[10]);
  v12 = (unint64_t *)(v1 + v5[11]);
  v13 = *v12;
  v14 = v12[1];
  *(_QWORD *)(v9 - 112) = *v12;
  *(_QWORD *)(v9 - 104) = v14;
  outlined copy of Publishers.BufferingStrategy<A><A>(v13);
  swift_allocObject();
  *(_QWORD *)(v9 - 112) = Publishers.Buffer.Inner.init(_:size:prefetch:whenFull:)(v7, v11, (char *)(v9 - 113), (uint64_t *)(v9 - 112));
  v15 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Buffer<A>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v9 - 112, v4, a1, v3, v15);
  return swift_release();
}

unint64_t Publisher.buffer(size:prefetch:whenFull:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  unint64_t *v20;
  uint64_t v22;

  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v12;
  v15 = *v14;
  v16 = v14[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, a2);
  v19 = (int *)type metadata accessor for Publishers.Buffer(0, a2, a3, v18);
  *(_QWORD *)(a4 + v19[9]) = a1;
  *(_BYTE *)(a4 + v19[10]) = v13;
  v20 = (unint64_t *)(a4 + v19[11]);
  *v20 = v15;
  v20[1] = v16;
  return outlined copy of Publishers.BufferingStrategy<A><A>(v15);
}

uint64_t type metadata accessor for Publishers.Buffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Buffer);
}

unint64_t outlined copy of Publishers.BufferingStrategy<A><A>(unint64_t result)
{
  if (result >= 2)
    return swift_retain();
  return result;
}

uint64_t *Publishers.Buffer.Inner.init(_:size:prefetch:whenFull:)(uint64_t a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = *v4;
  v7 = *a3;
  v8 = *a4;
  v18 = a4[1];
  v9 = (_DWORD *)swift_slowAlloc();
  *v9 = 0;
  v4[2] = (uint64_t)v9;
  *((_BYTE *)v4 + 24) = 0;
  v10 = (uint64_t)v4 + *(_QWORD *)(*v4 + 160);
  *(_QWORD *)(v10 + 32) = 0;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_BYTE *)(v10 + 40) = 2;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 + 168)) = 0;
  v11 = *(_QWORD *)(*v4 + 176);
  swift_getAssociatedTypeWitness();
  *(uint64_t *)((char *)v4 + v11) = Array.init()();
  *((_BYTE *)v4 + *(_QWORD *)(*v4 + 184)) = 0;
  v12 = (uint64_t)v4 + *(_QWORD *)(*v4 + 192);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v12, 1, 1, v16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 88) - 8) + 32))((uint64_t)v4 + *(_QWORD *)(*v4 + 152), a1);
  v4[4] = a2;
  *((_BYTE *)v4 + 40) = v7;
  v4[6] = v8;
  v4[7] = v18;
  return v4;
}

void type metadata accessor for Publishers.Buffer.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.Sequence.init(sequence:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t Publisher.ignoreOutput()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

void Publisher.zip<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v13);
  v19 = (char *)&v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a6, v19, a2);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = v21;
  type metadata accessor for Publishers.Zip();
}

uint64_t sub_18B575468(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void Publishers.Zip.init(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for Publishers.Zip();
}

uint64_t sub_18B5754F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void type metadata accessor for Publishers.Zip()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t type metadata completion function for Publishers.CollectByCount()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Sequence.Inner()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        swift_getAssociatedTypeWitness();
        result = type metadata accessor for Optional();
        if (v4 <= 0x3F)
          return swift_initClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t Publishers.Concatenate.Inner.__deallocating_deinit()
{
  Publishers.Concatenate.Inner.deinit();
  return swift_deallocClassInstance();
}

uint64_t *Publishers.Concatenate.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 168)), -1, -1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 128));
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(_QWORD *)(*v0 + 136));
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(_QWORD *)(*v0 + 144));
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 152);
  v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t closure #1 in Publishers.ReceiveOn.Inner.receive(completion:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v4 = *a1;
  v5 = (os_unfair_lock_s *)a1[2];
  os_unfair_lock_lock(v5);
  v8 = 1;
  v9 = 0u;
  v10 = 0u;
  v11 = 2;
  v6 = (uint64_t)a1 + *(_QWORD *)(*a1 + 160);
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v8, v6);
  swift_endAccess();
  os_unfair_lock_unlock(v5);
  os_unfair_recursive_lock_lock_with_options();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 + 120) + 56))(a2, *(_QWORD *)(v4 + 96));
  return os_unfair_recursive_lock_unlock();
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return protocol witness for Subscriber.receive(_:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))Publishers.Catch.Inner.UncaughtS.receive(completion:));
}

void Publishers.Catch.Inner.UncaughtS.receive(completion:)(uint64_t a1)
{
  Publishers.Catch.Inner.receivePre(completion:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance ReduceProducer<A, B, C, D, E>(uint64_t a1)
{
  ReduceProducer.receive(completion:)(a1);
}

void ReduceProducer.receive(completion:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  os_unfair_lock_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  unsigned __int8 v95;

  v2 = v1;
  v91 = a1;
  v3 = (_QWORD *)*v1;
  v4 = v3[15];
  v5 = v3[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v88 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v87 = (char *)&v71 - v8;
  v9 = v3[13];
  v89 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v7);
  v77 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v86 = (char *)&v71 - v12;
  v78 = v4;
  v79 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v82 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v81 = *(_QWORD *)(v82 - 8);
  v15 = MEMORY[0x1E0C80A78](v82);
  v80 = (char *)&v71 - v16;
  v17 = v3[12];
  v76 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v15);
  v75 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Optional();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v71 - v24;
  v26 = v3[16];
  v90 = v9;
  v28 = type metadata accessor for Subscribers.Completion(0, v9, v26, v27);
  v83 = *(_QWORD *)(v28 - 8);
  v84 = v28;
  MEMORY[0x1E0C80A78](v28);
  v85 = (char *)&v71 - v29;
  v30 = *(os_unfair_lock_s **)((char *)v2 + v3[22]);
  os_unfair_lock_lock(v30);
  v31 = (uint64_t)v2 + *(_QWORD *)(*v2 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v31, (uint64_t)&v92);
  LODWORD(v9) = v95;
  outlined destroy of SubscriptionStatus((uint64_t)&v92);
  if ((_DWORD)v9)
  {
    v32 = v30;
LABEL_3:
    os_unfair_lock_unlock(v32);
    return;
  }
  v74 = v30;
  v71 = v23;
  v72 = v25;
  v33 = v86;
  v73 = v20;
  v35 = v87;
  v34 = v88;
  v92 = 1;
  v93 = 0u;
  v94 = 0u;
  v95 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v92, v31);
  swift_endAccess();
  v36 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v85, v91, v84);
  v37 = v89;
  v38 = v90;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v36, 1, v90) == 1)
  {
    v39 = *v2;
    v32 = v74;
    if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 + 192)) & 1) != 0)
      goto LABEL_3;
    v40 = *(_QWORD *)(v39 + 200);
    if ((*((_BYTE *)v2 + v40) & 1) != 0)
      goto LABEL_3;
    v41 = *(_QWORD *)(v39 + 208);
    if ((*((_BYTE *)v2 + v41) & 1) != 0)
      goto LABEL_3;
    *((_BYTE *)v2 + v41) = 1;
    v42 = *v2;
    v43 = *((unsigned __int8 *)v2 + *(_QWORD *)(*v2 + 184));
    if (v43 == 1)
    {
      *((_BYTE *)v2 + v40) = 1;
      v42 = *v2;
    }
    v44 = (char *)v2 + *(_QWORD *)(v42 + 136);
    swift_beginAccess();
    v45 = v73;
    v46 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    v47 = v72;
    v48 = v44;
    v49 = v19;
    v46(v72, v48, v19);
    os_unfair_lock_unlock(v74);
    if (v43)
    {
      v50 = v17;
      v51 = v71;
      v46(v71, v47, v49);
      v52 = v76;
      v53 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 48))(v51, 1, v50);
      v54 = v78;
      v55 = v79;
      v91 = AssociatedTypeWitness;
      v56 = v51;
      v57 = v34;
      v58 = v82;
      v59 = v80;
      if (v53 == 1)
      {
        v60 = v73;
        (*(void (**)(char *, uint64_t))(v73 + 8))(v56, v49);
        v61 = v49;
      }
      else
      {
        v69 = v75;
        (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v75, v56, v50);
        v61 = v49;
        (*(void (**)(char *, uint64_t, uint64_t))(v54 + 48))(v69, v55, v54);
        v70 = v69;
        v58 = v82;
        (*(void (**)(char *, uint64_t))(v52 + 8))(v70, v50);
        v60 = v73;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v59, 1, 1, v91);
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 56))(v59, v55, v54);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v59, v58);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v72, v61);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v19);
    }
  }
  else
  {
    v62 = v33;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v33, v36, v38);
    v63 = *v2;
    if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 + 192)) & 1) != 0
      || (v64 = *(_QWORD *)(v63 + 200), (*((_BYTE *)v2 + v64) & 1) != 0)
      || (v65 = *(_QWORD *)(v63 + 208), (*((_BYTE *)v2 + v65) & 1) != 0))
    {
      os_unfair_lock_unlock(v74);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v33, v38);
    }
    else
    {
      *((_BYTE *)v2 + v65) = 1;
      *((_BYTE *)v2 + v64) = 1;
      os_unfair_lock_unlock(v74);
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v77, v33, v38);
      swift_dynamicCast();
      v66 = v34;
      v67 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
      v68 = v80;
      v67(v80, v35, AssociatedTypeWitness);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v68, 0, 1, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v78 + 56))(v68, v79);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v68, v82);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v62, v38);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v35, AssociatedTypeWitness);
    }
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>(uint64_t a1)
{
  Publishers.SwitchToLatest.Outer.receive(completion:)(a1);
}

void Publishers.SwitchToLatest.Outer.receive(completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v2 = v1;
  v4 = *(_QWORD **)v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v31 = (char *)&v27 - v7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v30 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v27 - v14;
  v16 = v4[21];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + v16));
  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  v17 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 136);
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v35, v17);
  swift_endAccess();
  *(_BYTE *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 192)) = 1;
  if (*(_BYTE *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 184)) == 1)
    goto LABEL_2;
  v29 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, a1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    if ((*(_BYTE *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 208)) & 1) != 0
      || (v18 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 144),
          swift_beginAccess(),
          outlined init with copy of Subscription?(v18, (uint64_t)&v35),
          v19 = *((_QWORD *)&v36 + 1),
          outlined destroy of Subscription?((uint64_t)&v35),
          v19))
    {
LABEL_2:
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + v16));
      return;
    }
    *(_BYTE *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 200)) = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + v16));
    os_unfair_recursive_lock_lock_with_options();
    v20 = v30;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v30, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, _QWORD))(v4[15] + 56))(v20, v4[12]);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v10);
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    v28 = v10;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v31, v15, AssociatedTypeWitness);
    v21 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 144);
    swift_beginAccess();
    outlined init with copy of Subscription?(v21, (uint64_t)&v35);
    v34 = 0;
    v32 = 0u;
    v33 = 0u;
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)&v32, v21);
    swift_endAccess();
    *(_BYTE *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 200)) = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + v16));
    outlined init with copy of Subscription?((uint64_t)&v35, (uint64_t)&v32);
    v22 = *((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v23 = v34;
      __swift_project_boxed_opaque_existential_1(&v32, *((uint64_t *)&v33 + 1));
      (*(void (**)(uint64_t))(*(_QWORD *)(v23 + 8) + 8))(v22);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
    }
    else
    {
      outlined destroy of Subscription?((uint64_t)&v32);
    }
    v24 = v29;
    v25 = v30;
    os_unfair_recursive_lock_lock_with_options();
    v26 = v31;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v25, v31, AssociatedTypeWitness);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v25, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, _QWORD))(v4[15] + 56))(v25, v4[12]);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v28);
    os_unfair_recursive_lock_unlock();
    outlined destroy of Subscription?((uint64_t)&v35);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v26, AssociatedTypeWitness);
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance AsyncThrowingPublisher<A>.Iterator.Inner(uint64_t a1)
{
  AsyncThrowingPublisher.Iterator.Inner.receive(completion:)(a1);
}

void AsyncThrowingPublisher.Iterator.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Bool IsNativeType;
  BOOL v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::Bool v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t AssociatedConformanceWitness;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  os_unfair_lock_t v63;
  uint64_t v64;
  _QWORD v65[5];
  char v66;

  v61 = a1;
  v3 = *(_QWORD *)(*v1 + 80);
  v2 = *(_QWORD *)(*v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v62 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v56 = (char *)&v52 - v5;
  v6 = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v52 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v59 = *(_QWORD *)(v12 - 8);
  v60 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v53 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v58 = (char *)&v52 - v15;
  v16 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v16);
  v17 = (uint64_t)(v1 + 4);
  swift_beginAccess();
  v19 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State(0, v3, v2, v18);
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v20 + 16))(v65, v1 + 4, v19);
  v63 = v16;
  if (v66)
  {
    if (v66 == 1)
    {
      MEMORY[0x18D77ABF4](v65[0]);
      swift_beginAccess();
      AssociatedTypeWitness = v1[3];
      swift_beginAccess();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
      v21 = type metadata accessor for UnsafeContinuation();
      type metadata accessor for Array();
      Array.removeAll(keepingCapacity:)(0);
      swift_endAccess();
      os_unfair_lock_unlock(v63);
      if (MEMORY[0x18D77A3A8](AssociatedTypeWitness, v21))
      {
        v20 = 4;
        while (1)
        {
          v22 = v20 - 4;
          IsNativeType = Array._hoistableIsNativeTypeChecked()();
          Array._checkSubscript(_:wasNativeTypeChecked:)();
          if (IsNativeType)
          {
            v17 = *(_QWORD *)(AssociatedTypeWitness + 8 * v20);
            v24 = __OFADD__(v22, 1);
            v1 = (uint64_t *)(v20 - 3);
            if (v24)
              goto LABEL_11;
          }
          else
          {
            v17 = _ArrayBuffer._getElementSlowPath(_:)();
            swift_unknownObjectRelease();
            v24 = __OFADD__(v22, 1);
            v1 = (uint64_t *)(v20 - 3);
            if (v24)
            {
LABEL_11:
              __break(1u);
              goto LABEL_12;
            }
          }
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v10, 1, 1, v6);
          (*(void (**)(_QWORD, char *, uint64_t))(v8 + 32))(*(_QWORD *)(*(_QWORD *)(v17 + 64) + 40), v10, v7);
          swift_continuation_throwingResume();
          ++v20;
          if (v1 == (uint64_t *)MEMORY[0x18D77A3A8](AssociatedTypeWitness, v21))
            goto LABEL_29;
        }
      }
      goto LABEL_29;
    }
  }
  else
  {
LABEL_12:
    (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v65, v19);
  }
  v54 = v20;
  v57 = AssociatedTypeWitness;
  v25 = v1 + 3;
  swift_beginAccess();
  v26 = v1[3];
  swift_bridgeObjectRetain();
  v52 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v27 = type metadata accessor for UnsafeContinuation();
  v28 = MEMORY[0x18D77A390](v26, v27);
  swift_bridgeObjectRelease();
  if (v28 >= 1)
  {
    v65[0] = 0;
    v66 = 1;
    swift_beginAccess();
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v54 + 40))(v17, v65, v19);
    swift_endAccess();
    swift_beginAccess();
    v29 = type metadata accessor for Array();
    MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF58], v29);
    RangeReplaceableCollection.removeFirst()();
    swift_endAccess();
    v54 = v64;
    v30 = *v25;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    Array.removeAll(keepingCapacity:)(0);
    swift_endAccess();
    os_unfair_lock_unlock(v63);
    v31 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v61, v60);
    v32 = v62;
    v33 = v57;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v31, 1, v57) == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v10, 1, 1, v6);
      (*(void (**)(_QWORD, char *, uint64_t))(v8 + 32))(*(_QWORD *)(*(_QWORD *)(v54 + 64) + 40), v10, v7);
      swift_continuation_throwingResume();
    }
    else
    {
      v37 = v31;
      v38 = v56;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v56, v37, v33);
      v39 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v40, v38, v33);
      v65[0] = v39;
      v41 = v52;
      swift_allocError();
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v42, v65, v41);
      swift_continuation_throwingResumeWithError();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v38, v33);
    }
    if (MEMORY[0x18D77A3A8](v30, v27))
    {
      v43 = 4;
      do
      {
        v44 = v43 - 4;
        v45 = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (v45)
        {
          v46 = *(_QWORD *)(v30 + 8 * v43);
          v24 = __OFADD__(v44, 1);
          v47 = v43 - 3;
          if (v24)
            goto LABEL_28;
        }
        else
        {
          v46 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          v24 = __OFADD__(v44, 1);
          v47 = v43 - 3;
          if (v24)
          {
LABEL_28:
            __break(1u);
            break;
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v10, 1, 1, v6);
        (*(void (**)(_QWORD, char *, uint64_t))(v8 + 32))(*(_QWORD *)(*(_QWORD *)(v46 + 64) + 40), v10, v7);
        swift_continuation_throwingResume();
        ++v43;
      }
      while (v47 != MEMORY[0x18D77A3A8](v30, v27));
    }
LABEL_29:
    swift_bridgeObjectRelease();
    return;
  }
  v34 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v53, v61, v60);
  v35 = v62;
  v36 = v57;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v34, 1, v57) == 1)
  {
    v65[0] = 0;
  }
  else
  {
    v48 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    v49 = v56;
    v48(v56, v34, v36);
    v50 = swift_allocError();
    v48(v51, v49, v36);
    v65[0] = v50;
  }
  v66 = 1;
  swift_beginAccess();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v54 + 40))(v17, v65, v19);
  swift_endAccess();
  os_unfair_lock_unlock(v63);
}

uint64_t assignWithTake for AsyncThrowingPublisher.Iterator.Inner.State(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      MEMORY[0x18D77ABF4](*(_QWORD *)a1);
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t UnsafeContinuation.resume(throwing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v6, a1, a4);
  return swift_continuation_throwingResumeWithError();
}

uint64_t type metadata completion function for Publishers.Drop.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for Publishers.DropWhile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.DropWhile);
}

uint64_t type metadata instantiation function for Publishers.Merge5()
{
  return swift_allocateGenericValueMetadata();
}

void Publishers.SwitchToLatest.Outer.Side.receive(completion:)(uint64_t a1)
{
  uint64_t *v1;

  Publishers.SwitchToLatest.Outer.receiveInner(completion:_:)(a1, *v1);
}

void Publishers.SwitchToLatest.Outer.receiveInner(completion:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;

  v3 = v2;
  v6 = *(_QWORD **)v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v29 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v30 = *(_QWORD *)(v13 - 8);
  v31 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v29 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v29 - v16;
  v18 = v6[21];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + v18));
  v19 = *(_QWORD **)v3;
  if (*(_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 152)) != a2)
    goto LABEL_3;
  v20 = v19[23];
  if ((*(_BYTE *)(v3 + v20) & 1) != 0)
    goto LABEL_3;
  if ((*(_BYTE *)(v3 + v19[26]) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v36 = 0;
    memset(v35, 0, sizeof(v35));
    v21 = v3 + v19[18];
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v35, v21);
    swift_endAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v17, a1, v31);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v17, 1, AssociatedTypeWitness) == 1)
    {
      if ((*(_BYTE *)(v3 + v20) & 1) != 0
        || (v22 = *(_QWORD *)(*(_QWORD *)v3 + 200), *(_BYTE *)(v3 + v22) == 1)
        || (*(_BYTE *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 192)) & 1) == 0)
      {
LABEL_3:
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + v18));
        return;
      }
      *(_BYTE *)(v3 + v22) = 1;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + v18));
      os_unfair_recursive_lock_lock_with_options();
      v23 = v29;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v29, 1, 1, AssociatedTypeWitness);
      (*(void (**)(char *, _QWORD))(v6[15] + 56))(v23, v6[12]);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v31);
      os_unfair_recursive_lock_unlock();
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v17, AssociatedTypeWitness);
      if ((*(_BYTE *)(v3 + v20) & 1) != 0 || (v24 = *(_QWORD *)(*(_QWORD *)v3 + 200), *(_BYTE *)(v3 + v24) == 1))
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + v18));
      }
      else
      {
        *(_BYTE *)(v3 + v20) = 1;
        v25 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 136);
        swift_beginAccess();
        outlined init with copy of Subscription?(v25, (uint64_t)v35);
        v34 = 0;
        v32 = 0u;
        v33 = 0u;
        swift_beginAccess();
        outlined assign with take of Subscription?((uint64_t)&v32, v25);
        swift_endAccess();
        *(_BYTE *)(v3 + v24) = 1;
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + v18));
        outlined init with copy of Subscription?((uint64_t)v35, (uint64_t)&v32);
        v26 = *((_QWORD *)&v33 + 1);
        if (*((_QWORD *)&v33 + 1))
        {
          v27 = v34;
          __swift_project_boxed_opaque_existential_1(&v32, *((uint64_t *)&v33 + 1));
          (*(void (**)(uint64_t))(*(_QWORD *)(v27 + 8) + 8))(v26);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
        }
        else
        {
          outlined destroy of Subscription?((uint64_t)&v32);
        }
        os_unfair_recursive_lock_lock_with_options();
        v28 = v29;
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v29, v10, AssociatedTypeWitness);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v28, 0, 1, AssociatedTypeWitness);
        (*(void (**)(char *, _QWORD))(v6[15] + 56))(v28, v6[12]);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v31);
        os_unfair_recursive_lock_unlock();
        outlined destroy of Subscription?((uint64_t)v35);
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    }
  }
}

uint64_t Publisher.reduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t (*v27)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v28;

  v27 = a7;
  v28 = a2;
  v14 = *(_QWORD *)(a5 - 8);
  v15 = MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v15);
  v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v23, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, a5);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a8, v21, a4);
  v24 = v27(0, a4, a5, a6);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a8 + *(int *)(v24 + 44), v17, a5);
  v25 = (_QWORD *)(a8 + *(int *)(v24 + 48));
  *v25 = v28;
  v25[1] = a3;
  return swift_retain();
}

uint64_t Publishers.Reduce.init(upstream:initial:nextPartialResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(_QWORD, uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a9, a1, a5);
  v17 = a8(0, a5, a6, a7);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(a9 + *(int *)(v17 + 44), a2, a6);
  v19 = (_QWORD *)(a9 + *(int *)(v17 + 48));
  *v19 = a3;
  v19[1] = a4;
  return result;
}

uint64_t type metadata accessor for Publishers.Scan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Scan);
}

uint64_t Publishers.Scan.init(upstream:initialResult:nextPartialResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return Publishers.Reduce.init(upstream:initial:nextPartialResult:)(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for Publishers.Scan, a8);
}

uint64_t getEnumTagSinglePayload for Publishers.Catch(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B577428 + 4 * byte_18B5FD4B0[v10]))();
  }
}

uint64_t Publisher.collect(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, a2);
  result = type metadata accessor for Publishers.CollectByCount(0, a2, a3, v12);
  *(_QWORD *)(a4 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t type metadata accessor for Publishers.CollectByCount(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.CollectByCount);
}

uint64_t partial apply for closure #1 in Publishers.CollectByTime.Inner.receive(completion:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(uint64_t **)(v0 + 16);
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  v5 = *(_QWORD *)(v0 + 24);
  return (*(uint64_t (**)(uint64_t *, _QWORD))(v3 + 48))(&v5, *(_QWORD *)(v2 + 96));
}

uint64_t type metadata completion function for Publishers.Debounce()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      AssociatedTypeWitness = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_getAssociatedTypeWitness();
        AssociatedTypeWitness = type metadata accessor for Optional();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t dispatch thunk of static SchedulerTimeIntervalConvertible.seconds(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge6<A, B, C, D, E, F>()
{
  Publishers.Merge6.receive<A>(subscriber:)();
}

uint64_t Publisher.collect()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t type metadata completion function for Publishers.Debounce.Inner()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v3 > 0x3F)
      return AssociatedTypeWitness;
    v4 = swift_checkMetadataState();
    if (v5 > 0x3F)
      return v4;
    swift_getAssociatedTypeWitness();
    AssociatedTypeWitness = type metadata accessor for Optional();
    if (v6 > 0x3F)
    {
      return AssociatedTypeWitness;
    }
    else
    {
      swift_getAssociatedTypeWitness();
      v0 = type metadata accessor for Optional();
      if (v7 <= 0x3F)
        return swift_initClassMetadata2();
    }
  }
  return v0;
}

uint64_t type metadata completion function for ReduceProducer()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
        return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t Publishers.DropWhile.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(char *, uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD, _QWORD *);
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];

  v29 = a7;
  v9 = v7;
  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 + 24);
  v30[0] = *(_QWORD *)(v16 + 16);
  v18 = v30[0];
  v30[1] = v19;
  v30[2] = v17;
  v30[3] = v20;
  v22 = v21(0, v30);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a3);
  v23 = (uint64_t *)(v9 + *(int *)(a2 + 36));
  v24 = *v23;
  v25 = v23[1];
  swift_allocObject();
  swift_retain();
  v30[0] = a6(v15, v24, v25);
  v26 = MEMORY[0x18D77ACE4](v29, v22);
  Publisher.subscribe<A>(_:)((uint64_t)v30, v18, v22, v17, v26);
  return swift_release();
}

void type metadata accessor for Publishers.DropWhile.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t *Publishers.DropWhile.Inner.init(downstream:predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = *v3;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  v3[6] = 0;
  *((_BYTE *)v3 + 56) = 2;
  v8 = (uint64_t *)((char *)v3 + *(_QWORD *)(v7 + 128));
  *v8 = 0;
  v8[1] = 0;
  *((_BYTE *)v3 + *(_QWORD *)(*v3 + 136)) = 1;
  v9 = *(_QWORD *)(*v3 + 144);
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(uint64_t *)((char *)v3 + v9) = (uint64_t)v10;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 88) - 8) + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 120), a1);
  v11 = (uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 128));
  v12 = *v11;
  *v11 = a2;
  v11[1] = a3;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v12);
  return v3;
}

uint64_t Publishers.DropWhile.Inner.receive(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  _BYTE v14[48];

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v5));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)v14);
  v6 = v14[40];
  outlined destroy of SubscriptionStatus((uint64_t)v14);
  if (!v6)
  {
    v9 = *(uint64_t (**)(uint64_t))((char *)v2 + *(_QWORD *)(*v2 + 128));
    if (v9)
    {
      v10 = *(_QWORD *)(*v2 + 136);
      if (*((_BYTE *)v2 + v10) == 1)
      {
        v11 = *(os_unfair_lock_s **)((char *)v2 + v5);
        swift_retain();
        os_unfair_lock_unlock(v11);
        if ((v9(a1) & 1) != 0)
        {
          _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v9);
          return 1;
        }
        os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v5));
        *((_BYTE *)v2 + v10) = 0;
        v13 = *(os_unfair_lock_s **)((char *)v2 + v5);
      }
      else
      {
        v12 = *(os_unfair_lock_s **)((char *)v2 + v5);
        swift_retain();
        v13 = v12;
      }
      os_unfair_lock_unlock(v13);
      v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 + 104) + 48))(a1, *(_QWORD *)(v4 + 88));
      _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v9);
      return v7;
    }
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v5));
  return 0;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Subscribers.Assign<A, B>(uint64_t a1)
{
  Subscribers.Assign.receive(_:)(a1);
  return 0;
}

uint64_t Subscribers.Assign.receive(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[48];

  v23 = a1;
  v2 = *(_QWORD *)(*v1 + 88);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 80);
  v24 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v24 - 8);
  v9 = MEMORY[0x1E0C80A78](v24);
  v11 = (char *)&v21 - v10;
  v25 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v14);
  v15 = (uint64_t)v1 + *(_QWORD *)(*v1 + 120);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v15, (uint64_t)v26);
  LODWORD(v15) = v26[40];
  outlined destroy of SubscriptionStatus((uint64_t)v26);
  if (!(_DWORD)v15)
  {
    v21 = v13;
    v22 = v2;
    v16 = (char *)v1 + *(_QWORD *)(*v1 + 104);
    swift_beginAccess();
    v17 = v24;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v16, v24);
    v18 = v25;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v11, 1, v7) != 1)
    {
      v19 = v21;
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v11, v7);
      os_unfair_lock_unlock(v14);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v23, v22);
      swift_setAtReferenceWritableKeyPath();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v7);
      return 0;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v17);
  }
  os_unfair_lock_unlock(v14);
  return 0;
}

uint64_t type metadata completion function for Optional.Publisher()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Collect()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Subscribers.Demand.description.getter(uint64_t a1)
{
  Swift::String v2;
  Swift::String v3;

  if (a1 == 0x8000000000000000)
    return 0x6574696D696C6E75;
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 678977901;
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncThrowingPublisher<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncPublisher<A>(a1, a2, (void (*)(void))AsyncThrowingPublisher.makeAsyncIterator());
}

uint64_t type metadata accessor for AsyncThrowingPublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingPublisher);
}

uint64_t type metadata accessor for AsyncThrowingPublisher.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingPublisher.Iterator);
}

uint64_t type metadata accessor for Publishers.IgnoreOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.IgnoreOutput);
}

uint64_t type metadata completion function for Subscribers.Assign()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Output.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Throttle.Inner.Scheduling()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Subscribers.Assign<A, B>(_QWORD *a1)
{
  return Subscribers.Assign.receive(subscription:)(a1);
}

uint64_t Subscribers.Assign.receive(subscription:)(_QWORD *a1)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char v14;

  v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 120);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)&v11);
  if (v14 == 2
    && (v5 = vorrq_s8(v12, v13),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | v11)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v11);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v11);
    v14 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v11, v4);
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    v9 = a1[3];
    v10 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v9);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 24))(0x8000000000000000, v9, v10);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v11);
    os_unfair_lock_unlock(v3);
    v7 = a1[3];
    v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
  }
}

uint64_t type metadata completion function for Publishers.ReplaceError.Inner()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t Publishers.SwitchToLatest.Outer.__deallocating_deinit()
{
  Publishers.SwitchToLatest.Outer.deinit();
  return swift_deallocClassInstance();
}

uint64_t *Publishers.SwitchToLatest.Outer.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 168)), -1, -1);
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 176)), -1, -1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 128));
  outlined destroy of Subscription?((uint64_t)v0 + *(_QWORD *)(*v0 + 136));
  outlined destroy of Subscription?((uint64_t)v0 + *(_QWORD *)(*v0 + 144));
  return v0;
}

uint64_t type metadata completion function for Publishers.ReplaceEmpty()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in AsyncThrowingPublisher<A>.Iterator.Inner()
{
  return swift_getAssociatedConformanceWitness();
}

void Publishers.CollectByTime.Inner.schedulerTimerFired()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = *v0;
  v3 = *(_QWORD *)(*v0 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + v3));
  v4 = *(_QWORD *)(*v0 + 192);
  v5 = *(uint64_t *)((char *)v0 + v4);
  if (v5 != 0x8000000000000000)
  {
    if (v5 < 0)
    {
      __break(1u);
      goto LABEL_27;
    }
    if (!v5)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + v3));
      return;
    }
  }
  v6 = (uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 152));
  swift_beginAccess();
  v14 = *v6;
  swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Array();
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v7);
  if ((Collection.isEmpty.getter() & 1) != 0)
    goto LABEL_24;
  v8 = *(uint64_t *)((char *)v0 + v4);
  if (v8 != 0x8000000000000000)
  {
    if ((v8 & 0x8000000000000000) == 0)
    {
      if (!v8)
        goto LABEL_24;
      goto LABEL_8;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_8:
  v9 = *v6;
  swift_bridgeObjectRetain();
  *v6 = static Array._allocateUninitialized(_:)();
  swift_bridgeObjectRelease();
  v10 = *(uint64_t *)((char *)v0 + v4);
  if (v10 == 0x8000000000000000)
    goto LABEL_12;
  if (v10 < 0)
    goto LABEL_28;
  if (!v10)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  *(uint64_t *)((char *)v0 + v4) = v10 - 1;
LABEL_12:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + v3));
  v14 = v9;
  v11 = (*(uint64_t (**)(uint64_t *, _QWORD))(*(_QWORD *)(v2 + 120) + 48))(&v14, *(_QWORD *)(v2 + 96));
  swift_bridgeObjectRelease();
  if (v11 == 0x8000000000000000)
    goto LABEL_15;
  if (v11 < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (!v11)
    return;
LABEL_15:
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v3));
  v12 = *(uint64_t *)((char *)v1 + v4);
  if (v12 != 0x8000000000000000)
  {
    v13 = 0x8000000000000000;
    if (v11 == 0x8000000000000000)
      goto LABEL_23;
    if (((v12 | v11) & 0x8000000000000000) == 0)
    {
      v13 = v12 + v11;
      if (!__OFADD__(v12, v11))
      {
        if ((v13 & 0x8000000000000000) == 0)
          goto LABEL_23;
LABEL_32:
        __break(1u);
        return;
      }
      v13 = 0x8000000000000000;
LABEL_23:
      *(uint64_t *)((char *)v1 + v4) = v13;
      goto LABEL_24;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
LABEL_24:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v3));
}

uint64_t Publishers.Buffer.Inner.__deallocating_deinit()
{
  Publishers.Buffer.Inner.deinit();
  return swift_deallocClassInstance();
}

char *Publishers.Buffer.Inner.deinit()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)v0;
  MEMORY[0x18D77ADB0](*((_QWORD *)v0 + 2), -1, -1);
  outlined consume of Publishers.BufferingStrategy<A.Failure><A><A1>(*((_QWORD *)v0 + 6));
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 152)]);
  outlined destroy of SubscriptionStatus((uint64_t)&v0[*(_QWORD *)(*(_QWORD *)v0 + 160)]);
  swift_bridgeObjectRelease();
  v2 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 192)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Subscribers.Completion(255, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  v6 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
  return v0;
}

uint64_t type metadata completion function for Publishers.Reduce()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Scan.Inner()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t Optional.Publisher.drop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, char *)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  void (*v19)(_BYTE *, uint64_t);
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v10 = *(_QWORD *)(a3 + 16);
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v13);
  v17 = &v21[-v16];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v15, v5, v11);
  v22 = v10;
  v23 = a1;
  v24 = a2;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(a4, (uint64_t)v21, MEMORY[0x1E0DEDCE8], v10, v18, (uint64_t)v17);
  v19 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
  v19(v15, v11);
  Optional.publisher.getter(v11, a5);
  return ((uint64_t (*)(_BYTE *, uint64_t))v19)(v17, v11);
}

uint64_t Just.compactMap<A>(_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - v7;
  a1(v2);
  Optional.publisher.getter(v5, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Optional.publisher.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  v6 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, v4, v6);
}

uint64_t type metadata completion function for Publishers.Concatenate.Inner()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Throttle()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t _initializeAvailabilityCheck(uint64_t result)
{
  uint64_t (*v1)(void);
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t (*)(void))qword_1ECED0E80;
  if (qword_1ECED0E80)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (MEMORY[0x1E0C80CC0])
    {
      qword_1ECED0E80 = (uint64_t)MEMORY[0x1E0C80CC0];
      v1 = MEMORY[0x1E0C80CC0];
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = MEMORY[0x18D77AA2C](v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &_MergedGlobals, &dword_1ECED0E64, &dword_1ECED0E68);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Merge7<A, B, C, D, E, F, G>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Merge6<A, B, C, D, E, F>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.CombineLatest4<A, B, C, D>()
{
  return swift_getAssociatedConformanceWitness();
}

void type metadata completion function for Publishers.Throttle.Inner()
{
  type metadata accessor for Publishers.Throttle.Inner.State();
}

uint64_t Publishers.Timeout.Inner.__deallocating_deinit()
{
  Publishers.Timeout.Inner.deinit();
  return swift_deallocClassInstance();
}

char *Publishers.Timeout.Inner.deinit()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  char *v5;
  uint64_t v6;

  v1 = *(_QWORD *)v0;
  MEMORY[0x18D77ADB0](*((_QWORD *)v0 + 2), -1, -1);
  MEMORY[0x18D77ADB0](*((_QWORD *)v0 + 3), -1, -1);
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 96) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 144)]);
  v2 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 152)];
  v3 = *(_QWORD *)(v1 + 88);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 160)], v3);
  v5 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 168)];
  swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 176)]);
  outlined destroy of SubscriptionStatus((uint64_t)&v0[*(_QWORD *)(*(_QWORD *)v0 + 184)]);
  swift_release();
  return v0;
}

uint64_t getEnumTagSinglePayload for AnySubscriber(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t dispatch thunk of AnySubscriberBase.receive(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t Publisher.retry(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, a2);
  result = type metadata accessor for Publishers.Retry(0, a2, a3, v12);
  v14 = a4 + *(int *)(result + 36);
  *(_QWORD *)v14 = a1;
  *(_BYTE *)(v14 + 8) = 0;
  return result;
}

uint64_t type metadata accessor for Publishers.Retry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Retry);
}

void partial apply for closure #1 in Publishers.Timeout.Inner.receive(completion:)()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;
  uint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v3)- 8)+ 80);
  Publishers.Timeout.Inner.scheduledReceive(completion:)(v0 + ((v4 + 72) & ~v4));
}

void Publishers.Timeout.Inner.scheduledReceive(completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  unsigned __int8 v10;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 184);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v7);
  v6 = v10;
  outlined destroy of SubscriptionStatus((uint64_t)&v7);
  if (v6 == 1)
  {
    v7 = 1;
    v8 = 0u;
    v9 = 0u;
    v10 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v7, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 120) + 56))(a1, *(_QWORD *)(v3 + 96));
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    os_unfair_lock_unlock(v4);
  }
}

void Publishers.CombineLatest4.init(_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.CombineLatest4();
}

uint64_t sub_18B5799CC(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v7 + a1[21], v6, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v7 + a1[22], v5, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v7 + a1[23], v4, v1);
}

void type metadata accessor for Publishers.CombineLatest4()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.Zip.receive<A>(subscriber:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Zip2Inner();
}

void sub_18B579B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t TupleTypeMetadata2,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;

  swift_allocObject();
  v25 = specialized AbstractZip.init(downstream:upstreamCount:)(v24, 2uLL);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, v25, &a17);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  a24 = a9;
  type metadata accessor for AbstractZip.Side();
}

void sub_18B579BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v22 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for AbstractZip<A, B, C>.Side<A1>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&a14, v20, a1, a10, v22);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, v19, &a17);
  a14 = a17;
  a15 = a18;
  a16 = a19;
  type metadata accessor for AbstractZip.Side();
}

uint64_t sub_18B579C20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for AbstractZip<A, B, C>.Side<A1>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v6, v4, a1, v5, v2);
  swift_release();
  return swift_release();
}

void type metadata accessor for AbstractZip.Side()
{
  JUMPOUT(0x18D77AC60);
}

void type metadata accessor for Zip2Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t specialized AbstractZip.init(downstream:upstreamCount:)(uint64_t a1, size_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v5 = *v2;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 136)) = 0;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 144)) = 0;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 152)) = 0;
  v6 = *(_QWORD *)(*v2 + 176);
  v7 = (_DWORD *)swift_slowAlloc();
  *v7 = 0;
  *(uint64_t *)((char *)v2 + v6) = (uint64_t)v7;
  v8 = *(_QWORD *)(*v2 + 184);
  v9 = (_QWORD *)swift_slowAlloc();
  *v9 = 0;
  *(uint64_t *)((char *)v2 + v8) = (uint64_t)v9;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 192)) = 0;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 200)) = 0;
  v10 = (uint64_t)v2 + *(_QWORD *)(*v2 + 208);
  v11 = *(_QWORD *)(v5 + 88);
  v12 = *(_QWORD *)(v5 + 96);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = type metadata accessor for Subscribers.Completion(0, v11, AssociatedConformanceWitness, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))((uint64_t)v2 + *(_QWORD *)(*v2 + 112), a1, v12);
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 168)) = a2;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 120)) = (uint64_t)specialized Array.init(repeating:count:)(MEMORY[0x1E0DEE9D8], a2);
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  result = specialized Array.init(repeating:count:)((uint64_t)v18, a2);
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 128)) = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v17 + 16) = a2;
      bzero((void *)(v17 + 32), a2);
    }
    else
    {
      v17 = MEMORY[0x1E0DEE9D8];
    }
    *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 160)) = v17;
    return (uint64_t)v2;
  }
  return result;
}

_QWORD *specialized Array.init(repeating:count:)(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      v4 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v5 = v4;
      v4[2] = a2;
      v4[4] = v3;
      if (a2 != 1)
      {
        v4[5] = v3;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            *v7++ = v3;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    return v5;
  }
  return result;
}

void type metadata completion function for Publishers.Throttle.Inner.State()
{
  type metadata accessor for Publishers.Throttle.Inner.Scheduling();
}

uint64_t type metadata accessor for AnySubscriberBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnySubscriberBox);
}

uint64_t storeEnumTagSinglePayload for AnySubscriber(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t initializeWithCopy for Publishers.CombineLatest4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  v18 = *(_QWORD *)(a3[5] - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 16))((*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), (*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t type metadata completion function for Publishers.CollectByCount.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void storeEnumTagSinglePayload for Just(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Timeout<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.Timeout.Inner.request(_:)(a1);
}

void Publishers.Timeout.Inner.request(_:)(uint64_t a1)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8[2];
  char v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 184);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v8);
  if (v9)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v8);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v8, (uint64_t)v10);
    v5 = *(_QWORD *)(*v1 + 208);
    if ((*((_BYTE *)v1 + v5) & 1) == 0)
    {
      *(_QWORD *)((char *)v1 + *(_QWORD *)(*v1 + 200)) = Publishers.Timeout.Inner.timeoutClock()();
      swift_release();
      *((_BYTE *)v1 + v5) = 1;
    }
    os_unfair_lock_unlock(v3);
    v6 = v11;
    v7 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
}

uint64_t Publishers.IgnoreOutput.Inner.receive(subscription:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(a2 + 40) + 40))(a1, *(_QWORD *)(a2 + 24));
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 24))(0x8000000000000000, v3, v4);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Timeout<A, B>.Inner<A1>(_QWORD *a1)
{
  return Publishers.Timeout.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.Timeout.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void (*v11)(uint64_t **, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  int8x16_t v14;
  int8x16_t v15;
  char v16;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 184);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (v6 = vorrq_s8(v14, v15),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 200)) = Publishers.Timeout.Inner.timeoutClock()();
    swift_release();
    os_unfair_lock_unlock(v4);
    os_unfair_recursive_lock_lock_with_options();
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.Timeout<A, B>.Inner<A1>;
    v13 = v1;
    v10 = *(_QWORD *)(v3 + 120);
    v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    v12 = *(_QWORD *)(v3 + 96);
    swift_retain();
    v11(&v13, v12, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
    return os_unfair_recursive_lock_unlock();
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    v7 = a1[3];
    v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
  }
}

uint64_t Publishers.Timeout.Inner.timeoutClock()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *__return_ptr, char *, uint64_t, char *, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28[2];
  _QWORD v29[5];

  v1 = v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v24 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)&AssociatedConformanceWitness - v5;
  v7 = swift_checkMetadataState();
  v27 = *(_QWORD *)(v7 - 8);
  v25 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&AssociatedConformanceWitness - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = *(void (**)(uint64_t, uint64_t))(v2 + 40);
  v26 = (char *)&AssociatedConformanceWitness - v12;
  v11(v3, v2);
  v13 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 152);
  dispatch thunk of Strideable.advanced(by:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 48))(v3, v2);
  v14 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 168);
  v15 = *(void (**)(_QWORD *__return_ptr, char *, uint64_t, char *, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 72);
  swift_retain();
  v15(v29, v10, v13, v6, v14, partial apply for closure #1 in Publishers.Timeout.Inner.timeoutClock(), v1, v3, v2, AssociatedConformanceWitness);
  swift_release();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v24);
  outlined init with copy of Subscription((uint64_t)v29, (uint64_t)v28);
  v16 = swift_allocObject();
  outlined init with take of Subscription(v28, v16 + 16);
  type metadata accessor for AnyCancellable();
  v17 = swift_allocObject();
  v18 = (_DWORD *)swift_slowAlloc();
  *v18 = 0;
  *(_QWORD *)(v17 + 64) = v18;
  *(_QWORD *)(v17 + 16) = partial apply for closure #2 in Publishers.Timeout.Inner.timeoutClock();
  *(_QWORD *)(v17 + 24) = v16;
  *(_BYTE *)(v17 + 56) = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  v19 = *(void (**)(char *, uint64_t))(v27 + 8);
  v20 = v25;
  v19(v10, v25);
  v19(v26, v20);
  return v17;
}

uint64_t Publishers.DropWhile.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  void (*v10)(uint64_t **, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  char v15;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)&v12);
  if (v15 == 2
    && (v5 = vorrq_s8(v13, v14),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | (unint64_t)v12)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v12);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v12);
    v15 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v12, (uint64_t)(v1 + 2));
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    v14.i64[0] = v3;
    v14.i64[1] = (uint64_t)&protocol witness table for Publishers.DropWhile<A>.Inner<A1>;
    v12 = v1;
    v9 = *(_QWORD *)(v3 + 104);
    v10 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v9 + 40);
    v11 = *(_QWORD *)(v3 + 88);
    swift_retain();
    v10(&v12, v11, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v12);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    v7 = a1[3];
    v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Scan<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.Scan.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.Scan.Inner.receive(subscription:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 112) + 40))(a1, *(_QWORD *)(*(_QWORD *)v1 + 96));
}

void Publishers.Scan.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v1);
  type metadata accessor for Publishers.Scan.Inner();
}

uint64_t sub_18B57AC30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 16))(v9, *(_QWORD *)(v10 - 136), v2);
  v12 = *(int *)(v5 + 44);
  v13 = *(_QWORD *)(v10 - 128);
  v14 = (uint64_t *)(v13 + *(int *)(v5 + 48));
  v15 = *v14;
  v16 = v14[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, v13 + v12, v7);
  *(_QWORD *)(v10 - 120) = Publishers.Scan.Inner.__allocating_init(downstream:nextPartialResult:initialResult:)(v9, v15, v16, v8);
  swift_retain();
  v17 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Scan<A, B>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v10 - 120, v4, a1, v3, v17);
  return swift_release();
}

void type metadata accessor for Publishers.Scan.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t type metadata completion function for Publishers.SubscribeOn.Inner()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v0 = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      v0 = type metadata accessor for Optional();
      if (v3 <= 0x3F)
        return swift_initClassMetadata2();
    }
  }
  return v0;
}

uint64_t Cancellable.store<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[2];

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnyCancellable();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v4, a2);
  v10 = swift_allocObject();
  AnyCancellable.init<A>(_:)((uint64_t)v9, a2, a4);
  v12[1] = v10;
  return dispatch thunk of RangeReplaceableCollection.append(_:)();
}

uint64_t Publishers.CompactMap.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21)(uint64_t);
  uint64_t v23;
  uint64_t v24;

  v24 = a1;
  v9 = a3[2];
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t *)(v14 + *(int *)(v13 + 44));
  v16 = *v15;
  v17 = v15[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14, v9);
  v18 = (uint64_t (*)(uint64_t))swift_allocObject();
  v19 = a3[3];
  v20 = a3[4];
  *((_QWORD *)v18 + 2) = v9;
  *((_QWORD *)v18 + 3) = v19;
  *((_QWORD *)v18 + 4) = a4;
  *((_QWORD *)v18 + 5) = v20;
  *((_QWORD *)v18 + 6) = v16;
  *((_QWORD *)v18 + 7) = v17;
  *((_QWORD *)v18 + 8) = v24;
  *((_QWORD *)v18 + 9) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, v9);
  v21 = (uint64_t (**)(uint64_t))(a5
                                         + *(int *)(type metadata accessor for Publishers.CompactMap(0, v9, a4, v20)
                                                  + 44));
  *v21 = partial apply for closure #1 in Publishers.CompactMap.compactMap<A>(_:);
  v21[1] = v18;
  swift_retain();
  return swift_retain();
}

void protocol witness for Subscription.request(_:) in conformance Publishers.CollectByCount<A>.Inner<A1>(uint64_t a1)
{
  Publishers.CollectByCount.Inner.request(_:)(a1);
}

void Publishers.CollectByCount.Inner.request(_:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_14;
  }
LABEL_4:
  v3 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 160));
  os_unfair_lock_lock(v3);
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 136);
  swift_beginAccess();
  outlined init with copy of Any?(v4, (uint64_t)&v9, &demangling cache variable for type metadata for Subscription?);
  if (!v10)
  {
    outlined destroy of CustomStringConvertible?((uint64_t)&v9, &demangling cache variable for type metadata for Subscription?);
    os_unfair_lock_unlock(v3);
    return;
  }
  outlined init with take of Subscription(&v9, (uint64_t)v11);
  os_unfair_lock_unlock(v3);
  v5 = v12;
  v6 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  v7 = 0x8000000000000000;
  if (a1 == 0x8000000000000000)
    goto LABEL_10;
  v8 = *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120));
  v7 = a1 * v8;
  if ((unsigned __int128)(a1 * (__int128)v8) >> 64 == (a1 * v8) >> 63)
  {
    if ((v7 & 0x8000000000000000) == 0)
      goto LABEL_10;
LABEL_14:
    __break(1u);
    return;
  }
  v7 = 0x8000000000000000;
LABEL_10:
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 24))(v7, v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t ObservableObjectPublisher.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;

  v1 = type metadata accessor for ObservationRegistrar();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock;
  v6 = (_DWORD *)swift_slowAlloc();
  *v6 = 0;
  *(_QWORD *)(v0 + v5) = v6;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_identifier) = 0;
  ObservationRegistrar.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher__registrar, v4, v1);
  return v0;
}

uint64_t type metadata completion function for CombineLatest4Inner()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for CombineLatest3Inner()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for AbstractZip(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  unint64_t v7;

  v2 = swift_checkMetadataState();
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(a1 + 88);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for Subscribers.Completion(255, v4, AssociatedConformanceWitness, v6);
    v2 = type metadata accessor for Optional();
    if (v7 <= 0x3F)
      return swift_initClassMetadata2();
  }
  return v2;
}

void Publisher.combineLatest<A, B>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[4];

  v27[1] = a8;
  v27[2] = a6;
  v27[3] = a7;
  v27[0] = a9;
  v14 = *(_QWORD *)(a5 - 8);
  v15 = MEMORY[0x1E0C80A78](a1);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v15);
  v22 = (char *)v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v25 + 16))(v24, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a1, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a2, a5);
  Publishers.CombineLatest3.init(_:_:_:)((uint64_t)v24, a3, v27[0]);
}

void Publishers.CombineLatest3.init(_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.CombineLatest3();
}

uint64_t sub_18B57B540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v5 + *(int *)(a1 + 68), v4, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v5 + *(int *)(a1 + 72), v3, v1);
}

void type metadata accessor for Publishers.CombineLatest3()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t destroy for AsyncPublisher.Iterator()
{
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for Publishers.FirstWhere(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.FirstWhere);
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.MapKeyPath3<A, B, C, D>.Inner<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t closure #2 in Publishers.CollectByTime.Inner.receive(completion:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v1 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))((char *)&v10 - v7, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(v1 + 120) + 56))(v8, *(_QWORD *)(v1 + 96));
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t *Publishers.ReplaceError.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 152)), -1, -1);
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 112);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 120));
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(_QWORD *)(*v0 + 128));
  return v0;
}

uint64_t AnySubscriberBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 136) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 152), a1);
  return v2;
}

uint64_t type metadata completion function for AnySubscriberBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t destroy for AnySubscriber()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void one-time initialization function for singleton()
{
  os_unfair_lock_s *v0;
  uint64_t v1;

  qword_1ECECCD60 = (uint64_t)&unk_1E216E108;
  unk_1ECECCD68 = &protocol witness table for Subscriptions._EmptySubscription;
  if (one-time initialization token for lock != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v1 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v0);
    static Subscriptions._EmptySubscription.singleton = v1;
  }
}

uint64_t type metadata completion function for Publishers.DropWhile.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata completion function for AsyncPublisher.Iterator.Inner()
{
  return swift_initClassMetadata2();
}

{
  return type metadata completion function for AsyncPublisher.Iterator.Inner();
}

uint64_t initializeWithCopy for AnySubscriber(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void closure #1 in Publishers.Debounce.Inner.receive(_:)(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[5];
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[48];

  v4 = (_QWORD *)*a1;
  v5 = *(_QWORD *)(*a1 + 112);
  v6 = *(_QWORD *)(*a1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24[3] = swift_getAssociatedConformanceWitness();
  v26 = AssociatedTypeWitness;
  v25 = swift_getAssociatedTypeWitness();
  v24[4] = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v24[2] = (char *)v24 - v8;
  v9 = v4[12];
  v30 = v4[15];
  v31 = v9;
  v10 = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v24 - v14;
  v28 = v10;
  v29 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v13);
  v27 = (char *)v24 - v16;
  v17 = (os_unfair_lock_s *)a1[2];
  os_unfair_lock_lock(v17);
  v18 = (uint64_t)a1 + *(_QWORD *)(*a1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v18, (uint64_t)&v32);
  outlined init with copy of SubscriptionStatus((uint64_t)&v32, (uint64_t)v39);
  LODWORD(v18) = v39[40];
  outlined destroy of SubscriptionStatus((uint64_t)v39);
  outlined destroy of SubscriptionStatus((uint64_t)&v32);
  if (v18 <= 1)
  {
    v24[1] = v17;
    if (*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 + 200)) == a2)
    {
      v19 = (char *)a1 + *(_QWORD *)(*a1 + 192);
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, v11);
      v20 = v29;
      v21 = v28;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v15, 1, v28) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v27, v15, v21);
        swift_beginAccess();
        v23 = v4[13];
        v32 = v4[10];
        v33 = v6;
        v34 = v31;
        v35 = v23;
        v36 = v5;
        v37 = v30;
        v38 = a2;
        type metadata accessor for Publishers.Debounce.Inner.CancellerState();
      }
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    }
    swift_beginAccess();
    v22 = v4[13];
    v32 = v4[10];
    v33 = v6;
    v34 = v31;
    v35 = v22;
    v36 = v5;
    v37 = v30;
    v38 = a2;
    type metadata accessor for Publishers.Debounce.Inner.CancellerState();
  }
  os_unfair_lock_unlock(v17);
}

uint64_t storeEnumTagSinglePayload for FilterProducer.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.CombineLatest3()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for Publishers.CombineLatest4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t AnySubscriberBox.receive(_:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 144) + 48))(a1, *(_QWORD *)(*(_QWORD *)v1 + 136));
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.ReplaceError<A>.Inner<A1>(uint64_t a1)
{
  Publishers.ReplaceError.Inner.receive(_:)(a1);
}

void Publishers.ReplaceError.Inner.receive(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  _BYTE v15[48];

  v2 = v1;
  v4 = *v1;
  v5 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 152));
  os_unfair_lock_lock(v5);
  v6 = (uint64_t)v1 + *(_QWORD *)(*v1 + 128);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)v15);
  v7 = v15[40];
  outlined destroy of SubscriptionStatus((uint64_t)v15);
  if (v7)
    goto LABEL_2;
  v8 = *(_QWORD *)(*v2 + 144);
  v9 = *(uint64_t *)((char *)v2 + v8);
  if (v9 != 0x8000000000000000)
  {
    if (v9 < 0)
    {
      __break(1u);
    }
    else if (v9)
    {
      *(uint64_t *)((char *)v2 + v8) = v9 - 1;
      goto LABEL_8;
    }
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_8:
  os_unfair_lock_unlock(v5);
  v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 + 104) + 48))(a1, *(_QWORD *)(v4 + 88));
  v11 = v10;
  if (v10 == 0x8000000000000000)
  {
    os_unfair_lock_lock(v5);
    v12 = 0x8000000000000000;
    if (*(uint64_t *)((char *)v2 + v8) != 0x8000000000000000)
      goto LABEL_19;
LABEL_2:
    os_unfair_lock_unlock(v5);
    return;
  }
  if (v10 < 0)
    goto LABEL_22;
  if (v10)
  {
    os_unfair_lock_lock(v5);
    v13 = *(uint64_t *)((char *)v2 + v8);
    if (v13 == 0x8000000000000000)
      goto LABEL_2;
    if (((v13 | v11) & 0x8000000000000000) == 0)
    {
      v14 = __OFADD__(v13, v11);
      v12 = v13 + v11;
      if (v14)
      {
        v12 = 0x8000000000000000;
LABEL_19:
        *(uint64_t *)((char *)v2 + v8) = v12;
        goto LABEL_2;
      }
      if ((v12 & 0x8000000000000000) == 0)
        goto LABEL_19;
LABEL_24:
      __break(1u);
      return;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
}

uint64_t destroy for Publishers.Merge6(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(a2[4] - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v10);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(_QWORD *)(a2[5] - 8);
  v13 = (v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t))(v12 + 8))(v13);
  v14 = *(_QWORD *)(v12 + 64);
  v15 = *(_QWORD *)(a2[6] - 8);
  v16 = (v13 + v14 + *(unsigned __int8 *)(v15 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  (*(void (**)(unint64_t))(v15 + 8))(v16);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2[7] - 8) + 8))((v16
                                                                                       + *(_QWORD *)(v15 + 64)
                                                                                       + *(unsigned __int8 *)(*(_QWORD *)(a2[7] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[7] - 8) + 80));
}

uint64_t destroy for Publishers.Merge7(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(a2[4] - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v10);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(_QWORD *)(a2[5] - 8);
  v13 = (v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t))(v12 + 8))(v13);
  v14 = *(_QWORD *)(v12 + 64);
  v15 = *(_QWORD *)(a2[6] - 8);
  v16 = (v13 + v14 + *(unsigned __int8 *)(v15 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  (*(void (**)(unint64_t))(v15 + 8))(v16);
  v17 = *(_QWORD *)(v15 + 64);
  v18 = *(_QWORD *)(a2[7] - 8);
  v19 = (v16 + v17 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  (*(void (**)(unint64_t))(v18 + 8))(v19);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2[8] - 8) + 8))((v19
                                                                                       + *(_QWORD *)(v18 + 64)
                                                                                       + *(unsigned __int8 *)(*(_QWORD *)(a2[8] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[8] - 8) + 80));
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncPublisher<A>(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;

  a3();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v3, a1);
}

uint64_t AsyncThrowingPublisher.makeAsyncIterator()(uint64_t a1)
{
  return AsyncPublisher.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, _QWORD))AsyncThrowingPublisher.Iterator.init(_:));
}

uint64_t AsyncPublisher.makeAsyncIterator()(uint64_t a1, uint64_t (*a2)(char *, uint64_t, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  return a2(v6, v4, *(_QWORD *)(a1 + 24));
}

uint64_t AsyncThrowingPublisher.Iterator.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v9 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner(0, a2, a3, a4);
  v10 = swift_allocObject();
  AsyncThrowingPublisher.Iterator.Inner.init()();
  type metadata accessor for AnyCancellable();
  v14 = v10;
  swift_retain_n();
  v11 = AnyCancellable.__allocating_init<A>(_:)((uint64_t)&v14, v9, (uint64_t)&protocol witness table for AsyncThrowingPublisher<A>.Iterator.Inner);
  v14 = v10;
  v12 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for AsyncThrowingPublisher<A>.Iterator.Inner, v9);
  Publisher.subscribe<A>(_:)((uint64_t)&v14, a2, v9, a3, v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  result = swift_release();
  *a5 = v10;
  a5[1] = v11;
  return result;
}

uint64_t type metadata accessor for AsyncThrowingPublisher.Iterator.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingPublisher.Iterator.Inner);
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.init()()
{
  uint64_t v0;
  _DWORD *v1;

  v1 = (_DWORD *)swift_slowAlloc();
  *v1 = 0;
  *(_QWORD *)(v0 + 16) = v1;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for UnsafeContinuation();
  *(_QWORD *)(v0 + 24) = Array.init()();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 2;
  *(_QWORD *)(v0 + 80) = 0;
  return v0;
}

uint64_t type metadata completion function for Publishers.Output()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Retry()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.IgnoreOutput.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Share()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Buffer()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata completion function for Publishers.Retry.Inner()
{
  type metadata accessor for Publishers.Retry.Inner.State();
}

void Publishers.Retry.Inner.__deallocating_deinit()
{
  Publishers.Retry.Inner.deinit();
}

uint64_t sub_18B57CF38()
{
  return swift_deallocClassInstance();
}

void Publishers.Retry.Inner.deinit()
{
  uint64_t v0;

  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + 16), -1, -1);
  type metadata accessor for Publishers.Retry.Inner.State();
}

uint64_t sub_18B57CF94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  outlined destroy of Subscription?(v2 + *(_QWORD *)(*(_QWORD *)v2 + 128));
  return v2;
}

void Publishers.Retry.Inner.request(_:)()
{
  type metadata accessor for Publishers.Retry.Inner.State();
}

void sub_18B57D01C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_unfair_lock_s *v8;
  char *v9;
  uint64_t TupleTypeMetadata2;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v19 - v6;
  v8 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v8);
  v9 = (char *)v2 + *(_QWORD *)(*v2 + 120);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v9, a1);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v7, 1, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a1);
  if (v11 == 1)
  {
LABEL_13:
    os_unfair_lock_unlock(v8);
    return;
  }
  v12 = *v2;
  v13 = *(_QWORD *)(*v2 + 152);
  v14 = *(_QWORD *)((char *)v2 + v13);
  v15 = 0x8000000000000000;
  if (v14 == 0x8000000000000000)
  {
LABEL_10:
    v16 = (uint64_t)v2 + *(_QWORD *)(v12 + 128);
    swift_beginAccess();
    outlined init with copy of Subscription?(v16, v3 - 192);
    if (*(_QWORD *)(v3 - 168))
    {
      outlined init with take of Subscription((__int128 *)(v3 - 192), v3 - 128);
      os_unfair_lock_unlock(v8);
      v17 = *(_QWORD *)(v3 - 104);
      v18 = *(_QWORD *)(v3 - 96);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 - 128), v17);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 24))(v1, v17, v18);
      __swift_destroy_boxed_opaque_existential_1(v3 - 128);
      return;
    }
    outlined destroy of Subscription?(v3 - 192);
    goto LABEL_13;
  }
  if (v1 == 0x8000000000000000)
  {
LABEL_9:
    *(_QWORD *)((char *)v2 + v13) = v15;
    v12 = *v2;
    goto LABEL_10;
  }
  if ((v14 | v1) < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v15 = v14 + v1;
  if (__OFADD__(v14, v1))
  {
    v15 = 0x8000000000000000;
    goto LABEL_9;
  }
  if ((v15 & 0x8000000000000000) == 0)
    goto LABEL_9;
LABEL_15:
  __break(1u);
}

uint64_t destroy for Publishers.Retry.Inner.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;

  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v3 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = ~v9;
  v11 = *(_QWORD *)(v5 + 64) + v9;
  if (v8 | v6)
  {
    if (v6 >= v8)
    {
      result = (*(uint64_t (**)(uint64_t))(v5 + 48))(a1);
      if (!(_DWORD)result)
      {
LABEL_15:
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))((v11 + a1) & v10, v3);
      }
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))((v11 + a1) & v10, *(unsigned int *)(v7 + 84), v3);
      if (!(_DWORD)result)
        goto LABEL_15;
    }
  }
  else
  {
    v13 = (v11 & ~v9) + *(_QWORD *)(v7 + 64);
    if (!*(_BYTE *)(a1 + v13))
      goto LABEL_15;
    v14 = (*(unsigned __int8 *)(a1 + v13) - 1) << (8 * v13);
    if (v13 > 3)
      v14 = 0;
    if ((_DWORD)v13)
    {
      if (v13 > 3)
        LODWORD(v13) = 4;
      __asm { BR              X11 }
    }
    result = (v14 + 1);
    if (v14 == -1)
      goto LABEL_15;
  }
  return result;
}

void Publishers.Retry.Inner.receive(subscription:)()
{
  type metadata accessor for Publishers.Retry.Inner.State();
}

void sub_18B57D374(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  os_unfair_lock_s *v13;
  char *v14;
  uint64_t TupleTypeMetadata2;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[96];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = &v35[-v7];
  v9 = *(_QWORD *)(v3 - 224);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v6);
  v12 = &v35[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v13);
  v14 = (char *)v1 + *(_QWORD *)(*v1 + 120);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v14, a1);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v8, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, a1);
    os_unfair_lock_unlock(v13);
    v16 = *(_QWORD **)(v3 - 208);
    v18 = v16[3];
    v17 = v16[4];
    __swift_project_boxed_opaque_existential_1(v16, v18);
    (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 8) + 8))(v18);
    return;
  }
  v19 = *(_QWORD **)(v3 - 208);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, &v8[*(int *)(TupleTypeMetadata2 + 48)], v9);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v8, v2);
  v20 = (uint64_t)v1 + *(_QWORD *)(*v1 + 128);
  swift_beginAccess();
  outlined init with copy of Subscription?(v20, v3 - 176);
  v21 = *(_QWORD *)(v3 - 152);
  outlined destroy of Subscription?(v3 - 176);
  v22 = v10;
  v23 = v9;
  v24 = v12;
  if (v21)
  {
    os_unfair_lock_unlock(v13);
    v26 = v19[3];
    v25 = v19[4];
    __swift_project_boxed_opaque_existential_1(v19, v26);
    (*(void (**)(uint64_t))(*(_QWORD *)(v25 + 8) + 8))(v26);
LABEL_11:
    (*(void (**)(_BYTE *, uint64_t))(v22 + 8))(v24, v23);
    return;
  }
  v27 = v19;
  outlined init with copy of Subscription((uint64_t)v19, v3 - 176);
  swift_beginAccess();
  outlined assign with take of Subscription?(v3 - 176, v20);
  swift_endAccess();
  v28 = *(_QWORD *)(*v1 + 144);
  v29 = *(_QWORD *)((char *)v1 + *(_QWORD *)(*v1 + 152));
  v30 = *((unsigned __int8 *)v1 + v28);
  *((_BYTE *)v1 + v28) = 0;
  os_unfair_lock_unlock(v13);
  if (v30 == 1)
  {
    v31 = *(_QWORD *)(v3 - 232);
    *(_QWORD *)(v3 - 152) = *(_QWORD *)(v3 - 240);
    *(_QWORD *)(v3 - 144) = &protocol witness table for Publishers.Retry<A>.Inner<A1>;
    *(_QWORD *)(v3 - 176) = v1;
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 40);
    swift_retain();
    v32(v3 - 176, v23, v31);
    __swift_destroy_boxed_opaque_existential_1(v3 - 176);
  }
  if (v29 == 0x8000000000000000)
  {
LABEL_10:
    v33 = v19[3];
    v34 = v19[4];
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 24))(v29, v33, v34);
    goto LABEL_11;
  }
  if ((v29 & 0x8000000000000000) == 0)
  {
    if (!v29)
      goto LABEL_11;
    goto LABEL_10;
  }
  __break(1u);
}

void type metadata accessor for Publishers.Retry.Inner.State()
{
  JUMPOUT(0x18D77AC60);
}

_BYTE *initializeWithCopy for Publishers.Retry.Inner.State(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  int v16;
  int v17;
  size_t v18;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ~v11;
  v13 = *(_QWORD *)(v7 + 64) + v11;
  v14 = (v13 & ~v11) + *(_QWORD *)(v9 + 64);
  v15 = v10 | v8;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      if (!(*(unsigned int (**)(_BYTE *))(v7 + 48))(a2))
        goto LABEL_19;
    }
    else if (!(*(unsigned int (**)(unint64_t, _QWORD, _QWORD))(v9 + 48))((unint64_t)&a2[v13] & v12, *(unsigned int *)(v9 + 84), *(_QWORD *)(a3 + 24)))
    {
LABEL_19:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((unint64_t)&a1[v13] & v12, (unint64_t)&a2[v13] & v12, v5);
      if (!v15)
        a1[v14] = 0;
      return a1;
    }
  }
  else
  {
    if (!a2[v14])
      goto LABEL_19;
    v16 = (a2[v14] - 1) << (8 * v14);
    if (v14 > 3)
      v16 = 0;
    if ((_DWORD)v14)
    {
      if (v14 <= 3)
        v17 = (v13 & ~(_DWORD)v11) + *(_DWORD *)(v9 + 64);
      else
        v17 = 4;
      __asm { BR              X11 }
    }
    if (v16 == -1)
      goto LABEL_19;
  }
  if (v15)
    v18 = v14;
  else
    v18 = v14 + 1;
  memcpy(a1, a2, v18);
  return a1;
}

uint64_t type metadata completion function for Publishers.Retry.Inner.State()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2 = swift_checkMetadataState();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getTupleTypeLayout2();
      swift_initEnumMetadataSinglePayload();
      return 0;
    }
  }
  return v0;
}

void Publishers.Throttle.Inner.emitToDownstream()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[18];
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v31 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v25 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v24 = (char *)v21 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v21[8] = (char *)v21 - v9;
  v10 = v1[14];
  v11 = v1[11];
  v22 = swift_getAssociatedTypeWitness();
  v21[17] = *(_QWORD *)(v22 - 8);
  v12 = MEMORY[0x1E0C80A78](v22);
  v21[13] = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v21[16] = (char *)v21 - v14;
  v26 = v8;
  v30 = type metadata accessor for Optional();
  v29 = *(_QWORD *)(v30 - 8);
  v15 = MEMORY[0x1E0C80A78](v30);
  v23 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v21[10] = (char *)v21 - v18;
  MEMORY[0x1E0C80A78](v17);
  v28 = (char *)v21 - v19;
  v20 = v1[13];
  v32 = v1[10];
  v33 = v11;
  v34 = v3;
  v35 = v20;
  v36 = v10;
  v37 = v2;
  type metadata accessor for Publishers.Throttle.Inner.State();
}

void sub_18B57DAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v16 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v15 - 384) = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = type metadata accessor for Optional();
  *(_QWORD *)(v15 - 216) = v18;
  *(_QWORD *)(v15 - 240) = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v18);
  v20 = MEMORY[0x1E0C80A78](v19);
  *(_QWORD *)(v15 - 304) = (char *)&a9 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  *(_QWORD *)(v15 - 208) = (char *)&a9 - v23;
  *(_QWORD *)(v15 - 248) = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v22);
  *(_QWORD *)(v15 - 232) = (char *)&a9 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v15 - 136) = v12;
  *(_QWORD *)(v15 - 128) = v11;
  *(_QWORD *)(v15 - 368) = v11;
  *(_QWORD *)(v15 - 224) = v14;
  *(_QWORD *)(v15 - 120) = v14;
  *(_QWORD *)(v15 - 112) = v10;
  *(_QWORD *)(v15 - 360) = v13;
  *(_QWORD *)(v15 - 104) = v13;
  *(_QWORD *)(v15 - 96) = v9;
  *(_QWORD *)(v15 - 312) = v9;
  type metadata accessor for Publishers.Throttle.Inner.Scheduling();
}

void sub_18B57DC18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  os_unfair_lock_s *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *TupleTypeMetadata;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, _QWORD);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  int v35;
  os_unfair_lock_s *v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  void (*v72)(uint64_t, uint64_t);
  BOOL v73;
  uint64_t v74;
  os_unfair_lock_s *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v7 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v80 - v8;
  v10 = *(_QWORD **)(v5 - 192);
  v11 = (os_unfair_lock_s *)v10[2];
  os_unfair_lock_lock(v11);
  v12 = (char *)v10 + *(_QWORD *)(*v10 + 144);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(v4, v12, v2);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v2);
LABEL_7:
    os_unfair_lock_unlock(v11);
    return;
  }
  *(_QWORD *)(v5 - 456) = v12;
  *(_QWORD *)(v5 - 448) = v3;
  *(_QWORD *)(v5 - 440) = v2;
  *(_QWORD *)(v5 - 424) = v1;
  *(_QWORD *)(v5 - 408) = v11;
  v13 = *(_QWORD *)(v5 - 224);
  *(_QWORD *)(v5 - 136) = a1;
  *(_QWORD *)(v5 - 128) = v13;
  v14 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Subscription);
  v15 = *(_QWORD *)(v5 - 216);
  *(_QWORD *)(v5 - 120) = v14;
  *(_QWORD *)(v5 - 112) = v15;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v17 = v4 + TupleTypeMetadata[12];
  v18 = a1;
  v19 = v4 + TupleTypeMetadata[16];
  v20 = v4 + TupleTypeMetadata[20];
  v21 = *(void (**)(char *, uint64_t))(v7 + 32);
  *(_QWORD *)(v5 - 392) = v18;
  v21(v9, v4);
  v22 = *(_QWORD *)(v5 - 248);
  v23 = *(_QWORD *)(v5 - 232);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v23, v17, v13);
  v24 = *(_QWORD *)(v5 - 240);
  v25 = *(_QWORD *)(v5 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v25, v20, v15);
  __swift_destroy_boxed_opaque_existential_1(v19);
  v26 = *(uint64_t **)(v5 - 192);
  v27 = *v26;
  v28 = *(_QWORD *)(*v26 + 176);
  if (*((_BYTE *)v26 + v28) != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v13);
    (*(void (**)(char *, _QWORD))(v7 + 8))(v9, *(_QWORD *)(v5 - 392));
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v15);
    v11 = *(os_unfair_lock_s **)(v5 - 408);
    goto LABEL_7;
  }
  *(_QWORD *)(v5 - 432) = v9;
  *(_QWORD *)(v5 - 464) = v7;
  v29 = v26;
  v30 = (uint64_t)v26 + *(_QWORD *)(v27 + 160);
  swift_beginAccess();
  v31 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 - 264) + 16);
  v32 = *(_QWORD *)(v5 - 272);
  v31(v32, v30, *(_QWORD *)(v5 - 256));
  v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 280) + 48);
  v34 = *(_QWORD *)(v5 - 288);
  v35 = v33(v32, 1, v34);
  v36 = *(os_unfair_lock_s **)(v5 - 408);
  *(_QWORD *)(v5 - 472) = v31;
  if (v35 == 1)
  {
    v37 = v29;
    v38 = 0;
    goto LABEL_13;
  }
  v39 = *(_QWORD *)(*v29 + 152);
  v37 = v29;
  v40 = *(uint64_t *)((char *)v29 + v39);
  if (v40 == 0x8000000000000000)
    goto LABEL_12;
  if (v40 < 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v40)
  {
    *(uint64_t *)((char *)v29 + v39) = v40 - 1;
LABEL_12:
    v38 = 1;
    v41 = *(_QWORD *)(v5 - 400);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 280) + 56))(v41, 1, 1, v34);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 - 264) + 40))(v30, v41, *(_QWORD *)(v5 - 256));
    swift_endAccess();
    goto LABEL_13;
  }
  v38 = 0;
LABEL_13:
  v42 = v37;
  *((_BYTE *)v37 + v28) = 0;
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 296) + 48);
  if (v43(*(_QWORD *)(v5 - 208), 1, *(_QWORD *)(v5 - 200)) == 1)
  {
    v44 = *(_QWORD *)(v5 - 376);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 360) + 40))(*(_QWORD *)(v5 - 368), *(_QWORD *)(v5 - 360));
    v45 = *(_QWORD *)(v5 - 336);
    swift_getAssociatedConformanceWitness();
    v46 = *(_QWORD *)(v5 - 352);
    dispatch thunk of Strideable.advanced(by:)();
    v47 = *(_QWORD *)(v5 - 344);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v44, v45);
    v48 = (uint64_t)v42 + *(_QWORD *)(*v42 + 168);
    swift_beginAccess();
    v49 = v48;
    v34 = *(_QWORD *)(v5 - 288);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 40))(v49, v46, v45);
  }
  else
  {
    v50 = *(_QWORD *)(v5 - 384);
    v51 = *(_QWORD *)(v5 - 440);
    swift_storeEnumTagMultiPayload();
    v52 = *(_QWORD *)(v5 - 456);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 448) + 40))(v52, v50, v51);
  }
  swift_endAccess();
  v53 = *(_QWORD *)(v5 - 304);
  os_unfair_lock_unlock(v36);
  os_unfair_recursive_lock_lock_with_options();
  v54 = *(_QWORD *)(v5 - 200);
  if (!v38)
    goto LABEL_19;
  v55 = *(_QWORD *)(v5 - 328);
  v56 = *(_QWORD *)(v5 - 256);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 - 472))(v55, *(_QWORD *)(v5 - 272), v56);
  if (v33(v55, 1, v34) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 264) + 8))(v55, v56);
LABEL_19:
    v57 = 0;
    goto LABEL_21;
  }
  v58 = *(_QWORD *)(v5 - 280);
  v59 = *(_QWORD *)(v5 - 416);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(v59, v55, v34);
  v57 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 312) + 48))(v59, *(_QWORD *)(v5 - 224));
  v60 = v59;
  v53 = *(_QWORD *)(v5 - 304);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v60, v34);
LABEL_21:
  v61 = *(_QWORD *)(v5 - 216);
  v62 = *(_QWORD *)(v5 - 208);
  v63 = *(_QWORD *)(v5 - 240);
  v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16);
  v64(v53, v62, v61);
  if (v43(v53, 1, v54) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v53, v61);
  }
  else
  {
    v65 = *(_QWORD *)(v5 - 296);
    v66 = *(_QWORD *)(v5 - 320);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v66, v53, v54);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 312) + 56))(v66, *(_QWORD *)(v5 - 224));
    v67 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    v62 = *(_QWORD *)(v5 - 208);
    v68 = v66;
    v63 = *(_QWORD *)(v5 - 240);
    v67(v68, v54);
  }
  os_unfair_recursive_lock_unlock();
  if (v57 == 0x8000000000000000)
  {
    v69 = *(_QWORD *)(v5 - 424);
    v70 = *(_QWORD *)(v5 - 216);
    v64(v69, v62, v70);
    goto LABEL_28;
  }
  if (v57 < 0)
  {
    __break(1u);
    goto LABEL_43;
  }
  v69 = *(_QWORD *)(v5 - 424);
  v70 = *(_QWORD *)(v5 - 216);
  v64(v69, v62, v70);
  if (!v57)
  {
    v72 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
    v72(v69, v70);
    v74 = v70;
    v79 = *(_QWORD *)(v5 - 224);
    goto LABEL_41;
  }
LABEL_28:
  v71 = v43(v69, 1, v54);
  v72 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  v72(v69, v70);
  v73 = v71 == 1;
  v74 = v70;
  if (!v73)
  {
    v79 = *(_QWORD *)(v5 - 224);
LABEL_41:
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 248) + 8))(*(_QWORD *)(v5 - 232), v79);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 464) + 8))(*(_QWORD *)(v5 - 432), *(_QWORD *)(v5 - 392));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 264) + 8))(*(_QWORD *)(v5 - 272), *(_QWORD *)(v5 - 256));
    v72(v62, v74);
    return;
  }
  v75 = *(os_unfair_lock_s **)(v5 - 408);
  os_unfair_lock_lock(v75);
  v76 = *(_QWORD *)(*v42 + 152);
  v77 = *(uint64_t *)((char *)v42 + v76);
  v78 = 0x8000000000000000;
  v79 = *(_QWORD *)(v5 - 224);
  if (v77 == 0x8000000000000000)
  {
LABEL_40:
    os_unfair_lock_unlock(v75);
    goto LABEL_41;
  }
  if (v57 == 0x8000000000000000)
  {
LABEL_39:
    *(uint64_t *)((char *)v42 + v76) = v78;
    goto LABEL_40;
  }
  if ((v77 | v57) < 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v78 = v77 + v57;
  if (__OFADD__(v77, v57))
  {
    v78 = 0x8000000000000000;
    goto LABEL_39;
  }
  if ((v78 & 0x8000000000000000) == 0)
    goto LABEL_39;
LABEL_45:
  __break(1u);
}

uint64_t PassthroughSubject.__deallocating_deinit()
{
  PassthroughSubject.deinit();
  return swift_deallocClassInstance();
}

_QWORD *PassthroughSubject.deinit()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = *v0;
  v3 = *(_QWORD *)((char *)v0 + *(_QWORD *)(*v0 + 136));
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Subscription(v5, (uint64_t)v12);
      v7 = v13;
      v6 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      v5 += 40;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  MEMORY[0x18D77ADB0](v1[2], -1, -1);
  v8 = (char *)v1 + *(_QWORD *)(*v1 + 120);
  type metadata accessor for Subscribers.Completion(255, *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96), v9);
  v10 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  outlined consume of ConduitList<A, Never><A>(*(_QWORD *)((char *)v1 + *(_QWORD *)(*v1 + 128)), *((_BYTE *)v1 + *(_QWORD *)(*v1 + 128) + 8));
  swift_bridgeObjectRelease();
  return v1;
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.ReplaceError<A>.Inner<A1>(uint64_t a1)
{
  Publishers.ReplaceError.Inner.receive(completion:)(a1);
}

void Publishers.ReplaceError.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  unsigned __int8 v22;

  v3 = *(_QWORD **)v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v18[-v9];
  v11 = *(os_unfair_lock_s **)(v1 + v3[19]);
  os_unfair_lock_lock(v11);
  v12 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 128);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v12, (uint64_t)&v19);
  v13 = v22;
  outlined destroy of SubscriptionStatus((uint64_t)&v19);
  if (!v13)
  {
    v14 = *(_QWORD *)(*(_QWORD *)v1 + 136);
    if ((*(_BYTE *)(v1 + v14) & 1) == 0)
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v10, 1, AssociatedTypeWitness) == 1)
      {
        v19 = 1;
        v20 = 0u;
        v21 = 0u;
        v22 = 2;
        swift_beginAccess();
        outlined assign with take of SubscriptionStatus((uint64_t)&v19, v12);
        swift_endAccess();
        os_unfair_lock_unlock(v11);
        LOBYTE(v19) = 1;
        (*(void (**)(uint64_t *, _QWORD))(v3[13] + 56))(&v19, v3[11]);
        return;
      }
      v15 = *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 144));
      if (v15 == 0x8000000000000000)
        goto LABEL_10;
      if (v15 < 0)
      {
        __break(1u);
        return;
      }
      if (v15)
      {
LABEL_10:
        v19 = 1;
        v20 = 0u;
        v21 = 0u;
        v22 = 2;
        swift_beginAccess();
        outlined assign with take of SubscriptionStatus((uint64_t)&v19, v12);
        swift_endAccess();
        os_unfair_lock_unlock(v11);
        v16 = v3[13];
        v17 = v3[11];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 112), v17, v16);
        LOBYTE(v19) = 1;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 56))(&v19, v17, v16);
      }
      else
      {
        *(_BYTE *)(v1 + v14) = 1;
        os_unfair_lock_unlock(v11);
      }
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
      return;
    }
  }
  os_unfair_lock_unlock(v11);
}

void Publisher.merge<A, B, C, D, E, F>(with:_:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int128 a14, __int128 a15, __int128 a16, uint64_t a17)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[4];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;

  v66 = a6;
  v59 = a4;
  v56 = a3;
  v57 = a2;
  v53 = a1;
  v68 = a8;
  v67 = a14;
  v64 = a16;
  v65 = a15;
  v62 = a5;
  v63 = a17;
  v48 = a9;
  v50 = a10;
  v51 = a11;
  v55 = a12;
  v61 = a13;
  v60 = *(_QWORD *)(a13 - 8);
  v18 = MEMORY[0x1E0C80A78](a9);
  v58 = (char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x1E0C80A78](v18);
  v52 = (char *)v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v21);
  v27 = (char *)v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[1] = v27;
  v29 = *(_QWORD *)(v28 - 8);
  v30 = MEMORY[0x1E0C80A78](v25);
  v32 = (char *)v47 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[2] = v32;
  v33 = *(_QWORD *)(v30 - 8);
  v34 = MEMORY[0x1E0C80A78](v30);
  v36 = (char *)v47 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[3] = v36;
  v38 = *(_QWORD *)(v37 - 8);
  v39 = MEMORY[0x1E0C80A78](v34);
  v41 = (char *)v47 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = v42;
  MEMORY[0x1E0C80A78](v39);
  v44 = (char *)v47 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v45 + 16))(v44, v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v41, v53, a7);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v57, v48);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v56, v50);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v59, v51);
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v52, v62, v55);
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v58, v66, v61);
  Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v44, v49, v68);
}

void Publisher.merge<A, B, C, D, E>(with:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, __int128 a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v44 = a7;
  v53 = a3;
  v54 = a4;
  v47 = a2;
  v48 = a1;
  v60 = a8;
  v58 = a13;
  v59 = a12;
  v56 = a14;
  v57 = a5;
  v55 = a15;
  v46 = a9;
  v49 = a10;
  v50 = a11;
  v52 = *(_QWORD *)(a11 - 8);
  v16 = MEMORY[0x1E0C80A78](a1);
  v51 = (char *)v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v16);
  v22 = (char *)v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v20);
  v27 = (char *)v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = v27;
  v29 = *(_QWORD *)(v28 - 8);
  v30 = MEMORY[0x1E0C80A78](v25);
  v32 = (char *)v43 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = MEMORY[0x1E0C80A78](v30);
  v37 = (char *)v43 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v38;
  MEMORY[0x1E0C80A78](v35);
  v40 = (char *)v43 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v41 + 16))(v40, v42);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v37, v48, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v47, v44);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v53, v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v54, v49);
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v57, v50);
  Publishers.Merge6.init(_:_:_:_:_:_:)((uint64_t)v40, v45, v60);
}

uint64_t initializeWithCopy for Publishers.Merge6(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = *(_QWORD *)(a3[5] - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v22, v23);
  v24 = *(_QWORD *)(v19 + 64);
  v25 = *(_QWORD *)(a3[6] - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = v24 + v26;
  v28 = (v27 + v22) & ~v26;
  v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v28, v29);
  v30 = *(_QWORD *)(a3[7] - 8);
  (*(void (**)(unint64_t, unint64_t))(v30 + 16))((*(_QWORD *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80), (*(_QWORD *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
  return a1;
}

uint64_t initializeWithCopy for Publishers.Merge7(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = *(_QWORD *)(a3[5] - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v22, v23);
  v24 = *(_QWORD *)(v19 + 64);
  v25 = *(_QWORD *)(a3[6] - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = v24 + v26;
  v28 = (v27 + v22) & ~v26;
  v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v28, v29);
  v30 = *(_QWORD *)(v25 + 64);
  v31 = *(_QWORD *)(a3[7] - 8);
  v32 = *(unsigned __int8 *)(v31 + 80);
  v33 = v30 + v32;
  v34 = (v33 + v28) & ~v32;
  v35 = (v33 + v29) & ~v32;
  (*(void (**)(uint64_t, uint64_t))(v31 + 16))(v34, v35);
  v36 = *(_QWORD *)(a3[8] - 8);
  (*(void (**)(unint64_t, unint64_t))(v36 + 16))((*(_QWORD *)(v31 + 64) + *(unsigned __int8 *)(v36 + 80) + v34) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80), (*(_QWORD *)(v31 + 64) + *(unsigned __int8 *)(v36 + 80) + v35) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
  return a1;
}

void Publishers.Merge7.init(_:_:_:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.Merge7();
}

uint64_t sub_18B57F0BC(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v4 + a1[33], v1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4 + a1[34], v11, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v4 + a1[35], v12, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v4 + a1[36], v13, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v4 + a1[37], v14, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v4 + a1[38], v15, v3);
}

void type metadata accessor for Publishers.Merge7()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.Merge6.init(_:_:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.Merge6();
}

uint64_t sub_18B57F22C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v3 + a1[29], v7, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3 + a1[30], v10, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + a1[31], v11, v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3 + a1[32], v12, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v3 + a1[33], v13, v2);
}

void type metadata accessor for Publishers.Merge6()
{
  JUMPOUT(0x18D77AC60);
}

void partial apply for closure #1 in Publishers.Timeout.Inner.receive(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  Publishers.Timeout.Inner.scheduledReceive(_:)(v0 + ((v1 + 72) & ~v1));
}

void Publishers.Timeout.Inner.scheduledReceive(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9[2];
  char v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[48];
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  if ((*((_BYTE *)v1 + *(_QWORD *)(*v1 + 192)) & 1) != 0)
    goto LABEL_13;
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 184);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v14);
  outlined init with copy of SubscriptionStatus((uint64_t)v14, (uint64_t)v9);
  if (v10 != 1 && v10)
  {
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    outlined destroy of SubscriptionStatus((uint64_t)v9);
  }
  else
  {
    outlined init with take of Subscription(v9, (uint64_t)&v11);
  }
  outlined destroy of SubscriptionStatus((uint64_t)v14);
  if (!*((_QWORD *)&v12 + 1))
  {
    outlined destroy of Subscription?((uint64_t)&v11);
LABEL_13:
    os_unfair_lock_unlock(v4);
    return;
  }
  outlined init with take of Subscription(&v11, (uint64_t)v15);
  os_unfair_lock_unlock(v4);
  os_unfair_recursive_lock_lock_with_options();
  v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 120) + 48))(a1, *(_QWORD *)(v3 + 96));
  os_unfair_recursive_lock_unlock();
  if (v6 == 0x8000000000000000)
    goto LABEL_10;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (!v6)
    {
LABEL_11:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      return;
    }
LABEL_10:
    v7 = v16;
    v8 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v6, v7, v8);
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t destroy for Publishers.Merge5(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(a2[4] - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v10);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(_QWORD *)(a2[5] - 8);
  v13 = (v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t))(v12 + 8))(v13);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2[6] - 8) + 8))((v13
                                                                                       + *(_QWORD *)(v12 + 64)
                                                                                       + *(unsigned __int8 *)(*(_QWORD *)(a2[6] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[6] - 8) + 80));
}

uint64_t type metadata completion function for Publishers.Buffer.Inner()
{
  uint64_t result;
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  unint64_t v5;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for Subscribers.Completion(255, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
    result = type metadata accessor for Optional();
    if (v5 <= 0x3F)
      return swift_initClassMetadata2();
  }
  return result;
}

void AbstractZip.Side.receive(completion:)(uint64_t a1)
{
  unint64_t *v1;

  AbstractZip.receive(completion:index:)(a1, *v1);
}

void AbstractZip.receive(completion:index:)(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 88);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for Subscribers.Completion(0, v6, AssociatedConformanceWitness, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v21 - v11;
  v13 = *(_QWORD *)(v5 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v13));
  v14 = *v2;
  if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 + 136)) & 1) != 0)
    goto LABEL_11;
  v15 = *(_QWORD *)(v14 + 144);
  if ((*((_BYTE *)v2 + v15) & 1) != 0)
    goto LABEL_11;
  v16 = *(_QWORD *)(v14 + 152);
  if ((*((_BYTE *)v2 + v16) & 1) != 0)
    goto LABEL_11;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v12, 1, v6) != 1)
  {
    *((_BYTE *)v2 + v15) = 1;
    AbstractZip.lockedSendCompletion(completion:)(a1);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return;
  }
  v17 = *(_QWORD *)(*v2 + 160);
  v18 = *(char **)((char *)v2 + v17);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(uint64_t *)((char *)v2 + v17) = (uint64_t)v18;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_8;
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v18 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v18);
  *(uint64_t *)((char *)v2 + v17) = (uint64_t)v18;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_15;
LABEL_8:
  if (*((_QWORD *)v18 + 2) <= a2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[a2 + 32] = 1;
  v20 = *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 120));
  if (*(_QWORD *)(v20 + 16) <= a2)
  {
LABEL_17:
    __break(1u);
    return;
  }
  if (*(_QWORD *)(*(_QWORD *)(v20 + 8 * a2 + 32) + 16))
  {
LABEL_11:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v13));
    return;
  }
  *((_BYTE *)v2 + v16) = 1;
  AbstractZip.lockedSendCompletion(completion:)(a1);
}

uint64_t type metadata completion function for Publishers.Merge6()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              swift_initStructMetadata();
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Delay()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      AssociatedTypeWitness = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_getAssociatedTypeWitness();
        AssociatedTypeWitness = type metadata accessor for Optional();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t type metadata completion function for Publishers.Merge7()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              result = swift_checkMetadataState();
              if (v7 <= 0x3F)
              {
                swift_initStructMetadata();
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void Publishers.Throttle.Inner.__deallocating_deinit()
{
  Publishers.Throttle.Inner.deinit();
}

uint64_t sub_18B57FC90()
{
  return swift_deallocClassInstance();
}

void Publishers.Throttle.Inner.deinit()
{
  uint64_t v0;

  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + 24), -1, -1);
  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + 16), -1, -1);
  type metadata accessor for Publishers.Throttle.Inner.State();
}

uint64_t sub_18B57FD14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 160);
  swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 168);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v5, AssociatedTypeWitness);
  return v1;
}

uint64_t destroy for Publishers.Throttle.Inner.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *(_QWORD *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v37 = *(_QWORD *)(v36 + 64) + v7;
  v38 = AssociatedTypeWitness;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v39 = *(_QWORD *)(v6 + 64) + v10 + (v37 & ~v7) + 1;
  v35 = *(_QWORD *)(v9 + 64);
  v11 = (v39 & ~v10) + v35;
  v12 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(unsigned int *)(v13 + 84);
  if ((_DWORD)v15)
    v16 = *(_QWORD *)(v13 + 64);
  else
    v16 = *(_QWORD *)(v13 + 64) + 1;
  if (v15 >= 2)
    v17 = v16;
  else
    v17 = v16 + 1;
  v18 = v17 + ((v14 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & ~v14);
  if (v18 <= v11)
    v18 = (v39 & ~v10) + v35;
  v19 = *(unsigned __int8 *)(a1 + v18);
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X13 }
  }
  v21 = ~v7;
  v22 = ~v10;
  if (v19 != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(a1, v38);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))((v37 + a1) & v21, v4);
    v23 = (v39 + a1) & v22;
    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    v25 = v8;
    return v24(v23, v25);
  }
  v32 = v16;
  v33 = *(_QWORD *)(v12 - 8);
  v34 = v12;
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(a1, v38);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))((v37 + a1) & v21, v4);
  v27 = (v39 + a1) & v22;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v27, v8);
  v28 = (v35 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  result = __swift_destroy_boxed_opaque_existential_1(v28);
  v29 = (v28 + v14 + 40) & ~v14;
  if (v15 > 1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v29, v15, v34);
    if (result >= 2)
      return result;
  }
  else if (*(_BYTE *)(v29 + v32))
  {
    v30 = (*(unsigned __int8 *)(v29 + v32) - 1) << (8 * v32);
    if (v32 > 3)
      v30 = 0;
    if ((_DWORD)v32)
    {
      if (v32 <= 3)
        v31 = v32;
      else
        v31 = 4;
      __asm { BR              X11 }
    }
    if (v30 != -1)
      return result;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v29, 1, v34);
  if (!(_DWORD)result)
  {
    v25 = v34;
    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8);
    v23 = v29;
    return v24(v23, v25);
  }
  return result;
}

void Publisher.merge<A, B, C, D>(with:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, __int128 a10, __int128 a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v38 = a6;
  v39 = a7;
  v40 = a1;
  v41 = a2;
  v48 = a8;
  v46 = a11;
  v47 = a10;
  v44 = a12;
  v45 = a4;
  v42 = *(_QWORD *)(a9 - 8);
  v43 = a3;
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v13);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v18);
  v25 = (char *)&v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x1E0C80A78](v23);
  v30 = (char *)&v36 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v31;
  MEMORY[0x1E0C80A78](v28);
  v33 = (char *)&v36 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v34 + 16))(v33, v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v30, v40, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, v41, v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v43, v39);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v15, v45, a9);
  Publishers.Merge5.init(_:_:_:_:_:)((uint64_t)v33, v37, v48);
}

void Publishers.Merge5.init(_:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.Merge5();
}

uint64_t sub_18B580424(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v2 + a1[25], v7, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v2 + a1[26], v6, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v2 + a1[27], v3, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v2 + a1[28], v11, v1);
}

void type metadata accessor for Publishers.Merge5()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.CombineLatest3.receive<A>(subscriber:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for CombineLatest3Inner();
}

void sub_18B5805B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  swift_allocObject();
  specialized AbstractCombineLatest.init(downstream:upstreamCount:)(a11, 3);
  swift_retain();
  swift_getTupleTypeMetadata3();
  type metadata accessor for AbstractCombineLatest.Side();
}

void sub_18B58061C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v26;

  v26 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for AbstractCombineLatest<A, B, C>.Side<A1>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&a19, v24, a1, a12, v26);
  swift_release();
  a19 = 1;
  swift_retain();
  a24 = a9;
  type metadata accessor for AbstractCombineLatest.Side();
}

void sub_18B580694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v25;

  v25 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for AbstractCombineLatest<A, B, C>.Side<A1>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&a19, a15, a1, a16, v25);
  swift_release();
  a19 = 2;
  swift_retain();
  a24 = a13;
  type metadata accessor for AbstractCombineLatest.Side();
}

void sub_18B5806F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a11);
  v12 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for AbstractCombineLatest<A, B, C>.Side<A1>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)va, a10, a1, a11, v12);
  swift_release();
  AbstractCombineLatest.subscribe()();
}

uint64_t sub_18B580730()
{
  return swift_release();
}

void type metadata accessor for CombineLatest3Inner()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.Debounce.Inner.__deallocating_deinit()
{
  Publishers.Debounce.Inner.deinit();
}

uint64_t sub_18B580770()
{
  return swift_deallocClassInstance();
}

void Publishers.Debounce.Inner.deinit()
{
  swift_beginAccess();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  type metadata accessor for Publishers.Debounce.Inner.CancellerState();
}

uint64_t type metadata completion function for Publishers.Merge5()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            swift_initStructMetadata();
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Timeout<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.Timeout.Inner.receive(_:)(a1);
}

uint64_t Publishers.Timeout.Inner.receive(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, void (*)(), char *, uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[48];

  v2 = v1;
  v22 = a1;
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 96);
  v23 = *(_QWORD *)(*v1 + 120);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v21 - v7;
  v9 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v9);
  v10 = *(_QWORD *)(*v1 + 192);
  if ((*((_BYTE *)v1 + v10) & 1) != 0
    || (v11 = (uint64_t)v1 + *(_QWORD *)(*v1 + 184),
        swift_beginAccess(),
        outlined init with copy of SubscriptionStatus(v11, (uint64_t)v24),
        LODWORD(v11) = v24[40],
        outlined destroy of SubscriptionStatus((uint64_t)v24),
        (_DWORD)v11))
  {
    os_unfair_lock_unlock(v9);
  }
  else
  {
    v21 = *(char **)(*v2 + 200);
    if (*(_QWORD *)&v21[(_QWORD)v2])
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
    *((_BYTE *)v2 + v10) = 0;
    *(_QWORD *)&v21[(_QWORD)v2] = Publishers.Timeout.Inner.timeoutClock()();
    swift_release();
    os_unfair_lock_unlock(v9);
    v13 = *(_QWORD *)(*v2 + 168);
    v21 = (char *)v2 + *(_QWORD *)(*v2 + 160);
    v14 = (char *)v2 + v13;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v22, AssociatedTypeWitness);
    v15 = (*(unsigned __int8 *)(v6 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v16 = (char *)swift_allocObject();
    *((_QWORD *)v16 + 2) = v3[10];
    v17 = v3[11];
    *((_QWORD *)v16 + 3) = v17;
    *((_QWORD *)v16 + 4) = v4;
    *((_QWORD *)v16 + 5) = v3[13];
    v18 = v3[14];
    v19 = v23;
    *((_QWORD *)v16 + 6) = v18;
    *((_QWORD *)v16 + 7) = v19;
    *((_QWORD *)v16 + 8) = v2;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v16[v15], v8, AssociatedTypeWitness);
    v20 = *(void (**)(char *, void (*)(), char *, uint64_t, uint64_t))(v18 + 56);
    swift_retain();
    v20(v14, partial apply for closure #1 in Publishers.Timeout.Inner.receive(_:), v16, v17, v18);
    swift_release();
  }
  return 0;
}

void protocol witness for Cancellable.cancel() in conformance Publishers.ReplaceError<A>.Inner<A1>()
{
  Publishers.ReplaceError.Inner.cancel()();
}

void Publishers.ReplaceError.Inner.cancel()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = *(os_unfair_lock_s **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  os_unfair_lock_lock(v1);
  v2 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v5, (uint64_t)v9);
    v5 = 1;
    v6 = 0u;
    v7 = 0u;
    v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    v3 = v10;
    v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CombineLatest3<A, B, C>()
{
  Publishers.CombineLatest3.receive<A>(subscriber:)();
}

uint64_t observableObservableObjectAvailableCheck()
{
  return dyld_program_sdk_at_least();
}

uint64_t Publishers.Multicast.__allocating_init(upstream:createSubject:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  Publishers.Multicast.init(upstream:createSubject:)(a1, a2, a3);
  return v6;
}

uint64_t Publishers.Multicast.upstream.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 112));
}

uint64_t Publishers.Multicast.createSubject.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_retain();
  return v1;
}

uint64_t sub_18B581060()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

char *Publishers.Multicast.Inner.__allocating_init(_:)(uint64_t a1)
{
  swift_allocObject();
  return Publishers.Multicast.Inner.init(_:)(a1);
}

uint64_t method lookup function for Publishers.Multicast()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Publishers.Multicast.__allocating_init(upstream:createSubject:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

_QWORD *__swift_memcpy8_4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for os_unfair_recursive_lock_s(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for os_unfair_recursive_lock_s(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1)
{
  type metadata accessor for os_unfair_recursive_lock_s(a1, &lazy cache variable for type metadata for os_unfair_recursive_lock_s);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  type metadata accessor for os_unfair_recursive_lock_s(a1, &lazy cache variable for type metadata for os_unfair_lock_s);
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t Publishers.Multicast.Inner.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v0;
  v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Multicast.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x73616369746C754DLL;
  a1[1] = 0xE900000000000074;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Multicast<A, B>.Inner<A1>()
{
  return 0x73616369746C754DLL;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Multicast<A, B>.Inner<A1>()
{
  return Publishers.Multicast.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Multicast<A, B>.Inner<A1>(_QWORD *a1@<X8>)
{
  Publishers.Multicast.Inner.playgroundDescription.getter(a1);
}

uint64_t static Subscriptions.empty.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for singleton != -1)
    swift_once();
  return outlined init with copy of Subscription((uint64_t)&static Subscriptions._EmptySubscription.singleton, a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Subscriptions._EmptySubscription()
{
  return 0x7974706D45;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Subscriptions._EmptySubscription()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = *v0;
  v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEDFE8], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Subscriptions._EmptySubscription(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x7974706D45;
  a1[1] = 0xE500000000000000;
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Subscriptions._EmptySubscription(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t AnyCancellable.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;

  v4 = swift_allocObject();
  v5 = (_DWORD *)swift_slowAlloc();
  *v5 = 0;
  *(_QWORD *)(v4 + 64) = v5;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_BYTE *)(v4 + 56) = 0;
  return v4;
}

uint64_t AnyCancellable.deinit()
{
  uint64_t v0;

  AnyCancellable.cancel()();
  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + 64), -1, -1);
  outlined destroy of AnyCancellable.Storage(v0 + 16);
  return v0;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18B581574()
{
  swift_release();
  return swift_deallocObject();
}

void AnyCancellable.hash(into:)()
{
  Swift::UInt v0;

  Hasher._combine(_:)(v0);
}

BOOL static AnyCancellable.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

Swift::Int AnyCancellable.hashValue.getter()
{
  Swift::UInt v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyCancellable()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AnyCancellable()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t Cancellable.store(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::UInt v9;
  uint64_t v11;
  Swift::UInt v12;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnyCancellable();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a2);
  v9 = swift_allocObject();
  AnyCancellable.init<A>(_:)((uint64_t)v8, a2, a3);
  specialized Set._Variant.insert(_:)(&v12, v9);
  return swift_release();
}

ValueMetadata *type metadata accessor for Subscriptions()
{
  return &type metadata for Subscriptions;
}

uint64_t method lookup function for AnyCancellable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyCancellable.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of AnyCancellable.__allocating_init<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t assignWithCopy for SubscriptionStatus(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 <= 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v7 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v7 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v8 = *a2;
      v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

ValueMetadata *type metadata accessor for SubscriptionStatus()
{
  return &type metadata for SubscriptionStatus;
}

uint64_t assignWithCopy for AnyCancellable.Storage(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (!v4)
    {
      swift_release();
    }
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v7 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v7 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v8 = *a2;
      v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 40) = 0;
      swift_retain();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionStatus(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SubscriptionStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for AnyCancellable.Storage(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for AnyCancellable.Storage(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnyCancellable.Storage()
{
  return &type metadata for AnyCancellable.Storage;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v13;
  uint64_t v15;

  v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    while (*(_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v10) != a2)
    {
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_5;
    }
    swift_unknownObjectRelease();
    *(_OWORD *)a1 = *(_OWORD *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
    swift_unknownObjectRetain();
    return 0;
  }
  else
  {
LABEL_5:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    *v3 = 0x8000000000000000;
    v13 = swift_unknownObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v13, a3, v10, isUniquelyReferenced_nonNull_native);
    *v3 = v15;
    swift_bridgeObjectRelease();
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a1 + 8) = a3;
    return 1;
  }
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::UInt a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  Swift::UInt v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0)
    goto LABEL_12;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v9 > v8)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v10 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  result = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a3 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v12 = ~v11;
    while (*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * a3) != v7)
    {
      a3 = (a3 + 1) & v12;
      if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
        goto LABEL_12;
    }
    goto LABEL_15;
  }
LABEL_12:
  v13 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v14 = (Swift::UInt *)(*(_QWORD *)(v13 + 48) + 16 * a3);
  *v14 = v7;
  v14[1] = a2;
  v15 = *(_QWORD *)(v13 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (!v16)
  {
    *(_QWORD *)(v13 + 16) = v17;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  __int128 v25;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DebugHook.Handler>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v25 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v25);
    result = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(v4 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v21 = 0;
      v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v23 = v20 == v22;
        if (v20 == v22)
          v20 = 0;
        v21 |= v23;
        v24 = *(_QWORD *)(v11 + 8 * v20);
      }
      while (v24 == -1);
      v12 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12) = v25;
    ++*(_QWORD *)(v4 + 16);
    result = swift_unknownObjectRetain();
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

void *type metadata accessor for Subscriptions._EmptySubscription()
{
  return &unk_1E216E108;
}

uint64_t Publishers.SubscribeOn.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.SubscribeOn.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t Publishers.SubscribeOn.options.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

void sub_18B581FE4()
{
  type metadata accessor for Publishers.SubscribeOn();
}

uint64_t sub_18B582024(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v14 = *(_QWORD *)(v6 + 64);
  v15 = v1;
  v8 = *(_QWORD *)(v1 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2 + v7, v3);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2 + v7 + *(int *)(a1 + 52), v4);
  v10 = v2 + v7 + *(int *)(a1 + 56);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, AssociatedTypeWitness))
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v10, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v2 + ((v7 + v14 + v9) & ~v9), v15);
  return swift_deallocObject();
}

char *Publishers.SubscribeOn.Inner.__allocating_init(_:scheduler:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return Publishers.SubscribeOn.Inner.init(_:scheduler:options:)(a1, a2, a3);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.SubscribeOn<A, B>.Inner<A1>()
{
  return 0x6269726373627553;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.SubscribeOn<A, B>.Inner<A1>(_QWORD *a1@<X8>)
{
  Publishers.SubscribeOn.Inner.playgroundDescription.getter(a1);
}

void Publishers.SubscribeOn.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x6269726373627553;
  a1[1] = 0xEB000000006E4F65;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.SubscribeOn(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  void *v27;
  const void *v28;
  size_t __n;
  uint64_t AssociatedTypeWitness;

  v4 = *(_QWORD *)(a3 + 16);
  v3 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v3 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v5 + 64) + v7;
  v9 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11;
  v13 = v9 + v11;
  v14 = *(_QWORD *)(v10 + 64);
  if (!*(_DWORD *)(v10 + 84))
    ++v14;
  v15 = v7 | *(_DWORD *)(v5 + 80) | v11;
  v16 = (v7 | *(_BYTE *)(v5 + 80) | v11);
  v17 = v15 & 0x100000;
  if (v16 <= 7
    && v14 + ((v13 + (v8 & ~(unint64_t)v7)) & ~v12) <= 0x18
    && v17 == 0)
  {
    __n = v14;
    v22 = ~(unint64_t)v7;
    v23 = ~v12;
    v24 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v21 = a1;
    v24(a1, a2, v4);
    v25 = ((unint64_t)a1 + v8) & v22;
    v26 = ((unint64_t)a2 + v8) & v22;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v25, v26, v3);
    v27 = (void *)((v25 + v13) & v23);
    v28 = (const void *)((v26 + v13) & v23);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v28, 1, AssociatedTypeWitness))
    {
      memcpy(v27, v28, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v27, v28, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v27, 0, 1, AssociatedTypeWitness);
    }
  }
  else
  {
    v20 = *a2;
    *a1 = *a2;
    v21 = (uint64_t *)(v20 + ((v16 + 16) & ~v16));
    swift_retain();
  }
  return v21;
}

uint64_t assignWithCopy for Publishers.SubscribeOn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  size_t v20;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 24))(v10, v11, *(_QWORD *)(a3 + 24));
  v12 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (void *)((v12 + v15 + v10) & ~v15);
  v17 = (void *)((v12 + v15 + v11) & ~v15);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v10) = v18(v16, 1, AssociatedTypeWitness);
  v19 = v18(v17, 1, AssociatedTypeWitness);
  if ((_DWORD)v10)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v16, v17, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v16, v17, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v14 + 84))
    v20 = *(_QWORD *)(v14 + 64);
  else
    v20 = *(_QWORD *)(v14 + 64) + 1;
  memcpy(v16, v17, v20);
  return a1;
}

uint64_t initializeWithTake for Publishers.SubscribeOn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  size_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 32))(v10, v11, *(_QWORD *)(a3 + 24));
  v12 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v12 + v15;
  v17 = (void *)((v12 + v15 + v10) & ~v15);
  v18 = (const void *)((v16 + v11) & ~v15);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v18, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v14 + 84))
      v19 = *(_QWORD *)(v14 + 64);
    else
      v19 = *(_QWORD *)(v14 + 64) + 1;
    memcpy(v17, v18, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v17, v18, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t assignWithTake for Publishers.SubscribeOn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  size_t v20;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 40))(v10, v11, *(_QWORD *)(a3 + 24));
  v12 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (void *)((v12 + v15 + v10) & ~v15);
  v17 = (void *)((v12 + v15 + v11) & ~v15);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v10) = v18(v16, 1, AssociatedTypeWitness);
  v19 = v18(v17, 1, AssociatedTypeWitness);
  if ((_DWORD)v10)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v16, v17, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v16, v17, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v14 + 84))
    v20 = *(_QWORD *)(v14 + 64);
  else
    v20 = *(_QWORD *)(v14 + 64) + 1;
  memcpy(v16, v17, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.SubscribeOn(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v8)
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = *(_DWORD *)(v9 + 84);
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v13 = *(_DWORD *)(v12 + 84);
  v14 = v13 - 1;
  if (!v13)
    v14 = 0;
  if (v14 <= v11)
    v14 = v11;
  if (v13)
    v15 = *(_QWORD *)(v12 + 64);
  else
    v15 = *(_QWORD *)(v12 + 64) + 1;
  if (!a2)
    return 0;
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = *(_QWORD *)(v7 + 64) + v16;
  v18 = *(_QWORD *)(v9 + 64);
  v19 = *(unsigned __int8 *)(v12 + 80);
  if (a2 <= v14)
    goto LABEL_30;
  v20 = v15 + ((v18 + v19 + (v17 & ~v16)) & ~v19);
  v21 = 8 * v20;
  if (v20 > 3)
    goto LABEL_14;
  v23 = ((a2 - v14 + ~(-1 << v21)) >> v21) + 1;
  if (HIWORD(v23))
  {
    v22 = *(_DWORD *)(a1 + v20);
    if (!v22)
      goto LABEL_30;
    goto LABEL_21;
  }
  if (v23 > 0xFF)
  {
    v22 = *(unsigned __int16 *)(a1 + v20);
    if (!*(_WORD *)(a1 + v20))
      goto LABEL_30;
    goto LABEL_21;
  }
  if (v23 >= 2)
  {
LABEL_14:
    v22 = *(unsigned __int8 *)(a1 + v20);
    if (!*(_BYTE *)(a1 + v20))
      goto LABEL_30;
LABEL_21:
    v24 = (v22 - 1) << v21;
    if (v20 > 3)
      v24 = 0;
    if ((_DWORD)v20)
    {
      if (v20 <= 3)
        v25 = v20;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    return v14 + v24 + 1;
  }
LABEL_30:
  if (!v14)
    return 0;
  if ((_DWORD)v8 == v14)
  {
    v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v27 = a1;
    v28 = v8;
    v29 = v6;
    return v26(v27, v28, v29);
  }
  v27 = (v17 + a1) & ~v16;
  if ((_DWORD)v10 == v14)
  {
    v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v28 = v10;
    v29 = v5;
    return v26(v27, v28, v29);
  }
  v30 = (*(uint64_t (**)(uint64_t))(v12 + 48))((v27 + v18 + v19) & ~v19);
  if (v30 >= 2)
    return v30 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for Publishers.SubscribeOn(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v8 + 84) <= *(_DWORD *)(v7 + 84))
    v9 = *(_DWORD *)(v7 + 84);
  else
    v9 = *(_DWORD *)(v8 + 84);
  v10 = 0u;
  v11 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v12 = *(_DWORD *)(v11 + 84);
  v13 = v12 - 1;
  if (!v12)
    v13 = 0;
  if (v13 <= v9)
    v14 = v9;
  else
    v14 = v13;
  v15 = *(unsigned __int8 *)(v8 + 80);
  v18 = *(unsigned __int8 *)(v11 + 80);
  if (v12)
    v19 = *(_QWORD *)(v11 + 64);
  else
    v19 = *(_QWORD *)(v11 + 64) + 1;
  v17 = *(_QWORD *)(v8 + 64);
  v16 = *(_QWORD *)(v7 + 64) + v15;
  v20 = ((v17 + v18 + (v16 & ~(_DWORD)v15)) & ~(_DWORD)v18) + v19;
  if (a3 > v14)
  {
    if (v20 > 3)
    {
      v10 = 1u;
      if (v14 >= a2)
LABEL_28:
        __asm { BR              X0 }
LABEL_21:
      v22 = ~v14 + a2;
      if (v20 < 4)
      {
        if (v20)
        {
          v23 = v22 & ~(-1 << (8 * v20));
          bzero(a1, ((v17 + v18 + (v16 & ~v15)) & ~v18) + v19);
          if (v20 == 3)
          {
            *(_WORD *)a1 = v23;
            a1[2] = BYTE2(v23);
          }
          else if (v20 == 2)
          {
            *(_WORD *)a1 = v23;
          }
          else
          {
            *a1 = v23;
          }
        }
      }
      else
      {
        bzero(a1, ((v17 + v18 + (v16 & ~v15)) & ~v18) + v19);
        *(_DWORD *)a1 = v22;
      }
      __asm { BR              X10 }
    }
    v21 = ((a3 - v14 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
    if (HIWORD(v21))
    {
      v10 = 4u;
      if (v14 >= a2)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v21 >= 0x100)
      v10 = 2;
    else
      v10 = v21 > 1;
  }
  if (v14 >= a2)
    goto LABEL_28;
  goto LABEL_21;
}

void sub_18B582CB0()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 + v1) = v0;
}

void sub_18B582CB8()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v2 + v1) = v0;
}

void sub_18B582D10()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_18B582D20()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_18B582D28()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_18B582D34()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_18B582D58()
{
  return objectdestroy_5Tm();
}

uint64_t sub_18B582D60()
{
  return objectdestroy_5Tm();
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  return swift_deallocObject();
}

uint64_t FilterProducer.description.getter()
{
  return 0x72507265746C6946;
}

void FilterProducer.customMirror.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;

  v1 = *v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18B5F41E0;
  *(_QWORD *)(v6 + 32) = 0x657274736E776F64;
  *(_QWORD *)(v6 + 40) = 0xEA00000000006D61;
  v7 = (char *)v0 + *(_QWORD *)(v1 + 144);
  v8 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v6 + 72) = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v6 + 48));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(boxed_opaque_existential_1, v7, v8);
  v10 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
  v11 = v8;
  v12 = *(_OWORD *)(v1 + 88);
  v13 = *(_OWORD *)(v1 + 104);
  v14 = *(_OWORD *)(v1 + 120);
  type metadata accessor for FilterProducer();
}

uint64_t sub_18B582F14()
{
  uint64_t v0;

  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v0);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t FilterProducer.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 168))();
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = result;
  a1[1] = v4;
  return result;
}

void FilterProducer.__deallocating_deinit()
{
  FilterProducer.deinit();
}

uint64_t sub_18B582FA4()
{
  return swift_deallocClassInstance();
}

void FilterProducer.receive(newValue:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void FilterProducer.receive(completion:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v20 = a1;
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  v4 = *(_QWORD *)(*v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v18[3] = (char *)v18 - v7;
  v8 = *(_QWORD *)(v2 + 104);
  v24 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v6);
  v18[1] = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v18[2] = (char *)v18 - v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v26 = AssociatedTypeWitness;
  v23 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v22 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v21 = (char *)v18 - v14;
  v15 = *(_QWORD *)(v2 + 128);
  v19 = type metadata accessor for Subscribers.Completion(0, v8, v15, v16);
  MEMORY[0x1E0C80A78](v19);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(_QWORD *)(v2 + 152)));
  swift_beginAccess();
  v17 = *(_QWORD *)(v2 + 112);
  v27 = v4;
  v28 = v4;
  v29 = *(_OWORD *)(v2 + 88);
  v30 = v8;
  v31 = v17;
  v32 = v3;
  v33 = v15;
  type metadata accessor for FilterProducer.State();
}

void sub_18B583220(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7 - 168, v2, a1);
  v10 = *(_QWORD *)(v7 - 144);
  if (v10 == 1)
  {
    os_unfair_lock_unlock(v6);
  }
  else if (v10)
  {
    *(_QWORD *)(v7 - 208) = 0;
    *(_QWORD *)(v7 - 200) = 0;
    *(_QWORD *)(v7 - 192) = 0;
    *(_OWORD *)(v7 - 184) = xmmword_18B5F41F0;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v2, v7 - 208, a1);
    swift_endAccess();
    os_unfair_lock_unlock(v6);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v1 + 16))(v3, *(_QWORD *)(v7 - 296), *(_QWORD *)(v7 - 304));
    v11 = *(_QWORD *)(v7 - 264);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v3, 1, v4) == 1)
    {
      v12 = *(_QWORD *)(v7 - 288);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7 - 256) + 56))(v12, 1, 1, *(_QWORD *)(v7 - 248));
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 56))(v12, *(_QWORD *)(v7 - 240), v5);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 280) + 8))(v12, *(_QWORD *)(v7 - 272));
    }
    else
    {
      v13 = *(_QWORD *)(v7 - 320);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v13, v3, v4);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v11 + 16))(*(_QWORD *)(v7 - 328), v13, v4);
      *(_QWORD *)(v7 - 296) = v9;
      v14 = *(_QWORD *)(v7 - 312);
      v15 = *(_QWORD *)(v7 - 248);
      swift_dynamicCast();
      v16 = *(_QWORD *)(v7 - 256);
      v17 = *(_QWORD *)(v7 - 288);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v17, v14, v15);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v17, 0, 1, v15);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 56))(v17, *(_QWORD *)(v7 - 240), v5);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 280) + 8))(v17, *(_QWORD *)(v7 - 272));
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v4);
      v18 = v14;
      v9 = *(_QWORD *)(v7 - 296);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v15);
    }
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7 - 168, a1);
  }
  else
  {
    os_unfair_lock_unlock(v6);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t assignWithCopy for FilterProducer.State(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t getEnumTag for FilterProducer.State(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double destructiveInjectEnumTag for FilterProducer.State(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

void protocol witness for Subscriber.receive(completion:) in conformance FilterProducer<A, B, C, D, E>(uint64_t a1)
{
  FilterProducer.receive(completion:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FilterProducer<A, B, C, D, E>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance FilterProducer<A, B, C, D, E>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance FilterProducer<A, B, C, D, E>@<X0>(uint64_t *a1@<X8>)
{
  return FilterProducer.playgroundDescription.getter(a1);
}

void Publisher.measureInterval<A>(using:options:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD v20[4];

  v12 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v13);
  v19 = (char *)v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a6, v19, a2);
  v20[0] = a2;
  v20[1] = a3;
  v20[2] = a4;
  v20[3] = a5;
  type metadata accessor for Publishers.MeasureInterval();
}

uint64_t sub_18B58387C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void Publishers.MeasureInterval.init(upstream:scheduler:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for Publishers.MeasureInterval();
}

uint64_t sub_18B58390C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void type metadata accessor for Publishers.MeasureInterval()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.MeasureInterval.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.MeasureInterval.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

void Publishers.MeasureInterval.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v1);
  type metadata accessor for Publishers.MeasureInterval.Inner();
}

uint64_t sub_18B583A34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v8, v5, v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v7, *(_QWORD *)(v10 - 152) + *(int *)(v4 + 52), v6);
  swift_allocObject();
  *(_QWORD *)(v10 - 128) = Publishers.MeasureInterval.Inner.init(_:scheduler:)(v8, v7);
  v12 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.MeasureInterval<A, B>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v10 - 128, v3, a1, *(_QWORD *)(v10 - 144), v12);
  return swift_release();
}

void type metadata accessor for Publishers.MeasureInterval.Inner()
{
  JUMPOUT(0x18D77AC60);
}

char *Publishers.MeasureInterval.Inner.__allocating_init(_:scheduler:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return Publishers.MeasureInterval.Inner.init(_:scheduler:)(a1, a2);
}

char *Publishers.MeasureInterval.Inner.init(_:scheduler:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  _DWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;

  v5 = *(_QWORD *)v2;
  v6 = (_DWORD *)swift_slowAlloc();
  *v6 = 0;
  *((_QWORD *)v2 + 2) = v6;
  v7 = &v2[*(_QWORD *)(*(_QWORD *)v2 + 152)];
  *((_QWORD *)v7 + 4) = 0;
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[40] = 2;
  v8 = &v2[*(_QWORD *)(*(_QWORD *)v2 + 160)];
  v9 = *(_QWORD *)(v5 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v8, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 96) - 8) + 32))(&v2[*(_QWORD *)(*(_QWORD *)v2 + 136)], a1);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(&v2[*(_QWORD *)(*(_QWORD *)v2 + 144)], a2, v9);
  return v2;
}

char *Publishers.MeasureInterval.Inner.deinit()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;

  v1 = *(_QWORD *)v0;
  MEMORY[0x18D77ADB0](*((_QWORD *)v0 + 2), -1, -1);
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 96) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 136)]);
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 144)], *(_QWORD *)(v1 + 88));
  outlined destroy of SubscriptionStatus((uint64_t)&v0[*(_QWORD *)(*(_QWORD *)v0 + 152)]);
  v2 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 160)];
  swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t Publishers.MeasureInterval.Inner.__deallocating_deinit()
{
  Publishers.MeasureInterval.Inner.deinit();
  return swift_deallocClassInstance();
}

void Publishers.MeasureInterval.Inner.request(_:)(uint64_t a1)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7[2];
  char v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 152);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(v3);
    v5 = v10;
    v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

void Publishers.MeasureInterval.Inner.cancel()()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5[2];
  char v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 152);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)v5);
  if (v6)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v5);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription(v5, (uint64_t)v7);
    Publishers.MeasureInterval.Inner.locked_terminate()();
    os_unfair_lock_unlock(v1);
    v3 = v8;
    v4 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
}

uint64_t Publishers.MeasureInterval.Inner.receive(subscription:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[48];
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  char v34;

  v2 = v1;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 88);
  v24 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)&v25 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v23 - v12;
  v14 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v14);
  v15 = (uint64_t)v2 + *(_QWORD *)(*v2 + 152);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v15, (uint64_t)&v31);
  if (v34 == 2)
  {
    v16 = vorrq_s8(v32, v33);
    if (!(*(_QWORD *)&vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)) | v31))
    {
      outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v26);
      LOBYTE(v29) = 0;
      outlined init with take of SubscriptionStatus((uint64_t)v26, (uint64_t)v30);
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)v30, v15);
      swift_endAccess();
      v20 = v24;
      (*(void (**)(_QWORD, uint64_t))(v24 + 40))(v25, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v13, 0, 1, AssociatedTypeWitness);
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
      v21 = (char *)v2 + *(_QWORD *)(*v2 + 160);
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v21, v11, v7);
      swift_endAccess();
      os_unfair_lock_unlock(v14);
      v22 = *(_QWORD *)(v4 + 120);
      v26[0] = *(_QWORD *)(v4 + 80);
      v26[1] = v25;
      v25 = *(_OWORD *)(v4 + 96);
      v27 = v25;
      v28 = v20;
      v29 = v22;
      type metadata accessor for Publishers.MeasureInterval.Inner();
    }
  }
  os_unfair_lock_unlock(v14);
  v17 = a1[3];
  v18 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v17);
  (*(void (**)(uint64_t))(*(_QWORD *)(v18 + 8) + 8))(v17);
  return outlined destroy of SubscriptionStatus((uint64_t)&v31);
}

void Publishers.MeasureInterval.Inner.receive(completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  _BYTE v6[48];

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 152);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v6);
  LODWORD(v5) = v6[40];
  outlined destroy of SubscriptionStatus((uint64_t)v6);
  if ((_DWORD)v5)
  {
    os_unfair_lock_unlock(v4);
  }
  else
  {
    Publishers.MeasureInterval.Inner.locked_terminate()();
    os_unfair_lock_unlock(v4);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 120) + 56))(a1, *(_QWORD *)(v3 + 96));
  }
}

uint64_t Publishers.MeasureInterval.Inner.locked_terminate()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char v14;

  v1 = *v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v10 - v5;
  v11 = 1;
  v12 = 0u;
  v13 = 0u;
  v14 = 2;
  v7 = (uint64_t)v0 + *(_QWORD *)(v1 + 152);
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v11, v7);
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v6, 1, 1, AssociatedTypeWitness);
  v8 = (uint64_t)v0 + *(_QWORD *)(*v0 + 160);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v8, v6, v3);
  return swift_endAccess();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.MeasureInterval<A, B>.Inner<A1>(_QWORD *a1)
{
  return Publishers.MeasureInterval.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.MeasureInterval<A, B>.Inner<A1>()
{
  return specialized Publishers.MeasureInterval.Inner.receive(_:)();
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.MeasureInterval<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.MeasureInterval.Inner.receive(completion:)(a1);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.MeasureInterval<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.MeasureInterval.Inner.request(_:)(a1);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.MeasureInterval<A, B>.Inner<A1>()
{
  Publishers.MeasureInterval.Inner.cancel()();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MeasureInterval<A, B>(uint64_t a1)
{
  Publishers.MeasureInterval.receive<A>(subscriber:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MeasureInterval(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v10 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & (unint64_t)~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v14, ((unint64_t)a2 + v9) & v14, v5);
  }
  return v4;
}

uint64_t assignWithCopy for Publishers.MeasureInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.MeasureInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.MeasureInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MeasureInterval(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18B584728 + 4 * byte_18B5F4338[v17 - 1]))();
}

void storeEnumTagSinglePayload for Publishers.MeasureInterval(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata completion function for Publishers.MeasureInterval.Inner()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v0 = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      v0 = type metadata accessor for Optional();
      if (v3 <= 0x3F)
        return swift_initClassMetadata2();
    }
  }
  return v0;
}

void Publishers.MeasureInterval.Inner.customMirror.getter()
{
  _QWORD *v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[3];
  _QWORD *v9;

  v1 = (_OWORD *)*v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0;
  v6 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v1[6];
  v8[0] = v1[5];
  v8[1] = v7;
  v8[2] = v1[7];
  type metadata accessor for Publishers.MeasureInterval.Inner();
}

uint64_t sub_18B584B68()
{
  uint64_t v0;

  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v0);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.MeasureInterval.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x496572757361654DLL;
  a1[1] = 0xEF6C61767265746ELL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.MeasureInterval<A, B>.Inner<A1>()
{
  return 0x496572757361654DLL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.MeasureInterval<A, B>.Inner<A1>()
{
  Publishers.MeasureInterval.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.MeasureInterval<A, B>.Inner<A1>(_QWORD *a1@<X8>)
{
  Publishers.MeasureInterval.Inner.playgroundDescription.getter(a1);
}

uint64_t specialized Publishers.MeasureInterval.Inner.receive(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t AssociatedTypeWitness;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_unfair_lock_t v61;
  __int128 v62[2];
  char v63;
  _QWORD v64[3];
  uint64_t v65;
  uint64_t v66;

  v1 = v0;
  v2 = *v0;
  v3 = *(_QWORD *)(*v0 + 96);
  v55 = *(_QWORD *)(*v0 + 120);
  v54 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v57 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v56 = (char *)&v48 - v4;
  v5 = *(_QWORD *)(v2 + 88);
  v58 = *(_QWORD *)(v2 + 112);
  v6 = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v59 = *(_QWORD *)(v7 - 8);
  v60 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v48 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v48 - v15;
  v17 = *(_QWORD *)(v6 - 8);
  v18 = MEMORY[0x1E0C80A78](v14);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v48 - v21;
  v61 = (os_unfair_lock_t)v1[2];
  os_unfair_lock_lock(v61);
  v23 = (uint64_t)v1 + *(_QWORD *)(*v1 + 152);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v23, (uint64_t)v62);
  if (v63)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v62);
LABEL_5:
    os_unfair_lock_unlock(v61);
    return 0;
  }
  v48 = v13;
  v49 = v10;
  v52 = v5;
  v24 = v58;
  v50 = v22;
  v51 = v20;
  outlined init with take of Subscription(v62, (uint64_t)v64);
  v25 = (char *)v1 + *(_QWORD *)(*v1 + 160);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v16, v25, v60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v16, v60);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
    goto LABEL_5;
  }
  v27 = v50;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v50, v16, v6);
  v28 = v51;
  (*(void (**)(uint64_t, uint64_t))(v24 + 40))(v52, v24);
  v29 = v48;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v48, v28, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v29, 0, 1, v6);
  v30 = v59;
  v31 = v49;
  v32 = v29;
  v33 = v60;
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v49, v32, v60);
  swift_beginAccess();
  v34 = v25;
  v35 = v27;
  (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v34, v31, v33);
  swift_endAccess();
  os_unfair_lock_unlock(v61);
  swift_getAssociatedConformanceWitness();
  v36 = v56;
  dispatch thunk of Strideable.distance(to:)();
  result = (*(uint64_t (**)(char *, uint64_t))(v55 + 48))(v36, v54);
  v37 = result;
  v38 = AssociatedTypeWitness;
  v39 = v57;
  if (result == 0x8000000000000000)
    goto LABEL_10;
  if ((result & 0x8000000000000000) == 0)
  {
    if (!result)
    {
LABEL_11:
      (*(void (**)(char *, uint64_t))(v39 + 8))(v36, v38);
      v47 = *(void (**)(char *, uint64_t))(v17 + 8);
      v47(v28, v6);
      v47(v35, v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
      return 0;
    }
LABEL_10:
    v40 = v6;
    v41 = v17;
    v42 = v65;
    v43 = v66;
    __swift_project_boxed_opaque_existential_1(v64, v65);
    v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 24);
    v45 = v42;
    v17 = v41;
    v6 = v40;
    v35 = v50;
    v46 = v43;
    v28 = v51;
    v44(v37, v45, v46);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t Publishers.DropWhile.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.DropWhile, a6);
}

uint64_t Publisher.tryDrop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.TryDropWhile, a5);
}

uint64_t Publishers.TryDropWhile.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.TryDropWhile, a6);
}

uint64_t Publishers.DropWhile.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(_QWORD, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;
  _QWORD *v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a7, a1, a4);
  result = a6(0, a4, a5);
  v14 = (_QWORD *)(a7 + *(int *)(result + 36));
  *v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t type metadata accessor for Publishers.TryDropWhile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.TryDropWhile);
}

uint64_t Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Publishers.DropWhile.Inner.init(downstream:predicate:));
}

void Publishers.DropWhile.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x6C696857706F7244;
  a1[1] = 0xE900000000000065;
}

uint64_t *Publishers.DropWhile.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 144)), -1, -1);
  outlined destroy of SubscriptionStatus((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 120));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 128)));
  return v0;
}

uint64_t Publishers.DropWhile.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.DropWhile.Inner.deinit);
}

void Publishers.DropWhile.Inner.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v1));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v0 + 16, (uint64_t)&v6);
  if (v9)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v6);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v6, (uint64_t)v10);
    v6 = 1;
    v7 = 0u;
    v8 = 0u;
    v9 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v6, v0 + 16);
    swift_endAccess();
    v2 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
    v3 = *v2;
    *v2 = 0;
    v2[1] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v3);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
    v4 = v11;
    v5 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
}

void Publishers.DropWhile.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  unsigned __int8 v11;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)&v8);
  v5 = v11;
  outlined destroy of SubscriptionStatus((uint64_t)&v8);
  if (v5)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
  }
  else
  {
    v8 = 1;
    v9 = 0u;
    v10 = 0u;
    v11 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v8, (uint64_t)(v1 + 2));
    swift_endAccess();
    v6 = (uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 128));
    v7 = *v6;
    *v6 = 0;
    v6[1] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v7);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 104) + 56))(a1, *(_QWORD *)(v3 + 88));
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.DropWhile<A>.Inner<A1>(uint64_t a1)
{
  Publishers.DropWhile.Inner.receive(completion:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.DropWhile<A>.Inner<A1>()
{
  return 0x6C696857706F7244;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.DropWhile<A>.Inner<A1>(_QWORD *a1@<X8>)
{
  Publishers.DropWhile.Inner.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.DropWhile<A>.Inner<A1>()
{
  Publishers.DropWhile.Inner.cancel()();
}

uint64_t Publishers.TryDropWhile.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.DropWhile.predicate.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 36));
  swift_retain();
  return v2;
}

uint64_t Publishers.TryDropWhile.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.DropWhile.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t)type metadata accessor for Publishers.TryDropWhile.Inner, (uint64_t (*)(char *, uint64_t, uint64_t))Publishers.TryDropWhile.Inner.init(downstream:predicate:), (uint64_t)&protocol conformance descriptor for Publishers.TryDropWhile<A>.Inner<A1>);
}

void type metadata accessor for Publishers.TryDropWhile.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.TryDropWhile.Inner.__allocating_init(downstream:predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Publishers.TryDropWhile.Inner.init(downstream:predicate:));
}

uint64_t Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  swift_allocObject();
  return a4(a1, a2, a3);
}

void Publishers.TryDropWhile.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEA968];
  strcpy((char *)a1, "TryDropWhile");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t *Publishers.TryDropWhile.Inner.init(downstream:predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = *v3;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  v3[6] = 0;
  *((_BYTE *)v3 + 56) = 2;
  v8 = (uint64_t *)((char *)v3 + *(_QWORD *)(v7 + 128));
  *v8 = 0;
  v8[1] = 0;
  *((_BYTE *)v3 + *(_QWORD *)(*v3 + 136)) = 1;
  *((_BYTE *)v3 + *(_QWORD *)(*v3 + 144)) = 0;
  v9 = *(_QWORD *)(*v3 + 152);
  v10 = (_DWORD *)swift_slowAlloc();
  *v10 = 0;
  *(uint64_t *)((char *)v3 + v9) = (uint64_t)v10;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 88) - 8) + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 120), a1);
  v11 = (uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 128));
  v12 = *v11;
  *v11 = a2;
  v11[1] = a3;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v12);
  return v3;
}

uint64_t *Publishers.TryDropWhile.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 152)), -1, -1);
  outlined destroy of SubscriptionStatus((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 120));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 128)));
  return v0;
}

uint64_t Publishers.TryDropWhile.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.TryDropWhile.Inner.deinit);
}

void Publishers.TryDropWhile.Inner.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v1));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v0 + 16, (uint64_t)&v6);
  if (v9)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v6);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v6, (uint64_t)v10);
    v6 = 1;
    v7 = 0u;
    v8 = 0u;
    v9 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v6, v0 + 16);
    swift_endAccess();
    v2 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
    v3 = *v2;
    *v2 = 0;
    v2[1] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v3);
    *(_BYTE *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144)) = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
    v4 = v11;
    v5 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
}

void Publishers.TryDropWhile.Inner.request(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6[2];
  char v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  if (a1 == 0x8000000000000000)
    goto LABEL_4;
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (!a1)
  {
LABEL_9:
    __break(1u);
    return;
  }
LABEL_4:
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 16, (uint64_t)v6);
  if (v7)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v6);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
  }
  else
  {
    outlined init with take of Subscription(v6, (uint64_t)v8);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    v4 = v9;
    v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
}

uint64_t Publishers.TryDropWhile.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  void (*v10)(uint64_t **, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  char v15;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)&v12);
  if (v15 == 2
    && (v5 = vorrq_s8(v13, v14),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | (unint64_t)v12)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v12);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v12);
    v15 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v12, (uint64_t)(v1 + 2));
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    v14.i64[0] = v3;
    v14.i64[1] = (uint64_t)&protocol witness table for Publishers.TryDropWhile<A>.Inner<A1>;
    v12 = v1;
    v9 = *(_QWORD *)(v3 + 104);
    v10 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v9 + 40);
    v11 = *(_QWORD *)(v3 + 88);
    swift_retain();
    v10(&v12, v11, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v12);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    v7 = a1[3];
    v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
  }
}

uint64_t Publishers.TryDropWhile.Inner.receive(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  _QWORD v14[5];
  unsigned __int8 v15;

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v5));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)v14);
  v6 = v15;
  outlined destroy of SubscriptionStatus((uint64_t)v14);
  if (v6 || (v9 = *(uint64_t (**)(uint64_t))((char *)v1 + *(_QWORD *)(*v1 + 128))) == 0)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v5));
    return 0;
  }
  else
  {
    v10 = *(_QWORD *)(*v1 + 136);
    if (*((_BYTE *)v1 + v10) == 1)
    {
      v11 = *(os_unfair_lock_s **)((char *)v1 + v5);
      swift_retain();
      os_unfair_lock_unlock(v11);
      if ((v9(a1) & 1) != 0)
      {
        _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v9);
        return 1;
      }
      os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v5));
      *((_BYTE *)v2 + v10) = 0;
      v13 = *(os_unfair_lock_s **)((char *)v2 + v5);
    }
    else
    {
      v12 = *(os_unfair_lock_s **)((char *)v1 + v5);
      swift_retain();
      v13 = v12;
    }
    os_unfair_lock_unlock(v13);
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 + 104) + 48))(a1, *(_QWORD *)(v4 + 88));
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v9);
  }
  return v7;
}

void Publishers.TryDropWhile.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  unsigned __int8 v31;

  v26 = a1;
  v2 = *(_QWORD **)v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v25 = (char *)&v21 - v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v21 - v9;
  v11 = v2[19];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v11));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 16, (uint64_t)&v28);
  v12 = v31;
  outlined destroy of SubscriptionStatus((uint64_t)&v28);
  if (v12)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v11));
  }
  else
  {
    v22 = v8;
    v23 = v10;
    v24 = v7;
    v21 = AssociatedConformanceWitness;
    v13 = v27;
    v28 = 1;
    v29 = 0u;
    v30 = 0u;
    v31 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v28, v1 + 16);
    swift_endAccess();
    v14 = *(_QWORD *)(*(_QWORD *)v1 + 144);
    v15 = *(_BYTE *)(v1 + v14);
    *(_BYTE *)(v1 + v14) = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v11));
    if ((v15 & 1) == 0)
    {
      v16 = v23;
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v23, v26, v24);
      v17 = v13;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v16, 1, AssociatedTypeWitness) == 1)
      {
        v28 = 0;
        (*(void (**)(uint64_t *, _QWORD))(v2[13] + 56))(&v28, v2[11]);
      }
      else
      {
        v18 = v25;
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v25, v16, AssociatedTypeWitness);
        v19 = swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v20, v18, AssociatedTypeWitness);
        v28 = v19;
        (*(void (**)(uint64_t *, _QWORD))(v2[13] + 56))(&v28, v2[11]);
        MEMORY[0x18D77ABF4](v19);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v18, AssociatedTypeWitness);
      }
    }
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.TryDropWhile<A>.Inner<A1>(_QWORD *a1)
{
  return Publishers.TryDropWhile.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.TryDropWhile<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.TryDropWhile.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.TryDropWhile<A>.Inner<A1>(uint64_t a1)
{
  Publishers.TryDropWhile.Inner.receive(completion:)(a1);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.TryDropWhile<A>.Inner<A1>(uint64_t a1)
{
  Publishers.TryDropWhile.Inner.request(_:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.TryDropWhile<A>.Inner<A1>()
{
  return 0x57706F7244797254;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.TryDropWhile<A>.Inner<A1>(uint64_t a1@<X8>)
{
  Publishers.TryDropWhile.Inner.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.TryDropWhile<A>.Inner<A1>()
{
  Publishers.TryDropWhile.Inner.cancel()();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryDropWhile<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryDropWhile.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.DropWhile(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = v10[1];
    v12 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.DropWhile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.DropWhile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.DropWhile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.DropWhile(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B586250 + 4 * byte_18B5F44B0[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.DropWhile(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B5863C8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B586440);
}

void sub_18B5863D0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B5863D8);
  JUMPOUT(0x18B586440);
}

void sub_18B586418()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B586440);
}

void sub_18B586420()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B586440);
}

uint64_t sub_18B586428(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B586440);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B58643CLL);
    JUMPOUT(0x18B586434);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for Publishers.TryDropWhile.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t Record.recording.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for Record.Recording(0, a1[2], a1[3], a1[4]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2, v4);
}

uint64_t type metadata accessor for Record.Recording(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Record.Recording);
}

uint64_t Record.init(record:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  Record.Recording.init()(a2, a3, a4, a5);
  return a1(a5);
}

uint64_t Record.Recording.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  *(_QWORD *)(a4 + 8) = static Array._allocateUninitialized(_:)();
  v8 = type metadata accessor for Record.Recording(0, a1, a2, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4 + *(int *)(v8 + 48), 1, 1, a2);
  *(_BYTE *)a4 = 0;
  return result;
}

uint64_t Record.init(recording:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;

  v7 = type metadata accessor for Record.Recording(0, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a5, a1, v7);
}

uint64_t Record.Recording.init(output:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  *(_QWORD *)(a6 + 8) = a1;
  v10 = a6 + *(int *)(type metadata accessor for Record.Recording(0, a3, a4, a5) + 48);
  v12 = type metadata accessor for Subscribers.Completion(0, a4, a5, v11);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, a2, v12);
  *(_BYTE *)a6 = 1;
  return result;
}

uint64_t Record.receive<A>(subscriber:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a2[2];
  v9 = type metadata accessor for Array();
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v9);
  if ((Collection.isEmpty.getter() & 1) == 0)
    type metadata accessor for Record.Inner();
  if (one-time initialization token for singleton != -1)
    swift_once();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40))(&static Subscriptions._EmptySubscription.singleton, a3, a4);
  v10 = type metadata accessor for Record.Recording(0, v8, a2[3], a2[4]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 56))(v4 + *(int *)(v10 + 48), a3, a4);
}

BOOL static Record.Recording.State.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Record.Recording.State.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int Record.Recording.State.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Record<A, B>.Recording.State(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Record.Recording.State.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Record<A, B>.Recording.State()
{
  char *v0;

  return Record.Recording.State.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Record<A, B>.Recording.State(uint64_t a1)
{
  char *v1;

  Record.Recording.State.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Record<A, B>.Recording.State()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  Record.Recording.State.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t Record.Recording.output.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Record.Recording.completion.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v3 + *(int *)(a1 + 48);
  v6 = type metadata accessor for Subscribers.Completion(0, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, v5, v6);
}

uint64_t Record.Recording.receive(_:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 16);
  result = MEMORY[0x1E0C80A78](a1);
  if ((*v2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v3);
    type metadata accessor for Array();
    return Array.append(_:)();
  }
  return result;
}

uint64_t Record.Recording.receive(completion:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;

  if ((*v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    v7 = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 32);
    *v4 = 1;
    v8 = &v4[*(int *)(a2 + 48)];
    v9 = type metadata accessor for Subscribers.Completion(0, v7, v6, a4);
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v8, v5, v9);
  }
  return result;
}

uint64_t Record.Inner.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(_QWORD *)(*v0 + 168)));
  if (v0[2])
  {
    v2 = *(_QWORD *)(v1 + 80);
    v3 = swift_bridgeObjectRetain();
    v4 = MEMORY[0x18D77A330](v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0xD000000000000010;
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(_QWORD *)(*v0 + 168)));
  return v4;
}

void Record.Inner.customMirror.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = *v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(_QWORD *)(v1 + 168)));
  v19 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18B5F4780;
  *(_QWORD *)(v8 + 32) = 0x65636E6575716573;
  *(_QWORD *)(v8 + 40) = 0xE800000000000000;
  v9 = v0[2];
  *(_QWORD *)(v8 + 72) = type metadata accessor for Array();
  swift_retain();
  if (v9)
    v10 = v9;
  else
    v10 = static Array._allocateUninitialized(_:)();
  *(_QWORD *)(v8 + 48) = v10;
  *(_QWORD *)(v8 + 80) = 0x6974656C706D6F63;
  *(_QWORD *)(v8 + 88) = 0xEA00000000006E6FLL;
  v11 = (char *)v0 + *(_QWORD *)(*v0 + 120);
  v12 = *(_QWORD *)(v1 + 88);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = type metadata accessor for Subscribers.Completion(0, v12, AssociatedConformanceWitness, v14);
  *(_QWORD *)(v8 + 120) = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(boxed_opaque_existential_1, v11, v15);
  v17 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v7, 1, 1, v17);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_bridgeObjectRetain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(_QWORD *)(*v0 + 168)));
}

uint64_t Record.Inner.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Record.Inner.description.getter();
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t *Record.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 168)), -1, -1);
  swift_bridgeObjectRelease();
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 120);
  v3 = *(_QWORD *)(v1 + 88);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = type metadata accessor for Subscribers.Completion(0, v3, AssociatedConformanceWitness, v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
  v7 = (uint64_t)v0 + *(_QWORD *)(*v0 + 128);
  v8 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  v9 = (uint64_t)v0 + *(_QWORD *)(*v0 + 144);
  v10 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return v0;
}

uint64_t Record.Inner.__deallocating_deinit()
{
  Record.Inner.deinit();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall Record.Inner.cancel()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 96);
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v8 - v5;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(_QWORD *)(v1 + 168)));
  v0[2] = 0;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v6, 1, 1, v2);
  v7 = (char *)v0 + *(_QWORD *)(*v0 + 128);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 40))(v7, v6, v3);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(_QWORD *)(*v0 + 168)));
}

Swift::Void __swiftcall Record.Inner.request(_:)(Combine::Subscribers::Demand a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  void (*v33)(char *, char *, uint64_t);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  os_unfair_lock_s *v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Swift::Bool IsNativeType;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  Swift::UInt v65;
  os_unfair_lock_s *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  Swift::UInt v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  Swift::UInt v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  os_unfair_lock_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  void (*v111)(char *, char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  Swift::UInt rawValue;
  uint64_t v116;
  char *v117;
  uint64_t v118;

  rawValue = a1.rawValue;
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  v4 = *(_QWORD *)(*v1 + 88);
  v107 = *(_QWORD *)(*v1 + 104);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v98 = type metadata accessor for Subscribers.Completion(0, v4, AssociatedConformanceWitness, v6);
  v97 = *(_QWORD *)(v98 - 8);
  MEMORY[0x1E0C80A78](v98);
  v96 = (char *)&v91 - v7;
  v8 = *(_QWORD *)(v2 + 80);
  v9 = type metadata accessor for Optional();
  v113 = *(_QWORD *)(v9 - 8);
  v114 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v105 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v110 = (char *)&v91 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v106 = (char *)&v91 - v15;
  v116 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v14);
  v93 = v16;
  v117 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Optional();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v95 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v91 - v22;
  v24 = *(_QWORD *)(v3 - 8);
  v25 = MEMORY[0x1E0C80A78](v21);
  v27 = (char *)&v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(v2 + 168);
  v29 = v25;
  v30 = *(os_unfair_lock_s **)((char *)v1 + v28);
  os_unfair_lock_lock(v30);
  v31 = (char *)v1 + *(_QWORD *)(*v1 + 128);
  swift_beginAccess();
  v32 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v94 = v31;
  v32(v23, v31, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v23, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v29);
    os_unfair_lock_unlock(v30);
    return;
  }
  v102 = v18;
  v33 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
  v104 = v27;
  v103 = v3;
  v33(v27, v23, v3);
  v34 = (_QWORD *)*v1;
  v35 = *(_QWORD *)(*v1 + 152);
  v36 = *(_QWORD *)((char *)v1 + v35);
  v37 = 0x8000000000000000;
  if (v36 != 0x8000000000000000)
  {
    if (rawValue != 0x8000000000000000)
    {
      if (((v36 | rawValue) & 0x8000000000000000) != 0)
        goto LABEL_52;
      v37 = v36 + rawValue;
      if (__OFADD__(v36, rawValue))
      {
        v37 = 0x8000000000000000;
      }
      else if ((v37 & 0x8000000000000000) != 0)
      {
        goto LABEL_53;
      }
    }
    *(_QWORD *)((char *)v1 + v35) = v37;
    v34 = (_QWORD *)*v1;
  }
  if ((*((_BYTE *)v1 + v34[20]) & 1) != 0)
  {
    v38 = v30;
LABEL_42:
    os_unfair_lock_unlock(v38);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v104, v103);
    return;
  }
  v109 = v34[20];
  v101 = v30;
  v92 = v29;
  v39 = (char *)v1 + v34[18];
  v40 = (_QWORD *)((char *)v1 + v34[17]);
  swift_beginAccess();
  v41 = v116;
  v42 = v113;
  v43 = v114;
  v108 = v39;
  rawValue = (Swift::UInt)v1;
  v99 = v40;
  v100 = v24;
  v112 = v35;
  while (1)
  {
    v44 = *(_QWORD *)((char *)v1 + v35);
    if (v44 == 0x8000000000000000)
      goto LABEL_17;
    if (v44 < 0)
      break;
    if (!v44)
      goto LABEL_41;
LABEL_17:
    if (!v1[2])
    {
LABEL_41:
      v38 = v101;
      goto LABEL_42;
    }
    v45 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
    v46 = v106;
    v111 = v45;
    v45(v106, v39, v43);
    v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    if (v47(v46, 1, v8) == 1)
    {
      (*(void (**)(char *, uint64_t))(v113 + 8))(v46, v114);
      v1[2] = 0;
      swift_bridgeObjectRelease();
      v74 = v95;
      v75 = v103;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v95, 1, 1, v103);
      v76 = v94;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v102 + 40))(v76, v74, v92);
      swift_endAccess();
      os_unfair_lock_unlock(v101);
      v77 = v97;
      v78 = v96;
      v79 = v98;
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v96, (char *)v1 + *(_QWORD *)(*v1 + 120), v98);
      v80 = v104;
      (*(void (**)(char *, uint64_t))(v107 + 56))(v78, v75);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v80, v75);
      return;
    }
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v117, v46, v8);
    v48 = *(_QWORD *)((char *)v1 + v35);
    if (v48 != 0x8000000000000000)
    {
      if (v48 < 0)
        goto LABEL_47;
      if (!v48)
        goto LABEL_48;
      *(_QWORD *)((char *)v1 + v35) = v48 - 1;
    }
    swift_beginAccess();
    v49 = v40[1];
    if (v49 == MEMORY[0x18D77A3A8](*v40, v8))
    {
      v50 = 1;
      v51 = v116;
      v52 = v103;
    }
    else
    {
      v53 = v103;
      v54 = *v40;
      v55 = v40[1];
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        v51 = v116;
        (*(void (**)(char *, unint64_t, uint64_t))(v116 + 16))(v110, v54+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v116 + 72) * v55, v8);
      }
      else
      {
        v73 = _ArrayBuffer._getElementSlowPath(_:)();
        if (v93 != 8)
          goto LABEL_54;
        v118 = v73;
        v51 = v116;
        (*(void (**)(char *, uint64_t *, uint64_t))(v116 + 16))(v110, &v118, v8);
        swift_unknownObjectRelease();
      }
      v52 = v53;
      v57 = v40[1];
      v58 = __OFADD__(v57, 1);
      v59 = v57 + 1;
      if (v58)
        goto LABEL_49;
      v50 = 0;
      v40[1] = v59;
    }
    v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
    v61 = v110;
    v60(v110, v50, 1, v8);
    swift_endAccess();
    swift_beginAccess();
    v42 = v113;
    v43 = v114;
    (*(void (**)(char *, char *, uint64_t))(v113 + 40))(v39, v61, v114);
    swift_endAccess();
    v62 = v39;
    v63 = v8;
    v64 = v109;
    v65 = rawValue;
    *(_BYTE *)(rawValue + v109) = 1;
    v66 = v101;
    os_unfair_lock_unlock(v101);
    v67 = (*(uint64_t (**)(char *, uint64_t))(v107 + 48))(v117, v52);
    os_unfair_lock_lock(v66);
    v68 = *(_QWORD *)(v65 + v112);
    v69 = v102;
    if (v68 != 0x8000000000000000)
    {
      v70 = 0x8000000000000000;
      if (v67 != 0x8000000000000000)
      {
        if ((v68 | v67) < 0)
          goto LABEL_50;
        v70 = v68 + v67;
        if (__OFADD__(v68, v67))
        {
          v70 = 0x8000000000000000;
        }
        else if ((v70 & 0x8000000000000000) != 0)
        {
          goto LABEL_51;
        }
      }
      *(_QWORD *)(v65 + v112) = v70;
      v42 = v113;
      v43 = v114;
      v62 = v108;
      v64 = v109;
    }
    *(_BYTE *)(v65 + v64) = 0;
    v71 = v105;
    v111(v105, v62, v43);
    v72 = v47(v71, 1, v63);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v71, v43);
    v8 = v63;
    if (v72 == 1)
    {
      v81 = rawValue;
      *(_QWORD *)(rawValue + 16) = 0;
      swift_bridgeObjectRelease();
      v82 = v100;
      v83 = v95;
      v84 = v103;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v100 + 56))(v95, 1, 1, v103);
      v85 = v94;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v69 + 40))(v85, v83, v92);
      swift_endAccess();
      os_unfair_lock_unlock(v101);
      v86 = v81 + *(_QWORD *)(*(_QWORD *)v81 + 120);
      v87 = v97;
      v88 = v96;
      v89 = v98;
      (*(void (**)(char *, Swift::UInt, uint64_t))(v97 + 16))(v96, v86, v98);
      v90 = v104;
      (*(void (**)(char *, uint64_t))(v107 + 56))(v88, v84);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v88, v89);
      (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v63);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v90, v84);
      return;
    }
    v41 = v116;
    (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v63);
    v24 = v100;
    v35 = v112;
    v39 = v108;
    v1 = (_QWORD *)rawValue;
    v40 = v99;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
}

uint64_t Record.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6E6964726F636572 && a2 == 0xE900000000000067)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

void protocol witness for Subscription.request(_:) in conformance Record<A, B>.Inner<A1>(Combine::Subscribers::Demand a1)
{
  Record.Inner.request(_:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Record<A, B>.Inner<A1>()
{
  return Record.Inner.description.getter();
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Record<A, B>.Inner<A1>()
{
  Record.Inner.customMirror.getter();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Record<A, B>.Inner<A1>@<X0>(uint64_t *a1@<X8>)
{
  return Record.Inner.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance Record<A, B>.Inner<A1>()
{
  Record.Inner.cancel()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Record<A, B>.CodingKeys()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Record<A, B>.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Record<A, B>.CodingKeys()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Record<A, B>.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Record<A, B>.CodingKeys()
{
  return 0x6E6964726F636572;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Record<A, B>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = Record.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Record<A, B>.CodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Record<A, B>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for static Equatable.== infix(_:_:) in conformance Record<A, B>.CodingKeys();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Record<A, B>.CodingKeys(uint64_t a1)
{
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Record<A, B>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Record<A, B>.CodingKeys(uint64_t a1)
{
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Record<A, B>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t Record.Recording<>.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  unsigned int v4;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Record.Recording<>.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t Record.Recording<>.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6974656C706D6F63;
  else
    return 0x74757074756FLL;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Record<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return Record.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Record<A, B>.Recording<>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Record<A, B>.Recording<>.CodingKeys, a3);
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Record<A, B>.Recording<>.CodingKeys(uint64_t a1)
{
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Record<A, B>.Recording<>.CodingKeys, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Record<A, B>.Recording<>.CodingKeys()
{
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Record<A, B>.Recording<>.CodingKeys);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Record<A, B>.Recording<>.CodingKeys()
{
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Record<A, B>.Recording<>.CodingKeys);
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Record<A, B>.Recording<>.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = Record.Recording<>.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Record<A, B>.Recording<>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = Record.Recording<>.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Record<A, B>.Recording<>.CodingKeys()
{
  char *v0;

  return Record.Recording<>.CodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Record<A, B>.Recording<>.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = Record.Recording<>.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Record<A, B>.Recording<>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized Record.Recording<>.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Record<A, B>.Recording<>.CodingKeys(uint64_t a1)
{
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Record<A, B>.Recording<>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Record<A, B>.Recording<>.CodingKeys(uint64_t a1)
{
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Record<A, B>.Recording<>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

void Record.Recording<>.init(from:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v15;
  _QWORD v16[7];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v16[3] = a8;
  v17 = type metadata accessor for Subscribers.Completion(0, a2, a7, a3);
  v16[2] = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v16[6] = (char *)v16 - v15;
  v20 = a1;
  v21 = a2;
  v19 = a3;
  v22 = a3;
  v23 = a4;
  v18 = a5;
  v24 = a5;
  v25 = a6;
  v26 = a7;
  type metadata accessor for Record.Recording<>.CodingKeys();
}

uint64_t sub_18B587EE0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[96];

  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Record<A, B>.Recording<>.CodingKeys, a1);
  v6 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v5 - 184) = v6;
  *(_QWORD *)(v5 - 232) = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v24[-v7];
  *(_QWORD *)(v5 - 200) = v3;
  v9 = type metadata accessor for Record.Recording(0, v3, v4, v2);
  *(_QWORD *)(v5 - 240) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = &v24[-v11];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  *(_QWORD *)(v5 - 176) = v8;
  v13 = *(_QWORD *)(v5 - 168);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
  {
    v23 = (uint64_t)v1;
  }
  else
  {
    *(_QWORD *)(v5 - 272) = v12;
    *(_QWORD *)(v5 - 264) = v10;
    v14 = *(_QWORD *)(v5 - 240);
    v15 = *(_QWORD *)(v5 - 232);
    v16 = *(_QWORD *)(v5 - 224);
    *(_QWORD *)(v5 - 168) = v1;
    v17 = *(_QWORD *)(v5 - 216);
    v18 = *(_QWORD *)(v5 - 208);
    v19 = type metadata accessor for Array();
    *(_BYTE *)(v5 - 65) = 0;
    *(_QWORD *)(v5 - 152) = *(_QWORD *)(v5 - 192);
    MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF40], v19, v5 - 152);
    v20 = *(_QWORD *)(v5 - 184);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_QWORD *)(v5 - 192) = *(_QWORD *)(v5 - 144);
    *(_BYTE *)(v5 - 144) = 1;
    *(_QWORD *)(v5 - 160) = v18;
    MEMORY[0x18D77ACE4](&protocol conformance descriptor for <> Subscribers.Completion<A>, v17, v5 - 160);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(_QWORD, uint64_t))(v15 + 8))(*(_QWORD *)(v5 - 176), v20);
    v22 = *(_QWORD *)(v5 - 272);
    *(_QWORD *)(v22 + 8) = *(_QWORD *)(v5 - 192);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 256) + 32))(v22 + *(int *)(v14 + 48), v16, v17);
    *(_BYTE *)v22 = 1;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 264) + 32))(*(_QWORD *)(v5 - 248), v22, v14);
    v23 = *(_QWORD *)(v5 - 168);
  }
  return __swift_destroy_boxed_opaque_existential_1(v23);
}

void Record.Recording<>.encode(into:)()
{
  type metadata accessor for Record.Recording<>.CodingKeys();
}

uint64_t sub_18B5881B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Record<A, B>.Recording<>.CodingKeys, a1);
  v3 = type metadata accessor for KeyedEncodingContainer();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v13 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v7 = *(_QWORD *)(v2 - 184);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_QWORD *)(v2 - 136) = *(_QWORD *)(v7 + 8);
  *(_BYTE *)(v2 - 65) = 0;
  v8 = type metadata accessor for Array();
  *(_QWORD *)(v2 - 144) = *(_QWORD *)(v2 - 168);
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF10], v8, v2 - 144);
  v9 = *(_QWORD *)(v2 - 160);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    *(_BYTE *)(v2 - 136) = 1;
    v11 = type metadata accessor for Subscribers.Completion(0, *(_QWORD *)(v2 - 200), *(_QWORD *)(v2 - 208), v10);
    *(_QWORD *)(v2 - 152) = *(_QWORD *)(v2 - 192);
    MEMORY[0x18D77ACE4](&protocol conformance descriptor for <> Subscribers.Completion<A>, v11, v2 - 152);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void Record.Recording<>.encode(to:)()
{
  type metadata accessor for Record.Recording<>.CodingKeys();
}

uint64_t sub_18B58838C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Record<A, B>.Recording<>.CodingKeys, a1);
  v3 = type metadata accessor for KeyedEncodingContainer();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v13 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v7 = *(_QWORD *)(v2 - 184);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_QWORD *)(v2 - 136) = *(_QWORD *)(v7 + 8);
  *(_BYTE *)(v2 - 65) = 0;
  v8 = type metadata accessor for Array();
  *(_QWORD *)(v2 - 144) = *(_QWORD *)(v2 - 168);
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF10], v8, v2 - 144);
  v9 = *(_QWORD *)(v2 - 160);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    *(_BYTE *)(v2 - 136) = 1;
    v11 = type metadata accessor for Subscribers.Completion(0, *(_QWORD *)(v2 - 200), *(_QWORD *)(v2 - 208), v10);
    *(_QWORD *)(v2 - 152) = *(_QWORD *)(v2 - 192);
    MEMORY[0x18D77ACE4](&protocol conformance descriptor for <> Subscribers.Completion<A>, v11, v2 - 152);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> Record<A, B>.Recording(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return protocol witness for Decodable.init(from:) in conformance <> Record<A, B>.Recording(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))Record.Recording<>.init(from:));
}

void protocol witness for Encodable.encode(to:) in conformance <> Record<A, B>.Recording()
{
  Record.Recording<>.encode(to:)();
}

uint64_t Record<>.encode(to:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];

  v21 = a6;
  v19 = a4;
  v20 = a5;
  v18 = a3;
  v7 = a2[3];
  v16 = a2[2];
  v8 = a2[4];
  v9 = type metadata accessor for Record.CodingKeys(255, v16, v7, v8);
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Record<A, B>.CodingKeys, v9);
  v10 = type metadata accessor for KeyedEncodingContainer();
  v17 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v15 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = type metadata accessor for Record.Recording(0, v16, v7, v8);
  v22[0] = v18;
  v22[1] = v19;
  v22[2] = v20;
  v22[3] = v21;
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for <> Record<A, B>.Recording, v13, v22);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v12, v10);
}

uint64_t Record<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD v39[4];
  uint64_t v40;

  v34 = a6;
  v35 = a7;
  v32 = a4;
  v33 = a5;
  v31 = a9;
  v36 = type metadata accessor for Record.Recording(0, a2, a3, a8);
  v30 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v37 = (char *)&v27 - v13;
  v14 = type metadata accessor for Record.CodingKeys(255, a2, a3, a8);
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Record<A, B>.CodingKeys, v14);
  v38 = type metadata accessor for KeyedDecodingContainer();
  v28 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v16 = (char *)&v27 - v15;
  v27 = type metadata accessor for Record(0, a2, a3, a8);
  v17 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v19 = (char *)&v27 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v29 = v16;
  v20 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v20)
  {
    v40 = v17;
    v21 = v28;
    v22 = v30;
    v23 = v31;
    v39[0] = v32;
    v39[1] = v33;
    v24 = v36;
    v39[2] = v34;
    v39[3] = v35;
    MEMORY[0x18D77ACE4](&protocol conformance descriptor for <> Record<A, B>.Recording, v36, v39);
    v25 = v29;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v38);
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v37, v24);
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v23, v19, v27);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> Record<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return protocol witness for Decodable.init(from:) in conformance <> Record<A, B>.Recording(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))Record<>.init(from:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> Record<A, B>.Recording(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a4(a1, a2[2], a2[3], *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), *(_QWORD *)(a3 - 24), *(_QWORD *)(a3 - 32), a2[4]);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> Record<A, B>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return Record<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), *(_QWORD *)(a3 - 24), *(_QWORD *)(a3 - 32));
}

void type metadata accessor for Record.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t specialized Record.Inner.init(downstream:sequence:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Bool IsNativeType;
  uint64_t result;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v47 = a3;
  v50 = a1;
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v51 = type metadata accessor for Optional();
  v48 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v8 = (char *)&v42 - v7;
  v9 = v5[12];
  v49 = type metadata accessor for Optional();
  v46 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v11 = (char *)&v42 - v10;
  *((_QWORD *)v3 + 2) = 0;
  v12 = *(_QWORD *)(v9 - 8);
  v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v13(&v3[v5[16]], 1, 1, v9);
  v14 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 144)];
  v43 = *(_QWORD *)(v6 - 8);
  v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
  v45(v14, 1, 1, v6);
  *(_QWORD *)&v3[*(_QWORD *)(*(_QWORD *)v3 + 152)] = 0;
  v3[*(_QWORD *)(*(_QWORD *)v3 + 160)] = 0;
  v15 = *(_QWORD *)(*(_QWORD *)v3 + 168);
  v16 = (_DWORD *)swift_slowAlloc();
  *v16 = 0;
  *(_QWORD *)&v3[v15] = v16;
  v44 = a2;
  *((_QWORD *)v3 + 2) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 120)];
  v18 = v5[11];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v20 = v18;
  v21 = v8;
  v23 = type metadata accessor for Subscribers.Completion(0, v20, AssociatedConformanceWitness, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v17, v47, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v11, v50, v9);
  v13(v11, 0, 1, v9);
  v24 = v48;
  v25 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 128)];
  swift_beginAccess();
  v26 = v11;
  v27 = v45;
  (*(void (**)(char *, char *, uint64_t))(v46 + 40))(v25, v26, v49);
  swift_endAccess();
  v28 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 136)];
  *(_QWORD *)v28 = v44;
  *((_QWORD *)v28 + 1) = 0;
  swift_beginAccess();
  v29 = *((_QWORD *)v28 + 1);
  v30 = MEMORY[0x18D77A3A8](*(_QWORD *)v28, v6);
  v31 = 1;
  v32 = v29 == v30;
  v33 = v51;
  if (v32)
    goto LABEL_6;
  v35 = *(_QWORD *)v28;
  v34 = *((_QWORD *)v28 + 1);
  IsNativeType = Array._hoistableIsNativeTypeChecked()();
  Array._checkSubscript(_:wasNativeTypeChecked:)();
  if (IsNativeType)
  {
    result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v43 + 16))(v21, v35+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(_QWORD *)(v43 + 72) * v34, v6);
  }
  else
  {
    result = _ArrayBuffer._getElementSlowPath(_:)();
    if (*(_QWORD *)(v43 + 64) != 8)
      goto LABEL_10;
    v52 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v43 + 16))(v21, &v52, v6);
    result = swift_unknownObjectRelease();
  }
  v38 = *((_QWORD *)v28 + 1);
  v39 = __OFADD__(v38, 1);
  v40 = v38 + 1;
  if (!v39)
  {
    v31 = 0;
    *((_QWORD *)v28 + 1) = v40;
LABEL_6:
    v27(v21, v31, 1, v6);
    swift_endAccess();
    v41 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 144)];
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v41, v21, v33);
    swift_endAccess();
    return (uint64_t)v3;
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

void type metadata accessor for Record.Recording<>.CodingKeys()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t type metadata accessor for Record.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Record.CodingKeys);
}

uint64_t type metadata accessor for Record(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Record);
}

uint64_t type metadata completion function for Record(uint64_t *a1)
{
  uint64_t result;
  unint64_t v2;

  result = type metadata accessor for Record.Recording(319, a1[2], a1[3], a1[4]);
  if (v2 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Record(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + ((v9 + 16) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      v17 = a1 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 0x80000000) != 0)
      {
        v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v17 + v9 + 16) & ~v9);
        if (v19 >= 2)
          return v19 - 1;
        else
          return 0;
      }
      else
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        return (v18 + 1);
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void storeEnumTagSinglePayload for Record(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_18B589188()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18B589190()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_18B5891B0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_18B5891B8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_18B5891C8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t type metadata completion function for Record.Recording(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for Subscribers.Completion(319, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Record(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  void *v13;
  const void *v14;
  unsigned int (*v15)(const void *, uint64_t, uint64_t);

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 16) & ~v7) + v8 > 0x18)
  {
    v12 = *(_QWORD *)a2;
    *v3 = *(_QWORD *)a2;
    v3 = (_QWORD *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    v13 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 16) & ~v7);
    v14 = (const void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + v7 + 16) & ~v7);
    v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    if (v15(v14, 1, v4))
    {
      memcpy(v13, v14, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v13, v14, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t destroy for Record(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (v3 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  return result;
}

unint64_t initializeWithCopy for Record(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);
  size_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)((v6 + 16 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  v8 = (const void *)((v6 + 16 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_bridgeObjectRetain();
  if (v9(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84))
      v10 = *(_QWORD *)(v5 + 64);
    else
      v10 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(v7, v8, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

unint64_t assignWithCopy for Record(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  size_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)((v9 + 16 + v5) & ~v9);
  v11 = (void *)((v9 + 16 + v6) & ~v9);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v6) = v12(v10, 1, v7);
  v13 = v12(v11, 1, v7);
  if ((_DWORD)v6)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v10, v11, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
      return a1;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v10, v11, v7);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v14 = *(_QWORD *)(v8 + 64);
  else
    v14 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v14);
  return a1;
}

unint64_t initializeWithTake for Record(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  size_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)((v6 + 16 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  v8 = (const void *)((v6 + 16 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84))
      v9 = *(_QWORD *)(v5 + 64);
    else
      v9 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

unint64_t assignWithTake for Record(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  size_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)((v9 + 16 + v5) & ~v9);
  v11 = (void *)((v9 + 16 + v6) & ~v9);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v6) = v12(v10, 1, v7);
  v13 = v12(v11, 1, v7);
  if ((_DWORD)v6)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v10, v11, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
      return a1;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v10, v11, v7);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v14 = *(_QWORD *)(v8 + 64);
  else
    v14 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for Record.Recording(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + ((v9 + 16) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      v17 = a1 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 0x80000000) != 0)
      {
        v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v17 + v9 + 16) & ~v9);
        if (v19 >= 2)
          return v19 - 1;
        else
          return 0;
      }
      else
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        return (v18 + 1);
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void storeEnumTagSinglePayload for Record.Recording(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_18B589BB8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18B589BC0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_18B589BE0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_18B589BE8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_18B589BF8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t type metadata completion function for Record.Inner(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 88);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = type metadata accessor for Subscribers.Completion(319, v1, AssociatedConformanceWitness, v3);
  if (v5 <= 0x3F)
  {
    result = type metadata accessor for Optional();
    if (v6 <= 0x3F)
    {
      result = type metadata accessor for Optional();
      if (v7 <= 0x3F)
        return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t getEnumTag for Record.Recording.State(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t type metadata accessor for Record.Recording.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Record.Recording.State);
}

uint64_t getEnumTagSinglePayload for Record.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for Record.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18B589DC8 + 4 * byte_18B5F47B4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18B589DE8 + 4 * byte_18B5F47B9[v4]))();
}

_BYTE *sub_18B589DC8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18B589DE8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18B589DF0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18B589DF8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18B589E00(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18B589E08(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTag for Record.CodingKeys()
{
  return 0;
}

uint64_t getEnumTagSinglePayload for Record.Recording.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Record.Recording.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18B589EF8 + 4 * byte_18B5F47C3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18B589F2C + 4 * byte_18B5F47BE[v4]))();
}

uint64_t sub_18B589F2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18B589F34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18B589F3CLL);
  return result;
}

uint64_t sub_18B589F48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18B589F50);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18B589F54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18B589F5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in Record<A, B>.Recording<>.CodingKeys()
{
  JUMPOUT(0x18D77ACE4);
}

void base witness table accessor for Equatable in Record<A, B>.CodingKeys()
{
  JUMPOUT(0x18D77ACE4);
}

void base witness table accessor for Equatable in Record<A, B>.Recording.State()
{
  JUMPOUT(0x18D77ACE4);
}

void base witness table accessor for CustomDebugStringConvertible in Record<A, B>.CodingKeys()
{
  JUMPOUT(0x18D77ACE4);
}

void base witness table accessor for CustomStringConvertible in Record<A, B>.CodingKeys()
{
  JUMPOUT(0x18D77ACE4);
}

void base witness table accessor for CustomDebugStringConvertible in Record<A, B>.Recording<>.CodingKeys()
{
  JUMPOUT(0x18D77ACE4);
}

void base witness table accessor for CustomStringConvertible in Record<A, B>.Recording<>.CodingKeys()
{
  JUMPOUT(0x18D77ACE4);
}

uint64_t specialized Record.Recording<>.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t Publishers.Filter.init(upstream:isIncluded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.Filter, a6);
}

uint64_t Publisher.tryFilter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.TryFilter, a5);
}

uint64_t Publishers.TryFilter.init(upstream:isIncluded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.TryFilter, a6);
}

uint64_t type metadata accessor for Publishers.TryFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.TryFilter);
}

uint64_t Publishers.Filter.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Filter.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Filter.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x7265746C6946;
  a1[1] = 0xE600000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Filter<A>.Inner<A1>()
{
  return 0x7265746C6946;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.Filter<A>.Inner<A1>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_QWORD *)(v2 + *(int *)(result + 56));
  return result;
}

void Publishers.TryFilter.receive<A>(subscriber:)()
{
  type metadata accessor for Publishers.TryFilter.Inner();
}

uint64_t sub_18B58A1FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;

  v7 = (uint64_t *)(v1 + *(int *)(v2 + 36));
  v8 = *v7;
  v9 = v7[1];
  swift_allocObject();
  swift_retain();
  v12 = specialized Publishers.TryFilter.Inner.init(downstream:filter:)(v3, v8, v9);
  v10 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for FilterProducer<A, B, C, D, E>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v12, v4, a1, v5, v10);
  return swift_release();
}

void type metadata accessor for Publishers.TryFilter.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.TryFilter.Inner.description.getter()
{
  return 0x65746C6946797254;
}

uint64_t Publishers.TryFilter.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  (*(void (**)(uint64_t *__return_ptr))(v2 + 16))(&v11);
  v5 = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (v5 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, 1, 1, AssociatedTypeWitness);
  }
  v8 = type metadata accessor for Optional();
  v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for PartialCompletion(0, v8, v9, MEMORY[0x1E0DEDB38]);
  return swift_storeEnumTagMultiPayload();
}

void Publishers.TryFilter.Inner.__deallocating_deinit()
{
  FilterProducer.deinit();
}

uint64_t sub_18B58A42C()
{
  return swift_deallocClassInstance();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryFilter<A>()
{
  Publishers.TryFilter.receive<A>(subscriber:)();
}

uint64_t Publishers.Filter.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v20)(uint64_t);
  uint64_t v22;

  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t *)(v13 + *(int *)(v12 + 36));
  v16 = *v14;
  v15 = v14[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  v17 = (uint64_t (*)(uint64_t))swift_allocObject();
  v18 = *(_QWORD *)(a3 + 24);
  *((_QWORD *)v17 + 2) = v8;
  *((_QWORD *)v17 + 3) = v18;
  *((_QWORD *)v17 + 4) = v16;
  *((_QWORD *)v17 + 5) = v15;
  *((_QWORD *)v17 + 6) = a1;
  *((_QWORD *)v17 + 7) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  v20 = (uint64_t (**)(uint64_t))(a4
                                         + *(int *)(type metadata accessor for Publishers.Filter(0, v8, v18, v19) + 36));
  *v20 = partial apply for closure #1 in Publishers.Filter.filter(_:);
  v20[1] = v17;
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in Publishers.Filter.filter(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v14 - v9;
  v11 = a2(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, AssociatedTypeWitness);
  if ((v11 & 1) != 0)
    v12 = a4(v10);
  else
    v12 = 0;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  return v12 & 1;
}

uint64_t Publishers.Filter.tryFilter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v20)(uint64_t);
  uint64_t v22;

  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t *)(v13 + *(int *)(v12 + 36));
  v16 = *v14;
  v15 = v14[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  v17 = (uint64_t (*)(uint64_t))swift_allocObject();
  v18 = *(_QWORD *)(a3 + 24);
  *((_QWORD *)v17 + 2) = v8;
  *((_QWORD *)v17 + 3) = v18;
  *((_QWORD *)v17 + 4) = v16;
  *((_QWORD *)v17 + 5) = v15;
  *((_QWORD *)v17 + 6) = a1;
  *((_QWORD *)v17 + 7) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  v20 = (uint64_t (**)(uint64_t))(a4
                                         + *(int *)(type metadata accessor for Publishers.TryFilter(0, v8, v18, v19)
                                                  + 36));
  *v20 = partial apply for closure #1 in Publishers.Filter.tryFilter(_:);
  v20[1] = v17;
  swift_retain();
  return swift_retain();
}

uint64_t Publishers.TryFilter.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v20)(uint64_t);
  uint64_t v22;

  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t *)(v13 + *(int *)(v12 + 36));
  v16 = *v14;
  v15 = v14[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  v17 = (uint64_t (*)(uint64_t))swift_allocObject();
  v18 = *(_QWORD *)(a3 + 24);
  *((_QWORD *)v17 + 2) = v8;
  *((_QWORD *)v17 + 3) = v18;
  *((_QWORD *)v17 + 4) = v16;
  *((_QWORD *)v17 + 5) = v15;
  *((_QWORD *)v17 + 6) = a1;
  *((_QWORD *)v17 + 7) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  v20 = (uint64_t (**)(uint64_t))(a4
                                         + *(int *)(type metadata accessor for Publishers.TryFilter(0, v8, v18, v19)
                                                  + 36));
  *v20 = partial apply for closure #1 in Publishers.TryFilter.filter(_:);
  v20[1] = v17;
  swift_retain();
  return swift_retain();
}

uint64_t Publishers.TryFilter.tryFilter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v20)(uint64_t);
  uint64_t v22;

  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t *)(v13 + *(int *)(v12 + 36));
  v16 = *v14;
  v15 = v14[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  v17 = (uint64_t (*)(uint64_t))swift_allocObject();
  v18 = *(_QWORD *)(a3 + 24);
  *((_QWORD *)v17 + 2) = v8;
  *((_QWORD *)v17 + 3) = v18;
  *((_QWORD *)v17 + 4) = v16;
  *((_QWORD *)v17 + 5) = v15;
  *((_QWORD *)v17 + 6) = a1;
  *((_QWORD *)v17 + 7) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  v20 = (uint64_t (**)(uint64_t))(a4
                                         + *(int *)(type metadata accessor for Publishers.TryFilter(0, v8, v18, v19)
                                                  + 36));
  *v20 = partial apply for closure #1 in Publishers.TryFilter.tryFilter(_:);
  v20[1] = v17;
  swift_retain();
  return swift_retain();
}

uint64_t *specialized Publishers.TryFilter.Inner.init(downstream:filter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v13[2];

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 280);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v6[34];
  v11[3] = v7;
  v11[4] = v6[36];
  v11[5] = v6[37];
  v11[6] = a2;
  v11[7] = a3;
  v13[0] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error);
  v13[1] = v11;
  return FilterProducer.init(downstream:filter:)((uint64_t)v9, (uint64_t)v13);
}

uint64_t partial apply for closure #1 in Publishers.Filter.filter(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Publishers.Filter.filter(_:)(a1, *(uint64_t (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40), *(uint64_t (**)(char *))(v1 + 48));
}

uint64_t partial apply for closure #1 in Publishers.Filter.tryFilter(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);

  v3 = *(uint64_t (**)(uint64_t))(v1 + 48);
  if (((*(uint64_t (**)(void))(v1 + 32))() & 1) != 0)
    return v3(a1) & 1;
  else
    return 0;
}

uint64_t partial apply for closure #1 in Publishers.TryFilter.filter(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t);
  char v5;

  v4 = *(uint64_t (**)(uint64_t))(v1 + 48);
  v5 = (*(uint64_t (**)(void))(v1 + 32))();
  if (v2 || (v5 & 1) == 0)
    return 0;
  else
    return v4(a1) & 1;
}

uint64_t partial apply for closure #1 in Publishers.TryFilter.tryFilter(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t);
  char v5;

  v4 = *(uint64_t (**)(uint64_t))(v1 + 48);
  v5 = (*(uint64_t (**)(void))(v1 + 32))();
  if (!v2)
  {
    if ((v5 & 1) != 0)
      v5 = v4(a1);
    else
      v5 = 0;
  }
  return v5 & 1;
}

uint64_t getEnumTagSinglePayload for Publishers.Filter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B58AC08 + 4 * byte_18B5F4DB8[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.Filter(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B58AD80()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B58ADF8);
}

void sub_18B58AD88(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B58AD90);
  JUMPOUT(0x18B58ADF8);
}

void sub_18B58ADD0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B58ADF8);
}

void sub_18B58ADD8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B58ADF8);
}

uint64_t sub_18B58ADE0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B58ADF8);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B58ADF4);
    JUMPOUT(0x18B58ADECLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for Publishers.TryFilter.Inner()
{
  return swift_initClassMetadata2();
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Filter.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    *(_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.Filter.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.Filter.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.Filter.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_18B58B07C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)(*(uint64_t (**)(void))(v1 + 48), a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 48))();
  if (!v2)
    *a1 = result & 1;
  return result;
}

uint64_t Publisher.breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t v29;

  v29 = a8;
  v17 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v21, v20);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a9, v19, a7);
  v23 = (int *)type metadata accessor for Publishers.Breakpoint(0, a7, v29, v22);
  v24 = (uint64_t *)(a9 + v23[9]);
  *v24 = a1;
  v24[1] = a2;
  v25 = (uint64_t *)(a9 + v23[10]);
  *v25 = a3;
  v25[1] = a4;
  v26 = (uint64_t *)(a9 + v23[11]);
  *v26 = a5;
  v26[1] = a6;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(a1);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(a3);
  return outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(a5);
}

int *Publishers.Breakpoint.init(upstream:receiveSubscription:receiveOutput:receiveCompletion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v18;
  int *result;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 32))(a9, a1, a8);
  result = (int *)type metadata accessor for Publishers.Breakpoint(0, a8, a10, v18);
  v20 = (_QWORD *)(a9 + result[9]);
  *v20 = a2;
  v20[1] = a3;
  v21 = (_QWORD *)(a9 + result[10]);
  *v21 = a4;
  v21[1] = a5;
  v22 = (_QWORD *)(a9 + result[11]);
  *v22 = a6;
  v22[1] = a7;
  return result;
}

uint64_t type metadata accessor for Publishers.Breakpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Breakpoint);
}

uint64_t Publisher.breakpointOnError()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  Publisher.breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)(0, 0, 0, 0, (uint64_t)partial apply for closure #1 in Publisher.breakpointOnError(), v6, a1, a2, a3);
  return swift_release();
}

BOOL closure #1 in Publisher.breakpointOnError()(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BOOL8 v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v11 - v7, a1, v5);
  v9 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v8, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v9;
}

uint64_t sub_18B58B40C()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in Publisher.breakpointOnError()(uint64_t a1)
{
  return closure #1 in Publisher.breakpointOnError()(a1);
}

uint64_t Publishers.Breakpoint.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Breakpoint.receiveSubscription.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 36));
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v2);
  return v2;
}

uint64_t Publishers.Breakpoint.receiveOutput.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 40));
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v2);
  return v2;
}

uint64_t Publishers.Breakpoint.receiveCompletion.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 44));
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v2);
  return v2;
}

void Publishers.Breakpoint.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  MEMORY[0x1E0C80A78](a1);
  v2 = (char *)v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 16);
  v7[1] = v2;
  v7[2] = v4;
  v9 = v8;
  v10 = v5;
  v11 = v4;
  v12 = v6;
  type metadata accessor for Publishers.Breakpoint.Inner();
}

void sub_18B58B560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v15 - 136) = a1;
  *(_QWORD *)(v15 - 120) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&a9 - v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, v14, v12);
  v18 = *(_QWORD *)(v10 + v13[9]);
  v19 = *(_QWORD *)(v10 + v13[10]);
  v20 = *(_QWORD *)(v10 + v13[11]);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v18);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v19);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v20);
  Publishers.Breakpoint.Inner.init(downstream:receiveSubscription:receiveOutput:receiveCompletion:)(*(_QWORD *)(v15 - 152), (uint64_t)v17, v12);
}

uint64_t sub_18B58B624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v3 - 136);
  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Breakpoint<A>.Inner<A1>, v4);
  Publisher.subscribe<A>(_:)(v2, v0, v4, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 120) + 8))(v2, v4);
}

void type metadata accessor for Publishers.Breakpoint.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.Breakpoint.Inner.init(downstream:receiveSubscription:receiveOutput:receiveCompletion:)(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a2, a1, a3);
  type metadata accessor for Publishers.Breakpoint.Inner();
}

void sub_18B58B708(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;

  v7 = (_QWORD *)(v1 + a1[13]);
  *v7 = v6;
  v7[1] = v5;
  v8 = (_QWORD *)(v1 + a1[14]);
  *v8 = v4;
  v8[1] = v3;
  v9 = (_QWORD *)(v1 + a1[15]);
  *v9 = v2;
  v9[1] = v13;
  v10 = a1[16];
  if (one-time initialization token for lock != -1)
    swift_once();
  v11 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v12 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v11);
    *(_QWORD *)(v1 + v10) = v12;
  }
}

void Publishers.Breakpoint.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x696F706B61657242;
  a1[1] = 0xEA0000000000746ELL;
}

uint64_t Publishers.Breakpoint.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t);

  v5 = *(uint64_t (**)(uint64_t))(v2 + *(int *)(a2 + 52));
  if (v5)
  {
    swift_retain();
    if ((v5(a1) & 1) != 0)
      raise(5);
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v5);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 40) + 40))(a1, *(_QWORD *)(a2 + 24));
}

uint64_t Publishers.Breakpoint.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t);

  v5 = *(uint64_t (**)(uint64_t))(v2 + *(int *)(a2 + 56));
  if (v5)
  {
    swift_retain();
    if ((v5(a1) & 1) != 0)
      raise(5);
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v5);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 40) + 48))(a1, *(_QWORD *)(a2 + 24));
}

uint64_t Publishers.Breakpoint.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t);

  v5 = *(uint64_t (**)(uint64_t))(v2 + *(int *)(a2 + 60));
  if (v5)
  {
    swift_retain();
    if ((v5(a1) & 1) != 0)
      raise(5);
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v5);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 40) + 56))(a1, *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Breakpoint<A>.Inner<A1>()
{
  return 0x696F706B61657242;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.Breakpoint<A>.Inner<A1>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_QWORD *)(v2 + *(int *)(result + 64));
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Breakpoint<A>(uint64_t a1)
{
  Publishers.Breakpoint.receive<A>(subscriber:)(a1);
}

uint64_t type metadata completion function for Publishers.Breakpoint()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Breakpoint(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v11 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v10 = *(_OWORD *)v11;
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_QWORD *)(v10 + 8) = v12;
      swift_retain();
    }
    v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v14 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
    }
    else
    {
      v15 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = v15;
      swift_retain();
    }
    v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
    v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v17 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
      return v4;
    }
    v18 = *(_QWORD *)(v17 + 8);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *(_QWORD *)(v16 + 8) = v18;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.Breakpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  result = (*(uint64_t (**)(void))(v3 + 8))();
  v5 = (_QWORD *)((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v5 >= 0xFFFFFFFFuLL)
    result = swift_release();
  v6 = (_QWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v6 >= 0xFFFFFFFFuLL)
    result = swift_release();
  if (*(_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for Publishers.Breakpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = v9;
    swift_retain();
  }
  v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = v12;
    swift_retain();
  }
  v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_QWORD *)(v13 + 8) = v15;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for Publishers.Breakpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v11 = v8[1];
      *v7 = v9;
      v7[1] = v11;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v10 = v8[1];
      *v7 = v9;
      v7[1] = v10;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v7 = *(_OWORD *)v8;
LABEL_8:
  v12 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      v16 = v13[1];
      *v12 = v14;
      v12[1] = v16;
      swift_retain();
      goto LABEL_15;
    }
  }
  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      v15 = v13[1];
      *v12 = v14;
      v12[1] = v15;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  *(_OWORD *)v12 = *(_OWORD *)v13;
LABEL_15:
  v17 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v18 = (unint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v18;
  if (*v17 < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      v21 = v18[1];
      *v17 = v19;
      v17[1] = v21;
      swift_retain();
      return a1;
    }
LABEL_21:
    *(_OWORD *)v17 = *(_OWORD *)v18;
    return a1;
  }
  if (v19 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }
  v20 = v18[1];
  *v17 = v19;
  v17[1] = v20;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.Breakpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = v9;
  }
  v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = v12;
  }
  v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = (uint64_t *)((v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  v15 = *v14;
  if ((unint64_t)*v14 < 0xFFFFFFFF)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v16 = v14[1];
    *(_QWORD *)v13 = v15;
    *(_QWORD *)(v13 + 8) = v16;
  }
  return a1;
}

uint64_t assignWithTake for Publishers.Breakpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v11 = v8[1];
      *v7 = v9;
      v7[1] = v11;
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v10 = v8[1];
      *v7 = v9;
      v7[1] = v10;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v7 = *(_OWORD *)v8;
LABEL_8:
  v12 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      v16 = v13[1];
      *v12 = v14;
      v12[1] = v16;
      goto LABEL_15;
    }
  }
  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      v15 = v13[1];
      *v12 = v14;
      v12[1] = v15;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  *(_OWORD *)v12 = *(_OWORD *)v13;
LABEL_15:
  v17 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v18 = (unint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v18;
  if (*v17 < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      v21 = v18[1];
      *v17 = v19;
      v17[1] = v21;
      return a1;
    }
LABEL_21:
    *(_OWORD *)v17 = *(_OWORD *)v18;
    return a1;
  }
  if (v19 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }
  v20 = v18[1];
  *v17 = v19;
  v17[1] = v20;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Breakpoint(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B58C198 + 4 * byte_18B5F4F48[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.Breakpoint(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B58C328()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B58C3ACLL);
}

void sub_18B58C330(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B58C338);
  JUMPOUT(0x18B58C3ACLL);
}

void sub_18B58C380()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B58C3ACLL);
}

void sub_18B58C388()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B58C3ACLL);
}

uint64_t sub_18B58C390(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x18B58C39CLL);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x18B58C3ACLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata completion function for Publishers.Breakpoint.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Breakpoint.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v11 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v10 = *(_OWORD *)v11;
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_QWORD *)(v10 + 8) = v12;
      swift_retain();
    }
    v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v14 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
    }
    else
    {
      v15 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = v15;
      swift_retain();
    }
    v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
    v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v17 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
    }
    else
    {
      v18 = *(_QWORD *)(v17 + 8);
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *(_QWORD *)(v16 + 8) = v18;
      swift_retain();
    }
    *(_QWORD *)((v16 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v17 + 23) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t destroy for Publishers.Breakpoint.Inner(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  result = (*(uint64_t (**)(void))(v3 + 8))();
  v5 = (_QWORD *)((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v5 >= 0xFFFFFFFFuLL)
    result = swift_release();
  v6 = (_QWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v6 >= 0xFFFFFFFFuLL)
    result = swift_release();
  if (*(_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for Publishers.Breakpoint.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = v9;
    swift_retain();
  }
  v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = v12;
    swift_retain();
  }
  v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_QWORD *)(v13 + 8) = v15;
    swift_retain();
  }
  *(_QWORD *)((v13 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for Publishers.Breakpoint.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v11 = v8[1];
      *v7 = v9;
      v7[1] = v11;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v10 = v8[1];
      *v7 = v9;
      v7[1] = v10;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v7 = *(_OWORD *)v8;
LABEL_8:
  v12 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      v16 = v13[1];
      *v12 = v14;
      v12[1] = v16;
      swift_retain();
      goto LABEL_15;
    }
  }
  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      v15 = v13[1];
      *v12 = v14;
      v12[1] = v15;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  *(_OWORD *)v12 = *(_OWORD *)v13;
LABEL_15:
  v17 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v18 = (unint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v18;
  if (*v17 < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      v21 = v18[1];
      *v17 = v19;
      v17[1] = v21;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)v17 = *(_OWORD *)v18;
    goto LABEL_22;
  }
  if (v19 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }
  v20 = v18[1];
  *v17 = v19;
  v17[1] = v20;
  swift_retain();
  swift_release();
LABEL_22:
  *(_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.Breakpoint.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = v9;
  }
  v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = v12;
  }
  v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_QWORD *)(v13 + 8) = v15;
  }
  *(_QWORD *)((v13 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.Breakpoint.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v11 = v8[1];
      *v7 = v9;
      v7[1] = v11;
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v10 = v8[1];
      *v7 = v9;
      v7[1] = v10;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v7 = *(_OWORD *)v8;
LABEL_8:
  v12 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      v16 = v13[1];
      *v12 = v14;
      v12[1] = v16;
      goto LABEL_15;
    }
  }
  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      v15 = v13[1];
      *v12 = v14;
      v12[1] = v15;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  *(_OWORD *)v12 = *(_OWORD *)v13;
LABEL_15:
  v17 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v18 = (unint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v18;
  if (*v17 < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      v21 = v18[1];
      *v17 = v19;
      v17[1] = v21;
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)v17 = *(_OWORD *)v18;
    goto LABEL_22;
  }
  if (v19 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }
  v20 = v18[1];
  *v17 = v19;
  v17[1] = v20;
  swift_release();
LABEL_22:
  *(_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Breakpoint.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B58CC4C + 4 * byte_18B5F4F57[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.Breakpoint.Inner(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B58CDE4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B58CE68);
}

void sub_18B58CDEC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B58CDF4);
  JUMPOUT(0x18B58CE68);
}

void sub_18B58CE3C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B58CE68);
}

void sub_18B58CE44()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B58CE68);
}

uint64_t sub_18B58CE4C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x18B58CE58);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x18B58CE68);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata completion function for Publishers.WeakSubscriber()
{
  return swift_initClassMetadata2();
}

void Publishers.WeakSubscriber.customMirror.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[2];
  _QWORD *v9;

  v1 = *v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0;
  v6 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = *(_OWORD *)(v1 + 96);
  v8[0] = *(_OWORD *)(v1 + 80);
  v8[1] = v7;
  type metadata accessor for Publishers.WeakSubscriber();
}

uint64_t sub_18B58CF90()
{
  uint64_t v0;

  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v0);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.WeakSubscriber.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEA968];
  strcpy((char *)a1, "WeakSubscriber");
  *(_BYTE *)(a1 + 15) = -18;
}

uint64_t Publishers.WeakSubscriber.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[40];
  _QWORD v10[5];

  v3 = *v1;
  v4 = MEMORY[0x18D77AE58](v1 + 2);
  if (v4)
  {
    v5 = v4;
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v10);
    outlined init with take of Subscription?((uint64_t)v10, (uint64_t)v9);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v9, (uint64_t)(v1 + 3));
    swift_endAccess();
    v10[0] = v5;
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v3 + 104) + 40))(a1, *(_QWORD *)(v3 + 88));
    return swift_unknownObjectRelease();
  }
  else
  {
    v8 = a1[3];
    v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 8))(v8);
  }
}

uint64_t Publishers.WeakSubscriber.receive(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v3 = *v1;
  v4 = MEMORY[0x18D77AE58](v1 + 2);
  if (v4)
  {
    v13[0] = v4;
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 104) + 48))(a1, *(_QWORD *)(v3 + 88));
    swift_unknownObjectRelease();
  }
  else
  {
    v6 = (uint64_t)(v1 + 3);
    swift_beginAccess();
    outlined init with copy of Subscription?((uint64_t)(v1 + 3), (uint64_t)&v10);
    if (*((_QWORD *)&v11 + 1))
    {
      outlined init with take of Subscription(&v10, (uint64_t)v13);
      v8 = v14;
      v7 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 8))(v8);
      v12 = 0;
      v10 = 0u;
      v11 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v10, v6);
      swift_endAccess();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    }
    else
    {
      outlined destroy of Subscription?((uint64_t)&v10);
    }
    return 0;
  }
  return v5;
}

uint64_t Publishers.WeakSubscriber.receive(completion:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = (uint64_t)(v1 + 3);
  v4 = *v1;
  v14 = 0;
  v12 = 0u;
  v13 = 0u;
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v12, (uint64_t)(v1 + 3));
  swift_endAccess();
  v5 = MEMORY[0x18D77AE58](v1 + 2);
  if (v5)
  {
    *(_QWORD *)&v12 = v5;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 + 104) + 56))(a1, *(_QWORD *)(v4 + 88));
    return swift_unknownObjectRelease();
  }
  else
  {
    outlined init with copy of Subscription?((uint64_t)(v1 + 3), (uint64_t)&v9);
    if (*((_QWORD *)&v10 + 1))
    {
      outlined init with take of Subscription(&v9, (uint64_t)&v12);
      v8 = *((_QWORD *)&v13 + 1);
      v7 = v14;
      __swift_project_boxed_opaque_existential_1(&v12, *((uint64_t *)&v13 + 1));
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 8))(v8);
      v11 = 0;
      v9 = 0u;
      v10 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v9, v3);
      swift_endAccess();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
    }
    else
    {
      return outlined destroy of Subscription?((uint64_t)&v9);
    }
  }
}

uint64_t Publishers.WeakSubscriber.deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  outlined destroy of Subscription?(v0 + 24);
  return v0;
}

uint64_t Publishers.WeakSubscriber.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  outlined destroy of Subscription?(v0 + 24);
  return swift_deallocClassInstance();
}

void type metadata accessor for Publishers.WeakSubscriber()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.WeakSubscriber<A, B>(_QWORD *a1)
{
  return Publishers.WeakSubscriber.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.WeakSubscriber<A, B>(uint64_t a1)
{
  return Publishers.WeakSubscriber.receive(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.WeakSubscriber<A, B>(uint64_t a1)
{
  return Publishers.WeakSubscriber.receive(completion:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.WeakSubscriber<A, B>()
{
  return 0x736275536B616557;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.WeakSubscriber<A, B>()
{
  Publishers.WeakSubscriber.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.WeakSubscriber<A, B>(uint64_t a1@<X8>)
{
  Publishers.WeakSubscriber.playgroundDescription.getter(a1);
}

uint64_t outlined init with take of Subscription?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Deferred.createPublisher.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

_QWORD *assignWithCopy for Deferred(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for Deferred(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Deferred(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Deferred(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t Publisher.allSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.AllSatisfy, a5);
}

uint64_t Publishers.AllSatisfy.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.AllSatisfy, a6);
}

uint64_t type metadata accessor for Publishers.AllSatisfy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.AllSatisfy);
}

uint64_t Publisher.tryAllSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.TryAllSatisfy, a5);
}

uint64_t Publishers.TryAllSatisfy.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.TryAllSatisfy, a6);
}

uint64_t type metadata accessor for Publishers.TryAllSatisfy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.TryAllSatisfy);
}

uint64_t Publishers.AllSatisfy.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

void Publishers.AllSatisfy.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Publishers.AllSatisfy.receive<A>(subscriber:)(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD *))type metadata accessor for Publishers.AllSatisfy.Inner);
}

void type metadata accessor for Publishers.AllSatisfy.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.AllSatisfy.Inner.description.getter()
{
  return 0x73697461536C6C41;
}

uint64_t Publishers.AllSatisfy.Inner.receive(newValue:)()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v4[3];

  (*(void (**)(_QWORD *__return_ptr))(v0 + 24))(v4);
  if ((v4[0] & 1) == 0)
  {
    swift_beginAccess();
    *(_BYTE *)(v0 + 16) = 0;
  }
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion(0, MEMORY[0x1E0DEE9C0] + 8, AssociatedTypeWitness, AssociatedConformanceWitness);
  return swift_storeEnumTagMultiPayload();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.AllSatisfy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Publishers.AllSatisfy.receive<A>(subscriber:)(a1, a4, a2, a3);
}

void Publishers.TryAllSatisfy.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Publishers.AllSatisfy.receive<A>(subscriber:)(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD *))type metadata accessor for Publishers.TryAllSatisfy.Inner);
}

void Publishers.AllSatisfy.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD *))
{
  uint64_t v5;
  _QWORD v6[4];

  v5 = *(_QWORD *)(a2 + 24);
  v6[0] = *(_QWORD *)(a2 + 16);
  v6[1] = a3;
  v6[2] = v5;
  v6[3] = a4;
  a5(0, v6);
  JUMPOUT(0x18B58D834);
}

uint64_t Publishers.TryAllSatisfy.Inner.description.getter()
{
  return 0x61536C6C41797254;
}

uint64_t Publishers.TryAllSatisfy.Inner.receive(newValue:)()
{
  uint64_t v0;
  uint64_t result;
  _QWORD v2[4];

  (*(void (**)(_QWORD *__return_ptr))(v0 + 24))(v2);
  if ((v2[0] & 1) != 0)
    return 0;
  swift_beginAccess();
  result = 0;
  *(_BYTE *)(v0 + 16) = 0;
  return result;
}

uint64_t vtable thunk for ReduceProducer.receive(newValue:) dispatching to Publishers.TryAllSatisfy.Inner.receive(newValue:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = Publishers.TryAllSatisfy.Inner.receive(newValue:)();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3;
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryAllSatisfy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Publishers.TryAllSatisfy.receive<A>(subscriber:)(a1, a4, a2, a3);
}

void type metadata accessor for Publishers.TryAllSatisfy.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t *specialized Publishers.AllSatisfy.Inner.init(downstream:initial:reduce:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v19[2];
  char v20;

  v11 = *(_QWORD **)v6;
  v12 = *(_QWORD *)(*(_QWORD *)v6 + 448);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v19[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v14);
  v20 = a2;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v11[55];
  v16[3] = v12;
  v16[4] = v11[57];
  v16[5] = v11[58];
  v16[6] = a3;
  v16[7] = a4;
  v19[0] = a6;
  v19[1] = v16;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v14, (uint64_t)&v20, (uint64_t)v19);
}

uint64_t getEnumTagSinglePayload for Publishers.AllSatisfy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B58DB28 + 4 * byte_18B5F51F8[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.AllSatisfy(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B58DCA0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B58DD18);
}

void sub_18B58DCA8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B58DCB0);
  JUMPOUT(0x18B58DD18);
}

void sub_18B58DCF0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B58DD18);
}

void sub_18B58DCF8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B58DD18);
}

uint64_t sub_18B58DD00(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B58DD18);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B58DD14);
    JUMPOUT(0x18B58DD0CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_18B58DD30()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0DEDFE8];
  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t Subscribers.Sink.__allocating_init(receiveCompletion:receiveValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _DWORD *v9;

  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_QWORD *)(v8 + 80) = 0;
  *(_BYTE *)(v8 + 88) = 2;
  v9 = (_DWORD *)swift_slowAlloc();
  *v9 = 0;
  *(_QWORD *)(v8 + 96) = v9;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 40) = a2;
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  return v8;
}

uint64_t key path getter for Subscribers.Sink.receiveValue : <A, B>Subscribers.Sink<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v5 = *(_QWORD *)(a3 + a2 - 8);
  v6 = *a1;
  v11 = *(_OWORD *)(a3 + a2 - 24);
  swift_beginAccess();
  v8 = *(_QWORD *)(v6 + 16);
  v7 = *(_QWORD *)(v6 + 24);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = v11;
  *(_QWORD *)(v9 + 32) = v5;
  *(_QWORD *)(v9 + 40) = v8;
  *(_QWORD *)(v9 + 48) = v7;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
  a4[1] = v9;
  return swift_retain();
}

uint64_t key path setter for Subscribers.Sink.receiveValue : <A, B>Subscribers.Sink<A, B>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a4 + a3;
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *a1;
  v7 = a1[1];
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 24);
  *(_QWORD *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v8;
  *(_QWORD *)(v9 + 48) = v7;
  v10 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v10 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ();
  *(_QWORD *)(v10 + 24) = v9;
  swift_retain();
  return swift_release();
}

uint64_t Subscribers.Sink.receiveValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t key path getter for Subscribers.Sink.receiveCompletion : <A, B>Subscribers.Sink<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v5 = *(_QWORD *)(a3 + a2 - 8);
  v6 = *a1;
  v11 = *(_OWORD *)(a3 + a2 - 24);
  swift_beginAccess();
  v8 = *(_QWORD *)(v6 + 32);
  v7 = *(_QWORD *)(v6 + 40);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = v11;
  *(_QWORD *)(v9 + 32) = v5;
  *(_QWORD *)(v9 + 40) = v8;
  *(_QWORD *)(v9 + 48) = v7;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
  a4[1] = v9;
  return swift_retain();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t key path setter for Subscribers.Sink.receiveCompletion : <A, B>Subscribers.Sink<A, B>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a4 + a3;
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *a1;
  v7 = a1[1];
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 24);
  *(_QWORD *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v8;
  *(_QWORD *)(v9 + 48) = v7;
  v10 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v10 + 32) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> (@out ());
  *(_QWORD *)(v10 + 40) = v9;
  swift_retain();
  return swift_release();
}

uint64_t Subscribers.Sink.receiveCompletion.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t Subscribers.Sink.description.getter()
{
  return 1802398035;
}

uint64_t Subscribers.Sink.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v0;
  v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEDFE8], v1);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Subscribers.Sink.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 1802398035;
  a1[1] = 0xE400000000000000;
}

uint64_t Subscribers.Sink.init(receiveCompletion:receiveValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _DWORD *v9;

  *(_QWORD *)(v4 + 80) = 0;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_BYTE *)(v4 + 88) = 2;
  v9 = (_DWORD *)swift_slowAlloc();
  *v9 = 0;
  *(_QWORD *)(v4 + 96) = v9;
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 16) = a3;
  *(_QWORD *)(v4 + 24) = a4;
  return v4;
}

uint64_t sub_18B58E2EC()
{
  return swift_deallocObject();
}

uint64_t _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(char *);
  uint64_t result;
  uint64_t v16;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78]();
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v14(v13);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v13, a5);
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Subscribers.Sink<A, B>()
{
  return 1802398035;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Subscribers.Sink<A, B>()
{
  return Subscribers.Sink.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Subscribers.Sink<A, B>(_QWORD *a1@<X8>)
{
  Subscribers.Sink.playgroundDescription.getter(a1);
}

uint64_t sub_18B58E3D0()
{
  return 24;
}

__n128 sub_18B58E3DC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_18B58E3F8()
{
  return 24;
}

__n128 sub_18B58E404(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t method lookup function for Subscribers.Sink()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Subscribers.Sink.__allocating_init(receiveCompletion:receiveValue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_18B58E42C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> (@out ())(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ()(a1, *(uint64_t (**)(void))(v1 + 40));
}

uint64_t sub_18B58E460()
{
  return swift_deallocObject();
}

uint64_t sub_18B58E470()
{
  return swift_deallocObject();
}

uint64_t sub_18B58E480()
{
  return swift_deallocObject();
}

uint64_t AnySubscriberBase.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AnySubscriberBase.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t AnySubscriberBase.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnySubscriberBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void AnySubscriberBase.receive(subscription:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnySubscriberBase.receive(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnySubscriberBase.receive(completion:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance AnySubscriberBase<A, B>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t AnySubscriberBox.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 136) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 152));
}

uint64_t AnySubscriberBox.init(_:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 136) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152), a1);
  return v1;
}

uint64_t AnySubscriberBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 136) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
}

uint64_t AnySubscriberBox.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 136) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  return v0;
}

uint64_t AnySubscriberBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 136) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_deallocClassInstance();
}

uint64_t AnySubscriberBox.receive(subscription:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 144) + 40))(a1, *(_QWORD *)(*(_QWORD *)v1 + 136));
}

uint64_t AnySubscriberBox.receive(completion:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 144) + 56))(a1, *(_QWORD *)(*(_QWORD *)v1 + 136));
}

void AnySubscriberBox.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void AnySubscriberBox.init()()
{
  specialized AnySubscriberBox.init()();
}

uint64_t ClosureBasedAnySubscriber.receiveSubscriptionThunk.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t ClosureBasedAnySubscriber.receiveValueThunk.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t ClosureBasedAnySubscriber.receiveCompletionThunk.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_retain();
  return v1;
}

_QWORD *ClosureBasedAnySubscriber.__allocating_init(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  result[6] = a5;
  result[7] = a6;
  return result;
}

_QWORD *ClosureBasedAnySubscriber.init(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  v6[5] = a4;
  v6[6] = a5;
  v6[7] = a6;
  return v6;
}

uint64_t ClosureBasedAnySubscriber.__ivar_destroyer()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t ClosureBasedAnySubscriber.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ClosureBasedAnySubscriber.__deallocating_deinit()
{
  ClosureBasedAnySubscriber.deinit();
  return swift_deallocClassInstance();
}

uint64_t ClosureBasedAnySubscriber.receive(subscription:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t ClosureBasedAnySubscriber.receive(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t ClosureBasedAnySubscriber.receive(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 48))();
}

void ClosureBasedAnySubscriber.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ClosureBasedAnySubscriber.init()()
{
  specialized ClosureBasedAnySubscriber.init()();
}

uint64_t AnySubscriber.box.getter()
{
  return swift_retain();
}

uint64_t AnySubscriber.descriptionThunk.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_retain();
  return v1;
}

uint64_t AnySubscriber.customMirrorThunk.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t AnySubscriber.playgroundDescriptionThunk.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_retain();
  return v1;
}

void AnySubscriber.combineIdentifier.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 56);
}

uint64_t AnySubscriber.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AnySubscriber.customMirror.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t AnySubscriber.playgroundDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t AnySubscriber.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedConformanceWitness;
  uint64_t v26;
  uint64_t (*v27)();
  uint64_t (*v28)();
  uint64_t v29;
  uint64_t (*v30)@<X0>(uint64_t *@<X8>);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66[2];
  uint64_t v67;
  uint64_t (*v68)();
  uint64_t v69;
  uint64_t (*v70)();
  _QWORD *v71;
  uint64_t (*v72)@<X0>(uint64_t *@<X8>);
  uint64_t v73;
  uint64_t v74;

  v10 = a1;
  v61 = a6;
  v11 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64);
  v12 = MEMORY[0x1E0C80A78](a1);
  v57 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v60 = (char *)&v53 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v53 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v53 - v19;
  MEMORY[0x1E0C80A78](v18);
  v62 = v21;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v22((char *)&v53 - v23, v10, v24);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v58 = a2;
  v59 = a3;
  type metadata accessor for AnySubscriber(0, a2, a3, AssociatedConformanceWitness);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v26 = v67;
    v27 = v68;
    v29 = v69;
    v28 = v70;
    v31 = v71;
    v30 = v72;
    v32 = v73;
    v33 = v62;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(a5 + 8) + 8))(&v74, a4);
    v54 = a5;
    type metadata accessor for AnySubscriberBox(0, a4, a5, v34);
    v22(v20, v10, a4);
    v35 = swift_allocObject();
    v36 = *(_QWORD *)v35;
    v37 = *(_QWORD *)(*(_QWORD *)v35 + 152);
    v56 = v35;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(v36 + 136) - 8) + 32))(v35 + v37, v20);
    v22(v17, v10, a4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of Subscription(&v63, (uint64_t)v66);
      outlined init with take of Subscription(v66, (uint64_t)&v63);
      v55 = swift_allocObject();
      outlined init with take of Subscription(&v63, v55 + 16);
      v27 = partial apply for closure #1 in AnySubscriber.init<A>(_:);
    }
    else
    {
      v65 = 0;
      v63 = 0u;
      v64 = 0u;
      outlined destroy of CustomStringConvertible?((uint64_t)&v63, &demangling cache variable for type metadata for CustomStringConvertible?);
      swift_getDynamicType();
      v38 = _typeName(_:qualified:)();
      v40 = v39;
      v41 = swift_allocObject();
      *(_QWORD *)(v41 + 16) = v38;
      *(_QWORD *)(v41 + 24) = v40;
      v55 = v41;
      v27 = partial apply for closure #2 in AnySubscriber.init<A>(_:);
    }
    v33 = v62;
    v22(v20, v10, a4);
    v42 = v10;
    v43 = (*(unsigned __int8 *)(v33 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    v31 = (_QWORD *)swift_allocObject();
    v44 = v59;
    v31[2] = v58;
    v31[3] = v44;
    v45 = v54;
    v31[4] = a4;
    v31[5] = v45;
    v46 = (char *)v31 + v43;
    v10 = v42;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v46, v20, a4);
    v22(v60, v42, a4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of Subscription(&v63, (uint64_t)v66);
      outlined init with take of Subscription(v66, (uint64_t)&v63);
      v32 = swift_allocObject();
      outlined init with take of Subscription(&v63, v32 + 16);
      v30 = (uint64_t (*)@<X0>(uint64_t *@<X8>))partial apply for closure #4 in AnySubscriber.init<A>(_:);
    }
    else
    {
      v65 = 0;
      v63 = 0u;
      v64 = 0u;
      outlined destroy of CustomStringConvertible?((uint64_t)&v63, &demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible?);
      v22(v57, v42, a4);
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined init with take of Subscription(&v63, (uint64_t)v66);
        outlined init with take of Subscription(v66, (uint64_t)&v63);
        v32 = swift_allocObject();
        outlined init with take of Subscription(&v63, v32 + 16);
        v30 = partial apply for closure #5 in AnySubscriber.init<A>(_:);
      }
      else
      {
        v65 = 0;
        v63 = 0u;
        v64 = 0u;
        outlined destroy of CustomStringConvertible?((uint64_t)&v63, &demangling cache variable for type metadata for CustomStringConvertible?);
        swift_getDynamicType();
        v47 = _typeName(_:qualified:)();
        v49 = v48;
        v32 = swift_allocObject();
        *(_QWORD *)(v32 + 16) = v47;
        *(_QWORD *)(v32 + 24) = v49;
        v30 = partial apply for closure #6 in AnySubscriber.init<A>(_:);
      }
    }
    v28 = partial apply for closure #3 in AnySubscriber.init<A>(_:);
    v26 = v56;
    v29 = v55;
  }
  v50 = v74;
  v51 = v61;
  *v61 = v26;
  v51[1] = (uint64_t)v27;
  v51[2] = v29;
  v51[3] = (uint64_t)v28;
  v51[4] = (uint64_t)v31;
  v51[5] = (uint64_t)v30;
  v51[6] = v32;
  v51[7] = v50;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v10, a4);
}

uint64_t closure #1 in AnySubscriber.init<A>(_:)(_QWORD *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t closure #2 in AnySubscriber.init<A>(_:)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t closure #3 in AnySubscriber.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v20;
  __int128 v21[2];
  uint64_t v22;
  _QWORD v23[4];

  v6 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v17((char *)v21 - v18, a1, a4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomReflectable);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of Subscription(v21, (uint64_t)v23);
    __swift_project_boxed_opaque_existential_1(v23, v23[3]);
    dispatch thunk of CustomReflectable.customMirror.getter();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    v22 = 0;
    memset(v21, 0, sizeof(v21));
    outlined destroy of CustomStringConvertible?((uint64_t)v21, &demangling cache variable for type metadata for CustomReflectable?);
    v17(v15, a1, a4);
    v20 = type metadata accessor for Mirror.DisplayStyle();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v12, 1, 1, v20);
    default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v8);
    return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  }
}

uint64_t closure #4 in AnySubscriber.init<A>(_:)(_QWORD *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  return dispatch thunk of CustomPlaygroundDisplayConvertible.playgroundDescription.getter();
}

uint64_t closure #5 in AnySubscriber.init<A>(_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  result = dispatch thunk of CustomStringConvertible.description.getter();
  a2[3] = MEMORY[0x1E0DEA968];
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t closure #6 in AnySubscriber.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  a3[3] = MEMORY[0x1E0DEA968];
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t AnySubscriber.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t (*v15)();
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)();
  uint64_t v28;
  uint64_t (*v29)();
  _QWORD *v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t v33;

  v8 = type metadata accessor for SubjectSubscriber(0, a3, a4, a3);
  v9 = specialized SubjectSubscriber.__allocating_init(_:)();
  *(_QWORD *)&v23 = v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for AnySubscriber(0, a1, a2, AssociatedConformanceWitness);
  swift_retain();
  if (swift_dynamicCast())
  {
    v12 = v26;
    v11 = v27;
    v14 = v28;
    v13 = v29;
    v16 = v30;
    v15 = v31;
    v17 = v32;
    v18 = v33;
    swift_unknownObjectRelease();
    result = swift_release();
  }
  else
  {
    CustomCombineIdentifierConvertible<>.combineIdentifier.getter(&v33);
    v20 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for SubjectSubscriber<A>, v8);
    type metadata accessor for AnySubscriberBox(0, v8, v20, v21);
    *(_QWORD *)&v23 = v9;
    v12 = swift_allocObject();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 136) - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)v12 + 152), &v23);
    v26 = v12;
    v24 = v8;
    v25 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for SubjectSubscriber<A>, v8);
    *(_QWORD *)&v23 = v9;
    outlined init with take of Subscription(&v23, (uint64_t)v22);
    v14 = swift_allocObject();
    outlined init with take of Subscription(v22, v14 + 16);
    v11 = partial apply for closure #1 in AnySubscriber.init<A>(_:);
    v27 = partial apply for closure #1 in AnySubscriber.init<A>(_:);
    v28 = v14;
    v16 = (_QWORD *)swift_allocObject();
    v16[2] = a1;
    v16[3] = a2;
    v16[4] = v8;
    v16[5] = v20;
    v16[6] = v9;
    v13 = closure #3 in AnySubscriber.init<A>(_:)partial apply;
    v29 = closure #3 in AnySubscriber.init<A>(_:)partial apply;
    v30 = v16;
    v24 = v8;
    v25 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for SubjectSubscriber<A>, v8);
    *(_QWORD *)&v23 = v9;
    outlined init with take of Subscription(&v23, (uint64_t)v22);
    v17 = swift_allocObject();
    outlined init with take of Subscription(v22, v17 + 16);
    swift_retain_n();
    result = swift_unknownObjectRelease();
    v15 = partial apply for closure #4 in AnySubscriber.init<A>(_:);
    v18 = v33;
  }
  *a5 = v12;
  a5[1] = (uint64_t)v11;
  a5[2] = v14;
  a5[3] = (uint64_t)v13;
  a5[4] = (uint64_t)v16;
  a5[5] = (uint64_t)v15;
  a5[6] = v17;
  a5[7] = v18;
  return result;
}

void AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t (*v25)(uint64_t);
  _QWORD *v26;
  _QWORD *v27;
  os_unfair_lock_s *v28;
  uint64_t v29;

  if (a1)
  {
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = a1;
    *(_QWORD *)(v18 + 24) = a2;
    v19 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscription) -> (@out ());
  }
  else
  {
    v18 = 0;
    v19 = (uint64_t (*)())specialized closure #1 in Publisher.multicast<A>(subject:);
  }
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = v18;
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a7;
  v21[3] = a8;
  v21[4] = a10;
  if (a3)
  {
    v21[5] = a3;
    v22 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@unowned Subscribers.Demand);
    v21[6] = a4;
  }
  else
  {
    v22 = partial apply for closure #2 in implicit closure #2 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:);
  }
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = a7;
  v23[3] = a8;
  v23[4] = a10;
  v23[5] = v22;
  v23[6] = v21;
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = a7;
  v24[3] = a8;
  v24[4] = a10;
  if (a5)
  {
    v24[5] = a5;
    v25 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> (@out ());
    v24[6] = a6;
  }
  else
  {
    v25 = specialized closure #1 in Publisher.multicast<A>(subject:);
  }
  type metadata accessor for ClosureBasedAnySubscriber(0, a7, a8, a10);
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = a7;
  v26[3] = a8;
  v26[4] = a10;
  v26[5] = v25;
  v26[6] = v24;
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscription) -> (@out ());
  v27[3] = v20;
  v27[4] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out Subscribers.Demand);
  v27[5] = v23;
  v27[6] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ();
  v27[7] = v26;
  if (one-time initialization token for lock != -1)
    swift_once();
  v28 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v29 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v28);
    *a9 = v27;
    a9[1] = closure #4 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:);
    a9[2] = 0;
    a9[3] = closure #5 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:);
    a9[4] = 0;
    a9[5] = closure #6 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:);
    a9[6] = 0;
    a9[7] = v29;
  }
}

unint64_t closure #4 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:)()
{
  return 0xD000000000000017;
}

uint64_t closure #5 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:)()
{
  return Mirror.init(reflecting:)();
}

void closure #6 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:)(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0xD000000000000017;
  a1[1] = 0x800000018B5FE510;
}

uint64_t AnySubscriber.receive(subscription:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t AnySubscriber.receive(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t AnySubscriber.receive(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t _ReferencedBasedAnySubscriber.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t _ReferencedBasedAnySubscriber.customMirror.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t _ReferencedBasedAnySubscriber.playgroundDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t _ReferencedBasedAnySubscriber.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance _ReferencedBasedAnySubscriber<A, B>(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)v1 + 16) + 112);
  swift_unknownObjectRetain();
  v3(a1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance _ReferencedBasedAnySubscriber<A, B>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  v3 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)v1 + 16) + 120);
  swift_unknownObjectRetain();
  v4 = v3(a1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance _ReferencedBasedAnySubscriber<A, B>(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)v1 + 16) + 128);
  swift_unknownObjectRetain();
  v3(a1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _ReferencedBasedAnySubscriber<A, B>()
{
  return _ReferencedBasedAnySubscriber.description.getter();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance _ReferencedBasedAnySubscriber<A, B>()
{
  return _ReferencedBasedAnySubscriber.customMirror.getter();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance _ReferencedBasedAnySubscriber<A, B>()
{
  return _ReferencedBasedAnySubscriber.playgroundDescription.getter();
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance _ReferencedBasedAnySubscriber<A, B>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 72);
}

void specialized AnySubscriberBox.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void specialized ClosureBasedAnySubscriber.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_18B58FB3C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AnySubscriber.init<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_18B58FB8C()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in AnySubscriber.init<A>(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return closure #3 in AnySubscriber.init<A>(_:)((uint64_t)v0 + ((v2 + 48) & ~v2), v0[2], v0[3], v1);
}

uint64_t partial apply for closure #6 in AnySubscriber.init<A>(_:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = v3;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t partial apply for closure #5 in AnySubscriber.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  result = dispatch thunk of CustomStringConvertible.description.getter();
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_18B58FC70()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnySubscriber.init<A>(_:)()
{
  uint64_t v0;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_18B58FCDC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #3 in AnySubscriber.init<A>(_:)partial apply()
{
  uint64_t *v0;

  return closure #3 in AnySubscriber.init<A>(_:)((uint64_t)(v0 + 6), v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #4 in AnySubscriber.init<A>(_:)()
{
  uint64_t v0;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  return dispatch thunk of CustomPlaygroundDisplayConvertible.playgroundDescription.getter();
}

uint64_t sub_18B58FD58()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscription) -> (@out ())()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_18B58FD9C()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in implicit closure #2 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out Subscribers.Demand)()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 40))(&v2);
  return v2;
}

uint64_t sub_18B58FDE4()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for ClosureBasedAnySubscriber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ClosureBasedAnySubscriber);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@unowned Subscribers.Demand)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 40))();
  *a1 = result;
  return result;
}

uint64_t method lookup function for AnySubscriberBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnySubscriberBase.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of AnySubscriberBase.receive(subscription:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of AnySubscriberBase.receive(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t method lookup function for AnySubscriberBox()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnySubscriberBox.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t type metadata completion function for ClosureBasedAnySubscriber()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for ClosureBasedAnySubscriber()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ClosureBasedAnySubscriber.__allocating_init(_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

_QWORD *assignWithCopy for AnySubscriber(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  v6 = a2[6];
  a1[5] = a2[5];
  a1[6] = v6;
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  return a1;
}

uint64_t assignWithTake for AnySubscriber(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  v4 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v4;
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t type metadata completion function for _ReferencedBasedAnySubscriber()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _ReferencedBasedAnySubscriber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ReferencedBasedAnySubscriber);
}

uint64_t sub_18B59005C()
{
  return swift_deallocObject();
}

uint64_t Publishers.RemoveDuplicates.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.RemoveDuplicates, a6);
}

uint64_t Publisher.tryRemoveDuplicates(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t (**v16)();
  uint64_t v18;

  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v13, v5);
  v14 = (uint64_t (*)())swift_allocObject();
  *((_QWORD *)v14 + 2) = a3;
  *((_QWORD *)v14 + 3) = a4;
  *((_QWORD *)v14 + 4) = a1;
  *((_QWORD *)v14 + 5) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, a3);
  v16 = (uint64_t (**)())(a5 + *(int *)(type metadata accessor for Publishers.TryRemoveDuplicates(0, a3, a4, v15) + 36));
  *v16 = partial apply for closure #1 in Publisher.tryRemoveDuplicates(by:);
  v16[1] = v14;
  return swift_retain();
}

uint64_t sub_18B59015C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publisher.tryRemoveDuplicates(by:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))() & 1;
}

uint64_t Publishers.TryRemoveDuplicates.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.TryRemoveDuplicates, a6);
}

uint64_t type metadata accessor for Publishers.TryRemoveDuplicates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.TryRemoveDuplicates);
}

uint64_t Publishers.RemoveDuplicates.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

unint64_t Publishers.RemoveDuplicates.Inner.description.getter()
{
  return 0xD000000000000010;
}

uint64_t Publishers.TryRemoveDuplicates.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.RemoveDuplicates.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for Publishers.TryRemoveDuplicates.Inner, (uint64_t)&unk_1E2174820, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error));
}

unint64_t Publishers.TryRemoveDuplicates.Inner.description.getter()
{
  return 0xD000000000000013;
}

uint64_t Publishers.RemoveDuplicates.Inner.customMirror.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t *v18;

  v1 = *v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18B5F4780;
  *(_QWORD *)(v8 + 32) = 0x657274736E776F64;
  *(_QWORD *)(v8 + 40) = 0xEA00000000006D61;
  v9 = (uint64_t)v0 + *(_QWORD *)(v1 + 144);
  v10 = *(_QWORD *)(v1 + 280);
  *(_QWORD *)(v8 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(boxed_opaque_existential_1, v9, v10);
  *(_QWORD *)(v8 + 80) = 1953718636;
  *(_QWORD *)(v8 + 88) = 0xE400000000000000;
  v12 = (uint64_t)v0 + *(_QWORD *)(*v0 + 304);
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  *(_QWORD *)(v8 + 120) = v13;
  v14 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v14, v12, v13);
  v15 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Publishers.TryRemoveDuplicates.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD v23[2];
  _QWORD v24[3];

  v23[0] = a2;
  v4 = *v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)v23 - v12;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)v23 - v15;
  v17 = (uint64_t)v2 + *(_QWORD *)(v4 + 304);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v13, v17, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    v18 = (char *)v23[0];
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, AssociatedTypeWitness);
    ((void (*)(_QWORD *__return_ptr, char *, uint64_t))v2[2])(v24, v16, a1);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
    v18 = (char *)v23[0];
    if (LOBYTE(v24[0]) == 1)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v14 + 56))(v23[0], 1, 1, AssociatedTypeWitness);
      goto LABEL_4;
    }
  }
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v19(v10, a1, AssociatedTypeWitness);
  v20 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56);
  v20(v10, 0, 1, AssociatedTypeWitness);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v17, v10, v6);
  swift_endAccess();
  v19(v18, a1, AssociatedTypeWitness);
  v20(v18, 0, 1, AssociatedTypeWitness);
LABEL_4:
  v21 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for PartialCompletion(0, v6, v21, MEMORY[0x1E0DEDB38]);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Publishers.RemoveDuplicates.Inner.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 304);
  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryRemoveDuplicates<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryRemoveDuplicates.receive<A>(subscriber:)(a1, a4, a2, a3);
}

void type metadata accessor for Publishers.TryRemoveDuplicates.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t *specialized Publishers.RemoveDuplicates.Inner.init(downstream:filter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a3;
  v22 = a5;
  v20 = a2;
  v7 = *(_QWORD **)v5;
  v8 = *(_QWORD *)(*(_QWORD *)v5 + 280);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v5 + v7[38];
  v13 = v7[36];
  v14 = v7[34];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v12, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v14;
  v16[3] = v8;
  v16[4] = v13;
  v17 = v20;
  v16[5] = v7[37];
  v16[6] = v17;
  v16[7] = v21;
  v23[0] = v22;
  v23[1] = v16;
  return FilterProducer.init(downstream:filter:)((uint64_t)v11, (uint64_t)v23);
}

uint64_t getEnumTagSinglePayload for Publishers.RemoveDuplicates(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B590920 + 4 * byte_18B5F56F0[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.RemoveDuplicates(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B590A98()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B590B10);
}

void sub_18B590AA0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B590AA8);
  JUMPOUT(0x18B590B10);
}

void sub_18B590AE8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B590B10);
}

void sub_18B590AF0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B590B10);
}

uint64_t sub_18B590AF8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B590B10);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B590B0CLL);
    JUMPOUT(0x18B590B04);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_18B590B28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)(*(uint64_t (**)(void))(v1 + 48), a1);
}

uint64_t Publishers.Decode.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

void Publishers.Decode.init(upstream:decoder:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  unint64_t v16;
  char *v17;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a9, a1);
  v15 = *(_QWORD *)(a5 - 8);
  v16 = (*(unsigned __int8 *)(v15 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v17 = (char *)swift_allocObject();
  *((_QWORD *)v17 + 2) = a3;
  *((_QWORD *)v17 + 3) = a4;
  *((_QWORD *)v17 + 4) = a5;
  *((_QWORD *)v17 + 5) = a6;
  *((_QWORD *)v17 + 6) = a7;
  *((_QWORD *)v17 + 7) = a8;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(&v17[v16], a2, a5);
  type metadata accessor for Publishers.Decode();
}

uint64_t sub_18B590C44(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t (**v3)(uint64_t);

  v3 = (uint64_t (**)(uint64_t))(v1 + *(int *)(result + 68));
  *v3 = partial apply for closure #1 in Publishers.Decode.init(upstream:decoder:);
  v3[1] = v2;
  return result;
}

uint64_t sub_18B590C78()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.Decode.init(upstream:decoder:)(uint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v1[7] + 16))(v1[3], a1, v1[3], v1[6]);
}

void type metadata accessor for Publishers.Decode()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.Decode.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.Decode.Inner();
}

uint64_t sub_18B590DA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v2);
  v9 = (uint64_t *)(v1 + *(int *)(v3 + 68));
  v10 = *v9;
  v11 = v9[1];
  swift_allocObject();
  swift_retain();
  *(_QWORD *)(v7 - 128) = Publishers.Decode.Inner.init(_:decode:)(v5, v10, v11);
  v12 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Decode<A, B, C>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v7 - 128, *(_QWORD *)(v7 - 144), a1, *(_QWORD *)(v7 - 160), v12);
  return swift_release();
}

void type metadata accessor for Publishers.Decode.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.Decode.Inner.__allocating_init(_:decode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Publishers.Decode.Inner.init(_:decode:));
}

void Publishers.Decode.Inner.customMirror.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t *v23;

  v1 = *v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(_QWORD *)(v1 + 160)));
  v23 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18B5F5810;
  *(_QWORD *)(v6 + 32) = 0x657274736E776F64;
  *(_QWORD *)(v6 + 40) = 0xEA00000000006D61;
  v7 = (uint64_t)v0 + *(_QWORD *)(*v0 + 144);
  v8 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v6 + 72) = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v6 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(boxed_opaque_existential_1, v7, v8);
  *(_QWORD *)(v6 + 80) = 0x64656873696E6966;
  *(_QWORD *)(v6 + 88) = 0xE800000000000000;
  v10 = *v0;
  v11 = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(v6 + 96) = *((_BYTE *)v0 + *(_QWORD *)(*v0 + 168));
  *(_QWORD *)(v6 + 120) = v11;
  *(_QWORD *)(v6 + 128) = 0xD000000000000014;
  *(_QWORD *)(v6 + 136) = 0x800000018B5FE5C0;
  *(_QWORD *)(v6 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  v12 = swift_allocObject();
  v13 = v12 + 16;
  *(_QWORD *)(v6 + 144) = v12;
  v14 = (uint64_t)v0 + *(_QWORD *)(v10 + 176);
  swift_beginAccess();
  outlined init with copy of Subscription?(v14, v13);
  v15 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v5, 1, 1, v15);
  v16 = *(_QWORD *)(v1 + 96);
  v18 = *(_OWORD *)(v1 + 80);
  v19 = v16;
  v20 = v8;
  v17 = *(_OWORD *)(v1 + 128);
  v21 = *(_OWORD *)(v1 + 112);
  v22 = v17;
  type metadata accessor for Publishers.Decode.Inner();
}

void sub_18B591078()
{
  uint64_t v0;
  uint64_t v1;

  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v1);
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160)));
}

void Publishers.Decode.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x65646F636544;
  a1[1] = 0xE600000000000000;
}

uint64_t *Publishers.Decode.Inner.init(_:decode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 160);
  v9 = (_DWORD *)swift_slowAlloc();
  *(uint64_t *)((char *)v3 + v8) = (uint64_t)v9;
  *v9 = 0;
  *((_BYTE *)v3 + *(_QWORD *)(*v3 + 168)) = 0;
  v10 = (uint64_t)v3 + *(_QWORD *)(*v3 + 176);
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_QWORD *)(v10 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 104) - 8) + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 144), a1);
  v11 = (uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 152));
  *v11 = a2;
  v11[1] = a3;
  return v3;
}

uint64_t *Publishers.Decode.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 160)), -1, -1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 104) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 144));
  swift_release();
  outlined destroy of Subscription?((uint64_t)v0 + *(_QWORD *)(*v0 + 176));
  return v0;
}

uint64_t Publishers.Decode.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.Decode.Inner.deinit);
}

uint64_t Publishers.Decode.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[40];

  v3 = *v1;
  v4 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 160));
  os_unfair_lock_lock(v4);
  if ((*((_BYTE *)v1 + *(_QWORD *)(*v1 + 168)) & 1) == 0)
  {
    v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 176);
    swift_beginAccess();
    outlined init with copy of Subscription?(v5, (uint64_t)&v13);
    v6 = v15;
    outlined destroy of Subscription?((uint64_t)&v13);
    if (!v6)
    {
      outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
      outlined init with take of Subscription?((uint64_t)&v13, (uint64_t)v18);
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)v18, v5);
      swift_endAccess();
      os_unfair_lock_unlock(v4);
      v10 = *(_QWORD *)(v3 + 136);
      v11 = *(_OWORD *)(v3 + 80);
      v14 = *(_QWORD *)(v3 + 96);
      v12 = *(_OWORD *)(v3 + 104);
      v13 = v11;
      v15 = v12;
      v16 = *(_OWORD *)(v3 + 120);
      v17 = v10;
      type metadata accessor for Publishers.Decode.Inner();
    }
  }
  os_unfair_lock_unlock(v4);
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
}

uint64_t Publishers.Decode.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  os_unfair_lock_s *v9;
  char v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  v4 = *(_QWORD **)v1;
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(os_unfair_lock_s **)(v1 + v4[20]);
  os_unfair_lock_lock(v9);
  v10 = *(_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 168));
  os_unfair_lock_unlock(v9);
  v11 = 0;
  if ((v10 & 1) == 0)
  {
    (*(void (**)(uint64_t))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 152)))(a1);
    v11 = (*(uint64_t (**)(char *, _QWORD))(v4[17] + 48))(v8, v4[13]);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v11;
}

void Publishers.Decode.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  v21 = a1;
  v2 = *(_QWORD **)v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)&v19 - v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v19 - v11;
  v13 = *(os_unfair_lock_s **)(v1 + v2[20]);
  os_unfair_lock_lock(v13);
  v14 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  if ((*(_BYTE *)(v1 + v14) & 1) != 0)
  {
    os_unfair_lock_unlock(v13);
  }
  else
  {
    v20 = v6;
    *(_BYTE *)(v1 + v14) = 1;
    v23 = 0;
    memset(v22, 0, sizeof(v22));
    v15 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 176);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v22, v15);
    swift_endAccess();
    os_unfair_lock_unlock(v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v21, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, AssociatedTypeWitness) == 1)
    {
      *(_QWORD *)&v22[0] = 0;
      (*(void (**)(_OWORD *, _QWORD))(v2[17] + 56))(v22, v2[13]);
    }
    else
    {
      v16 = v20;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v20, v12, AssociatedTypeWitness);
      v17 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(v18, v16, AssociatedTypeWitness);
      *(_QWORD *)&v22[0] = v17;
      (*(void (**)(_OWORD *, _QWORD))(v2[17] + 56))(v22, v2[13]);
      MEMORY[0x18D77ABF4](v17);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v16, AssociatedTypeWitness);
    }
  }
}

uint64_t Publishers.Decode.Inner.request(_:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[40];

  v3 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 160));
  os_unfair_lock_lock(v3);
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 176);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v11);
  os_unfair_lock_unlock(v3);
  outlined init with copy of Subscription?((uint64_t)v11, (uint64_t)v8);
  v5 = v9;
  if (v9)
  {
    v6 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    outlined destroy of Subscription?((uint64_t)v11);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    outlined destroy of Subscription?((uint64_t)v11);
    return outlined destroy of Subscription?((uint64_t)v8);
  }
}

void Publishers.Decode.Inner.cancel()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = *(os_unfair_lock_s **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160));
  os_unfair_lock_lock(v1);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  if ((*(_BYTE *)(v0 + v2) & 1) == 0)
  {
    v3 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 176);
    swift_beginAccess();
    outlined init with copy of Subscription?(v3, (uint64_t)&v6);
    if (*((_QWORD *)&v7 + 1))
    {
      outlined init with take of Subscription(&v6, (uint64_t)v9);
      v8 = 0;
      v6 = 0u;
      v7 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v6, v3);
      swift_endAccess();
      *(_BYTE *)(v0 + v2) = 1;
      os_unfair_lock_unlock(v1);
      v4 = v10;
      v5 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      return;
    }
    outlined destroy of Subscription?((uint64_t)&v6);
  }
  os_unfair_lock_unlock(v1);
}

uint64_t protocol witness for Subscription.request(_:) in conformance Publishers.Decode<A, B, C>.Inner<A1>(uint64_t a1)
{
  return Publishers.Decode.Inner.request(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Decode<A, B, C>.Inner<A1>(_QWORD *a1)
{
  return Publishers.Decode.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Decode<A, B, C>.Inner<A1>(uint64_t a1)
{
  return Publishers.Decode.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Decode<A, B, C>.Inner<A1>(uint64_t a1)
{
  Publishers.Decode.Inner.receive(completion:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Decode<A, B, C>.Inner<A1>()
{
  return 0x65646F636544;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Decode<A, B, C>.Inner<A1>()
{
  Publishers.Decode.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Decode<A, B, C>.Inner<A1>(_QWORD *a1@<X8>)
{
  Publishers.Decode.Inner.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Decode<A, B, C>.Inner<A1>()
{
  Publishers.Decode.Inner.cancel()();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Decode<A, B, C>(uint64_t a1)
{
  Publishers.Decode.receive<A>(subscriber:)(a1);
}

void Publishers.Encode.init(upstream:encoder:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  unint64_t v15;
  char *v16;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a8, a1);
  v14 = *(_QWORD *)(a4 - 8);
  v15 = (*(unsigned __int8 *)(v14 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = a3;
  *((_QWORD *)v16 + 3) = a4;
  *((_QWORD *)v16 + 4) = a5;
  *((_QWORD *)v16 + 5) = a6;
  *((_QWORD *)v16 + 6) = a7;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(&v16[v15], a2, a4);
  type metadata accessor for Publishers.Encode();
}

uint64_t sub_18B591BC8(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t (**v3)(uint64_t);

  v3 = (uint64_t (**)(uint64_t))(v1 + *(int *)(result + 60));
  *v3 = partial apply for closure #1 in Publishers.Encode.init(upstream:encoder:);
  v3[1] = v2;
  return result;
}

uint64_t sub_18B591BFC()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.Encode.init(upstream:encoder:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;

  v3 = v1[3];
  v4 = v1[5];
  v5 = v1[6];
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v6(a1, AssociatedTypeWitness, v5, v3, v4);
}

void type metadata accessor for Publishers.Encode()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.Encode.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.Encode.Inner();
}

uint64_t sub_18B591D78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v2);
  v9 = (uint64_t *)(v1 + *(int *)(v3 + 60));
  v10 = *v9;
  v11 = v9[1];
  swift_allocObject();
  swift_retain();
  *(_QWORD *)(v7 - 128) = Publishers.Encode.Inner.init(_:encode:)(v5, v10, v11);
  v12 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Encode<A, B>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v7 - 128, *(_QWORD *)(v7 - 144), a1, *(_QWORD *)(v7 - 160), v12);
  return swift_release();
}

void type metadata accessor for Publishers.Encode.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.Encode.Inner.__allocating_init(_:encode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Publishers.Encode.Inner.init(_:encode:));
}

void Publishers.Encode.Inner.customMirror.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t *v20;

  v1 = *v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(_QWORD *)(v1 + 152)));
  v20 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18B5F5810;
  *(_QWORD *)(v6 + 32) = 0x657274736E776F64;
  *(_QWORD *)(v6 + 40) = 0xEA00000000006D61;
  v7 = (uint64_t)v0 + *(_QWORD *)(*v0 + 136);
  v8 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v6 + 72) = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v6 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(boxed_opaque_existential_1, v7, v8);
  *(_QWORD *)(v6 + 80) = 0x64656873696E6966;
  *(_QWORD *)(v6 + 88) = 0xE800000000000000;
  v10 = *v0;
  v11 = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(v6 + 96) = *((_BYTE *)v0 + *(_QWORD *)(*v0 + 160));
  *(_QWORD *)(v6 + 120) = v11;
  *(_QWORD *)(v6 + 128) = 0xD000000000000014;
  *(_QWORD *)(v6 + 136) = 0x800000018B5FE5C0;
  *(_QWORD *)(v6 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  v12 = swift_allocObject();
  v13 = v12 + 16;
  *(_QWORD *)(v6 + 144) = v12;
  v14 = (uint64_t)v0 + *(_QWORD *)(v10 + 168);
  swift_beginAccess();
  outlined init with copy of Subscription?(v14, v13);
  v15 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v5, 1, 1, v15);
  v16 = *(_OWORD *)(v1 + 80);
  v17 = v8;
  v18 = *(_OWORD *)(v1 + 104);
  v19 = *(_OWORD *)(v1 + 120);
  type metadata accessor for Publishers.Encode.Inner();
}

void sub_18B59204C()
{
  uint64_t v0;
  uint64_t v1;

  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v1);
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152)));
}

void Publishers.Encode.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x65646F636E45;
  a1[1] = 0xE600000000000000;
}

uint64_t *Publishers.Encode.Inner.init(_:encode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 152);
  v9 = (_DWORD *)swift_slowAlloc();
  *(uint64_t *)((char *)v3 + v8) = (uint64_t)v9;
  *v9 = 0;
  *((_BYTE *)v3 + *(_QWORD *)(*v3 + 160)) = 0;
  v10 = (uint64_t)v3 + *(_QWORD *)(*v3 + 168);
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_QWORD *)(v10 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 96) - 8) + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 136), a1);
  v11 = (uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 144));
  *v11 = a2;
  v11[1] = a3;
  return v3;
}

uint64_t *Publishers.Encode.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 152)), -1, -1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 136));
  swift_release();
  outlined destroy of Subscription?((uint64_t)v0 + *(_QWORD *)(*v0 + 168));
  return v0;
}

uint64_t Publishers.Encode.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.Encode.Inner.deinit);
}

uint64_t Publishers.Encode.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[40];

  v3 = *v1;
  v4 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 152));
  os_unfair_lock_lock(v4);
  if ((*((_BYTE *)v1 + *(_QWORD *)(*v1 + 160)) & 1) == 0)
  {
    v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 168);
    swift_beginAccess();
    outlined init with copy of Subscription?(v5, (uint64_t)&v12);
    v6 = *((_QWORD *)&v13 + 1);
    outlined destroy of Subscription?((uint64_t)&v12);
    if (!v6)
    {
      outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v12);
      outlined init with take of Subscription?((uint64_t)&v12, (uint64_t)v16);
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)v16, v5);
      swift_endAccess();
      os_unfair_lock_unlock(v4);
      v10 = *(_QWORD *)(v3 + 112);
      v11 = *(_OWORD *)(v3 + 96);
      v12 = *(_OWORD *)(v3 + 80);
      v13 = v11;
      v14 = v10;
      v15 = *(_OWORD *)(v3 + 120);
      type metadata accessor for Publishers.Encode.Inner();
    }
  }
  os_unfair_lock_unlock(v4);
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
}

uint64_t Publishers.Encode.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  os_unfair_lock_s *v9;
  char v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  v4 = *(_QWORD **)v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v13 - v7;
  v9 = *(os_unfair_lock_s **)(v1 + v4[19]);
  os_unfair_lock_lock(v9);
  v10 = *(_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 160));
  os_unfair_lock_unlock(v9);
  v11 = 0;
  if ((v10 & 1) == 0)
  {
    (*(void (**)(uint64_t))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 144)))(a1);
    v11 = (*(uint64_t (**)(char *, _QWORD))(v4[15] + 48))(v8, v4[12]);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  return v11;
}

void Publishers.Encode.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  v21 = a1;
  v2 = *(_QWORD **)v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)&v19 - v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v19 - v11;
  v13 = *(os_unfair_lock_s **)(v1 + v2[19]);
  os_unfair_lock_lock(v13);
  v14 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  if ((*(_BYTE *)(v1 + v14) & 1) != 0)
  {
    os_unfair_lock_unlock(v13);
  }
  else
  {
    v20 = v6;
    *(_BYTE *)(v1 + v14) = 1;
    v23 = 0;
    memset(v22, 0, sizeof(v22));
    v15 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 168);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v22, v15);
    swift_endAccess();
    os_unfair_lock_unlock(v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v21, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, AssociatedTypeWitness) == 1)
    {
      *(_QWORD *)&v22[0] = 0;
      (*(void (**)(_OWORD *, _QWORD))(v2[15] + 56))(v22, v2[12]);
    }
    else
    {
      v16 = v20;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v20, v12, AssociatedTypeWitness);
      v17 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(v18, v16, AssociatedTypeWitness);
      *(_QWORD *)&v22[0] = v17;
      (*(void (**)(_OWORD *, _QWORD))(v2[15] + 56))(v22, v2[12]);
      MEMORY[0x18D77ABF4](v17);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v16, AssociatedTypeWitness);
    }
  }
}

uint64_t Publishers.Encode.Inner.request(_:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[40];

  v3 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152));
  os_unfair_lock_lock(v3);
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 168);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v11);
  os_unfair_lock_unlock(v3);
  outlined init with copy of Subscription?((uint64_t)v11, (uint64_t)v8);
  v5 = v9;
  if (v9)
  {
    v6 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    outlined destroy of Subscription?((uint64_t)v11);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    outlined destroy of Subscription?((uint64_t)v11);
    return outlined destroy of Subscription?((uint64_t)v8);
  }
}

void Publishers.Encode.Inner.cancel()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = *(os_unfair_lock_s **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  os_unfair_lock_lock(v1);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  if ((*(_BYTE *)(v0 + v2) & 1) == 0)
  {
    v3 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 168);
    swift_beginAccess();
    outlined init with copy of Subscription?(v3, (uint64_t)&v6);
    if (*((_QWORD *)&v7 + 1))
    {
      outlined init with take of Subscription(&v6, (uint64_t)v9);
      v8 = 0;
      v6 = 0u;
      v7 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v6, v3);
      swift_endAccess();
      *(_BYTE *)(v0 + v2) = 1;
      os_unfair_lock_unlock(v1);
      v4 = v10;
      v5 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      return;
    }
    outlined destroy of Subscription?((uint64_t)&v6);
  }
  os_unfair_lock_unlock(v1);
}

uint64_t protocol witness for Subscription.request(_:) in conformance Publishers.Encode<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.Encode.Inner.request(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Encode<A, B>.Inner<A1>(_QWORD *a1)
{
  return Publishers.Encode.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Encode<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.Encode.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Encode<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.Encode.Inner.receive(completion:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Encode<A, B>.Inner<A1>()
{
  return 0x65646F636E45;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Encode<A, B>.Inner<A1>()
{
  Publishers.Encode.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Encode<A, B>.Inner<A1>(_QWORD *a1@<X8>)
{
  Publishers.Encode.Inner.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Encode<A, B>.Inner<A1>()
{
  Publishers.Encode.Inner.cancel()();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Encode<A, B>(uint64_t a1)
{
  Publishers.Encode.receive<A>(subscriber:)(a1);
}

void Publisher.decode<A, B>(type:decoder:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a7;
  v24 = a8;
  v16 = *(_QWORD *)(a5 - 8);
  v17 = MEMORY[0x1E0C80A78](a1);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v22 + 16))(v21, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a2, a5);
  Publishers.Decode.init(upstream:decoder:)((uint64_t)v21, (uint64_t)v19, a3, a4, a5, a6, v23, v24, a9);
}

void Publisher<>.encode<A>(encoder:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a6;
  v14 = *(_QWORD *)(a3 - 8);
  v15 = MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v19, v7, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, a3);
  Publishers.Encode.init(upstream:encoder:)((uint64_t)v19, (uint64_t)v17, a2, a3, a4, a5, v22, a7);
}

uint64_t dispatch thunk of TopLevelDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t dispatch thunk of TopLevelEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t type metadata completion function for Publishers.Decode()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Decode.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Encode()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.Decode(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B592F44 + 4 * byte_18B5F5820[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.Decode(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B5930BC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B593134);
}

void sub_18B5930C4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B5930CCLL);
  JUMPOUT(0x18B593134);
}

void sub_18B59310C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B593134);
}

void sub_18B593114()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B593134);
}

uint64_t sub_18B59311C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B593134);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B593130);
    JUMPOUT(0x18B593128);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for Publishers.Encode.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.Decode<A, B, C>.Inner<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_18B59320C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t Just.output.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t *Just.Inner.__allocating_init(downstream:value:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return Just.Inner.init(downstream:value:)(a1, a2);
}

uint64_t Just.Inner.customMirror.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v1 = *(_QWORD **)v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = v0;
  v8 = v1[10];
  getContiguousArrayStorageType<A>(for:)(v8, v8);
  v9 = *(_QWORD *)(v8 - 8);
  swift_allocObject();
  swift_retain();
  v10 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, v0 + *(_QWORD *)(*(_QWORD *)v0 + 112), v8);
  v15[1] = v10;
  v12 = type metadata accessor for Array();
  specialized closure #1 in Publisher.multicast<A>(subject:)(v12);
  v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v7, 1, 1, v13);
  type metadata accessor for Just.Inner(0, v8, v1[11], v1[12]);
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

void Just.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 1953723722;
  a1[1] = 0xE400000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Just<A>.Inner<A1>()
{
  return 1953723722;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Just<A>.Inner<A1>()
{
  return Just.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Just<A>.Inner<A1>(_QWORD *a1@<X8>)
{
  Just.Inner.playgroundDescription.getter(a1);
}

uint64_t static Just<A>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> Just<A>()
{
  return static Just<A>.== infix(_:_:)();
}

uint64_t Just<A>.max()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t Just<A>.contains(_:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t Just.allSatisfy(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = a1(v2);
  *a2 = result & 1;
  return result;
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC@<X0>(void (*a1)(_BYTE *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];

  MEMORY[0x1E0C80A78](a1);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Result();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v11[-v8];
  a1(v5);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(a2, v9, v6);
}

uint64_t Just.collect()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  getContiguousArrayStorageType<A>(for:)(v4, v4);
  v5 = *(_QWORD *)(v4 - 8);
  swift_allocObject();
  v6 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v10 = v6;
  v8 = type metadata accessor for Array();
  specialized closure #1 in Publisher.multicast<A>(subject:)(v8);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, &v10, v8);
}

uint64_t Just.prepend(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  getContiguousArrayStorageType<A>(for:)(v4, v4);
  v5 = *(_QWORD *)(v4 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v2, v4);
  v7 = type metadata accessor for Array();
  specialized closure #1 in Publisher.multicast<A>(subject:)(v7);
  static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF38], v7);
  Sequence.publisher.getter(v7, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Just.prepend<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Array();
  getContiguousArrayStorageType<A>(for:)(v4, v4);
  v6 = *(_QWORD *)(v4 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v2, v4);
  specialized closure #1 in Publisher.multicast<A>(subject:)(v5);
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF58], v5);
  static RangeReplaceableCollection.+ infix<A>(_:_:)();
  swift_bridgeObjectRelease();
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF38], v5);
  Sequence.publisher.getter(v5, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Just.append(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  getContiguousArrayStorageType<A>(for:)(v4, v4);
  v5 = *(_QWORD *)(v4 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v2, v4);
  v7 = type metadata accessor for Array();
  specialized closure #1 in Publisher.multicast<A>(subject:)(v7);
  static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF38], v7);
  Sequence.publisher.getter(v7, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Just.append<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Array();
  getContiguousArrayStorageType<A>(for:)(v4, v4);
  v6 = *(_QWORD *)(v4 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v2, v4);
  specialized closure #1 in Publisher.multicast<A>(subject:)(v5);
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF58], v5);
  static RangeReplaceableCollection.+ infix<A>(_:_:)();
  swift_bridgeObjectRelease();
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF38], v5);
  Sequence.publisher.getter(v5, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Just.tryAllSatisfy(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = a1(v2);
  *(_QWORD *)a2 = result & 1;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void Just.count()(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t Just.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for Optional();
  result = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v13 - v9;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v11 = *(_QWORD *)(v6 - 8);
    if (a1)
    {
      v12 = 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v3, v6);
      v12 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v10, v12, 1, v6);
    return Optional.Publisher.init(_:)((uint64_t)v10, a3);
  }
  return result;
}

uint64_t Just.drop(while:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = v3;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v15 - v9;
  v11 = a1(v3);
  v12 = *(_QWORD *)(v7 - 8);
  if ((v11 & 1) != 0)
  {
    v13 = 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, v4, v7);
    v13 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v13, 1, v7);
  return Optional.Publisher.init(_:)((uint64_t)v10, a3);
}

uint64_t Just.last()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t Just.ignoreOutput()@<X0>(_BYTE *a1@<X8>)
{
  return Empty.init(completeImmediately:)(1, a1);
}

uint64_t Just.map<A>(_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t);
  uint64_t v10;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78]();
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8(v2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, a1);
}

uint64_t Just.mapError<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 16);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  return Result.Publisher.init(_:)((uint64_t)v6, v4, a3);
}

uint64_t Just.output(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for Optional();
  result = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v13 - v9;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v11 = *(_QWORD *)(v6 - 8);
    if (a1)
    {
      v12 = 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v3, v6);
      v12 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v10, v12, 1, v6);
    return Optional.Publisher.init(_:)((uint64_t)v10, a3);
  }
  return result;
}

uint64_t Just.output<A>(in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v12 - v7;
  v12 = xmmword_18B5F5AF0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v9 = *(_QWORD *)(v5 - 8);
  if (v13)
  {
    v10 = 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v8, v3, v5);
    v10 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v8, v10, 1, v5);
  return Optional.Publisher.init(_:)((uint64_t)v8, a2);
}

uint64_t Just.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for Optional();
  result = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v13 - v9;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v11 = *(_QWORD *)(v6 - 8);
    if (a1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v3, v6);
      v12 = 0;
    }
    else
    {
      v12 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v10, v12, 1, v6);
    return Optional.Publisher.init(_:)((uint64_t)v10, a3);
  }
  return result;
}

uint64_t Just.first(where:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = v3;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v15 - v9;
  v11 = a1(v3);
  v12 = *(_QWORD *)(v7 - 8);
  if ((v11 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, v4, v7);
    v13 = 0;
  }
  else
  {
    v13 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v13, 1, v7);
  return Optional.Publisher.init(_:)((uint64_t)v10, a3);
}

uint64_t Just.tryReduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Just.tryReduce<A>(_:_:)(a1, a2, a3, a4, a5, (void (*)(_BYTE *))partial apply for closure #1 in Just.tryReduce<A>(_:_:), a6);
}

uint64_t Just.removeDuplicates(by:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t Just.tryRemoveDuplicates(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v11;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v3, v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return Result.Publisher.init(_:)((uint64_t)v8, v5, a3);
}

uint64_t Just.replaceEmpty(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t Just.retry(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t Just.reduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v11;

  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6, v3);
  return Result.Publisher.init(_:)((uint64_t)v8, a2, a3);
}

uint64_t Just.tryScan<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Just.tryReduce<A>(_:_:)(a1, a2, a3, a4, a5, (void (*)(_BYTE *))partial apply for closure #1 in Just.tryReduce<A>(_:_:), a6);
}

uint64_t Just.tryReduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(_BYTE *)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  void (*v19)(_BYTE *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v19 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v14 = type metadata accessor for Result();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v18 - v15;
  v20 = *(_QWORD *)(a4 + 16);
  v21 = a5;
  v22 = a2;
  v23 = a3;
  v24 = a1;
  v25 = v7;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC(v19, (uint64_t)&v18 - v15);
  return Result.Publisher.init(_:)((uint64_t)v16, a7);
}

uint64_t partial apply for closure #1 in Just.tryMap<A>(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v1 + 32))(*(_QWORD *)(v1 + 48));
  if (v2)
    *a1 = v2;
  return result;
}

uint64_t partial apply for closure #1 in Just.tryReduce<A>(_:_:)(_QWORD *a1)
{
  return partial apply for closure #1 in Just.tryReduce<A>(_:_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 32))(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
  if (v2)
    *a1 = v2;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Just(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t assignWithCopy for Just(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t initializeWithTake for Just(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t assignWithTake for Just(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t PublishedSubject.Conduit.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return PublishedSubject.Conduit.init(_:_:)(a1, a2);
}

uint64_t PublishedSubject.Conduit.init(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v18 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 168);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v18 - v8;
  v2[2] = 0;
  v10 = (char *)v2 + *(_QWORD *)(v4 + 192);
  v11 = *(_QWORD *)(v5 - 8);
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v10, 1, 1, v5);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 200)) = 0;
  v13 = *(_QWORD *)(*v2 + 208);
  swift_retain();
  v14 = (_DWORD *)swift_slowAlloc();
  *v14 = 0;
  *(_QWORD *)((char *)v2 + v13) = v14;
  v15 = *(_QWORD *)(*v2 + 216);
  v16 = (_QWORD *)swift_slowAlloc();
  *v16 = 0;
  *(_QWORD *)((char *)v2 + v15) = v16;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 224)) = 0;
  v2[2] = a1;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v9, v18, v5);
  v12(v9, 0, 1, v5);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v10, v9, v6);
  swift_endAccess();
  swift_release();
  return ConduitBase.init()();
}

uint64_t PublishedSubject.Conduit.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 192);
  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

void PublishedSubject.Conduit.finish(completion:)(int a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  os_unfair_lock_t v21;
  char v22[24];

  v2 = v1;
  v20 = a1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 168);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v18 - v11;
  v13 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(os_unfair_lock_t *)((char *)v2 + *(_QWORD *)(v3 + 208));
  os_unfair_lock_lock(v21);
  v16 = (char *)v2 + *(_QWORD *)(*v2 + 192);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v16, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    os_unfair_lock_unlock(v21);
  }
  else
  {
    v19 = v3;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v4);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v4);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v16, v9, v5);
    swift_endAccess();
    v17 = v2[2];
    v2[2] = 0;
    os_unfair_lock_unlock(v21);
    if (v17)
    {
      swift_retain();
      PublishedSubject.disassociate(_:)((uint64_t)v2);
      swift_release();
    }
    os_unfair_recursive_lock_lock_with_options();
    v22[0] = v20 & 1;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 + 176) + 56))(v22, v4);
    os_unfair_recursive_lock_unlock();
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v4);
  }
}

void vtable thunk for ConduitBase.finish(completion:) dispatching to PublishedSubject.Conduit.finish(completion:)(unsigned __int8 *a1)
{
  PublishedSubject.Conduit.finish(completion:)(*a1);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance PublishedSubject<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PublishedSubject.receive<A>(subscriber:)(a1, a2, a3);
}

void PublishedSubject.Conduit.customMirror.getter(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD *v20;

  v19[1] = a1;
  v2 = *v1;
  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(_QWORD *)(v2 + 208)));
  v20 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18B5F5C60;
  *(_QWORD *)(v9 + 32) = 0x746E65726170;
  *(_QWORD *)(v9 + 40) = 0xE600000000000000;
  v10 = v1[2];
  type metadata accessor for PublishedSubject(255, *(_QWORD *)(v2 + 160), v11, v12);
  v13 = type metadata accessor for Optional();
  *(_QWORD *)(v9 + 48) = v10;
  *(_QWORD *)(v9 + 72) = v13;
  *(_QWORD *)(v9 + 80) = 0x657274736E776F64;
  *(_QWORD *)(v9 + 88) = 0xEA00000000006D61;
  v14 = (char *)v1 + *(_QWORD *)(*v1 + 192);
  swift_beginAccess();
  v15 = type metadata accessor for Optional();
  *(_QWORD *)(v9 + 120) = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(boxed_opaque_existential_1, v14, v15);
  *(_QWORD *)(v9 + 128) = 0x646E616D6564;
  *(_QWORD *)(v9 + 136) = 0xE600000000000000;
  *(_QWORD *)(v9 + 144) = *(_QWORD *)((char *)v1 + *(_QWORD *)(*v1 + 200));
  *(_QWORD *)(v9 + 168) = &type metadata for Subscribers.Demand;
  *(_QWORD *)(v9 + 176) = 0x7463656A627573;
  v17 = v1[2];
  *(_QWORD *)(v9 + 216) = v13;
  *(_QWORD *)(v9 + 184) = 0xE700000000000000;
  *(_QWORD *)(v9 + 192) = v17;
  v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v8, 1, 1, v18);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  swift_retain();
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(_QWORD *)(*v1 + 208)));
}

void PublishedSubject.Conduit.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000018B5F5C70;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PublishedSubject<A>.Conduit<A1>()
{
  return 0xD000000000000010;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance PublishedSubject<A>.Conduit<A1>(uint64_t a1@<X8>)
{
  PublishedSubject.Conduit.customMirror.getter(a1);
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance PublishedSubject<A>.Conduit<A1>(_QWORD *a1@<X8>)
{
  PublishedSubject.Conduit.playgroundDescription.getter(a1);
}

uint64_t instantiation function for generic protocol witness table for PublishedSubject<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D77ACE4](&protocol conformance descriptor for PublishedSubject<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t PassthroughSubject.Conduit.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return PassthroughSubject.Conduit.init(_:_:)(a1, a2);
}

void PassthroughSubject.send(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 88);
  v8 = *(_QWORD *)(*v4 + 96);
  v9 = type metadata accessor for Subscribers.Completion(255, v7, v8, a4);
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v22 - v12;
  v14 = (os_unfair_lock_s *)v4[2];
  os_unfair_lock_lock(v14);
  if (*((_BYTE *)v4 + 24) == 1)
  {
    *((_BYTE *)v4 + 24) = 0;
    v15 = a1;
    v23 = a1;
    v16 = *(_QWORD *)(v9 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v15, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v9);
    v17 = (uint64_t)v4 + *(_QWORD *)(*v4 + 120);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v17, v13, v10);
    swift_endAccess();
    v18 = (uint64_t)v4 + *(_QWORD *)(*v4 + 128);
    swift_beginAccess();
    v19 = *(_QWORD *)v18;
    v20 = *(_BYTE *)(v18 + 8);
    outlined copy of ConduitList<A, Never><A>(*(_QWORD *)v18, v20);
    type metadata accessor for ConduitList(0, *(_QWORD *)(v6 + 80), v7, v8);
    ConduitList.removeAll()();
    os_unfair_lock_unlock(v14);
    MEMORY[0x1E0C80A78](v21);
    *(&v22 - 2) = v23;
    ConduitList.forEach(_:)((uint64_t)partial apply for closure #1 in PassthroughSubject.send(completion:), (uint64_t)(&v22 - 4), v19, v20);
    outlined consume of ConduitList<A, Never><A>(v19, v20);
  }
  else
  {
    os_unfair_lock_unlock(v14);
  }
}

uint64_t PassthroughSubject.Conduit.init(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v18 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 176);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v18 - v8;
  v2[2] = 0;
  v10 = (char *)v2 + *(_QWORD *)(v4 + 200);
  v11 = *(_QWORD *)(v5 - 8);
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v10, 1, 1, v5);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 208)) = 0;
  v13 = *(_QWORD *)(*v2 + 216);
  swift_retain();
  v14 = (_DWORD *)swift_slowAlloc();
  *v14 = 0;
  *(_QWORD *)((char *)v2 + v13) = v14;
  v15 = *(_QWORD *)(*v2 + 224);
  v16 = (_QWORD *)swift_slowAlloc();
  *v16 = 0;
  *(_QWORD *)((char *)v2 + v15) = v16;
  v2[2] = a1;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v9, v18, v5);
  v12(v9, 0, 1, v5);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v10, v9, v6);
  swift_endAccess();
  swift_release();
  return ConduitBase.init()();
}

uint64_t PassthroughSubject.Conduit.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 200);
  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

void PassthroughSubject.Conduit.finish(completion:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  os_unfair_lock_s *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v2 = v1;
  v23 = a1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 176);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v22 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v20 - v10;
  v12 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(os_unfair_lock_s **)((char *)v2 + *(_QWORD *)(v3 + 216));
  os_unfair_lock_lock(v15);
  v16 = (char *)v2 + *(_QWORD *)(*v2 + 200);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v16, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    os_unfair_lock_unlock(v15);
  }
  else
  {
    v21 = v3;
    v17 = v14;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, v4);
    v18 = v22;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v22, 1, 1, v4);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v16, v18, v5);
    swift_endAccess();
    v19 = v2[2];
    v2[2] = 0;
    os_unfair_lock_unlock(v15);
    if (v19)
    {
      swift_retain();
      PassthroughSubject.disassociate(_:)((uint64_t)v2);
      swift_release();
    }
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 + 184) + 56))(v23, v4);
    os_unfair_recursive_lock_unlock();
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v4);
  }
}

void PassthroughSubject.Conduit.customMirror.getter(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD *v21;

  v20[1] = a1;
  v2 = (_QWORD *)*v1;
  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v2[27]));
  v21 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18B5F5C60;
  *(_QWORD *)(v9 + 32) = 0x746E65726170;
  *(_QWORD *)(v9 + 40) = 0xE600000000000000;
  v10 = v1[2];
  v11 = v2[20];
  v12 = v2[21];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for PassthroughSubject(255, v11, v12, AssociatedConformanceWitness);
  v14 = type metadata accessor for Optional();
  *(_QWORD *)(v9 + 48) = v10;
  *(_QWORD *)(v9 + 72) = v14;
  *(_QWORD *)(v9 + 80) = 0x657274736E776F64;
  *(_QWORD *)(v9 + 88) = 0xEA00000000006D61;
  v15 = (char *)v1 + *(_QWORD *)(*v1 + 200);
  swift_beginAccess();
  v16 = type metadata accessor for Optional();
  *(_QWORD *)(v9 + 120) = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(boxed_opaque_existential_1, v15, v16);
  *(_QWORD *)(v9 + 128) = 0x646E616D6564;
  *(_QWORD *)(v9 + 136) = 0xE600000000000000;
  *(_QWORD *)(v9 + 144) = *(_QWORD *)((char *)v1 + *(_QWORD *)(*v1 + 208));
  *(_QWORD *)(v9 + 168) = &type metadata for Subscribers.Demand;
  *(_QWORD *)(v9 + 176) = 0x7463656A627573;
  v18 = v1[2];
  *(_QWORD *)(v9 + 216) = v14;
  *(_QWORD *)(v9 + 184) = 0xE700000000000000;
  *(_QWORD *)(v9 + 192) = v18;
  v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v8, 1, 1, v19);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  swift_retain();
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(_QWORD *)(*v1 + 216)));
}

void PassthroughSubject.Conduit.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0xD000000000000012;
  a1[1] = 0x800000018B5F5E40;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PassthroughSubject<A, B>.Conduit<A1>()
{
  return 0xD000000000000012;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance PassthroughSubject<A, B>.Conduit<A1>(uint64_t a1@<X8>)
{
  PassthroughSubject.Conduit.customMirror.getter(a1);
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance PassthroughSubject<A, B>.Conduit<A1>(_QWORD *a1@<X8>)
{
  PassthroughSubject.Conduit.playgroundDescription.getter(a1);
}

uint64_t partial apply for closure #1 in PassthroughSubject.send(completion:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1 + 112))(*(_QWORD *)(v1 + 16));
}

uint64_t method lookup function for PassthroughSubject()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PassthroughSubject.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t Result.tryMap<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v24;
  void (*v25)(char *);
  uint64_t v26;

  v25 = a1;
  v26 = a3;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v7);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v18 + 16))(v17, v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v20(v9, v17, v5);
    v21 = swift_allocError();
    v20(v22, v9, v5);
    *a4 = v21;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v17, v11);
    v25(v15);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for Result();
  return swift_storeEnumTagMultiPayload();
}

uint64_t Publisher<>.contains(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v20 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v5, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, AssociatedTypeWitness);
  return Publishers.Contains.init(upstream:output:)((uint64_t)v17, (uint64_t)v15, a2, a3, a4, a5);
}

uint64_t Publishers.Contains.init(upstream:output:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t AssociatedTypeWitness;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a6, a1);
  v11 = a6 + *(int *)(type metadata accessor for Publishers.Contains(0, a3, a4, a5) + 44);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v11, a2, AssociatedTypeWitness);
}

uint64_t type metadata accessor for Publishers.Contains(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Contains);
}

uint64_t Publishers.Contains.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Contains.output.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a1 + 44);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v4, AssociatedTypeWitness);
}

void Publishers.Contains.receive<A>(subscriber:)()
{
  type metadata accessor for Publishers.Contains.Inner();
}

uint64_t sub_18B595ED0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;

  v7 = v1 + *(int *)(v2 + 44);
  swift_allocObject();
  v10 = specialized Publishers.Contains.Inner.init(downstream:output:)(v3, v7);
  v8 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for ReduceProducer<A, B, C, D, E>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v10, v4, a1, v5, v8);
  return swift_release();
}

void type metadata accessor for Publishers.Contains.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.Contains.Inner.description.getter()
{
  return 0x736E6961746E6F43;
}

uint64_t Publishers.Contains.Inner.receive(newValue:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;

  v1 = v0;
  v2 = *v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)&v11 - v5;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)&v11 - v5, (char *)v0 + *(_QWORD *)(v2 + 480), AssociatedTypeWitness);
  v7 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  if ((v7 & 1) != 0)
  {
    swift_beginAccess();
    *((_BYTE *)v1 + 16) = 1;
  }
  v8 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion(0, MEMORY[0x1E0DEE9C0] + 8, v8, AssociatedConformanceWitness);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Publishers.Contains.Inner.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 480);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
}

uint64_t *Publishers.Contains.Inner.deinit()
{
  uint64_t *v0;
  char *v1;
  uint64_t AssociatedTypeWitness;

  v0 = ReduceProducer.deinit();
  v1 = (char *)v0 + *(_QWORD *)(*v0 + 480);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t Publishers.Contains.Inner.__deallocating_deinit()
{
  Publishers.Contains.Inner.deinit();
  return swift_deallocClassInstance();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Contains<A>()
{
  Publishers.Contains.receive<A>(subscriber:)();
}

uint64_t static Publishers.Contains<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  _QWORD v20[2];

  v20[1] = a6;
  v8 = type metadata accessor for Publishers.Contains(0, a3, a4, a6);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v20 - v13;
  v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v16(v14, a1, v8);
  v16(v12, a2, v8);
  if ((v15 & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    v17 = 0;
  }
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v12, v8);
  v18(v14, v8);
  return v17 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Contains<A>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.Contains<>.== infix(_:_:)(a1, a2, a3[2], a3[3], *(_QWORD *)(a4 - 8), a3[4]);
}

uint64_t *specialized Publishers.Contains.Inner.init(downstream:output:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 448);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v2 + *(_QWORD *)(v9 + 480);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v10, a2, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v15 = 0;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v8, (uint64_t)&v15, v12);
}

uint64_t type metadata completion function for Publishers.Contains()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Contains(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = AssociatedTypeWitness;
    v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t destroy for Publishers.Contains(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t initializeWithCopy for Publishers.Contains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for Publishers.Contains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for Publishers.Contains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for Publishers.Contains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Contains(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (a2 <= v11)
    goto LABEL_23;
  v14 = (v13 & ~v12) + *(_QWORD *)(v9 + 64);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, AssociatedTypeWitness);
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_23;
LABEL_14:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v11 + v18 + 1;
}

void storeEnumTagSinglePayload for Publishers.Contains(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v12 = 0u;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata completion function for Publishers.Contains.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void Publisher.combineLatest<A, B>(_:_:)(uint64_t a1)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v1);
  type metadata accessor for Publishers.CombineLatest();
}

void sub_18B596DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  *(_QWORD *)(v17 - 152) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v19 = (char *)&a9 - v18;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v14, *(_QWORD *)(v17 - 160), v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 16))(v11, *(_QWORD *)(v17 - 168), v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v19, v14, v16);
  *(_QWORD *)(v17 - 112) = v16;
  *(_QWORD *)(v17 - 104) = v15;
  *(_QWORD *)(v17 - 96) = v13;
  *(_QWORD *)(v17 - 88) = v12;
  type metadata accessor for Publishers.CombineLatest();
}

uint64_t sub_18B596E40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v8 + *(int *)(a1 + 52), v2, v5);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v6;
  v10[3] = v5;
  v11 = *(_QWORD *)(v9 - 144);
  v12 = *(_QWORD *)(v9 - 136);
  v10[4] = v12;
  v10[5] = v4;
  v10[6] = v3;
  v10[7] = v11;
  v10[8] = *(_QWORD *)(v9 - 128);
  v13 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.CombineLatest<A, B>, v7);
  Publisher.map<A>(_:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output) -> (@out B1), (uint64_t)v10, v7, v12, v13, *(_QWORD *)(v9 - 120));
  swift_retain();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 152) + 8))(v8, v7);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output) -> (@out B1)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t TupleTypeMetadata2;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_18B596FC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output) -> (@out B1)(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output) -> (@out B1)(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 56));
}

void Publisher.combineLatest<A, B, C>(_:_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = MEMORY[0x1E0C80A78](a1);
  v2 = MEMORY[0x1E0C80A78](v1);
  MEMORY[0x1E0C80A78](v2);
  type metadata accessor for Publishers.CombineLatest3();
}

void sub_18B5970E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  *(_QWORD *)(v17 - 176) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v19 = (char *)&a9 - v18;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 16))(v11, *(_QWORD *)(v17 - 192), v14);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 16))(v10, *(_QWORD *)(v17 - 200), v13);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 208) + 16))(v9, *(_QWORD *)(v17 - 184), v12);
  Publishers.CombineLatest3.init(_:_:_:)(v11, v14, (uint64_t)v19);
}

uint64_t sub_18B59718C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v4;
  v9[3] = v3;
  v10 = *(_QWORD *)(v8 - 168);
  v11 = *(_QWORD *)(v8 - 160);
  v9[4] = v2;
  v9[5] = v11;
  v9[6] = v6;
  v9[7] = v1;
  v9[8] = v5;
  v9[9] = v10;
  v9[10] = *(_QWORD *)(v8 - 152);
  v12 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>, v7);
  Publisher.map<A>(_:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output) -> (@out C1), (uint64_t)v9, v7, v11, v12, *(_QWORD *)(v8 - 144));
  swift_retain();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 176) + 8))(v0, v7);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output) -> (@out C1)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t TupleTypeMetadata3;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata3 + 48), a1 + *(int *)(TupleTypeMetadata3 + 64));
}

uint64_t sub_18B597330()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output) -> (@out C1)(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output) -> (@out C1)(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 72));
}

void Publisher.combineLatest<A, B, C>(_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v41 = a9;
  v42 = a8;
  v37 = a2;
  v38 = a3;
  v40 = a10;
  v39 = a11;
  v15 = *(_QWORD *)(a7 - 8);
  v35 = a1;
  v36 = v15;
  v16 = MEMORY[0x1E0C80A78](a1);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v16);
  v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x1E0C80A78](v21);
  v28 = (char *)&v34 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v34 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v30, v33, v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v35, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v37, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v18, v38, a7);
  Publishers.CombineLatest4.init(_:_:_:_:)((uint64_t)v30, a4, v41);
}

void Publisher.combineLatest<A, B, C, D>(_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[30];

  v25[11] = a1;
  v25[18] = a4;
  v25[19] = a5;
  v25[16] = a3;
  v25[14] = a2;
  v25[20] = a6;
  v25[4] = a12;
  v25[5] = a11;
  v25[6] = a10;
  v25[7] = a9;
  v25[17] = a8;
  v25[13] = *(_QWORD *)(a7 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v25[9] = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v25[8] = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v25[0] = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v25[21] = v18;
  v25[22] = v19;
  v25[2] = v18;
  v25[1] = v19;
  v25[23] = v20;
  v25[24] = a7;
  v25[25] = v22;
  v25[26] = v21;
  v25[27] = v23;
  v25[28] = v24;
  type metadata accessor for Publishers.CombineLatest4();
}

void sub_18B5976AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  *(_QWORD *)(v18 - 240) = a1;
  *(_QWORD *)(v18 - 200) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v20 = (char *)&a9 - v19;
  *(_QWORD *)(v18 - 296) = (char *)&a9 - v19;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 16))(v9, *(_QWORD *)(v18 - 224), v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 16))(v17, *(_QWORD *)(v18 - 232), v16);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v14 + 16))(*(_QWORD *)(v18 - 256), *(_QWORD *)(v18 - 208), v13);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v18 - 216) + 16))(*(_QWORD *)(v18 - 248), *(_QWORD *)(v18 - 192), v15);
  Publishers.CombineLatest4.init(_:_:_:_:)(v9, *(_QWORD *)(v18 - 304), (uint64_t)v20);
}

uint64_t sub_18B5977B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v0;
  v9[3] = v2;
  v9[4] = v7;
  v9[5] = v5;
  v11 = *(_QWORD *)(v8 - 184);
  v10 = *(_QWORD *)(v8 - 176);
  v9[6] = v11;
  v9[7] = v6;
  v9[8] = v4;
  v9[9] = v3;
  v9[10] = v1;
  v9[11] = v10;
  v9[12] = *(_QWORD *)(v8 - 168);
  v12 = *(_QWORD *)(v8 - 240);
  v13 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.CombineLatest4<A, B, C, D>, v12);
  v14 = *(_QWORD *)(v8 - 296);
  Publisher.map<A>(_:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output, @in_guaranteed C1.Publisher.Output) -> (@out D1), (uint64_t)v9, v12, v11, v13, *(_QWORD *)(v8 - 160));
  swift_retain();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 200) + 8))(v14, v12);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output, @in_guaranteed C1.Publisher.Output) -> (@out D1)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  int *TupleTypeMetadata;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  return a2(a1, a1 + TupleTypeMetadata[12], a1 + TupleTypeMetadata[16], a1 + TupleTypeMetadata[20]);
}

uint64_t sub_18B59798C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output, @in_guaranteed C1.Publisher.Output) -> (@out D1)(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output, @in_guaranteed C1.Publisher.Output) -> (@out D1)(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 88));
}

uint64_t Publishers.CombineLatest.a.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.CombineLatest.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t Publishers.CombineLatest3.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t Publishers.CombineLatest3.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 72));
}

uint64_t Publishers.CombineLatest4.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 84));
}

uint64_t Publishers.CombineLatest4.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 88));
}

uint64_t Publishers.CombineLatest4.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 40) - 8) + 16))(a2, v2 + *(int *)(a1 + 92));
}

void static Publishers.CombineLatest<>.== infix(_:_:)()
{
  type metadata accessor for Publishers.CombineLatest();
}

uint64_t sub_18B597AF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  void (*v11)(_BYTE *, uint64_t, uint64_t);
  char v12;
  void (*v13)(_BYTE *, uint64_t);
  _BYTE v15[96];

  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v9 = &v15[-v8];
  v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  v11 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16);
  v11(v9, v2, a1);
  v11(v7, v1, a1);
  if ((v10 & 1) != 0)
    v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  else
    v12 = 0;
  v13 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v13(v7, a1);
  v13(v9, a1);
  return v12 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.CombineLatest<A, B>()
{
  static Publishers.CombineLatest<>.== infix(_:_:)();
}

void static Publishers.CombineLatest3<>.== infix(_:_:)()
{
  type metadata accessor for Publishers.CombineLatest3();
}

uint64_t sub_18B597C50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  char v16;
  void (*v17)(_BYTE *, uint64_t, uint64_t);
  char v18;
  void (*v19)(_BYTE *, uint64_t);
  char v20;
  _BYTE v22[96];

  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = &v22[-v9];
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = &v22[-v12];
  MEMORY[0x1E0C80A78](v11);
  v15 = &v22[-v14];
  v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  v17 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16);
  v17(v15, v2, a1);
  v17(v13, v1, a1);
  if ((v16 & 1) != 0)
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  else
    v18 = 0;
  v19 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v19(v13, a1);
  v19(v15, a1);
  v17(v10, v2, a1);
  v17(v7, v1, a1);
  if ((v18 & 1) != 0)
    v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  else
    v20 = 0;
  v19(v7, a1);
  v19(v10, a1);
  return v20 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.CombineLatest3<A, B, C>()
{
  static Publishers.CombineLatest3<>.== infix(_:_:)();
}

uint64_t sub_18B597E10(char a1)
{
  return a1 & 1;
}

void static Publishers.CombineLatest4<>.== infix(_:_:)()
{
  type metadata accessor for Publishers.CombineLatest4();
}

uint64_t sub_18B597E80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  char v21;
  void (*v22)(_BYTE *, uint64_t, uint64_t);
  uint64_t v23;
  char v24;
  void (*v25)(_BYTE *, uint64_t);
  uint64_t v26;
  char v27;
  _BYTE *v28;
  _BYTE *v29;
  char v30;
  _BYTE v32[96];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v3 - 160) = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x1E0C80A78](v6);
  *(_QWORD *)(v3 - 168) = &v32[-v9];
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = &v32[-v11];
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = &v32[-v14];
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = &v32[-v17];
  MEMORY[0x1E0C80A78](v16);
  v20 = &v32[-v19];
  v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  v22 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v3 - 152) = v2;
  v22(v20, v2, a1);
  v23 = v1;
  v22(v18, v1, a1);
  if ((v21 & 1) != 0)
    v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  else
    v24 = 0;
  v25 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v25(v18, a1);
  v25(v20, a1);
  v26 = *(_QWORD *)(v3 - 152);
  v22(v15, v26, a1);
  v22(v12, v23, a1);
  if ((v24 & 1) == 0)
  {
    v25(v12, a1);
    v25(v15, a1);
    v28 = *(_BYTE **)(v3 - 168);
    v22(v28, v26, a1);
    v29 = *(_BYTE **)(v3 - 160);
    v22(v29, v23, a1);
    goto LABEL_8;
  }
  v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  v25(v12, a1);
  v25(v15, a1);
  v28 = *(_BYTE **)(v3 - 168);
  v22(v28, v26, a1);
  v29 = *(_BYTE **)(v3 - 160);
  v22(v29, v23, a1);
  if ((v27 & 1) == 0)
  {
LABEL_8:
    v30 = 0;
    goto LABEL_9;
  }
  v30 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_9:
  v25(v29, a1);
  v25(v28, a1);
  return v30 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.CombineLatest4<A, B, C, D>()
{
  static Publishers.CombineLatest4<>.== infix(_:_:)();
}

uint64_t sub_18B598138(char a1)
{
  return a1 & 1;
}

void AbstractCombineLatest.Side.combineIdentifier.getter()
{
  type metadata accessor for AbstractCombineLatest();
}

void sub_18B598174()
{
  _QWORD *v0;

  CustomCombineIdentifierConvertible<>.combineIdentifier.getter(v0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbstractCombineLatest<A, B, C>.Side<A1>()
{
  return 0x4C656E69626D6F43;
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance AbstractCombineLatest<A, B, C>.Side<A1>()
{
  AbstractCombineLatest.Side.combineIdentifier.getter();
}

void AbstractCombineLatest.customMirror.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v1 = *v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(_QWORD *)(v1 + 184)));
  v21 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18B5F5C60;
  *(_QWORD *)(v6 + 32) = 0x657274736E776F64;
  *(_QWORD *)(v6 + 40) = 0xEA00000000006D61;
  v7 = (uint64_t)v0 + *(_QWORD *)(*v0 + 112);
  v8 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v6 + 72) = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v6 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(boxed_opaque_existential_1, v7, v8);
  *(_QWORD *)(v6 + 80) = 0xD000000000000015;
  *(_QWORD *)(v6 + 88) = 0x800000018B5FE5F0;
  v10 = (uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 128));
  swift_beginAccess();
  v11 = *v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Subscription?]);
  *(_QWORD *)(v6 + 96) = v11;
  *(_QWORD *)(v6 + 120) = v12;
  *(_QWORD *)(v6 + 128) = 0x646E616D6564;
  *(_QWORD *)(v6 + 136) = 0xE600000000000000;
  v13 = *v0;
  *(_QWORD *)(v6 + 144) = *(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 136));
  *(_QWORD *)(v6 + 168) = &type metadata for Subscribers.Demand;
  *(_QWORD *)(v6 + 176) = 0x73726566667562;
  *(_QWORD *)(v6 + 184) = 0xE700000000000000;
  v14 = (uint64_t *)((char *)v0 + *(_QWORD *)(v13 + 120));
  swift_beginAccess();
  v15 = *v14;
  *(_QWORD *)(v6 + 216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
  *(_QWORD *)(v6 + 192) = v15;
  v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v5, 1, 1, v16);
  v17 = *(_QWORD *)(v1 + 104);
  v18 = *(_OWORD *)(v1 + 80);
  v19 = v8;
  v20 = v17;
  type metadata accessor for AbstractCombineLatest();
}

void sub_18B5983F8()
{
  uint64_t v0;
  uint64_t v1;

  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v1);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 184)));
}

void AbstractCombineLatest.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEA968];
  strcpy((char *)a1, "CombineLatest");
  *(_WORD *)(a1 + 14) = -4864;
}

void AbstractCombineLatest.convert(values:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for CustomReflectable.customMirror.getter in conformance AbstractCombineLatest<A, B, C>()
{
  AbstractCombineLatest.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance AbstractCombineLatest<A, B, C>(uint64_t a1@<X8>)
{
  AbstractCombineLatest.playgroundDescription.getter(a1);
}

uint64_t getEnumTagSinglePayload for Publishers.CombineLatest(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18B598618 + 4 * byte_18B5F6030[v17 - 1]))();
}

void storeEnumTagSinglePayload for Publishers.CombineLatest(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.CombineLatest3(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;

  v4 = a1;
  v5 = a3[3];
  v6 = *(_QWORD *)(a3[2] - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(a3[4] - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v7 + 64) + v11;
  v13 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v6 + 80) | v11);
  if (v13 <= 7
    && ((v12 + (v9 & ~v8)) & ~(unint64_t)v11) + *(_QWORD *)(v10 + 64) <= 0x18
    && ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80) | v11) & 0x100000) == 0)
  {
    v17 = ~v8;
    v18 = ~(unint64_t)v11;
    v21 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v19 = ((unint64_t)a2 + v9) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v17, v19, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((((unint64_t)v4 + v9) & v17) + v12) & v18, (v19 + v12) & v18, v21);
  }
  else
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  return v4;
}

uint64_t assignWithCopy for Publishers.CombineLatest3(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.CombineLatest3(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.CombineLatest3(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 40))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.CombineLatest3(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = a3[4];
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) > v8)
    v8 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v16 = ((v13 + v14 + (v12 & ~v11)) & ~v14) + *(_QWORD *)(v10 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 < 2)
    {
LABEL_25:
      if (v8)
      {
        if (v5 == v8)
          return (*(uint64_t (**)(void))(v4 + 48))();
        v22 = (v12 + a1) & ~v11;
        if (v7 == v8)
          return (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v22 + v13 + v14) & ~v14, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_25;
LABEL_16:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v21 = ((v13 + v14 + (v12 & ~(_DWORD)v11)) & ~(_DWORD)v14) + *(_DWORD *)(v10 + 64);
    else
      v21 = 4;
    __asm { BR              X11 }
  }
  return v8 + v20 + 1;
}

void storeEnumTagSinglePayload for Publishers.CombineLatest3(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) > v7)
    v7 = *(_DWORD *)(v8 + 84);
  v9 = ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v8 + 80)
       + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
     + *(_QWORD *)(v8 + 64);
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X21 }
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.CombineLatest4(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v4 + 64) + v6;
  v8 = *(_QWORD *)(a3[4] - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(v5 + 64) + v9;
  v11 = *(_QWORD *)(a3[5] - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_QWORD *)(v8 + 64) + v12;
  v14 = *(_DWORD *)(v4 + 80);
  v15 = (*(_BYTE *)(v5 + 80) | v14 | *(_BYTE *)(v8 + 80) | v12);
  if (v15 <= 7
    && ((v13 + ((v10 + (v7 & ~v6)) & ~v9)) & ~(unint64_t)v12) + *(_QWORD *)(v11 + 64) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | v14 | *(_DWORD *)(v8 + 80) | v12) & 0x100000) == 0)
  {
    v20 = ~v6;
    v21 = ~v9;
    v30 = a3[4];
    v31 = ~(unint64_t)v12;
    v32 = a3[5];
    v29 = a3[3];
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    v33 = a1;
    v23 = ((unint64_t)a1 + v7) & v20;
    v24 = ((unint64_t)a2 + v7) & v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(v23, v24, v29);
    v25 = v23 + v10;
    v19 = v33;
    v26 = v25 & v21;
    v27 = (v24 + v10) & v21;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(v25 & v21, v27, v30);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((v26 + v13) & v31, (v27 + v13) & v31, v32);
  }
  else
  {
    v18 = *a2;
    *a1 = *a2;
    v19 = (uint64_t *)(v18 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  return v19;
}

uint64_t assignWithCopy for Publishers.CombineLatest4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  v18 = *(_QWORD *)(a3[5] - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 24))((*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), (*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.CombineLatest4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v16, v17);
  v18 = *(_QWORD *)(a3[5] - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 32))((*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), (*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.CombineLatest4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v16, v17);
  v18 = *(_QWORD *)(a3[5] - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 40))((*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), (*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.CombineLatest4(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  v6 = a3[2];
  v5 = a3[3];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8)
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = *(_DWORD *)(v9 + 84);
  v12 = a3[4];
  v13 = a3[5];
  v14 = *(_QWORD *)(v12 - 8);
  v15 = *(unsigned int *)(v14 + 84);
  if (v15 > v11)
    v11 = *(_DWORD *)(v14 + 84);
  v16 = *(_QWORD *)(v13 - 8);
  v17 = *(unsigned int *)(v16 + 84);
  if (v17 > v11)
    v11 = *(_DWORD *)(v16 + 84);
  if (!a2)
    return 0;
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = *(_QWORD *)(v7 + 64) + v18;
  v20 = *(_QWORD *)(v9 + 64);
  v21 = *(unsigned __int8 *)(v14 + 80);
  v22 = *(_QWORD *)(v14 + 64);
  v23 = *(unsigned __int8 *)(v16 + 80);
  v24 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_27;
  v25 = ((v22 + v23 + ((v20 + v21 + (v19 & ~v18)) & ~v21)) & ~v23) + *(_QWORD *)(v16 + 64);
  v26 = 8 * v25;
  if (v25 <= 3)
  {
    v28 = ((v24 + ~(-1 << v26)) >> v26) + 1;
    if (HIWORD(v28))
    {
      v27 = *(_DWORD *)(a1 + v25);
      if (!v27)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v28 > 0xFF)
    {
      v27 = *(unsigned __int16 *)(a1 + v25);
      if (!*(_WORD *)(a1 + v25))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v28 < 2)
    {
LABEL_27:
      if (v11)
      {
        if (v8 == v11)
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1, *(unsigned int *)(v7 + 84), v6);
        v31 = (v19 + a1) & ~v18;
        if (v10 == v11)
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v9 + 48))(v31, *(unsigned int *)(v9 + 84), v5);
        v32 = (v31 + v20 + v21) & ~v21;
        if ((_DWORD)v15 == v11)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v32, v15, v12);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))((v32 + v22 + v23) & ~v23, v17, v13);
      }
      return 0;
    }
  }
  v27 = *(unsigned __int8 *)(a1 + v25);
  if (!*(_BYTE *)(a1 + v25))
    goto LABEL_27;
LABEL_18:
  v29 = (v27 - 1) << v26;
  if (v25 > 3)
    v29 = 0;
  if ((_DWORD)v25)
  {
    if (v25 <= 3)
      v30 = ((v22 + v23 + ((v20 + v21 + (v19 & ~(_DWORD)v18)) & ~(_DWORD)v21)) & ~(_DWORD)v23) + *(_DWORD *)(v16 + 64);
    else
      v30 = 4;
    __asm { BR              X11 }
  }
  return v11 + v29 + 1;
}

void storeEnumTagSinglePayload for Publishers.CombineLatest4(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) <= v7)
    v9 = v7;
  else
    v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(a4[5] - 8);
  if (*(_DWORD *)(v10 + 84) > v9)
    v9 = *(_DWORD *)(v10 + 84);
  v11 = ((*(_QWORD *)(v8 + 64)
        + *(unsigned __int8 *)(v10 + 80)
        + ((*(_QWORD *)(v6 + 64)
          + *(unsigned __int8 *)(v8 + 80)
          + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
      + *(_QWORD *)(v10 + 64);
  if (a3 > v9)
  {
    if (v11 <= 3)
    {
      v14 = ((a3 - v9 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else
      {
        v12 = v14 > 1;
        if (v14 >= 0x100)
          v12 = 2;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v9 < a2)
  {
    v13 = ~v9 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X27 }
}

_QWORD *assignWithCopy for AbstractCombineLatest.Side(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for AbstractCombineLatest.Side(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t outlined init with take of Subscription?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t Publisher.label(_:category:dsoHandle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;

  v25 = a3;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v15;
  v17 = v15[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v6, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a6, v14, a4);
  v20 = (int *)type metadata accessor for Publishers.Label(0, a4, a5, v19);
  v21 = (_QWORD *)(a6 + v20[9]);
  *v21 = a1;
  v21[1] = a2;
  v22 = (_QWORD *)(a6 + v20[10]);
  *v22 = v16;
  v22[1] = v17;
  *(_QWORD *)(a6 + v20[11]) = v25;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

int *Publishers.Label.init(upstream:name:category:dsoHandle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *result;
  _QWORD *v18;
  _QWORD *v19;

  v14 = *a4;
  v15 = a4[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(a8, a1, a6);
  result = (int *)type metadata accessor for Publishers.Label(0, a6, a7, v16);
  v18 = (_QWORD *)(a8 + result[9]);
  *v18 = a2;
  v18[1] = a3;
  v19 = (_QWORD *)(a8 + result[10]);
  *v19 = v14;
  v19[1] = v15;
  *(_QWORD *)(a8 + result[11]) = a5;
  return result;
}

uint64_t type metadata accessor for Publishers.Label(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Label);
}

uint64_t Publisher.label(_:dsoHandle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  int *v19;
  char *v20;
  uint64_t result;
  char *v22;
  uint64_t v23;

  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v16(v15, v6, v17);
  swift_bridgeObjectRetain();
  v16(a6, (uint64_t)v15, a4);
  v19 = (int *)type metadata accessor for Publishers.Label(0, a4, a5, v18);
  v20 = &a6[v19[9]];
  *(_QWORD *)v20 = a1;
  *((_QWORD *)v20 + 1) = a2;
  result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, a4);
  v22 = &a6[v19[10]];
  *(_QWORD *)v22 = 0x6C616D726F6ELL;
  *((_QWORD *)v22 + 1) = 0xE600000000000000;
  *(_QWORD *)&a6[v19[11]] = a3;
  return result;
}

uint64_t Publishers.Label.init(upstream:name:dsoHandle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  int *v16;
  _QWORD *v17;
  uint64_t result;
  _QWORD *v19;

  v14 = *(_QWORD *)(a5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a7, a1, a5);
  v16 = (int *)type metadata accessor for Publishers.Label(0, a5, a6, v15);
  v17 = (_QWORD *)(a7 + v16[9]);
  *v17 = a2;
  v17[1] = a3;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a5);
  v19 = (_QWORD *)(a7 + v16[10]);
  *v19 = 0x6C616D726F6ELL;
  v19[1] = 0xE600000000000000;
  *(_QWORD *)(a7 + v16[11]) = a4;
  return result;
}

uint64_t Publishers.Label.Category.rawValue.getter()
{
  uint64_t v0;

  v0 = specialized Publishers.Label.Category.rawValue.getter();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t Publishers.Label.Category.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Publishers.Label.Category.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void static Publishers.Label.Category.normal.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6C616D726F6ELL;
  a1[1] = 0xE600000000000000;
}

void static Publishers.Label.Category.important.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6174726F706D69;
  a1[1] = 0xE900000000000074;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Publishers.Label<A>.Category@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return Publishers.Label.Category.init(rawValue:)(*a1, a1[1], a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Publishers.Label<A>.Category@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = specialized Publishers.Label.Category.rawValue.getter();
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Publishers.Label.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Label.name.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 36));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Publishers.Label.category.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + *(int *)(a1 + 40));
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t Publishers.Label.dsoHandle.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 44));
}

void Publishers.Label.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.Label.Inner();
}

void sub_18B599E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;

  *(_QWORD *)(v15 - 120) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&a9 - v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v12, v14, v9);
  v18 = (_QWORD *)(v10 + *(int *)(v13 + 40));
  v19 = v18[1];
  *(_QWORD *)(v15 - 112) = *v18;
  *(_QWORD *)(v15 - 104) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Publishers.Label.Inner.init(downstream:name:category:dsoHandle:)(v12, v9, (uint64_t)v17);
}

uint64_t sub_18B599EF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Label<A>.Inner<A1>, v2);
  Publisher.subscribe<A>(_:)(v3, v1, v2, v0, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 120) + 8))(v3, v2);
}

void Publishers.Label.Inner.init(downstream:name:category:dsoHandle:)(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.Label.Inner();
}

void sub_18B599FC8(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;

  v7 = (_QWORD *)(v1 + a1[13]);
  *v7 = v4;
  v7[1] = v3;
  v8 = (_QWORD *)(v1 + a1[14]);
  *v8 = v5;
  v8[1] = v6;
  *(_QWORD *)(v1 + a1[15]) = v2;
  v9 = a1[16];
  if (one-time initialization token for lock != -1)
    swift_once();
  v10 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v11 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v10);
    *(_QWORD *)(v1 + v9) = v11;
  }
}

uint64_t Publishers.Label.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18B5F5C60;
  *(_QWORD *)(v12 + 32) = 0xD00000000000001ALL;
  *(_QWORD *)(v12 + 40) = 0x800000018B5FE730;
  v13 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v12 + 48) = 0x6C6562614CLL;
  *(_QWORD *)(v12 + 56) = 0xE500000000000000;
  *(_QWORD *)(v12 + 72) = v13;
  *(_QWORD *)(v12 + 80) = 1701667182;
  v14 = *(int *)(a1 + 56);
  v15 = (uint64_t *)(v1 + *(int *)(a1 + 52));
  v16 = *v15;
  v17 = v15[1];
  *(_QWORD *)(v12 + 88) = 0xE400000000000000;
  *(_QWORD *)(v12 + 96) = v16;
  *(_QWORD *)(v12 + 104) = v17;
  *(_QWORD *)(v12 + 120) = v13;
  *(_QWORD *)(v12 + 128) = 0x79726F6765746163;
  *(_QWORD *)(v12 + 136) = 0xE800000000000000;
  v19 = *(_QWORD *)(v1 + v14);
  v18 = *(_QWORD *)(v1 + v14 + 8);
  v21 = type metadata accessor for Publishers.Label.Category(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), v20);
  *(_QWORD *)(v12 + 144) = v19;
  *(_QWORD *)(v12 + 152) = v18;
  *(_QWORD *)(v12 + 168) = v21;
  *(_QWORD *)(v12 + 176) = 7304036;
  *(_QWORD *)(v12 + 184) = 0xE300000000000000;
  v22 = *(_QWORD *)(v1 + *(int *)(a1 + 60));
  *(_QWORD *)(v12 + 216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeRawPointer?);
  *(_QWORD *)(v12 + 192) = v22;
  v23 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v9, 1, 1, v23);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Publishers.Label.Inner.playgroundDescription.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)(v2 + *(int *)(a1 + 52));
  v5 = *v3;
  v4 = v3[1];
  a2[3] = MEMORY[0x1E0DEA968];
  *a2 = v5;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t Publishers.Label.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 40) + 48))(a1, *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Label<A>.Inner<A1>(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized Publishers.Label.Inner.description.getter(a1);
  swift_bridgeObjectRetain();
  return v1;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Label<A>(uint64_t a1)
{
  Publishers.Label.receive<A>(subscriber:)(a1);
}

uint64_t specialized Publishers.Label.Category.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void type metadata accessor for Publishers.Label.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t type metadata completion function for Publishers.Label()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Label(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v10[1] = v11[1];
    v12 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v12[1] = v13[1];
    *(_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Publishers.Label(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Publishers.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v9[1] = v10[1];
  *(_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Publishers.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  *(_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Label(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B59A834 + 4 * byte_18B5F6498[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.Label(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B59A9BC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B59AA34);
}

void sub_18B59A9C4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B59A9CCLL);
  JUMPOUT(0x18B59AA34);
}

void sub_18B59AA10()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B59AA34);
}

void sub_18B59AA18()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B59AA34);
}

uint64_t sub_18B59AA20(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x18B59AA2CLL);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x18B59AA34);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

_QWORD *initializeBufferWithCopyOfBuffer for Publishers.Label.Category(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Publishers.Label.Category()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for Publishers.Label.Category(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for Publishers.Label.Category(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for Publishers.Label.Category(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Label.Category);
}

uint64_t type metadata completion function for Publishers.Label.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Label.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v10[1] = v11[1];
    v12 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v12[1] = v13[1];
    v14 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFF8);
    v15 = (_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFF8);
    *v14 = *v15;
    *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Publishers.Label.Inner(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Publishers.Label.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v9[1] = v10[1];
  v11 = (_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Publishers.Label.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = (_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.Label.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = (_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.Label.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRelease();
  v11 = (_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Label.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B59B058 + 4 * byte_18B5F64A7[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.Label.Inner(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B59B1E8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B59B260);
}

void sub_18B59B1F0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B59B1F8);
  JUMPOUT(0x18B59B260);
}

void sub_18B59B23C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B59B260);
}

void sub_18B59B244()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B59B260);
}

uint64_t sub_18B59B24C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x18B59B258);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x18B59B260);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t specialized Publishers.Label.Inner.description.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 52));
}

uint64_t Publishers.Autoconnect.__allocating_init(upstream:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  Publishers.Autoconnect.init(upstream:)(a1);
  return v2;
}

uint64_t Publishers.Autoconnect.upstream.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 96));
}

uint64_t Publishers.Autoconnect.SideEffectSubscription.combineIdentifier.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + 2;
  v3 = v0[5];
  v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 8))(v3);
}

uint64_t method lookup function for Publishers.Autoconnect()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Publishers.Autoconnect.__allocating_init(upstream:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of Publishers.Autoconnect.receive<A>(subscriber:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Autoconnect.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, unint64_t, uint64_t);

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v11 = *a2;
    v10 = (unint64_t)a2 + 15;
    *a1 = v11;
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
    v13 = ((unint64_t)v12 + v6 + 8) & ~v6;
    v14 = ((v10 & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6;
    v15 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v15(v13, v14, v4);
  }
  return v3;
}

_QWORD *assignWithCopy for Publishers.Autoconnect.Inner(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

_QWORD *initializeWithTake for Publishers.Autoconnect.Inner(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *assignWithTake for Publishers.Autoconnect.Inner(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Autoconnect.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18B59B664 + 4 * byte_18B5F6650[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for Publishers.Autoconnect.Inner(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t assignWithCopy for Publishers.Autoconnect.State(uint64_t a1, __int128 *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *((_QWORD *)a2 + 4);
  if (*(_QWORD *)(a1 + 32) < 0xFFFFFFFFuLL)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      (**(void (***)(uint64_t *, uint64_t))(v6 - 8))(v4, (uint64_t)a2 + 8);
      return a1;
    }
LABEL_7:
    v7 = *a2;
    v8 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)a1 = v7;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_assign_boxed_opaque_existential_1(v4, (uint64_t *)a2 + 1);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.Autoconnect.State(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Publishers.Autoconnect.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

uint64_t getEnumTag for Publishers.Autoconnect.State(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double destructiveInjectEnumTag for Publishers.Autoconnect.State(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 40) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 32) = (a2 - 1);
  }
  return result;
}

uint64_t Publishers.Autoconnect.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v19;
  uint64_t v21;

  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18B5F4780;
  *(_QWORD *)(v12 + 32) = 0x746E65726170;
  *(_QWORD *)(v12 + 40) = 0xE600000000000000;
  v13 = *(_QWORD *)(v1 + 8);
  v15 = type metadata accessor for Publishers.Autoconnect(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), v14);
  *(_QWORD *)(v12 + 48) = v13;
  *(_QWORD *)(v12 + 72) = v15;
  *(_QWORD *)(v12 + 80) = 0x657274736E776F64;
  *(_QWORD *)(v12 + 88) = 0xEA00000000006D61;
  v16 = v1 + *(int *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v12 + 120) = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v12 + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(boxed_opaque_existential_1, v16, v17);
  v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v9, 1, 1, v19);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Autoconnect.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x6E6E6F636F747541;
  a1[1] = 0xEB00000000746365;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Autoconnect<A>.Inner<A1>()
{
  return 0x6E6E6F636F747541;
}

uint64_t Publishers.Autoconnect.SideEffectSubscription.description.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t Publishers.Autoconnect.SideEffectSubscription.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Publishers.Autoconnect.SideEffectSubscription.description.getter();
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.Autoconnect<A>.Inner<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_18B59BD80()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocObject();
}

uint64_t sub_18B59BDAC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t destroy for Publishers.Autoconnect.SideEffectSubscription(uint64_t a1)
{
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
}

uint64_t initializeWithCopy for Publishers.Autoconnect.SideEffectSubscription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2 + 16;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 16, v4, v6);
  return a1;
}

_QWORD *assignWithCopy for Publishers.Autoconnect.SideEffectSubscription(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Publishers.Autoconnect.SideEffectSubscription(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Autoconnect.SideEffectSubscription(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Publishers.Autoconnect.SideEffectSubscription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t Publisher.print(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[40];

  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v15, v6, v16);
  outlined init with copy of TextOutputStream?(a3, (uint64_t)v21);
  v18 = type metadata accessor for Publishers.Print(0, a4, a5, v17);
  (*(void (**)(char *, _BYTE *, uint64_t))(v13 + 32))(&a6[*(int *)(v18 + 36)], v15, a4);
  *(_QWORD *)a6 = a1;
  *((_QWORD *)a6 + 1) = a2;
  outlined init with take of TextOutputStream?((uint64_t)v21, (uint64_t)&a6[*(int *)(v18 + 40)]);
  return swift_bridgeObjectRetain();
}

uint64_t outlined init with copy of TextOutputStream?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStream?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Publishers.Print.init(upstream:prefix:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v13;

  v13 = type metadata accessor for Publishers.Print(0, a5, a6, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(&a7[*(int *)(v13 + 36)], a1, a5);
  *(_QWORD *)a7 = a2;
  *((_QWORD *)a7 + 1) = a3;
  return outlined init with take of TextOutputStream?(a4, (uint64_t)&a7[*(int *)(v13 + 40)]);
}

uint64_t type metadata accessor for Publishers.Print(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Print);
}

uint64_t outlined init with take of TextOutputStream?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStream?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Publishers.Print.prefix.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Publishers.Print.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t Publishers.Print.stream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of TextOutputStream?(v2 + *(int *)(a1 + 40), a2);
}

void Publishers.Print.receive<A>(subscriber:)()
{
  type metadata accessor for Publishers.Print.Inner();
}

void sub_18B59C258(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  va_list va;

  va_start(va, a1);
  v4 = *v2;
  v5 = v2[1];
  outlined init with copy of TextOutputStream?((uint64_t)v2 + *(int *)(v3 + 40), (uint64_t)va);
  swift_allocObject();
  swift_bridgeObjectRetain();
  specialized Publishers.Print.Inner.init(downstream:prefix:to:)(v1, v4, v5, (uint64_t)va);
}

uint64_t sub_18B59C2A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = a1;
  v4 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Print<A>.Inner<A1>, v3);
  Publisher.subscribe<A>(_:)((uint64_t)&v6, v2, v3, v1, v4);
  return swift_release();
}

void type metadata accessor for Publishers.Print.Inner()
{
  JUMPOUT(0x18D77AC60);
}

double Publishers.Print.Inner.PrintTarget.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Subscription((__int128 *)a1, (uint64_t)v4);
    outlined init with take of Subscription(v4, a2);
  }
  else
  {
    outlined destroy of TextOutputStream?(a1);
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t Publishers.Print.Inner.PrintTarget.write(_:)()
{
  uint64_t v0;

  __swift_mutable_project_boxed_opaque_existential_1(v0, *(_QWORD *)(v0 + 24));
  return dispatch thunk of TextOutputStream.write(_:)();
}

void Publishers.Print.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x746E697250;
  a1[1] = 0xE500000000000000;
}

void Publishers.Print.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 144)), -1, -1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112), *(_QWORD *)(v1 + 88));
  swift_bridgeObjectRelease();
  type metadata accessor for Publishers.Print.Inner.PrintTarget();
}

uint64_t sub_18B59C478()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of SubscriptionStatus(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
  return v0;
}

void Publishers.Print.Inner.__deallocating_deinit()
{
  Publishers.Print.Inner.deinit();
}

uint64_t sub_18B59C4CC()
{
  return swift_deallocClassInstance();
}

void Publishers.Print.Inner.receive(subscription:)()
{
  type metadata accessor for Publishers.Print.Inner.PrintTarget();
}

uint64_t sub_18B59C53C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v30)(_BYTE *, uint64_t, uint64_t);
  uint64_t v31;
  _BYTE v32[40];
  char v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v8 + 16))(&v34, v4, v7);
  if (*((_QWORD *)&v35 + 1))
  {
    *(_OWORD *)v32 = v34;
    *(_OWORD *)&v32[16] = v35;
    *(_QWORD *)&v32[32] = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_18B5F41E0;
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v10 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 120));
    v11 = *v10;
    v12 = (void *)v10[1];
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = v11;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._object = (void *)0x800000018B5FE7C0;
    v14._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v14);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
    _print_unlocked<A, B>(_:_:)();
    v15._countAndFlagsBits = 41;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16 = v34;
    *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
    *(_OWORD *)(v9 + 32) = v16;
    MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Print<A>.Inner<A1>.PrintTarget, a1);
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v32, a1);
  }
  else
  {
    (*(void (**)(__int128 *, uint64_t))(v8 + 8))(&v34, v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_18B5F41E0;
    *(_QWORD *)v32 = 0;
    *(_QWORD *)&v32[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v18 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 120));
    v19 = *v18;
    v20 = (void *)v18[1];
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = v19;
    v21._object = v20;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._object = (void *)0x800000018B5FE7C0;
    v22._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
    _print_unlocked<A, B>(_:_:)();
    v23._countAndFlagsBits = 41;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    *(_QWORD *)(v17 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 40) = 0xE000000000000000;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }
  v24 = *(os_unfair_lock_s **)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 144));
  os_unfair_lock_lock(v24);
  v25 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v25, (uint64_t)v32);
  if (v33 == 2
    && (v26 = vorrq_s8(*(int8x16_t *)&v32[8], *(int8x16_t *)&v32[24]),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)) | *(_QWORD *)v32)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)v32);
    outlined init with copy of Subscription((uint64_t)v3, (uint64_t)v32);
    v33 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v32, v25);
    swift_endAccess();
    os_unfair_lock_unlock(v24);
    *(_QWORD *)&v32[24] = v5;
    *(_QWORD *)&v32[32] = &protocol witness table for Publishers.Print<A>.Inner<A1>;
    *(_QWORD *)v32 = v2;
    v30 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 40);
    swift_retain();
    v30(v32, v31, v1);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)v32);
    os_unfair_lock_unlock(v24);
    v27 = v3[3];
    v28 = v3[4];
    __swift_project_boxed_opaque_existential_1(v3, v27);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v28 + 8) + 8))(v27);
  }
}

void Publishers.Print.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v5 = v3[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)v20 - v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v20 - v13;
  (*(void (**)(char *, uint64_t))(v15 + 16))((char *)v20 - v13, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    v16 = v3[11];
    v17 = v3[13];
    v21 = v5;
    v22 = v16;
    v23 = v4;
    v24 = v17;
    type metadata accessor for Publishers.Print.Inner.PrintTarget();
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v14, AssociatedTypeWitness);
  v18 = v3[11];
  v19 = v3[13];
  v21 = v5;
  v22 = v18;
  v23 = v4;
  v24 = v19;
  v20[1] = v19;
  type metadata accessor for Publishers.Print.Inner.PrintTarget();
}

void sub_18B59CBC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v6 - 120, v5, v8);
  if (*(_QWORD *)(v6 - 96))
  {
    v10 = *(_OWORD *)(v6 - 104);
    *(_OWORD *)(v6 - 208) = *(_OWORD *)(v6 - 120);
    *(_OWORD *)(v6 - 192) = v10;
    *(_QWORD *)(v6 - 176) = *(_QWORD *)(v6 - 88);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_18B5F41E0;
    *(_QWORD *)(v6 - 120) = 0;
    *(_QWORD *)(v6 - 112) = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    v12 = *(_QWORD *)(v6 - 112);
    *(_QWORD *)(v6 - 120) = *(_QWORD *)(v6 - 120);
    *(_QWORD *)(v6 - 112) = v12;
    v13 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120));
    *(_QWORD *)(v6 - 224) = v2;
    v15 = *v13;
    v14 = (void *)v13[1];
    swift_bridgeObjectRetain();
    v16._countAndFlagsBits = v15;
    v16._object = v14;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._object = (void *)0x800000018B5FE760;
    v17._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v17);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v18._countAndFlagsBits = 41;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19 = *(_QWORD *)(v6 - 120);
    v20 = *(_QWORD *)(v6 - 112);
    *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v11 + 32) = v19;
    *(_QWORD *)(v11 + 40) = v20;
    MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Print<A>.Inner<A1>.PrintTarget, a1);
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v6 - 208, a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 224) + 8))(v4, v3);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v6 - 120, v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_18B5F41E0;
    *(_QWORD *)(v6 - 208) = 0;
    *(_QWORD *)(v6 - 200) = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    v22 = *(_QWORD *)(v6 - 200);
    *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 208);
    *(_QWORD *)(v6 - 200) = v22;
    v23 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120));
    v24 = *v23;
    v25 = (void *)v23[1];
    swift_bridgeObjectRetain();
    v26._countAndFlagsBits = v24;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._object = (void *)0x800000018B5FE760;
    v27._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v27);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v28._countAndFlagsBits = 41;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    v29 = *(_QWORD *)(v6 - 208);
    v30 = *(_QWORD *)(v6 - 200);
    *(_QWORD *)(v21 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v21 + 32) = v29;
    *(_QWORD *)(v21 + 40) = v30;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  }
  JUMPOUT(0x18B59CF08);
}

void Publishers.Print.Inner.receive(_:)()
{
  type metadata accessor for Publishers.Print.Inner.PrintTarget();
}

uint64_t sub_18B59D008(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  __int128 v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  __int128 v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  __int128 v40;
  uint64_t v41;
  void (*v42)(__int128 *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v42 = *(void (**)(__int128 *, uint64_t, uint64_t))(v6 + 16);
  v42(&v46, v1, v5);
  v41 = v6;
  if (*((_QWORD *)&v47 + 1))
  {
    v49 = v46;
    v50 = v47;
    v51 = v48;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_18B5F41E0;
    *(_QWORD *)&v46 = 0;
    *((_QWORD *)&v46 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    v8 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 120));
    v10 = *v8;
    v9 = (void *)v8[1];
    swift_bridgeObjectRetain();
    v43 = v10;
    v11._countAndFlagsBits = v10;
    v11._object = v9;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._object = (void *)0x800000018B5FE7A0;
    v12._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v12);
    swift_getAssociatedTypeWitness();
    v13 = v45;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v14._countAndFlagsBits = 41;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15 = v46;
    v16 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v7 + 56) = MEMORY[0x1E0DEA968];
    *(_OWORD *)(v7 + 32) = v15;
    MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Print<A>.Inner<A1>.PrintTarget, a1);
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(&v49, a1);
  }
  else
  {
    (*(void (**)(__int128 *, uint64_t))(v6 + 8))(&v46, v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_18B5F41E0;
    *(_QWORD *)&v49 = 0;
    *((_QWORD *)&v49 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    v18 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 120));
    v19 = *v18;
    v9 = (void *)v18[1];
    swift_bridgeObjectRetain();
    v43 = v19;
    v20._countAndFlagsBits = v19;
    v20._object = v9;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._object = (void *)0x800000018B5FE7A0;
    v21._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v21);
    swift_getAssociatedTypeWitness();
    v13 = v45;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v22._countAndFlagsBits = 41;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v23 = v49;
    v16 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v17 + 56) = MEMORY[0x1E0DEA968];
    *(_OWORD *)(v17 + 32) = v23;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v13, v44, v3);
  v25 = result;
  if (result == 0x8000000000000000)
  {
    v26 = v16;
    v27 = (void *)0xE900000000000064;
    v28 = 0x6574696D696C6E75;
    goto LABEL_9;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    if (!result)
      return v25;
    v26 = v16;
    *(_QWORD *)&v49 = 0x28203A78616DLL;
    *((_QWORD *)&v49 + 1) = 0xE600000000000000;
    *(_QWORD *)&v46 = result;
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 41;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    v27 = (void *)*((_QWORD *)&v49 + 1);
    v28 = v49;
LABEL_9:
    v42(&v46, v1, v5);
    if (*((_QWORD *)&v47 + 1))
    {
      v49 = v46;
      v50 = v47;
      v51 = v48;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = xmmword_18B5F41E0;
      *(_QWORD *)&v46 = 0;
      *((_QWORD *)&v46 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v46 = v43;
      *((_QWORD *)&v46 + 1) = v9;
      v32._countAndFlagsBits = 0x2074736575716572;
      v32._object = (void *)0xE800000000000000;
      String.append(_:)(v32);
      v33._countAndFlagsBits = v28;
      v33._object = v27;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v34._countAndFlagsBits = 0x7268636E79732820;
      v34._object = (void *)0xEE002973756F6E6FLL;
      String.append(_:)(v34);
      v35 = v46;
      *(_QWORD *)(v31 + 56) = v26;
      *(_OWORD *)(v31 + 32) = v35;
      MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Print<A>.Inner<A1>.PrintTarget, a1);
      print<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
      (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(&v49, a1);
    }
    else
    {
      (*(void (**)(__int128 *, uint64_t))(v41 + 8))(&v46, v5);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_18B5F41E0;
      *(_QWORD *)&v49 = 0;
      *((_QWORD *)&v49 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v49 = v43;
      *((_QWORD *)&v49 + 1) = v9;
      v37._countAndFlagsBits = 0x2074736575716572;
      v37._object = (void *)0xE800000000000000;
      String.append(_:)(v37);
      v38._countAndFlagsBits = v28;
      v38._object = v27;
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 0x7268636E79732820;
      v39._object = (void *)0xEE002973756F6E6FLL;
      String.append(_:)(v39);
      v40 = v49;
      *(_QWORD *)(v36 + 56) = v26;
      *(_OWORD *)(v36 + 32) = v40;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
    }
    return v25;
  }
  __break(1u);
  return result;
}

uint64_t Publishers.Print.Inner.request(_:)(uint64_t result)
{
  Swift::String v1;
  Swift::String v2;

  if (result == 0x8000000000000000)
LABEL_4:
    type metadata accessor for Publishers.Print.Inner.PrintTarget();
  if ((result & 0x8000000000000000) == 0)
  {
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = 41;
    v2._object = (void *)0xE100000000000000;
    String.append(_:)(v2);
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

void Publishers.Print.Inner.cancel()()
{
  type metadata accessor for Publishers.Print.Inner.PrintTarget();
}

void sub_18B59D96C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[40];
  char v25;

  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3 - 88, v2, v5);
  if (*(_QWORD *)(v3 - 64))
  {
    v7 = *(_OWORD *)(v3 - 72);
    *(_OWORD *)v24 = *(_OWORD *)(v3 - 88);
    *(_OWORD *)&v24[16] = v7;
    *(_QWORD *)&v24[32] = *(_QWORD *)(v3 - 56);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_18B5F41E0;
    *(_QWORD *)(v3 - 88) = 0;
    *(_QWORD *)(v3 - 80) = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v9 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120));
    v11 = *v9;
    v10 = v9[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 - 88) = v11;
    *(_QWORD *)(v3 - 80) = v10;
    v12._countAndFlagsBits = 0x2065766965636572;
    v12._object = (void *)0xEE006C65636E6163;
    String.append(_:)(v12);
    v13 = *(_QWORD *)(v3 - 88);
    v14 = *(_QWORD *)(v3 - 80);
    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v8 + 32) = v13;
    *(_QWORD *)(v8 + 40) = v14;
    MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Print<A>.Inner<A1>.PrintTarget, a1);
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v24, a1);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3 - 88, v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_18B5F41E0;
    *(_QWORD *)v24 = 0;
    *(_QWORD *)&v24[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v16 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120));
    v18 = *v16;
    v17 = v16[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)v24 = v18;
    *(_QWORD *)&v24[8] = v17;
    v19._countAndFlagsBits = 0x2065766965636572;
    v19._object = (void *)0xEE006C65636E6163;
    String.append(_:)(v19);
    *(_QWORD *)(v15 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v15 + 32) = v18;
    *(_QWORD *)(v15 + 40) = v17;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }
  v20 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 144));
  os_unfair_lock_lock(v20);
  v21 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v21, (uint64_t)v24);
  if (v25)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v24);
    os_unfair_lock_unlock(v20);
  }
  else
  {
    outlined init with take of Subscription((__int128 *)v24, v3 - 88);
    *(_QWORD *)v24 = 1;
    memset(&v24[8], 0, 32);
    v25 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v24, v21);
    swift_endAccess();
    os_unfair_lock_unlock(v20);
    v22 = *(_QWORD *)(v3 - 64);
    v23 = *(_QWORD *)(v3 - 56);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 - 88), v22);
    (*(void (**)(uint64_t))(*(_QWORD *)(v23 + 8) + 8))(v22);
    __swift_destroy_boxed_opaque_existential_1(v3 - 88);
  }
}

void protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Print<A>.Inner<A1>()
{
  Publishers.Print.Inner.receive(subscription:)();
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.Print<A>.Inner<A1>()
{
  Publishers.Print.Inner.receive(_:)();
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Print<A>.Inner<A1>(uint64_t a1)
{
  Publishers.Print.Inner.receive(completion:)(a1);
}

uint64_t protocol witness for Subscription.request(_:) in conformance Publishers.Print<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.Print.Inner.request(_:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Print<A>.Inner<A1>()
{
  return 0x746E697250;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Print<A>.Inner<A1>(_QWORD *a1@<X8>)
{
  Publishers.Print.Inner.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Print<A>.Inner<A1>()
{
  Publishers.Print.Inner.cancel()();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Print<A>()
{
  Publishers.Print.receive<A>(subscriber:)();
}

void specialized Publishers.Print.Inner.init(downstream:prefix:to:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];
  _QWORD v23[5];

  v5 = v4;
  v10 = *(_QWORD **)v5;
  v11 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 136);
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(v11 + 32) = 0;
  *(_BYTE *)(v11 + 40) = 2;
  v12 = *(_QWORD *)(*(_QWORD *)v5 + 144);
  v13 = (_DWORD *)swift_slowAlloc();
  *v13 = 0;
  *(_QWORD *)(v5 + v12) = v13;
  v14 = v10[11];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 112), a1, v14);
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    v16 = 0;
    v17 = 0xE000000000000000;
  }
  else
  {
    v23[0] = a2;
    v23[1] = a3;
    v15._countAndFlagsBits = 8250;
    v15._object = (void *)0xE200000000000000;
    String.append(_:)(v15);
    v16 = a2;
    v17 = a3;
  }
  v18 = (_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 120));
  *v18 = v16;
  v18[1] = v17;
  outlined init with copy of TextOutputStream?(a4, (uint64_t)v22);
  v19 = v10[10];
  v20 = v10[12];
  v21 = v10[13];
  Publishers.Print.Inner.PrintTarget.init(_:)((uint64_t)v22, (uint64_t)v23);
  outlined destroy of TextOutputStream?(a4);
  v22[0] = v19;
  v22[1] = v14;
  v22[2] = v20;
  v22[3] = v21;
  type metadata accessor for Publishers.Print.Inner.PrintTarget();
}

uint64_t sub_18B59DE90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v1, &v4, v2);
  return v0;
}

uint64_t type metadata completion function for Publishers.Print()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Print(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 40 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    v12 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v14(v12, v13, v4);
    v15 = (v7 + v12) & 0xFFFFFFFFFFFFFFF8;
    v16 = (v7 + v13) & 0xFFFFFFFFFFFFFFF8;
    v17 = *(_QWORD *)(v16 + 24);
    if (v17 < 0xFFFFFFFF)
    {
      v18 = *(_OWORD *)v16;
      v19 = *(_OWORD *)(v16 + 16);
      *(_QWORD *)(v15 + 32) = *(_QWORD *)(v16 + 32);
      *(_OWORD *)v15 = v18;
      *(_OWORD *)(v15 + 16) = v19;
    }
    else
    {
      *(_QWORD *)(v15 + 24) = v17;
      *(_QWORD *)(v15 + 32) = *(_QWORD *)(v16 + 32);
      (**(void (***)(void))(v17 - 8))();
    }
  }
  return a1;
}

unint64_t destroy for Publishers.Print(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t result;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  result = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(result + 24) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

_QWORD *initializeWithCopy for Publishers.Print(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, v5);
  v11 = *(_QWORD *)(v6 + 64) + 7;
  v12 = (v11 + v8) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)(v13 + 24);
  if (v14 < 0xFFFFFFFF)
  {
    v15 = *(_OWORD *)v13;
    v16 = *(_OWORD *)(v13 + 16);
    *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
    *(_OWORD *)v12 = v15;
    *(_OWORD *)(v12 + 16) = v16;
  }
  else
  {
    *(_QWORD *)(v12 + 24) = v14;
    *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
    (**(void (***)(void))(v14 - 8))();
  }
  return a1;
}

_QWORD *assignWithCopy for Publishers.Print(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (v10 + v8) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + v9) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(v12 + 24);
  if (*(_QWORD *)(v11 + 24) < 0xFFFFFFFFuLL)
  {
    if (v13 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(v11 + 24) = v13;
      *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
      (**(void (***)(unint64_t, unint64_t))(v13 - 8))(v11, v12);
      return a1;
    }
LABEL_7:
    v14 = *(_OWORD *)v12;
    v15 = *(_OWORD *)(v12 + 16);
    *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
    *(_OWORD *)v11 = v14;
    *(_OWORD *)(v11 + 16) = v15;
    return a1;
  }
  if (v13 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(v11);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v11, (uint64_t *)v12);
  return a1;
}

_OWORD *initializeWithTake for Publishers.Print(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v10 + 32);
  v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v12;
  *(_QWORD *)(v9 + 32) = v11;
  return a1;
}

_QWORD *assignWithTake for Publishers.Print(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64) + 7;
  v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v12 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_OWORD *)v13;
  v15 = *(_OWORD *)(v13 + 16);
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
  *(_OWORD *)v12 = v14;
  *(_OWORD *)(v12 + 16) = v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Print(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B59E490 + 4 * byte_18B5F6850[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.Print(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 40);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_18B59E618()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B59E684);
}

void sub_18B59E620(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B59E628);
  JUMPOUT(0x18B59E684);
}

void sub_18B59E63C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B59E684);
}

void sub_18B59E644()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B59E684);
}

void sub_18B59E64C(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0x18B59E658);
    if (a2 < 0)
      JUMPOUT(0x18B59E67CLL);
    *(_QWORD *)(v3 + 8) = (a2 - 1);
  }
  JUMPOUT(0x18B59E684);
}

uint64_t type metadata completion function for Publishers.Print.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t initializeWithCopy for Publishers.Print.Inner.PrintTarget(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for Publishers.Print.Inner.PrintTarget(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t assignWithTake for Publishers.Print.Inner.PrintTarget(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Print.Inner.PrintTarget(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Publishers.Print.Inner.PrintTarget(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for Publishers.Print.Inner.PrintTarget()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t outlined destroy of TextOutputStream?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStream?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined consume of Set<ObservableObjectPublisher.Conduit>.Iterator._Variant()
{
  return swift_release();
}

uint64_t ObservableObjectPublisher.Conduit.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ObservableObjectPublisher.Conduit()
{
  Swift::UInt *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

uint64_t ObservableObjectPublisher.access<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t ObservableObjectPublisher.withMutation<A, B>(of:keyPath:apply:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

BOOL static ObservableObjectPublisher.Inner.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ObservableObjectPublisher.Inner.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int ObservableObjectPublisher.Inner.State.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ObservableObjectPublisher.Inner<A>.State(char *a1, char *a2)
{
  return static ObservableObjectPublisher.Inner.State.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ObservableObjectPublisher.Inner<A>.State()
{
  unsigned __int8 *v0;

  return ObservableObjectPublisher.Inner.State.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ObservableObjectPublisher.Inner<A>.State(uint64_t a1)
{
  unsigned __int8 *v1;

  ObservableObjectPublisher.Inner.State.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ObservableObjectPublisher.Inner<A>.State()
{
  unsigned __int8 *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  ObservableObjectPublisher.Inner.State.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t ObservableObjectPublisher.Inner.customMirror.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;

  v1 = *v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18B5F41E0;
  *(_QWORD *)(v8 + 32) = 0x657274736E776F64;
  *(_QWORD *)(v8 + 40) = 0xEA00000000006D61;
  v9 = (char *)v0 + *(_QWORD *)(v1 + 136);
  v10 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v8 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(boxed_opaque_existential_1, v9, v10);
  v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 1, 1, v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void ObservableObjectPublisher.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0xD000000000000019;
  a1[1] = 0x800000018B5F6AB0;
}

uint64_t ObservableObjectPublisher.Inner.__ivar_destroyer()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_weakDestroy();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 112) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 136));
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ObservableObjectPublisher.Inner<A>()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance ObservableObjectPublisher.Inner<A>()
{
  return ObservableObjectPublisher.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance ObservableObjectPublisher.Inner<A>(_QWORD *a1@<X8>)
{
  ObservableObjectPublisher.Inner.playgroundDescription.getter(a1);
}

uint64_t ObservableObjectPublisher.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *v2;

  v0 = swift_allocObject();
  v1 = OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock;
  v2 = (_DWORD *)swift_slowAlloc();
  *v2 = 0;
  *(_QWORD *)(v0 + v1) = v2;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_identifier) = 0;
  ObservationRegistrar.init()();
  return v0;
}

uint64_t ObservableObjectPublisher.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock), -1, -1);
  v1 = v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher__registrar;
  v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ObservableObjectTable.Storage()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(v0 + 8));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ObservableObjectTable.Storage()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(v0 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ObservableObjectTable.Storage()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(v0 + 8));
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  _QWORD *v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t i;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[16];
  _BYTE v21[16];
  _BYTE v22[16];

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v5)
    goto LABEL_31;
LABEL_6:
  v10 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v10 < v6)
    {
      v11 = *(_QWORD *)(v2 + 8 * v10);
      ++v8;
      if (v11)
        goto LABEL_21;
      v8 = v10 + 1;
      if (v10 + 1 >= v6)
        goto LABEL_32;
      v11 = *(_QWORD *)(v2 + 8 * v8);
      if (v11)
        goto LABEL_21;
      v8 = v10 + 2;
      if (v10 + 2 >= v6)
        goto LABEL_32;
      v11 = *(_QWORD *)(v2 + 8 * v8);
      if (v11)
        goto LABEL_21;
      v8 = v10 + 3;
      if (v10 + 3 >= v6)
        goto LABEL_32;
      v11 = *(_QWORD *)(v2 + 8 * v8);
      if (v11)
      {
LABEL_21:
        v5 = (v11 - 1) & v11;
        for (i = __clz(__rbit64(v11)) + (v8 << 6); ; i = v17 | (v8 << 6))
        {
          outlined init with copy of ObservableObjectTable.Storage(*(_QWORD *)(a1 + 48) + 16 * i, (uint64_t)v22);
          outlined init with take of ObservableObjectTable.Storage((uint64_t)v22, (uint64_t)v21);
          v14 = MEMORY[0x18D77AE58](v21);
          swift_unknownObjectRelease();
          if (v14)
          {
            v18 = 0;
            v19 = 0;
          }
          else
          {
            outlined init with copy of ObservableObjectTable.Storage((uint64_t)v21, (uint64_t)&v18);
          }
          outlined destroy of ObservableObjectTable.Storage((uint64_t)v21);
          if (v19)
          {
            outlined init with take of ObservableObjectTable.Storage((uint64_t)&v18, (uint64_t)v20);
            outlined init with take of ObservableObjectTable.Storage((uint64_t)v20, (uint64_t)&v18);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
            v16 = v9[2];
            v15 = v9[3];
            if (v16 >= v15 >> 1)
              v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v9);
            v9[2] = v16 + 1;
            result = outlined init with take of ObservableObjectTable.Storage((uint64_t)&v18, (uint64_t)&v9[2 * v16 + 4]);
            if (!v5)
              goto LABEL_6;
          }
          else
          {
            result = outlined destroy of ObservableObjectTable.Storage?((uint64_t)&v18);
            if (!v5)
              goto LABEL_6;
          }
LABEL_31:
          v17 = __clz(__rbit64(v5));
          v5 &= v5 - 1;
        }
      }
      v12 = v10 + 4;
      if (v12 < v6)
      {
        v11 = *(_QWORD *)(v2 + 8 * v12);
        if (v11)
        {
          v8 = v12;
          goto LABEL_21;
        }
        while (1)
        {
          v8 = v12 + 1;
          if (__OFADD__(v12, 1))
            goto LABEL_34;
          if (v8 >= v6)
            break;
          v11 = *(_QWORD *)(v2 + 8 * v8);
          ++v12;
          if (v11)
            goto LABEL_21;
        }
      }
    }
LABEL_32:
    swift_release();
    return (uint64_t)v9;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>, (void (*)(_QWORD))type metadata accessor for ObservableObjectPublisher.Conduit);
}

{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<AnyCancellable>, (void (*)(_QWORD))type metadata accessor for AnyCancellable);
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(_QWORD))
{
  uint64_t v6;
  Swift::Int result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    v6 = static _SetStorage.convert(_:capacity:)();
    v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      a4(0);
      do
      {
        swift_dynamicCast();
        v6 = v19;
        v13 = *(_QWORD *)(v19 + 16);
        if (*(_QWORD *)(v19 + 24) <= v13)
        {
          specialized _NativeSet.resize(capacity:)(v13 + 1, a3);
          v6 = v19;
        }
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v18);
        result = Hasher._finalize()();
        v8 = v6 + 56;
        v9 = -1 << *(_BYTE *)(v6 + 32);
        v10 = result & ~v9;
        v11 = v10 >> 6;
        if (((-1 << v10) & ~*(_QWORD *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          v12 = __clz(__rbit64((-1 << v10) & ~*(_QWORD *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v14 = 0;
          v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v16 = v11 == v15;
            if (v11 == v15)
              v11 = 0;
            v14 |= v16;
            v17 = *(_QWORD *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(_QWORD *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v18;
        ++*(_QWORD *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v6;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DebugHook.Handler>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v25 = 1 << *(_BYTE *)(v2 + 32);
                if (v25 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v25;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v26 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      result = Hasher._finalize()();
      v18 = -1 << *(_BYTE *)(v4 + 32);
      v19 = result & ~v18;
      v20 = v19 >> 6;
      if (((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v21 = 0;
        v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v23 = v20 == v22;
          if (v20 == v22)
            v20 = 0;
          v21 |= v23;
          v24 = *(_QWORD *)(v11 + 8 * v20);
        }
        while (v24 == -1);
        v12 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12) = v26;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(Swift::UInt a1, uint64_t a2)
{
  unint64_t result;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void *specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DebugHook.Handler>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    result = (void *)swift_unknownObjectRetain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = (void *)swift_retain();
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(Swift::UInt a1)
{
  uint64_t *v1;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12;

  v3 = *v1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v7 = ~v5;
  while (*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v6) != a1)
  {
    v6 = (v6 + 1) & v7;
    if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      return 0;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v1;
  v12 = *v1;
  *v1 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _NativeSet.copy()();
    v10 = v12;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v6);
  specialized _NativeSet._delete(at:)(v6);
  *v1 = v12;
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t specialized Set._Variant._migrateToNative(_:removing:)(uint64_t a1, Swift::UInt a2)
{
  Swift::Int *v2;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease();
  v4 = __CocoaSet.count.getter();
  v5 = swift_unknownObjectRetain();
  v6 = specialized _NativeSet.init(_:capacity:)(v5, v4, &demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>, (void (*)(_QWORD))type metadata accessor for ObservableObjectPublisher.Conduit);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  result = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v10 = *(_QWORD *)(v6 + 48);
    if (*(_QWORD *)(v10 + 8 * result) == a2)
    {
LABEL_6:
      specialized _NativeSet._delete(at:)(result);
      *v2 = v6;
      return a2;
    }
    v11 = ~v8;
    while (1)
    {
      result = (result + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
        break;
      if (*(_QWORD *)(v10 + 8 * result) == a2)
        goto LABEL_6;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v10;
  }
  outlined destroy of ObservableObjectTable.Storage(*(_QWORD *)(v7 + 48) + 16 * v4);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _BYTE v22[16];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObservableObjectTable.Storage, ObservableObjectPublisher>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    outlined init with copy of ObservableObjectTable.Storage(*(_QWORD *)(v2 + 48) + 16 * v15, (uint64_t)v22);
    v17 = 8 * v15;
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    outlined init with take of ObservableObjectTable.Storage((uint64_t)v22, *(_QWORD *)(v4 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v17) = v18;
    result = (void *)swift_retain();
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Subscription>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    outlined init with copy of Subscription(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)outlined init with take of Subscription(v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

_UNKNOWN **default associated conformance accessor for ObservableObject.ObservableObject.ObjectWillChangePublisher: Publisher()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t ObjC metadata update function for ObservableObjectPublisher()
{
  return type metadata accessor for ObservableObjectPublisher();
}

uint64_t type metadata completion function for ObservableObjectPublisher()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ObservableObjectPublisher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ObservableObjectPublisher.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of _ObservableObjectProperty.objectWillChange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of _ObservableObjectProperty.objectWillChange.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of _ObservableObjectProperty.objectWillChange.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t getEnumTagSinglePayload for ObservableObjectPublisher.Inner.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ObservableObjectPublisher.Inner.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18B5A03A0 + 4 * byte_18B5F6A55[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18B5A03D4 + 4 * byte_18B5F6A50[v4]))();
}

uint64_t sub_18B5A03D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18B5A03DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18B5A03E4);
  return result;
}

uint64_t sub_18B5A03F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18B5A03F8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18B5A03FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18B5A0404(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for ObservableObjectPublisher.Inner.State(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

uint64_t type metadata accessor for ObservableObjectPublisher.Inner.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservableObjectPublisher.Inner.State);
}

void base witness table accessor for Equatable in ObservableObjectPublisher.Inner<A>.State()
{
  JUMPOUT(0x18D77ACE4);
}

uint64_t partial apply for closure #1 in ObservableObjectPublisher.withMutation<A, B>(of:keyPath:apply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

ValueMetadata *type metadata accessor for ObservableObjectTable()
{
  return &type metadata for ObservableObjectTable;
}

uint64_t initializeWithCopy for ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t storeEnumTagSinglePayload for ObservableObjectTable.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t Publisher.prefix(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.PrefixWhile, a5);
}

uint64_t Publishers.PrefixWhile.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.PrefixWhile, a6);
}

uint64_t type metadata accessor for Publishers.PrefixWhile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.PrefixWhile);
}

uint64_t Publisher.tryPrefix(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.TryPrefixWhile, a5);
}

uint64_t Publishers.TryPrefixWhile.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.TryPrefixWhile, a6);
}

uint64_t type metadata accessor for Publishers.TryPrefixWhile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.TryPrefixWhile);
}

uint64_t Publishers.PrefixWhile.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

void Publishers.PrefixWhile.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Publishers.PrefixWhile.receive<A>(subscriber:)(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD *))type metadata accessor for Publishers.PrefixWhile.Inner);
}

void type metadata accessor for Publishers.PrefixWhile.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.PrefixWhile.Inner.description.getter()
{
  return 0x6857786966657250;
}

uint64_t Publishers.PrefixWhile.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  (*(void (**)(uint64_t *__return_ptr))(v2 + 16))(&v14);
  if (v14 == 1)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, AssociatedTypeWitness);
    v7 = type metadata accessor for Optional();
    v8 = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion(0, v7, v8, AssociatedConformanceWitness);
  }
  else
  {
    swift_getAssociatedTypeWitness();
    v10 = type metadata accessor for Optional();
    v11 = swift_getAssociatedTypeWitness();
    v12 = swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion(0, v10, v11, v12);
  }
  return swift_storeEnumTagMultiPayload();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.PrefixWhile<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Publishers.PrefixWhile.receive<A>(subscriber:)(a1, a4, a2, a3);
}

void Publishers.TryPrefixWhile.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Publishers.PrefixWhile.receive<A>(subscriber:)(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD *))type metadata accessor for Publishers.TryPrefixWhile.Inner);
}

void Publishers.PrefixWhile.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD *))
{
  uint64_t v5;
  _QWORD v6[4];

  v5 = *(_QWORD *)(a2 + 24);
  v6[0] = *(_QWORD *)(a2 + 16);
  v6[1] = a3;
  v6[2] = v5;
  v6[3] = a4;
  a5(0, v6);
  JUMPOUT(0x18B5A0808);
}

uint64_t Publishers.TryPrefixWhile.Inner.description.getter()
{
  return 0x6966657250797254;
}

uint64_t Publishers.TryPrefixWhile.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  (*(void (**)(uint64_t *__return_ptr))(v2 + 16))(&v10);
  if (v10 == 1)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    swift_getAssociatedTypeWitness();
  }
  v7 = type metadata accessor for Optional();
  v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for PartialCompletion(0, v7, v8, MEMORY[0x1E0DEDB38]);
  return swift_storeEnumTagMultiPayload();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryPrefixWhile<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Publishers.TryPrefixWhile.receive<A>(subscriber:)(a1, a4, a2, a3);
}

void type metadata accessor for Publishers.TryPrefixWhile.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t *specialized Publishers.PrefixWhile.Inner.init(downstream:filter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD v16[2];

  v9 = *(_QWORD **)v5;
  v10 = *(_QWORD *)(*(_QWORD *)v5 + 280);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v9[34];
  v14[3] = v10;
  v14[4] = v9[36];
  v14[5] = v9[37];
  v14[6] = a2;
  v14[7] = a3;
  v16[0] = a5;
  v16[1] = v14;
  return FilterProducer.init(downstream:filter:)((uint64_t)v12, (uint64_t)v16);
}

uint64_t getEnumTagSinglePayload for Publishers.PrefixWhile(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B5A0BE4 + 4 * byte_18B5F6DA8[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.PrefixWhile(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B5A0D5C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B5A0DD4);
}

void sub_18B5A0D64(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B5A0D6CLL);
  JUMPOUT(0x18B5A0DD4);
}

void sub_18B5A0DAC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5A0DD4);
}

void sub_18B5A0DB4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5A0DD4);
}

uint64_t sub_18B5A0DBC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B5A0DD4);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B5A0DD0);
    JUMPOUT(0x18B5A0DC8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_18B5A0DEC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18B5A0E18()
{
  swift_release();
  return swift_deallocObject();
}

void Future.Conduit.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  Future.Conduit.init(_:_:)(a1, a2);
}

void Future.Conduit.State.downstream.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = (char *)sub_18B5A0F08 + 4 * byte_18B5F6E98[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_18B5A0F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v0, v1, v3);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v0, 0, 1, v3);
}

uint64_t Future.Conduit.State.hasAnyDemand.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = v4[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
    return 0;
  }
  return v6;
}

void Future.Conduit.init(_:_:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = *(_QWORD *)v2;
  *((_QWORD *)v2 + 2) = 0;
  v6 = *(_QWORD *)(v5 + 208);
  swift_retain();
  v7 = (_DWORD *)swift_slowAlloc();
  *v7 = 0;
  *(_QWORD *)&v2[v6] = v7;
  v8 = *(_QWORD *)(*(_QWORD *)v2 + 216);
  v9 = (_QWORD *)swift_slowAlloc();
  *v9 = 0;
  *(_QWORD *)&v2[v8] = v9;
  *((_QWORD *)v2 + 2) = a1;
  swift_release();
  (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v5 + 176) - 8) + 32))(&v2[*(_QWORD *)(*(_QWORD *)v2 + 200)], a2, *(_QWORD *)(v5 + 176));
  type metadata accessor for Future.Conduit.State();
}

uint64_t sub_18B5A119C()
{
  swift_storeEnumTagMultiPayload();
  swift_release();
  return ConduitBase.init()();
}

void Future.Conduit.__ivar_destroyer()
{
  swift_release();
  type metadata accessor for Future.Conduit.State();
}

uint64_t sub_18B5A1210(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t method lookup function for Future()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Future.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

_QWORD *initializeBufferWithCopyOfBuffer for Future.Conduit.State(_QWORD *__dst, _BYTE *__src, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  BOOL v28;
  uint64_t v29;

  v4 = __dst;
  v5 = *(_QWORD *)(a3[4] - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[2] - 8);
  v8 = *(_QWORD *)(a3[3] - 8);
  v9 = *(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80);
  v10 = (*(_BYTE *)(v8 + 80) | *(_BYTE *)(v7 + 80));
  v11 = v6 + v10;
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v8 + 64);
  v13 = v12 + ((v6 + v10) & ~v10);
  if (v13 + 1 > v6)
    v14 = v13 + 1;
  else
    v14 = *(_QWORD *)(v5 + 64);
  if (v6 + 1 > v14)
    v15 = v6 + 1;
  else
    v15 = v14;
  v16 = *(_DWORD *)(v5 + 80) | v9;
  v17 = (*(_BYTE *)(v5 + 80) | v9);
  v18 = v16 & 0x100000;
  if (v17 <= 7 && v18 == 0 && v15 + 1 <= 0x18)
  {
    v22 = __src[v15];
    if (v22 >= 3)
    {
      if (v15 <= 3)
        v23 = v15;
      else
        v23 = 4;
      __asm { BR              X15 }
    }
    if (v22 == 2)
    {
      (*(void (**)(_QWORD *, _BYTE *))(v5 + 16))(__dst, __src);
      *((_BYTE *)v4 + v6) = __src[v6];
      v27 = 2;
    }
    else
    {
      if (v22 != 1)
      {
        (*(void (**)(_QWORD *, _BYTE *))(v5 + 16))(__dst, __src);
        *((_BYTE *)v4 + v15) = 0;
        return v4;
      }
      v24 = ~v10;
      (*(void (**)(_QWORD *, _BYTE *))(v5 + 16))(__dst, __src);
      v25 = *(unsigned __int8 *)(((unint64_t)&__src[v11] & v24) + v12);
      if (v25 >= 2)
      {
        if (v12 <= 3)
          v26 = v12;
        else
          v26 = 4;
        __asm { BR              X12 }
      }
      v28 = v25 == 1;
      if (v25 == 1)
        v29 = v8;
      else
        v29 = v7;
      (*(void (**)(unint64_t))(v29 + 16))(((unint64_t)v4 + v11) & v24);
      *(_BYTE *)((((unint64_t)v4 + v11) & v24) + v12) = v28;
      v27 = 1;
    }
    *((_BYTE *)v4 + v15) = v27;
    return v4;
  }
  v21 = *(_QWORD *)__src;
  *v4 = *(_QWORD *)__src;
  v4 = (_QWORD *)(v21 + ((v17 + 16) & ~v17));
  swift_retain();
  return v4;
}

_BYTE *assignWithCopy for Future.Conduit.State(_BYTE *__dst, _BYTE *__src, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  void (*v18)(void);
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;

  if (__dst != __src)
  {
    v5 = a3[4];
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(_QWORD *)(a3[2] - 8);
    v9 = *(_QWORD *)(a3[3] - 8);
    v10 = *(unsigned __int8 *)(v9 + 80) | *(unsigned __int8 *)(v8 + 80);
    v11 = v7 + v10;
    if (*(_QWORD *)(v9 + 64) <= *(_QWORD *)(v8 + 64))
      v12 = *(_QWORD *)(v8 + 64);
    else
      v12 = *(_QWORD *)(v9 + 64);
    v13 = v12 + ((v7 + v10) & ~v10);
    if (v13 + 1 > v7)
      v14 = v13 + 1;
    else
      v14 = *(_QWORD *)(v6 + 64);
    if (v7 + 1 > v14)
      v15 = v7 + 1;
    else
      v15 = v14;
    v16 = __dst[v15];
    if (v16 >= 3)
    {
      if (v15 <= 3)
        v17 = v15;
      else
        v17 = 4;
      __asm { BR              X13 }
    }
    v29 = ~v10;
    if (v16 == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(__dst, v5);
      v19 = *(unsigned __int8 *)(((unint64_t)&__dst[v11] & v29) + v12);
      if (v19 >= 2)
      {
        if (v12 <= 3)
          v20 = v12;
        else
          v20 = 4;
        __asm { BR              X12 }
      }
      if (v19 == 1)
        v18 = *(void (**)(void))(v9 + 8);
      else
        v18 = *(void (**)(void))(v8 + 8);
    }
    else
    {
      v18 = *(void (**)(void))(v6 + 8);
    }
    v18();
    v21 = __src[v15];
    if (v21 >= 3)
    {
      if (v15 <= 3)
        v22 = v15;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v21 == 2)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = __src[v7];
      v25 = 2;
    }
    else
    {
      if (v21 != 1)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(__dst, __src, v5);
        __dst[v15] = 0;
        return __dst;
      }
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(__dst, __src, v5);
      v23 = *(unsigned __int8 *)(((unint64_t)&__src[v11] & v29) + v12);
      if (v23 >= 2)
      {
        if (v12 <= 3)
          v24 = v12;
        else
          v24 = 4;
        __asm { BR              X12 }
      }
      v26 = v23 == 1;
      if (v23 == 1)
        v27 = v9;
      else
        v27 = v8;
      (*(void (**)(unint64_t))(v27 + 16))((unint64_t)&__dst[v11] & v29);
      *(_BYTE *)(((unint64_t)&__dst[v11] & v29) + v12) = v26;
      v25 = 1;
    }
    __dst[v15] = v25;
  }
  return __dst;
}

_BYTE *initializeWithTake for Future.Conduit.State(_BYTE *__dst, _BYTE *__src, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a3[4] - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[2] - 8);
  v8 = *(_QWORD *)(a3[3] - 8);
  v9 = *(unsigned __int8 *)(v8 + 80) | *(unsigned __int8 *)(v7 + 80);
  v10 = v6 + v9;
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = *(_QWORD *)(v8 + 64);
  v12 = v11 + ((v6 + v9) & ~v9);
  if (v12 + 1 > v6)
    v13 = v12 + 1;
  else
    v13 = *(_QWORD *)(v5 + 64);
  if (v6 + 1 > v13)
    v14 = v6 + 1;
  else
    v14 = v13;
  v15 = __src[v14];
  if (v15 >= 3)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X14 }
  }
  if (v15 == 2)
  {
    (*(void (**)(_BYTE *, _BYTE *))(v5 + 32))(__dst, __src);
    __dst[v6] = __src[v6];
    v20 = 2;
LABEL_28:
    __dst[v14] = v20;
    return __dst;
  }
  if (v15 == 1)
  {
    v17 = ~v9;
    (*(void (**)(_BYTE *, _BYTE *))(v5 + 32))(__dst, __src);
    v18 = *(unsigned __int8 *)(((unint64_t)&__src[v10] & v17) + v11);
    if (v18 >= 2)
    {
      if (v11 <= 3)
        v19 = v11;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    v21 = v18 == 1;
    if (v18 == 1)
      v22 = v8;
    else
      v22 = v7;
    (*(void (**)(unint64_t))(v22 + 32))((unint64_t)&__dst[v10] & v17);
    *(_BYTE *)(((unint64_t)&__dst[v10] & v17) + v11) = v21;
    v20 = 1;
    goto LABEL_28;
  }
  (*(void (**)(_BYTE *, _BYTE *))(v5 + 32))(__dst, __src);
  __dst[v14] = 0;
  return __dst;
}

uint64_t getEnumTagSinglePayload for Future.Conduit.State(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  int v14;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v3 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  v6 = *(unsigned __int8 *)(v5 + 80) | *(unsigned __int8 *)(v4 + 80);
  v7 = (v3 + v6) & ~v6;
  v8 = *(_QWORD *)(v4 + 64);
  v9 = *(_QWORD *)(v5 + 64);
  if (v9 > v8)
    v8 = v9;
  v10 = v8 + v7;
  if (v10 + 1 > v3)
    v11 = v10 + 1;
  else
    v11 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  if (v3 + 1 > v11)
    v11 = v3 + 1;
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_26;
  v12 = v11 + 1;
  v13 = 8 * (v11 + 1);
  if ((v11 + 1) <= 3)
  {
    v16 = ((a2 + ~(-1 << v13) - 252) >> v13) + 1;
    if (HIWORD(v16))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v16 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v16 < 2)
    {
LABEL_26:
      v18 = *(unsigned __int8 *)(a1 + v11);
      if (v18 >= 4)
        return (v18 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_26;
LABEL_19:
  v17 = (v14 - 1) << v13;
  if (v12 > 3)
    v17 = 0;
  if (!(_DWORD)v12)
    return (v17 + 253);
  if (v12 > 3)
    LODWORD(v12) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18B5A1BD8 + 4 * byte_18B5F6EEC[(v12 - 1)]))();
}

void storeEnumTagSinglePayload for Future.Conduit.State(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  v6 = *(_QWORD *)(a4[2] - 8);
  v7 = *(_QWORD *)(a4[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80) | *(unsigned __int8 *)(v6 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = *(_QWORD *)(v6 + 64);
  v11 = *(_QWORD *)(v7 + 64);
  if (v11 > v10)
    v10 = v11;
  v12 = v10 + v9;
  if (v12 + 1 > v5)
    v13 = v12 + 1;
  else
    v13 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  if (v5 + 1 > v13)
    v14 = v5 + 1;
  else
    v14 = v13;
  v15 = v14 + 1;
  if (a3 < 0xFD)
  {
    v16 = 0u;
  }
  else if (v15 <= 3)
  {
    v18 = ((a3 + ~(-1 << (8 * v15)) - 252) >> (8 * v15)) + 1;
    if (HIWORD(v18))
    {
      v16 = 4u;
    }
    else if (v18 >= 0x100)
    {
      v16 = 2;
    }
    else
    {
      v16 = v18 > 1;
    }
  }
  else
  {
    v16 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v17 = a2 - 253;
  if (v15 < 4)
  {
    if ((_DWORD)v14 != -1)
    {
      v19 = v17 & ~(-1 << (8 * v15));
      bzero(a1, v15);
      if ((_DWORD)v15 == 3)
      {
        *a1 = v19;
        *((_BYTE *)a1 + 2) = BYTE2(v19);
      }
      else if ((_DWORD)v15 == 2)
      {
        *a1 = v19;
      }
      else
      {
        *(_BYTE *)a1 = v19;
      }
    }
  }
  else
  {
    bzero(a1, v14 + 1);
    *(_DWORD *)a1 = v17;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for Future.Conduit.State(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64);
  v3 = *(_QWORD *)(a2[2] - 8);
  v4 = *(_QWORD *)(a2[3] - 8);
  v5 = *(unsigned __int8 *)(v4 + 80) | *(unsigned __int8 *)(v3 + 80);
  v6 = (v2 + v5) & ~v5;
  v7 = *(_QWORD *)(v3 + 64);
  v8 = *(_QWORD *)(v4 + 64);
  if (v8 > v7)
    v7 = v8;
  v9 = v7 + v6;
  if (v9 + 1 > v2)
    v10 = v9 + 1;
  else
    v10 = *(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64);
  if (v2 + 1 > v10)
    v10 = v2 + 1;
  if (*(unsigned __int8 *)(a1 + v10) < 3u)
    return *(unsigned __int8 *)(a1 + v10);
  if (v10 <= 3)
    v11 = v10;
  else
    v11 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18B5A1E94 + 4 * byte_18B5F6EFA[v11]))();
}

void destructiveInjectEnumTag for Future.Conduit.State(_BYTE *a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v5 = *(_QWORD *)(a3[2] - 8);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(unsigned __int8 *)(v6 + 80) | *(unsigned __int8 *)(v5 + 80);
  v8 = (v4 + v7) & ~v7;
  v9 = *(_QWORD *)(v5 + 64);
  v10 = *(_QWORD *)(v6 + 64);
  if (v10 > v9)
    v9 = v10;
  v11 = v9 + v8;
  if (v11 + 1 > v4)
    v12 = v11 + 1;
  else
    v12 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  if (v4 + 1 > v12)
    v13 = v4 + 1;
  else
    v13 = v12;
  if (a2 > 2)
  {
    v14 = a2 - 3;
    if (v13 < 4)
    {
      v15 = v14 >> (8 * v13);
      v16 = v14 & ~(-1 << (8 * v13));
      a1[v13] = v15 + 3;
      bzero(a1, v13);
      if ((_DWORD)v13 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if ((_DWORD)v13 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
    else
    {
      a1[v13] = 3;
      bzero(a1, v13);
      *(_DWORD *)a1 = v14;
    }
  }
  else
  {
    a1[v13] = a2;
  }
}

void Future.Conduit.customMirror.getter(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[9];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v10[8] = a1;
  v2 = (_QWORD *)*v1;
  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v3);
  v10[7] = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v10[6] = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v2[21];
  v11 = v2[20];
  v9 = v2[22];
  v8 = v2[23];
  v12 = v11;
  v13 = v7;
  v14 = v9;
  v15 = v8;
  v10[5] = v8;
  type metadata accessor for Future.Conduit.State();
}

void sub_18B5A20A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v15 = *(_QWORD *)(a1 - 8);
  v16 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v13 - 192) = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&a9 - v18;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v9 + *(_QWORD *)(v10 + 208)));
  *(_QWORD *)(v13 - 120) = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18B5F5C60;
  *(_QWORD *)(v20 + 32) = 0x746E65726170;
  *(_QWORD *)(v20 + 40) = 0xE600000000000000;
  v21 = v9[2];
  *(_QWORD *)(v13 - 216) = v12;
  *(_QWORD *)(v13 - 200) = v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Future(255, *(_QWORD *)(v13 - 152), v11, AssociatedConformanceWitness);
  v23 = type metadata accessor for Optional();
  *(_QWORD *)(v13 - 208) = v23;
  *(_QWORD *)(v20 + 48) = v21;
  *(_QWORD *)(v20 + 72) = v23;
  *(_QWORD *)(v20 + 80) = 0x657274736E776F64;
  *(_QWORD *)(v20 + 88) = 0xEA00000000006D61;
  v24 = (char *)v9 + *(_QWORD *)(*v9 + 200);
  swift_beginAccess();
  v25 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v25(v19, v24, a1);
  *(_QWORD *)(v20 + 120) = type metadata accessor for Optional();
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v20 + 96));
  swift_retain();
  swift_retain();
  Future.Conduit.State.downstream.getter(a1);
  v26 = *(void (**)(char *, uint64_t))(v15 + 8);
  v26(v19, a1);
  strcpy((char *)(v20 + 128), "hasAnyDemand");
  *(_BYTE *)(v20 + 141) = 0;
  *(_WORD *)(v20 + 142) = -5120;
  v27 = *(char **)(v13 - 192);
  v25(v27, v24, a1);
  LOBYTE(v19) = Future.Conduit.State.hasAnyDemand.getter(a1);
  v26(v27, a1);
  v28 = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(v20 + 144) = v19 & 1;
  *(_QWORD *)(v20 + 168) = v28;
  *(_QWORD *)(v20 + 176) = 0x7463656A627573;
  v29 = v9[2];
  *(_QWORD *)(v20 + 216) = *(_QWORD *)(v13 - 208);
  *(_QWORD *)(v20 + 184) = 0xE700000000000000;
  *(_QWORD *)(v20 + 192) = v29;
  v30 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(*(_QWORD *)(v13 - 176), 1, 1, v30);
  v31 = *(_QWORD *)(v13 - 200);
  *(_QWORD *)(v13 - 112) = *(_QWORD *)(v13 - 152);
  *(_QWORD *)(v13 - 104) = v31;
  v32 = *(_QWORD *)(v13 - 184);
  *(_QWORD *)(v13 - 96) = *(_QWORD *)(v13 - 216);
  *(_QWORD *)(v13 - 88) = v32;
  type metadata accessor for Future.Conduit();
}

void sub_18B5A230C()
{
  uint64_t v0;
  uint64_t v1;

  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(*(_QWORD *)(v1 - 168));
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 208)));
}

void Future.Conduit.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x657275747546;
  a1[1] = 0xE600000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Future<A, B>.Conduit<A1>()
{
  return 0x657275747546;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Future<A, B>.Conduit<A1>(uint64_t a1@<X8>)
{
  Future.Conduit.customMirror.getter(a1);
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Future<A, B>.Conduit<A1>(_QWORD *a1@<X8>)
{
  Future.Conduit.playgroundDescription.getter(a1);
}

uint64_t Empty.init(completeImmediately:outputType:failureType:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Empty.completeImmediately.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

BOOL static Empty.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t getEnumTagSinglePayload for Empty(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Empty(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18B5A2500 + 4 * byte_18B5F7065[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18B5A2534 + 4 * byte_18B5F7060[v4]))();
}

uint64_t sub_18B5A2534(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18B5A253C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18B5A2544);
  return result;
}

uint64_t sub_18B5A2550(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18B5A2558);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18B5A255C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18B5A2564(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t Publishers.SetFailureType.init(upstream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t Publishers.SetFailureType.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

void Publishers.SetFailureType.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEA968];
  strcpy((char *)a1, "SetFailureType");
  *(_BYTE *)(a1 + 15) = -18;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.SetFailureType<A, B>.Inner<A1, B1>()
{
  return 0x756C696146746553;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.SetFailureType<A, B>.Inner<A1, B1>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_QWORD *)(v2 + *(int *)(result + 76));
  return result;
}

uint64_t Publishers.SetFailureType.setFailureType<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78]();
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
}

uint64_t static Publishers.SetFailureType<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.SetFailureType<A, B>()
{
  return static Publishers.SetFailureType<>.== infix(_:_:)();
}

uint64_t getEnumTagSinglePayload for Publishers.SetFailureType(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18B5A2778 + 4 * byte_18B5F70E0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Publishers.SetFailureType(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.SetFailureType.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t assignWithCopy for Publishers.SetFailureType.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.SetFailureType.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.SetFailureType.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t Optional.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;

  v25 = a5;
  v26 = a2;
  v28 = a4;
  v27 = a1;
  v24 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t Optional.Publisher.output.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t type metadata accessor for Optional.Publisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Optional.Publisher.Inner);
}

uint64_t Optional.Publisher.Inner.customMirror.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t *v17;

  v1 = *v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v0;
  v9 = *(_QWORD *)(v1 + 80);
  getContiguousArrayStorageType<A>(for:)(v9, v9);
  v10 = *(_QWORD *)(v9 - 8);
  swift_allocObject();
  swift_retain();
  v11 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, (uint64_t)v0 + *(_QWORD *)(*v0 + 112), v9);
  _finalizeUninitializedArray<A>(_:)();
  v16 = v11;
  v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 1, 1, v13);
  v14 = type metadata accessor for Array();
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEDFE8], v2);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

void Optional.Publisher.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x6C616E6F6974704FLL;
  a1[1] = 0xE800000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance A?.Publisher.Inner<A1>()
{
  return 0x6C616E6F6974704FLL;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance A?.Publisher.Inner<A1>()
{
  return Optional.Publisher.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance A?.Publisher.Inner<A1>(_QWORD *a1@<X8>)
{
  Optional.Publisher.Inner.playgroundDescription.getter(a1);
}

uint64_t static Optional.Publisher<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  char v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  void (*v28)(char *, uint64_t);
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v33 = a4;
  v35 = a1;
  v36 = a2;
  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v32 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v34 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v11 = (char *)&v31 - v10;
  v12 = *(_QWORD *)(v7 - 8);
  v13 = MEMORY[0x1E0C80A78](v9);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v31 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v31 - v19;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v21((char *)&v31 - v19, v35, v7);
  v21(v18, v36, v7);
  v35 = TupleTypeMetadata2;
  v22 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  v21(v11, (uint64_t)v20, v7);
  v21(v22, (uint64_t)v18, v7);
  v36 = v5;
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v23(v11, 1, a3) != 1)
  {
    v21(v15, (uint64_t)v11, v7);
    if (v23(v22, 1, a3) != 1)
    {
      v27 = v32;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v32, v22, a3);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      v28 = *(void (**)(char *, uint64_t))(v36 + 8);
      v28(v27, a3);
      v29 = *(void (**)(char *, uint64_t))(v12 + 8);
      v29(v18, v7);
      v29(v20, v7);
      v28(v15, a3);
      v29(v11, v7);
      return v25 & 1;
    }
    v26 = *(void (**)(char *, uint64_t))(v12 + 8);
    v26(v18, v7);
    v26(v20, v7);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, a3);
    goto LABEL_6;
  }
  v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24(v18, v7);
  v24(v20, v7);
  if (v23(v22, 1, a3) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v35);
    v25 = 0;
    return v25 & 1;
  }
  v24(v11, v7);
  v25 = 1;
  return v25 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> A?.Publisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Optional.Publisher<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t Optional.Publisher<A>.contains(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v8 = *(_QWORD *)(a2 + 16);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = &v15[-v11];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(&v15[-v11], v4, v9);
  v16 = v8;
  v17 = a3;
  v18 = a1;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher<A>.contains(_:), (uint64_t)v15, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], v13, (uint64_t)&v19);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  *a4 = v19;
  return result;
}

uint64_t partial apply for closure #1 in Optional.Publisher<A>.contains(_:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t Optional.Publisher<A>.max()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t Optional.Publisher.allSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  return Optional.Publisher.allSatisfy(_:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.allSatisfy(_:), a4);
}

uint64_t partial apply for closure #1 in Optional.Publisher.allSatisfy(_:)@<X0>(_BYTE *a1@<X8>)
{
  return partial apply for closure #1 in Optional.Publisher.allSatisfy(_:)(a1);
}

{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 24))();
  *a1 = result & 1;
  return result;
}

uint64_t Optional.Publisher.collect()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v3, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v14 = static Array._allocateUninitialized(_:)();
  }
  else
  {
    v15 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v15(v13, v10, v5);
    getContiguousArrayStorageType<A>(for:)(v5, v5);
    swift_allocObject();
    v16 = static Array._adoptStorage(_:count:)();
    v15(v17, v13, v5);
    v14 = v16;
    _finalizeUninitializedArray<A>(_:)();
  }
  v21 = v14;
  type metadata accessor for Array();
  v18 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a2, &v21, v18);
}

uint64_t Optional.Publisher.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Optional.Publisher.compactMap<A>(_:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in Optional.Publisher.compactMap<A>(_:), (void (*)(uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t, _QWORD))_sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF, a5);
}

uint64_t _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *);
  uint64_t v29;

  v26 = a5;
  v27 = a2;
  v28 = a1;
  v29 = a6;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v10);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v29, 1, 1, a4);
  v25 = a3;
  v24 = v26;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  v28(v18, v12);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24, v12, v25);
  return result;
}

uint64_t Optional.Publisher.contains(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  return Optional.Publisher.allSatisfy(_:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.allSatisfy(_:), a4);
}

uint64_t Optional.Publisher.allSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, char *)@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v10 = *(_QWORD *)(a3 + 16);
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = &v17[-v13];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(&v17[-v13], v5, v11);
  v18 = v10;
  v19 = a1;
  v20 = a2;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(a4, (uint64_t)v17, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], v15, (uint64_t)&v21);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
  *a5 = v21;
  return result;
}

uint64_t Optional.Publisher.count()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v12[-v7];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(&v12[-v7], v2, v5);
  v13 = v4;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.count(), (uint64_t)v12, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], v9, (uint64_t)&v14);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  v11 = v15;
  *(_QWORD *)a2 = v14;
  *(_BYTE *)(a2 + 8) = v11;
  return result;
}

uint64_t Optional.Publisher.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  result = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v12 - v10;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a1)
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v11, 1, 1, v6);
    else
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v3, v7);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v11, v7);
  }
  return result;
}

uint64_t Optional.Publisher.drop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional.Publisher.drop(while:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.drop(while:), a4);
}

uint64_t Optional.Publisher.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional.Publisher.drop(while:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.first(where:), a4);
}

uint64_t Optional.Publisher.last()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t Optional.Publisher.last(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional.Publisher.drop(while:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.first(where:), a4);
}

uint64_t Optional.Publisher.ignoreOutput()@<X0>(_BYTE *a1@<X8>)
{
  return Empty.init(completeImmediately:)(1, a1);
}

uint64_t Optional.Publisher.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Optional.Publisher.compactMap<A>(_:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in Optional.Publisher.compactMap<A>(_:), (void (*)(uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t, _QWORD))_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF, a5);
}

uint64_t Optional.Publisher.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t, _QWORD)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t, _QWORD);
  uint64_t v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v22 = a5;
  v23 = a6;
  v8 = v7;
  v21 = a2;
  v24 = a7;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v21 - v14;
  v16 = type metadata accessor for Optional();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v8, v12);
  v26 = v11;
  v27 = a4;
  v28 = a1;
  v29 = v21;
  v23(v22, v25, v12, MEMORY[0x1E0DEDCE8], a4, MEMORY[0x1E0DEDD18]);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  Optional.publisher.getter(v16, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t Optional.Publisher.output(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Optional.Publisher.output(at:)(a1, a2, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.output(at:), a3);
}

uint64_t Optional.Publisher.output<A>(in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22[2];
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v5 = v4;
  v22[0] = a4;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v22 - v14;
  v23 = xmmword_18B5F5AF0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  result = dispatch thunk of RangeExpression.relative<A>(to:)();
  v17 = v24;
  if (v24 < 0 || (v18 = v25, v25 > 0x7FFFFFFFFFFFFFFDLL))
  {
    __break(1u);
  }
  else if (v24 == v25)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v15, 1, 1, v8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v22[0], v15, v9);
  }
  else
  {
    v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v5, v9);
    MEMORY[0x1E0C80A78](v19);
    v22[-6] = v8;
    v22[-5] = a2;
    v22[-4] = a3;
    v22[-3] = v17;
    v22[-2] = v18;
    _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.output<A>(in:), (uint64_t)&v22[-8], MEMORY[0x1E0DEDCE8], v8, v20, (uint64_t)v15);
    v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    v21(v13, v9);
    Optional.publisher.getter(v9, v22[0]);
    return ((uint64_t (*)(char *, uint64_t))v21)(v15, v9);
  }
  return result;
}

uint64_t Optional.Publisher.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Optional.Publisher.output(at:)(a1, a2, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.prefix(_:), a3);
}

uint64_t Optional.Publisher.output(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, char *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t result;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, uint64_t);
  _BYTE v20[16];

  v8 = *(_QWORD *)(a2 + 16);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = MEMORY[0x1E0C80A78](v11);
  v16 = &v20[-v15];
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v17 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v13, v4, v9);
    MEMORY[0x1E0C80A78](v17);
    *(_QWORD *)&v20[-16] = v8;
    *(_QWORD *)&v20[-8] = a1;
    _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(a3, (uint64_t)&v20[-32], MEMORY[0x1E0DEDCE8], v8, v18, (uint64_t)v16);
    v19 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
    v19(v13, v9);
    Optional.publisher.getter(v9, a4);
    return ((uint64_t (*)(_BYTE *, uint64_t))v19)(v16, v9);
  }
  return result;
}

uint64_t Optional.Publisher.prefix(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional.Publisher.drop(while:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.first(where:), a4);
}

uint64_t Optional.Publisher.reduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Optional.Publisher.reduce<A>(_:_:)(a1, a2, a3, a4, a5, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.reduce<A>(_:_:), a6);
}

uint64_t Optional.Publisher.removeDuplicates(by:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t Optional.Publisher.replaceError(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t Optional.Publisher.replaceEmpty(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v21;

  v4 = v3;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v21 - v11;
  v13 = *(_QWORD *)(v7 - 8);
  v14 = MEMORY[0x1E0C80A78](v10);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, v7);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v19(v18, v12, v7);
    v19(v16, v18, v7);
  }
  return Just.init(_:)((uint64_t)v16, v7, a3);
}

uint64_t Optional.Publisher.retry(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t Optional.Publisher.scan<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Optional.Publisher.reduce<A>(_:_:)(a1, a2, a3, a4, a5, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.reduce<A>(_:_:), a6);
}

uint64_t Optional.Publisher.reduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(char *, char *)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *);
  uint64_t v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v23 = a3;
  v24 = a6;
  v8 = v7;
  v22 = a1;
  v25 = a7;
  v11 = *(_QWORD *)(a4 + 16);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v22 - v14;
  v16 = type metadata accessor for Optional();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v22 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v8, v12);
  v27 = v11;
  v28 = a5;
  v29 = a2;
  v30 = v23;
  v31 = v22;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(v24, (uint64_t)v26, MEMORY[0x1E0DEDCE8], a5, v20, (uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  Optional.publisher.getter(v16, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t partial apply for closure #1 in Optional.Publisher.compactMap<A>(_:)()
{
  return partial apply for closure #1 in Optional.Publisher.compactMap<A>(_:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

void partial apply for closure #1 in Optional.Publisher.count()(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t partial apply for closure #1 in Optional.Publisher.drop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = (*(uint64_t (**)(void))(v2 + 24))();
  v7 = *(_QWORD *)(v5 - 8);
  if ((v6 & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, v5);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v8, 1, v5);
}

uint64_t partial apply for closure #1 in Optional.Publisher.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in Optional.Publisher.first(where:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = (*(uint64_t (**)(void))(v2 + 24))();
  v7 = *(_QWORD *)(v5 - 8);
  if ((v6 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, v5);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v8, 1, v5);
}

uint64_t partial apply for closure #1 in Optional.Publisher.output(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  if (v4)
  {
    v7 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, v5);
    v7 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v7, 1, v5);
}

uint64_t partial apply for closure #1 in Optional.Publisher.output<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 40);
  v6 = *(_QWORD *)(v4 - 8);
  if (v5)
  {
    v7 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, v4);
    v7 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v7, 1, v4);
}

uint64_t partial apply for closure #1 in Optional.Publisher.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  if (v4 < 1)
  {
    v7 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, v5);
    v7 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v7, 1, v5);
}

uint64_t partial apply for closure #1 in Optional.Publisher.reduce<A>(_:_:)(uint64_t a1)
{
  return partial apply for closure #1 in Optional.Publisher.reduce<A>(_:_:)(a1);
}

{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 32))(*(_QWORD *)(v1 + 48), a1);
}

void *assignWithCopy for Optional.Publisher(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *initializeWithTake for Optional.Publisher(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for Optional.Publisher(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Optional.Publisher(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for Optional.Publisher(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_18B5A4A54()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18B5A4A5C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool)@<X0>(uint64_t (*a1)(void)@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result & 1;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)@<X0>(uint64_t (*a1)(void)@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = a1();
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t Publisher.contains(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.ContainsWhere, a5);
}

uint64_t Publishers.ContainsWhere.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.ContainsWhere, a6);
}

uint64_t type metadata accessor for Publishers.ContainsWhere(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.ContainsWhere);
}

uint64_t Publisher.tryContains(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.TryContainsWhere, a5);
}

uint64_t Publishers.TryContainsWhere.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Publishers.TryContainsWhere, a6);
}

uint64_t type metadata accessor for Publishers.TryContainsWhere(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.TryContainsWhere);
}

uint64_t Publishers.ContainsWhere.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

void Publishers.ContainsWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Publishers.ContainsWhere.receive<A>(subscriber:)(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD *))type metadata accessor for Publishers.ContainsWhere.Inner);
}

void type metadata accessor for Publishers.ContainsWhere.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.ContainsWhere.Inner.description.getter()
{
  return 0x736E6961746E6F43;
}

_QWORD *Publishers.ContainsWhere.Inner.receive(newValue:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;
  int v3;
  BOOL v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];

  v1 = v0;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(v0 + 24))(v9);
  if (LOBYTE(v9[0]) == 1)
  {
    v3 = *(unsigned __int8 *)(v0 + 17);
    if (v3 == 2)
    {
      __break(1u);
    }
    else
    {
      v4 = (v3 & 1) == 0;
      swift_beginAccess();
      *(_BYTE *)(v1 + 16) = v4;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      type metadata accessor for PartialCompletion(0, MEMORY[0x1E0DEE9C0] + 8, AssociatedTypeWitness, AssociatedConformanceWitness);
      return (_QWORD *)swift_storeEnumTagMultiPayload();
    }
  }
  else
  {
    v7 = swift_getAssociatedTypeWitness();
    v8 = swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion(0, MEMORY[0x1E0DEE9C0] + 8, v7, v8);
    return (_QWORD *)swift_storeEnumTagMultiPayload();
  }
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.ContainsWhere<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Publishers.ContainsWhere.receive<A>(subscriber:)(a1, a4, a2, a3);
}

void Publishers.TryContainsWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Publishers.ContainsWhere.receive<A>(subscriber:)(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD *))type metadata accessor for Publishers.TryContainsWhere.Inner);
}

void Publishers.ContainsWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD *))
{
  uint64_t v5;
  _QWORD v6[4];

  v5 = *(_QWORD *)(a2 + 24);
  v6[0] = *(_QWORD *)(a2 + 16);
  v6[1] = a3;
  v6[2] = v5;
  v6[3] = a4;
  a5(0, v6);
  JUMPOUT(0x18B5A4DA8);
}

unint64_t Publishers.TryContainsWhere.Inner.description.getter()
{
  return 0xD000000000000010;
}

uint64_t Publishers.TryContainsWhere.Inner.receive(newValue:)()
{
  uint64_t v0;
  uint64_t result;
  _QWORD v2[4];

  (*(void (**)(_QWORD *__return_ptr))(v0 + 24))(v2);
  if (LOBYTE(v2[0]) != 1)
    return 0;
  swift_beginAccess();
  result = 0;
  *(_BYTE *)(v0 + 16) = 1;
  return result;
}

uint64_t vtable thunk for ReduceProducer.receive(newValue:) dispatching to Publishers.TryContainsWhere.Inner.receive(newValue:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = Publishers.TryContainsWhere.Inner.receive(newValue:)();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3;
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryContainsWhere<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Publishers.TryContainsWhere.receive<A>(subscriber:)(a1, a4, a2, a3);
}

void type metadata accessor for Publishers.TryContainsWhere.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t getEnumTagSinglePayload for Publishers.ContainsWhere(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B5A4FBC + 4 * byte_18B5F73A0[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.ContainsWhere(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B5A5134()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B5A51ACLL);
}

void sub_18B5A513C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B5A5144);
  JUMPOUT(0x18B5A51ACLL);
}

void sub_18B5A5184()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5A51ACLL);
}

void sub_18B5A518C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5A51ACLL);
}

uint64_t sub_18B5A5194(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B5A51ACLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B5A51A8);
    JUMPOUT(0x18B5A51A0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_18B5A51C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of SubscriberTapMarker?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriberTapMarker?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for Publishers()
{
  return &type metadata for Publishers;
}

void (*protocol witness for _ObservableObjectProperty.objectWillChange.modify in conformance Published<A>(uint64_t **a1, uint64_t a2))(_QWORD *a1)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (uint64_t *)malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (uint64_t)Published.objectWillChange.modify(v4, a2, v5, v6);
  return protocol witness for _ObservableObjectProperty.objectWillChange.modify in conformance Published<A>;
}

void protocol witness for _ObservableObjectProperty.objectWillChange.modify in conformance Published<A>(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*Published.objectWillChange.modify(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v4;

  a1[1] = a2;
  a1[2] = v4;
  *a1 = Published.objectWillChange.getter(a2, a2, a3, a4);
  return Published.objectWillChange.modify;
}

uint64_t Published.objectWillChange.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  os_unfair_lock_s *v3;

  v2 = *(_QWORD *)(a1 + 8);
  if ((a2 & 1) == 0)
    return Published.objectWillChange.setter(*(os_unfair_lock_s **)a1, v2);
  v3 = (os_unfair_lock_s *)swift_retain();
  Published.objectWillChange.setter(v3, v2);
  return swift_release();
}

uint64_t key path setter for Published.objectWillChange : <A>Published<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  os_unfair_lock_s *v5;

  v4 = type metadata accessor for Published(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  v5 = (os_unfair_lock_s *)swift_retain();
  return Published.objectWillChange.setter(v5, v4);
}

void Published.wrappedValue.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Published.wrappedValue.setter()
{
  specialized Published.wrappedValue.setter();
}

void Published.wrappedValue.modify()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static Published.enableObservableInteraction.getter()
{
  if (one-time initialization token for observableObservableObjectAvailable != -1)
    swift_once();
  return static CombineFeatures.observableObservableObjectAvailable;
}

uint64_t applyAcess #1 <A><A1><A2>(_:) in static Published.access<A>(_:keyPath:storage:)()
{
  type metadata accessor for KeyPath();
  swift_dynamicCastClassUnconditional();
  return ObservableObjectPublisher.access<A, B>(_:keyPath:)();
}

uint64_t applyMutation #1 <A><A1><A2>(_:) in static Published.withMutation<A>(of:keyPath:storage:apply:)()
{
  type metadata accessor for KeyPath();
  swift_dynamicCastClassUnconditional();
  return ObservableObjectPublisher.withMutation<A, B>(of:keyPath:apply:)();
}

uint64_t closure #1 in static Published.subscript.setter(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  void (*v18)(_BYTE *, _QWORD);
  uint64_t v19;
  _BYTE v20[32];
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DED210] + *a2 + 8) + 16);
  v7 = type metadata accessor for Published.Storage(0, v6, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = &v20[-v13];
  MEMORY[0x1E0C80A78](v12);
  v16 = &v20[-v15];
  v22 = a1;
  swift_unknownObjectRetain();
  swift_getAtKeyPath();
  swift_unknownObjectRelease();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v14, v16, v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_retain();
    protocol witness for Subject.send(_:) in conformance PublishedSubject<A>(a3);
    return swift_release_n();
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v11, a3, v6);
    swift_storeEnumTagMultiPayload();
    v21 = a1;
    swift_unknownObjectRetain();
    v18 = (void (*)(_BYTE *, _QWORD))swift_modifyAtReferenceWritableKeyPath();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 40))(v19, v11, v7);
    v18(v20, 0);
    swift_unknownObjectRelease();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v14, v7);
  }
}

void specialized Published.wrappedValue.setter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static Published.access<A>(_:keyPath:storage:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6[5];

  v1 = result;
  if (one-time initialization token for observableObservableObjectAvailable != -1)
    result = swift_once();
  if (static CombineFeatures.observableObservableObjectAvailable == 1)
  {
    swift_unknownObjectRetain();
    swift_getObjectType();
    if (dynamic_cast_existential_2_conditional(v1))
    {
      v3 = v2;
      ObjectType = swift_getObjectType();
      v5 = *(void (**)(uint64_t, uint64_t))(v3 + 24);
      v6[3] = swift_getAssociatedTypeWitness();
      v6[4] = swift_getAssociatedConformanceWitness();
      __swift_allocate_boxed_opaque_existential_1(v6);
      v5(ObjectType, v3);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publisher);
      type metadata accessor for ObservableObjectPublisher();
      if ((swift_dynamicCast() & 1) != 0)
      {
        applyAcess #1 <A><A1><A2>(_:) in static Published.access<A>(_:keyPath:storage:)();
        swift_unknownObjectRelease();
        return swift_release();
      }
      else
      {
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t specialized static Published.withMutation<A>(of:keyPath:storage:apply:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v10[5];

  v4 = a1;
  if (one-time initialization token for observableObservableObjectAvailable != -1)
    a1 = swift_once();
  if (static CombineFeatures.observableObservableObjectAvailable == 1)
  {
    swift_unknownObjectRetain();
    swift_getObjectType();
    if (dynamic_cast_existential_2_conditional(v4))
    {
      v6 = v5;
      ObjectType = swift_getObjectType();
      v8 = *(void (**)(uint64_t, uint64_t))(v6 + 24);
      v10[3] = swift_getAssociatedTypeWitness();
      v10[4] = swift_getAssociatedConformanceWitness();
      __swift_allocate_boxed_opaque_existential_1(v10);
      v8(ObjectType, v6);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publisher);
      type metadata accessor for ObservableObjectPublisher();
      if ((swift_dynamicCast() & 1) != 0)
      {
        applyMutation #1 <A><A1><A2>(_:) in static Published.withMutation<A>(of:keyPath:storage:apply:)();
        swift_unknownObjectRelease();
        return swift_release();
      }
    }
    a1 = swift_unknownObjectRelease();
  }
  return a3(a1);
}

uint64_t specialized static Published.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static Published.withMutation<A>(of:keyPath:storage:apply:)(a2, a3, (uint64_t (*)(uint64_t))partial apply for closure #1 in static Published.subscript.setter);
}

uint64_t sub_18B5A5C08@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = type metadata accessor for Published(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  result = Published.objectWillChange.getter(v5, v6, v7, v8);
  *a4 = result;
  return result;
}

uint64_t sub_18B5A5C44()
{
  return 8;
}

_QWORD *sub_18B5A5C50(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_18B5A5C5C()
{
  Published.wrappedValue.getter();
}

void sub_18B5A5C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Published(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  specialized Published.wrappedValue.setter();
}

uint64_t sub_18B5A5C98()
{
  return 8;
}

_QWORD *assignWithCopy for Published(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v7) = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

_QWORD *initializeWithTake for Published(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_QWORD *assignWithTake for Published(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

_QWORD *assignWithCopy for PublishedSubscriber(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_weakCopyAssign();
  return a1;
}

_QWORD *assignWithTake for PublishedSubscriber(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_weakTakeAssign();
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for Published(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 != 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
      return v3;
    }
    *a1 = *a2;
    *((_BYTE *)a1 + v5) = 1;
  }
  swift_retain();
  return v3;
}

_QWORD *assignWithCopy for Published.Storage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v7) = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

_QWORD *initializeWithTake for Published.Storage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

uint64_t getEnumTagSinglePayload for Published.Storage(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18B5A652C + 4 * byte_18B5F7519[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for Published.Storage(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for Published.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 8uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18B5A6768 + 4 * byte_18B5F7527[v3]))();
}

void destructiveInjectEnumTag for Published.Storage(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 8uLL)
    v4 = 8;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t partial apply for closure #1 in static Published.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static Published.subscript.setter(*(_QWORD *)(v4 + 16), *(_QWORD **)(v4 + 24), *(_QWORD *)(v4 + 32), a4);
}

uint64_t dynamic_cast_existential_2_conditional(uint64_t a1)
{
  uint64_t result;

  result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2())
      return a1;
    else
      return 0;
  }
  return result;
}

void Publisher<>.makeConnectable()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v2, a1);
  Publishers.MakeConnectable.init(upstream:)((uint64_t)v6, a1, a2);
}

void Publishers.MakeConnectable.init(upstream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for PassthroughSubject(0, AssociatedTypeWitness, v6, AssociatedConformanceWitness);
  v9 = PassthroughSubject.__allocating_init()();
  v10 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for PassthroughSubject<A, B>, v8);
  Publisher.multicast<A>(subject:)(v9, a2, v8, a3, v10);
}

uint64_t sub_18B5A6A58(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  swift_release();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v3, v2);
  *v1 = a1;
  return result;
}

void Publishers.MakeConnectable.receive<A>(subscriber:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = type metadata accessor for PassthroughSubject(255, AssociatedTypeWitness, v1, AssociatedConformanceWitness);
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for PassthroughSubject<A, B>, v3);
  type metadata accessor for Publishers.Multicast();
}

uint64_t sub_18B5A6B68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.Multicast<A, B>, a1);
  return Publisher.subscribe<A>(_:)(v3, a1, v2, v5, v1);
}

uint64_t Publishers.MakeConnectable.connect()@<X0>(uint64_t *a1@<X8>)
{
  return Publishers.Multicast.connect()(a1);
}

uint64_t instantiation function for generic protocol witness table for Publishers.MakeConnectable<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.MakeConnectable<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MakeConnectable<A>()
{
  Publishers.MakeConnectable.receive<A>(subscriber:)();
}

uint64_t dispatch thunk of ConnectablePublisher.connect()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata accessor for Publishers.MakeConnectable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.MakeConnectable);
}

uint64_t Publishers.Collect.init(upstream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t Publishers.CollectByCount.init(upstream:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  result = type metadata accessor for Publishers.CollectByCount(0, a3, a4, v9);
  *(_QWORD *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t Publishers.CollectByTime.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.CollectByTime.strategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v3 + *(int *)(a1 + 52);
  v6 = type metadata accessor for Publishers.TimeGroupingStrategy(0, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, v5, v6);
}

uint64_t Publishers.CollectByTime.options.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t **Publishers.CollectByTime.Inner.__allocating_init(downstream:strategy:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return Publishers.CollectByTime.Inner.init(downstream:strategy:options:)(a1, a2, a3);
}

void Publishers.CollectByTime.Inner.customMirror.getter(uint64_t a1@<X8>)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *boxed_opaque_existential_1;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;

  v26 = a1;
  v2 = *v1;
  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v2[22]));
  v27 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18B5F76B0;
  *(_QWORD *)(v9 + 32) = 0x657274736E776F64;
  *(_QWORD *)(v9 + 40) = 0xEA00000000006D61;
  v10 = (char *)v1 + (*v1)[16];
  v11 = v2[12];
  *(_QWORD *)(v9 + 72) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 48));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(boxed_opaque_existential_1, v10, v11);
  *(_QWORD *)(v9 + 80) = 0x7967657461727473;
  *(_QWORD *)(v9 + 88) = 0xE800000000000000;
  v13 = (char *)v1 + (*v1)[17];
  v15 = type metadata accessor for Publishers.TimeGroupingStrategy(0, v2[11], v2[14], v14);
  *(_QWORD *)(v9 + 120) = v15;
  v16 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v16, v13, v15);
  *(_QWORD *)(v9 + 128) = 0x736E6F6974706FLL;
  *(_QWORD *)(v9 + 136) = 0xE700000000000000;
  v17 = (char *)v1 + (*v1)[18];
  swift_getAssociatedTypeWitness();
  v18 = type metadata accessor for Optional();
  *(_QWORD *)(v9 + 168) = v18;
  v19 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 144));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v19, v17, v18);
  *(_QWORD *)(v9 + 176) = 0x737574617473;
  *(_QWORD *)(v9 + 184) = 0xE600000000000000;
  v20 = (uint64_t)v1 + (*v1)[20];
  swift_beginAccess();
  *(_QWORD *)(v9 + 216) = &type metadata for SubscriptionStatus;
  v21 = swift_allocObject();
  *(_QWORD *)(v9 + 192) = v21;
  outlined init with copy of SubscriptionStatus(v20, v21 + 16);
  *(_QWORD *)(v9 + 224) = 0x656C756465686373;
  *(_QWORD *)(v9 + 232) = 0xE900000000000064;
  v22 = (uint64_t)v1 + (*v1)[23];
  swift_beginAccess();
  *(_QWORD *)(v9 + 264) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cancellable?);
  v23 = swift_allocObject();
  *(_QWORD *)(v9 + 240) = v23;
  outlined init with copy of Any?(v22, v23 + 16, &demangling cache variable for type metadata for Cancellable?);
  *(_QWORD *)(v9 + 272) = 0x646E616D6564;
  *(_QWORD *)(v9 + 280) = 0xE600000000000000;
  v24 = *(uint64_t *)((char *)v1 + (*v1)[24]);
  *(_QWORD *)(v9 + 312) = &type metadata for Subscribers.Demand;
  *(_QWORD *)(v9 + 288) = v24;
  v25 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v8, 1, 1, v25);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + (*v1)[22]));
}

void Publishers.CollectByTime.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEA968];
  strcpy((char *)a1, "CollectByTime");
  *(_WORD *)(a1 + 14) = -4864;
}

void Publishers.CollectByTime.Inner.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _BYTE v10[40];
  char v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v2));
  v3 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v3, (uint64_t)v10);
  if (v11)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v10);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v2));
  }
  else
  {
    outlined init with take of Subscription((__int128 *)v10, (uint64_t)v12);
    swift_getAssociatedTypeWitness();
    v4 = static Array._allocateUninitialized(_:)();
    v5 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152));
    swift_beginAccess();
    *v5 = v4;
    swift_bridgeObjectRelease();
    *(_QWORD *)v10 = 1;
    memset(&v10[8], 0, 32);
    v11 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v10, v3);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v2));
    v7 = v13;
    v6 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
    v8 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 184);
    swift_beginAccess();
    if (*(_QWORD *)(v8 + 24))
    {
      outlined init with copy of Subscription(v8, (uint64_t)v10);
      v9 = *(_OWORD *)&v10[24];
      __swift_project_boxed_opaque_existential_1(v10, *(uint64_t *)&v10[24]);
      (*(void (**)(_QWORD, _QWORD))(*((_QWORD *)&v9 + 1) + 8))(v9, *((_QWORD *)&v9 + 1));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    }
    memset(v10, 0, sizeof(v10));
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v10, v8, &demangling cache variable for type metadata for Cancellable?);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
}

uint64_t closure #1 in Publishers.CollectByTime.Inner.receive(_:)(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 120);
  v12 = a2;
  result = (*(uint64_t (**)(uint64_t *, _QWORD))(v7 + 48))(&v12, *(_QWORD *)(v6 + 96));
  if (result != 0x8000000000000000)
  {
    v11 = result;
    if ((result & 0x8000000000000000) == 0)
    {
      if (!result)
        return result;
      v9 = a3[3];
      v10 = a3[4];
      __swift_project_boxed_opaque_existential_1(a3, v9);
      result = v11 * a4;
      if ((unsigned __int128)(v11 * (__int128)a4) >> 64 != (v11 * a4) >> 63)
        goto LABEL_6;
      if ((result & 0x8000000000000000) == 0)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(result, v9, v10);
      __break(1u);
    }
    __break(1u);
    return result;
  }
  v9 = a3[3];
  v10 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v9);
LABEL_6:
  result = 0x8000000000000000;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(result, v9, v10);
}

uint64_t closure #3 in Publishers.CollectByTime.Inner.receive(completion:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v13 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v13 - v9, a2, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(v3 + 120) + 56))(v10, *(_QWORD *)(v3 + 96));
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.CollectByTime<A, B>.Inner<A1>()
{
  return 0x427463656C6C6F43;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.CollectByTime<A, B>.Inner<A1>(uint64_t a1@<X8>)
{
  Publishers.CollectByTime.Inner.customMirror.getter(a1);
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.CollectByTime<A, B>.Inner<A1>(uint64_t a1@<X8>)
{
  Publishers.CollectByTime.Inner.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.CollectByTime<A, B>.Inner<A1>()
{
  Publishers.CollectByTime.Inner.cancel()();
}

uint64_t Publishers.Collect.Inner.description.getter()
{
  return 0x7463656C6C6F43;
}

uint64_t Publishers.Collect.Inner.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(_QWORD *)(v0 + 16))
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v8 = swift_bridgeObjectRetain();
    v9 = MEMORY[0x18D77A390](v8, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    v13 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_18B5F41E0;
    *(_QWORD *)(v10 + 32) = 0x746E756F63;
    *(_QWORD *)(v10 + 40) = 0xE500000000000000;
    *(_QWORD *)(v10 + 72) = MEMORY[0x1E0DEB418];
    *(_QWORD *)(v10 + 48) = v9;
  }
  else
  {
    v13 = v0;
  }
  v11 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Publishers.CollectByCount.count.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t *Publishers.CollectByCount.Inner.__allocating_init(downstream:count:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return Publishers.CollectByCount.Inner.init(downstream:count:)(a1, a2);
}

void Publishers.CollectByCount.Inner.customMirror.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v1 = *v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(_QWORD *)(v1 + 160)));
  v20 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18B5F5C60;
  *(_QWORD *)(v8 + 32) = 0x657274736E776F64;
  *(_QWORD *)(v8 + 40) = 0xEA00000000006D61;
  v9 = (uint64_t)v0 + *(_QWORD *)(*v0 + 112);
  v10 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v8 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(boxed_opaque_existential_1, v9, v10);
  *(_QWORD *)(v8 + 80) = 0xD000000000000014;
  *(_QWORD *)(v8 + 88) = 0x800000018B5FE5C0;
  v12 = (uint64_t)v0 + *(_QWORD *)(*v0 + 136);
  swift_beginAccess();
  *(_QWORD *)(v8 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  v13 = swift_allocObject();
  *(_QWORD *)(v8 + 96) = v13;
  outlined init with copy of Any?(v12, v13 + 16, &demangling cache variable for type metadata for Subscription?);
  *(_QWORD *)(v8 + 128) = 0x726566667562;
  *(_QWORD *)(v8 + 136) = 0xE600000000000000;
  v14 = (uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 128));
  swift_beginAccess();
  v15 = *v14;
  swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for Array();
  *(_QWORD *)(v8 + 144) = v15;
  *(_QWORD *)(v8 + 168) = v16;
  *(_QWORD *)(v8 + 176) = 0x746E756F63;
  *(_QWORD *)(v8 + 184) = 0xE500000000000000;
  v17 = *(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 120));
  *(_QWORD *)(v8 + 216) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v8 + 192) = v17;
  v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v7, 1, 1, v18);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  swift_bridgeObjectRetain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(_QWORD *)(*v0 + 160)));
}

void Publishers.CollectByCount.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEA968];
  strcpy((char *)a1, "CollectByCount");
  *(_BYTE *)(a1 + 15) = -18;
}

uint64_t *Publishers.CollectByCount.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 160)), -1, -1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112));
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v0 + *(_QWORD *)(*v0 + 136), &demangling cache variable for type metadata for Subscription?);
  return v0;
}

uint64_t Publishers.CollectByCount.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.CollectByCount.Inner.deinit);
}

void Publishers.CollectByCount.Inner.cancel()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v1 = *(os_unfair_lock_s **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160));
  os_unfair_lock_lock(v1);
  v2 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_beginAccess();
  outlined init with copy of Any?(v2, (uint64_t)&v7, &demangling cache variable for type metadata for Subscription?);
  if (*((_QWORD *)&v8 + 1))
  {
    outlined init with take of Subscription(&v7, (uint64_t)v10);
    swift_getAssociatedTypeWitness();
    v3 = static Array._allocateUninitialized(_:)();
    v4 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
    swift_beginAccess();
    *v4 = v3;
    swift_bridgeObjectRelease();
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)&v7, v2, &demangling cache variable for type metadata for Subscription?);
    swift_endAccess();
    *(_BYTE *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144)) = 1;
    os_unfair_lock_unlock(v1);
    v5 = v11;
    v6 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    outlined destroy of CustomStringConvertible?((uint64_t)&v7, &demangling cache variable for type metadata for Subscription?);
    os_unfair_lock_unlock(v1);
  }
}

unint64_t Publishers.CollectByCount.Inner.receive(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  _QWORD v18[5];

  v2 = v1;
  v4 = (_QWORD *)*v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)v18 - v7;
  v9 = *(os_unfair_lock_s **)((char *)v2 + v4[20]);
  os_unfair_lock_lock(v9);
  v10 = (uint64_t)v2 + *(_QWORD *)(*v2 + 136);
  swift_beginAccess();
  outlined init with copy of Any?(v10, (uint64_t)v18, &demangling cache variable for type metadata for Subscription?);
  v11 = v18[3];
  outlined destroy of CustomStringConvertible?((uint64_t)v18, &demangling cache variable for type metadata for Subscription?);
  if (!v11)
    goto LABEL_7;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, AssociatedTypeWitness);
  v12 = (_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 128));
  swift_beginAccess();
  type metadata accessor for Array();
  Array.append(_:)();
  swift_endAccess();
  v13 = swift_bridgeObjectRetain();
  v14 = MEMORY[0x18D77A390](v13, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v14 == *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 120)))
  {
    v15 = *v12;
    swift_bridgeObjectRetain();
    *v12 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v9);
    v18[0] = v15;
    v16 = (*(uint64_t (**)(_QWORD *, _QWORD))(v4[13] + 48))(v18, v4[11]);
    swift_bridgeObjectRelease();
    result = 0x8000000000000000;
    if (v16 != 0x8000000000000000)
    {
      if (v16 < 0)
      {
LABEL_11:
        __break(1u);
        return result;
      }
      result = v16 * v14;
      if ((unsigned __int128)(v16 * (__int128)v14) >> 64 != (v16 * v14) >> 63)
        return 0x8000000000000000;
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_7:
    os_unfair_lock_unlock(v9);
    return 0;
  }
  return result;
}

uint64_t Publishers.CollectByCount.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  char *v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  os_unfair_lock_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35[3];
  _OWORD v36[2];
  uint64_t v37;

  v2 = v1;
  v34 = a1;
  v3 = *(_QWORD **)v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v31 = (char *)&v30 - v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v10 = *(char **)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v33 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v30 - v13;
  v32 = *(os_unfair_lock_t *)(v1 + v3[20]);
  os_unfair_lock_lock(v32);
  v37 = 0;
  memset(v36, 0, sizeof(v36));
  v15 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 136);
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v36, v15, &demangling cache variable for type metadata for Subscription?);
  swift_endAccess();
  *(_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 144)) = 1;
  v16 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v10 + 2);
  v17 = v34;
  v34 = v9;
  v16(v14, v17, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    v31 = v10;
    v18 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 128));
    swift_beginAccess();
    v35[0] = *v18;
    swift_getAssociatedTypeWitness();
    v19 = type metadata accessor for Array();
    MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v19);
    v20 = Collection.isEmpty.getter();
    v21 = v33;
    v22 = v34;
    v23 = v32;
    if ((v20 & 1) != 0)
    {
      os_unfair_lock_unlock(v32);
    }
    else
    {
      v29 = *v18;
      swift_bridgeObjectRetain();
      *v18 = static Array._allocateUninitialized(_:)();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v23);
      v35[0] = v29;
      (*(void (**)(uint64_t *, _QWORD))(v3[13] + 48))(v35, v3[11]);
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v21, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, _QWORD))(v3[13] + 56))(v21, v3[11]);
    return (*((uint64_t (**)(char *, uint64_t))v31 + 1))(v21, v22);
  }
  else
  {
    v24 = v31;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v31, v14, AssociatedTypeWitness);
    swift_getAssociatedTypeWitness();
    v25 = static Array._allocateUninitialized(_:)();
    v26 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 128));
    swift_beginAccess();
    *v26 = v25;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v32);
    v27 = v33;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v33, v24, AssociatedTypeWitness);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v27, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, _QWORD))(v3[13] + 56))(v27, v3[11]);
    (*((void (**)(char *, uint64_t))v10 + 1))(v27, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v24, AssociatedTypeWitness);
  }
}

unint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.CollectByCount<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.CollectByCount.Inner.receive(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.CollectByCount<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.CollectByCount.Inner.receive(completion:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.CollectByCount<A>.Inner<A1>()
{
  return 0x427463656C6C6F43;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.CollectByCount<A>.Inner<A1>()
{
  Publishers.CollectByCount.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.CollectByCount<A>.Inner<A1>(uint64_t a1@<X8>)
{
  Publishers.CollectByCount.Inner.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.CollectByCount<A>.Inner<A1>()
{
  Publishers.CollectByCount.Inner.cancel()();
}

uint64_t *Publishers.CollectByTrigger.Inner.__allocating_init(downstream:trigger:sendOnFailure:)(uint64_t a1, uint64_t a2, char a3)
{
  swift_allocObject();
  return Publishers.CollectByTrigger.Inner.init(downstream:trigger:sendOnFailure:)(a1, a2, a3);
}

uint64_t *Publishers.CollectByTrigger.Inner.init(downstream:trigger:sendOnFailure:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;

  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 152);
  v9 = (_DWORD *)swift_slowAlloc();
  *v9 = 0;
  *(uint64_t *)((char *)v3 + v8) = (uint64_t)v9;
  v10 = *(_QWORD *)(*v3 + 160);
  v11 = (_QWORD *)swift_slowAlloc();
  *v11 = 0;
  *(uint64_t *)((char *)v3 + v10) = (uint64_t)v11;
  v12 = *(_QWORD *)(*v3 + 168);
  swift_getAssociatedTypeWitness();
  *(uint64_t *)((char *)v3 + v12) = static Array._allocateUninitialized(_:)();
  v13 = (uint64_t)v3 + *(_QWORD *)(*v3 + 176);
  *(_QWORD *)(v13 + 32) = 0;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_BYTE *)(v13 + 40) = 2;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 184)) = 0;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 192)) = 0;
  v14 = (uint64_t)v3 + *(_QWORD *)(*v3 + 200);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v14, 1, 1, v18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 96) - 8) + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 128), a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 88) - 8) + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 136), a2);
  *((_BYTE *)v3 + *(_QWORD *)(*v3 + 144)) = a3;
  return v3;
}

uint64_t *Publishers.CollectByTrigger.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 152)), -1, -1);
  MEMORY[0x18D77ADB0](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 160)), -1, -1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 128));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 136));
  swift_bridgeObjectRelease();
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(_QWORD *)(*v0 + 176));
  swift_release();
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 200);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Subscribers.Completion(255, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
  return v0;
}

uint64_t Publishers.CollectByTrigger.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.CollectByTrigger.Inner.deinit);
}

void Publishers.CollectByTrigger.Inner.request(_:)(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_unfair_lock_t v33;
  char *v34;
  uint64_t v35[3];

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for Subscribers.Completion(255, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v30 - v13;
  v15 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v12);
  v18 = (char *)&v30 - v17;
  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_4:
  v31 = v16;
  v34 = v18;
  v33 = *(os_unfair_lock_t *)((char *)v1 + v3[19]);
  os_unfair_lock_lock(v33);
  v19 = *v1;
  v20 = *(_QWORD *)(*v1 + 192);
  v21 = *(uint64_t *)((char *)v1 + v20);
  if (v21 == 0x8000000000000000)
    goto LABEL_12;
  v22 = 0x8000000000000000;
  if (a1 == 0x8000000000000000)
    goto LABEL_11;
  if ((v21 | a1) < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v22 = v21 + a1;
  if (!__OFADD__(v21, a1))
  {
    if ((v22 & 0x8000000000000000) == 0)
      goto LABEL_11;
LABEL_19:
    __break(1u);
    return;
  }
  v22 = 0x8000000000000000;
LABEL_11:
  *(uint64_t *)((char *)v1 + v20) = v22;
  v19 = *v1;
LABEL_12:
  v23 = (uint64_t)v1 + *(_QWORD *)(v19 + 200);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, v23, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    os_unfair_lock_unlock(v33);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v34, v14, v8);
    v24 = (uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 168));
    swift_beginAccess();
    v25 = *v24;
    swift_getAssociatedTypeWitness();
    swift_bridgeObjectRetain();
    *v24 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    v26 = v31;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v31, 1, 1, v8);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v23, v26, v9);
    swift_endAccess();
    os_unfair_lock_unlock(v33);
    os_unfair_recursive_lock_lock_with_options();
    v35[0] = v25;
    v27 = v3[15];
    v28 = v3[12];
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v35, v28, v27);
    swift_bridgeObjectRelease();
    v29 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 56))(v34, v28, v27);
    os_unfair_recursive_lock_unlock();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v8);
  }
}

void Publishers.CollectByTrigger.Inner.cancel()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9[2];
  char v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v1 = *(os_unfair_lock_s **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  os_unfair_lock_lock(v1);
  v2 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)v9);
  if (v10)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v9);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription(v9, (uint64_t)v11);
    v3 = *(_QWORD *)(*(_QWORD *)v0 + 184);
    v4 = *(_QWORD *)(v0 + v3);
    swift_getAssociatedTypeWitness();
    swift_retain();
    v5 = static Array._allocateUninitialized(_:)();
    v6 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 168));
    swift_beginAccess();
    *v6 = v5;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + v3) = 0;
    swift_release();
    os_unfair_lock_unlock(v1);
    v7 = v12;
    v8 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
    if (v4)
    {
      swift_retain();
      Subscribers.Sink.cancel()();
      swift_release_n();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
}

uint64_t Publishers.CollectByTrigger.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  char v28;

  v2 = v1;
  v4 = *(_QWORD **)v1;
  v5 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152));
  os_unfair_lock_lock(v5);
  v6 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)&v25);
  if (v28 == 2
    && (v7 = vorrq_s8(v26, v27),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)) | v25)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v25);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v25);
    v28 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v25, v6);
    swift_endAccess();
    v11 = v4[14];
    v12 = v4[11];
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v14 = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v16 = type metadata accessor for Subscribers.Sink(0, AssociatedTypeWitness, v14, AssociatedConformanceWitness);
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = v4[10];
    v17[3] = v12;
    v24 = v4[12];
    v17[4] = v24;
    v17[5] = v4[13];
    v17[6] = v11;
    v23 = v4[15];
    v17[7] = v23;
    swift_retain();
    v18 = Subscribers.Sink.__allocating_init(receiveCompletion:receiveValue:)((uint64_t)specialized closure #1 in Publisher.multicast<A>(subject:), (uint64_t)v17, (uint64_t)partial apply for implicit closure #2 in implicit closure #1 in Publishers.CollectByTrigger.Inner.receive(subscription:), v2);
    *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 184)) = v18;
    swift_retain();
    swift_release();
    v25 = v18;
    v19 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Subscribers.Sink<A, B>, v16);
    Publisher.subscribe<A>(_:)((uint64_t)&v25, v12, v16, v11, v19);
    os_unfair_lock_unlock(v5);
    v27.i64[0] = (uint64_t)v4;
    v27.i64[1] = (uint64_t)&protocol witness table for Publishers.CollectByTrigger<A, B>.Inner<A1>;
    v25 = v2;
    v20 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 40);
    swift_retain();
    v20(&v25, v24, v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
    v21 = a1[3];
    v22 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v21);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 24))(0x8000000000000000, v21, v22);
    return swift_release();
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v25);
    os_unfair_lock_unlock(v5);
    v9 = a1[3];
    v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v9);
  }
}

uint64_t Publishers.CollectByTrigger.Inner.receive(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  _BYTE v12[48];

  v3 = *v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = &v12[-v6 - 8];
  v8 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(v3 + 152));
  os_unfair_lock_lock(v8);
  v9 = (uint64_t)v1 + *(_QWORD *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v9, (uint64_t)v12);
  LODWORD(v9) = v12[40];
  outlined destroy of SubscriptionStatus((uint64_t)v12);
  if (!(_DWORD)v9)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, AssociatedTypeWitness);
    swift_beginAccess();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
  }
  os_unfair_lock_unlock(v8);
  return 0;
}

void Publishers.CollectByTrigger.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  unsigned __int8 v46;

  v2 = v1;
  v41 = a1;
  v3 = (_QWORD *)*v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for Subscribers.Completion(255, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = type metadata accessor for Optional();
  v37 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v36 = (char *)&v36 - v10;
  v39 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v9);
  v40 = (char *)&v36 - v11;
  v12 = v3[23];
  v13 = v3;
  if (*(uint64_t *)((char *)v1 + v12))
  {
    swift_retain();
    Subscribers.Sink.cancel()();
    swift_release();
    v13 = (_QWORD *)*v1;
  }
  v14 = *(os_unfair_lock_s **)((char *)v1 + v13[19]);
  os_unfair_lock_lock(v14);
  v15 = (uint64_t)v1 + *(_QWORD *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v15, (uint64_t)&v43);
  v16 = v46;
  outlined destroy of SubscriptionStatus((uint64_t)&v43);
  if (v16)
    goto LABEL_4;
  v43 = 1;
  v44 = 0u;
  v45 = 0u;
  v46 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v43, v15);
  swift_endAccess();
  *(uint64_t *)((char *)v2 + v12) = 0;
  swift_release();
  v17 = (uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 168));
  swift_beginAccess();
  v42[0] = *v17;
  swift_getAssociatedTypeWitness();
  v18 = type metadata accessor for Array();
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v18);
  if ((Collection.isEmpty.getter() & 1) != 0)
  {
    os_unfair_lock_unlock(v14);
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v3[15] + 56))(v41, v3[12], v3[15]);
LABEL_12:
    os_unfair_recursive_lock_unlock();
    return;
  }
  v19 = v39;
  v20 = v40;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
  v21(v40, v41, v7);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v20, 1, AssociatedTypeWitness);
  v23 = *v2;
  if (v22 == 1)
  {
    v24 = *(uint64_t *)((char *)v2 + *(_QWORD *)(v23 + 192));
    if (v24 == 0x8000000000000000)
    {
LABEL_11:
      v25 = *v17;
      swift_bridgeObjectRetain();
      *v17 = static Array._allocateUninitialized(_:)();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v14);
      os_unfair_recursive_lock_lock_with_options();
      v42[0] = v25;
      v26 = v3[15];
      v27 = v3[12];
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v42, v27, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 56))(v41, v27, v26);
      goto LABEL_12;
    }
    if ((v24 & 0x8000000000000000) == 0)
    {
      if (!v24)
      {
        v32 = v36;
        v21(v36, v41, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v32, 0, 1, v7);
        v33 = (uint64_t)v2 + *(_QWORD *)(*v2 + 200);
        swift_beginAccess();
        (*(void (**)(uint64_t, char *, uint64_t))(v37 + 40))(v33, v32, v38);
        swift_endAccess();
LABEL_4:
        os_unfair_lock_unlock(v14);
        return;
      }
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_25;
  }
  if (*((_BYTE *)v2 + *(_QWORD *)(v23 + 144)) == 1)
  {
    v28 = *(uint64_t *)((char *)v2 + *(_QWORD *)(v23 + 192));
    if (v28 != 0x8000000000000000)
    {
      if (v28 < 0)
      {
LABEL_25:
        __break(1u);
        return;
      }
      if (!v28)
      {
        v34 = v36;
        v21(v36, v41, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v34, 0, 1, v7);
        v35 = (uint64_t)v2 + *(_QWORD *)(*v2 + 200);
        swift_beginAccess();
        (*(void (**)(uint64_t, char *, uint64_t))(v37 + 40))(v35, v34, v38);
        swift_endAccess();
        os_unfair_lock_unlock(v14);
        goto LABEL_20;
      }
    }
    v29 = *v17;
    swift_bridgeObjectRetain();
    *v17 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v14);
    os_unfair_recursive_lock_lock_with_options();
    v42[0] = v29;
    v30 = v3[15];
    v31 = v3[12];
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v42, v31, v30);
    v19 = v39;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 56))(v41, v31, v30);
  }
  else
  {
    *v17 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v14);
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v3[15] + 56))(v41, v3[12], v3[15]);
  }
  os_unfair_recursive_lock_unlock();
LABEL_20:
  (*(void (**)(char *, uint64_t))(v19 + 8))(v40, v7);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>(_QWORD *a1)
{
  return Publishers.CollectByTrigger.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.CollectByTrigger.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.CollectByTrigger.Inner.receive(completion:)(a1);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>(uint64_t a1)
{
  Publishers.CollectByTrigger.Inner.request(_:)(a1);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>()
{
  return 0xD000000000000010;
}

void protocol witness for Cancellable.cancel() in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>()
{
  Publishers.CollectByTrigger.Inner.cancel()();
}

uint64_t static Publishers.Collect<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Collect<A>()
{
  return static Publishers.Collect<>.== infix(_:_:)();
}

BOOL static Publishers.CollectByCount<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  void (*v19)(char *, uint64_t);
  uint64_t v20;

  v6 = type metadata accessor for Publishers.CollectByCount(0, a3, a4, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v20 - v11;
  v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v14(v12, a1, v6);
  v14(v10, a2, v6);
  if ((v13 & 1) != 0)
  {
    v15 = *(_QWORD *)&v12[*(int *)(v6 + 36)];
    v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v12, v6);
    v17 = *(_QWORD *)&v10[*(int *)(v6 + 36)];
    v16(v10, v6);
    return v15 == v17;
  }
  else
  {
    v19 = *(void (**)(char *, uint64_t))(v7 + 8);
    v19(v10, v6);
    v19(v12, v6);
    return 0;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.CollectByCount<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Publishers.CollectByCount<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t type metadata completion function for Publishers.TimeGroupingStrategy()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  unint64_t v3;
  uint64_t v5;
  char v6;
  char *v7;
  uint64_t *v8;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v3 > 0x3F)
    {
      return AssociatedTypeWitness;
    }
    else
    {
      swift_getTupleTypeLayout2();
      v7 = &v6;
      swift_getTupleTypeLayout3();
      v8 = &v5;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.TimeGroupingStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = *(_QWORD *)(v9 + 64);
  v13 = (v11 & ~v10) + v12;
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v13)
    v14 = (v11 & ~v10) + v12;
  else
    v14 = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v15 = *(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80);
  if ((v15 & 0x1000F8) != 0 || v14 + 1 > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + (((v15 & 0xF8 | 7u) + 16) & ~(unint64_t)(v15 & 0xF8 | 7u)));
    swift_retain();
  }
  else
  {
    v18 = AssociatedTypeWitness;
    v23 = ~v10;
    v19 = *((unsigned __int8 *)a2 + v14);
    if (v19 >= 2)
    {
      if (v14 <= 3)
        v20 = v14;
      else
        v20 = 4;
      __asm { BR              X11 }
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v21 = ((unint64_t)a2 + v11) & v23;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v23, v21, v18);
    if (v19 == 1)
    {
      *(_QWORD *)((v12 + 7 + (((unint64_t)a1 + v11) & v23)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v12 + 7 + v21) & 0xFFFFFFFFFFFFF8);
      *((_BYTE *)a1 + v14) = 1;
    }
    else
    {
      *((_BYTE *)a1 + v14) = 0;
    }
  }
  return a1;
}

uint64_t assignWithCopy for Publishers.TimeGroupingStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v21 = ~v10;
    v11 = v7 + v10;
    v20 = *(_QWORD *)(v9 + 64);
    v12 = ((v7 + v10) & ~v10) + v20;
    if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v12)
      v13 = ((v7 + v10) & ~v10) + v20;
    else
      v13 = ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v14 = (v11 + a1) & ~v10;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v14, AssociatedTypeWitness);
    v15 = *(unsigned __int8 *)(a2 + v13);
    if (v15 >= 2)
    {
      if (v13 <= 3)
        v16 = v13;
      else
        v16 = 4;
      __asm { BR              X11 }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
    v17 = (v11 + a2) & v21;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v14, v17, AssociatedTypeWitness);
    if (v15 == 1)
    {
      *(_QWORD *)((v20 + 7 + v14) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v20 + 7 + v17) & 0xFFFFFFFFFFFFF8);
      v18 = 1;
    }
    else
    {
      v18 = 0;
    }
    *(_BYTE *)(a1 + v13) = v18;
  }
  return a1;
}

uint64_t initializeWithTake for Publishers.TimeGroupingStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;

  v5 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v20 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ~v9;
  v11 = v6 + v9;
  v12 = *(_QWORD *)(v8 + 64);
  v13 = ((v6 + v9) & ~v9) + v12;
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v13)
    v14 = v13;
  else
    v14 = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v15 = *(unsigned __int8 *)(a2 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X11 }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(a1, a2, v5);
  v17 = (v11 + a2) & v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))((v11 + a1) & v10, v17, AssociatedTypeWitness);
  if (v15 == 1)
  {
    *(_QWORD *)((v12 + 7 + ((v11 + a1) & v10)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v12 + 7 + v17) & 0xFFFFFFFFFFFFF8);
    v18 = 1;
  }
  else
  {
    v18 = 0;
  }
  *(_BYTE *)(a1 + v14) = v18;
  return a1;
}

uint64_t assignWithTake for Publishers.TimeGroupingStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v21 = ~v10;
    v11 = v7 + v10;
    v20 = *(_QWORD *)(v9 + 64);
    v12 = ((v7 + v10) & ~v10) + v20;
    if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v12)
      v13 = ((v7 + v10) & ~v10) + v20;
    else
      v13 = ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v14 = (v11 + a1) & ~v10;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v14, AssociatedTypeWitness);
    v15 = *(unsigned __int8 *)(a2 + v13);
    if (v15 >= 2)
    {
      if (v13 <= 3)
        v16 = v13;
      else
        v16 = 4;
      __asm { BR              X11 }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
    v17 = (v11 + a2) & v21;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v14, v17, AssociatedTypeWitness);
    if (v15 == 1)
    {
      *(_QWORD *)((v20 + 7 + v14) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v20 + 7 + v17) & 0xFFFFFFFFFFFFF8);
      v18 = 1;
    }
    else
    {
      v18 = 0;
    }
    *(_BYTE *)(a1 + v13) = v18;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.TimeGroupingStrategy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = ((v5 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 <= v7)
    v8 = ((v5 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v9 = v8 + 1;
  v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    v13 = ((a2 + ~(-1 << v10) - 254) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v13 < 2)
    {
LABEL_21:
      v15 = *(unsigned __int8 *)(a1 + v8);
      if (v15 >= 2)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_21;
LABEL_14:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v9)
  {
    if (v9 > 3)
      LODWORD(v9) = 4;
    __asm { BR              X11 }
  }
  return (v14 + 255);
}

void storeEnumTagSinglePayload for Publishers.TimeGroupingStrategy(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = ((v7 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > v9)
    v9 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v10 = v9 + 1;
  if (a3 < 0xFF)
  {
    v11 = 0u;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 + ~(-1 << (8 * v10)) - 254) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v12 = a2 - 255;
  if (v10 < 4)
  {
    if ((_DWORD)v9 != -1)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v9 + 1);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for Publishers.TimeGroupingStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = ((v3 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > v5)
    v5 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  result = *(unsigned __int8 *)(a1 + v5);
  if (result >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t type metadata completion function for Publishers.CollectByTime(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  result = swift_checkMetadataState();
  if (v4 <= 0x3F)
  {
    result = type metadata accessor for Publishers.TimeGroupingStrategy(319, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), v3);
    if (v5 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      result = type metadata accessor for Optional();
      if (v6 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.CollectByTime(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30;
  const void *v31;
  size_t __n;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t AssociatedTypeWitness;
  uint64_t v41;
  uint64_t v42;

  v3 = *(_QWORD *)(a3 + 24);
  v37 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v37 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_QWORD *)(v3 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v41 = v6;
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_DWORD *)(v8 + 80) | v7;
  v11 = v10 & 0xF8 | 7u;
  v12 = v5 + v11;
  v38 = *(_QWORD *)(v6 + 64) + v9;
  v39 = v8;
  v36 = *(_QWORD *)(v8 + 64);
  v13 = (v38 & ~v9) + v36;
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v13)
    v14 = (v38 & ~v9) + v36;
  else
    v14 = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v42 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v42 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  if (*(_DWORD *)(v15 + 84))
    v17 = *(_QWORD *)(v15 + 64);
  else
    v17 = *(_QWORD *)(v15 + 64) + 1;
  v18 = v11 | *(_DWORD *)(v4 + 80) | v16;
  if ((_DWORD)v18 != 7
    || ((*(_DWORD *)(v15 + 80) | *(_DWORD *)(v4 + 80) | v10) & 0x100000) != 0
    || ((v14 + v16 + 1 + (v12 & ~v11)) & ~v16) + v17 > 0x18)
  {
    v21 = *a2;
    *a1 = *a2;
    v23 = (uint64_t *)(v21 + ((v18 + 16) & ~v18));
    swift_retain();
  }
  else
  {
    __n = v17;
    v22 = ~v11;
    v34 = ~v9;
    v35 = v14 + v16 + 1;
    v23 = a1;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, v37);
    v24 = ((unint64_t)a1 + v12) & v22;
    v25 = ((unint64_t)a2 + v12) & v22;
    v26 = *(unsigned __int8 *)(v25 + v14);
    if (v26 >= 2)
    {
      if (v14 <= 3)
        v27 = v14;
      else
        v27 = 4;
      __asm { BR              X11 }
    }
    v28 = ~v16;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v41 + 16))(((unint64_t)a1 + v12) & v22, v25, v3);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v39 + 16))((v38 + v24) & v34, (v38 + v25) & v34, AssociatedTypeWitness);
    if (v26 == 1)
    {
      *(_QWORD *)((v36 + 7 + ((v38 + v24) & v34)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v36 + 7 + ((v38 + v25) & v34)) & 0xFFFFFFFFFFFFF8);
      v29 = 1;
    }
    else
    {
      v29 = 0;
    }
    *(_BYTE *)(v24 + v14) = v29;
    v30 = (void *)((v35 + v24) & v28);
    v31 = (const void *)((v35 + v25) & v28);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v31, 1, v42))
    {
      memcpy(v30, v31, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v30, v31, v42);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v30, 0, 1, v42);
    }
  }
  return v23;
}

uint64_t assignWithCopy for Publishers.CollectByTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  int v34;
  size_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v39 = *(_QWORD *)(v6 + 64);
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = (*(_DWORD *)(v11 + 80) | v9) & 0xF8 | 7u;
  v14 = v39 + v13;
  v40 = a1;
  v15 = (v14 + a1) & ~v13;
  v16 = (v14 + a2) & ~v13;
  v17 = *(_QWORD *)(v8 + 64);
  if (v15 == v16)
  {
    v24 = ((v17 + v12) & ~v12) + *(_QWORD *)(v11 + 64);
    if (((v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v24)
      v21 = ((v17 + v12) & ~v12) + *(_QWORD *)(v11 + 64);
    else
      v21 = ((v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else
  {
    v18 = AssociatedTypeWitness;
    v19 = v8;
    v37 = *(_QWORD *)(v11 + 64);
    v20 = ((v17 + v12) & ~v12) + v37;
    if (((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v20)
      v21 = ((v17 + v12) & ~v12) + v37;
    else
      v21 = ((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v15, v7);
    v38 = (v15 + v12 + v17) & ~v12;
    (*(void (**)(void))(v11 + 8))();
    v22 = *(unsigned __int8 *)(v16 + v21);
    if (v22 >= 2)
    {
      if (v21 <= 3)
        v23 = v21;
      else
        v23 = 4;
      __asm { BR              X11 }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v15, v16, v7);
    v25 = (v16 + v12 + v17) & ~v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v38, v25, v18);
    if (v22 == 1)
    {
      *(_QWORD *)((v37 + 7 + v38) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v37 + 7 + v25) & 0xFFFFFFFFFFFFF8);
      *(_BYTE *)(v15 + v21) = 1;
    }
    else
    {
      *(_BYTE *)(v15 + v21) = 0;
    }
  }
  v26 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = v21 + v28 + 1;
  v30 = (void *)((v29 + v15) & ~v28);
  v31 = (void *)((v29 + v16) & ~v28);
  v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  v33 = v32(v30, 1, v26);
  v34 = v32(v31, 1, v26);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v30, v31, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v30, 0, 1, v26);
      return v40;
    }
  }
  else
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v30, v31, v26);
      return v40;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v30, v26);
  }
  if (*(_DWORD *)(v27 + 84))
    v35 = *(_QWORD *)(v27 + 64);
  else
    v35 = *(_QWORD *)(v27 + 64) + 1;
  memcpy(v30, v31, v35);
  return v40;
}

uint64_t initializeWithTake for Publishers.CollectByTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  size_t v32;
  uint64_t v34;
  uint64_t v35;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = (*(_DWORD *)(v12 + 80) | v10) & 0xF8 | 7u;
  v35 = a1;
  v15 = (v7 + v14 + a1) & ~v14;
  v16 = (v7 + v14 + a2) & ~v14;
  v17 = ~v13;
  v18 = *(_QWORD *)(v9 + 64) + v13;
  v34 = *(_QWORD *)(v12 + 64);
  v19 = (v18 & ~v13) + v34;
  if (((v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v19)
    v20 = (v18 & ~v13) + v34;
  else
    v20 = ((v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v21 = *(unsigned __int8 *)(v16 + v20);
  if (v21 >= 2)
  {
    if (v20 <= 3)
      v22 = v20;
    else
      v22 = 4;
    __asm { BR              X11 }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v15, v16, v8);
  v23 = (v18 + v15) & v17;
  v24 = (v18 + v16) & v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v23, v24, AssociatedTypeWitness);
  if (v21 == 1)
  {
    *(_QWORD *)((v34 + 7 + v23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v34 + 7 + v24) & 0xFFFFFFFFFFFFF8);
    v25 = 1;
  }
  else
  {
    v25 = 0;
  }
  *(_BYTE *)(v15 + v20) = v25;
  v26 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = v20 + v28 + 1;
  v30 = (void *)((v29 + v15) & ~v28);
  v31 = (const void *)((v29 + v16) & ~v28);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v31, 1, v26))
  {
    if (*(_DWORD *)(v27 + 84))
      v32 = *(_QWORD *)(v27 + 64);
    else
      v32 = *(_QWORD *)(v27 + 64) + 1;
    memcpy(v30, v31, v32);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v30, v31, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v30, 0, 1, v26);
  }
  return v35;
}

uint64_t assignWithTake for Publishers.CollectByTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  int v34;
  size_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v39 = *(_QWORD *)(v6 + 64);
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = (*(_DWORD *)(v11 + 80) | v9) & 0xF8 | 7u;
  v14 = v39 + v13;
  v40 = a1;
  v15 = (v14 + a1) & ~v13;
  v16 = (v14 + a2) & ~v13;
  v17 = *(_QWORD *)(v8 + 64);
  if (v15 == v16)
  {
    v24 = ((v17 + v12) & ~v12) + *(_QWORD *)(v11 + 64);
    if (((v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v24)
      v21 = ((v17 + v12) & ~v12) + *(_QWORD *)(v11 + 64);
    else
      v21 = ((v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else
  {
    v18 = AssociatedTypeWitness;
    v19 = v8;
    v37 = *(_QWORD *)(v11 + 64);
    v20 = ((v17 + v12) & ~v12) + v37;
    if (((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v20)
      v21 = ((v17 + v12) & ~v12) + v37;
    else
      v21 = ((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v15, v7);
    v38 = (v15 + v12 + v17) & ~v12;
    (*(void (**)(void))(v11 + 8))();
    v22 = *(unsigned __int8 *)(v16 + v21);
    if (v22 >= 2)
    {
      if (v21 <= 3)
        v23 = v21;
      else
        v23 = 4;
      __asm { BR              X11 }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v15, v16, v7);
    v25 = (v16 + v12 + v17) & ~v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v38, v25, v18);
    if (v22 == 1)
    {
      *(_QWORD *)((v37 + 7 + v38) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v37 + 7 + v25) & 0xFFFFFFFFFFFFF8);
      *(_BYTE *)(v15 + v21) = 1;
    }
    else
    {
      *(_BYTE *)(v15 + v21) = 0;
    }
  }
  v26 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = v21 + v28 + 1;
  v30 = (void *)((v29 + v15) & ~v28);
  v31 = (void *)((v29 + v16) & ~v28);
  v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  v33 = v32(v30, 1, v26);
  v34 = v32(v31, 1, v26);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 32))(v30, v31, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v30, 0, 1, v26);
      return v40;
    }
  }
  else
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 40))(v30, v31, v26);
      return v40;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v30, v26);
  }
  if (*(_DWORD *)(v27 + 84))
    v35 = *(_QWORD *)(v27 + 64);
  else
    v35 = *(_QWORD *)(v27 + 64) + 1;
  memcpy(v30, v31, v35);
  return v40;
}

uint64_t getEnumTagSinglePayload for Publishers.CollectByTime(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;

  v32 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v32 - 8);
  v5 = *(unsigned int *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = ((v7 + v9) & ~(unint64_t)v9) + *(_QWORD *)(v8 + 64);
  if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v10)
    v11 = v10;
  else
    v11 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v13 = *(_DWORD *)(v12 + 84);
  v14 = v13 - 1;
  if (!v13)
    v14 = 0;
  if (v5 <= v14)
    v15 = v14;
  else
    v15 = v5;
  if (v15 <= 0xFE)
    v16 = 254;
  else
    v16 = v15;
  if (v13)
    v17 = *(_QWORD *)(v12 + 64);
  else
    v17 = *(_QWORD *)(v12 + 64) + 1;
  if (!a2)
    return 0;
  v18 = (*(_DWORD *)(v6 + 80) | v9) & 0xF8 | 7u;
  v19 = *(_QWORD *)(v4 + 64) + v18;
  v20 = *(unsigned __int8 *)(v12 + 80);
  v21 = v11 + v20 + 1;
  if (a2 > v16)
  {
    v22 = v17 + ((v21 + (v19 & ~v18)) & ~v20);
    v23 = 8 * v22;
    if (v22 > 3)
      goto LABEL_18;
    v25 = ((a2 - v16 + ~(-1 << v23)) >> v23) + 1;
    if (HIWORD(v25))
    {
      v24 = *(_DWORD *)(a1 + v22);
      if (v24)
        goto LABEL_25;
    }
    else
    {
      if (v25 <= 0xFF)
      {
        if (v25 < 2)
          goto LABEL_34;
LABEL_18:
        v24 = *(unsigned __int8 *)(a1 + v22);
        if (!*(_BYTE *)(a1 + v22))
          goto LABEL_34;
LABEL_25:
        v26 = (v24 - 1) << v23;
        if (v22 > 3)
          v26 = 0;
        if ((_DWORD)v22)
        {
          if (v22 <= 3)
            v27 = v22;
          else
            v27 = 4;
          __asm { BR              X12 }
        }
        return v16 + v26 + 1;
      }
      v24 = *(unsigned __int16 *)(a1 + v22);
      if (*(_WORD *)(a1 + v22))
        goto LABEL_25;
    }
  }
LABEL_34:
  if ((_DWORD)v5 == v16)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, v5, v32);
  v28 = (v19 + a1) & ~v18;
  if (v15 <= 0xFE)
  {
    v29 = *(unsigned __int8 *)(v28 + v11);
    if (v29 >= 2)
      return (v29 ^ 0xFF) + 1;
    else
      return 0;
  }
  if (v13 < 2)
    return 0;
  v30 = (*(uint64_t (**)(uint64_t))(v12 + 48))((v21 + v28) & ~v20);
  if (v30 >= 2)
    return v30 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for Publishers.CollectByTime(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v9 = *(_QWORD *)(v8 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = ((v9 + v11) & ~(unint64_t)v11) + *(_QWORD *)(v10 + 64);
  if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v12)
    v13 = v12;
  else
    v13 = ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v14 = 0u;
  v15 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v16 = *(_DWORD *)(v15 + 84);
  v17 = v16 - 1;
  if (!v16)
    v17 = 0;
  if (v7 > v17)
    v17 = v7;
  if (v17 <= 0xFE)
    v18 = 254;
  else
    v18 = v17;
  v20 = *(_QWORD *)(v15 + 64);
  if (!v16)
    ++v20;
  v19 = (*(_DWORD *)(v8 + 80) | v11) & 0xF8 | 7u;
  v21 = v20
      + ((v13 + 1 + *(unsigned __int8 *)(v15 + 80) + ((*(_QWORD *)(v6 + 64) + v19) & ~v19)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  if (a3 > v18)
  {
    if (v21 > 3)
    {
      v14 = 1u;
      if (v18 >= a2)
LABEL_29:
        __asm { BR              X17 }
LABEL_22:
      v23 = ~v18 + a2;
      if (v21 < 4)
      {
        if ((_DWORD)v21)
        {
          v24 = v23 & ~(-1 << (8 * v21));
          bzero(a1, v21);
          if ((_DWORD)v21 == 3)
          {
            *(_WORD *)a1 = v24;
            a1[2] = BYTE2(v24);
          }
          else if ((_DWORD)v21 == 2)
          {
            *(_WORD *)a1 = v24;
          }
          else
          {
            *a1 = v24;
          }
        }
      }
      else
      {
        bzero(a1, v21);
        *(_DWORD *)a1 = v23;
      }
      __asm { BR              X10 }
    }
    v22 = ((a3 - v18 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
    if (HIWORD(v22))
    {
      v14 = 4u;
      if (v18 >= a2)
        goto LABEL_29;
      goto LABEL_22;
    }
    if (v22 >= 0x100)
      v14 = 2;
    else
      v14 = v22 > 1;
  }
  if (v18 >= a2)
    goto LABEL_29;
  goto LABEL_22;
}

void sub_18B5ABB0C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_18B5ABB14()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_18B5ABB90()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
}

void sub_18B5ABB98()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_18B5ABBA8()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_18B5ABBB0()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

uint64_t type metadata completion function for Publishers.CollectByTime.Inner(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  result = swift_checkMetadataState();
  if (v4 <= 0x3F)
  {
    result = type metadata accessor for Publishers.TimeGroupingStrategy(319, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 112), v3);
    if (v5 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      result = type metadata accessor for Optional();
      if (v6 <= 0x3F)
        return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.Collect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18B5ABD94 + 4 * byte_18B5F7717[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Publishers.Collect(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.CollectByCount(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t assignWithCopy for Publishers.CollectByCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.CollectByCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.CollectByCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.CollectByCount(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_18B5AC1C8 + 4 * byte_18B5F7725[v8]))();
}

void storeEnumTagSinglePayload for Publishers.CollectByCount(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_18B5AC308()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18B5AC310(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B5AC318);
}

void sub_18B5AC334()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_18B5AC33C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_18B5AC344(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x18B5AC34CLL);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata completion function for Publishers.CollectByTrigger.Inner()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  unint64_t v6;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      type metadata accessor for Subscribers.Completion(255, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
      result = type metadata accessor for Optional();
      if (v6 <= 0x3F)
        return swift_initClassMetadata2();
    }
  }
  return result;
}

void type metadata accessor for Publishers.CollectByTrigger.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t sub_18B5AC4D0()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in Publishers.CollectByTime.Inner.receive(completion:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  return closure #3 in Publishers.CollectByTime.Inner.receive(completion:)(*(uint64_t **)(v0 + 64), v0 + ((v1 + 72) & ~v1));
}

uint64_t sub_18B5AC5A4()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_18B5AC5D0()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.CollectByTime.Inner.receive(_:)()
{
  uint64_t v0;

  return closure #1 in Publishers.CollectByTime.Inner.receive(_:)(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24), (_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 72));
}

uint64_t sub_18B5AC614()
{
  uint64_t v0;

  if (*(unsigned __int8 *)(v0 + 56) <= 1u)
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_18B5AC678()
{
  return swift_deallocObject();
}

void specialized Publishers.CollectByTrigger.Inner.send(_:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v1 = v0;
  v2 = *v0;
  v3 = *(os_unfair_lock_s **)((char *)v0 + *(_QWORD *)(*v0 + 152));
  os_unfair_lock_lock(v3);
  v4 = *(_QWORD *)(*v0 + 192);
  v5 = *(uint64_t *)((char *)v0 + v4);
  if (v5 != 0x8000000000000000)
  {
    if (v5 < 0)
    {
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    if (!v5)
      goto LABEL_17;
  }
  v6 = (uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 168));
  swift_beginAccess();
  v13 = *v6;
  swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Array();
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v7);
  if ((Collection.isEmpty.getter() & 1) != 0)
  {
LABEL_17:
    os_unfair_lock_unlock(v3);
    return;
  }
  v8 = *(uint64_t *)((char *)v0 + v4);
  if (v8 == 0x8000000000000000)
    goto LABEL_9;
  if (v8 < 0)
    goto LABEL_19;
  if (!v8)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(uint64_t *)((char *)v0 + v4) = v8 - 1;
LABEL_9:
  v9 = *v6;
  swift_bridgeObjectRetain();
  *v6 = static Array._allocateUninitialized(_:)();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v3);
  os_unfair_recursive_lock_lock_with_options();
  v13 = v9;
  v10 = (*(uint64_t (**)(uint64_t *, _QWORD))(*(_QWORD *)(v2 + 120) + 48))(&v13, *(_QWORD *)(v2 + 96));
  swift_bridgeObjectRelease();
  os_unfair_recursive_lock_unlock();
  os_unfair_lock_lock(v3);
  v11 = *(uint64_t *)((char *)v1 + v4);
  if (v11 == 0x8000000000000000)
    goto LABEL_17;
  v12 = 0x8000000000000000;
  if (v10 == 0x8000000000000000)
  {
LABEL_16:
    *(uint64_t *)((char *)v1 + v4) = v12;
    goto LABEL_17;
  }
  if ((v11 | v10) < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v11 + v10;
  if (__OFADD__(v11, v10))
  {
    v12 = 0x8000000000000000;
    goto LABEL_16;
  }
  if ((v12 & 0x8000000000000000) == 0)
    goto LABEL_16;
LABEL_22:
  __break(1u);
}

uint64_t Publishers.ReceiveOn.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.ReceiveOn.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t Publishers.ReceiveOn.options.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

char *Publishers.ReceiveOn.Inner.__allocating_init(_:scheduler:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return Publishers.ReceiveOn.Inner.init(_:scheduler:options:)(a1, a2, a3);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.ReceiveOn<A, B>.Inner<A1>()
{
  return 0x4F65766965636552;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.ReceiveOn<A, B>.Inner<A1>(_QWORD *a1@<X8>)
{
  Publishers.ReceiveOn.Inner.playgroundDescription.getter(a1);
}

void Publishers.ReceiveOn.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x4F65766965636552;
  a1[1] = 0xE90000000000006ELL;
}

uint64_t sub_18B5AC9D8()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v3)- 8)+ 80);
  v5 = (v4 + 72) & ~v4;
  swift_release();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v5, 1, AssociatedTypeWitness))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v5, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_18B5ACABC()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t static Subscribers.Demand.> infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == 0x8000000000000000)
    return 1;
  if ((result & 0x8000000000000000) == 0)
    return a2 < result;
  __break(1u);
  return result;
}

uint64_t static Subscribers.Demand.max(_:)(uint64_t result)
{
  if (result < 0)
    __break(1u);
  return result;
}

unint64_t *static Subscribers.Demand.+= infix(_:_:)(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *result;
  v3 = 0x8000000000000000;
  if (*result != 0x8000000000000000)
  {
    if (a2 != 0x8000000000000000)
    {
      if (((v2 | a2) & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_11;
      }
      v3 = v2 + a2;
      if (!__OFADD__(v2, a2))
      {
        if ((v3 & 0x8000000000000000) == 0)
          goto LABEL_8;
LABEL_11:
        __break(1u);
        return result;
      }
      v3 = 0x8000000000000000;
    }
LABEL_8:
    *result = v3;
  }
  return result;
}

{
  unint64_t v2;
  unint64_t v3;

  v2 = *result;
  v3 = 0x8000000000000000;
  if (*result == 0x8000000000000000)
  {
LABEL_7:
    *result = v3;
    return result;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = v2 + a2;
    if (__OFADD__(v2, a2))
    {
      *result = 0x8000000000000000;
      return result;
    }
    if ((v3 & 0x8000000000000000) == 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t *static Subscribers.Demand.-= infix(_:_:)(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = *result;
  if (*result != 0x8000000000000000)
  {
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      v3 = __OFSUB__(v2, a2);
      v4 = v2 - a2;
      if (v3)
      {
        v4 = 0;
LABEL_7:
        *result = v4;
        return result;
      }
      if ((v4 & 0x8000000000000000) == 0)
        goto LABEL_7;
    }
    __break(1u);
  }
  return result;
}

unint64_t static Subscribers.Demand.- infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  result = 0x8000000000000000;
  if (a1 == 0x8000000000000000)
    return result;
  if (a1 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  result = a1 - a2;
  if (__OFSUB__(a1, a2))
    return 0;
  if ((result & 0x8000000000000000) != 0)
    goto LABEL_9;
  return result;
}

{
  unint64_t result;

  result = 0x8000000000000000;
  if (a1 != 0x8000000000000000)
  {
    if (a2 == 0x8000000000000000)
      return 0;
    if ((a2 | a1) < 0)
    {
      __break(1u);
    }
    else
    {
      result = a1 - a2;
      if (a1 - a2 >= 0)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t Subscribers.Demand.max.getter(uint64_t result)
{
  uint64_t v1;

  if (result == 0x8000000000000000)
    return 0;
  v1 = result;
  if ((result & 0x8000000000000000) == 0)
    return v1;
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.== infix(_:_:)(_BOOL8 result, uint64_t a2)
{
  if (result == 0x8000000000000000)
    return 0;
  if ((result & 0x8000000000000000) == 0)
    return result == a2;
  __break(1u);
  return result;
}

unint64_t static Subscribers.Demand.* infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  result = 0x8000000000000000;
  if (a1 == 0x8000000000000000)
    return result;
  if (a1 < 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  result = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 != (a1 * a2) >> 63)
    return 0x8000000000000000;
  if ((result & 0x8000000000000000) != 0)
    goto LABEL_8;
  return result;
}

uint64_t static Subscribers.Completion<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  char v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  v26[1] = a4;
  v28 = a2;
  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v26[0] = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Subscribers.Completion(0, v8, v10, v9);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v26 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v27 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v16 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v18 = (char *)v26 - v17;
  v19 = (char *)v26 + *(int *)(v16 + 48) - v17;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20((char *)v26 - v17, a1, v11);
  v20(v19, v28, v11);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v21(v18, 1, a3) == 1)
  {
    v22 = 1;
    if (v21(v19, 1, a3) == 1)
      goto LABEL_8;
  }
  else
  {
    v20(v14, (uint64_t)v18, v11);
    if (v21(v19, 1, a3) != 1)
    {
      v23 = (char *)v26[0];
      (*(void (**)(_QWORD, char *, uint64_t))(v6 + 32))(v26[0], v19, a3);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      v24 = *(void (**)(char *, uint64_t))(v6 + 8);
      v24(v23, a3);
      v24(v14, a3);
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, a3);
  }
  v22 = 0;
  v12 = v27;
  v11 = TupleTypeMetadata2;
LABEL_8:
  (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
  return v22 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Subscribers.Completion<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Subscribers.Completion<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

void Subscribers.Completion<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v9 + 16))(v8, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
    Hasher._combine(_:)(1uLL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

Swift::Int Subscribers.Completion<>.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  Subscribers.Completion<>.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t Subscribers.Completion.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  unsigned int v4;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Subscribers.Completion.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t Subscribers.Completion.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x726F727265;
  else
    return 0x73736563637573;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> Subscribers.Completion<A>(uint64_t a1)
{
  return Subscribers.Completion<>.hashValue.getter(a1);
}

void protocol witness for Hashable.hash(into:) in conformance <> Subscribers.Completion<A>(uint64_t a1, uint64_t a2)
{
  Subscribers.Completion<>.hash(into:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> Subscribers.Completion<A>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  Subscribers.Completion<>.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Subscribers.Completion<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Subscribers.Completion<A>.CodingKeys, a3);
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Subscribers.Completion<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Subscribers.Completion<A>.CodingKeys, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Subscribers.Completion<A>.CodingKeys()
{
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Subscribers.Completion<A>.CodingKeys);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Subscribers.Completion<A>.CodingKeys()
{
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Subscribers.Completion<A>.CodingKeys);
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Subscribers.Completion<A>.CodingKeys@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  uint64_t result;
  Swift::String v5;

  v3 = (void *)a1[1];
  v5._countAndFlagsBits = *a1;
  v5._object = v3;
  result = Subscribers.Completion.CodingKeys.init(rawValue:)(v5);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Subscribers.Completion<A>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = Subscribers.Completion.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Subscribers.Completion<A>.CodingKeys()
{
  char *v0;

  return Subscribers.Completion.CodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Subscribers.Completion<A>.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = Subscribers.Completion.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Subscribers.Completion<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized Record.Recording<>.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Subscribers.Completion<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Subscribers.Completion<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Subscribers.Completion<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Subscribers.Completion<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t Subscribers.Completion<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD v24[2];
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;

  v24[1] = a3;
  v5 = *(_QWORD *)(a2 + 16);
  v31 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v25 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Subscribers.Completion.CodingKeys(255, v5, *(_QWORD *)(v11 + 24), v12);
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Subscribers.Completion<A>.CodingKeys, v13);
  v14 = type metadata accessor for KeyedEncodingContainer();
  v15 = *(_QWORD *)(v14 - 8);
  v28 = v14;
  v29 = v15;
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v24 - v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v27 = v17;
  v18 = v31;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v10, v32, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v10, 1, v5) == 1)
  {
    v33 = 0;
    v20 = v27;
    v19 = v28;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  else
  {
    v21 = v25;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v25, v10, v5);
    v35 = 0;
    v20 = v27;
    v19 = v28;
    v22 = v26;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v22)
    {
      v34 = 1;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v20, v19);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> Subscribers.Completion<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return Subscribers.Completion<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t Subscribers.Completion<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;

  v37 = a3;
  v32 = a5;
  v31 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v36 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Subscribers.Completion.CodingKeys(255, v9, v10, v10);
  MEMORY[0x18D77ACE4](&protocol conformance descriptor for Subscribers.Completion<A>.CodingKeys, v11);
  v12 = type metadata accessor for KeyedDecodingContainer();
  v34 = *(_QWORD *)(v12 - 8);
  v35 = v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v30 - v13;
  v38 = a2;
  v33 = type metadata accessor for Subscribers.Completion(0, a2, a4, v15);
  v16 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v18 = (char *)&v30 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v19 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v19)
  {
    v30 = v18;
    v39 = v16;
    v20 = v38;
    v41 = 0;
    v22 = v34;
    v21 = v35;
    if ((KeyedDecodingContainer.decode(_:forKey:)() & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v21);
      v23 = 1;
      v25 = v31;
      v24 = v32;
      v26 = v33;
      v27 = v39;
      v28 = v30;
    }
    else
    {
      v40 = 1;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v21);
      v25 = v31;
      v28 = v30;
      (*(void (**)(void))(v31 + 32))();
      v23 = 0;
      v24 = v32;
      v26 = v33;
      v27 = v39;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v28, v23, 1, v20);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v24, v28, v26);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> Subscribers.Completion<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Subscribers.Completion<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), *(_QWORD *)(a2 + 24), a4);
}

Combine::Subscribers::Demand __swiftcall Subscribers.Demand.init(rawValue:)(Combine::Subscribers::Demand rawValue)
{
  if (rawValue.rawValue >= 0x8000000000000000)
    return (Combine::Subscribers::Demand)0x8000000000000000;
  return rawValue;
}

unint64_t static Subscribers.Demand.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  result = 0x8000000000000000;
  if (a1 == 0x8000000000000000 || a2 == 0x8000000000000000)
    return result;
  if ((a2 | a1) < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  result = a1 + a2;
  if (__OFADD__(a1, a2))
    return 0x8000000000000000;
  if ((result & 0x8000000000000000) != 0)
    goto LABEL_12;
  return result;
}

{
  unint64_t result;

  result = 0x8000000000000000;
  if (a1 == 0x8000000000000000)
    return result;
  if (a1 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  result = a1 + a2;
  if (__OFADD__(a1, a2))
    return 0x8000000000000000;
  if ((result & 0x8000000000000000) != 0)
    goto LABEL_9;
  return result;
}

uint64_t type metadata accessor for Subscribers.Completion.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Subscribers.Completion.CodingKeys);
}

unint64_t *static Subscribers.Demand.*= infix(_:_:)(unint64_t *result, uint64_t a2)
{
  int64_t v2;
  unint64_t v3;

  v2 = *result;
  v3 = 0x8000000000000000;
  if (*result == 0x8000000000000000)
  {
LABEL_6:
    *result = v3;
    return result;
  }
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = v2 * a2;
    if ((unsigned __int128)(v2 * (__int128)a2) >> 64 != (v2 * a2) >> 63)
    {
      *result = 0x8000000000000000;
      return result;
    }
    if ((v3 & 0x8000000000000000) == 0)
      goto LABEL_6;
  }
  __break(1u);
  return result;
}

unint64_t *static Subscribers.Demand.-= infix(_:_:)(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *result;
  v3 = 0x8000000000000000;
  if (*result == 0x8000000000000000)
    goto LABEL_6;
  if (a2 == 0x8000000000000000)
  {
    *result = 0;
    return result;
  }
  if (((v2 | a2) & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = v2 - a2;
    if ((uint64_t)(v2 - a2) >= 0)
    {
LABEL_6:
      *result = v3;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t static Subscribers.Demand.>= infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == 0x8000000000000000)
    return 1;
  if ((result & 0x8000000000000000) == 0)
    return result >= a2;
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.> infix(_:_:)(_BOOL8 result, uint64_t a2)
{
  if (a2 == 0x8000000000000000)
    return 0;
  if ((a2 & 0x8000000000000000) == 0)
    return a2 < result;
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.>= infix(_:_:)(_BOOL8 result, uint64_t a2)
{
  if (a2 == 0x8000000000000000)
    return 0;
  if ((a2 & 0x8000000000000000) == 0)
    return result >= a2;
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.< infix(_:_:)(_BOOL8 result, uint64_t a2)
{
  if (result == 0x8000000000000000)
    return 0;
  if ((result & 0x8000000000000000) == 0)
    return result < a2;
  __break(1u);
  return result;
}

uint64_t static Subscribers.Demand.< infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (a2 == 0x8000000000000000)
    return 1;
  if ((a2 & 0x8000000000000000) == 0)
    return result < a2;
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.<= infix(_:_:)(_BOOL8 result, uint64_t a2)
{
  if (result == 0x8000000000000000)
    return 0;
  if ((result & 0x8000000000000000) == 0)
    return a2 >= result;
  __break(1u);
  return result;
}

uint64_t static Subscribers.Demand.<= infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (a2 == 0x8000000000000000)
    return 1;
  if ((a2 & 0x8000000000000000) == 0)
    return a2 >= result;
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  _BOOL4 v3;

  v3 = a2 == 0x8000000000000000 || a1 < a2;
  return a1 != 0x8000000000000000 && v3;
}

BOOL static Subscribers.Demand.<= infix(_:_:)(unint64_t a1, unint64_t a2)
{
  _BOOL4 v3;

  v3 = a2 == 0x8000000000000000 || a2 >= a1;
  if (a1 == 0x8000000000000000)
    return a2 == 0x8000000000000000;
  else
    return v3;
}

uint64_t static Subscribers.Demand.>= infix(_:_:)(unint64_t a1, unint64_t a2)
{
  _BOOL4 v3;

  v3 = a2 != 0x8000000000000000 && a1 >= a2;
  return a1 == 0x8000000000000000 || v3;
}

BOOL static Subscribers.Demand.> infix(_:_:)(unint64_t a1, unint64_t a2)
{
  _BOOL4 v3;

  v3 = a2 != 0x8000000000000000 && a2 < a1;
  if (a1 == 0x8000000000000000)
    return a2 != 0x8000000000000000;
  else
    return v3;
}

uint64_t static Subscribers.Demand.!= infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == 0x8000000000000000)
    return 1;
  if ((result & 0x8000000000000000) == 0)
    return result != a2;
  __break(1u);
  return result;
}

{
  if (a2 == 0x8000000000000000)
    return 1;
  if ((a2 & 0x8000000000000000) == 0)
    return a2 != result;
  __break(1u);
  return result;
}

_QWORD *Subscribers.Demand.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  _QWORD v6[4];

  v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    v4 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    if (v4 >= 0x8000000000000000)
      v3 = (_QWORD *)0x8000000000000000;
    else
      v3 = (_QWORD *)v4;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t Subscribers.Demand.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void Subscribers.Demand.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int Subscribers.Demand.hashValue.getter(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Subscribers.Demand(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == 0x8000000000000000)
    return 0;
  return *a2 == 0x8000000000000000 || *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Subscribers.Demand(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  _BOOL4 v4;

  v2 = *a1;
  v4 = *a2 == 0x8000000000000000 || *a2 >= v2;
  if (v2 == 0x8000000000000000)
    return *a2 == 0x8000000000000000;
  else
    return v4;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Subscribers.Demand(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == 0x8000000000000000)
    return 1;
  return *a2 != 0x8000000000000000 && *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Subscribers.Demand(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  _BOOL4 v4;

  v2 = *a1;
  v4 = *a2 != 0x8000000000000000 && *a2 < v2;
  if (v2 == 0x8000000000000000)
    return *a2 != 0x8000000000000000;
  else
    return v4;
}

uint64_t base witness table accessor for Equatable in <> Subscribers.Completion<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x18D77ACE4](&protocol conformance descriptor for <> Subscribers.Completion<A>, a1, &v4);
}

unint64_t lazy protocol witness table accessor for type Subscribers.Demand and conformance Subscribers.Demand()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Subscribers.Demand and conformance Subscribers.Demand;
  if (!lazy protocol witness table cache variable for type Subscribers.Demand and conformance Subscribers.Demand)
  {
    result = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Subscribers.Demand, &type metadata for Subscribers.Demand);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Subscribers.Demand and conformance Subscribers.Demand);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Subscribers.Demand@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  _QWORD v8[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  if (v5 >= 0x8000000000000000)
    v7 = 0x8000000000000000;
  else
    v7 = v5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v7;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Subscribers.Demand(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Subscribers.Demand()
{
  uint64_t *v0;

  return Subscribers.Demand.description.getter(*v0);
}

ValueMetadata *type metadata accessor for Subscribers()
{
  return &type metadata for Subscribers;
}

uint64_t destructiveInjectEnumTag for Subscribers.Completion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

ValueMetadata *type metadata accessor for Subscribers.Demand()
{
  return &type metadata for Subscribers.Demand;
}

uint64_t storeEnumTagSinglePayload for Subscribers.Completion.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18B5AE0DC + 4 * byte_18B5F7D53[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18B5AE110 + 4 * byte_18B5F7D4E[v4]))();
}

uint64_t sub_18B5AE110(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18B5AE118(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18B5AE120);
  return result;
}

uint64_t sub_18B5AE12C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18B5AE134);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18B5AE138(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18B5AE140(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in Subscribers.Completion<A>.CodingKeys()
{
  JUMPOUT(0x18D77ACE4);
}

void base witness table accessor for CustomDebugStringConvertible in Subscribers.Completion<A>.CodingKeys()
{
  JUMPOUT(0x18D77ACE4);
}

void base witness table accessor for CustomStringConvertible in Subscribers.Completion<A>.CodingKeys()
{
  JUMPOUT(0x18D77ACE4);
}

void ReduceProducer.customMirror.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[5];
  __int128 v25;
  __int128 v26;
  uint64_t *v27;

  v24[1] = a1;
  v2 = *v1;
  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v3);
  v24[0] = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(_QWORD *)(v2 + 176)));
  v27 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18B5F5C60;
  *(_QWORD *)(v8 + 32) = 0x657274736E776F64;
  *(_QWORD *)(v8 + 40) = 0xEA00000000006D61;
  v9 = (uint64_t)v1 + *(_QWORD *)(*v1 + 168);
  v10 = *(_QWORD *)(v2 + 80);
  *(_QWORD *)(v8 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(boxed_opaque_existential_1, v9, v10);
  *(_QWORD *)(v8 + 80) = 0x746C75736572;
  *(_QWORD *)(v8 + 88) = 0xE600000000000000;
  v12 = *(_QWORD *)(v2 + 96);
  v13 = type metadata accessor for Optional();
  *(_QWORD *)(v8 + 120) = v13;
  v14 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 96));
  v15 = (uint64_t)v1 + *(_QWORD *)(*v1 + 136);
  swift_beginAccess();
  v16 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v16(v14, v15, v13);
  *(_QWORD *)(v8 + 128) = 0x6C616974696E69;
  *(_QWORD *)(v8 + 136) = 0xE700000000000000;
  v17 = (uint64_t)v1 + *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(v8 + 168) = v13;
  v18 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 144));
  v16(v18, v17, v13);
  *(_QWORD *)(v8 + 176) = 0x737574617473;
  *(_QWORD *)(v8 + 184) = 0xE600000000000000;
  *(_QWORD *)(v8 + 216) = &type metadata for SubscriptionStatus;
  v19 = swift_allocObject();
  v20 = v19 + 16;
  *(_QWORD *)(v8 + 192) = v19;
  v21 = (uint64_t)v1 + *(_QWORD *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v21, v20);
  v22 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v7, 1, 1, v22);
  v23 = *(_QWORD *)(v2 + 88);
  v24[2] = v10;
  v24[3] = v23;
  v24[4] = v12;
  v25 = *(_OWORD *)(v2 + 104);
  v26 = *(_OWORD *)(v2 + 120);
  type metadata accessor for ReduceProducer();
}

void sub_18B5AE400()
{
  uint64_t v0;
  uint64_t v1;

  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(*(_QWORD *)(v1 - 208));
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 176)));
}

uint64_t ReduceProducer.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 360))();
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Void __swiftcall ReduceProducer.cancel()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = *(os_unfair_lock_s **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 176));
  os_unfair_lock_lock(v1);
  v2 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v5, (uint64_t)v9);
    *(_BYTE *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 192)) = 1;
    v5 = 1;
    v6 = 0u;
    v7 = 0u;
    v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    v3 = v10;
    v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

uint64_t ReduceProducer.description.getter()
{
  return 0x656375646552;
}

uint64_t ReduceProducer.__deallocating_deinit()
{
  ReduceProducer.deinit();
  return swift_deallocClassInstance();
}

void ReduceProducer.receive(newValue:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReduceProducer<A, B, C, D, E>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 360))();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance ReduceProducer<A, B, C, D, E>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 368))();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance ReduceProducer<A, B, C, D, E>@<X0>(uint64_t *a1@<X8>)
{
  return ReduceProducer.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance ReduceProducer<A, B, C, D, E>()
{
  ReduceProducer.cancel()();
}

uint64_t sub_18B5AE6D4()
{
  uint64_t v0;

  if (*(unsigned __int8 *)(v0 + 56) <= 1u)
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

void Publisher.map<A, B>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, v3);
  Publishers.MapKeyPath2.init(upstream:keyPath0:keyPath1:)((uint64_t)v7, a2, a3);
}

uint64_t sub_18B5AE788()
{
  swift_retain();
  return swift_retain();
}

void Publishers.MapKeyPath2.init(upstream:keyPath0:keyPath1:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.MapKeyPath2();
}

uint64_t sub_18B5AE830(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + *(int *)(result + 52)) = v2;
  *(_QWORD *)(v3 + *(int *)(result + 56)) = v1;
  return result;
}

void Publisher.map<A, B, C>(_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, v3, v9);
  Publishers.MapKeyPath3.init(upstream:keyPath0:keyPath1:keyPath2:)((uint64_t)v7, a2, a3);
}

uint64_t sub_18B5AE8EC()
{
  swift_retain();
  swift_retain();
  return swift_retain();
}

void Publishers.MapKeyPath3.init(upstream:keyPath0:keyPath1:keyPath2:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.MapKeyPath3();
}

int *sub_18B5AE9B0(int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + result[15]) = v3;
  *(_QWORD *)(v4 + result[16]) = v2;
  *(_QWORD *)(v4 + result[17]) = v1;
  return result;
}

uint64_t Publishers.MapKeyPath.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.MapKeyPath.keyPath.getter()
{
  return swift_retain();
}

uint64_t Publishers.MapKeyPath.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18B5F41E0;
  *(_QWORD *)(v12 + 32) = 0x6874615079656BLL;
  *(_QWORD *)(v12 + 40) = 0xE700000000000000;
  v13 = *(_QWORD *)(v1 + *(int *)(a1 + 60));
  swift_getAssociatedTypeWitness();
  *(_QWORD *)(v12 + 72) = type metadata accessor for KeyPath();
  *(_QWORD *)(v12 + 48) = v13;
  v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.MapKeyPath.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x726F4665756C6156;
  a1[1] = 0xEB0000000079654BLL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.MapKeyPath<A, B>.Inner<A1>()
{
  return 0x726F4665756C6156;
}

uint64_t Publishers.MapKeyPath2.keyPath0.getter()
{
  return swift_retain();
}

uint64_t Publishers.MapKeyPath2.keyPath1.getter()
{
  return swift_retain();
}

void Publishers.MapKeyPath2.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.MapKeyPath2.Inner();
}

void sub_18B5AECBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&a9 - v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v10, v9);
  swift_retain();
  swift_retain();
  Publishers.MapKeyPath2.Inner.init(downstream:keyPath0:keyPath1:)(v11, v9, (uint64_t)v14);
}

uint64_t sub_18B5AED44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.MapKeyPath2<A, B, C>.Inner<A1>, v2);
  Publisher.subscribe<A>(_:)(v3, v4, v2, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v2);
}

void type metadata accessor for Publishers.MapKeyPath2.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.MapKeyPath2.Inner.init(downstream:keyPath0:keyPath1:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.MapKeyPath2.Inner();
}

void sub_18B5AEE34(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;

  *(_QWORD *)(v1 + a1[17]) = v3;
  *(_QWORD *)(v1 + a1[18]) = v2;
  v4 = a1[19];
  if (one-time initialization token for lock != -1)
    swift_once();
  v5 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v6 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v5);
    *(_QWORD *)(v1 + v4) = v6;
  }
}

uint64_t Publishers.MapKeyPath2.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18B5F4780;
  *(_QWORD *)(v12 + 32) = 0x306874615079656BLL;
  *(_QWORD *)(v12 + 40) = 0xE800000000000000;
  v13 = *(_QWORD *)(v1 + *(int *)(a1 + 68));
  swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for KeyPath();
  *(_QWORD *)(v12 + 48) = v13;
  *(_QWORD *)(v12 + 72) = v14;
  *(_QWORD *)(v12 + 80) = 0x316874615079656BLL;
  *(_QWORD *)(v12 + 88) = 0xE800000000000000;
  v15 = *(_QWORD *)(v1 + *(int *)(a1 + 72));
  *(_QWORD *)(v12 + 120) = type metadata accessor for KeyPath();
  *(_QWORD *)(v12 + 96) = v15;
  v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 1, 1, v16);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.MapKeyPath2.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEA968];
  strcpy((char *)a1, "ValueForKeys");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t Publishers.MapKeyPath2.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 56) + 40))(a1, *(_QWORD *)(a2 + 40));
}

uint64_t Publishers.MapKeyPath2.Inner.receive(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v6 = a2[3];
  v5 = a2[4];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v24 = TupleTypeMetadata2;
  v25 = v8;
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v11 = (char *)v23 - v10;
  v12 = *(_QWORD *)(v5 - 8);
  v13 = MEMORY[0x1E0C80A78](v9);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = v3;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  v19 = v24;
  v20 = &v11[*(int *)(v24 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v11, v18, v6);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v15, v5);
  v21 = (*(uint64_t (**)(char *, _QWORD))(a2[7] + 48))(v11, a2[5]);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v19);
  return v21;
}

uint64_t Publishers.MapKeyPath2.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 56) + 56))(a1, *(_QWORD *)(a2 + 40));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.MapKeyPath2<A, B, C>.Inner<A1>()
{
  return 0x726F4665756C6156;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MapKeyPath2<A, B, C>(uint64_t a1)
{
  Publishers.MapKeyPath2.receive<A>(subscriber:)(a1);
}

uint64_t Publishers.MapKeyPath3.keyPath0.getter()
{
  return swift_retain();
}

uint64_t Publishers.MapKeyPath3.keyPath1.getter()
{
  return swift_retain();
}

uint64_t Publishers.MapKeyPath3.keyPath2.getter()
{
  return swift_retain();
}

void Publishers.MapKeyPath3.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for Publishers.MapKeyPath3.Inner();
}

void sub_18B5AF388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  *(_QWORD *)(v13 - 152) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&a9 - v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v11, v10);
  swift_retain();
  swift_retain();
  swift_retain();
  Publishers.MapKeyPath3.Inner.init(downstream:keyPath0:keyPath1:keyPath2:)(v12, v10, (uint64_t)v15);
}

uint64_t sub_18B5AF428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.MapKeyPath3<A, B, C, D>.Inner<A1>, v2);
  Publisher.subscribe<A>(_:)(v3, v0, v2, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 152) + 8))(v3, v2);
}

void type metadata accessor for Publishers.MapKeyPath3.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.MapKeyPath3.Inner.init(downstream:keyPath0:keyPath1:keyPath2:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.MapKeyPath3.Inner();
}

void sub_18B5AF530(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;

  *(_QWORD *)(v1 + a1[19]) = v4;
  *(_QWORD *)(v1 + a1[20]) = v3;
  *(_QWORD *)(v1 + a1[21]) = v2;
  v5 = a1[22];
  if (one-time initialization token for lock != -1)
    swift_once();
  v6 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  v7 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v6);
    *(_QWORD *)(v1 + v5) = v7;
  }
}

uint64_t Publishers.MapKeyPath3.Inner.customMirror.getter@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v21[1] = a2;
  v4 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  (*(void (**)(char *, uint64_t, int *))(v12 + 16))((char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_18B5F5810;
  *(_QWORD *)(v13 + 32) = 0x306874615079656BLL;
  *(_QWORD *)(v13 + 40) = 0xE800000000000000;
  v14 = *(_QWORD *)(v2 + a1[19]);
  swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for KeyPath();
  *(_QWORD *)(v13 + 48) = v14;
  *(_QWORD *)(v13 + 72) = v15;
  *(_QWORD *)(v13 + 80) = 0x316874615079656BLL;
  *(_QWORD *)(v13 + 88) = 0xE800000000000000;
  v16 = *(_QWORD *)(v2 + a1[20]);
  v17 = type metadata accessor for KeyPath();
  *(_QWORD *)(v13 + 96) = v16;
  *(_QWORD *)(v13 + 120) = v17;
  *(_QWORD *)(v13 + 128) = 0x326874615079656BLL;
  *(_QWORD *)(v13 + 136) = 0xE800000000000000;
  v18 = *(_QWORD *)(v2 + a1[21]);
  *(_QWORD *)(v13 + 168) = type metadata accessor for KeyPath();
  *(_QWORD *)(v13 + 144) = v18;
  v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v10, 1, 1, v19);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v6);
  swift_retain();
  swift_retain();
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Publishers.MapKeyPath3.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 64) + 40))(a1, *(_QWORD *)(a2 + 48));
}

uint64_t Publishers.MapKeyPath3.Inner.receive(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t TupleTypeMetadata3;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a2[4];
  v5 = a2[5];
  v26 = a2[3];
  v4 = v26;
  v6 = v3;
  v28 = v3;
  v7 = v5;
  v31 = v5;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v32 = *(_QWORD *)(TupleTypeMetadata3 - 8);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata3);
  v10 = (char *)&v25 - v9;
  v30 = *(_QWORD *)(v7 - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(v6 - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  v20 = TupleTypeMetadata3;
  v21 = &v10[*(int *)(TupleTypeMetadata3 + 48)];
  v22 = &v10[*(int *)(TupleTypeMetadata3 + 64)];
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v10, v19, v26);
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v21, v16, v28);
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v22, v13, v31);
  v23 = (*(uint64_t (**)(char *, _QWORD))(a2[8] + 48))(v10, a2[6]);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v20);
  return v23;
}

uint64_t Publishers.MapKeyPath3.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 64) + 56))(a1, *(_QWORD *)(a2 + 48));
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.MapKeyPath3<A, B, C, D>.Inner<A1>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_QWORD *)(v2 + *(int *)(result + 88));
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MapKeyPath3<A, B, C, D>(uint64_t a1)
{
  Publishers.MapKeyPath3.receive<A>(subscriber:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.MapKeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B5AFC50 + 4 * byte_18B5F8258[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.MapKeyPath(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B5AFDC8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B5AFE3CLL);
}

void sub_18B5AFDD0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B5AFDD8);
  JUMPOUT(0x18B5AFE3CLL);
}

void sub_18B5AFE18()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5AFE3CLL);
}

void sub_18B5AFE20()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5AFE3CLL);
}

uint64_t sub_18B5AFE28(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B5AFE3CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B5AFE38);
    JUMPOUT(0x18B5AFE34);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for Publishers.MapKeyPath2()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath2(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.MapKeyPath2(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for Publishers.MapKeyPath2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.MapKeyPath2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.MapKeyPath2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath2(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B5B025C + 4 * byte_18B5F8267[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.MapKeyPath2(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B5B03DC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B0450);
}

void sub_18B5B03E4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B5B03ECLL);
  JUMPOUT(0x18B5B0450);
}

void sub_18B5B042C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B0450);
}

void sub_18B5B0434()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B0450);
}

uint64_t sub_18B5B043C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B5B0450);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B5B044CLL);
    JUMPOUT(0x18B5B0448);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void type metadata accessor for Publishers.MapKeyPath2()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t type metadata completion function for Publishers.MapKeyPath3()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath3(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
    *v12 = *v13;
    *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.MapKeyPath3(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for Publishers.MapKeyPath3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  *(_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.MapKeyPath3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFF8uLL;
  *v10 = *(_QWORD *)v9;
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.MapKeyPath3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  *(_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  *v9 = *v10;
  swift_release();
  *(_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath3(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B5B0910 + 4 * byte_18B5F8276[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.MapKeyPath3(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B5B0A98()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B0B0CLL);
}

void sub_18B5B0AA0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B5B0AA8);
  JUMPOUT(0x18B5B0B0CLL);
}

void sub_18B5B0AE8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B0B0CLL);
}

void sub_18B5B0AF0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B0B0CLL);
}

uint64_t sub_18B5B0AF8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B5B0B0CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B5B0B08);
    JUMPOUT(0x18B5B0B04);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void type metadata accessor for Publishers.MapKeyPath3()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t type metadata completion function for Publishers.MapKeyPath3.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath3.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 48) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
    *v12 = *v13;
    v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
    v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
    *v14 = *v15;
    *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.MapKeyPath3.Inner(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 48) - 8) + 8))();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for Publishers.MapKeyPath3.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 48) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.MapKeyPath3.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 48) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFF8uLL;
  *v10 = *(_QWORD *)v9;
  swift_retain();
  swift_release();
  v11 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.MapKeyPath3.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 48) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath3.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 48) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  *v9 = *v10;
  swift_release();
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_release();
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath3.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 48) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B5B103C + 4 * byte_18B5F8285[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.MapKeyPath3.Inner(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 48) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B5B11CC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B1240);
}

void sub_18B5B11D4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B5B11DCLL);
  JUMPOUT(0x18B5B1240);
}

void sub_18B5B121C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B1240);
}

void sub_18B5B1224()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B1240);
}

uint64_t sub_18B5B122C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B5B1240);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B5B123CLL);
    JUMPOUT(0x18B5B1238);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for Publishers.MapKeyPath2.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath2.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
    *v12 = *v13;
    *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.MapKeyPath2.Inner(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 40) - 8) + 8))();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for Publishers.MapKeyPath2.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  *(_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.MapKeyPath2.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFF8uLL;
  *v10 = *(_QWORD *)v9;
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.MapKeyPath2.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  *(_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath2.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  *v9 = *v10;
  swift_release();
  *(_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath2.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B5B16CC + 4 * byte_18B5F8294[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.MapKeyPath2.Inner(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 40) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B5B1854()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B18C8);
}

void sub_18B5B185C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B5B1864);
  JUMPOUT(0x18B5B18C8);
}

void sub_18B5B18A4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B18C8);
}

void sub_18B5B18AC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B18C8);
}

uint64_t sub_18B5B18B4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B5B18C8);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B5B18C4);
    JUMPOUT(0x18B5B18C0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.MapKeyPath.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.MapKeyPath.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t DebugHook.willReceive<A, B>(publisher:subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t ObjectType;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v16 = DebugHook.debugHandlers.getter();
  v10 = *(_QWORD *)(v16 + 16);
  if (v10)
  {
    v11 = (uint64_t *)(v16 + 40);
    do
    {
      v12 = *v11;
      ObjectType = swift_getObjectType();
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8);
      swift_unknownObjectRetain();
      v14(a1, a2, a3, a4, a5, a6, ObjectType, v12);
      swift_unknownObjectRelease();
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  return swift_bridgeObjectRelease();
}

uint64_t DebugHook.didReceive<A, B>(publisher:subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t ObjectType;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v16 = DebugHook.debugHandlers.getter();
  v10 = *(_QWORD *)(v16 + 16);
  if (v10)
  {
    v11 = (uint64_t *)(v16 + 40);
    do
    {
      v12 = *v11;
      ObjectType = swift_getObjectType();
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 16);
      swift_unknownObjectRetain();
      v14(a1, a2, a3, a4, a5, a6, ObjectType, v12);
      swift_unknownObjectRelease();
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  return swift_bridgeObjectRelease();
}

uint64_t SubscriberTap.init(subscriber:inner:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v10 = a5 + *(int *)(type metadata accessor for SubscriberTap(0, a3, a4, v9) + 36);
  return outlined init with take of Any?(a2, v10);
}

Swift::Void __swiftcall _Introspection.enable()()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1;
  v4 = v0;
  v5 = type metadata accessor for DebugHook();
  specialized static DebugHook.enable(_:)(v2, v5, v4, v3);
}

uint64_t type metadata accessor for DebugHook()
{
  return objc_opt_self();
}

Swift::Void __swiftcall _Introspection.disable()()
{
  type metadata accessor for DebugHook();
  specialized static DebugHook.disable(_:)();
}

BOOL _Introspection.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  Swift::UInt v2;
  uint64_t v5;

  v5 = type metadata accessor for DebugHook();
  return specialized static DebugHook.handlerIsEnabled(_:)(v2, v5, a1, a2);
}

uint64_t SubscriberTap.combineIdentifier.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 8))(*(_QWORD *)(a1 + 16));
}

_OWORD *SubscriberTap.inner.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedTypeWitness;
  uint64_t v28;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)();
  uint64_t (*v34)();
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char *v46;
  uint64_t (*v47)();
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  unint64_t v56;
  char *v57;
  char *v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t (*v70)();
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  _OWORD *v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82[2];
  _QWORD v83[3];
  uint64_t (*v84)();
  _QWORD *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[4];

  v78 = a2;
  v75 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v75 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = MEMORY[0x1E0C80A78](a1);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v65 - v8;
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (uint64_t (*)())((char *)&v65 - v11);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v65 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v77 = (char *)&v65 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v76 = (char *)&v65 - v19;
  v20 = v2 + *(int *)(v18 + 36);
  outlined init with copy of Any?(v20, (uint64_t)v83);
  if (v84)
  {
    v21 = v83;
  }
  else
  {
    v69 = v5;
    v70 = v12;
    v71 = v15;
    v72 = v9;
    v68 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    v73 = v20;
    outlined destroy of CustomStringConvertible?((uint64_t)v83, &demangling cache variable for type metadata for Any?);
    v74 = v4;
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v23 = v76;
    v24 = v2;
    v25 = v75;
    v22(v76, v24, v75);
    v26 = *(_QWORD *)(a1 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v28 = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v89[3] = type metadata accessor for AnySubscriber(0, AssociatedTypeWitness, v28, AssociatedConformanceWitness);
    v30 = (_QWORD *)swift_allocObject();
    v89[0] = v30;
    v22(v77, (uint64_t)v23, v25);
    v31 = v25;
    if (swift_dynamicCast())
    {
      v32 = v83[0];
      v33 = (uint64_t (*)())v83[1];
      v35 = v83[2];
      v34 = v84;
      v37 = v85;
      v36 = v86;
      v38 = v87;
      v39 = v74;
      v40 = v73;
      v41 = v23;
    }
    else
    {
      v77 = (char *)v28;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v26 + 8) + 8))(&v88, v25);
      type metadata accessor for AnySubscriberBox(0, v25, v26, v42);
      v43 = (uint64_t)v71;
      v22(v71, (uint64_t)v23, v25);
      v44 = AnySubscriberBox.__allocating_init(_:)(v43);
      v22((char *)v70, (uint64_t)v23, v31);
      v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible);
      v45 = swift_dynamicCast();
      v46 = v23;
      v66 = v44;
      v67 = AssociatedTypeWitness;
      if ((v45 & 1) != 0)
      {
        outlined init with take of Subscription(&v79, (uint64_t)v82);
        outlined init with take of Subscription(v82, (uint64_t)&v79);
        v35 = swift_allocObject();
        outlined init with take of Subscription(&v79, v35 + 16);
        v47 = _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcSSycfU_TA_0;
      }
      else
      {
        v81 = 0;
        v80 = 0u;
        v79 = 0u;
        outlined destroy of CustomStringConvertible?((uint64_t)&v79, &demangling cache variable for type metadata for CustomStringConvertible?);
        swift_getDynamicType();
        v48 = _typeName(_:qualified:)();
        v49 = v22;
        v51 = v50;
        v35 = swift_allocObject();
        *(_QWORD *)(v35 + 16) = v48;
        *(_QWORD *)(v35 + 24) = v51;
        v22 = v49;
        v47 = _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcSSycfU0_TA_0;
      }
      v70 = v47;
      v22((char *)v43, (uint64_t)v46, v31);
      v52 = v43;
      v53 = v46;
      v54 = v74;
      v55 = v22;
      v56 = (*(unsigned __int8 *)(v74 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
      v37 = (_QWORD *)swift_allocObject();
      v57 = v77;
      v37[2] = v67;
      v37[3] = v57;
      v37[4] = v31;
      v37[5] = v26;
      v58 = (char *)v37 + v56;
      v59 = (void (*)(char *, char *, uint64_t))v55;
      v41 = v53;
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v58, v52, v31);
      v59(v72, v53, v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible);
      if (swift_dynamicCast())
      {
        outlined init with take of Subscription(&v79, (uint64_t)v82);
        outlined init with take of Subscription(v82, (uint64_t)&v79);
        v38 = swift_allocObject();
        outlined init with take of Subscription(&v79, v38 + 16);
        v36 = _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU2_TA_0;
      }
      else
      {
        v81 = 0;
        v80 = 0u;
        v79 = 0u;
        outlined destroy of CustomStringConvertible?((uint64_t)&v79, &demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible?);
        v59(v68, v53, v31);
        if (swift_dynamicCast())
        {
          outlined init with take of Subscription(&v79, (uint64_t)v82);
          outlined init with take of Subscription(v82, (uint64_t)&v79);
          v38 = swift_allocObject();
          outlined init with take of Subscription(&v79, v38 + 16);
          v36 = _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU3_TA_0;
        }
        else
        {
          v81 = 0;
          v80 = 0u;
          v79 = 0u;
          outlined destroy of CustomStringConvertible?((uint64_t)&v79, &demangling cache variable for type metadata for CustomStringConvertible?);
          swift_getDynamicType();
          v60 = _typeName(_:qualified:)();
          v62 = v61;
          v38 = swift_allocObject();
          *(_QWORD *)(v38 + 16) = v60;
          *(_QWORD *)(v38 + 24) = v62;
          v41 = v53;
          v36 = _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU4_TA_0;
        }
      }
      v34 = partial apply for closure #3 in AnySubscriber.init<A>(_:);
      v39 = v74;
      v40 = v73;
      v32 = v66;
      v33 = v70;
    }
    v63 = v88;
    v30[2] = v32;
    v30[3] = v33;
    v30[4] = v35;
    v30[5] = v34;
    v30[6] = v37;
    v30[7] = v36;
    v30[8] = v38;
    v30[9] = v63;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v31);
    outlined destroy of CustomStringConvertible?(v40, &demangling cache variable for type metadata for Any?);
    outlined init with copy of Any((uint64_t)v89, v40);
    v21 = v89;
  }
  return outlined init with take of Any(v21, v78);
}

uint64_t SubscriberTap.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  os_unfair_lock_s *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  os_unfair_lock_s *v23;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[3];
  ValueMetadata *v29;
  _UNKNOWN **v30;
  _OWORD v31[2];
  uint64_t v32;

  v3 = v2;
  outlined init with copy of Subscription(a1, (uint64_t)v28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
  if (swift_dynamicCast())
  {
    v31[0] = v25;
    v31[1] = v26;
    v32 = v27;
    if (one-time initialization token for globalLock != -1)
      swift_once();
    os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
    v6 = static DebugHook.globalHook;
    v7 = (os_unfair_lock_s *)static DebugHook.globalLock;
    swift_retain();
    os_unfair_lock_unlock(v7);
    if (v6)
    {
      DebugHook.willReceive<A>(subscriber:subscription:)(v3, (uint64_t)v31, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
      swift_release();
    }
    v29 = &type metadata for SubscriptionTap;
    v30 = &protocol witness table for SubscriptionTap;
    v28[0] = swift_allocObject();
    outlined init with copy of SubscriptionTap((uint64_t)v31, v28[0] + 16);
    v10 = a2 + 16;
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(v10 + 8);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 40))(v28, v8, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
    v11 = static DebugHook.globalHook;
    v12 = (os_unfair_lock_s *)static DebugHook.globalLock;
    swift_retain();
    os_unfair_lock_unlock(v12);
    if (v11)
    {
      v13 = v31;
      v14 = v3;
      v15 = v8;
      v16 = v9;
LABEL_14:
      DebugHook.didReceive<A>(subscriber:subscription:)(v14, (uint64_t)v13, v15, v16);
      swift_release();
    }
  }
  else
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    outlined destroy of CustomStringConvertible?((uint64_t)&v25, &demangling cache variable for type metadata for SubscriptionTap?);
    outlined init with copy of Subscription(a1, (uint64_t)v31);
    if (one-time initialization token for globalLock != -1)
      swift_once();
    os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
    v17 = static DebugHook.globalHook;
    v18 = (os_unfair_lock_s *)static DebugHook.globalLock;
    swift_retain();
    os_unfair_lock_unlock(v18);
    if (v17)
    {
      DebugHook.willReceive<A>(subscriber:subscription:)(v3, a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
      swift_release();
    }
    v29 = &type metadata for SubscriptionTap;
    v30 = &protocol witness table for SubscriptionTap;
    v28[0] = swift_allocObject();
    outlined init with copy of SubscriptionTap((uint64_t)v31, v28[0] + 16);
    v21 = a2 + 16;
    v19 = *(_QWORD *)(a2 + 16);
    v20 = *(_QWORD *)(v21 + 8);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v20 + 40))(v28, v19, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
    v22 = static DebugHook.globalHook;
    v23 = (os_unfair_lock_s *)static DebugHook.globalLock;
    swift_retain();
    os_unfair_lock_unlock(v23);
    if (v22)
    {
      v14 = v3;
      v13 = (_OWORD *)a1;
      v15 = v19;
      v16 = v20;
      goto LABEL_14;
    }
  }
  return outlined destroy of SubscriptionTap((uint64_t)v31);
}

uint64_t DebugHook.willReceive<A>(subscriber:subscription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t ObjectType;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v14 = DebugHook.debugHandlers.getter();
  v8 = *(_QWORD *)(v14 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v14 + 40);
    do
    {
      v10 = *v9;
      ObjectType = swift_getObjectType();
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 24);
      swift_unknownObjectRetain();
      v12(a1, a2, a3, a4, ObjectType, v10);
      swift_unknownObjectRelease();
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  return swift_bridgeObjectRelease();
}

uint64_t DebugHook.didReceive<A>(subscriber:subscription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t ObjectType;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v14 = DebugHook.debugHandlers.getter();
  v8 = *(_QWORD *)(v14 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v14 + 40);
    do
    {
      v10 = *v9;
      ObjectType = swift_getObjectType();
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 32);
      swift_unknownObjectRetain();
      v12(a1, a2, a3, a4, ObjectType, v10);
      swift_unknownObjectRelease();
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  return swift_bridgeObjectRelease();
}

uint64_t SubscriberTap.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  os_unfair_lock_s *v12;

  v3 = v2;
  if (one-time initialization token for globalLock != -1)
    swift_once();
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  v6 = static DebugHook.globalHook;
  v7 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v7);
  v9 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    DebugHook.willReceive<A>(subscriber:input:)(v3, a1, v9, v8);
    swift_release();
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, v9, v8);
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  v11 = static DebugHook.globalHook;
  v12 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v12);
  if (v11)
  {
    DebugHook.didReceive<A>(subscriber:input:resultingDemand:)(v3, a1, v10, v9, v8);
    swift_release();
  }
  return v10;
}

uint64_t DebugHook.willReceive<A>(subscriber:input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t ObjectType;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v14 = DebugHook.debugHandlers.getter();
  v8 = *(_QWORD *)(v14 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v14 + 40);
    do
    {
      v10 = *v9;
      ObjectType = swift_getObjectType();
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 40);
      swift_unknownObjectRetain();
      v12(a1, a2, a3, a4, ObjectType, v10);
      swift_unknownObjectRelease();
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  return swift_bridgeObjectRelease();
}

uint64_t DebugHook.didReceive<A>(subscriber:input:resultingDemand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t ObjectType;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v15 = DebugHook.debugHandlers.getter();
  v9 = *(_QWORD *)(v15 + 16);
  if (v9)
  {
    v10 = (uint64_t *)(v15 + 40);
    do
    {
      v11 = *v10;
      ObjectType = swift_getObjectType();
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 48);
      swift_unknownObjectRetain();
      v13(a1, a2, a3, a4, a5, ObjectType, v11);
      swift_unknownObjectRelease();
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  return swift_bridgeObjectRelease();
}

void SubscriberTap.receive(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  os_unfair_lock_s *v11;

  v3 = v2;
  if (one-time initialization token for globalLock != -1)
    swift_once();
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  v6 = static DebugHook.globalHook;
  v7 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v7);
  v9 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    DebugHook.willReceive<A>(subscriber:completion:)(v3, a1, v9, v8);
    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, v9, v8);
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  v10 = static DebugHook.globalHook;
  v11 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v11);
  if (v10)
  {
    DebugHook.didReceive<A>(subscriber:completion:)(v3, a1, v9, v8);
    swift_release();
  }
}

uint64_t DebugHook.willReceive<A>(subscriber:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t ObjectType;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v14 = DebugHook.debugHandlers.getter();
  v8 = *(_QWORD *)(v14 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v14 + 40);
    do
    {
      v10 = *v9;
      ObjectType = swift_getObjectType();
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
      swift_unknownObjectRetain();
      v12(a1, a2, a3, a4, ObjectType, v10);
      swift_unknownObjectRelease();
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  return swift_bridgeObjectRelease();
}

uint64_t DebugHook.didReceive<A>(subscriber:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t ObjectType;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v14 = DebugHook.debugHandlers.getter();
  v8 = *(_QWORD *)(v14 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v14 + 40);
    do
    {
      v10 = *v9;
      ObjectType = swift_getObjectType();
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 64);
      swift_unknownObjectRetain();
      v12(a1, a2, a3, a4, ObjectType, v10);
      swift_unknownObjectRelease();
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  return swift_bridgeObjectRelease();
}

uint64_t SubscriberTap.description.getter()
{
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  return 0;
}

Swift::Void __swiftcall SubscriptionTap.request(_:)(Combine::Subscribers::Demand a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t ObjectType;
  void (*v11)(_QWORD *, Swift::UInt, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *, Swift::UInt, uint64_t, uint64_t);

  v2 = v1;
  if (one-time initialization token for globalLock != -1)
    swift_once();
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  v4 = static DebugHook.globalHook;
  v5 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v5);
  if (v4)
  {
    v6 = DebugHook.debugHandlers.getter();
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v8 = (uint64_t *)(v6 + 40);
      do
      {
        v9 = *v8;
        ObjectType = swift_getObjectType();
        v11 = *(void (**)(_QWORD *, Swift::UInt, uint64_t, uint64_t))(v9 + 72);
        swift_unknownObjectRetain();
        v11(v2, a1.rawValue, ObjectType, v9);
        swift_unknownObjectRelease();
        v8 += 2;
        --v7;
      }
      while (v7);
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  v12 = v2[3];
  v13 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v12);
  (*(void (**)(Swift::UInt, uint64_t, uint64_t))(v13 + 24))(a1.rawValue, v12, v13);
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  v14 = static DebugHook.globalHook;
  v15 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v15);
  if (v14)
  {
    v16 = DebugHook.debugHandlers.getter();
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v18 = (uint64_t *)(v16 + 40);
      do
      {
        v19 = *v18;
        v20 = swift_getObjectType();
        v21 = *(void (**)(_QWORD *, Swift::UInt, uint64_t, uint64_t))(v19 + 80);
        swift_unknownObjectRetain();
        v21(v2, a1.rawValue, v20, v19);
        swift_unknownObjectRelease();
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall SubscriptionTap.cancel()()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t ObjectType;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *, uint64_t, uint64_t);

  v1 = v0;
  if (one-time initialization token for globalLock != -1)
    swift_once();
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  v2 = static DebugHook.globalHook;
  v3 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v3);
  if (v2)
  {
    v4 = DebugHook.debugHandlers.getter();
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = (uint64_t *)(v4 + 40);
      do
      {
        v7 = *v6;
        ObjectType = swift_getObjectType();
        v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 88);
        swift_unknownObjectRetain();
        v9(v1, ObjectType, v7);
        swift_unknownObjectRelease();
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  v11 = v1[3];
  v10 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v11);
  (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 8) + 8))(v11);
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  v12 = static DebugHook.globalHook;
  v13 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v13);
  if (v12)
  {
    v14 = DebugHook.debugHandlers.getter();
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = (uint64_t *)(v14 + 40);
      do
      {
        v17 = *v16;
        v18 = swift_getObjectType();
        v19 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v17 + 96);
        swift_unknownObjectRetain();
        v19(v1, v18, v17);
        swift_unknownObjectRelease();
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SubscriptionTap()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance SubscriptionTap()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v3 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 8))(v3);
}

uint64_t DebugHook.debugHandlers.getter()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t result;
  int64_t v5;
  int v6;
  int v7;
  char v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 16));
  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v15;
    result = specialized Set.startIndex.getter(v1);
    v5 = result;
    v7 = v6;
    v9 = v8 & 1;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(v1 + 32))
    {
      if (((*(_QWORD *)(v1 + 56 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
        goto LABEL_13;
      if (*(_DWORD *)(v1 + 36) != v7)
        goto LABEL_14;
      v10 = *(_QWORD *)(v15 + 16);
      v11 = *(_QWORD *)(v15 + 24);
      v14 = *(_OWORD *)(*(_QWORD *)(v1 + 48) + 16 * v5);
      swift_unknownObjectRetain();
      if (v10 >= v11 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v10 + 1, 1);
      *(_QWORD *)(v15 + 16) = v10 + 1;
      *(_OWORD *)(v15 + 16 * v10 + 32) = v14;
      result = specialized _NativeSet.index(after:)(v5, v7, v9 & 1, v1);
      v5 = result;
      v7 = v12;
      v9 = v13 & 1;
      if (!--v2)
      {
        outlined consume of Set<DebugHook.Handler>.Index._Variant(result, v12, v13 & 1);
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
LABEL_11:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 16));
    return v3;
  }
  return result;
}

uint64_t DebugHook.__deallocating_deinit()
{
  uint64_t v0;

  MEMORY[0x18D77ADB0](*(_QWORD *)(v0 + 16), -1, -1);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

BOOL specialized Set.contains(_:)(Swift::UInt a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v5 = Hasher._finalize()();
  v6 = -1 << *(_BYTE *)(a3 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(a3 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = ~v6;
  do
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v7);
    result = v9 == a1;
    if (v9 == a1)
      break;
    v7 = (v7 + 1) & v8;
  }
  while (((*(_QWORD *)(a3 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  return result;
}

_QWORD *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_Introspection>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _Introspection);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void specialized static DebugHook.enable(_:)(Swift::UInt a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
  os_unfair_lock_t *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  _QWORD v10[2];

  if (one-time initialization token for globalLock != -1)
    swift_once();
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  v6 = (os_unfair_lock_t *)static DebugHook.globalHook;
  if (static DebugHook.globalHook)
  {
    v7 = (os_unfair_lock_s *)*((_QWORD *)static DebugHook.globalHook + 2);
    swift_retain();
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_unknownObjectRetain();
    specialized Set._Variant.insert(_:)((uint64_t)v10, a1, a4);
    swift_endAccess();
    swift_unknownObjectRelease();
    os_unfair_lock_unlock(v6[2]);
  }
  else
  {
    v8 = swift_allocObject();
    v9 = (os_unfair_lock_s *)swift_slowAlloc();
    v9->_os_unfair_lock_opaque = 0;
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)(v8 + 24) = MEMORY[0x1E0DEE9E8];
    os_unfair_lock_lock(v9);
    swift_beginAccess();
    swift_unknownObjectRetain();
    specialized Set._Variant.insert(_:)((uint64_t)v10, a1, a4);
    swift_endAccess();
    swift_unknownObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
    static DebugHook.globalHook = (_UNKNOWN *)v8;
  }
  swift_release();
  os_unfair_lock_unlock((os_unfair_lock_t)static DebugHook.globalLock);
}

void specialized static DebugHook.disable(_:)()
{
  void *v0;
  os_unfair_lock_s *v1;
  Swift::UInt v2;
  uint64_t v3;

  if (one-time initialization token for globalLock != -1)
    swift_once();
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  v0 = static DebugHook.globalHook;
  if (static DebugHook.globalHook)
  {
    v1 = (os_unfair_lock_s *)*((_QWORD *)static DebugHook.globalHook + 2);
    swift_retain();
    os_unfair_lock_lock(v1);
    swift_beginAccess();
    v2 = swift_unknownObjectRetain();
    specialized Set._Variant.remove(_:)(v2);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v3 = *(_QWORD *)(*((_QWORD *)v0 + 3) + 16);
    os_unfair_lock_unlock(*((os_unfair_lock_t *)v0 + 2));
    if (!v3)
    {
      static DebugHook.globalHook = 0;
      swift_release();
    }
    swift_release();
    os_unfair_lock_unlock((os_unfair_lock_t)static DebugHook.globalLock);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)static DebugHook.globalLock);
  }
}

BOOL specialized static DebugHook.handlerIsEnabled(_:)(Swift::UInt a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  os_unfair_lock_s *v7;
  BOOL v8;

  if (one-time initialization token for globalLock != -1)
    swift_once();
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  v6 = static DebugHook.globalHook;
  if (static DebugHook.globalHook)
  {
    v7 = (os_unfair_lock_s *)*((_QWORD *)static DebugHook.globalHook + 2);
    swift_retain();
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    v8 = specialized Set.contains(_:)(a1, a4, *((_QWORD *)v6 + 3));
    os_unfair_lock_unlock(*((os_unfair_lock_t *)v6 + 2));
    swift_release();
  }
  else
  {
    v8 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)static DebugHook.globalLock);
  return v8;
}

uint64_t dispatch thunk of _Introspection.willReceive<A, B>(publisher:subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8))();
}

uint64_t dispatch thunk of _Introspection.didReceive<A, B>(publisher:subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t dispatch thunk of _Introspection.willReceive<A>(subscriber:subscription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of _Introspection.didReceive<A>(subscriber:subscription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of _Introspection.willReceive<A>(subscriber:input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of _Introspection.didReceive<A>(subscriber:input:resultingDemand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t dispatch thunk of _Introspection.willReceive<A>(subscriber:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of _Introspection.didReceive<A>(subscriber:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 64))();
}

uint64_t dispatch thunk of _Introspection.willRequest(subscription:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of _Introspection.didRequest(subscription:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of _Introspection.willCancel(subscription:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of _Introspection.didCancel(subscription:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of SubscriberTapMarker.inner.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

_OWORD *initializeBufferWithCopyOfBuffer for DebugHook.Handler(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for DebugHook.Handler()
{
  return swift_unknownObjectRelease();
}

_QWORD *assignWithCopy for DebugHook.Handler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v3;
  return a1;
}

_OWORD *assignWithTake for DebugHook.Handler(_OWORD *a1, _OWORD *a2)
{
  swift_unknownObjectRelease();
  *a1 = *a2;
  return a1;
}

ValueMetadata *type metadata accessor for DebugHook.Handler()
{
  return &type metadata for DebugHook.Handler;
}

uint64_t *initializeBufferWithCopyOfBuffer for SubscriberTap(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)(v11 + 24);
    if (v12 < 0xFFFFFFFF)
    {
      v13 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *(_OWORD *)(v10 + 16) = v13;
    }
    else
    {
      *(_QWORD *)(v10 + 24) = v12;
      (**(void (***)(void))(v12 - 8))();
    }
  }
  return v4;
}

unint64_t destroy for SubscriberTap(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  result = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(result + 24) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

uint64_t initializeWithCopy for SubscriberTap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 24);
  if (v9 < 0xFFFFFFFF)
  {
    v10 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v10;
  }
  else
  {
    *(_QWORD *)(v7 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
  }
  return a1;
}

uint64_t assignWithCopy for SubscriberTap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 24);
  if (*(_QWORD *)(v7 + 24) < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(v7 + 24) = v9;
      (**(void (***)(unint64_t, unint64_t))(v9 - 8))(v7, v8);
      return a1;
    }
LABEL_7:
    v10 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v10;
    return a1;
  }
  if (v9 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(v7);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v7, (uint64_t *)v8);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithTake for SubscriberTap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  return a1;
}

uint64_t assignWithTake for SubscriberTap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *(_OWORD *)v7 = *v8;
  *(_OWORD *)(v7 + 16) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriberTap(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x18);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B5B41B0 + 4 * byte_18B5F85E0[v10]))();
  }
}

void storeEnumTagSinglePayload for SubscriberTap(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B5B4330()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B43B8);
}

void sub_18B5B4338(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B5B4340);
  JUMPOUT(0x18B5B43B8);
}

void sub_18B5B4388()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B43B8);
}

void sub_18B5B4390()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B43B8);
}

uint64_t sub_18B5B4398(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x18B5B43A4);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 24) = a2;
LABEL_6:
    JUMPOUT(0x18B5B43B8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

unint64_t lazy protocol witness table accessor for type DebugHook.Handler and conformance DebugHook.Handler()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DebugHook.Handler and conformance DebugHook.Handler;
  if (!lazy protocol witness table cache variable for type DebugHook.Handler and conformance DebugHook.Handler)
  {
    result = MEMORY[0x18D77ACE4](&protocol conformance descriptor for DebugHook.Handler, &type metadata for DebugHook.Handler);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DebugHook.Handler and conformance DebugHook.Handler);
  }
  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in SubscriberTap<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t outlined consume of Set<DebugHook.Handler>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_18B5B4440()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t outlined init with copy of SubscriptionTap(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of SubscriptionTap(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18B5B4510()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcSSycfU0_TA_0()
{
  uint64_t v0;

  return closure #2 in AnySubscriber.init<A>(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_18B5B4554()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_18B5B45AC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU4_TA_0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #6 in AnySubscriber.init<A>(_:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU3_TA_0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #5 in AnySubscriber.init<A>(_:)((_QWORD *)(v1 + 16), a1);
}

uint64_t _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU2_TA_0()
{
  uint64_t v0;

  return closure #4 in AnySubscriber.init<A>(_:)((_QWORD *)(v0 + 16));
}

uint64_t _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcSSycfU_TA_0()
{
  uint64_t v0;

  return closure #1 in AnySubscriber.init<A>(_:)((_QWORD *)(v0 + 16));
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for SubscriptionTap(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

ValueMetadata *type metadata accessor for SubscriptionTap()
{
  return &type metadata for SubscriptionTap;
}

Swift::Int ConduitBase.hashValue.getter()
{
  Swift::UInt v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

uint64_t initializeBufferWithCopyOfBuffer for ConduitList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ConduitList<A, Never><A>(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for ConduitList(uint64_t a1)
{
  return outlined consume of ConduitList<A, Never><A>(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for ConduitList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ConduitList<A, Never><A>(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of ConduitList<A, Never><A>(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for ConduitList(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of ConduitList<A, Never><A>(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConduitList(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConduitList(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ConduitList(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for ConduitList(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConduitBase<A, B>()
{
  return ConduitBase.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ConduitBase<A, B>()
{
  ConduitBase.hash(into:)();
}

uint64_t AsyncPublisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t AsyncPublisher.Iterator.Inner.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  AsyncPublisher.Iterator.Inner.init()();
  return v0;
}

uint64_t AsyncPublisher.Iterator.Inner.init()()
{
  uint64_t v0;
  _DWORD *v1;

  v1 = (_DWORD *)swift_slowAlloc();
  *v1 = 0;
  *(_QWORD *)(v0 + 16) = v1;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  type metadata accessor for UnsafeContinuation();
  *(_QWORD *)(v0 + 24) = Array.init()();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  return v0;
}

uint64_t *AsyncPublisher.Iterator.Inner.deinit()
{
  return AsyncPublisher.Iterator.Inner.deinit((uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for AsyncPublisher.Iterator.Inner.State);
}

uint64_t AsyncPublisher.Iterator.Inner.__deallocating_deinit()
{
  AsyncPublisher.Iterator.Inner.deinit((uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for AsyncPublisher.Iterator.Inner.State);
  return swift_deallocClassInstance();
}

void AsyncPublisher.Iterator.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  v6 = type metadata accessor for AsyncPublisher.Iterator.Inner.State(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v7 + 16))(v14, v1 + 4, v6);
  v8 = v15;
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v14, v6);
  if (v8)
  {
    os_unfair_lock_unlock(v4);
    v10 = a1[3];
    v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 8) + 8))(v10);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v14);
    swift_beginAccess();
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v7 + 40))(v1 + 4, v14, v6);
    swift_endAccess();
    v11 = v1[9];
    v1[9] = 0;
    os_unfair_lock_unlock(v4);
    if (v11)
    {
      v12 = a1[3];
      v13 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v11, v12, v13);
    }
  }
}

uint64_t AsyncPublisher.Iterator.Inner.receive(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Bool IsNativeType;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD v23[5];
  _BYTE v24[24];
  unint64_t v25;

  v4 = *(_QWORD *)(*v1 + 80);
  v3 = *(_QWORD *)(*v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v23 - v8;
  v10 = v1[2];
  os_unfair_lock_lock((os_unfair_lock_t)v10);
  swift_beginAccess();
  v12 = type metadata accessor for AsyncPublisher.Iterator.Inner.State(0, v4, v3, v11);
  v23[0] = *(_QWORD *)(v12 - 8);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v23[0] + 16))(v24, v1 + 4, v12);
  v13 = (uint64_t)(v1 + 3);
  if (v25 < 2)
  {
    swift_beginAccess();
    a1 = *(_QWORD *)v13;
    swift_beginAccess();
    v14 = type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    swift_bridgeObjectRetain();
    Array.removeAll(keepingCapacity:)(0);
    swift_endAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)v10);
    if (MEMORY[0x18D77A3A8](a1, v14))
    {
      v13 = 4;
      do
      {
        v15 = v13 - 4;
        IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          v10 = *(_QWORD *)(a1 + 8 * v13);
          v17 = __OFADD__(v15, 1);
          v18 = v13 - 3;
          if (v17)
            goto LABEL_10;
        }
        else
        {
          v10 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          v17 = __OFADD__(v15, 1);
          v18 = v13 - 3;
          if (v17)
          {
LABEL_10:
            __break(1u);
            goto LABEL_11;
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v9, 1, 1, AssociatedTypeWitness);
        (*(void (**)(_QWORD, char *, uint64_t))(v7 + 32))(*(_QWORD *)(*(_QWORD *)(v10 + 64) + 40), v9, v6);
        swift_continuation_resume();
        ++v13;
      }
      while (v18 != MEMORY[0x18D77A3A8](a1, v14));
    }
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
LABEL_11:
  swift_beginAccess();
  v23[2] = *(_QWORD *)v13;
  type metadata accessor for UnsafeContinuation();
  v19 = type metadata accessor for Array();
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF50], v19);
  if ((Collection.isEmpty.getter() & 1) == 0)
  {
    swift_beginAccess();
    MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF58], v19);
    RangeReplaceableCollection.removeFirst()();
    swift_endAccess();
    v20 = v23[1];
    os_unfair_lock_unlock((os_unfair_lock_t)v10);
    v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v9, a1, AssociatedTypeWitness);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v9, 0, 1, AssociatedTypeWitness);
    (*(void (**)(_QWORD, char *, uint64_t))(v7 + 32))(*(_QWORD *)(*(_QWORD *)(v20 + 64) + 40), v9, v6);
    swift_continuation_resume();
LABEL_14:
    (*(void (**)(_BYTE *, uint64_t))(v23[0] + 8))(v24, v12);
    return 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v10);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall AsyncPublisher.Iterator.Inner.cancel()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Bool v14;
  uint64_t v15;
  BOOL v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Bool IsNativeType;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_t v23;
  uint64_t v24;
  _QWORD v25[3];
  __int128 v26;
  _QWORD v27[3];
  __int128 v28;
  __int128 v29;
  unint64_t v30;

  v1 = *(_QWORD *)(*v0 + 80);
  v24 = *(_QWORD *)(*v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v22 - v5;
  v23 = (os_unfair_lock_t)v0[2];
  os_unfair_lock_lock(v23);
  swift_beginAccess();
  v7 = v0[3];
  swift_beginAccess();
  v8 = type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  v9 = (uint64_t)(v0 + 4);
  swift_beginAccess();
  v11 = type metadata accessor for AsyncPublisher.Iterator.Inner.State(0, v1, v24, v10);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v12 + 16))(&v29, v9, v11);
  if (v30 >= 2)
  {
LABEL_11:
    outlined init with take of Subscription(&v29, (uint64_t)v27);
    memset(v25, 0, sizeof(v25));
    v26 = xmmword_18B5F41F0;
    swift_beginAccess();
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v12 + 40))(v9, v25, v11);
    swift_endAccess();
    os_unfair_lock_unlock(v23);
    v17 = v28;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v17 + 1) + 8) + 8))(v17);
    if (MEMORY[0x18D77A3A8](v7, v8))
    {
      v18 = 4;
      do
      {
        v19 = v18 - 4;
        IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          v21 = *(_QWORD *)(v7 + 8 * v18);
          v16 = __OFADD__(v19, 1);
          v11 = v18 - 3;
          if (v16)
            goto LABEL_19;
        }
        else
        {
          v21 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          v16 = __OFADD__(v19, 1);
          v11 = v18 - 3;
          if (v16)
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v6, 1, 1, AssociatedTypeWitness);
        (*(void (**)(_QWORD, char *, uint64_t))(v4 + 32))(*(_QWORD *)(*(_QWORD *)(v21 + 64) + 40), v6, v3);
        swift_continuation_resume();
        ++v18;
      }
      while (v11 != MEMORY[0x18D77A3A8](v7, v8));
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  else
  {
    memset(v27, 0, sizeof(v27));
    v28 = xmmword_18B5F41F0;
    swift_beginAccess();
    v24 = v12;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v12 + 40))(v9, v27, v11);
    swift_endAccess();
    os_unfair_lock_unlock(v23);
    if (!MEMORY[0x18D77A3A8](v7, v8))
      goto LABEL_20;
    v9 = 4;
    do
    {
      v13 = v9 - 4;
      v14 = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (v14)
      {
        v15 = *(_QWORD *)(v7 + 8 * v9);
        v16 = __OFADD__(v13, 1);
        v12 = v9 - 3;
        if (v16)
          goto LABEL_10;
      }
      else
      {
        v15 = _ArrayBuffer._getElementSlowPath(_:)();
        swift_unknownObjectRelease();
        v16 = __OFADD__(v13, 1);
        v12 = v9 - 3;
        if (v16)
        {
LABEL_10:
          __break(1u);
          goto LABEL_11;
        }
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v6, 1, 1, AssociatedTypeWitness);
      (*(void (**)(_QWORD, char *, uint64_t))(v4 + 32))(*(_QWORD *)(*(_QWORD *)(v15 + 64) + 40), v6, v3);
      swift_continuation_resume();
      ++v9;
    }
    while (v12 != MEMORY[0x18D77A3A8](v7, v8));
LABEL_20:
    swift_bridgeObjectRelease();
    (*(void (**)(__int128 *, uint64_t))(v24 + 8))(&v29, v11);
  }
}

uint64_t AsyncPublisher.Iterator.Inner.next()(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

uint64_t AsyncPublisher.Iterator.Inner.next()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  char *v4;

  v4 = (char *)&async function pointer to withUnsafeContinuation<A>(isolation:_:)
     + async function pointer to withUnsafeContinuation<A>(isolation:_:);
  v1 = (_QWORD *)swift_task_alloc();
  v0[5] = v1;
  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for Optional();
  *v1 = v0;
  v1[1] = AsyncPublisher.Iterator.Inner.next();
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, void (*)(uint64_t), _QWORD, uint64_t))v4)(v0[2], 0, 0, partial apply for closure #1 in AsyncPublisher.Iterator.Inner.next(), v0[3], v2);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void closure #1 in AsyncPublisher.Iterator.Inner.next()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(_QWORD *)(*a2 + 80);
  v4 = *(_QWORD *)(*a2 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v20 - v9;
  v11 = (os_unfair_lock_s *)a2[2];
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  v13 = type metadata accessor for AsyncPublisher.Iterator.Inner.State(0, v5, v4, v12);
  (*(void (**)(__int128 *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(&v24, a2 + 4, v13);
  if (!v25)
  {
    v20[1] = a1;
    swift_beginAccess();
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    v14 = a2[9];
    v15 = 0x8000000000000000;
    if (v14 != 0x8000000000000000)
    {
      if (v14 < 0)
      {
        __break(1u);
        return;
      }
      v16 = __OFADD__(v14, 1);
      v17 = v14 + 1;
      if (!v16)
        v15 = v17;
    }
    a2[9] = v15;
    os_unfair_lock_unlock(v11);
    return;
  }
  if (v25 == 1)
  {
    os_unfair_lock_unlock(v11);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v10, 1, 1, AssociatedTypeWitness);
    (*(void (**)(_QWORD, char *, uint64_t))(v8 + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40), v10, v7);
    swift_continuation_resume();
  }
  else
  {
    outlined init with take of Subscription(&v24, (uint64_t)v21);
    v20[4] = a1;
    swift_beginAccess();
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    v18 = v22;
    v19 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 24))(1, v18, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
}

void protocol witness for Subscriber.receive(subscription:) in conformance AsyncPublisher<A>.Iterator.Inner(_QWORD *a1)
{
  AsyncPublisher.Iterator.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance AsyncPublisher<A>.Iterator.Inner(uint64_t a1)
{
  AsyncPublisher.Iterator.Inner.receive(_:)(a1);
  return 0;
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance AsyncPublisher<A>.Iterator.Inner()
{
  return specialized AsyncPublisher.Iterator.Inner.receive(completion:)();
}

void protocol witness for Cancellable.cancel() in conformance AsyncPublisher<A>.Iterator.Inner()
{
  AsyncPublisher.Iterator.Inner.cancel()();
}

uint64_t AsyncPublisher.Iterator.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v9 = type metadata accessor for AsyncPublisher.Iterator.Inner(0, a2, a3, a4);
  v10 = swift_allocObject();
  AsyncPublisher.Iterator.Inner.init()();
  type metadata accessor for AnyCancellable();
  v14 = v10;
  swift_retain_n();
  v11 = AnyCancellable.__allocating_init<A>(_:)((uint64_t)&v14, v9, (uint64_t)&protocol witness table for AsyncPublisher<A>.Iterator.Inner);
  v14 = v10;
  v12 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for AsyncPublisher<A>.Iterator.Inner, v9);
  Publisher.subscribe<A>(_:)((uint64_t)&v14, a2, v9, a3, v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  result = swift_release();
  *a5 = v10;
  a5[1] = v11;
  return result;
}

uint64_t AsyncPublisher.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t AsyncPublisher.Iterator.next()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[3];
  v2 = (uint64_t *)v0[4];
  v3 = *v2;
  v0[5] = *v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[6] = v4;
  v4[2] = *(_QWORD *)(v1 + 16);
  v4[3] = *(_QWORD *)(v1 + 24);
  v4[4] = v2;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to withTaskCancellationHandler<A>(handler:operation:)
                                                                                    + async function pointer to withTaskCancellationHandler<A>(handler:operation:));
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc();
  v0[7] = v5;
  swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  *v5 = v0;
  v5[1] = AsyncPublisher.Iterator.next();
  return v8(v0[2], (uint64_t)partial apply for closure #1 in AsyncPublisher.Iterator.next(), v3, (uint64_t)&async function pointer to partial apply for closure #2 in AsyncPublisher.Iterator.next(), (uint64_t)v4, v6);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #2 in AsyncPublisher.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t closure #2 in AsyncPublisher.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = **(_QWORD ***)(v0 + 24);
  *(_QWORD *)(v0 + 32) = v1;
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = closure #2 in AsyncPublisher.Iterator.next();
  v2[2] = *(_QWORD *)(v0 + 16);
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t partial apply for closure #2 in AsyncPublisher.Iterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #2 in AsyncPublisher.Iterator.next();
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncPublisher<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncPublisher<A>.Iterator;
  v6[3] = a2;
  v6[4] = v2;
  v6[2] = a1;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncPublisher<A>.Iterator()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t _s7Combine14AsyncPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = _s7Combine14AsyncPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF();
}

uint64_t _s7Combine14AsyncPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t AsyncPublisher.makeAsyncIterator()(uint64_t a1)
{
  return AsyncPublisher.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, _QWORD))AsyncPublisher.Iterator.init(_:));
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncPublisher<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncPublisher<A>(a1, a2, (void (*)(void))AsyncPublisher.makeAsyncIterator());
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  AsyncThrowingPublisher.Iterator.Inner.init()();
  return v0;
}

uint64_t *AsyncThrowingPublisher.Iterator.Inner.deinit()
{
  return AsyncPublisher.Iterator.Inner.deinit((uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State);
}

uint64_t *AsyncPublisher.Iterator.Inner.deinit(uint64_t (*a1)(_QWORD, _QWORD, _QWORD))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  MEMORY[0x18D77ADB0](v1[2], -1, -1);
  swift_bridgeObjectRelease();
  v4 = a1(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88));
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v1 + 4, v4);
  return v1;
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.__deallocating_deinit()
{
  AsyncPublisher.Iterator.Inner.deinit((uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State);
  return swift_deallocClassInstance();
}

uint64_t UnsafeContinuation.resume(returning:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 40), a1);
  return swift_continuation_throwingResume();
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.next()(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

uint64_t AsyncThrowingPublisher.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t closure #2 in AsyncThrowingPublisher.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t _s7Combine22AsyncThrowingPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = _s7Combine22AsyncThrowingPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF();
}

uint64_t _s7Combine22AsyncThrowingPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (v0)
    **(_QWORD **)(v2 + 24) = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncPublisher<A>()
{
  JUMPOUT(0x18D77ACE4);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingPublisher<A>()
{
  JUMPOUT(0x18D77ACE4);
}

uint64_t type metadata accessor for AsyncPublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncPublisher);
}

uint64_t type metadata accessor for AsyncPublisher.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncPublisher.Iterator);
}

uint64_t type metadata accessor for AsyncPublisher.Iterator.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncPublisher.Iterator.Inner);
}

uint64_t getEnumTagSinglePayload for AsyncPublisher(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18B5B6024 + 4 * byte_18B5F88B0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AsyncPublisher(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_QWORD *initializeBufferWithCopyOfBuffer for AsyncPublisher.Iterator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AsyncPublisher.Iterator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AsyncPublisher.Iterator(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t assignWithCopy for AsyncThrowingPublisher.Iterator.Inner.State(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      MEMORY[0x18D77ABF4](*(_QWORD *)a1);
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v7 = *a2;
      MEMORY[0x18D77AC00](v7);
      *(_QWORD *)a1 = v7;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v8 = *(_OWORD *)a2;
      v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      v6 = a2[3];
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t type metadata accessor for AsyncPublisher.Iterator.Inner.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncPublisher.Iterator.Inner.State);
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (__isPlatformVersionAtLeast(2, 18, 0, 0))
  {
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v8 + 24) = v17;
    *v17 = v8;
    v17[1] = withTaskCancellationHandler<A>(operation:onCancel:isolation:);
    return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
  }
  else
  {
    v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to back deployment fallback for withTaskCancellationHandler<A>(operation:onCancel:isolation:) + async function pointer to back deployment fallback for withTaskCancellationHandler<A>(operation:onCancel:isolation:));
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v8 + 16) = v19;
    *v19 = v8;
    v19[1] = partial apply for closure #2 in AsyncPublisher.Iterator.next();
    return v20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  return MEMORY[0x1E0DF0E78]();
}

uint64_t back deployment fallback for withTaskCancellationHandler<A>(operation:onCancel:isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[5] = a4;
  v6[6] = a5;
  v6[3] = a2;
  v6[4] = a3;
  v6[2] = a1;
  if (a6)
  {
    swift_getObjectType();
    v7 = dispatch thunk of Actor.unownedExecutor.getter();
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v6[7] = v7;
  v6[8] = v9;
  return swift_task_switch();
}

uint64_t back deployment fallback for withTaskCancellationHandler<A>(operation:onCancel:isolation:)()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = (int *)v0[3];
  v0[9] = swift_task_addCancellationHandler();
  v4 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[10] = v2;
  *v2 = v0;
  v2[1] = back deployment fallback for withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  return v4(v0[2]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_removeCancellationHandler();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_removeCancellationHandler();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized AsyncPublisher.Iterator.Inner.receive(completion:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Bool IsNativeType;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _BYTE v20[24];
  _QWORD v21[3];
  __int128 v22;

  v2 = *(_QWORD *)(*v0 + 80);
  v1 = *(_QWORD *)(*v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v20[-v6];
  v8 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v8);
  memset(v21, 0, sizeof(v21));
  v22 = xmmword_18B5F41F0;
  swift_beginAccess();
  v10 = type metadata accessor for AsyncPublisher.Iterator.Inner.State(0, v2, v1, v9);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v0 + 4, v21, v10);
  swift_endAccess();
  swift_beginAccess();
  v11 = v0[3];
  swift_beginAccess();
  v12 = type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  os_unfair_lock_unlock(v8);
  if (MEMORY[0x18D77A3A8](v11, v12))
  {
    v13 = 4;
    do
    {
      v14 = v13 - 4;
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        v16 = *(_QWORD *)(v11 + 8 * v13);
        v17 = __OFADD__(v14, 1);
        v18 = v13 - 3;
        if (v17)
          goto LABEL_9;
      }
      else
      {
        v16 = _ArrayBuffer._getElementSlowPath(_:)();
        swift_unknownObjectRelease();
        v17 = __OFADD__(v14, 1);
        v18 = v13 - 3;
        if (v17)
        {
LABEL_9:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v7, 1, 1, AssociatedTypeWitness);
      (*(void (**)(_QWORD, _BYTE *, uint64_t))(v5 + 32))(*(_QWORD *)(*(_QWORD *)(v16 + 64) + 40), v7, v4);
      swift_continuation_resume();
      ++v13;
    }
    while (v18 != MEMORY[0x18D77A3A8](v11, v12));
  }
  return swift_bridgeObjectRelease();
}

void partial apply for closure #1 in AsyncPublisher.Iterator.Inner.next()(uint64_t a1)
{
  _QWORD *v1;

  closure #1 in AsyncPublisher.Iterator.Inner.next()(a1, v1);
}

void Publisher.prefix<A>(untilOutputFrom:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v13);
  v19 = (char *)&v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a6, v19, a2);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = v21;
  type metadata accessor for Publishers.PrefixUntilOutput();
}

uint64_t sub_18B5B6A58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void Publishers.PrefixUntilOutput.init(upstream:other:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for Publishers.PrefixUntilOutput();
}

uint64_t sub_18B5B6AE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void type metadata accessor for Publishers.PrefixUntilOutput()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.PrefixUntilOutput.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.PrefixUntilOutput.other.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

void Publishers.PrefixUntilOutput.receive<A>(subscriber:)()
{
  type metadata accessor for Publishers.PrefixUntilOutput.Inner();
}

void sub_18B5B6BA4()
{
  uint64_t v0;

  swift_allocObject();
  specialized Publishers.PrefixUntilOutput.Inner.init(_:trigger:)(v0);
}

uint64_t sub_18B5B6BD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = a1;
  v4 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>, v3);
  Publisher.subscribe<A>(_:)((uint64_t)&v6, v1, v3, v2, v4);
  return swift_release();
}

void type metadata accessor for Publishers.PrefixUntilOutput.Inner()
{
  JUMPOUT(0x18D77AC60);
}

void Publishers.PrefixUntilOutput.Inner.Termination.combineIdentifier.getter()
{
  type metadata accessor for Publishers.PrefixUntilOutput.Inner();
}

void sub_18B5B6C68()
{
  _QWORD *v0;

  CustomCombineIdentifierConvertible<>.combineIdentifier.getter(v0);
}

uint64_t Publishers.PrefixUntilOutput.Inner.Termination.receive(subscription:)(_QWORD *a1)
{
  return Publishers.PrefixUntilOutput.Inner.terminationReceive(subscription:)(a1);
}

uint64_t Publishers.PrefixUntilOutput.Inner.terminationReceive(subscription:)(_QWORD *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  char v13;

  v3 = *(os_unfair_lock_s **)(v1 + 120);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 72, (uint64_t)&v10);
  if (v13 == 2
    && (v4 = vorrq_s8(v11, v12),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | v10)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v10);
    v13 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v10, v1 + 72);
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    v8 = a1[3];
    v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(1, v8, v9);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    os_unfair_lock_unlock(v3);
    v6 = a1[3];
    v5 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v6);
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination(_QWORD *a1)
{
  return Publishers.PrefixUntilOutput.Inner.Termination.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination()
{
  return specialized Publishers.PrefixUntilOutput.Inner.Termination.receive(_:)();
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination()
{
  specialized Publishers.PrefixUntilOutput.Inner.Termination.receive(completion:)();
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination()
{
  Publishers.PrefixUntilOutput.Inner.Termination.combineIdentifier.getter();
}

char *Publishers.PrefixUntilOutput.Inner.deinit()
{
  char *v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  MEMORY[0x18D77ADB0](*((_QWORD *)v0 + 15), -1, -1);
  swift_release();
  outlined destroy of SubscriptionStatus((uint64_t)(v0 + 24));
  outlined destroy of SubscriptionStatus((uint64_t)(v0 + 72));
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 96) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 184)]);
  return v0;
}

uint64_t Publishers.PrefixUntilOutput.Inner.__deallocating_deinit()
{
  Publishers.PrefixUntilOutput.Inner.deinit();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall Publishers.PrefixUntilOutput.Inner.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6[2];
  char v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = *(os_unfair_lock_s **)(v1 + 120);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 24, (uint64_t)v6);
  if (v7)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v6);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v6, (uint64_t)v8);
    os_unfair_lock_unlock(v3);
    v4 = v9;
    v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(Swift::UInt, uint64_t, uint64_t))(v5 + 24))(a1.rawValue, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
}

Swift::Void __swiftcall Publishers.PrefixUntilOutput.Inner.cancel()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  char v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v1 = *(os_unfair_lock_s **)(v0 + 120);
  os_unfair_lock_lock(v1);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v0 + 24, (uint64_t)&v4);
  if (v7)
  {
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    outlined destroy of SubscriptionStatus((uint64_t)&v4);
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v4, (uint64_t)&v11);
  }
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v0 + 72, (uint64_t)&v4);
  if (v7)
  {
    v10 = 0;
    v9 = 0u;
    v8 = 0u;
    outlined destroy of SubscriptionStatus((uint64_t)&v4);
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v4, (uint64_t)&v8);
  }
  v4 = 1;
  v5 = 0u;
  v6 = 0u;
  v7 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v4, v0 + 24);
  swift_endAccess();
  v4 = 1;
  v5 = 0u;
  v6 = 0u;
  v7 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v4, v0 + 72);
  swift_endAccess();
  *(_QWORD *)(v0 + 16) = 0;
  swift_release();
  os_unfair_lock_unlock(v1);
  if (*((_QWORD *)&v12 + 1))
  {
    outlined init with copy of Subscription((uint64_t)&v11, (uint64_t)&v4);
    v2 = v6;
    __swift_project_boxed_opaque_existential_1(&v4, v6);
    (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v2 + 1) + 8) + 8))(v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v4);
  }
  if (*((_QWORD *)&v9 + 1))
  {
    outlined init with copy of Subscription((uint64_t)&v8, (uint64_t)&v4);
    v3 = v6;
    __swift_project_boxed_opaque_existential_1(&v4, v6);
    (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v3 + 1) + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v4);
  }
  outlined destroy of Subscription?((uint64_t)&v8);
  outlined destroy of Subscription?((uint64_t)&v11);
}

uint64_t Publishers.PrefixUntilOutput.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_unfair_lock_s *v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  void (*v17)(uint64_t *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char v26;

  v3 = *(_QWORD *)v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v21 - v9;
  v11 = *(os_unfair_lock_s **)(v1 + 120);
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 24, (uint64_t)&v23);
  if (v26 == 2
    && (v12 = vorrq_s8(v24, v25),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)) | v23)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v23);
    v22 = *(unsigned __int8 *)(v1 + 113);
    if (v22 == 1)
    {
      v23 = 1;
      v24 = 0u;
      v25 = 0u;
      v26 = 2;
    }
    else
    {
      outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v23);
      v26 = 0;
    }
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v23, v1 + 24);
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    v25.i64[0] = v3;
    v25.i64[1] = (uint64_t)&protocol witness table for Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>;
    v23 = v1;
    v16 = *(_QWORD *)(v3 + 128);
    v17 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 40);
    v18 = *(_QWORD *)(v3 + 96);
    swift_retain();
    v17(&v23, v18, v16);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
    if (v22)
    {
      v20 = a1[3];
      v19 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v20);
      (*(void (**)(uint64_t))(*(_QWORD *)(v19 + 8) + 8))(v20);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v10, 1, 1, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 56))(v10, v18, v16);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v23);
    os_unfair_lock_unlock(v11);
    v14 = a1[3];
    v13 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v14);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 8) + 8))(v14);
  }
  return result;
}

uint64_t Publishers.PrefixUntilOutput.Inner.receive(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  int v5;
  uint64_t result;
  _BYTE v7[48];

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[15];
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 3), (uint64_t)v7);
  v5 = v7[40];
  outlined destroy of SubscriptionStatus((uint64_t)v7);
  os_unfair_lock_unlock(v4);
  result = 0;
  if (!v5)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 128) + 48))(a1, *(_QWORD *)(v3 + 96));
  return result;
}

uint64_t Publishers.PrefixUntilOutput.Inner.receive(completion:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  os_unfair_lock_s *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[32];
  uint64_t v17;

  v2 = v1;
  v4 = *v1;
  v5 = (os_unfair_lock_s *)v1[15];
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v2 + 3), (uint64_t)&v9);
  if (v12)
  {
    v17 = 0;
    memset(v16, 0, sizeof(v16));
    outlined destroy of SubscriptionStatus((uint64_t)&v9);
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v9, (uint64_t)v16);
  }
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v2 + 9), (uint64_t)&v9);
  if (v12)
  {
    v15 = 0;
    v14 = 0u;
    v13 = 0u;
    outlined destroy of SubscriptionStatus((uint64_t)&v9);
  }
  else
  {
    outlined init with take of Subscription((__int128 *)&v9, (uint64_t)&v13);
  }
  v9 = 1;
  v10 = 0u;
  v11 = 0u;
  v12 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v9, (uint64_t)(v2 + 3));
  swift_endAccess();
  v9 = 1;
  v10 = 0u;
  v11 = 0u;
  v12 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v9, (uint64_t)(v2 + 9));
  swift_endAccess();
  v2[2] = 0;
  swift_release();
  os_unfair_lock_unlock(v5);
  if (*((_QWORD *)&v14 + 1))
  {
    outlined init with copy of Subscription((uint64_t)&v13, (uint64_t)&v9);
    v6 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, v11);
    (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8) + 8))(v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  outlined init with copy of Subscription?((uint64_t)v16, (uint64_t)&v9);
  v7 = v11;
  outlined destroy of Subscription?((uint64_t)&v9);
  if (v7)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 + 128) + 56))(a1, *(_QWORD *)(v4 + 96));
  outlined destroy of Subscription?((uint64_t)v16);
  return outlined destroy of Subscription?((uint64_t)&v13);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>(Combine::Subscribers::Demand a1)
{
  Publishers.PrefixUntilOutput.Inner.request(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>(_QWORD *a1)
{
  return Publishers.PrefixUntilOutput.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>(uint64_t a1)
{
  return Publishers.PrefixUntilOutput.Inner.receive(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>(uint64_t a1)
{
  return Publishers.PrefixUntilOutput.Inner.receive(completion:)(a1);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>()
{
  Publishers.PrefixUntilOutput.Inner.cancel()();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.PrefixUntilOutput<A, B>()
{
  Publishers.PrefixUntilOutput.receive<A>(subscriber:)();
}

void specialized Publishers.PrefixUntilOutput.Inner.terminationReceive(completion:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  char v5;

  v1 = *(os_unfair_lock_s **)(v0 + 120);
  os_unfair_lock_lock(v1);
  v2 = 1;
  v3 = 0u;
  v4 = 0u;
  v5 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v2, v0 + 72);
  swift_endAccess();
  *(_QWORD *)(v0 + 16) = 0;
  swift_release();
  os_unfair_lock_unlock(v1);
}

void specialized Publishers.PrefixUntilOutput.Inner.Termination.receive(completion:)()
{
  specialized Publishers.PrefixUntilOutput.Inner.terminationReceive(completion:)();
}

void specialized Publishers.PrefixUntilOutput.Inner.init(_:trigger:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _DWORD *v4;

  v3 = *v1;
  *((_OWORD *)v1 + 1) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_BYTE *)v1 + 64) = 2;
  *(_OWORD *)(v1 + 9) = 0u;
  *(_OWORD *)(v1 + 11) = 0u;
  v1[13] = 0;
  *((_WORD *)v1 + 56) = 2;
  v4 = (_DWORD *)swift_slowAlloc();
  *v4 = 0;
  v1[15] = (uint64_t)v4;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v3 + 96) - 8) + 16))((uint64_t)v1 + *(_QWORD *)(*v1 + 184), a1, *(_QWORD *)(v3 + 96));
  v1[2] = (uint64_t)v1;
  swift_retain_n();
  swift_release();
  type metadata accessor for Publishers.PrefixUntilOutput.Inner.Termination();
}

uint64_t sub_18B5B7974(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination, a1);
  Publisher.subscribe<A>(_:)(v3 - 56, v7, a1, v2, v5);
  swift_release();
  return v1;
}

uint64_t getEnumTagSinglePayload for Publishers.PrefixUntilOutput(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18B5B7AA4 + 4 * byte_18B5F8C00[v17 - 1]))();
}

void storeEnumTagSinglePayload for Publishers.PrefixUntilOutput(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata completion function for Publishers.PrefixUntilOutput.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata instantiation function for Publishers.PrefixUntilOutput.Inner.Termination()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for Publishers.PrefixUntilOutput.Inner.Termination()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t specialized Publishers.PrefixUntilOutput.Inner.terminationReceive(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  os_unfair_lock_s *v10;
  int v11;
  __int128 v12;
  _BYTE v14[24];
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  unsigned __int8 v21;

  v1 = v0;
  v2 = *v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v14[-v8];
  v10 = (os_unfair_lock_s *)v0[15];
  os_unfair_lock_lock(v10);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 9), (uint64_t)&v18);
  v11 = v21;
  outlined destroy of SubscriptionStatus((uint64_t)&v18);
  if (v11)
  {
    os_unfair_lock_unlock(v10);
  }
  else
  {
    swift_beginAccess();
    outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 3), (uint64_t)&v18);
    if (v21)
    {
      v17 = 0;
      v15 = 0u;
      v16 = 0u;
      outlined destroy of SubscriptionStatus((uint64_t)&v18);
    }
    else
    {
      outlined init with take of Subscription((__int128 *)&v18, (uint64_t)&v15);
    }
    v18 = 1;
    v19 = 0u;
    v20 = 0u;
    v21 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v18, (uint64_t)(v1 + 3));
    swift_endAccess();
    v18 = 1;
    v19 = 0u;
    v20 = 0u;
    v21 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v18, (uint64_t)(v1 + 9));
    swift_endAccess();
    v1[2] = 0;
    swift_release();
    *((_BYTE *)v1 + 113) = 1;
    os_unfair_lock_unlock(v10);
    if (*((_QWORD *)&v16 + 1))
    {
      outlined init with copy of Subscription((uint64_t)&v15, (uint64_t)&v18);
      v12 = v20;
      __swift_project_boxed_opaque_existential_1(&v18, v20);
      (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v12 + 1) + 8) + 8))(v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
    }
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v9, 1, 1, AssociatedTypeWitness);
    (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v2 + 128) + 56))(v9, *(_QWORD *)(v2 + 96));
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    outlined destroy of Subscription?((uint64_t)&v15);
  }
  return 0;
}

uint64_t specialized Publishers.PrefixUntilOutput.Inner.Termination.receive(_:)()
{
  return specialized Publishers.PrefixUntilOutput.Inner.terminationReceive(_:)();
}

void SubjectSubscriber.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v1);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 16));
  v14 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_18B5F5810;
  *(_QWORD *)(v7 + 32) = 0xD000000000000011;
  *(_QWORD *)(v7 + 40) = 0x800000018B5FEC20;
  v8 = MEMORY[0x18D77AE58](v0 + 24);
  v9 = type metadata accessor for Optional();
  *(_QWORD *)(v7 + 48) = v8;
  *(_QWORD *)(v7 + 72) = v9;
  *(_QWORD *)(v7 + 80) = 0xD000000000000014;
  *(_QWORD *)(v7 + 88) = 0x800000018B5FE5C0;
  swift_beginAccess();
  *(_QWORD *)(v7 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  v10 = swift_allocObject();
  *(_QWORD *)(v7 + 96) = v10;
  outlined init with copy of Subscription?(v0 + 32, v10 + 16);
  *(_QWORD *)(v7 + 128) = 0x7463656A627573;
  *(_QWORD *)(v7 + 136) = 0xE700000000000000;
  v11 = MEMORY[0x18D77AE58](v0 + 24);
  *(_QWORD *)(v7 + 168) = v9;
  *(_QWORD *)(v7 + 144) = v11;
  v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 16));
}

void SubjectSubscriber.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x7463656A627553;
  a1[1] = 0xE700000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SubjectSubscriber<A>()
{
  return 0x7463656A627553;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance SubjectSubscriber<A>()
{
  SubjectSubscriber.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance SubjectSubscriber<A>(_QWORD *a1@<X8>)
{
  SubjectSubscriber.playgroundDescription.getter(a1);
}

uint64_t specialized SubjectSubscriber.__allocating_init(_:)()
{
  swift_allocObject();
  return specialized SubjectSubscriber.init(_:)();
}

uint64_t dispatch thunk of Subject.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of Subject.send(completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Subject.send(subscription:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_18B5B8390()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t Publisher.reduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publisher.reduce<A>(_:_:)(a1, a2, a3, a4, a5, a6, type metadata accessor for Publishers.Reduce, a7);
}

uint64_t Publishers.Reduce.init(upstream:initial:nextPartialResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return Publishers.Reduce.init(upstream:initial:nextPartialResult:)(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for Publishers.Reduce, a8);
}

uint64_t type metadata accessor for Publishers.Reduce(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Reduce);
}

uint64_t Publisher.tryReduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publisher.reduce<A>(_:_:)(a1, a2, a3, a4, a5, a6, type metadata accessor for Publishers.TryReduce, a7);
}

uint64_t Publishers.TryReduce.init(upstream:initial:nextPartialResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return Publishers.Reduce.init(upstream:initial:nextPartialResult:)(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for Publishers.TryReduce, a8);
}

uint64_t type metadata accessor for Publishers.TryReduce(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.TryReduce);
}

uint64_t Publishers.Reduce.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

void Publishers.Reduce.receive<A>(subscriber:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  Publishers.Reduce.receive<A>(subscriber:)(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD *))type metadata accessor for Publishers.Reduce.Inner);
}

void type metadata accessor for Publishers.Reduce.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.Reduce.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (**v6)(_QWORD, _QWORD, _QWORD);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v22 = a1;
  v23 = a2;
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 448);
  v5 = type metadata accessor for Optional();
  v6 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v20 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v20 - v13;
  v21 = *(void (**)(char *, uint64_t))((char *)v2 + *(_QWORD *)(v3 + 152));
  v15 = (uint64_t)v2 + *(_QWORD *)(v3 + 136);
  swift_beginAccess();
  ((void (**)(char *, uint64_t, uint64_t))v6)[2](v12, v15, v5);
  v16 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v21(v12, v22);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v4);
    ((void (**)(char *, char *, uint64_t))v6)[4](v9, v14, v5);
    swift_beginAccess();
    ((void (**)(uint64_t, char *, uint64_t))v6)[5](v15, v9, v5);
    swift_endAccess();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion(0, MEMORY[0x1E0DEE9C0] + 8, AssociatedTypeWitness, AssociatedConformanceWitness);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Reduce<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  Publishers.Reduce.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.Reduce.initial.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t Publishers.Reduce.nextPartialResult.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 48));
  swift_retain();
  return v2;
}

void Publishers.TryReduce.receive<A>(subscriber:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  Publishers.Reduce.receive<A>(subscriber:)(a1, a2, a3, a4, (void (*)(_QWORD, _QWORD *))type metadata accessor for Publishers.TryReduce.Inner);
}

void Publishers.Reduce.receive<A>(subscriber:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];

  v9 = a2[3];
  v10 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v10);
  v11 = a2[4];
  v12[0] = a2[2];
  v12[1] = v9;
  v12[2] = a3;
  v12[3] = v11;
  v12[4] = a4;
  a5(0, v12);
  JUMPOUT(0x18B5B8764);
}

uint64_t Publishers.TryReduce.Inner.description.getter()
{
  return 0x6375646552797254;
}

uint64_t Publishers.TryReduce.Inner.receive(newValue:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (**v6)(_QWORD, _QWORD, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char *v18;
  char *v19;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 448);
  v5 = type metadata accessor for Optional();
  v6 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v19 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v19 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v19 - v12;
  v14 = *(void (**)(char *, uint64_t))((char *)v1 + *(_QWORD *)(v3 + 152));
  v15 = (uint64_t)v1 + *(_QWORD *)(v3 + 136);
  swift_beginAccess();
  ((void (**)(char *, uint64_t, uint64_t))v6)[2](v11, v15, v5);
  v16 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v11, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v14(v11, a1);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v4);
    v18 = v19;
    ((void (**)(char *, char *, uint64_t))v6)[4](v19, v13, v5);
    swift_beginAccess();
    ((void (**)(uint64_t, char *, uint64_t))v6)[5](v15, v18, v5);
    swift_endAccess();
    return 0;
  }
  return result;
}

uint64_t vtable thunk for ReduceProducer.receive(newValue:) dispatching to Publishers.TryReduce.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = Publishers.TryReduce.Inner.receive(newValue:)(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryReduce<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  Publishers.TryReduce.receive<A>(subscriber:)(a1, a4, a2, a3);
}

void type metadata accessor for Publishers.TryReduce.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t *specialized Publishers.Reduce.Inner.init(downstream:initial:reduce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[2];

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v17 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  v17[0] = a3;
  v17[1] = a4;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v14, (uint64_t)v12, (uint64_t)v17);
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Reduce(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64) + 7;
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v15, v16, v5);
    v17 = (_QWORD *)((v10 + v16) & 0xFFFFFFFFFFFFFFF8);
    v18 = v17[1];
    v19 = (_QWORD *)((v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v17;
    v19[1] = v18;
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.Reduce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.Reduce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  *(_OWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.Reduce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  *(_OWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Reduce(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64) + 7;
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v17 = (v11 + a1) & ~v10;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v17);
      }
      else
      {
        v18 = *(_QWORD *)((v12 + v17) & 0xFFFFFFFFFFFFF8);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        return (v18 + 1);
      }
    }
  }
  else
  {
    if (((((v12 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v9 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B5B8EFC + 4 * byte_18B5F8F18[v15]))();
  }
}

void storeEnumTagSinglePayload for Publishers.Reduce(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_19:
      __asm { BR              X0 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7 + ((*(_QWORD *)(v5 + 64) + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_18B5B90C0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B9150);
}

void sub_18B5B90C8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B5B90D0);
  JUMPOUT(0x18B5B9150);
}

void sub_18B5B9114()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B9150);
}

void sub_18B5B911C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B9150);
}

uint64_t sub_18B5B9124(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + v13) = 0;
  if (!a2)
    JUMPOUT(0x18B5B9150);
  if (v6 == v9)
  {
    v3 = *(uint64_t (**)(uint64_t))(v10 + 56);
    v4 = v12;
  }
  else
  {
    v4 = (v11 + v12) & v7;
    if (a3 != v9)
      JUMPOUT(0x18B5B9130);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

uint64_t type metadata completion function for Publishers.Reduce.Inner()
{
  return swift_initClassMetadata2();
}

uint64_t Publishers.CompactMap.init(upstream:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publishers.CompactMap.init(upstream:transform:)(a1, a2, a3, a4, a5, a6, type metadata accessor for Publishers.CompactMap, a7);
}

uint64_t Publisher.tryCompactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publisher.compactMap<A>(_:)(a1, a2, a3, a4, a5, type metadata accessor for Publishers.TryCompactMap, a6);
}

uint64_t Publishers.TryCompactMap.init(upstream:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publishers.CompactMap.init(upstream:transform:)(a1, a2, a3, a4, a5, a6, type metadata accessor for Publishers.TryCompactMap, a7);
}

uint64_t Publishers.CompactMap.init(upstream:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  uint64_t result;
  _QWORD *v16;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a8, a1, a4);
  result = a7(0, a4, a5, a6);
  v16 = (_QWORD *)(a8 + *(int *)(result + 44));
  *v16 = a2;
  v16[1] = a3;
  return result;
}

uint64_t type metadata accessor for Publishers.TryCompactMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.TryCompactMap);
}

uint64_t Publishers.CompactMap.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

void Publishers.CompactMap.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x4D746361706D6F43;
  a1[1] = 0xEA00000000007061;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.CompactMap<A, B>.Inner<A1>()
{
  return 0x4D746361706D6F43;
}

uint64_t Publishers.CompactMap.transform.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 44));
  swift_retain();
  return v2;
}

void Publishers.TryCompactMap.receive<A>(subscriber:)()
{
  type metadata accessor for Publishers.TryCompactMap.Inner();
}

uint64_t sub_18B5B933C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;

  v7 = (uint64_t *)(v1 + *(int *)(v2 + 44));
  v8 = *v7;
  v9 = v7[1];
  swift_allocObject();
  swift_retain();
  v12 = specialized Publishers.TryCompactMap.Inner.init(downstream:filter:)(v3, v8, v9);
  v10 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for FilterProducer<A, B, C, D, E>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v12, v4, a1, v5, v10);
  return swift_release();
}

void type metadata accessor for Publishers.TryCompactMap.Inner()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.TryCompactMap.Inner.description.getter()
{
  return 0x61706D6F43797254;
}

uint64_t Publishers.TryCompactMap.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t))(v2 + 16))(a1);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
  v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for PartialCompletion(0, v5, v9, MEMORY[0x1E0DEDB38]);
  return swift_storeEnumTagMultiPayload();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryCompactMap<A, B>()
{
  Publishers.TryCompactMap.receive<A>(subscriber:)();
}

uint64_t Publishers.TryCompactMap.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v23;
  uint64_t v24;

  v24 = a1;
  v9 = a3[2];
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t *)(v14 + *(int *)(v13 + 44));
  v16 = *v15;
  v17 = v15[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14, v9);
  v18 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))swift_allocObject();
  v19 = a3[3];
  v20 = a3[4];
  *((_QWORD *)v18 + 2) = v9;
  *((_QWORD *)v18 + 3) = v19;
  *((_QWORD *)v18 + 4) = a4;
  *((_QWORD *)v18 + 5) = v20;
  *((_QWORD *)v18 + 6) = v16;
  *((_QWORD *)v18 + 7) = v17;
  *((_QWORD *)v18 + 8) = v24;
  *((_QWORD *)v18 + 9) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, v9);
  v21 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(a5
                                                                 + *(int *)(type metadata accessor for Publishers.TryCompactMap(0, v9, a4, v20)+ 44));
  *v21 = partial apply for closure #1 in Publishers.TryCompactMap.compactMap<A>(_:);
  v21[1] = v18;
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in Publishers.TryCompactMap.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v24 = a8;
  v25 = a7;
  v22 = a3;
  v23 = a4;
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v22 - v15;
  result = a2(a1);
  if (!v8)
  {
    MEMORY[0x1E0C80A78](result);
    *(&v22 - 6) = a5;
    *(&v22 - 5) = a6;
    v18 = v25;
    *(&v22 - 4) = v25;
    *(&v22 - 3) = v19;
    v20 = v23;
    *(&v22 - 2) = v22;
    *(&v22 - 1) = v20;
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?, @error @owned Error), (uint64_t)(&v22 - 8), v21, v18, (uint64_t)&v26, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  return result;
}

uint64_t *specialized Publishers.TryCompactMap.Inner.init(downstream:filter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  v9[0] = a2;
  v9[1] = a3;
  return FilterProducer.init(downstream:filter:)((uint64_t)v6, (uint64_t)v9);
}

uint64_t partial apply for closure #1 in Publishers.TryCompactMap.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Publishers.TryCompactMap.compactMap<A>(_:)(a1, *(uint64_t (**)(uint64_t))(v2 + 48), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t getEnumTagSinglePayload for Publishers.CompactMap(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18B5B98EC + 4 * byte_18B5F9020[v10]))();
  }
}

void storeEnumTagSinglePayload for Publishers.CompactMap(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18B5B9A64()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B9ADCLL);
}

void sub_18B5B9A6C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18B5B9A74);
  JUMPOUT(0x18B5B9ADCLL);
}

void sub_18B5B9AB4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B9ADCLL);
}

void sub_18B5B9ABC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18B5B9ADCLL);
}

uint64_t sub_18B5B9AC4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18B5B9ADCLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18B5B9AD8);
    JUMPOUT(0x18B5B9AD0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for Publishers.TryCompactMap.Inner()
{
  return swift_initClassMetadata2();
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.CompactMap.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    *(_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.CompactMap.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?, @error @owned Error)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v2 + 48))();
  if (v3)
    *a2 = v3;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed B) -> (@out A1)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  (*(void (**)(void))(v1 + 48))();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a1, 0, 1, v3);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?)partial apply()
{
  return partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?)();
}

uint64_t specialized Array.init(repeating:count:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = result;
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v4 + 16) = v2;
      v5 = v4 + 32;
      do
      {
        outlined init with copy of Any?(v3, v5, &demangling cache variable for type metadata for Any?);
        v5 += 32;
        --v2;
      }
      while (v2);
    }
    else
    {
      v4 = MEMORY[0x1E0DEE9D8];
    }
    outlined destroy of CustomStringConvertible?(v3, &demangling cache variable for type metadata for Any?);
    return v4;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = result;
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
      v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v4 + 16) = v2;
      v5 = v4 + 32;
      do
      {
        outlined init with copy of Any?(v3, v5, &demangling cache variable for type metadata for Subscription?);
        v5 += 40;
        --v2;
      }
      while (v2);
    }
    else
    {
      v4 = MEMORY[0x1E0DEE9D8];
    }
    outlined destroy of CustomStringConvertible?(v3, &demangling cache variable for type metadata for Subscription?);
    return v4;
  }
  return result;
}

void Publisher.merge<A, B, C>(with:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v41 = a9;
  v42 = a8;
  v37 = a2;
  v38 = a3;
  v40 = a10;
  v39 = a11;
  v15 = *(_QWORD *)(a7 - 8);
  v35 = a1;
  v36 = v15;
  v16 = MEMORY[0x1E0C80A78](a1);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v16);
  v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x1E0C80A78](v21);
  v28 = (char *)&v34 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v34 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v30, v33, v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v35, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v37, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v18, v38, a7);
  Publishers.Merge4.init(_:_:_:_:)((uint64_t)v30, a4, v41);
}

void Publishers.Merge4.init(_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Publishers.Merge4();
}

uint64_t sub_18B5BA0B4(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v7 + a1[21], v6, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v7 + a1[22], v5, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v7 + a1[23], v4, v1);
}

void type metadata accessor for Publishers.Merge4()
{
  JUMPOUT(0x18D77AC60);
}

void Publisher.merge<A, B, C, D, E, F, G>(with:_:_:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int128 a16, __int128 a17, __int128 a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;

  v79 = a7;
  v74 = a6;
  v71 = a5;
  v68 = a4;
  v69 = a3;
  v66 = a2;
  v64 = a1;
  v81 = a8;
  v80 = a16;
  v77 = a18;
  v78 = a17;
  v75 = a20;
  v76 = a19;
  v52 = a10;
  v58 = a11;
  v59 = a12;
  v62 = a13;
  v67 = a14;
  v73 = a15;
  v72 = *(_QWORD *)(a15 - 8);
  v20 = MEMORY[0x1E0C80A78](a11);
  v70 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A78](v20);
  v63 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x1E0C80A78](v23);
  v60 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = MEMORY[0x1E0C80A78](v26);
  v32 = (char *)&v51 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = v32;
  v33 = *(_QWORD *)(v30 - 8);
  v34 = MEMORY[0x1E0C80A78](v30);
  v36 = (char *)&v51 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v36;
  v38 = *(_QWORD *)(v37 - 8);
  v39 = MEMORY[0x1E0C80A78](v34);
  v41 = (char *)&v51 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = v41;
  v55 = a9;
  v42 = *(_QWORD *)(a9 - 8);
  v43 = MEMORY[0x1E0C80A78](v39);
  v45 = (char *)&v51 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = v45;
  v57 = v46;
  MEMORY[0x1E0C80A78](v43);
  v48 = (char *)&v51 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v49 + 16))(v48, v50);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v45, v64, a9);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v41, v66, v52);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v69, v58);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v68, v59);
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v71, v62);
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v63, v74, v67);
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v70, v79, v73);
  Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v48, v81, v57);
}

void Publishers.Merge8.init(_:_:_:_:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a2, a1, a3);
  type metadata accessor for Publishers.Merge8();
}

uint64_t sub_18B5BA5E0(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v2 + a1[37], v11, v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v2 + a1[38], v12, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v2 + a1[39], v13, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v2 + a1[40], v14, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v2 + a1[41], v15, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v2 + a1[42], v16, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v2 + a1[43], v17, v4);
}

void type metadata accessor for Publishers.Merge8()
{
  JUMPOUT(0x18D77AC60);
}

uint64_t Publishers.Merge.a.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Merge.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

void Publishers.Merge.merge<A>(with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = v5;
  v26 = a5;
  v27 = a4;
  v25 = a1;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 24);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v19 + 16);
  MEMORY[0x1E0C80A78](v16);
  v22 = (char *)&v24 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v22, v6, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v6 + *(int *)(a2 + 52), v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v25, a3);
  Publishers.Merge3.init(_:_:_:)((uint64_t)v22, v20, v26);
}

void Publishers.Merge.merge<A, B>(with:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a7;
  v36 = a6;
  v32 = a5;
  v33 = a2;
  v29 = a4;
  v30 = a1;
  v34 = a8;
  v31 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v10);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v18 + 24);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v15);
  v23 = (char *)&v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(v24 + 16);
  MEMORY[0x1E0C80A78](v21);
  v27 = (char *)&v29 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v27, v8, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v8 + *(int *)(a3 + 52), v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v30, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v12, v33, v32);
  Publishers.Merge4.init(_:_:_:_:)((uint64_t)v27, v25, v34);
}

void Publishers.Merge.merge<A, B, C>(with:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v47 = a9;
  v48 = a8;
  v43 = a7;
  v44 = a3;
  v38 = a6;
  v39 = a1;
  v36 = a5;
  v45 = a11;
  v46 = a10;
  v41 = *(_QWORD *)(a7 - 8);
  v42 = a2;
  v13 = MEMORY[0x1E0C80A78](a1);
  v40 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v13);
  v37 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v17);
  v23 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(v24 + 24);
  v26 = *(_QWORD *)(v25 - 8);
  v35 = v25;
  v27 = MEMORY[0x1E0C80A78](v21);
  v29 = (char *)&v35 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(v30 + 16);
  MEMORY[0x1E0C80A78](v27);
  v33 = (char *)&v35 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v33, v11, v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, v11 + *(int *)(a4 + 52), v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v39, v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v37, v42, v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v40, v44, v43);
  Publishers.Merge5.init(_:_:_:_:_:)((uint64_t)v33, v31, v47);
}

void Publishers.Merge.merge<A, B, C, D>(with:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;

  v47 = a8;
  v48 = a1;
  v44 = a7;
  v42 = a6;
  v53 = a3;
  v54 = a4;
  v58 = a9;
  v57 = a11;
  v55 = a13;
  v56 = a12;
  v52 = a10;
  v15 = *(_QWORD *)(a10 - 8);
  v50 = a2;
  v51 = v15;
  v16 = MEMORY[0x1E0C80A78](a1);
  v49 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v45 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v19);
  v25 = (char *)v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[1] = v25;
  v27 = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x1E0C80A78](v23);
  v30 = (char *)v41 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[2] = v30;
  v32 = *(_QWORD *)(v31 + 24);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = MEMORY[0x1E0C80A78](v28);
  v36 = (char *)v41 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *(_QWORD *)(v37 + 16);
  MEMORY[0x1E0C80A78](v34);
  v39 = (char *)v41 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v40 + 16))(v39, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v13 + *(int *)(a5 + 52), v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v30, v48, v42);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, v50, v44);
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v53, v47);
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v49, v54, v52);
  Publishers.Merge6.init(_:_:_:_:_:_:)((uint64_t)v39, v43, v58);
}

void Publishers.Merge.merge<A, B, C, D, E>(with:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD v46[5];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  char *v67;

  v49 = a8;
  v47 = a7;
  v61 = a4;
  v62 = a5;
  v54 = a1;
  v66 = a9;
  v64 = a14;
  v65 = a13;
  v63 = a15;
  v51 = a10;
  v55 = a11;
  v56 = a2;
  v60 = a12;
  v17 = *(_QWORD *)(a12 - 8);
  v58 = a3;
  v59 = v17;
  v18 = MEMORY[0x1E0C80A78](a1);
  v57 = (char *)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x1E0C80A78](v18);
  v52 = (char *)v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x1E0C80A78](v21);
  v67 = (char *)v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = *(_QWORD *)(v26 - 8);
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)v46 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[2] = v29;
  v31 = *(_QWORD *)(v30 - 8);
  v32 = MEMORY[0x1E0C80A78](v27);
  v34 = (char *)v46 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[3] = v34;
  v36 = *(_QWORD *)(v35 + 24);
  v37 = *(_QWORD *)(v36 - 8);
  v46[4] = v36;
  v38 = MEMORY[0x1E0C80A78](v32);
  v40 = (char *)v46 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)(v41 + 16);
  v46[1] = v41;
  MEMORY[0x1E0C80A78](v38);
  v44 = (char *)v46 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v15, v42);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v40, v15 + *(int *)(a6 + 52), v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v34, v54, v47);
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v29, v56, v49);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v67, v58, v51);
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v61, v55);
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v57, v62, v60);
  Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v44, v42, v66);
}

void Publishers.Merge.merge<A, B, C, D, E, F>(with:_:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, __int128 a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;

  v52 = a8;
  v74 = a6;
  v71 = a5;
  v65 = a2;
  v66 = a4;
  v68 = a3;
  v62 = a1;
  v77 = a9;
  v75 = a16;
  v76 = a15;
  v72 = a18;
  v73 = a17;
  v57 = a10;
  v59 = a11;
  v61 = a12;
  v64 = a13;
  v70 = a14;
  v69 = *(_QWORD *)(a14 - 8);
  v20 = MEMORY[0x1E0C80A78](a1);
  v67 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A78](v20);
  v80 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x1E0C80A78](v23);
  v79 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = *(_QWORD *)(v28 - 8);
  v29 = MEMORY[0x1E0C80A78](v26);
  v78 = (char *)&v51 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = *(_QWORD *)(v31 - 8);
  v32 = MEMORY[0x1E0C80A78](v29);
  v34 = (char *)&v51 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v34;
  v36 = *(_QWORD *)(v35 - 8);
  v37 = MEMORY[0x1E0C80A78](v32);
  v39 = (char *)&v51 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = v39;
  v41 = *(_QWORD *)(v40 + 24);
  v42 = *(_QWORD *)(v41 - 8);
  v54 = v41;
  v43 = MEMORY[0x1E0C80A78](v37);
  v45 = (char *)&v51 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = *(_QWORD *)(v46 + 16);
  v51 = v46;
  MEMORY[0x1E0C80A78](v43);
  v49 = (char *)&v51 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v18, v47);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v45, v18 + *(int *)(a7 + 52), v41);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v39, v62, v52);
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v34, v65, v57);
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v78, v68, v59);
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v79, v66, v61);
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v80, v71, v64);
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v67, v74, v70);
  Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v49, v77, v47);
}

uint64_t Publishers.Merge3.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t Publishers.Merge3.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 72));
}

void Publishers.Merge3.merge<A>(with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = v5;
  v31 = a5;
  v32 = a4;
  v29 = a3;
  v30 = a1;
  v28 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v27 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 32);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v8);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 + 24);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v13);
  v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v22 + 16);
  MEMORY[0x1E0C80A78](v19);
  v25 = (char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v25, v6, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v6 + *(int *)(a2 + 68), v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v6 + *(int *)(a2 + 72), v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v27, v30, v29);
  Publishers.Merge4.init(_:_:_:_:)((uint64_t)v25, v23, v31);
}

void Publishers.Merge3.merge<A, B>(with:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v43 = a7;
  v44 = a6;
  v40 = a5;
  v41 = a2;
  v36 = a4;
  v42 = a8;
  v10 = *(_QWORD *)(a5 - 8);
  v38 = a1;
  v39 = v10;
  v11 = MEMORY[0x1E0C80A78](a1);
  v37 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v34 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 + 32);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v14);
  v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v22 + 24);
  v24 = *(_QWORD *)(v23 - 8);
  v33 = v23;
  v25 = MEMORY[0x1E0C80A78](v19);
  v27 = (char *)&v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(v28 + 16);
  MEMORY[0x1E0C80A78](v25);
  v31 = (char *)&v33 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v31, v8, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v8 + *(int *)(a3 + 68), v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v8 + *(int *)(a3 + 72), v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v38, v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v37, v41, v40);
  Publishers.Merge5.init(_:_:_:_:_:)((uint64_t)v31, v29, v42);
}

void Publishers.Merge3.merge<A, B, C>(with:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD v38[2];
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;

  v52 = a9;
  v53 = a8;
  v48 = a7;
  v49 = a3;
  v43 = a6;
  v41 = a5;
  v45 = a1;
  v50 = a11;
  v51 = a10;
  v46 = *(_QWORD *)(a7 - 8);
  v47 = a2;
  v13 = MEMORY[0x1E0C80A78](a1);
  v44 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x1E0C80A78](v13);
  v54 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v39 = (char *)v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v21 + 32);
  v23 = *(_QWORD *)(v22 - 8);
  v38[0] = v22;
  v24 = MEMORY[0x1E0C80A78](v19);
  v26 = (char *)v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(v27 + 24);
  v29 = *(_QWORD *)(v28 - 8);
  v38[1] = v28;
  v30 = MEMORY[0x1E0C80A78](v24);
  v32 = (char *)v38 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(_QWORD *)(v33 + 16);
  MEMORY[0x1E0C80A78](v30);
  v36 = (char *)v38 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, v11, v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v11 + *(int *)(a4 + 68), v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v11 + *(int *)(a4 + 72), v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, v45, v41);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v54, v47, v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v44, v49, v48);
  Publishers.Merge6.init(_:_:_:_:_:_:)((uint64_t)v36, v34, v52);
}

void Publishers.Merge3.merge<A, B, C, D>(with:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD v44[4];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;

  v51 = a8;
  v52 = a1;
  v48 = a7;
  v46 = a6;
  v57 = a3;
  v58 = a4;
  v62 = a9;
  v61 = a11;
  v59 = a13;
  v60 = a12;
  v56 = a10;
  v15 = *(_QWORD *)(a10 - 8);
  v54 = a2;
  v55 = v15;
  v16 = MEMORY[0x1E0C80A78](a1);
  v53 = (char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v49 = (char *)v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = *(_QWORD *)(v21 - 8);
  v22 = MEMORY[0x1E0C80A78](v19);
  v64 = (char *)v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x1E0C80A78](v22);
  v63 = (char *)v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(v27 + 32);
  v29 = *(_QWORD *)(v28 - 8);
  v44[1] = v28;
  v30 = MEMORY[0x1E0C80A78](v25);
  v32 = (char *)v44 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[2] = v32;
  v34 = *(_QWORD *)(v33 + 24);
  v35 = *(_QWORD *)(v34 - 8);
  v44[3] = v34;
  v36 = MEMORY[0x1E0C80A78](v30);
  v38 = (char *)v44 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(_QWORD *)(v39 + 16);
  MEMORY[0x1E0C80A78](v36);
  v42 = (char *)v44 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v13, v40);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v38, v13 + *(int *)(a5 + 68), v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v13 + *(int *)(a5 + 72), v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v63, v52, v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v64, v54, v48);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v57, v51);
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v53, v58, v56);
  Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v42, v40, v62);
}

void Publishers.Merge3.merge<A, B, C, D, E>(with:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD v48[4];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;

  v52 = a8;
  v50 = a7;
  v64 = a4;
  v65 = a5;
  v61 = a3;
  v59 = a2;
  v57 = a1;
  v69 = a9;
  v67 = a14;
  v68 = a13;
  v66 = a15;
  v54 = a10;
  v58 = a11;
  v63 = a12;
  v62 = *(_QWORD *)(a12 - 8);
  v17 = MEMORY[0x1E0C80A78](a1);
  v60 = (char *)v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v17);
  v55 = (char *)v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A78](v20);
  v72 = (char *)v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x1E0C80A78](v23);
  v71 = (char *)v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = *(_QWORD *)(v28 - 8);
  v29 = MEMORY[0x1E0C80A78](v26);
  v70 = (char *)v48 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(v31 + 32);
  v33 = *(_QWORD *)(v32 - 8);
  v48[0] = v32;
  v34 = MEMORY[0x1E0C80A78](v29);
  v36 = (char *)v48 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48[1] = v36;
  v38 = *(_QWORD *)(v37 + 24);
  v39 = *(_QWORD *)(v38 - 8);
  v48[2] = v38;
  v40 = MEMORY[0x1E0C80A78](v34);
  v42 = (char *)v48 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48[3] = v42;
  v44 = *(_QWORD *)(v43 + 16);
  MEMORY[0x1E0C80A78](v40);
  v46 = (char *)v48 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v15, v44);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v42, v15 + *(int *)(a6 + 68), v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v15 + *(int *)(a6 + 72), v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v70, v57, v50);
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v71, v59, v52);
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v72, v61, v54);
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, v64, v58);
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v60, v65, v63);
  Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v46, v69, v44);
}

uint64_t Publishers.Merge4.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 84));
}

uint64_t Publishers.Merge4.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 88));
}

uint64_t Publishers.Merge4.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 40) - 8) + 16))(a2, v2 + *(int *)(a1 + 92));
}

void Publishers.Merge4.receive<A>(subscriber:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Publishers._Merged();
}

void sub_18B5BC400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,_UNKNOWN **a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  void (*v27)(uint64_t **, uint64_t, uint64_t);

  swift_allocObject();
  v26 = specialized Publishers._Merged.init(downstream:count:)(v22, 4);
  a21 = a1;
  a22 = &protocol witness table for Publishers._Merged<A, B, C>;
  a18 = v26;
  v27 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v23 + 40);
  swift_retain();
  v27(&a18, v24, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a18);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, (uint64_t)v26, &a15);
  a20 = v24;
  a21 = v23;
  type metadata accessor for Publishers._Merged.Side();
}

uint64_t sub_18B5BC494(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers._Merged<A, B, C>.Side, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v3, a1, v7, v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[3], a1, v1[7], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[4], a1, v1[8], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[5], a1, v1[9], v5);
  swift_release();
  return swift_release();
}

void Publishers.Merge4.merge<A>(with:)(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = v5;
  v37 = a1;
  v38 = a4;
  v39 = a5;
  v35 = *(_QWORD *)(a3 - 8);
  v36 = a3;
  v8 = MEMORY[0x1E0C80A78](a1);
  v34 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_QWORD *)(v10 + 40);
  v32 = *(_QWORD *)(v33 - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v31 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 32);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v11);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v19 + 24);
  v21 = *(_QWORD *)(v20 - 8);
  v30 = v20;
  v22 = MEMORY[0x1E0C80A78](v16);
  v24 = (char *)&v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(v25 + 16);
  MEMORY[0x1E0C80A78](v22);
  v28 = (char *)&v30 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v28, v6, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v6 + a2[21], v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v6 + a2[22], v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v31, v6 + a2[23], v33);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v37, v36);
  Publishers.Merge5.init(_:_:_:_:_:)((uint64_t)v28, v26, v39);
}

void Publishers.Merge4.merge<A, B>(with:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v48 = a7;
  v49 = a6;
  v46 = a5;
  v47 = a2;
  v42 = a4;
  v50 = a8;
  v10 = *(_QWORD *)(a5 - 8);
  v44 = a1;
  v45 = v10;
  v11 = MEMORY[0x1E0C80A78](a1);
  v43 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v40 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = *(_QWORD *)(v16 + 40);
  v39 = *(_QWORD *)(v51 - 8);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(v20 + 32);
  v21 = *(_QWORD *)(v37 - 8);
  v22 = MEMORY[0x1E0C80A78](v17);
  v24 = (char *)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v24;
  v26 = *(_QWORD *)(v25 + 24);
  v27 = *(_QWORD *)(v26 - 8);
  v38 = v26;
  v28 = MEMORY[0x1E0C80A78](v22);
  v30 = (char *)&v36 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(v31 + 16);
  MEMORY[0x1E0C80A78](v28);
  v34 = (char *)&v36 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v8, v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v30, v8 + a3[21], v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v8 + a3[22], v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v19, v8 + a3[23], v51);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v40, v44, v42);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v43, v47, v46);
  Publishers.Merge6.init(_:_:_:_:_:_:)((uint64_t)v34, v32, v50);
}

void Publishers.Merge4.merge<A, B, C>(with:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD v41[4];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;

  v57 = a8;
  v58 = a9;
  v53 = a7;
  v54 = a3;
  v48 = a6;
  v45 = a5;
  v50 = a1;
  v51 = a2;
  v55 = a11;
  v56 = a10;
  v52 = *(_QWORD *)(a7 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  v49 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x1E0C80A78](v13);
  v46 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v60 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *(_QWORD *)(v21 + 40);
  v42 = *(_QWORD *)(v43 - 8);
  v22 = MEMORY[0x1E0C80A78](v19);
  v59 = (char *)v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(v24 + 32);
  v26 = *(_QWORD *)(v25 - 8);
  v41[1] = v25;
  v27 = MEMORY[0x1E0C80A78](v22);
  v29 = (char *)v41 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(v30 + 24);
  v32 = *(_QWORD *)(v31 - 8);
  v41[2] = v29;
  v41[3] = v31;
  v33 = MEMORY[0x1E0C80A78](v27);
  v35 = (char *)v41 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(v36 + 16);
  MEMORY[0x1E0C80A78](v33);
  v39 = (char *)v41 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, v11, v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v35, v11 + a4[21], v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, v11 + a4[22], v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v59, v11 + a4[23], v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v60, v50, v45);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v51, v48);
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v49, v54, v53);
  Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v39, v37, v58);
}

void Publishers.Merge4.merge<A, B, C, D>(with:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD v47[4];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;

  v56 = a8;
  v54 = a7;
  v51 = a6;
  v62 = a3;
  v63 = a4;
  v57 = a1;
  v67 = a9;
  v66 = a11;
  v64 = a13;
  v65 = a12;
  v61 = a10;
  v15 = *(_QWORD *)(a10 - 8);
  v59 = a2;
  v60 = v15;
  v16 = MEMORY[0x1E0C80A78](a1);
  v58 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v70 = (char *)v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = *(_QWORD *)(v21 - 8);
  v22 = MEMORY[0x1E0C80A78](v19);
  v52 = (char *)v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x1E0C80A78](v22);
  v69 = (char *)v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = *(_QWORD *)(v27 + 40);
  v48 = *(_QWORD *)(v49 - 8);
  v28 = MEMORY[0x1E0C80A78](v25);
  v68 = (char *)v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(v30 + 32);
  v32 = *(_QWORD *)(v31 - 8);
  v47[0] = v31;
  v33 = MEMORY[0x1E0C80A78](v28);
  v35 = (char *)v47 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[1] = v35;
  v37 = *(_QWORD *)(v36 + 24);
  v38 = *(_QWORD *)(v37 - 8);
  v47[2] = v37;
  v39 = MEMORY[0x1E0C80A78](v33);
  v41 = (char *)v47 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[3] = v41;
  v43 = *(_QWORD *)(v42 + 16);
  MEMORY[0x1E0C80A78](v39);
  v45 = (char *)v47 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v13, v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v41, v13 + a5[21], v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v35, v13 + a5[22], v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v68, v13 + a5[23], v49);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v69, v57, v51);
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v59, v54);
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v70, v62, v56);
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v58, v63, v61);
  Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v45, v67, v43);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge4<A, B, C, D>()
{
  Publishers.Merge4.receive<A>(subscriber:)();
}

uint64_t Publishers.Merge5.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 100));
}

uint64_t Publishers.Merge5.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 104));
}

uint64_t Publishers.Merge5.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 40) - 8) + 16))(a2, v2 + *(int *)(a1 + 108));
}

uint64_t Publishers.Merge5.e.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 48) - 8) + 16))(a2, v2 + *(int *)(a1 + 112));
}

void Publishers.Merge5.merge<A>(with:)(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = v5;
  v43 = a1;
  v44 = a4;
  v45 = a5;
  v41 = *(_QWORD *)(a3 - 8);
  v42 = a3;
  v8 = MEMORY[0x1E0C80A78](a1);
  v40 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = *(_QWORD *)(v10 + 48);
  v38 = *(_QWORD *)(v39 - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v37 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = *(_QWORD *)(v13 + 40);
  v36 = *(_QWORD *)(v46 - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(_QWORD *)(v17 + 32);
  v18 = *(_QWORD *)(v34 - 8);
  v19 = MEMORY[0x1E0C80A78](v14);
  v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = v21;
  v23 = *(_QWORD *)(v22 + 24);
  v24 = *(_QWORD *)(v23 - 8);
  v35 = v23;
  v25 = MEMORY[0x1E0C80A78](v19);
  v27 = (char *)&v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(v28 + 16);
  MEMORY[0x1E0C80A78](v25);
  v31 = (char *)&v33 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v31, v6, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v6 + a2[25], v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v6 + a2[26], v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v16, v6 + a2[27], v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v37, v6 + a2[28], v39);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v40, v43, v42);
  Publishers.Merge6.init(_:_:_:_:_:_:)((uint64_t)v31, v29, v45);
}

void Publishers.Merge5.merge<A, B>(with:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD v39[4];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;

  v52 = a7;
  v53 = a6;
  v50 = a5;
  v51 = a2;
  v46 = a4;
  v54 = a8;
  v10 = *(_QWORD *)(a5 - 8);
  v48 = a1;
  v49 = v10;
  v11 = MEMORY[0x1E0C80A78](a1);
  v47 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v44 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *(_QWORD *)(v16 + 48);
  v42 = *(_QWORD *)(v43 - 8);
  v17 = MEMORY[0x1E0C80A78](v14);
  v56 = (char *)v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *(_QWORD *)(v19 + 40);
  v40 = *(_QWORD *)(v41 - 8);
  v20 = MEMORY[0x1E0C80A78](v17);
  v55 = (char *)v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v22 + 32);
  v24 = *(_QWORD *)(v23 - 8);
  v39[1] = v23;
  v25 = MEMORY[0x1E0C80A78](v20);
  v27 = (char *)v39 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(v28 + 24);
  v30 = *(_QWORD *)(v29 - 8);
  v39[2] = v27;
  v39[3] = v29;
  v31 = MEMORY[0x1E0C80A78](v25);
  v33 = (char *)v39 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *(_QWORD *)(v34 + 16);
  MEMORY[0x1E0C80A78](v31);
  v37 = (char *)v39 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v37, v8, v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v33, v8 + a3[25], v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v8 + a3[26], v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v55, v8 + a3[27], v41);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v56, v8 + a3[28], v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v48, v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v47, v51, v50);
  Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v37, v35, v54);
}

void Publishers.Merge5.merge<A, B, C>(with:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD v44[4];
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;

  v63 = a8;
  v64 = a9;
  v59 = a7;
  v60 = a3;
  v54 = a6;
  v55 = a1;
  v51 = a5;
  v61 = a11;
  v62 = a10;
  v57 = *(_QWORD *)(a7 - 8);
  v58 = a2;
  v13 = MEMORY[0x1E0C80A78](a1);
  v56 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x1E0C80A78](v13);
  v52 = (char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v49 = (char *)v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = *(_QWORD *)(v21 + 48);
  v47 = *(_QWORD *)(v48 - 8);
  v22 = MEMORY[0x1E0C80A78](v19);
  v67 = (char *)v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = *(_QWORD *)(v24 + 40);
  v45 = *(_QWORD *)(v66 - 8);
  v25 = MEMORY[0x1E0C80A78](v22);
  v65 = (char *)v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(v27 + 32);
  v29 = *(_QWORD *)(v28 - 8);
  v44[1] = v28;
  v30 = MEMORY[0x1E0C80A78](v25);
  v32 = (char *)v44 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[2] = v32;
  v34 = *(_QWORD *)(v33 + 24);
  v35 = *(_QWORD *)(v34 - 8);
  v44[3] = v34;
  v36 = MEMORY[0x1E0C80A78](v30);
  v38 = (char *)v44 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v38;
  v40 = *(_QWORD *)(v39 + 16);
  MEMORY[0x1E0C80A78](v36);
  v42 = (char *)v44 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v11, v40);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v38, v11 + a4[25], v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v11 + a4[26], v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v65, v11 + a4[27], v66);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v67, v11 + a4[28], v48);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v55, v51);
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v58, v54);
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v56, v60, v59);
  Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v42, v64, v40);
}

uint64_t Publishers.Merge6.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 116));
}

uint64_t Publishers.Merge6.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 120));
}

uint64_t Publishers.Merge6.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 40) - 8) + 16))(a2, v2 + *(int *)(a1 + 124));
}

uint64_t Publishers.Merge6.e.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 48) - 8) + 16))(a2, v2 + *(int *)(a1 + 128));
}

uint64_t Publishers.Merge6.f.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + 16))(a2, v2 + *(int *)(a1 + 132));
}

void Publishers.Merge6.merge<A>(with:)(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;

  v6 = v5;
  v47 = a1;
  v48 = a4;
  v49 = a5;
  v45 = *(_QWORD *)(a3 - 8);
  v46 = a3;
  v8 = MEMORY[0x1E0C80A78](a1);
  v44 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *(_QWORD *)(v10 + 56);
  v42 = *(_QWORD *)(v43 - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v41 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(_QWORD *)(v13 + 48);
  v39 = *(_QWORD *)(v40 - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v51 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(_QWORD *)(v16 + 40);
  v37 = *(_QWORD *)(v38 - 8);
  v17 = MEMORY[0x1E0C80A78](v14);
  v50 = (char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v19 + 32);
  v21 = *(_QWORD *)(v20 - 8);
  v36[0] = v20;
  v22 = MEMORY[0x1E0C80A78](v17);
  v24 = (char *)v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(v25 + 24);
  v27 = *(_QWORD *)(v26 - 8);
  v36[1] = v24;
  v36[2] = v26;
  v28 = MEMORY[0x1E0C80A78](v22);
  v30 = (char *)v36 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(v31 + 16);
  MEMORY[0x1E0C80A78](v28);
  v34 = (char *)v36 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v6, v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v30, v6 + a2[29], v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v6 + a2[30], v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v50, v6 + a2[31], v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v51, v6 + a2[32], v40);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v41, v6 + a2[33], v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v47, v46);
  Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v34, v32, v49);
}

void Publishers.Merge6.merge<A, B>(with:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD v42[4];
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;

  v58 = a7;
  v59 = a6;
  v56 = a5;
  v57 = a2;
  v52 = a4;
  v60 = a8;
  v10 = *(_QWORD *)(a5 - 8);
  v54 = a1;
  v55 = v10;
  v11 = MEMORY[0x1E0C80A78](a1);
  v53 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v50 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = *(_QWORD *)(v16 + 56);
  v48 = *(_QWORD *)(v49 - 8);
  v17 = MEMORY[0x1E0C80A78](v14);
  v47 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = *(_QWORD *)(v19 + 48);
  v46 = *(_QWORD *)(v63 - 8);
  v20 = MEMORY[0x1E0C80A78](v17);
  v62 = (char *)v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = *(_QWORD *)(v22 + 40);
  v43 = *(_QWORD *)(v45 - 8);
  v23 = MEMORY[0x1E0C80A78](v20);
  v61 = (char *)v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(v25 + 32);
  v27 = *(_QWORD *)(v26 - 8);
  v42[1] = v26;
  v28 = MEMORY[0x1E0C80A78](v23);
  v30 = (char *)v42 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42[2] = v30;
  v32 = *(_QWORD *)(v31 + 24);
  v33 = *(_QWORD *)(v32 - 8);
  v42[3] = v32;
  v34 = MEMORY[0x1E0C80A78](v28);
  v36 = (char *)v42 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v36;
  v38 = *(_QWORD *)(v37 + 16);
  MEMORY[0x1E0C80A78](v34);
  v40 = (char *)v42 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v40, v8, v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v8 + a3[29], v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v30, v8 + a3[30], v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v61, v8 + a3[31], v45);
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v62, v8 + a3[32], v63);
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v8 + a3[33], v49);
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v54, v52);
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v53, v57, v56);
  Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v40, v60, v38);
}

uint64_t Publishers.Merge7.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 132));
}

uint64_t Publishers.Merge7.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 136));
}

uint64_t Publishers.Merge7.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 40) - 8) + 16))(a2, v2 + *(int *)(a1 + 140));
}

uint64_t Publishers.Merge7.e.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 48) - 8) + 16))(a2, v2 + *(int *)(a1 + 144));
}

uint64_t Publishers.Merge7.f.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + 16))(a2, v2 + *(int *)(a1 + 148));
}

uint64_t Publishers.Merge7.g.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 64) - 8) + 16))(a2, v2 + *(int *)(a1 + 152));
}

void Publishers.Merge7.merge<A>(with:)(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD v39[5];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;

  v6 = v5;
  v53 = a1;
  v54 = a4;
  v55 = a5;
  v51 = *(_QWORD *)(a3 - 8);
  v52 = a3;
  v8 = MEMORY[0x1E0C80A78](a1);
  v50 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = *(_QWORD *)(v10 + 64);
  v48 = *(_QWORD *)(v49 - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v47 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = *(_QWORD *)(v13 + 56);
  v45 = *(_QWORD *)(v46 - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v44 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = *(_QWORD *)(v16 + 48);
  v43 = *(_QWORD *)(v57 - 8);
  v17 = MEMORY[0x1E0C80A78](v14);
  v56 = (char *)v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *(_QWORD *)(v19 + 40);
  v40 = *(_QWORD *)(v41 - 8);
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39[2] = v22;
  v24 = *(_QWORD *)(v23 + 32);
  v25 = *(_QWORD *)(v24 - 8);
  v39[1] = v24;
  v26 = MEMORY[0x1E0C80A78](v20);
  v28 = (char *)v39 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_QWORD *)(v29 + 24);
  v31 = *(_QWORD *)(v30 - 8);
  v39[3] = v28;
  v39[4] = v30;
  v32 = MEMORY[0x1E0C80A78](v26);
  v34 = (char *)v39 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)(v35 + 16);
  MEMORY[0x1E0C80A78](v32);
  v37 = (char *)v39 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v38 + 16))(v37, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v34, v6 + a2[33], v30);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v6 + a2[34], v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v22, v6 + a2[35], v41);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v56, v6 + a2[36], v57);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v6 + a2[37], v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v6 + a2[38], v49);
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v53, v52);
  Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v37, v55, v42);
}

uint64_t Publishers.Merge8.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 148));
}

uint64_t Publishers.Merge8.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 152));
}

uint64_t Publishers.Merge8.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 40) - 8) + 16))(a2, v2 + *(int *)(a1 + 156));
}

uint64_t Publishers.Merge8.e.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 48) - 8) + 16))(a2, v2 + *(int *)(a1 + 160));
}

uint64_t Publishers.Merge8.f.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + 16))(a2, v2 + *(int *)(a1 + 164));
}

uint64_t Publishers.Merge8.g.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 64) - 8) + 16))(a2, v2 + *(int *)(a1 + 168));
}

uint64_t Publishers.Merge8.h.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 72) - 8) + 16))(a2, v2 + *(int *)(a1 + 172));
}

void Publishers.Merge8.receive<A>(subscriber:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Publishers._Merged();
}

void sub_18B5BE6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,_UNKNOWN **a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  void (*v27)(uint64_t **, uint64_t, uint64_t);

  swift_allocObject();
  v26 = specialized Publishers._Merged.init(downstream:count:)(v22, 8);
  a21 = a1;
  a22 = &protocol witness table for Publishers._Merged<A, B, C>;
  a18 = v26;
  v27 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v23 + 40);
  swift_retain();
  v27(&a18, v24, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a18);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, (uint64_t)v26, &a15);
  a20 = v24;
  a21 = v23;
  type metadata accessor for Publishers._Merged.Side();
}

uint64_t sub_18B5BE750(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = MEMORY[0x18D77ACE4](&protocol conformance descriptor for Publishers._Merged<A, B, C>.Side, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v3, a1, v7, v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[3], a1, v1[11], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[4], a1, v1[12], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[5], a1, v1[13], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(4, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[6], a1, v1[14], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(5, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[7], a1, v1[15], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(6, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[8], a1, v1[16], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(7, v2, &v12);
  v9 = v12;
  v10 = v13;
  v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[9], a1, v1[17], v5);
  swift_release();
  return swift_release();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge8<A, B, C, D, E, F, G, H>()
{
  Publishers.Merge8.receive<A>(subscriber:)();
}

uint64_t Publishers.MergeMany.publishers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Publishers.MergeMany.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Publishers.MergeMany.merge(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 + 16);
  getContiguousArrayStorageType<A>(for:)(v5, v5);
  v6 = *(_QWORD *)(v5 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, a1, v5);
  _finalizeUninitializedArray<A>(_:)();
  v8 = static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  v11 = v8;
  v9 = type metadata accessor for Array();
  MEMORY[0x18D77ACE4](MEMORY[0x1E0DEAF38], v9);
  return Publishers.MergeMany.init<A>(_:)((uint64_t)&v11, v9, a3);
}

void Publishers._Merged.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0x656772654DLL;
  a1[1] = 0xE500000000000000;
}

void Publishers._Merged.Side.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_18B5F41E0;
  *(_QWORD *)(v2 + 32) = 0xD000000000000012;
  *(_QWORD *)(v2 + 40) = 0x800000018B5FECA0;
  *(_QWORD *)(v2 + 72) = &type metadata for CombineIdentifier;
  type metadata accessor for Publishers._Merged();
}

uint64_t sub_18B5BEC30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  CustomCombineIdentifierConvertible<>.combineIdentifier.getter(v0);
  v3 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v1);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers._Merged<A, B, C>.Side()
{
  return 0x656772654DLL;
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers._Merged<A, B, C>.Side(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers._Merged<A, B, C>(_QWORD *a1@<X8>)
{
  Publishers._Merged.playgroundDescription.getter(a1);
}

uint64_t protocol witness for Cancellable.cancel() in conformance Publishers._Merged<A, B, C>()
{
  return Publishers._Merged.cancel()();
}

void static Publishers.Merge<>.== infix(_:_:)()
{
  type metadata accessor for Publishers.Merge();
}

uint64_t sub_18B5BED6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  void (*v11)(_BYTE *, uint64_t, uint64_t);
  char v12;
  void (*v13)(_BYTE *, uint64_t);
  _BYTE v15[96];

  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v9 = &v15[-v8];
  v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  v11 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16);
  v11(v9, v2, a1);
  v11(v7, v1, a1);
  if ((v10 & 1) != 0)
    v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  else
    v12 = 0;
  v13 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v13(v7, a1);
  v13(v9, a1);
  return v12 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge<A, B>()
{
  static Publishers.Merge<>.== infix(_:_:)();
}

void static Publishers.Merge3<>.== infix(_:_:)()
{
  type metadata accessor for Publishers.Merge3();
}

uint64_t sub_18B5BEEC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  char v16;
  void (*v17)(_BYTE *, uint64_t, uint64_t);
  char v18;
  void (*v19)(_BYTE *, uint64_t);
  char v20;
  _BYTE v22[96];

  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = &v22[-v9];
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = &v22[-v12];
  MEMORY[0x1E0C80A78](v11);
  v15 = &v22[-v14];
  v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  v17 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16);
  v17(v15, v2, a1);
  v17(v13, v1, a1);
  if ((v16 & 1) != 0)
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  else
    v18 = 0;
  v19 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v19(v13, a1);
  v19(v15, a1);
  v17(v10, v2, a1);
  v17(v7, v1, a1);
  if ((v18 & 1) != 0)
    v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  else
    v20 = 0;
  v19(v7, a1);
  v19(v10, a1);
  return v20 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge3<A, B, C>()
{
  static Publishers.Merge3<>.== infix(_:_:)();
}

uint64_t sub_18B5BF084(char a1)
{
  return a1 & 1;
}

void static Publishers.Merge4<>.== infix(_:_:)()
{
  type metadata accessor for Publishers.Merge4();
}

uint64_t sub_18B5BF0F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  char v21;
  void (*v22)(_BYTE *, uint64_t, uint64_t);
  uint64_t v23;
  char v24;
  void (*v25)(_BYTE *, uint64_t);
  uint64_t v26;
  char v27;
  _BYTE *v28;
  _BYTE *v29;
  char v30;
  _BYTE v32[96];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v3 - 160) = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x1E0C80A78](v6);
  *(_QWORD *)(v3 - 168) = &v32[-v9];
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = &v32[-v11];
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = &v32[-v14];
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = &v32[-v17];
  MEMORY[0x1E0C80A78](v16);
  v20 = &v32[-v19];
  v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  v22 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v3 - 152) = v2;
  v22(v20, v2, a1);
  v23 = v1;
  v22(v18, v1, a1);
  if ((v21 & 1) != 0)
    v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  else
    v24 = 0;
  v25 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v25(v18, a1);
  v25(v20, a1);
  v26 = *(_QWORD *)(v3 - 152);
  v22(v15, v26, a1);
  v22(v12, v23, a1);
  if ((v24 & 1) == 0)
  {
    v25(v12, a1);
    v25(v15, a1);
    v28 = *(_BYTE **)(v3 - 168);
    v22(v28, v26, a1);
    v29 = *(_BYTE **)(v3 - 160);
    v22(v29, v23, a1);
    goto LABEL_8;
  }
  v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  v25(v12, a1);
  v25(v15, a1);
  v28 = *(_BYTE **)(v3 - 168);
  v22(v28, v26, a1);
  v29 = *(_BYTE **)(v3 - 160);
  v22(v29, v23, a1);
  if ((v27 & 1) == 0)
  {
LABEL_8:
    v30 = 0;
    goto LABEL_9;
  }
  v30 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_9:
  v25(v29, a1);
  v25(v28, a1);
  return v30 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge4<A, B, C, D>()
{
  static Publishers.Merge4<>.== infix(_:_:)();
}

uint64_t sub_18B5BF3AC(char a1)
{
  return a1 & 1;
}

void static Publishers.Merge5<>.== infix(_:_:)()
{
  type metadata accessor for Publishers.Merge5();
}

uint64_t sub_18B5BF420(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  char v25;
  void (*v26)(_BYTE *, uint64_t, uint64_t);
  uint64_t v27;
  char v28;
  void (*v29)(_BYTE *, uint64_t);
  uint64_t v30;
  char v31;
  _BYTE *v32;
  _BYTE *v33;
  char v34;
  _BYTE *v35;
  _BYTE *v36;
  char v37;
  _BYTE v39[96];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v3 - 184) = &v39[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x1E0C80A78](v6);
  *(_QWORD *)(v3 - 192) = &v39[-v9];
  v10 = MEMORY[0x1E0C80A78](v8);
  *(_QWORD *)(v3 - 208) = &v39[-v11];
  v12 = MEMORY[0x1E0C80A78](v10);
  *(_QWORD *)(v3 - 200) = &v39[-v13];
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = &v39[-v15];
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = &v39[-v18];
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = &v39[-v21];
  MEMORY[0x1E0C80A78](v20);
  v24 = &v39[-v23];
  v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  v26 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v3 - 176) = v1;
  v26(v24, v1, a1);
  v27 = v2;
  v26(v22, v2, a1);
  if ((v25 & 1) != 0)
    v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  else
    v28 = 0;
  v29 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v29(v22, a1);
  v29(v24, a1);
  v30 = *(_QWORD *)(v3 - 176);
  v26(v19, v30, a1);
  v26(v16, v27, a1);
  if ((v28 & 1) == 0)
  {
    v29(v16, a1);
    v29(v19, a1);
    v32 = *(_BYTE **)(v3 - 200);
    v26(v32, v30, a1);
    v33 = *(_BYTE **)(v3 - 208);
    v26(v33, v27, a1);
    goto LABEL_9;
  }
  v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  v29(v16, a1);
  v29(v19, a1);
  v32 = *(_BYTE **)(v3 - 200);
  v26(v32, v30, a1);
  v33 = *(_BYTE **)(v3 - 208);
  v26(v33, v27, a1);
  if ((v31 & 1) == 0)
  {
LABEL_9:
    v29(v33, a1);
    v29(v32, a1);
    v35 = *(_BYTE **)(v3 - 192);
    v26(v35, v30, a1);
    v36 = *(_BYTE **)(v3 - 184);
    v26(v36, v27, a1);
    goto LABEL_10;
  }
  v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  v29(v33, a1);
  v29(v32, a1);
  v35 = *(_BYTE **)(v3 - 192);
  v26(v35, v30, a1);
  v36 = *(_BYTE **)(v3 - 184);
  v26(v36, v27, a1);
  if ((v34 & 1) == 0)
  {
LABEL_10:
    v37 = 0;
    goto LABEL_11;
  }
  v37 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_11:
  v29(v36, a1);
  v29(v35, a1);
  return v37 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge5<A, B, C, D, E>()
{
  static Publishers.Merge5<>.== infix(_:_:)();
}

uint64_t sub_18B5BF7CC(char a1)
{
  return a1 & 1;
}

void static Publishers.Merge6<>.== infix(_:_:)()
{
  type metadata accessor for Publishers.Merge6();
}

uint64_t sub_18B5BF860(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  char v29;
  void (*v30)(_BYTE *, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  _BYTE *v33;
  void (*v34)(_BYTE *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char v37;
  _BYTE *v38;
  _BYTE *v39;
  char v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  char v44;
  char v45;
  _BYTE v47[96];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v3 - 200) = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x1E0C80A78](v6);
  *(_QWORD *)(v3 - 208) = &v47[-v9];
  v10 = MEMORY[0x1E0C80A78](v8);
  *(_QWORD *)(v3 - 224) = &v47[-v11];
  v12 = MEMORY[0x1E0C80A78](v10);
  *(_QWORD *)(v3 - 216) = &v47[-v13];
  v14 = MEMORY[0x1E0C80A78](v12);
  *(_QWORD *)(v3 - 240) = &v47[-v15];
  v16 = MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)(v3 - 232) = &v47[-v17];
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = &v47[-v19];
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = &v47[-v22];
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = &v47[-v25];
  MEMORY[0x1E0C80A78](v24);
  v28 = &v47[-v27];
  v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  v30 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v3 - 192) = v2;
  v30(v28, v2, a1);
  v31 = v1;
  v30(v26, v1, a1);
  if ((v29 & 1) != 0)
    v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  else
    v32 = 0;
  v33 = *(_BYTE **)(v3 - 208);
  v34 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v34(v26, a1);
  v34(v28, a1);
  v35 = *(_QWORD *)(v3 - 192);
  v30(v23, v35, a1);
  v36 = v31;
  v30(v20, v31, a1);
  if ((v32 & 1) == 0)
  {
    v34(v20, a1);
    v34(v23, a1);
    v38 = *(_BYTE **)(v3 - 232);
    v30(v38, v35, a1);
    v39 = *(_BYTE **)(v3 - 240);
    v30(v39, v36, a1);
    goto LABEL_10;
  }
  v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  v34(v20, a1);
  v34(v23, a1);
  v38 = *(_BYTE **)(v3 - 232);
  v30(v38, v35, a1);
  v39 = *(_BYTE **)(v3 - 240);
  v30(v39, v36, a1);
  if ((v37 & 1) == 0)
  {
LABEL_10:
    v34(v39, a1);
    v34(v38, a1);
    v41 = *(_BYTE **)(v3 - 216);
    v30(v41, v35, a1);
    v42 = *(_BYTE **)(v3 - 224);
    v30(v42, v36, a1);
    v43 = *(_BYTE **)(v3 - 200);
    goto LABEL_11;
  }
  v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  v34(v39, a1);
  v34(v38, a1);
  v41 = *(_BYTE **)(v3 - 216);
  v30(v41, v35, a1);
  v42 = *(_BYTE **)(v3 - 224);
  v30(v42, v36, a1);
  v43 = *(_BYTE **)(v3 - 200);
  if ((v40 & 1) == 0)
  {
LABEL_11:
    v34(v42, a1);
    v34(v41, a1);
    v30(v33, v35, a1);
    v30(v43, v36, a1);
    goto LABEL_12;
  }
  v44 = dispatch thunk of static Equatable.== infix(_:_:)();
  v34(v42, a1);
  v34(v41, a1);
  v30(v33, v35, a1);
  v30(v43, v36, a1);
  if ((v44 & 1) == 0)
  {
LABEL_12:
    v45 = 0;
    goto LABEL_13;
  }
  v45 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_13:
  v34(v43, a1);
  v34(v33, a1);
  return v45 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge6<A, B, C, D, E, F>()
{
  static Publishers.Merge6<>.== infix(_:_:)();
}

uint64_t sub_18B5BFD08(char a1)
{
  return a1 & 1;
}

void static Publishers.Merge7<>.== infix(_:_:)()
{
  type metadata accessor for Publishers.Merge7();
}

uint64_t sub_18B5BFDBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  char v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t, uint64_t);
  char v36;
  void (*v37)(_BYTE *, uint64_t);
  uint64_t v38;
  char v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  char v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  char v48;
  char v49;
  _BYTE *v50;
  _BYTE *v51;
  char v52;
  _BYTE v54[96];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v3 - 208) = &v54[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x1E0C80A78](v6);
  *(_QWORD *)(v3 - 216) = &v54[-v9];
  v10 = MEMORY[0x1E0C80A78](v8);
  *(_QWORD *)(v3 - 232) = &v54[-v11];
  v12 = MEMORY[0x1E0C80A78](v10);
  *(_QWORD *)(v3 - 224) = &v54[-v13];
  v14 = MEMORY[0x1E0C80A78](v12);
  *(_QWORD *)(v3 - 248) = &v54[-v15];
  v16 = MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)(v3 - 240) = &v54[-v17];
  v18 = MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v3 - 264) = &v54[-v19];
  v20 = MEMORY[0x1E0C80A78](v18);
  *(_QWORD *)(v3 - 256) = &v54[-v21];
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = &v54[-v23];
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = &v54[-v26];
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = &v54[-v29];
  MEMORY[0x1E0C80A78](v28);
  v32 = &v54[-v31];
  v33 = dispatch thunk of static Equatable.== infix(_:_:)();
  v34 = v5;
  v35 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v35(v32, v2, a1);
  v35(v30, v1, a1);
  if ((v33 & 1) != 0)
    v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  else
    v36 = 0;
  v37 = *(void (**)(_BYTE *, uint64_t))(v34 + 8);
  v37(v30, a1);
  v37(v32, a1);
  v35(v27, v2, a1);
  v38 = v1;
  v35(v24, v1, a1);
  if ((v36 & 1) == 0)
  {
    v37(v24, a1);
    v37(v27, a1);
    v40 = *(_BYTE **)(v3 - 256);
    v41 = v2;
    v35(v40, v2, a1);
    v42 = *(_BYTE **)(v3 - 264);
    v35(v42, v38, a1);
    goto LABEL_11;
  }
  v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37(v24, a1);
  v37(v27, a1);
  v40 = *(_BYTE **)(v3 - 256);
  v41 = v2;
  v35(v40, v2, a1);
  v42 = *(_BYTE **)(v3 - 264);
  v35(v42, v38, a1);
  if ((v39 & 1) == 0)
  {
LABEL_11:
    v37(v42, a1);
    v37(v40, a1);
    v44 = *(_BYTE **)(v3 - 240);
    v35(v44, v41, a1);
    v45 = *(_BYTE **)(v3 - 248);
    v35(v45, v38, a1);
    v47 = *(_BYTE **)(v3 - 232);
    v46 = *(_BYTE **)(v3 - 224);
    goto LABEL_12;
  }
  v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37(v42, a1);
  v37(v40, a1);
  v44 = *(_BYTE **)(v3 - 240);
  v35(v44, v41, a1);
  v45 = *(_BYTE **)(v3 - 248);
  v35(v45, v38, a1);
  v47 = *(_BYTE **)(v3 - 232);
  v46 = *(_BYTE **)(v3 - 224);
  if ((v43 & 1) == 0)
  {
LABEL_12:
    v37(v45, a1);
    v37(v44, a1);
    v35(v46, v41, a1);
    v35(v47, v38, a1);
    goto LABEL_13;
  }
  v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37(v45, a1);
  v37(v44, a1);
  v35(v46, v41, a1);
  v35(v47, v38, a1);
  if ((v48 & 1) == 0)
  {
LABEL_13:
    v37(v47, a1);
    v37(v46, a1);
    v50 = *(_BYTE **)(v3 - 216);
    v35(v50, v41, a1);
    v51 = *(_BYTE **)(v3 - 208);
    v35(v51, v38, a1);
    goto LABEL_14;
  }
  v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37(v47, a1);
  v37(v46, a1);
  v50 = *(_BYTE **)(v3 - 216);
  v35(v50, v41, a1);
  v51 = *(_BYTE **)(v3 - 208);
  v35(v51, v38, a1);
  if ((v49 & 1) == 0)
  {
LABEL_14:
    v52 = 0;
    goto LABEL_15;
  }
  v52 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_15:
  v37(v51, a1);
  v37(v50, a1);
  return v52 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge7<A, B, C, D, E, F, G>()
{
  static Publishers.Merge7<>.== infix(_:_:)();
}

uint64_t sub_18B5C0374(char a1)
{
  return a1 & 1;
}

void static Publishers.Merge8<>.== infix(_:_:)()
{
  type metadata accessor for Publishers.Merge8();
}

uint64_t sub_18B5C0444(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  char v37;
  uint64_t v38;
  void (*v39)(_BYTE *, uint64_t, uint64_t);
  char v40;
  void (*v41)(_BYTE *, uint64_t);
  uint64_t v42;
  char v43;
  _BYTE *v44;
  _BYTE *v45;
  char v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  char v51;
  _BYTE *v52;
  _BYTE *v53;
  char v54;
  char v55;
  _BYTE *v56;
  _BYTE *v57;
  char v58;
  _BYTE v60[96];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v3 - 232) = &v60[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x1E0C80A78](v6);
  *(_QWORD *)(v3 - 240) = &v60[-v9];
  v10 = MEMORY[0x1E0C80A78](v8);
  *(_QWORD *)(v3 - 256) = &v60[-v11];
  v12 = MEMORY[0x1E0C80A78](v10);
  *(_QWORD *)(v3 - 248) = &v60[-v13];
  v14 = MEMORY[0x1E0C80A78](v12);
  *(_QWORD *)(v3 - 272) = &v60[-v15];
  v16 = MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)(v3 - 264) = &v60[-v17];
  v18 = MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v3 - 288) = &v60[-v19];
  v20 = MEMORY[0x1E0C80A78](v18);
  *(_QWORD *)(v3 - 280) = &v60[-v21];
  v22 = MEMORY[0x1E0C80A78](v20);
  *(_QWORD *)(v3 - 304) = &v60[-v23];
  v24 = MEMORY[0x1E0C80A78](v22);
  *(_QWORD *)(v3 - 296) = &v60[-v25];
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = &v60[-v27];
  v29 = MEMORY[0x1E0C80A78](v26);
  v31 = &v60[-v30];
  v32 = MEMORY[0x1E0C80A78](v29);
  v34 = &v60[-v33];
  MEMORY[0x1E0C80A78](v32);
  v36 = &v60[-v35];
  v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  v38 = v5;
  v39 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v39(v36, v2, a1);
  *(_QWORD *)(v3 - 224) = v1;
  v39(v34, v1, a1);
  if ((v37 & 1) != 0)
    v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  else
    v40 = 0;
  v41 = *(void (**)(_BYTE *, uint64_t))(v38 + 8);
  v41(v34, a1);
  v41(v36, a1);
  v39(v31, v2, a1);
  v42 = *(_QWORD *)(v3 - 224);
  v39(v28, v42, a1);
  if ((v40 & 1) == 0)
  {
    v41(v28, a1);
    v41(v31, a1);
    v44 = *(_BYTE **)(v3 - 296);
    v39(v44, v2, a1);
    v45 = *(_BYTE **)(v3 - 304);
    v39(v45, v42, a1);
    goto LABEL_12;
  }
  v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  v41(v28, a1);
  v41(v31, a1);
  v44 = *(_BYTE **)(v3 - 296);
  v39(v44, v2, a1);
  v45 = *(_BYTE **)(v3 - 304);
  v39(v45, v42, a1);
  if ((v43 & 1) == 0)
  {
LABEL_12:
    v41(v45, a1);
    v41(v44, a1);
    v47 = *(_BYTE **)(v3 - 280);
    v39(v47, v2, a1);
    v48 = *(_BYTE **)(v3 - 288);
    v39(v48, v42, a1);
    v50 = *(_BYTE **)(v3 - 256);
    v49 = *(_BYTE **)(v3 - 248);
    goto LABEL_13;
  }
  v46 = dispatch thunk of static Equatable.== infix(_:_:)();
  v41(v45, a1);
  v41(v44, a1);
  v47 = *(_BYTE **)(v3 - 280);
  v39(v47, v2, a1);
  v48 = *(_BYTE **)(v3 - 288);
  v39(v48, v42, a1);
  v50 = *(_BYTE **)(v3 - 256);
  v49 = *(_BYTE **)(v3 - 248);
  if ((v46 & 1) == 0)
  {
LABEL_13:
    v41(v48, a1);
    v41(v47, a1);
    v52 = *(_BYTE **)(v3 - 264);
    v39(v52, v2, a1);
    v53 = *(_BYTE **)(v3 - 272);
    v39(v53, v42, a1);
    goto LABEL_14;
  }
  v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  v41(v48, a1);
  v41(v47, a1);
  v52 = *(_BYTE **)(v3 - 264);
  v39(v52, v2, a1);
  v53 = *(_BYTE **)(v3 - 272);
  v39(v53, v42, a1);
  if ((v51 & 1) == 0)
  {
LABEL_14:
    v41(v53, a1);
    v41(v52, a1);
    v39(v49, v2, a1);
    v39(v50, v42, a1);
    goto LABEL_15;
  }
  v54 = dispatch thunk of static Equatable.== infix(_:_:)();
  v41(v53, a1);
  v41(v52, a1);
  v39(v49, v2, a1);
  v39(v50, v42, a1);
  if ((v54 & 1) == 0)
  {
LABEL_15:
    v41(v50, a1);
    v41(v49, a1);
    v56 = *(_BYTE **)(v3 - 240);
    v39(v56, v2, a1);
    v57 = *(_BYTE **)(v3 - 232);
    v39(v57, v42, a1);
    goto LABEL_16;
  }
  v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  v41(v50, a1);
  v41(v49, a1);
  v56 = *(_BYTE **)(v3 - 240);
  v39(v56, v2, a1);
  v57 = *(_BYTE **)(v3 - 232);
  v39(v57, v42, a1);
  if ((v55 & 1) == 0)
  {
LABEL_16:
    v58 = 0;
    goto LABEL_17;
  }
  v58 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_17:
  v41(v57, a1);
  v41(v56, a1);
  return v58 & 1;
}

